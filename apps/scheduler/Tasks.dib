#!meta

{"kernelInfo":{"defaultKernelName":"spiral","items":[{"aliases":[],"name":"spiral"}]}}

#!markdown

## Tasks (Polyglot)

#!spiral

//// test

open testing

#!markdown

## types

#!spiral

inl types () =
    rust.types ()
    sm'.types ()

#!markdown

## task_name

#!spiral

nominal task_name = string

#!markdown

## manual_scheduling

#!spiral

union manual_scheduling =
    | WithSuggestion
    | WithoutSuggestion

#!markdown

## recurrency_offset

#!spiral

union recurrency_offset =
    | Days : i32
    | Weeks : i32
    | Months : i32

#!markdown

## day_of_week

#!spiral

union day_of_week =
    | Sunday
    | Monday
    | Tuesday
    | Wednesday
    | Thursday
    | Friday
    | Saturday

#!markdown

## month

#!spiral

union month =
    | January
    | February
    | March
    | April
    | May
    | June
    | July
    | August
    | September
    | October
    | November
    | December

#!markdown

## day

#!spiral

nominal day = i32

#!markdown

## year

#!spiral

nominal year = i32

#!markdown

## fixed_recurrency

#!spiral

union fixed_recurrency =
    | Weekly : day_of_week
    | Monthly : day
    | Yearly : day * month

#!markdown

## recurrency

#!spiral

union recurrency =
    | Offset : recurrency_offset
    | Fixed : list fixed_recurrency

#!markdown

## scheduling

#!spiral

union scheduling =
    | Manual : manual_scheduling
    | Recurrent : recurrency

#!markdown

## task

#!spiral

type task =
    {
        name : task_name
        scheduling : scheduling
    }

#!markdown

## date

#!spiral

type date =
    {
        year : year
        month : month
        day : day
    }

#!markdown

## status

#!spiral

union status =
    | Postponed : option ()

#!markdown

## event

#!spiral

type event =
    {
        date : date
        status : status
    }

#!markdown

## task_template

#!spiral

type task_template =
    {
        task : task
        events : list event
    }

#!markdown

## get_tasks (test)

#!spiral

//// test

inl get_tasks () : list task_template =
    [
        {
            task =
                {
                    name = task_name "01"
                    scheduling = Manual WithSuggestion
                }
            events = []
        }
        {
            task =
                {
                    name = task_name "02"
                    scheduling = Manual WithSuggestion
                }
            events = []
        }
        {
            task =
                {
                    name = task_name "03"
                    scheduling = Manual WithSuggestion
                }
            events = []
        }
    ]

#!spiral

//// test
///! fsharp
///! cuda
///! rust
///! typescript
///! python

types ()
get_tasks ()
|> sm'.format_debug
|> _assert_string_contains "01"

#!spiral

//// test
///! fsharp
///! cuda
///! rust
///! typescript
///! python

get_tasks ()
|> listm'.try_item 0i32
|> fun (Some task) => task.task.name
|> _assert_eq (task_name "01")
