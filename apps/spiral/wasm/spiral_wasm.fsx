#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("&$0")>]
#endif
type Ref<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Command")>]
#endif
type clap_Command = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Arg")>]
#endif
type clap_Arg = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::ArgAction")>]
#endif
type clap_ArgAction = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Vec<$0>")>]
#endif
type Vec<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::String")>]
#endif
type std_string_String = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Box<$0>")>]
#endif
type Box<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::PossibleValue")>]
#endif
type clap_builder_PossibleValue = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::ValueParser")>]
#endif
type clap_builder_ValueParser = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::ArgMatches")>]
#endif
type clap_ArgMatches = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("mut $0")>]
#endif
type Mut<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("near_workspaces::Worker<$0>")>]
#endif
type near_workspaces_Worker<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::pin::Pin<$0>")>]
#endif
type std_pin_Pin<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("near_workspaces::Contract")>]
#endif
type near_workspaces_Contract = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("near_workspaces::operations::CallTransaction")>]
#endif
type near_workspaces_operations_CallTransaction = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("near_workspaces::result::ExecutionFinalResult")>]
#endif
type near_workspaces_result_ExecutionFinalResult = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("near_workspaces::types::Gas")>]
#endif
type near_workspaces_types_Gas = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("near_workspaces::result::ExecutionOutcome")>]
#endif
type near_workspaces_result_ExecutionOutcome = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("near_workspaces::types::NearToken")>]
#endif
type near_workspaces_types_NearToken = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("u128")>]
#endif
type u128 = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("anyhow::Error")>]
#endif
type anyhow_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 $1")>]
#endif
type Lifetime<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("'static")>]
#endif
type StaticLifetime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("str")>]
#endif
type Str = class end
module TraceState = let mutable trace_state = None
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::env::VarError")>]
#endif
type std_env_VarError = class end
type IOsEnviron = abstract environ: x: unit -> obj
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("dyn $0")>]
#endif
type Dyn<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::future::Future<Output = $0>")>]
#endif
type std_future_Future<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Error")>]
#endif
type std_io_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("near_workspaces::network::Sandbox")>]
#endif
type near_workspaces_network_Sandbox = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("near_workspaces::error::Error")>]
#endif
type near_workspaces_error_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("near_workspaces::result::ExecutionSuccess")>]
#endif
type near_workspaces_result_ExecutionSuccess = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("near_workspaces::result::ExecutionFailure")>]
#endif
type near_workspaces_result_ExecutionFailure = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("[$0]")>]
#endif
type Slice<'T> = class end
type [<Struct>] US0 =
    | US0_0 of f0_0 : std_string_String
    | US0_1
and [<Struct>] US3 =
    | US3_0
    | US3_1
    | US3_2
    | US3_3
    | US3_4
and [<Struct>] US2 =
    | US2_0 of f0_0 : US3
    | US2_1
and [<Struct>] US1 =
    | US1_0 of f0_0 : US2
    | US1_1
and Mut0 = {mutable l0 : int64}
and Mut1 = {mutable l0 : (string -> unit)}
and Mut2 = {mutable l0 : bool}
and Mut3 = {mutable l0 : string}
and Mut4 = {mutable l0 : US3}
and [<Struct>] US4 =
    | US4_0 of f0_0 : string
    | US4_1
and [<Struct>] US5 =
    | US5_0 of f0_0 : int64
    | US5_1
and [<Struct>] US6 =
    | US6_0 of f0_0 : US4
    | US6_1 of f1_0 : std_string_String
and [<Struct>] US7 =
    | US7_0 of f0_0 : uint8
    | US7_1 of f1_0 : uint8
and [<Struct>] US8 =
    | US8_0 of f0_0 : uint8
    | US8_1
let rec method0 () : clap_Command =
    let v0 : string = "command"
    let v1 : string = "r#\"" + v0 + "\"#"
    let v2 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : string = "clap::Command::new($0)"
    let v4 : clap_Command = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "clap::Command::args_override_self($0, true)"
    let v6 : clap_Command = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "exception"
    let v8 : string = "r#\"" + v7 + "\"#"
    let v9 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "clap::Arg::new($0)"
    let v11 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "$0.short($1)"
    let v13 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v11, 'e') v12 
    let v14 : string = "r#\"" + v7 + "\"#"
    let v15 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v14 
    let v16 : string = "$0.long($1)"
    let v17 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v13, v15) v16 
    let v18 : string = "clap::ArgAction::SetTrue"
    let v19 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v18 
    let v20 : string = "$0.action($1)"
    let v21 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v17, v19) v20 
    let v22 : string = "clap::Command::arg($0, $1)"
    let v23 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v6, v21) v22 
    let v24 : string = "trace_level"
    let v25 : string = "r#\"" + v24 + "\"#"
    let v26 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v25 
    let v27 : string = "clap::Arg::new($0)"
    let v28 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v26 v27 
    let v29 : string = "$0.short($1)"
    let v30 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v28, 't') v29 
    let v31 : string = "r#\"" + v24 + "\"#"
    let v32 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v31 
    let v33 : string = "$0.long($1)"
    let v34 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v30, v32) v33 
    
    
    
    
    
    let v35 : string list = []
    let v36 : string = "Critical"
    let v37 : string list = v36 :: v35 
    let v40 : string = "Warning"
    let v41 : string list = v40 :: v37 
    let v44 : string = "Info"
    let v45 : string list = v44 :: v41 
    let v48 : string = "Debug"
    let v49 : string list = v48 :: v45 
    let v52 : string = "Verbose"
    let v53 : string list = v52 :: v49 
    let v56 : (string list -> (string [])) = List.toArray
    let v57 : (string []) = v56 v53
    let v60 : string = "$0.to_vec()"
    let v61 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v57 v60 
    let v62 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v63 : bool = Fable.Core.RustInterop.emitRustExpr v61 v62 
    let v64 : string = "x"
    let v65 : string = Fable.Core.RustInterop.emitRustExpr () v64 
    let v66 : string = "&*$0"
    let v67 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v65 v66 
    let v68 : string = "String::from($0)"
    let v69 : std_string_String = Fable.Core.RustInterop.emitRustExpr v67 v68 
    let v70 : string = "Box::new($0)"
    let v71 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v69 v70 
    let v72 : string = "Box::leak($0)"
    let v73 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v71 v72 
    let v74 : string = "clap::builder::PossibleValue::new(&**$0)"
    let v75 : clap_builder_PossibleValue = Fable.Core.RustInterop.emitRustExpr v73 v74 
    let v76 : string = "true; $0 }).collect::<Vec<_>>()"
    let v77 : bool = Fable.Core.RustInterop.emitRustExpr v75 v76 
    let v78 : string = "_vec_map"
    let v79 : Vec<clap_builder_PossibleValue> = Fable.Core.RustInterop.emitRustExpr () v78 
    let v80 : string = "Into::<clap::builder::ValueParser>::into(clap::builder::PossibleValuesParser::new($0))"
    let v81 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr v79 v80 
    let v82 : string = "$0.value_parser($1)"
    let v83 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v34, v81) v82 
    let v84 : string = "clap::Command::arg($0, $1)"
    let v85 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v23, v83) v84 
    let v86 : string = "wasm"
    let v87 : string = "r#\"" + v86 + "\"#"
    let v88 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v87 
    let v89 : string = "clap::Arg::new($0)"
    let v90 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v88 v89 
    let v91 : string = "$0.short($1)"
    let v92 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v90, 'w') v91 
    let v93 : string = "r#\"" + v86 + "\"#"
    let v94 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v93 
    let v95 : string = "$0.long($1)"
    let v96 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v92, v94) v95 
    let v97 : string = "$0.required($1)"
    let v98 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v96, true) v97 
    let v99 : string = "clap::Command::arg($0, $1)"
    let v100 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v85, v98) v99 
    v100
and method1 () : string =
    let v0 : string = "trace_level"
    v0
and closure1 (v0 : US0 option ref) (v1 : US0 option) : US0 option ref =
    v0.Value <- v1 
    v0
and closure2 (v0 : std_string_String option, v1 : (US0 option -> US0 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : std_string_String = x
    let v3 : US0 = US0_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and method3 () : string =
    let v0 : string = "TRACE_LEVEL"
    v0
and method5 () : string =
    let v0 : string = ""
    v0
and closure4 (v0 : US4 option ref) (v1 : US4 option) : US4 option ref =
    v0.Value <- v1 
    v0
and closure5 (v0 : string option, v1 : (US4 option -> US4 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : string = x
    let v3 : US4 = US4_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and method4 (v0 : string) : string =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "std::env::var(&*$0)"
    let v3 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "x"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : string = "fable_library_rust::String_::fromString($0)"
    let v9 : string = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "true; $0 })"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "_result_map_"
    let v13 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = method5()
    let v15 : string = "$0.unwrap_or($1)"
    let v16 : string = Fable.Core.RustInterop.emitRustExpr struct (v13, v14) v15 
    let _v1 = v16 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : string = "std::env::var(&*$0)"
    let v18 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v0 v17 
    let v19 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v20 : bool = Fable.Core.RustInterop.emitRustExpr v18 v19 
    let v21 : string = "x"
    let v22 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v21 
    let v23 : string = "fable_library_rust::String_::fromString($0)"
    let v24 : string = Fable.Core.RustInterop.emitRustExpr v22 v23 
    let v25 : string = "true; $0 })"
    let v26 : bool = Fable.Core.RustInterop.emitRustExpr v24 v25 
    let v27 : string = "_result_map_"
    let v28 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v27 
    let v29 : string = method5()
    let v30 : string = "$0.unwrap_or($1)"
    let v31 : string = Fable.Core.RustInterop.emitRustExpr struct (v28, v29) v30 
    let _v1 = v31 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v32 : string = "std::env::var(&*$0)"
    let v33 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v0 v32 
    let v34 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v35 : bool = Fable.Core.RustInterop.emitRustExpr v33 v34 
    let v36 : string = "x"
    let v37 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v36 
    let v38 : string = "fable_library_rust::String_::fromString($0)"
    let v39 : string = Fable.Core.RustInterop.emitRustExpr v37 v38 
    let v40 : string = "true; $0 })"
    let v41 : bool = Fable.Core.RustInterop.emitRustExpr v39 v40 
    let v42 : string = "_result_map_"
    let v43 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v42 
    let v44 : string = method5()
    let v45 : string = "$0.unwrap_or($1)"
    let v46 : string = Fable.Core.RustInterop.emitRustExpr struct (v43, v44) v45 
    let _v1 = v46 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v47 : string = "process.env[$0] ?? \"\""
    let v48 : string = Fable.Core.JsInterop.emitJsExpr v0 v47 
    let _v1 = v48 
    #endif
#if FABLE_COMPILER_PYTHON
    let v49 : string = "os"
    let v50 : IOsEnviron = Fable.Core.PyInterop.importAll v49 
    let v51 : string = "v50.environ"
    let v52 : obj = Fable.Core.PyInterop.emitPyExpr () v51 
    let v55 : string = "v52.get($0)"
    let v56 : string = Fable.Core.PyInterop.emitPyExpr v0 v55 
    let mutable _v56 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v59 : (string -> string option) = Option.ofObj
    let v60 : string option = v59 v56
    v60 
    #else
    Some v56 
    #endif
    |> fun x -> _v56 <- Some x
    let v61 : string option = match _v56 with Some x -> x | None -> failwith "optionm'.of_obj / _v56=None"
    let v64 : US4 option = None
    let _v64 = ref v64 
    let v65 : US4 option ref = _v64 
    let v66 : (US4 option -> US4 option ref) = closure4(v65)
    let v67 : unit = ()
    let v68 : (unit -> unit) = closure5(v61, v66)
    let v69 : unit = (fun () -> v68 (); v67) ()
    let v72 : US4 option = _v64.Value 
    let v83 : US4 = US4_1
    let v84 : US4 = v72 |> Option.defaultValue v83 
    let v91 : string =
        match v84 with
        | US4_1 -> (* None *)
            let v89 : string = ""
            v89
        | US4_0(v88) -> (* Some *)
            v88
    let _v1 = v91 
    #endif
#else
    let v92 : (string -> string) = System.Environment.GetEnvironmentVariable
    let v93 : string = v92 v0
    let mutable _v93 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v94 : (string -> string option) = Option.ofObj
    let v95 : string option = v94 v93
    v95 
    #else
    Some v93 
    #endif
    |> fun x -> _v93 <- Some x
    let v96 : string option = match _v93 with Some x -> x | None -> failwith "optionm'.of_obj / _v93=None"
    let v99 : US4 option = None
    let _v99 = ref v99 
    let v100 : US4 option ref = _v99 
    let v101 : (US4 option -> US4 option ref) = closure4(v100)
    let v102 : unit = ()
    let v103 : (unit -> unit) = closure5(v96, v101)
    let v104 : unit = (fun () -> v103 (); v102) ()
    let v107 : US4 option = _v99.Value 
    let v118 : US4 = US4_1
    let v119 : US4 = v107 |> Option.defaultValue v118 
    let v126 : string =
        match v119 with
        | US4_1 -> (* None *)
            let v124 : string = ""
            v124
        | US4_0(v123) -> (* Some *)
            v123
    let _v1 = v126 
    #endif
    let v127 : string = _v1 
    v127
and method6 () : string =
    let v0 : string = "AUTOMATION"
    v0
and closure6 () (v0 : string) : unit =
    ()
and method2 (v0 : US3) : struct (Mut0 * Mut1 * Mut2 * Mut3 * Mut4 * int64 option) =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = method3()
    let v3 : string = method4(v2)
    
    
    
    
    
    let v4 : bool = "Verbose" = v3
    let v8 : US2 =
        if v4 then
            let v5 : US3 = US3_0
            US2_0(v5)
        else
            US2_1
    let v49 : US2 =
        match v8 with
        | US2_1 -> (* None *)
            let v11 : bool = "Debug" = v3
            let v15 : US2 =
                if v11 then
                    let v12 : US3 = US3_1
                    US2_0(v12)
                else
                    US2_1
            match v15 with
            | US2_1 -> (* None *)
                let v18 : bool = "Info" = v3
                let v22 : US2 =
                    if v18 then
                        let v19 : US3 = US3_2
                        US2_0(v19)
                    else
                        US2_1
                match v22 with
                | US2_1 -> (* None *)
                    let v25 : bool = "Warning" = v3
                    let v29 : US2 =
                        if v25 then
                            let v26 : US3 = US3_3
                            US2_0(v26)
                        else
                            US2_1
                    match v29 with
                    | US2_1 -> (* None *)
                        let v32 : bool = "Critical" = v3
                        let v36 : US2 =
                            if v32 then
                                let v33 : US3 = US3_4
                                US2_0(v33)
                            else
                                US2_1
                        match v36 with
                        | US2_1 -> (* None *)
                            US2_1
                        | US2_0(v37) -> (* Some *)
                            US2_0(v37)
                    | US2_0(v30) -> (* Some *)
                        US2_0(v30)
                | US2_0(v23) -> (* Some *)
                    US2_0(v23)
            | US2_0(v16) -> (* Some *)
                US2_0(v16)
        | US2_0(v9) -> (* Some *)
            US2_0(v9)
    let v50 : string = method6()
    let v51 : string = method4(v50)
    let v52 : bool = v51 = "True"
    let v62 : US5 =
        if v52 then
            let v53 : System.DateTime = System.DateTime.Now
            let v56 : (System.DateTime -> int64) = _.Ticks
            let v57 : int64 = v56 v53
            US5_0(v57)
        else
            US5_1
    let _v1 = struct (v49, v62) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v63 : US2 = US2_1
    let v64 : US5 = US5_1
    let _v1 = struct (v63, v64) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v65 : string = "AUTOMATION"
    let v66 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v67 : string = "env!(\"" + v65 + "\")"
    let v68 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v67 
    let v69 : string = "String::from($0)"
    let v70 : std_string_String = Fable.Core.RustInterop.emitRustExpr v68 v69 
    let v71 : string = "fable_library_rust::String_::fromString($0)"
    let v72 : string = Fable.Core.RustInterop.emitRustExpr v70 v71 
    let _v66 = v72 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v73 : string = "env!(\"" + v65 + "\")"
    let v74 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v73 
    let v75 : string = "String::from($0)"
    let v76 : std_string_String = Fable.Core.RustInterop.emitRustExpr v74 v75 
    let v77 : string = "fable_library_rust::String_::fromString($0)"
    let v78 : string = Fable.Core.RustInterop.emitRustExpr v76 v77 
    let _v66 = v78 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v79 : string = "env!(\"" + v65 + "\")"
    let v80 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v79 
    let v81 : string = "String::from($0)"
    let v82 : std_string_String = Fable.Core.RustInterop.emitRustExpr v80 v81 
    let v83 : string = "fable_library_rust::String_::fromString($0)"
    let v84 : string = Fable.Core.RustInterop.emitRustExpr v82 v83 
    let _v66 = v84 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v85 : string = null |> unbox<string>
    let _v66 = v85 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : string = null |> unbox<string>
    let _v66 = v88 
    #endif
#else
    let v91 : string = null |> unbox<string>
    let _v66 = v91 
    #endif
    let v94 : string = _v66 
    let v99 : string = "True"
    let v100 : bool = v94 <> v99 
    let v109 : US5 =
        if v100 then
            US5_1
        else
            let v104 : string = $"near_sdk::env::block_timestamp()"
            let v105 : uint64 = Fable.Core.RustInterop.emitRustExpr () v104 
            let v106 : (uint64 -> int64) = int64
            let v107 : int64 = v106 v105
            US5_0(v107)
    let v110 : US2 = US2_1
    let _v1 = struct (v110, v109) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v111 : string = method3()
    let v112 : string = method4(v111)
    
    
    
    
    
    let v113 : bool = "Verbose" = v112
    let v117 : US2 =
        if v113 then
            let v114 : US3 = US3_0
            US2_0(v114)
        else
            US2_1
    let v158 : US2 =
        match v117 with
        | US2_1 -> (* None *)
            let v120 : bool = "Debug" = v112
            let v124 : US2 =
                if v120 then
                    let v121 : US3 = US3_1
                    US2_0(v121)
                else
                    US2_1
            match v124 with
            | US2_1 -> (* None *)
                let v127 : bool = "Info" = v112
                let v131 : US2 =
                    if v127 then
                        let v128 : US3 = US3_2
                        US2_0(v128)
                    else
                        US2_1
                match v131 with
                | US2_1 -> (* None *)
                    let v134 : bool = "Warning" = v112
                    let v138 : US2 =
                        if v134 then
                            let v135 : US3 = US3_3
                            US2_0(v135)
                        else
                            US2_1
                    match v138 with
                    | US2_1 -> (* None *)
                        let v141 : bool = "Critical" = v112
                        let v145 : US2 =
                            if v141 then
                                let v142 : US3 = US3_4
                                US2_0(v142)
                            else
                                US2_1
                        match v145 with
                        | US2_1 -> (* None *)
                            US2_1
                        | US2_0(v146) -> (* Some *)
                            US2_0(v146)
                    | US2_0(v139) -> (* Some *)
                        US2_0(v139)
                | US2_0(v132) -> (* Some *)
                    US2_0(v132)
            | US2_0(v125) -> (* Some *)
                US2_0(v125)
        | US2_0(v118) -> (* Some *)
            US2_0(v118)
    let v159 : string = method6()
    let v160 : string = method4(v159)
    let v161 : bool = v160 = "True"
    let v171 : US5 =
        if v161 then
            let v162 : System.DateTime = System.DateTime.Now
            let v165 : (System.DateTime -> int64) = _.Ticks
            let v166 : int64 = v165 v162
            US5_0(v166)
        else
            US5_1
    let _v1 = struct (v158, v171) 
    #endif
#if FABLE_COMPILER_PYTHON
    let v172 : string = method3()
    let v173 : string = method4(v172)
    
    
    
    
    
    let v174 : bool = "Verbose" = v173
    let v178 : US2 =
        if v174 then
            let v175 : US3 = US3_0
            US2_0(v175)
        else
            US2_1
    let v219 : US2 =
        match v178 with
        | US2_1 -> (* None *)
            let v181 : bool = "Debug" = v173
            let v185 : US2 =
                if v181 then
                    let v182 : US3 = US3_1
                    US2_0(v182)
                else
                    US2_1
            match v185 with
            | US2_1 -> (* None *)
                let v188 : bool = "Info" = v173
                let v192 : US2 =
                    if v188 then
                        let v189 : US3 = US3_2
                        US2_0(v189)
                    else
                        US2_1
                match v192 with
                | US2_1 -> (* None *)
                    let v195 : bool = "Warning" = v173
                    let v199 : US2 =
                        if v195 then
                            let v196 : US3 = US3_3
                            US2_0(v196)
                        else
                            US2_1
                    match v199 with
                    | US2_1 -> (* None *)
                        let v202 : bool = "Critical" = v173
                        let v206 : US2 =
                            if v202 then
                                let v203 : US3 = US3_4
                                US2_0(v203)
                            else
                                US2_1
                        match v206 with
                        | US2_1 -> (* None *)
                            US2_1
                        | US2_0(v207) -> (* Some *)
                            US2_0(v207)
                    | US2_0(v200) -> (* Some *)
                        US2_0(v200)
                | US2_0(v193) -> (* Some *)
                    US2_0(v193)
            | US2_0(v186) -> (* Some *)
                US2_0(v186)
        | US2_0(v179) -> (* Some *)
            US2_0(v179)
    let v220 : string = method6()
    let v221 : string = method4(v220)
    let v222 : bool = v221 = "True"
    let v232 : US5 =
        if v222 then
            let v223 : System.DateTime = System.DateTime.Now
            let v226 : (System.DateTime -> int64) = _.Ticks
            let v227 : int64 = v226 v223
            US5_0(v227)
        else
            US5_1
    let _v1 = struct (v219, v232) 
    #endif
#else
    let v233 : string = method3()
    let v234 : string = method4(v233)
    
    
    
    
    
    let v235 : bool = "Verbose" = v234
    let v239 : US2 =
        if v235 then
            let v236 : US3 = US3_0
            US2_0(v236)
        else
            US2_1
    let v280 : US2 =
        match v239 with
        | US2_1 -> (* None *)
            let v242 : bool = "Debug" = v234
            let v246 : US2 =
                if v242 then
                    let v243 : US3 = US3_1
                    US2_0(v243)
                else
                    US2_1
            match v246 with
            | US2_1 -> (* None *)
                let v249 : bool = "Info" = v234
                let v253 : US2 =
                    if v249 then
                        let v250 : US3 = US3_2
                        US2_0(v250)
                    else
                        US2_1
                match v253 with
                | US2_1 -> (* None *)
                    let v256 : bool = "Warning" = v234
                    let v260 : US2 =
                        if v256 then
                            let v257 : US3 = US3_3
                            US2_0(v257)
                        else
                            US2_1
                    match v260 with
                    | US2_1 -> (* None *)
                        let v263 : bool = "Critical" = v234
                        let v267 : US2 =
                            if v263 then
                                let v264 : US3 = US3_4
                                US2_0(v264)
                            else
                                US2_1
                        match v267 with
                        | US2_1 -> (* None *)
                            US2_1
                        | US2_0(v268) -> (* Some *)
                            US2_0(v268)
                    | US2_0(v261) -> (* Some *)
                        US2_0(v261)
                | US2_0(v254) -> (* Some *)
                    US2_0(v254)
            | US2_0(v247) -> (* Some *)
                US2_0(v247)
        | US2_0(v240) -> (* Some *)
            US2_0(v240)
    let v281 : string = method6()
    let v282 : string = method4(v281)
    let v283 : bool = v282 = "True"
    let v293 : US5 =
        if v283 then
            let v284 : System.DateTime = System.DateTime.Now
            let v287 : (System.DateTime -> int64) = _.Ticks
            let v288 : int64 = v287 v284
            US5_0(v288)
        else
            US5_1
    let _v1 = struct (v280, v293) 
    #endif
    let struct (v294 : US2, v295 : US5) = _v1 
    let v359 : Mut0 = {l0 = 0L} : Mut0
    let v360 : (string -> unit) = closure6()
    let v361 : Mut1 = {l0 = v360} : Mut1
    let v362 : Mut2 = {l0 = true} : Mut2
    let v363 : string = ""
    let v364 : Mut3 = {l0 = v363} : Mut3
    let v367 : US3 =
        match v294 with
        | US2_1 -> (* None *)
            v0
        | US2_0(v365) -> (* Some *)
            v365
    let v368 : Mut4 = {l0 = v367} : Mut4
    let v375 : int64 option =
        match v295 with
        | US5_1 -> (* None *)
            let v373 : int64 option = None
            v373
        | US5_0(v369) -> (* Some *)
            let v370 : int64 option = Some v369 
            v370
    struct (v359, v361, v362, v364, v368, v375)
and closure3 (v0 : US3) () : unit =
    let v1 : bool = TraceState.trace_state.IsNone
    if v1 then
        let struct (v2 : Mut0, v3 : Mut1, v4 : Mut2, v5 : Mut3, v6 : Mut4, v7 : int64 option) = method2(v0)
        let v8 : struct (Mut0 * Mut1 * Mut2 * Mut3 * Mut4 * int64 option) option = Some struct (v2, v3, v4, v5, v6, v7) 
        TraceState.trace_state <- v8 
        ()
and closure8 () () : unit =
    let v0 : bool = TraceState.trace_state.IsNone
    if v0 then
        let v1 : US3 = US3_0
        let struct (v2 : Mut0, v3 : Mut1, v4 : Mut2, v5 : Mut3, v6 : Mut4, v7 : int64 option) = method2(v1)
        let v8 : struct (Mut0 * Mut1 * Mut2 * Mut3 * Mut4 * int64 option) option = Some struct (v2, v3, v4, v5, v6, v7) 
        TraceState.trace_state <- v8 
        ()
and closure9 (v0 : Mut0) () : unit =
    let v1 : int64 = v0.l0
    let v2 : int64 = v1 + 1L
    v0.l0 <- v2
    ()
and closure10 (v0 : US5 option ref) (v1 : US5 option) : US5 option ref =
    v0.Value <- v1 
    v0
and closure11 (v0 : int64 option, v1 : (US5 option -> US5 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : int64 = x
    let v3 : US5 = US5_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and method7 () : string =
    let v0 : string = "hh:mm:ss"
    v0
and method8 () : string =
    let v0 : string = "HH:mm:ss"
    v0
and method9 () : string =
    let v0 : string = "\u001b[0m"
    v0
and method10 () : string =
    let v0 : string = ""
    v0
and closure12 (v0 : Mut3, v1 : string) () : unit =
    let v2 : string = v0.l0
    let v3 : string = v2 + v1 
    v0.l0 <- v3
    ()
and closure14 (v0 : string) () : unit =
    let v1 : (string -> unit) = System.Console.WriteLine
    v1 v0
and closure13 () (v0 : string) : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure14(v0)
    let v3 : unit = (fun () -> v2 (); v1) ()
    ()
and closure7 (v0 : (string [])) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 0 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Verbose"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_black"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_black"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_black"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[90m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[90m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[90m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "args"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"%A{v0}"
        let v669 : string = $"{v666}"
        let v672 : unit = ()
        let v673 : (unit -> unit) = closure12(v638, v669)
        let v674 : unit = (fun () -> v673 (); v672) ()
        let v677 : string = " }"
        let v678 : string = $"{v677}"
        let v681 : unit = ()
        let v682 : (unit -> unit) = closure12(v638, v678)
        let v683 : unit = (fun () -> v682 (); v681) ()
        let v686 : string = v638.l0
        let v687 : string = $"spiral_wasm.main"
        let v688 : bool = v687 = ""
        let v745 : string =
            if v688 then
                let v689 : string = ""
                v689
            else
                let v690 : string = $"{v495} {v630} #{v636} %s{v687} / {v686}"
                let v693 : char list = []
                let v694 : (char list -> (char [])) = List.toArray
                let v695 : (char []) = v694 v693
                let v698 : string = v690.TrimStart v695 
                let v716 : char list = []
                let v717 : char list = '/' :: v716 
                let v720 : char list = ' ' :: v717 
                let v723 : (char list -> (char [])) = List.toArray
                let v724 : (char []) = v723 v720
                let v727 : string = v698.TrimEnd v724 
                v727
        let v746 : (string -> unit) = closure13()
        let v747 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v748 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v745 v748 
        let _v747 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v749 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v745 v749 
        let _v747 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v750 : string = v20.l0
        let v751 : bool = v750 = ""
        let v759 : string =
            if v751 then
                v745
            else
                let v752 : bool = v745 = ""
                if v752 then
                    let v753 : string = v20.l0
                    v753
                else
                    let v754 : string = v20.l0
                    let v755 : string = "\n"
                    let v756 : string = v754 + v755 
                    let v757 : string = v756 + v745 
                    v757
        let v760 : string = "&*$0"
        let v761 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v759 v760 
        let v762 : string = $"$0.chars()"
        let v763 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v761 v762 
        let v764 : string = "v763"
        let v765 : _ = Fable.Core.RustInterop.emitRustExpr () v764 
        let v766 : string = "v765.collect::<Vec<_>>()"
        let v767 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v766 
        let v768 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v769 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v767 v768 
        let v770 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v771 : bool = Fable.Core.RustInterop.emitRustExpr v769 v770 
        let v772 : string = "x"
        let v773 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v772 
        let v774 : string = "String::from_iter($0)"
        let v775 : std_string_String = Fable.Core.RustInterop.emitRustExpr v773 v774 
        let v776 : string = "true; $0 }).collect::<Vec<_>>()"
        let v777 : bool = Fable.Core.RustInterop.emitRustExpr v775 v776 
        let v778 : string = "_vec_map"
        let v779 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v778 
        let v780 : string = "$0.len()"
        let v781 : unativeint = Fable.Core.RustInterop.emitRustExpr v779 v780 
        let v782 : (unativeint -> int32) = int32
        let v783 : int32 = v782 v781
        let v784 : string = ""
        let v785 : bool = v745 <> v784 
        let v789 : bool =
            if v785 then
                let v788 : bool = v783 <= 1
                v788
            else
                false
        if v789 then
            v20.l0 <- v759
            ()
        else
            v20.l0 <- v784
            let v790 : string = "true; $0.into_iter().for_each(|x| { //"
            let v791 : bool = Fable.Core.RustInterop.emitRustExpr v779 v790 
            let v792 : string = "x"
            let v793 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v792 
            let v794 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v793 v794 
            let v795 : string = $"true;"
            let v796 : bool = Fable.Core.RustInterop.emitRustExpr () v795 
            let v797 : string = "true; }}); { //"
            let v798 : bool = Fable.Core.RustInterop.emitRustExpr () v797 
            ()
        let _v747 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v746 v745
        let _v747 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v746 v745
        let _v747 = () 
        #endif
#else
        v746 v745
        let _v747 = () 
        #endif
        _v747 
        let v799 : (string -> unit) = v18.l0
        v799 v745
and method11 () : string =
    let v0 : string = "exception"
    v0
and method13 () : string =
    let v0 : string = "wasm"
    v0
and closure15 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 0 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Verbose"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_black"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_black"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_black"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[90m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[90m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[90m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "wasm_path"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{v0}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = " }"
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = v638.l0
        let v684 : string = "spiral_wasm.run"
        let v685 : string = $"{v495} {v630} #{v636} %s{v684} / {v683}"
        let v688 : char list = []
        let v689 : (char list -> (char [])) = List.toArray
        let v690 : (char []) = v689 v688
        let v693 : string = v685.TrimStart v690 
        let v711 : char list = []
        let v712 : char list = '/' :: v711 
        let v715 : char list = ' ' :: v712 
        let v718 : (char list -> (char [])) = List.toArray
        let v719 : (char []) = v718 v715
        let v722 : string = v693.TrimEnd v719 
        let v740 : (string -> unit) = closure13()
        let v741 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v742 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v722 v742 
        let _v741 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v743 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v722 v743 
        let _v741 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v744 : string = v20.l0
        let v745 : bool = v744 = ""
        let v753 : string =
            if v745 then
                v722
            else
                let v746 : bool = v722 = ""
                if v746 then
                    let v747 : string = v20.l0
                    v747
                else
                    let v748 : string = v20.l0
                    let v749 : string = "\n"
                    let v750 : string = v748 + v749 
                    let v751 : string = v750 + v722 
                    v751
        let v754 : string = "&*$0"
        let v755 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v753 v754 
        let v756 : string = $"$0.chars()"
        let v757 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v755 v756 
        let v758 : string = "v757"
        let v759 : _ = Fable.Core.RustInterop.emitRustExpr () v758 
        let v760 : string = "v759.collect::<Vec<_>>()"
        let v761 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v760 
        let v762 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v763 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v761 v762 
        let v764 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v765 : bool = Fable.Core.RustInterop.emitRustExpr v763 v764 
        let v766 : string = "x"
        let v767 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v766 
        let v768 : string = "String::from_iter($0)"
        let v769 : std_string_String = Fable.Core.RustInterop.emitRustExpr v767 v768 
        let v770 : string = "true; $0 }).collect::<Vec<_>>()"
        let v771 : bool = Fable.Core.RustInterop.emitRustExpr v769 v770 
        let v772 : string = "_vec_map"
        let v773 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v772 
        let v774 : string = "$0.len()"
        let v775 : unativeint = Fable.Core.RustInterop.emitRustExpr v773 v774 
        let v776 : (unativeint -> int32) = int32
        let v777 : int32 = v776 v775
        let v778 : string = ""
        let v779 : bool = v722 <> v778 
        let v783 : bool =
            if v779 then
                let v782 : bool = v777 <= 1
                v782
            else
                false
        if v783 then
            v20.l0 <- v753
            ()
        else
            v20.l0 <- v778
            let v784 : string = "true; $0.into_iter().for_each(|x| { //"
            let v785 : bool = Fable.Core.RustInterop.emitRustExpr v773 v784 
            let v786 : string = "x"
            let v787 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v786 
            let v788 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v787 v788 
            let v789 : string = $"true;"
            let v790 : bool = Fable.Core.RustInterop.emitRustExpr () v789 
            let v791 : string = "true; }}); { //"
            let v792 : bool = Fable.Core.RustInterop.emitRustExpr () v791 
            ()
        let _v741 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v740 v722
        let _v741 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v740 v722
        let _v741 = () 
        #endif
#else
        v740 v722
        let _v741 = () 
        #endif
        _v741 
        let v793 : (string -> unit) = v18.l0
        v793 v722
and closure16 (v0 : uint8, v1 : near_workspaces_Worker<near_workspaces_network_Sandbox>) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure8()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US3 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 0 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure9(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US5 option = None
        let _v114 = ref v114 
        let v115 : US5 option ref = _v114 
        let v116 : (US5 option -> US5 option ref) = closure10(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure11(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US5 option = _v114.Value 
        let v133 : US5 = US5_1
        let v134 : US5 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US5_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US5_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method7()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US5 option = None
        let _v182 = ref v182 
        let v183 : US5 option ref = _v182 
        let v184 : (US5 option -> US5 option ref) = closure10(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure11(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US5 option = _v182.Value 
        let v201 : US5 = US5_1
        let v202 : US5 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US5_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US5_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method7()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US5 option = None
        let _v252 = ref v252 
        let v253 : US5 option ref = _v252 
        let v254 : (US5 option -> US5 option ref) = closure10(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure11(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US5 option = _v252.Value 
        let v271 : US5 = US5_1
        let v272 : US5 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US5_1 -> (* None *)
                v251
            | US5_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US5 option = None
        let _v292 = ref v292 
        let v293 : US5 option ref = _v292 
        let v294 : (US5 option -> US5 option ref) = closure10(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure11(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US5 option = _v292.Value 
        let v311 : US5 = US5_1
        let v312 : US5 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US5_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US5_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method8()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US5 option = None
        let _v360 = ref v360 
        let v361 : US5 option ref = _v360 
        let v362 : (US5 option -> US5 option ref) = closure10(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure11(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US5 option = _v360.Value 
        let v379 : US5 = US5_1
        let v380 : US5 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US5_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US5_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method8()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US5 option = None
        let _v428 = ref v428 
        let v429 : US5 option ref = _v428 
        let v430 : (US5 option -> US5 option ref) = closure10(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure11(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US5 option = _v428.Value 
        let v447 : US5 = US5_1
        let v448 : US5 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US5_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US5_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method8()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Verbose"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_black"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_black"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_black"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[90m"
        let v620 : string = method9()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[90m"
        let v624 : string = method9()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[90m"
        let v628 : string = method9()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : string = method10()
        let v639 : Mut3 = {l0 = v638} : Mut3
        let v640 : string = "{ "
        let v641 : string = $"{v640}"
        let v644 : unit = ()
        let v645 : (unit -> unit) = closure12(v639, v641)
        let v646 : unit = (fun () -> v645 (); v644) ()
        let v649 : string = "retry"
        let v650 : string = $"{v649}"
        let v653 : unit = ()
        let v654 : (unit -> unit) = closure12(v639, v650)
        let v655 : unit = (fun () -> v654 (); v653) ()
        let v658 : string = " = "
        let v659 : string = $"{v658}"
        let v662 : unit = ()
        let v663 : (unit -> unit) = closure12(v639, v659)
        let v664 : unit = (fun () -> v663 (); v662) ()
        let v667 : string = $"{v0}"
        let v670 : unit = ()
        let v671 : (unit -> unit) = closure12(v639, v667)
        let v672 : unit = (fun () -> v671 (); v670) ()
        let v675 : string = "; "
        let v676 : string = $"{v675}"
        let v679 : unit = ()
        let v680 : (unit -> unit) = closure12(v639, v676)
        let v681 : unit = (fun () -> v680 (); v679) ()
        let v684 : string = "worker"
        let v685 : string = $"{v684}"
        let v688 : unit = ()
        let v689 : (unit -> unit) = closure12(v639, v685)
        let v690 : unit = (fun () -> v689 (); v688) ()
        let v693 : string = $"{v658}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure12(v639, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v702 : string = "format!(\"{:#?}\", $0)"
        let v703 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v702 
        let v704 : string = "fable_library_rust::String_::fromString($0)"
        let v705 : string = Fable.Core.RustInterop.emitRustExpr v703 v704 
        let _v701 = v705 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v706 : string = "format!(\"{:#?}\", $0)"
        let v707 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v706 
        let v708 : string = "fable_library_rust::String_::fromString($0)"
        let v709 : string = Fable.Core.RustInterop.emitRustExpr v707 v708 
        let _v701 = v709 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v710 : string = "format!(\"{:#?}\", $0)"
        let v711 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v710 
        let v712 : string = "fable_library_rust::String_::fromString($0)"
        let v713 : string = Fable.Core.RustInterop.emitRustExpr v711 v712 
        let _v701 = v713 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v714 : string = $"%A{v1}"
        let _v701 = v714 
        #endif
#if FABLE_COMPILER_PYTHON
        let v717 : string = $"%A{v1}"
        let _v701 = v717 
        #endif
#else
        let v720 : string = $"%A{v1}"
        let _v701 = v720 
        #endif
        let v723 : string = _v701 
        let v728 : string = $"{v723}"
        let v731 : unit = ()
        let v732 : (unit -> unit) = closure12(v639, v728)
        let v733 : unit = (fun () -> v732 (); v731) ()
        let v736 : string = " }"
        let v737 : string = $"{v736}"
        let v740 : unit = ()
        let v741 : (unit -> unit) = closure12(v639, v737)
        let v742 : unit = (fun () -> v741 (); v740) ()
        let v745 : string = v639.l0
        let v746 : string = "spiral_wasm.run"
        let v747 : string = $"{v496} {v631} #{v637} %s{v746} / {v745}"
        let v750 : char list = []
        let v751 : (char list -> (char [])) = List.toArray
        let v752 : (char []) = v751 v750
        let v755 : string = v747.TrimStart v752 
        let v773 : char list = []
        let v774 : char list = '/' :: v773 
        let v777 : char list = ' ' :: v774 
        let v780 : (char list -> (char [])) = List.toArray
        let v781 : (char []) = v780 v777
        let v784 : string = v755.TrimEnd v781 
        let v802 : (string -> unit) = closure13()
        let v803 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v804 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v784 v804 
        let _v803 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v805 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v784 v805 
        let _v803 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v806 : string = v21.l0
        let v807 : bool = v806 = ""
        let v815 : string =
            if v807 then
                v784
            else
                let v808 : bool = v784 = ""
                if v808 then
                    let v809 : string = v21.l0
                    v809
                else
                    let v810 : string = v21.l0
                    let v811 : string = "\n"
                    let v812 : string = v810 + v811 
                    let v813 : string = v812 + v784 
                    v813
        let v816 : string = "&*$0"
        let v817 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v815 v816 
        let v818 : string = $"$0.chars()"
        let v819 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v817 v818 
        let v820 : string = "v819"
        let v821 : _ = Fable.Core.RustInterop.emitRustExpr () v820 
        let v822 : string = "v821.collect::<Vec<_>>()"
        let v823 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v822 
        let v824 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v825 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v823 v824 
        let v826 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v827 : bool = Fable.Core.RustInterop.emitRustExpr v825 v826 
        let v828 : string = "x"
        let v829 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v828 
        let v830 : string = "String::from_iter($0)"
        let v831 : std_string_String = Fable.Core.RustInterop.emitRustExpr v829 v830 
        let v832 : string = "true; $0 }).collect::<Vec<_>>()"
        let v833 : bool = Fable.Core.RustInterop.emitRustExpr v831 v832 
        let v834 : string = "_vec_map"
        let v835 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v834 
        let v836 : string = "$0.len()"
        let v837 : unativeint = Fable.Core.RustInterop.emitRustExpr v835 v836 
        let v838 : (unativeint -> int32) = int32
        let v839 : int32 = v838 v837
        let v840 : string = ""
        let v841 : bool = v784 <> v840 
        let v845 : bool =
            if v841 then
                let v844 : bool = v839 <= 1
                v844
            else
                false
        if v845 then
            v21.l0 <- v815
            ()
        else
            v21.l0 <- v840
            let v846 : string = "true; $0.into_iter().for_each(|x| { //"
            let v847 : bool = Fable.Core.RustInterop.emitRustExpr v835 v846 
            let v848 : string = "x"
            let v849 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v848 
            let v850 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v849 v850 
            let v851 : string = $"true;"
            let v852 : bool = Fable.Core.RustInterop.emitRustExpr () v851 
            let v853 : string = "true; }}); { //"
            let v854 : bool = Fable.Core.RustInterop.emitRustExpr () v853 
            ()
        let _v803 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v802 v784
        let _v803 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v802 v784
        let _v803 = () 
        #endif
#else
        v802 v784
        let _v803 = () 
        #endif
        _v803 
        let v855 : (string -> unit) = v19.l0
        v855 v784
and closure17 (v0 : uint8, v1 : near_workspaces_Contract) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure8()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US3 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 0 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure9(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US5 option = None
        let _v114 = ref v114 
        let v115 : US5 option ref = _v114 
        let v116 : (US5 option -> US5 option ref) = closure10(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure11(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US5 option = _v114.Value 
        let v133 : US5 = US5_1
        let v134 : US5 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US5_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US5_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method7()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US5 option = None
        let _v182 = ref v182 
        let v183 : US5 option ref = _v182 
        let v184 : (US5 option -> US5 option ref) = closure10(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure11(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US5 option = _v182.Value 
        let v201 : US5 = US5_1
        let v202 : US5 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US5_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US5_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method7()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US5 option = None
        let _v252 = ref v252 
        let v253 : US5 option ref = _v252 
        let v254 : (US5 option -> US5 option ref) = closure10(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure11(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US5 option = _v252.Value 
        let v271 : US5 = US5_1
        let v272 : US5 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US5_1 -> (* None *)
                v251
            | US5_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US5 option = None
        let _v292 = ref v292 
        let v293 : US5 option ref = _v292 
        let v294 : (US5 option -> US5 option ref) = closure10(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure11(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US5 option = _v292.Value 
        let v311 : US5 = US5_1
        let v312 : US5 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US5_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US5_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method8()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US5 option = None
        let _v360 = ref v360 
        let v361 : US5 option ref = _v360 
        let v362 : (US5 option -> US5 option ref) = closure10(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure11(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US5 option = _v360.Value 
        let v379 : US5 = US5_1
        let v380 : US5 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US5_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US5_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method8()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US5 option = None
        let _v428 = ref v428 
        let v429 : US5 option ref = _v428 
        let v430 : (US5 option -> US5 option ref) = closure10(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure11(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US5 option = _v428.Value 
        let v447 : US5 = US5_1
        let v448 : US5 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US5_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US5_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method8()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Verbose"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_black"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_black"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_black"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[90m"
        let v620 : string = method9()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[90m"
        let v624 : string = method9()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[90m"
        let v628 : string = method9()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : string = method10()
        let v639 : Mut3 = {l0 = v638} : Mut3
        let v640 : string = "{ "
        let v641 : string = $"{v640}"
        let v644 : unit = ()
        let v645 : (unit -> unit) = closure12(v639, v641)
        let v646 : unit = (fun () -> v645 (); v644) ()
        let v649 : string = "retry"
        let v650 : string = $"{v649}"
        let v653 : unit = ()
        let v654 : (unit -> unit) = closure12(v639, v650)
        let v655 : unit = (fun () -> v654 (); v653) ()
        let v658 : string = " = "
        let v659 : string = $"{v658}"
        let v662 : unit = ()
        let v663 : (unit -> unit) = closure12(v639, v659)
        let v664 : unit = (fun () -> v663 (); v662) ()
        let v667 : string = $"{v0}"
        let v670 : unit = ()
        let v671 : (unit -> unit) = closure12(v639, v667)
        let v672 : unit = (fun () -> v671 (); v670) ()
        let v675 : string = "; "
        let v676 : string = $"{v675}"
        let v679 : unit = ()
        let v680 : (unit -> unit) = closure12(v639, v676)
        let v681 : unit = (fun () -> v680 (); v679) ()
        let v684 : string = "contract"
        let v685 : string = $"{v684}"
        let v688 : unit = ()
        let v689 : (unit -> unit) = closure12(v639, v685)
        let v690 : unit = (fun () -> v689 (); v688) ()
        let v693 : string = $"{v658}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure12(v639, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v702 : string = "format!(\"{:#?}\", $0)"
        let v703 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v702 
        let v704 : string = "fable_library_rust::String_::fromString($0)"
        let v705 : string = Fable.Core.RustInterop.emitRustExpr v703 v704 
        let _v701 = v705 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v706 : string = "format!(\"{:#?}\", $0)"
        let v707 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v706 
        let v708 : string = "fable_library_rust::String_::fromString($0)"
        let v709 : string = Fable.Core.RustInterop.emitRustExpr v707 v708 
        let _v701 = v709 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v710 : string = "format!(\"{:#?}\", $0)"
        let v711 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v710 
        let v712 : string = "fable_library_rust::String_::fromString($0)"
        let v713 : string = Fable.Core.RustInterop.emitRustExpr v711 v712 
        let _v701 = v713 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v714 : string = $"%A{v1}"
        let _v701 = v714 
        #endif
#if FABLE_COMPILER_PYTHON
        let v717 : string = $"%A{v1}"
        let _v701 = v717 
        #endif
#else
        let v720 : string = $"%A{v1}"
        let _v701 = v720 
        #endif
        let v723 : string = _v701 
        let v728 : string = $"{v723}"
        let v731 : unit = ()
        let v732 : (unit -> unit) = closure12(v639, v728)
        let v733 : unit = (fun () -> v732 (); v731) ()
        let v736 : string = " }"
        let v737 : string = $"{v736}"
        let v740 : unit = ()
        let v741 : (unit -> unit) = closure12(v639, v737)
        let v742 : unit = (fun () -> v741 (); v740) ()
        let v745 : string = v639.l0
        let v746 : string = "spiral_wasm.run"
        let v747 : string = $"{v496} {v631} #{v637} %s{v746} / {v745}"
        let v750 : char list = []
        let v751 : (char list -> (char [])) = List.toArray
        let v752 : (char []) = v751 v750
        let v755 : string = v747.TrimStart v752 
        let v773 : char list = []
        let v774 : char list = '/' :: v773 
        let v777 : char list = ' ' :: v774 
        let v780 : (char list -> (char [])) = List.toArray
        let v781 : (char []) = v780 v777
        let v784 : string = v755.TrimEnd v781 
        let v802 : (string -> unit) = closure13()
        let v803 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v804 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v784 v804 
        let _v803 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v805 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v784 v805 
        let _v803 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v806 : string = v21.l0
        let v807 : bool = v806 = ""
        let v815 : string =
            if v807 then
                v784
            else
                let v808 : bool = v784 = ""
                if v808 then
                    let v809 : string = v21.l0
                    v809
                else
                    let v810 : string = v21.l0
                    let v811 : string = "\n"
                    let v812 : string = v810 + v811 
                    let v813 : string = v812 + v784 
                    v813
        let v816 : string = "&*$0"
        let v817 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v815 v816 
        let v818 : string = $"$0.chars()"
        let v819 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v817 v818 
        let v820 : string = "v819"
        let v821 : _ = Fable.Core.RustInterop.emitRustExpr () v820 
        let v822 : string = "v821.collect::<Vec<_>>()"
        let v823 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v822 
        let v824 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v825 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v823 v824 
        let v826 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v827 : bool = Fable.Core.RustInterop.emitRustExpr v825 v826 
        let v828 : string = "x"
        let v829 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v828 
        let v830 : string = "String::from_iter($0)"
        let v831 : std_string_String = Fable.Core.RustInterop.emitRustExpr v829 v830 
        let v832 : string = "true; $0 }).collect::<Vec<_>>()"
        let v833 : bool = Fable.Core.RustInterop.emitRustExpr v831 v832 
        let v834 : string = "_vec_map"
        let v835 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v834 
        let v836 : string = "$0.len()"
        let v837 : unativeint = Fable.Core.RustInterop.emitRustExpr v835 v836 
        let v838 : (unativeint -> int32) = int32
        let v839 : int32 = v838 v837
        let v840 : string = ""
        let v841 : bool = v784 <> v840 
        let v845 : bool =
            if v841 then
                let v844 : bool = v839 <= 1
                v844
            else
                false
        if v845 then
            v21.l0 <- v815
            ()
        else
            v21.l0 <- v840
            let v846 : string = "true; $0.into_iter().for_each(|x| { //"
            let v847 : bool = Fable.Core.RustInterop.emitRustExpr v835 v846 
            let v848 : string = "x"
            let v849 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v848 
            let v850 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v849 v850 
            let v851 : string = $"true;"
            let v852 : bool = Fable.Core.RustInterop.emitRustExpr () v851 
            let v853 : string = "true; }}); { //"
            let v854 : bool = Fable.Core.RustInterop.emitRustExpr () v853 
            ()
        let _v803 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v802 v784
        let _v803 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v802 v784
        let _v803 = () 
        #endif
#else
        v802 v784
        let _v803 = () 
        #endif
        _v803 
        let v855 : (string -> unit) = v19.l0
        v855 v784
and closure18 (v0 : uint8, v1 : near_workspaces_result_ExecutionFinalResult) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure8()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US3 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 0 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure9(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US5 option = None
        let _v114 = ref v114 
        let v115 : US5 option ref = _v114 
        let v116 : (US5 option -> US5 option ref) = closure10(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure11(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US5 option = _v114.Value 
        let v133 : US5 = US5_1
        let v134 : US5 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US5_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US5_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method7()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US5 option = None
        let _v182 = ref v182 
        let v183 : US5 option ref = _v182 
        let v184 : (US5 option -> US5 option ref) = closure10(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure11(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US5 option = _v182.Value 
        let v201 : US5 = US5_1
        let v202 : US5 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US5_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US5_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method7()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US5 option = None
        let _v252 = ref v252 
        let v253 : US5 option ref = _v252 
        let v254 : (US5 option -> US5 option ref) = closure10(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure11(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US5 option = _v252.Value 
        let v271 : US5 = US5_1
        let v272 : US5 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US5_1 -> (* None *)
                v251
            | US5_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US5 option = None
        let _v292 = ref v292 
        let v293 : US5 option ref = _v292 
        let v294 : (US5 option -> US5 option ref) = closure10(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure11(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US5 option = _v292.Value 
        let v311 : US5 = US5_1
        let v312 : US5 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US5_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US5_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method8()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US5 option = None
        let _v360 = ref v360 
        let v361 : US5 option ref = _v360 
        let v362 : (US5 option -> US5 option ref) = closure10(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure11(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US5 option = _v360.Value 
        let v379 : US5 = US5_1
        let v380 : US5 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US5_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US5_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method8()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US5 option = None
        let _v428 = ref v428 
        let v429 : US5 option ref = _v428 
        let v430 : (US5 option -> US5 option ref) = closure10(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure11(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US5 option = _v428.Value 
        let v447 : US5 = US5_1
        let v448 : US5 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US5_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US5_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method8()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Verbose"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_black"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_black"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_black"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[90m"
        let v620 : string = method9()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[90m"
        let v624 : string = method9()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[90m"
        let v628 : string = method9()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : string = method10()
        let v639 : Mut3 = {l0 = v638} : Mut3
        let v640 : string = "{ "
        let v641 : string = $"{v640}"
        let v644 : unit = ()
        let v645 : (unit -> unit) = closure12(v639, v641)
        let v646 : unit = (fun () -> v645 (); v644) ()
        let v649 : string = "retry"
        let v650 : string = $"{v649}"
        let v653 : unit = ()
        let v654 : (unit -> unit) = closure12(v639, v650)
        let v655 : unit = (fun () -> v654 (); v653) ()
        let v658 : string = " = "
        let v659 : string = $"{v658}"
        let v662 : unit = ()
        let v663 : (unit -> unit) = closure12(v639, v659)
        let v664 : unit = (fun () -> v663 (); v662) ()
        let v667 : string = $"{v0}"
        let v670 : unit = ()
        let v671 : (unit -> unit) = closure12(v639, v667)
        let v672 : unit = (fun () -> v671 (); v670) ()
        let v675 : string = "; "
        let v676 : string = $"{v675}"
        let v679 : unit = ()
        let v680 : (unit -> unit) = closure12(v639, v676)
        let v681 : unit = (fun () -> v680 (); v679) ()
        let v684 : string = "result"
        let v685 : string = $"{v684}"
        let v688 : unit = ()
        let v689 : (unit -> unit) = closure12(v639, v685)
        let v690 : unit = (fun () -> v689 (); v688) ()
        let v693 : string = $"{v658}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure12(v639, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v702 : string = "format!(\"{:#?}\", $0)"
        let v703 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v702 
        let v704 : string = "fable_library_rust::String_::fromString($0)"
        let v705 : string = Fable.Core.RustInterop.emitRustExpr v703 v704 
        let _v701 = v705 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v706 : string = "format!(\"{:#?}\", $0)"
        let v707 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v706 
        let v708 : string = "fable_library_rust::String_::fromString($0)"
        let v709 : string = Fable.Core.RustInterop.emitRustExpr v707 v708 
        let _v701 = v709 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v710 : string = "format!(\"{:#?}\", $0)"
        let v711 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v710 
        let v712 : string = "fable_library_rust::String_::fromString($0)"
        let v713 : string = Fable.Core.RustInterop.emitRustExpr v711 v712 
        let _v701 = v713 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v714 : string = $"%A{v1}"
        let _v701 = v714 
        #endif
#if FABLE_COMPILER_PYTHON
        let v717 : string = $"%A{v1}"
        let _v701 = v717 
        #endif
#else
        let v720 : string = $"%A{v1}"
        let _v701 = v720 
        #endif
        let v723 : string = _v701 
        let v728 : string = $"{v723}"
        let v731 : unit = ()
        let v732 : (unit -> unit) = closure12(v639, v728)
        let v733 : unit = (fun () -> v732 (); v731) ()
        let v736 : string = " }"
        let v737 : string = $"{v736}"
        let v740 : unit = ()
        let v741 : (unit -> unit) = closure12(v639, v737)
        let v742 : unit = (fun () -> v741 (); v740) ()
        let v745 : string = v639.l0
        let v746 : string = "spiral_wasm.run"
        let v747 : string = $"{v496} {v631} #{v637} %s{v746} / {v745}"
        let v750 : char list = []
        let v751 : (char list -> (char [])) = List.toArray
        let v752 : (char []) = v751 v750
        let v755 : string = v747.TrimStart v752 
        let v773 : char list = []
        let v774 : char list = '/' :: v773 
        let v777 : char list = ' ' :: v774 
        let v780 : (char list -> (char [])) = List.toArray
        let v781 : (char []) = v780 v777
        let v784 : string = v755.TrimEnd v781 
        let v802 : (string -> unit) = closure13()
        let v803 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v804 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v784 v804 
        let _v803 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v805 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v784 v805 
        let _v803 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v806 : string = v21.l0
        let v807 : bool = v806 = ""
        let v815 : string =
            if v807 then
                v784
            else
                let v808 : bool = v784 = ""
                if v808 then
                    let v809 : string = v21.l0
                    v809
                else
                    let v810 : string = v21.l0
                    let v811 : string = "\n"
                    let v812 : string = v810 + v811 
                    let v813 : string = v812 + v784 
                    v813
        let v816 : string = "&*$0"
        let v817 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v815 v816 
        let v818 : string = $"$0.chars()"
        let v819 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v817 v818 
        let v820 : string = "v819"
        let v821 : _ = Fable.Core.RustInterop.emitRustExpr () v820 
        let v822 : string = "v821.collect::<Vec<_>>()"
        let v823 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v822 
        let v824 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v825 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v823 v824 
        let v826 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v827 : bool = Fable.Core.RustInterop.emitRustExpr v825 v826 
        let v828 : string = "x"
        let v829 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v828 
        let v830 : string = "String::from_iter($0)"
        let v831 : std_string_String = Fable.Core.RustInterop.emitRustExpr v829 v830 
        let v832 : string = "true; $0 }).collect::<Vec<_>>()"
        let v833 : bool = Fable.Core.RustInterop.emitRustExpr v831 v832 
        let v834 : string = "_vec_map"
        let v835 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v834 
        let v836 : string = "$0.len()"
        let v837 : unativeint = Fable.Core.RustInterop.emitRustExpr v835 v836 
        let v838 : (unativeint -> int32) = int32
        let v839 : int32 = v838 v837
        let v840 : string = ""
        let v841 : bool = v784 <> v840 
        let v845 : bool =
            if v841 then
                let v844 : bool = v839 <= 1
                v844
            else
                false
        if v845 then
            v21.l0 <- v815
            ()
        else
            v21.l0 <- v840
            let v846 : string = "true; $0.into_iter().for_each(|x| { //"
            let v847 : bool = Fable.Core.RustInterop.emitRustExpr v835 v846 
            let v848 : string = "x"
            let v849 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v848 
            let v850 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v849 v850 
            let v851 : string = $"true;"
            let v852 : bool = Fable.Core.RustInterop.emitRustExpr () v851 
            let v853 : string = "true; }}); { //"
            let v854 : bool = Fable.Core.RustInterop.emitRustExpr () v853 
            ()
        let _v803 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v802 v784
        let _v803 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v802 v784
        let _v803 = () 
        #endif
#else
        v802 v784
        let _v803 = () 
        #endif
        _v803 
        let v855 : (string -> unit) = v19.l0
        v855 v784
and closure20 (v0 : std_string_String) () : unit =
    let v1 : (std_string_String -> unit) = System.Console.WriteLine
    v1 v0
and closure19 () (v0 : std_string_String) : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure20(v0)
    let v3 : unit = (fun () -> v2 (); v1) ()
    ()
and closure21 (v0 : uint8, v1 : uint64, v2 : float) () : unit =
    let v3 : unit = ()
    let v4 : (unit -> unit) = closure8()
    let v5 : unit = (fun () -> v4 (); v3) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
    let v37 : unit = ()
    let v38 : unit = (fun () -> v4 (); v37) ()
    let struct (v52 : Mut0, v53 : Mut1, v54 : Mut2, v55 : Mut3, v56 : Mut4, v57 : int64 option) = TraceState.trace_state.Value
    let v70 : US3 = v56.l0
    let v71 : bool = v54.l0
    let v72 : bool = v71 = false
    let v75 : bool =
        if v72 then
            false
        else
            let v73 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v70
            let v74 : bool = 1 >= v73
            v74
    if v75 then
        let v76 : unit = ()
        let v77 : (unit -> unit) = closure9(v19)
        let v78 : unit = (fun () -> v77 (); v76) ()
        let v81 : unit = ()
        let v82 : unit = (fun () -> v4 (); v81) ()
        let struct (v96 : Mut0, v97 : Mut1, v98 : Mut2, v99 : Mut3, v100 : Mut4, v101 : int64 option) = TraceState.trace_state.Value
        let v114 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v115 : US5 option = None
        let _v115 = ref v115 
        let v116 : US5 option ref = _v115 
        let v117 : (US5 option -> US5 option ref) = closure10(v116)
        let v118 : unit = ()
        let v119 : (unit -> unit) = closure11(v101, v117)
        let v120 : unit = (fun () -> v119 (); v118) ()
        let v123 : US5 option = _v115.Value 
        let v134 : US5 = US5_1
        let v135 : US5 = v123 |> Option.defaultValue v134 
        let v175 : System.DateTime =
            match v135 with
            | US5_1 -> (* None *)
                let v171 : System.DateTime = System.DateTime.Now
                v171
            | US5_0(v139) -> (* Some *)
                let v140 : System.DateTime = System.DateTime.Now
                let v143 : (System.DateTime -> int64) = _.Ticks
                let v144 : int64 = v143 v140
                let v147 : int64 = v144 - v139
                let v148 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v149 : System.TimeSpan = v148 v147
                let v152 : (System.TimeSpan -> int32) = _.Hours
                let v153 : int32 = v152 v149
                let v156 : (System.TimeSpan -> int32) = _.Minutes
                let v157 : int32 = v156 v149
                let v160 : (System.TimeSpan -> int32) = _.Seconds
                let v161 : int32 = v160 v149
                let v164 : (System.TimeSpan -> int32) = _.Milliseconds
                let v165 : int32 = v164 v149
                let v168 : System.DateTime = System.DateTime (1, 1, 1, v153, v157, v161, v165)
                v168
        let v176 : string = method7()
        let v179 : (string -> string) = v175.ToString
        let v180 : string = v179 v176
        let _v114 = v180 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v183 : US5 option = None
        let _v183 = ref v183 
        let v184 : US5 option ref = _v183 
        let v185 : (US5 option -> US5 option ref) = closure10(v184)
        let v186 : unit = ()
        let v187 : (unit -> unit) = closure11(v101, v185)
        let v188 : unit = (fun () -> v187 (); v186) ()
        let v191 : US5 option = _v183.Value 
        let v202 : US5 = US5_1
        let v203 : US5 = v191 |> Option.defaultValue v202 
        let v243 : System.DateTime =
            match v203 with
            | US5_1 -> (* None *)
                let v239 : System.DateTime = System.DateTime.Now
                v239
            | US5_0(v207) -> (* Some *)
                let v208 : System.DateTime = System.DateTime.Now
                let v211 : (System.DateTime -> int64) = _.Ticks
                let v212 : int64 = v211 v208
                let v215 : int64 = v212 - v207
                let v216 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v217 : System.TimeSpan = v216 v215
                let v220 : (System.TimeSpan -> int32) = _.Hours
                let v221 : int32 = v220 v217
                let v224 : (System.TimeSpan -> int32) = _.Minutes
                let v225 : int32 = v224 v217
                let v228 : (System.TimeSpan -> int32) = _.Seconds
                let v229 : int32 = v228 v217
                let v232 : (System.TimeSpan -> int32) = _.Milliseconds
                let v233 : int32 = v232 v217
                let v236 : System.DateTime = System.DateTime (1, 1, 1, v221, v225, v229, v233)
                v236
        let v244 : string = method7()
        let v247 : (string -> string) = v243.ToString
        let v248 : string = v247 v244
        let _v114 = v248 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v251 : string = $"near_sdk::env::block_timestamp()"
        let v252 : uint64 = Fable.Core.RustInterop.emitRustExpr () v251 
        let v253 : US5 option = None
        let _v253 = ref v253 
        let v254 : US5 option ref = _v253 
        let v255 : (US5 option -> US5 option ref) = closure10(v254)
        let v256 : unit = ()
        let v257 : (unit -> unit) = closure11(v101, v255)
        let v258 : unit = (fun () -> v257 (); v256) ()
        let v261 : US5 option = _v253.Value 
        let v272 : US5 = US5_1
        let v273 : US5 = v261 |> Option.defaultValue v272 
        let v282 : uint64 =
            match v273 with
            | US5_1 -> (* None *)
                v252
            | US5_0(v277) -> (* Some *)
                let v278 : (int64 -> uint64) = uint64
                let v279 : uint64 = v278 v277
                let v280 : uint64 = v252 - v279
                v280
        let v283 : uint64 = v282 / 1000000000UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v283 / 60UL
        let v286 : uint64 = v285 % 60UL
        let v287 : uint64 = v283 / 3600UL
        let v288 : uint64 = v287 % 24UL
        let v289 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v288, v286, v284) v289 
        let v291 : string = "fable_library_rust::String_::fromString($0)"
        let v292 : string = Fable.Core.RustInterop.emitRustExpr v290 v291 
        let _v114 = v292 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v293 : US5 option = None
        let _v293 = ref v293 
        let v294 : US5 option ref = _v293 
        let v295 : (US5 option -> US5 option ref) = closure10(v294)
        let v296 : unit = ()
        let v297 : (unit -> unit) = closure11(v101, v295)
        let v298 : unit = (fun () -> v297 (); v296) ()
        let v301 : US5 option = _v293.Value 
        let v312 : US5 = US5_1
        let v313 : US5 = v301 |> Option.defaultValue v312 
        let v353 : System.DateTime =
            match v313 with
            | US5_1 -> (* None *)
                let v349 : System.DateTime = System.DateTime.Now
                v349
            | US5_0(v317) -> (* Some *)
                let v318 : System.DateTime = System.DateTime.Now
                let v321 : (System.DateTime -> int64) = _.Ticks
                let v322 : int64 = v321 v318
                let v325 : int64 = v322 - v317
                let v326 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v327 : System.TimeSpan = v326 v325
                let v330 : (System.TimeSpan -> int32) = _.Hours
                let v331 : int32 = v330 v327
                let v334 : (System.TimeSpan -> int32) = _.Minutes
                let v335 : int32 = v334 v327
                let v338 : (System.TimeSpan -> int32) = _.Seconds
                let v339 : int32 = v338 v327
                let v342 : (System.TimeSpan -> int32) = _.Milliseconds
                let v343 : int32 = v342 v327
                let v346 : System.DateTime = System.DateTime (1, 1, 1, v331, v335, v339, v343)
                v346
        let v354 : string = method8()
        let v357 : (string -> string) = v353.ToString
        let v358 : string = v357 v354
        let _v114 = v358 
        #endif
#if FABLE_COMPILER_PYTHON
        let v361 : US5 option = None
        let _v361 = ref v361 
        let v362 : US5 option ref = _v361 
        let v363 : (US5 option -> US5 option ref) = closure10(v362)
        let v364 : unit = ()
        let v365 : (unit -> unit) = closure11(v101, v363)
        let v366 : unit = (fun () -> v365 (); v364) ()
        let v369 : US5 option = _v361.Value 
        let v380 : US5 = US5_1
        let v381 : US5 = v369 |> Option.defaultValue v380 
        let v421 : System.DateTime =
            match v381 with
            | US5_1 -> (* None *)
                let v417 : System.DateTime = System.DateTime.Now
                v417
            | US5_0(v385) -> (* Some *)
                let v386 : System.DateTime = System.DateTime.Now
                let v389 : (System.DateTime -> int64) = _.Ticks
                let v390 : int64 = v389 v386
                let v393 : int64 = v390 - v385
                let v394 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v395 : System.TimeSpan = v394 v393
                let v398 : (System.TimeSpan -> int32) = _.Hours
                let v399 : int32 = v398 v395
                let v402 : (System.TimeSpan -> int32) = _.Minutes
                let v403 : int32 = v402 v395
                let v406 : (System.TimeSpan -> int32) = _.Seconds
                let v407 : int32 = v406 v395
                let v410 : (System.TimeSpan -> int32) = _.Milliseconds
                let v411 : int32 = v410 v395
                let v414 : System.DateTime = System.DateTime (1, 1, 1, v399, v403, v407, v411)
                v414
        let v422 : string = method8()
        let v425 : (string -> string) = v421.ToString
        let v426 : string = v425 v422
        let _v114 = v426 
        #endif
#else
        let v429 : US5 option = None
        let _v429 = ref v429 
        let v430 : US5 option ref = _v429 
        let v431 : (US5 option -> US5 option ref) = closure10(v430)
        let v432 : unit = ()
        let v433 : (unit -> unit) = closure11(v101, v431)
        let v434 : unit = (fun () -> v433 (); v432) ()
        let v437 : US5 option = _v429.Value 
        let v448 : US5 = US5_1
        let v449 : US5 = v437 |> Option.defaultValue v448 
        let v489 : System.DateTime =
            match v449 with
            | US5_1 -> (* None *)
                let v485 : System.DateTime = System.DateTime.Now
                v485
            | US5_0(v453) -> (* Some *)
                let v454 : System.DateTime = System.DateTime.Now
                let v457 : (System.DateTime -> int64) = _.Ticks
                let v458 : int64 = v457 v454
                let v461 : int64 = v458 - v453
                let v462 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v463 : System.TimeSpan = v462 v461
                let v466 : (System.TimeSpan -> int32) = _.Hours
                let v467 : int32 = v466 v463
                let v470 : (System.TimeSpan -> int32) = _.Minutes
                let v471 : int32 = v470 v463
                let v474 : (System.TimeSpan -> int32) = _.Seconds
                let v475 : int32 = v474 v463
                let v478 : (System.TimeSpan -> int32) = _.Milliseconds
                let v479 : int32 = v478 v463
                let v482 : System.DateTime = System.DateTime (1, 1, 1, v467, v471, v475, v479)
                v482
        let v490 : string = method8()
        let v493 : (string -> string) = v489.ToString
        let v494 : string = v493 v490
        let _v114 = v494 
        #endif
        let v497 : string = _v114 
        
        
        
        
        
        let v567 : string = "Debug"
        let v568 : (unit -> string) = v567.ToLower
        let v569 : string = v568 ()
        let v572 : string = v569.PadLeft (7, ' ')
        let v586 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v587 : string = "inline_colorization::color_bright_blue"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "&*$0"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v589 
        let v591 : string = "inline_colorization::color_reset"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "\"{v588}{v590}{v592}\""
        let v594 : string = @$"format!(" + v593 + ")"
        let v595 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "fable_library_rust::String_::fromString($0)"
        let v597 : string = Fable.Core.RustInterop.emitRustExpr v595 v596 
        let _v586 = v597 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v598 : string = "inline_colorization::color_bright_blue"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "&*$0"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v600 
        let v602 : string = "inline_colorization::color_reset"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "\"{v599}{v601}{v603}\""
        let v605 : string = @$"format!(" + v604 + ")"
        let v606 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "fable_library_rust::String_::fromString($0)"
        let v608 : string = Fable.Core.RustInterop.emitRustExpr v606 v607 
        let _v586 = v608 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v609 : string = "inline_colorization::color_bright_blue"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v609 
        let v611 : string = "&*$0"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v611 
        let v613 : string = "inline_colorization::color_reset"
        let v614 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v613 
        let v615 : string = "\"{v610}{v612}{v614}\""
        let v616 : string = @$"format!(" + v615 + ")"
        let v617 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v616 
        let v618 : string = "fable_library_rust::String_::fromString($0)"
        let v619 : string = Fable.Core.RustInterop.emitRustExpr v617 v618 
        let _v586 = v619 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v620 : string = "\u001b[94m"
        let v621 : string = method9()
        let v622 : string = v620 + v572 
        let v623 : string = v622 + v621 
        let _v586 = v623 
        #endif
#if FABLE_COMPILER_PYTHON
        let v624 : string = "\u001b[94m"
        let v625 : string = method9()
        let v626 : string = v624 + v572 
        let v627 : string = v626 + v625 
        let _v586 = v627 
        #endif
#else
        let v628 : string = "\u001b[94m"
        let v629 : string = method9()
        let v630 : string = v628 + v572 
        let v631 : string = v630 + v629 
        let _v586 = v631 
        #endif
        let v632 : string = _v586 
        let v638 : int64 = v96.l0
        let v639 : string = method10()
        let v640 : Mut3 = {l0 = v639} : Mut3
        let v641 : string = "{ "
        let v642 : string = $"{v641}"
        let v645 : unit = ()
        let v646 : (unit -> unit) = closure12(v640, v642)
        let v647 : unit = (fun () -> v646 (); v645) ()
        let v650 : string = "retry"
        let v651 : string = $"{v650}"
        let v654 : unit = ()
        let v655 : (unit -> unit) = closure12(v640, v651)
        let v656 : unit = (fun () -> v655 (); v654) ()
        let v659 : string = " = "
        let v660 : string = $"{v659}"
        let v663 : unit = ()
        let v664 : (unit -> unit) = closure12(v640, v660)
        let v665 : unit = (fun () -> v664 (); v663) ()
        let v668 : string = $"{v0}"
        let v671 : unit = ()
        let v672 : (unit -> unit) = closure12(v640, v668)
        let v673 : unit = (fun () -> v672 (); v671) ()
        let v676 : string = "; "
        let v677 : string = $"{v676}"
        let v680 : unit = ()
        let v681 : (unit -> unit) = closure12(v640, v677)
        let v682 : unit = (fun () -> v681 (); v680) ()
        let v685 : string = "total_gas_burnt_usd"
        let v686 : string = $"{v685}"
        let v689 : unit = ()
        let v690 : (unit -> unit) = closure12(v640, v686)
        let v691 : unit = (fun () -> v690 (); v689) ()
        let v694 : string = $"{v659}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure12(v640, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = $"%+.6f{v2}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure12(v640, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = $"{v676}"
        let v713 : unit = ()
        let v714 : (unit -> unit) = closure12(v640, v710)
        let v715 : unit = (fun () -> v714 (); v713) ()
        let v718 : string = "total_gas_burnt"
        let v719 : string = $"{v718}"
        let v722 : unit = ()
        let v723 : (unit -> unit) = closure12(v640, v719)
        let v724 : unit = (fun () -> v723 (); v722) ()
        let v727 : string = $"{v659}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure12(v640, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = $"{v1}"
        let v738 : unit = ()
        let v739 : (unit -> unit) = closure12(v640, v735)
        let v740 : unit = (fun () -> v739 (); v738) ()
        let v743 : string = " }"
        let v744 : string = $"{v743}"
        let v747 : unit = ()
        let v748 : (unit -> unit) = closure12(v640, v744)
        let v749 : unit = (fun () -> v748 (); v747) ()
        let v752 : string = v640.l0
        let v753 : string = "near_workspaces.print_usd"
        let v754 : string = $"{v497} {v632} #{v638} %s{v753} / {v752}"
        let v757 : char list = []
        let v758 : (char list -> (char [])) = List.toArray
        let v759 : (char []) = v758 v757
        let v762 : string = v754.TrimStart v759 
        let v780 : char list = []
        let v781 : char list = '/' :: v780 
        let v784 : char list = ' ' :: v781 
        let v787 : (char list -> (char [])) = List.toArray
        let v788 : (char []) = v787 v784
        let v791 : string = v762.TrimEnd v788 
        let v809 : (string -> unit) = closure13()
        let v810 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v811 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v791 v811 
        let _v810 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v812 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v791 v812 
        let _v810 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v813 : string = v22.l0
        let v814 : bool = v813 = ""
        let v822 : string =
            if v814 then
                v791
            else
                let v815 : bool = v791 = ""
                if v815 then
                    let v816 : string = v22.l0
                    v816
                else
                    let v817 : string = v22.l0
                    let v818 : string = "\n"
                    let v819 : string = v817 + v818 
                    let v820 : string = v819 + v791 
                    v820
        let v823 : string = "&*$0"
        let v824 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v822 v823 
        let v825 : string = $"$0.chars()"
        let v826 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = "v826"
        let v828 : _ = Fable.Core.RustInterop.emitRustExpr () v827 
        let v829 : string = "v828.collect::<Vec<_>>()"
        let v830 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v832 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let v833 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v834 : bool = Fable.Core.RustInterop.emitRustExpr v832 v833 
        let v835 : string = "x"
        let v836 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v835 
        let v837 : string = "String::from_iter($0)"
        let v838 : std_string_String = Fable.Core.RustInterop.emitRustExpr v836 v837 
        let v839 : string = "true; $0 }).collect::<Vec<_>>()"
        let v840 : bool = Fable.Core.RustInterop.emitRustExpr v838 v839 
        let v841 : string = "_vec_map"
        let v842 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v841 
        let v843 : string = "$0.len()"
        let v844 : unativeint = Fable.Core.RustInterop.emitRustExpr v842 v843 
        let v845 : (unativeint -> int32) = int32
        let v846 : int32 = v845 v844
        let v847 : string = ""
        let v848 : bool = v791 <> v847 
        let v852 : bool =
            if v848 then
                let v851 : bool = v846 <= 1
                v851
            else
                false
        if v852 then
            v22.l0 <- v822
            ()
        else
            v22.l0 <- v847
            let v853 : string = "true; $0.into_iter().for_each(|x| { //"
            let v854 : bool = Fable.Core.RustInterop.emitRustExpr v842 v853 
            let v855 : string = "x"
            let v856 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v855 
            let v857 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v856 v857 
            let v858 : string = $"true;"
            let v859 : bool = Fable.Core.RustInterop.emitRustExpr () v858 
            let v860 : string = "true; }}); { //"
            let v861 : bool = Fable.Core.RustInterop.emitRustExpr () v860 
            ()
        let _v810 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v809 v791
        let _v810 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v809 v791
        let _v810 = () 
        #endif
#else
        v809 v791
        let _v810 = () 
        #endif
        _v810 
        let v862 : (string -> unit) = v20.l0
        v862 v791
and closure23 (v0 : bool, v1 : uint64, v2 : float, v3 : u128, v4 : float) () : unit =
    let v5 : unit = ()
    let v6 : (unit -> unit) = closure8()
    let v7 : unit = (fun () -> v6 (); v5) ()
    let struct (v21 : Mut0, v22 : Mut1, v23 : Mut2, v24 : Mut3, v25 : Mut4, v26 : int64 option) = TraceState.trace_state.Value
    let v39 : unit = ()
    let v40 : unit = (fun () -> v6 (); v39) ()
    let struct (v54 : Mut0, v55 : Mut1, v56 : Mut2, v57 : Mut3, v58 : Mut4, v59 : int64 option) = TraceState.trace_state.Value
    let v72 : US3 = v58.l0
    let v73 : bool = v56.l0
    let v74 : bool = v73 = false
    let v77 : bool =
        if v74 then
            false
        else
            let v75 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v72
            let v76 : bool = 1 >= v75
            v76
    if v77 then
        let v78 : unit = ()
        let v79 : (unit -> unit) = closure9(v21)
        let v80 : unit = (fun () -> v79 (); v78) ()
        let v83 : unit = ()
        let v84 : unit = (fun () -> v6 (); v83) ()
        let struct (v98 : Mut0, v99 : Mut1, v100 : Mut2, v101 : Mut3, v102 : Mut4, v103 : int64 option) = TraceState.trace_state.Value
        let v116 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v117 : US5 option = None
        let _v117 = ref v117 
        let v118 : US5 option ref = _v117 
        let v119 : (US5 option -> US5 option ref) = closure10(v118)
        let v120 : unit = ()
        let v121 : (unit -> unit) = closure11(v103, v119)
        let v122 : unit = (fun () -> v121 (); v120) ()
        let v125 : US5 option = _v117.Value 
        let v136 : US5 = US5_1
        let v137 : US5 = v125 |> Option.defaultValue v136 
        let v177 : System.DateTime =
            match v137 with
            | US5_1 -> (* None *)
                let v173 : System.DateTime = System.DateTime.Now
                v173
            | US5_0(v141) -> (* Some *)
                let v142 : System.DateTime = System.DateTime.Now
                let v145 : (System.DateTime -> int64) = _.Ticks
                let v146 : int64 = v145 v142
                let v149 : int64 = v146 - v141
                let v150 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v151 : System.TimeSpan = v150 v149
                let v154 : (System.TimeSpan -> int32) = _.Hours
                let v155 : int32 = v154 v151
                let v158 : (System.TimeSpan -> int32) = _.Minutes
                let v159 : int32 = v158 v151
                let v162 : (System.TimeSpan -> int32) = _.Seconds
                let v163 : int32 = v162 v151
                let v166 : (System.TimeSpan -> int32) = _.Milliseconds
                let v167 : int32 = v166 v151
                let v170 : System.DateTime = System.DateTime (1, 1, 1, v155, v159, v163, v167)
                v170
        let v178 : string = method7()
        let v181 : (string -> string) = v177.ToString
        let v182 : string = v181 v178
        let _v116 = v182 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v185 : US5 option = None
        let _v185 = ref v185 
        let v186 : US5 option ref = _v185 
        let v187 : (US5 option -> US5 option ref) = closure10(v186)
        let v188 : unit = ()
        let v189 : (unit -> unit) = closure11(v103, v187)
        let v190 : unit = (fun () -> v189 (); v188) ()
        let v193 : US5 option = _v185.Value 
        let v204 : US5 = US5_1
        let v205 : US5 = v193 |> Option.defaultValue v204 
        let v245 : System.DateTime =
            match v205 with
            | US5_1 -> (* None *)
                let v241 : System.DateTime = System.DateTime.Now
                v241
            | US5_0(v209) -> (* Some *)
                let v210 : System.DateTime = System.DateTime.Now
                let v213 : (System.DateTime -> int64) = _.Ticks
                let v214 : int64 = v213 v210
                let v217 : int64 = v214 - v209
                let v218 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v219 : System.TimeSpan = v218 v217
                let v222 : (System.TimeSpan -> int32) = _.Hours
                let v223 : int32 = v222 v219
                let v226 : (System.TimeSpan -> int32) = _.Minutes
                let v227 : int32 = v226 v219
                let v230 : (System.TimeSpan -> int32) = _.Seconds
                let v231 : int32 = v230 v219
                let v234 : (System.TimeSpan -> int32) = _.Milliseconds
                let v235 : int32 = v234 v219
                let v238 : System.DateTime = System.DateTime (1, 1, 1, v223, v227, v231, v235)
                v238
        let v246 : string = method7()
        let v249 : (string -> string) = v245.ToString
        let v250 : string = v249 v246
        let _v116 = v250 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v253 : string = $"near_sdk::env::block_timestamp()"
        let v254 : uint64 = Fable.Core.RustInterop.emitRustExpr () v253 
        let v255 : US5 option = None
        let _v255 = ref v255 
        let v256 : US5 option ref = _v255 
        let v257 : (US5 option -> US5 option ref) = closure10(v256)
        let v258 : unit = ()
        let v259 : (unit -> unit) = closure11(v103, v257)
        let v260 : unit = (fun () -> v259 (); v258) ()
        let v263 : US5 option = _v255.Value 
        let v274 : US5 = US5_1
        let v275 : US5 = v263 |> Option.defaultValue v274 
        let v284 : uint64 =
            match v275 with
            | US5_1 -> (* None *)
                v254
            | US5_0(v279) -> (* Some *)
                let v280 : (int64 -> uint64) = uint64
                let v281 : uint64 = v280 v279
                let v282 : uint64 = v254 - v281
                v282
        let v285 : uint64 = v284 / 1000000000UL
        let v286 : uint64 = v285 % 60UL
        let v287 : uint64 = v285 / 60UL
        let v288 : uint64 = v287 % 60UL
        let v289 : uint64 = v285 / 3600UL
        let v290 : uint64 = v289 % 24UL
        let v291 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v292 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v290, v288, v286) v291 
        let v293 : string = "fable_library_rust::String_::fromString($0)"
        let v294 : string = Fable.Core.RustInterop.emitRustExpr v292 v293 
        let _v116 = v294 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v295 : US5 option = None
        let _v295 = ref v295 
        let v296 : US5 option ref = _v295 
        let v297 : (US5 option -> US5 option ref) = closure10(v296)
        let v298 : unit = ()
        let v299 : (unit -> unit) = closure11(v103, v297)
        let v300 : unit = (fun () -> v299 (); v298) ()
        let v303 : US5 option = _v295.Value 
        let v314 : US5 = US5_1
        let v315 : US5 = v303 |> Option.defaultValue v314 
        let v355 : System.DateTime =
            match v315 with
            | US5_1 -> (* None *)
                let v351 : System.DateTime = System.DateTime.Now
                v351
            | US5_0(v319) -> (* Some *)
                let v320 : System.DateTime = System.DateTime.Now
                let v323 : (System.DateTime -> int64) = _.Ticks
                let v324 : int64 = v323 v320
                let v327 : int64 = v324 - v319
                let v328 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v329 : System.TimeSpan = v328 v327
                let v332 : (System.TimeSpan -> int32) = _.Hours
                let v333 : int32 = v332 v329
                let v336 : (System.TimeSpan -> int32) = _.Minutes
                let v337 : int32 = v336 v329
                let v340 : (System.TimeSpan -> int32) = _.Seconds
                let v341 : int32 = v340 v329
                let v344 : (System.TimeSpan -> int32) = _.Milliseconds
                let v345 : int32 = v344 v329
                let v348 : System.DateTime = System.DateTime (1, 1, 1, v333, v337, v341, v345)
                v348
        let v356 : string = method8()
        let v359 : (string -> string) = v355.ToString
        let v360 : string = v359 v356
        let _v116 = v360 
        #endif
#if FABLE_COMPILER_PYTHON
        let v363 : US5 option = None
        let _v363 = ref v363 
        let v364 : US5 option ref = _v363 
        let v365 : (US5 option -> US5 option ref) = closure10(v364)
        let v366 : unit = ()
        let v367 : (unit -> unit) = closure11(v103, v365)
        let v368 : unit = (fun () -> v367 (); v366) ()
        let v371 : US5 option = _v363.Value 
        let v382 : US5 = US5_1
        let v383 : US5 = v371 |> Option.defaultValue v382 
        let v423 : System.DateTime =
            match v383 with
            | US5_1 -> (* None *)
                let v419 : System.DateTime = System.DateTime.Now
                v419
            | US5_0(v387) -> (* Some *)
                let v388 : System.DateTime = System.DateTime.Now
                let v391 : (System.DateTime -> int64) = _.Ticks
                let v392 : int64 = v391 v388
                let v395 : int64 = v392 - v387
                let v396 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v397 : System.TimeSpan = v396 v395
                let v400 : (System.TimeSpan -> int32) = _.Hours
                let v401 : int32 = v400 v397
                let v404 : (System.TimeSpan -> int32) = _.Minutes
                let v405 : int32 = v404 v397
                let v408 : (System.TimeSpan -> int32) = _.Seconds
                let v409 : int32 = v408 v397
                let v412 : (System.TimeSpan -> int32) = _.Milliseconds
                let v413 : int32 = v412 v397
                let v416 : System.DateTime = System.DateTime (1, 1, 1, v401, v405, v409, v413)
                v416
        let v424 : string = method8()
        let v427 : (string -> string) = v423.ToString
        let v428 : string = v427 v424
        let _v116 = v428 
        #endif
#else
        let v431 : US5 option = None
        let _v431 = ref v431 
        let v432 : US5 option ref = _v431 
        let v433 : (US5 option -> US5 option ref) = closure10(v432)
        let v434 : unit = ()
        let v435 : (unit -> unit) = closure11(v103, v433)
        let v436 : unit = (fun () -> v435 (); v434) ()
        let v439 : US5 option = _v431.Value 
        let v450 : US5 = US5_1
        let v451 : US5 = v439 |> Option.defaultValue v450 
        let v491 : System.DateTime =
            match v451 with
            | US5_1 -> (* None *)
                let v487 : System.DateTime = System.DateTime.Now
                v487
            | US5_0(v455) -> (* Some *)
                let v456 : System.DateTime = System.DateTime.Now
                let v459 : (System.DateTime -> int64) = _.Ticks
                let v460 : int64 = v459 v456
                let v463 : int64 = v460 - v455
                let v464 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v465 : System.TimeSpan = v464 v463
                let v468 : (System.TimeSpan -> int32) = _.Hours
                let v469 : int32 = v468 v465
                let v472 : (System.TimeSpan -> int32) = _.Minutes
                let v473 : int32 = v472 v465
                let v476 : (System.TimeSpan -> int32) = _.Seconds
                let v477 : int32 = v476 v465
                let v480 : (System.TimeSpan -> int32) = _.Milliseconds
                let v481 : int32 = v480 v465
                let v484 : System.DateTime = System.DateTime (1, 1, 1, v469, v473, v477, v481)
                v484
        let v492 : string = method8()
        let v495 : (string -> string) = v491.ToString
        let v496 : string = v495 v492
        let _v116 = v496 
        #endif
        let v499 : string = _v116 
        
        
        
        
        
        let v569 : string = "Debug"
        let v570 : (unit -> string) = v569.ToLower
        let v571 : string = v570 ()
        let v574 : string = v571.PadLeft (7, ' ')
        let v588 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v589 : string = "inline_colorization::color_bright_blue"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "&*$0"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v574 v591 
        let v593 : string = "inline_colorization::color_reset"
        let v594 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "\"{v590}{v592}{v594}\""
        let v596 : string = @$"format!(" + v595 + ")"
        let v597 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "fable_library_rust::String_::fromString($0)"
        let v599 : string = Fable.Core.RustInterop.emitRustExpr v597 v598 
        let _v588 = v599 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v600 : string = "inline_colorization::color_bright_blue"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "&*$0"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v574 v602 
        let v604 : string = "inline_colorization::color_reset"
        let v605 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "\"{v601}{v603}{v605}\""
        let v607 : string = @$"format!(" + v606 + ")"
        let v608 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "fable_library_rust::String_::fromString($0)"
        let v610 : string = Fable.Core.RustInterop.emitRustExpr v608 v609 
        let _v588 = v610 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v611 : string = "inline_colorization::color_bright_blue"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "&*$0"
        let v614 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v574 v613 
        let v615 : string = "inline_colorization::color_reset"
        let v616 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "\"{v612}{v614}{v616}\""
        let v618 : string = @$"format!(" + v617 + ")"
        let v619 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v618 
        let v620 : string = "fable_library_rust::String_::fromString($0)"
        let v621 : string = Fable.Core.RustInterop.emitRustExpr v619 v620 
        let _v588 = v621 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v622 : string = "\u001b[94m"
        let v623 : string = method9()
        let v624 : string = v622 + v574 
        let v625 : string = v624 + v623 
        let _v588 = v625 
        #endif
#if FABLE_COMPILER_PYTHON
        let v626 : string = "\u001b[94m"
        let v627 : string = method9()
        let v628 : string = v626 + v574 
        let v629 : string = v628 + v627 
        let _v588 = v629 
        #endif
#else
        let v630 : string = "\u001b[94m"
        let v631 : string = method9()
        let v632 : string = v630 + v574 
        let v633 : string = v632 + v631 
        let _v588 = v633 
        #endif
        let v634 : string = _v588 
        let v640 : int64 = v98.l0
        let v641 : string = method10()
        let v642 : Mut3 = {l0 = v641} : Mut3
        let v643 : string = "{ "
        let v644 : string = $"{v643}"
        let v647 : unit = ()
        let v648 : (unit -> unit) = closure12(v642, v644)
        let v649 : unit = (fun () -> v648 (); v647) ()
        let v652 : string = "is_success"
        let v653 : string = $"{v652}"
        let v656 : unit = ()
        let v657 : (unit -> unit) = closure12(v642, v653)
        let v658 : unit = (fun () -> v657 (); v656) ()
        let v661 : string = " = "
        let v662 : string = $"{v661}"
        let v665 : unit = ()
        let v666 : (unit -> unit) = closure12(v642, v662)
        let v667 : unit = (fun () -> v666 (); v665) ()
        let v672 : string =
            if v0 then
                let v670 : string = "true"
                v670
            else
                let v671 : string = "false"
                v671
        let v673 : string = $"{v672}"
        let v676 : unit = ()
        let v677 : (unit -> unit) = closure12(v642, v673)
        let v678 : unit = (fun () -> v677 (); v676) ()
        let v681 : string = "; "
        let v682 : string = $"{v681}"
        let v685 : unit = ()
        let v686 : (unit -> unit) = closure12(v642, v682)
        let v687 : unit = (fun () -> v686 (); v685) ()
        let v690 : string = "gas_burnt_usd"
        let v691 : string = $"{v690}"
        let v694 : unit = ()
        let v695 : (unit -> unit) = closure12(v642, v691)
        let v696 : unit = (fun () -> v695 (); v694) ()
        let v699 : string = $"{v661}"
        let v702 : unit = ()
        let v703 : (unit -> unit) = closure12(v642, v699)
        let v704 : unit = (fun () -> v703 (); v702) ()
        let v707 : string = $"%+.6f{v2}"
        let v710 : unit = ()
        let v711 : (unit -> unit) = closure12(v642, v707)
        let v712 : unit = (fun () -> v711 (); v710) ()
        let v715 : string = $"{v681}"
        let v718 : unit = ()
        let v719 : (unit -> unit) = closure12(v642, v715)
        let v720 : unit = (fun () -> v719 (); v718) ()
        let v723 : string = "tokens_burnt_usd"
        let v724 : string = $"{v723}"
        let v727 : unit = ()
        let v728 : (unit -> unit) = closure12(v642, v724)
        let v729 : unit = (fun () -> v728 (); v727) ()
        let v732 : string = $"{v661}"
        let v735 : unit = ()
        let v736 : (unit -> unit) = closure12(v642, v732)
        let v737 : unit = (fun () -> v736 (); v735) ()
        let v740 : string = $"%+.6f{v4}"
        let v743 : unit = ()
        let v744 : (unit -> unit) = closure12(v642, v740)
        let v745 : unit = (fun () -> v744 (); v743) ()
        let v748 : string = $"{v681}"
        let v751 : unit = ()
        let v752 : (unit -> unit) = closure12(v642, v748)
        let v753 : unit = (fun () -> v752 (); v751) ()
        let v756 : string = "gas_burnt"
        let v757 : string = $"{v756}"
        let v760 : unit = ()
        let v761 : (unit -> unit) = closure12(v642, v757)
        let v762 : unit = (fun () -> v761 (); v760) ()
        let v765 : string = $"{v661}"
        let v768 : unit = ()
        let v769 : (unit -> unit) = closure12(v642, v765)
        let v770 : unit = (fun () -> v769 (); v768) ()
        let v773 : string = $"{v1}"
        let v776 : unit = ()
        let v777 : (unit -> unit) = closure12(v642, v773)
        let v778 : unit = (fun () -> v777 (); v776) ()
        let v781 : string = $"{v681}"
        let v784 : unit = ()
        let v785 : (unit -> unit) = closure12(v642, v781)
        let v786 : unit = (fun () -> v785 (); v784) ()
        let v789 : string = "tokens_burnt"
        let v790 : string = $"{v789}"
        let v793 : unit = ()
        let v794 : (unit -> unit) = closure12(v642, v790)
        let v795 : unit = (fun () -> v794 (); v793) ()
        let v798 : string = $"{v661}"
        let v801 : unit = ()
        let v802 : (unit -> unit) = closure12(v642, v798)
        let v803 : unit = (fun () -> v802 (); v801) ()
        let v806 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v807 : string = "format!(\"{:#?}\", $0)"
        let v808 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v807 
        let v809 : string = "fable_library_rust::String_::fromString($0)"
        let v810 : string = Fable.Core.RustInterop.emitRustExpr v808 v809 
        let _v806 = v810 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v811 : string = "format!(\"{:#?}\", $0)"
        let v812 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v811 
        let v813 : string = "fable_library_rust::String_::fromString($0)"
        let v814 : string = Fable.Core.RustInterop.emitRustExpr v812 v813 
        let _v806 = v814 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v815 : string = "format!(\"{:#?}\", $0)"
        let v816 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v815 
        let v817 : string = "fable_library_rust::String_::fromString($0)"
        let v818 : string = Fable.Core.RustInterop.emitRustExpr v816 v817 
        let _v806 = v818 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v819 : string = $"%A{v3}"
        let _v806 = v819 
        #endif
#if FABLE_COMPILER_PYTHON
        let v822 : string = $"%A{v3}"
        let _v806 = v822 
        #endif
#else
        let v825 : string = $"%A{v3}"
        let _v806 = v825 
        #endif
        let v828 : string = _v806 
        let v833 : string = $"{v828}"
        let v836 : unit = ()
        let v837 : (unit -> unit) = closure12(v642, v833)
        let v838 : unit = (fun () -> v837 (); v836) ()
        let v841 : string = " }"
        let v842 : string = $"{v841}"
        let v845 : unit = ()
        let v846 : (unit -> unit) = closure12(v642, v842)
        let v847 : unit = (fun () -> v846 (); v845) ()
        let v850 : string = v642.l0
        let v851 : string = "near_workspaces.print_usd / outcome"
        let v852 : string = $"{v499} {v634} #{v640} %s{v851} / {v850}"
        let v855 : char list = []
        let v856 : (char list -> (char [])) = List.toArray
        let v857 : (char []) = v856 v855
        let v860 : string = v852.TrimStart v857 
        let v878 : char list = []
        let v879 : char list = '/' :: v878 
        let v882 : char list = ' ' :: v879 
        let v885 : (char list -> (char [])) = List.toArray
        let v886 : (char []) = v885 v882
        let v889 : string = v860.TrimEnd v886 
        let v907 : (string -> unit) = closure13()
        let v908 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v909 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v889 v909 
        let _v908 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v910 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v889 v910 
        let _v908 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v911 : string = v24.l0
        let v912 : bool = v911 = ""
        let v920 : string =
            if v912 then
                v889
            else
                let v913 : bool = v889 = ""
                if v913 then
                    let v914 : string = v24.l0
                    v914
                else
                    let v915 : string = v24.l0
                    let v916 : string = "\n"
                    let v917 : string = v915 + v916 
                    let v918 : string = v917 + v889 
                    v918
        let v921 : string = "&*$0"
        let v922 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v920 v921 
        let v923 : string = $"$0.chars()"
        let v924 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v922 v923 
        let v925 : string = "v924"
        let v926 : _ = Fable.Core.RustInterop.emitRustExpr () v925 
        let v927 : string = "v926.collect::<Vec<_>>()"
        let v928 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v927 
        let v929 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v930 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v928 v929 
        let v931 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v932 : bool = Fable.Core.RustInterop.emitRustExpr v930 v931 
        let v933 : string = "x"
        let v934 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v933 
        let v935 : string = "String::from_iter($0)"
        let v936 : std_string_String = Fable.Core.RustInterop.emitRustExpr v934 v935 
        let v937 : string = "true; $0 }).collect::<Vec<_>>()"
        let v938 : bool = Fable.Core.RustInterop.emitRustExpr v936 v937 
        let v939 : string = "_vec_map"
        let v940 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v939 
        let v941 : string = "$0.len()"
        let v942 : unativeint = Fable.Core.RustInterop.emitRustExpr v940 v941 
        let v943 : (unativeint -> int32) = int32
        let v944 : int32 = v943 v942
        let v945 : string = ""
        let v946 : bool = v889 <> v945 
        let v950 : bool =
            if v946 then
                let v949 : bool = v944 <= 1
                v949
            else
                false
        if v950 then
            v24.l0 <- v920
            ()
        else
            v24.l0 <- v945
            let v951 : string = "true; $0.into_iter().for_each(|x| { //"
            let v952 : bool = Fable.Core.RustInterop.emitRustExpr v940 v951 
            let v953 : string = "x"
            let v954 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v953 
            let v955 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v954 v955 
            let v956 : string = $"true;"
            let v957 : bool = Fable.Core.RustInterop.emitRustExpr () v956 
            let v958 : string = "true; }}); { //"
            let v959 : bool = Fable.Core.RustInterop.emitRustExpr () v958 
            ()
        let _v908 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v907 v889
        let _v908 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v907 v889
        let _v908 = () 
        #endif
#else
        v907 v889
        let _v908 = () 
        #endif
        _v908 
        let v960 : (string -> unit) = v22.l0
        v960 v889
and closure22 () (v0 : near_workspaces_result_ExecutionOutcome) : unit =
    let v1 : string = "$0.is_success()"
    let v2 : bool = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "$0.gas_burnt"
    let v4 : near_workspaces_types_Gas = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let v5 : string = "$0.as_gas()"
    let v6 : uint64 = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : (uint64 -> float) = float
    let v8 : float = v7 v6
    let v9 : float = v8 / 10000000000000000.0
    let v10 : float = v9 * 6.68
    let v11 : string = "$0.tokens_burnt"
    let v12 : near_workspaces_types_NearToken = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let v13 : string = "$0.as_yoctonear()"
    let v14 : u128 = Fable.Core.RustInterop.emitRustExpr v12 v13 
    let v15 : string = "$0 as f64"
    let v16 : float = Fable.Core.RustInterop.emitRustExpr v14 v15 
    let v17 : float = v16 / 1E+24
    let v18 : float = v17 * 6.68
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure23(v2, v6, v10, v14, v18)
    let v21 : unit = (fun () -> v20 (); v19) ()
    ()
and closure24 (v0 : Result<near_workspaces_result_ExecutionSuccess, near_workspaces_result_ExecutionFailure>) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 0 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Verbose"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_black"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_black"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_black"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[90m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[90m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[90m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "result2"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v667 : string = "format!(\"{:#?}\", $0)"
        let v668 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v667 
        let v669 : string = "fable_library_rust::String_::fromString($0)"
        let v670 : string = Fable.Core.RustInterop.emitRustExpr v668 v669 
        let _v666 = v670 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v671 : string = "format!(\"{:#?}\", $0)"
        let v672 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v671 
        let v673 : string = "fable_library_rust::String_::fromString($0)"
        let v674 : string = Fable.Core.RustInterop.emitRustExpr v672 v673 
        let _v666 = v674 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v675 : string = "format!(\"{:#?}\", $0)"
        let v676 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v675 
        let v677 : string = "fable_library_rust::String_::fromString($0)"
        let v678 : string = Fable.Core.RustInterop.emitRustExpr v676 v677 
        let _v666 = v678 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v679 : string = $"%A{v0}"
        let _v666 = v679 
        #endif
#if FABLE_COMPILER_PYTHON
        let v682 : string = $"%A{v0}"
        let _v666 = v682 
        #endif
#else
        let v685 : string = $"%A{v0}"
        let _v666 = v685 
        #endif
        let v688 : string = _v666 
        let v693 : string = $"{v688}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure12(v638, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = " }"
        let v702 : string = $"{v701}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure12(v638, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = v638.l0
        let v711 : string = "spiral_wasm.run"
        let v712 : string = $"{v495} {v630} #{v636} %s{v711} / {v710}"
        let v715 : char list = []
        let v716 : (char list -> (char [])) = List.toArray
        let v717 : (char []) = v716 v715
        let v720 : string = v712.TrimStart v717 
        let v738 : char list = []
        let v739 : char list = '/' :: v738 
        let v742 : char list = ' ' :: v739 
        let v745 : (char list -> (char [])) = List.toArray
        let v746 : (char []) = v745 v742
        let v749 : string = v720.TrimEnd v746 
        let v767 : (string -> unit) = closure13()
        let v768 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v769 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v749 v769 
        let _v768 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v770 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v749 v770 
        let _v768 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v771 : string = v20.l0
        let v772 : bool = v771 = ""
        let v780 : string =
            if v772 then
                v749
            else
                let v773 : bool = v749 = ""
                if v773 then
                    let v774 : string = v20.l0
                    v774
                else
                    let v775 : string = v20.l0
                    let v776 : string = "\n"
                    let v777 : string = v775 + v776 
                    let v778 : string = v777 + v749 
                    v778
        let v781 : string = "&*$0"
        let v782 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v780 v781 
        let v783 : string = $"$0.chars()"
        let v784 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v782 v783 
        let v785 : string = "v784"
        let v786 : _ = Fable.Core.RustInterop.emitRustExpr () v785 
        let v787 : string = "v786.collect::<Vec<_>>()"
        let v788 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v787 
        let v789 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v790 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v788 v789 
        let v791 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v792 : bool = Fable.Core.RustInterop.emitRustExpr v790 v791 
        let v793 : string = "x"
        let v794 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v793 
        let v795 : string = "String::from_iter($0)"
        let v796 : std_string_String = Fable.Core.RustInterop.emitRustExpr v794 v795 
        let v797 : string = "true; $0 }).collect::<Vec<_>>()"
        let v798 : bool = Fable.Core.RustInterop.emitRustExpr v796 v797 
        let v799 : string = "_vec_map"
        let v800 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v799 
        let v801 : string = "$0.len()"
        let v802 : unativeint = Fable.Core.RustInterop.emitRustExpr v800 v801 
        let v803 : (unativeint -> int32) = int32
        let v804 : int32 = v803 v802
        let v805 : string = ""
        let v806 : bool = v749 <> v805 
        let v810 : bool =
            if v806 then
                let v809 : bool = v804 <= 1
                v809
            else
                false
        if v810 then
            v20.l0 <- v780
            ()
        else
            v20.l0 <- v805
            let v811 : string = "true; $0.into_iter().for_each(|x| { //"
            let v812 : bool = Fable.Core.RustInterop.emitRustExpr v800 v811 
            let v813 : string = "x"
            let v814 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v813 
            let v815 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v814 v815 
            let v816 : string = $"true;"
            let v817 : bool = Fable.Core.RustInterop.emitRustExpr () v816 
            let v818 : string = "true; }}); { //"
            let v819 : bool = Fable.Core.RustInterop.emitRustExpr () v818 
            ()
        let _v768 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v767 v749
        let _v768 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v767 v749
        let _v768 = () 
        #endif
#else
        v767 v749
        let _v768 = () 
        #endif
        _v768 
        let v820 : (string -> unit) = v18.l0
        v820 v749
and method15 (v0 : near_workspaces_result_ExecutionFinalResult) : near_workspaces_result_ExecutionFinalResult =
    v0
and closure25 (v0 : Vec<Ref<near_workspaces_result_ExecutionOutcome>>, v1 : int32) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure8()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US3 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 0 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure9(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US5 option = None
        let _v114 = ref v114 
        let v115 : US5 option ref = _v114 
        let v116 : (US5 option -> US5 option ref) = closure10(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure11(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US5 option = _v114.Value 
        let v133 : US5 = US5_1
        let v134 : US5 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US5_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US5_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method7()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US5 option = None
        let _v182 = ref v182 
        let v183 : US5 option ref = _v182 
        let v184 : (US5 option -> US5 option ref) = closure10(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure11(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US5 option = _v182.Value 
        let v201 : US5 = US5_1
        let v202 : US5 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US5_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US5_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method7()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US5 option = None
        let _v252 = ref v252 
        let v253 : US5 option ref = _v252 
        let v254 : (US5 option -> US5 option ref) = closure10(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure11(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US5 option = _v252.Value 
        let v271 : US5 = US5_1
        let v272 : US5 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US5_1 -> (* None *)
                v251
            | US5_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US5 option = None
        let _v292 = ref v292 
        let v293 : US5 option ref = _v292 
        let v294 : (US5 option -> US5 option ref) = closure10(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure11(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US5 option = _v292.Value 
        let v311 : US5 = US5_1
        let v312 : US5 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US5_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US5_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method8()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US5 option = None
        let _v360 = ref v360 
        let v361 : US5 option ref = _v360 
        let v362 : (US5 option -> US5 option ref) = closure10(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure11(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US5 option = _v360.Value 
        let v379 : US5 = US5_1
        let v380 : US5 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US5_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US5_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method8()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US5 option = None
        let _v428 = ref v428 
        let v429 : US5 option ref = _v428 
        let v430 : (US5 option -> US5 option ref) = closure10(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure11(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US5 option = _v428.Value 
        let v447 : US5 = US5_1
        let v448 : US5 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US5_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US5_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method8()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Verbose"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_black"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_black"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_black"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[90m"
        let v620 : string = method9()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[90m"
        let v624 : string = method9()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[90m"
        let v628 : string = method9()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : string = method10()
        let v639 : Mut3 = {l0 = v638} : Mut3
        let v640 : string = "{ "
        let v641 : string = $"{v640}"
        let v644 : unit = ()
        let v645 : (unit -> unit) = closure12(v639, v641)
        let v646 : unit = (fun () -> v645 (); v644) ()
        let v649 : string = "receipt_failures_len"
        let v650 : string = $"{v649}"
        let v653 : unit = ()
        let v654 : (unit -> unit) = closure12(v639, v650)
        let v655 : unit = (fun () -> v654 (); v653) ()
        let v658 : string = " = "
        let v659 : string = $"{v658}"
        let v662 : unit = ()
        let v663 : (unit -> unit) = closure12(v639, v659)
        let v664 : unit = (fun () -> v663 (); v662) ()
        let v667 : string = $"{v1}"
        let v670 : unit = ()
        let v671 : (unit -> unit) = closure12(v639, v667)
        let v672 : unit = (fun () -> v671 (); v670) ()
        let v675 : string = "; "
        let v676 : string = $"{v675}"
        let v679 : unit = ()
        let v680 : (unit -> unit) = closure12(v639, v676)
        let v681 : unit = (fun () -> v680 (); v679) ()
        let v684 : string = "receipt_failures"
        let v685 : string = $"{v684}"
        let v688 : unit = ()
        let v689 : (unit -> unit) = closure12(v639, v685)
        let v690 : unit = (fun () -> v689 (); v688) ()
        let v693 : string = $"{v658}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure12(v639, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v702 : string = "format!(\"{:#?}\", $0)"
        let v703 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v702 
        let v704 : string = "fable_library_rust::String_::fromString($0)"
        let v705 : string = Fable.Core.RustInterop.emitRustExpr v703 v704 
        let _v701 = v705 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v706 : string = "format!(\"{:#?}\", $0)"
        let v707 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v706 
        let v708 : string = "fable_library_rust::String_::fromString($0)"
        let v709 : string = Fable.Core.RustInterop.emitRustExpr v707 v708 
        let _v701 = v709 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v710 : string = "format!(\"{:#?}\", $0)"
        let v711 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v710 
        let v712 : string = "fable_library_rust::String_::fromString($0)"
        let v713 : string = Fable.Core.RustInterop.emitRustExpr v711 v712 
        let _v701 = v713 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v714 : string = $"%A{v0}"
        let _v701 = v714 
        #endif
#if FABLE_COMPILER_PYTHON
        let v717 : string = $"%A{v0}"
        let _v701 = v717 
        #endif
#else
        let v720 : string = $"%A{v0}"
        let _v701 = v720 
        #endif
        let v723 : string = _v701 
        let v728 : string = $"{v723}"
        let v731 : unit = ()
        let v732 : (unit -> unit) = closure12(v639, v728)
        let v733 : unit = (fun () -> v732 (); v731) ()
        let v736 : string = " }"
        let v737 : string = $"{v736}"
        let v740 : unit = ()
        let v741 : (unit -> unit) = closure12(v639, v737)
        let v742 : unit = (fun () -> v741 (); v740) ()
        let v745 : string = v639.l0
        let v746 : string = "spiral_wasm.run"
        let v747 : string = $"{v496} {v631} #{v637} %s{v746} / {v745}"
        let v750 : char list = []
        let v751 : (char list -> (char [])) = List.toArray
        let v752 : (char []) = v751 v750
        let v755 : string = v747.TrimStart v752 
        let v773 : char list = []
        let v774 : char list = '/' :: v773 
        let v777 : char list = ' ' :: v774 
        let v780 : (char list -> (char [])) = List.toArray
        let v781 : (char []) = v780 v777
        let v784 : string = v755.TrimEnd v781 
        let v802 : (string -> unit) = closure13()
        let v803 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v804 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v784 v804 
        let _v803 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v805 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v784 v805 
        let _v803 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v806 : string = v21.l0
        let v807 : bool = v806 = ""
        let v815 : string =
            if v807 then
                v784
            else
                let v808 : bool = v784 = ""
                if v808 then
                    let v809 : string = v21.l0
                    v809
                else
                    let v810 : string = v21.l0
                    let v811 : string = "\n"
                    let v812 : string = v810 + v811 
                    let v813 : string = v812 + v784 
                    v813
        let v816 : string = "&*$0"
        let v817 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v815 v816 
        let v818 : string = $"$0.chars()"
        let v819 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v817 v818 
        let v820 : string = "v819"
        let v821 : _ = Fable.Core.RustInterop.emitRustExpr () v820 
        let v822 : string = "v821.collect::<Vec<_>>()"
        let v823 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v822 
        let v824 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v825 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v823 v824 
        let v826 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v827 : bool = Fable.Core.RustInterop.emitRustExpr v825 v826 
        let v828 : string = "x"
        let v829 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v828 
        let v830 : string = "String::from_iter($0)"
        let v831 : std_string_String = Fable.Core.RustInterop.emitRustExpr v829 v830 
        let v832 : string = "true; $0 }).collect::<Vec<_>>()"
        let v833 : bool = Fable.Core.RustInterop.emitRustExpr v831 v832 
        let v834 : string = "_vec_map"
        let v835 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v834 
        let v836 : string = "$0.len()"
        let v837 : unativeint = Fable.Core.RustInterop.emitRustExpr v835 v836 
        let v838 : (unativeint -> int32) = int32
        let v839 : int32 = v838 v837
        let v840 : string = ""
        let v841 : bool = v784 <> v840 
        let v845 : bool =
            if v841 then
                let v844 : bool = v839 <= 1
                v844
            else
                false
        if v845 then
            v21.l0 <- v815
            ()
        else
            v21.l0 <- v840
            let v846 : string = "true; $0.into_iter().for_each(|x| { //"
            let v847 : bool = Fable.Core.RustInterop.emitRustExpr v835 v846 
            let v848 : string = "x"
            let v849 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v848 
            let v850 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v849 v850 
            let v851 : string = $"true;"
            let v852 : bool = Fable.Core.RustInterop.emitRustExpr () v851 
            let v853 : string = "true; }}); { //"
            let v854 : bool = Fable.Core.RustInterop.emitRustExpr () v853 
            ()
        let _v803 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v802 v784
        let _v803 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v802 v784
        let _v803 = () 
        #endif
#else
        v802 v784
        let _v803 = () 
        #endif
        _v803 
        let v855 : (string -> unit) = v19.l0
        v855 v784
and method16 (v0 : near_workspaces_result_ExecutionFinalResult) : near_workspaces_result_ExecutionFinalResult =
    v0
and closure26 (v0 : Vec<near_workspaces_result_ExecutionOutcome>, v1 : int32) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure8()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US3 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 0 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure9(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US5 option = None
        let _v114 = ref v114 
        let v115 : US5 option ref = _v114 
        let v116 : (US5 option -> US5 option ref) = closure10(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure11(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US5 option = _v114.Value 
        let v133 : US5 = US5_1
        let v134 : US5 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US5_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US5_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method7()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US5 option = None
        let _v182 = ref v182 
        let v183 : US5 option ref = _v182 
        let v184 : (US5 option -> US5 option ref) = closure10(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure11(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US5 option = _v182.Value 
        let v201 : US5 = US5_1
        let v202 : US5 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US5_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US5_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method7()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US5 option = None
        let _v252 = ref v252 
        let v253 : US5 option ref = _v252 
        let v254 : (US5 option -> US5 option ref) = closure10(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure11(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US5 option = _v252.Value 
        let v271 : US5 = US5_1
        let v272 : US5 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US5_1 -> (* None *)
                v251
            | US5_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US5 option = None
        let _v292 = ref v292 
        let v293 : US5 option ref = _v292 
        let v294 : (US5 option -> US5 option ref) = closure10(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure11(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US5 option = _v292.Value 
        let v311 : US5 = US5_1
        let v312 : US5 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US5_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US5_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method8()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US5 option = None
        let _v360 = ref v360 
        let v361 : US5 option ref = _v360 
        let v362 : (US5 option -> US5 option ref) = closure10(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure11(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US5 option = _v360.Value 
        let v379 : US5 = US5_1
        let v380 : US5 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US5_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US5_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method8()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US5 option = None
        let _v428 = ref v428 
        let v429 : US5 option ref = _v428 
        let v430 : (US5 option -> US5 option ref) = closure10(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure11(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US5 option = _v428.Value 
        let v447 : US5 = US5_1
        let v448 : US5 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US5_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US5_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method8()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Verbose"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_black"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_black"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_black"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[90m"
        let v620 : string = method9()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[90m"
        let v624 : string = method9()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[90m"
        let v628 : string = method9()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : string = method10()
        let v639 : Mut3 = {l0 = v638} : Mut3
        let v640 : string = "{ "
        let v641 : string = $"{v640}"
        let v644 : unit = ()
        let v645 : (unit -> unit) = closure12(v639, v641)
        let v646 : unit = (fun () -> v645 (); v644) ()
        let v649 : string = "receipt_outcomes_len"
        let v650 : string = $"{v649}"
        let v653 : unit = ()
        let v654 : (unit -> unit) = closure12(v639, v650)
        let v655 : unit = (fun () -> v654 (); v653) ()
        let v658 : string = " = "
        let v659 : string = $"{v658}"
        let v662 : unit = ()
        let v663 : (unit -> unit) = closure12(v639, v659)
        let v664 : unit = (fun () -> v663 (); v662) ()
        let v667 : string = $"{v1}"
        let v670 : unit = ()
        let v671 : (unit -> unit) = closure12(v639, v667)
        let v672 : unit = (fun () -> v671 (); v670) ()
        let v675 : string = "; "
        let v676 : string = $"{v675}"
        let v679 : unit = ()
        let v680 : (unit -> unit) = closure12(v639, v676)
        let v681 : unit = (fun () -> v680 (); v679) ()
        let v684 : string = "receipt_outcomes"
        let v685 : string = $"{v684}"
        let v688 : unit = ()
        let v689 : (unit -> unit) = closure12(v639, v685)
        let v690 : unit = (fun () -> v689 (); v688) ()
        let v693 : string = $"{v658}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure12(v639, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v702 : string = "format!(\"{:#?}\", $0)"
        let v703 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v702 
        let v704 : string = "fable_library_rust::String_::fromString($0)"
        let v705 : string = Fable.Core.RustInterop.emitRustExpr v703 v704 
        let _v701 = v705 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v706 : string = "format!(\"{:#?}\", $0)"
        let v707 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v706 
        let v708 : string = "fable_library_rust::String_::fromString($0)"
        let v709 : string = Fable.Core.RustInterop.emitRustExpr v707 v708 
        let _v701 = v709 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v710 : string = "format!(\"{:#?}\", $0)"
        let v711 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v710 
        let v712 : string = "fable_library_rust::String_::fromString($0)"
        let v713 : string = Fable.Core.RustInterop.emitRustExpr v711 v712 
        let _v701 = v713 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v714 : string = $"%A{v0}"
        let _v701 = v714 
        #endif
#if FABLE_COMPILER_PYTHON
        let v717 : string = $"%A{v0}"
        let _v701 = v717 
        #endif
#else
        let v720 : string = $"%A{v0}"
        let _v701 = v720 
        #endif
        let v723 : string = _v701 
        let v728 : string = $"{v723}"
        let v731 : unit = ()
        let v732 : (unit -> unit) = closure12(v639, v728)
        let v733 : unit = (fun () -> v732 (); v731) ()
        let v736 : string = " }"
        let v737 : string = $"{v736}"
        let v740 : unit = ()
        let v741 : (unit -> unit) = closure12(v639, v737)
        let v742 : unit = (fun () -> v741 (); v740) ()
        let v745 : string = v639.l0
        let v746 : string = "spiral_wasm.run"
        let v747 : string = $"{v496} {v631} #{v637} %s{v746} / {v745}"
        let v750 : char list = []
        let v751 : (char list -> (char [])) = List.toArray
        let v752 : (char []) = v751 v750
        let v755 : string = v747.TrimStart v752 
        let v773 : char list = []
        let v774 : char list = '/' :: v773 
        let v777 : char list = ' ' :: v774 
        let v780 : (char list -> (char [])) = List.toArray
        let v781 : (char []) = v780 v777
        let v784 : string = v755.TrimEnd v781 
        let v802 : (string -> unit) = closure13()
        let v803 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v804 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v784 v804 
        let _v803 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v805 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v784 v805 
        let _v803 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v806 : string = v21.l0
        let v807 : bool = v806 = ""
        let v815 : string =
            if v807 then
                v784
            else
                let v808 : bool = v784 = ""
                if v808 then
                    let v809 : string = v21.l0
                    v809
                else
                    let v810 : string = v21.l0
                    let v811 : string = "\n"
                    let v812 : string = v810 + v811 
                    let v813 : string = v812 + v784 
                    v813
        let v816 : string = "&*$0"
        let v817 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v815 v816 
        let v818 : string = $"$0.chars()"
        let v819 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v817 v818 
        let v820 : string = "v819"
        let v821 : _ = Fable.Core.RustInterop.emitRustExpr () v820 
        let v822 : string = "v821.collect::<Vec<_>>()"
        let v823 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v822 
        let v824 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v825 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v823 v824 
        let v826 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v827 : bool = Fable.Core.RustInterop.emitRustExpr v825 v826 
        let v828 : string = "x"
        let v829 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v828 
        let v830 : string = "String::from_iter($0)"
        let v831 : std_string_String = Fable.Core.RustInterop.emitRustExpr v829 v830 
        let v832 : string = "true; $0 }).collect::<Vec<_>>()"
        let v833 : bool = Fable.Core.RustInterop.emitRustExpr v831 v832 
        let v834 : string = "_vec_map"
        let v835 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v834 
        let v836 : string = "$0.len()"
        let v837 : unativeint = Fable.Core.RustInterop.emitRustExpr v835 v836 
        let v838 : (unativeint -> int32) = int32
        let v839 : int32 = v838 v837
        let v840 : string = ""
        let v841 : bool = v784 <> v840 
        let v845 : bool =
            if v841 then
                let v844 : bool = v839 <= 1
                v844
            else
                false
        if v845 then
            v21.l0 <- v815
            ()
        else
            v21.l0 <- v840
            let v846 : string = "true; $0.into_iter().for_each(|x| { //"
            let v847 : bool = Fable.Core.RustInterop.emitRustExpr v835 v846 
            let v848 : string = "x"
            let v849 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v848 
            let v850 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v849 v850 
            let v851 : string = $"true;"
            let v852 : bool = Fable.Core.RustInterop.emitRustExpr () v851 
            let v853 : string = "true; }}); { //"
            let v854 : bool = Fable.Core.RustInterop.emitRustExpr () v853 
            ()
        let _v803 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v802 v784
        let _v803 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v802 v784
        let _v803 = () 
        #endif
#else
        v802 v784
        let _v803 = () 
        #endif
        _v803 
        let v855 : (string -> unit) = v19.l0
        v855 v784
and closure27 (v0 : Result<std_string_String, near_workspaces_error_Error>) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 0 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Verbose"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_black"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_black"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_black"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[90m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[90m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[90m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "json"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v667 : string = "format!(\"{:#?}\", $0)"
        let v668 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v667 
        let v669 : string = "fable_library_rust::String_::fromString($0)"
        let v670 : string = Fable.Core.RustInterop.emitRustExpr v668 v669 
        let _v666 = v670 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v671 : string = "format!(\"{:#?}\", $0)"
        let v672 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v671 
        let v673 : string = "fable_library_rust::String_::fromString($0)"
        let v674 : string = Fable.Core.RustInterop.emitRustExpr v672 v673 
        let _v666 = v674 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v675 : string = "format!(\"{:#?}\", $0)"
        let v676 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v675 
        let v677 : string = "fable_library_rust::String_::fromString($0)"
        let v678 : string = Fable.Core.RustInterop.emitRustExpr v676 v677 
        let _v666 = v678 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v679 : string = $"%A{v0}"
        let _v666 = v679 
        #endif
#if FABLE_COMPILER_PYTHON
        let v682 : string = $"%A{v0}"
        let _v666 = v682 
        #endif
#else
        let v685 : string = $"%A{v0}"
        let _v666 = v685 
        #endif
        let v688 : string = _v666 
        let v693 : string = $"{v688}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure12(v638, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = " }"
        let v702 : string = $"{v701}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure12(v638, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = v638.l0
        let v711 : string = "spiral_wasm.run"
        let v712 : string = $"{v495} {v630} #{v636} %s{v711} / {v710}"
        let v715 : char list = []
        let v716 : (char list -> (char [])) = List.toArray
        let v717 : (char []) = v716 v715
        let v720 : string = v712.TrimStart v717 
        let v738 : char list = []
        let v739 : char list = '/' :: v738 
        let v742 : char list = ' ' :: v739 
        let v745 : (char list -> (char [])) = List.toArray
        let v746 : (char []) = v745 v742
        let v749 : string = v720.TrimEnd v746 
        let v767 : (string -> unit) = closure13()
        let v768 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v769 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v749 v769 
        let _v768 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v770 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v749 v770 
        let _v768 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v771 : string = v20.l0
        let v772 : bool = v771 = ""
        let v780 : string =
            if v772 then
                v749
            else
                let v773 : bool = v749 = ""
                if v773 then
                    let v774 : string = v20.l0
                    v774
                else
                    let v775 : string = v20.l0
                    let v776 : string = "\n"
                    let v777 : string = v775 + v776 
                    let v778 : string = v777 + v749 
                    v778
        let v781 : string = "&*$0"
        let v782 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v780 v781 
        let v783 : string = $"$0.chars()"
        let v784 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v782 v783 
        let v785 : string = "v784"
        let v786 : _ = Fable.Core.RustInterop.emitRustExpr () v785 
        let v787 : string = "v786.collect::<Vec<_>>()"
        let v788 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v787 
        let v789 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v790 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v788 v789 
        let v791 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v792 : bool = Fable.Core.RustInterop.emitRustExpr v790 v791 
        let v793 : string = "x"
        let v794 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v793 
        let v795 : string = "String::from_iter($0)"
        let v796 : std_string_String = Fable.Core.RustInterop.emitRustExpr v794 v795 
        let v797 : string = "true; $0 }).collect::<Vec<_>>()"
        let v798 : bool = Fable.Core.RustInterop.emitRustExpr v796 v797 
        let v799 : string = "_vec_map"
        let v800 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v799 
        let v801 : string = "$0.len()"
        let v802 : unativeint = Fable.Core.RustInterop.emitRustExpr v800 v801 
        let v803 : (unativeint -> int32) = int32
        let v804 : int32 = v803 v802
        let v805 : string = ""
        let v806 : bool = v749 <> v805 
        let v810 : bool =
            if v806 then
                let v809 : bool = v804 <= 1
                v809
            else
                false
        if v810 then
            v20.l0 <- v780
            ()
        else
            v20.l0 <- v805
            let v811 : string = "true; $0.into_iter().for_each(|x| { //"
            let v812 : bool = Fable.Core.RustInterop.emitRustExpr v800 v811 
            let v813 : string = "x"
            let v814 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v813 
            let v815 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v814 v815 
            let v816 : string = $"true;"
            let v817 : bool = Fable.Core.RustInterop.emitRustExpr () v816 
            let v818 : string = "true; }}); { //"
            let v819 : bool = Fable.Core.RustInterop.emitRustExpr () v818 
            ()
        let _v768 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v767 v749
        let _v768 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v767 v749
        let _v768 = () 
        #endif
#else
        v767 v749
        let _v768 = () 
        #endif
        _v768 
        let v820 : (string -> unit) = v18.l0
        v820 v749
and closure28 (v0 : Result<std_string_String, near_workspaces_error_Error>) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 0 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Verbose"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_black"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_black"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_black"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[90m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[90m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[90m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "borsh"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v667 : string = "format!(\"{:#?}\", $0)"
        let v668 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v667 
        let v669 : string = "fable_library_rust::String_::fromString($0)"
        let v670 : string = Fable.Core.RustInterop.emitRustExpr v668 v669 
        let _v666 = v670 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v671 : string = "format!(\"{:#?}\", $0)"
        let v672 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v671 
        let v673 : string = "fable_library_rust::String_::fromString($0)"
        let v674 : string = Fable.Core.RustInterop.emitRustExpr v672 v673 
        let _v666 = v674 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v675 : string = "format!(\"{:#?}\", $0)"
        let v676 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v675 
        let v677 : string = "fable_library_rust::String_::fromString($0)"
        let v678 : string = Fable.Core.RustInterop.emitRustExpr v676 v677 
        let _v666 = v678 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v679 : string = $"%A{v0}"
        let _v666 = v679 
        #endif
#if FABLE_COMPILER_PYTHON
        let v682 : string = $"%A{v0}"
        let _v666 = v682 
        #endif
#else
        let v685 : string = $"%A{v0}"
        let _v666 = v685 
        #endif
        let v688 : string = _v666 
        let v693 : string = $"{v688}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure12(v638, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = " }"
        let v702 : string = $"{v701}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure12(v638, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = v638.l0
        let v711 : string = "spiral_wasm.run"
        let v712 : string = $"{v495} {v630} #{v636} %s{v711} / {v710}"
        let v715 : char list = []
        let v716 : (char list -> (char [])) = List.toArray
        let v717 : (char []) = v716 v715
        let v720 : string = v712.TrimStart v717 
        let v738 : char list = []
        let v739 : char list = '/' :: v738 
        let v742 : char list = ' ' :: v739 
        let v745 : (char list -> (char [])) = List.toArray
        let v746 : (char []) = v745 v742
        let v749 : string = v720.TrimEnd v746 
        let v767 : (string -> unit) = closure13()
        let v768 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v769 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v749 v769 
        let _v768 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v770 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v749 v770 
        let _v768 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v771 : string = v20.l0
        let v772 : bool = v771 = ""
        let v780 : string =
            if v772 then
                v749
            else
                let v773 : bool = v749 = ""
                if v773 then
                    let v774 : string = v20.l0
                    v774
                else
                    let v775 : string = v20.l0
                    let v776 : string = "\n"
                    let v777 : string = v775 + v776 
                    let v778 : string = v777 + v749 
                    v778
        let v781 : string = "&*$0"
        let v782 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v780 v781 
        let v783 : string = $"$0.chars()"
        let v784 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v782 v783 
        let v785 : string = "v784"
        let v786 : _ = Fable.Core.RustInterop.emitRustExpr () v785 
        let v787 : string = "v786.collect::<Vec<_>>()"
        let v788 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v787 
        let v789 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v790 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v788 v789 
        let v791 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v792 : bool = Fable.Core.RustInterop.emitRustExpr v790 v791 
        let v793 : string = "x"
        let v794 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v793 
        let v795 : string = "String::from_iter($0)"
        let v796 : std_string_String = Fable.Core.RustInterop.emitRustExpr v794 v795 
        let v797 : string = "true; $0 }).collect::<Vec<_>>()"
        let v798 : bool = Fable.Core.RustInterop.emitRustExpr v796 v797 
        let v799 : string = "_vec_map"
        let v800 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v799 
        let v801 : string = "$0.len()"
        let v802 : unativeint = Fable.Core.RustInterop.emitRustExpr v800 v801 
        let v803 : (unativeint -> int32) = int32
        let v804 : int32 = v803 v802
        let v805 : string = ""
        let v806 : bool = v749 <> v805 
        let v810 : bool =
            if v806 then
                let v809 : bool = v804 <= 1
                v809
            else
                false
        if v810 then
            v20.l0 <- v780
            ()
        else
            v20.l0 <- v805
            let v811 : string = "true; $0.into_iter().for_each(|x| { //"
            let v812 : bool = Fable.Core.RustInterop.emitRustExpr v800 v811 
            let v813 : string = "x"
            let v814 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v813 
            let v815 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v814 v815 
            let v816 : string = $"true;"
            let v817 : bool = Fable.Core.RustInterop.emitRustExpr () v816 
            let v818 : string = "true; }}); { //"
            let v819 : bool = Fable.Core.RustInterop.emitRustExpr () v818 
            ()
        let _v768 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v767 v749
        let _v768 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v767 v749
        let _v768 = () 
        #endif
#else
        v767 v749
        let _v768 = () 
        #endif
        _v768 
        let v820 : (string -> unit) = v18.l0
        v820 v749
and method17 (v0 : Result<US4, anyhow_Error>) : Result<US4, anyhow_Error> =
    v0
and method14 (v0 : Vec<uint8>, v1 : uint8) : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> =
    let v2 : string = "true; let __future_init = Box::pin(async move { //"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr () v2 
    let v4 : string = "near_workspaces::sandbox().await"
    let v5 : Result<near_workspaces_Worker<near_workspaces_network_Sandbox>, near_workspaces_error_Error> = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : string = "$0?"
    let v7 : near_workspaces_Worker<near_workspaces_network_Sandbox> = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure16(v1, v7)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v865 : string = "Box::pin($0.dev_deploy(&$1))"
    let v866 : std_pin_Pin<Box<Dyn<std_future_Future<Result<near_workspaces_Contract, near_workspaces_error_Error>>>>> = Fable.Core.RustInterop.emitRustExpr struct (v7, v0) v865 
    let v867 : string = "v866.await"
    let v868 : Result<near_workspaces_Contract, near_workspaces_error_Error> = Fable.Core.RustInterop.emitRustExpr () v867 
    let v869 : string = "$0?"
    let v870 : near_workspaces_Contract = Fable.Core.RustInterop.emitRustExpr v868 v869 
    let v871 : unit = ()
    let v872 : (unit -> unit) = closure17(v1, v870)
    let v873 : unit = (fun () -> v872 (); v871) ()
    let v1728 : string = "$0.call(&*$1)"
    let v1729 : string = "state_main"
    let v1730 : near_workspaces_operations_CallTransaction = Fable.Core.RustInterop.emitRustExpr struct (v870, v1729) v1728 
    let v1731 : string = "Box::pin(v1730.transact())"
    let v1732 : std_pin_Pin<Box<Dyn<std_future_Future<Result<near_workspaces_result_ExecutionFinalResult, near_workspaces_error_Error>>>>> = Fable.Core.RustInterop.emitRustExpr () v1731 
    let v1733 : string = "v1732.await"
    let v1734 : Result<near_workspaces_result_ExecutionFinalResult, near_workspaces_error_Error> = Fable.Core.RustInterop.emitRustExpr () v1733 
    let v1735 : string = "$0?"
    let v1736 : near_workspaces_result_ExecutionFinalResult = Fable.Core.RustInterop.emitRustExpr v1734 v1735 
    let v1737 : unit = ()
    let v1738 : (unit -> unit) = closure18(v1, v1736)
    let v1739 : unit = (fun () -> v1738 (); v1737) ()
    let v2594 : string = "v1736.logs()"
    let v2595 : Vec<Ref<Str>> = Fable.Core.RustInterop.emitRustExpr () v2594 
    let v2596 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v2597 : bool = Fable.Core.RustInterop.emitRustExpr v2595 v2596 
    let v2598 : string = "x"
    let v2599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v2598 
    let v2600 : string = "String::from($0)"
    let v2601 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2599 v2600 
    let v2602 : string = "true; $0 }).collect::<Vec<_>>()"
    let v2603 : bool = Fable.Core.RustInterop.emitRustExpr v2601 v2602 
    let v2604 : string = "_vec_map"
    let v2605 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v2604 
    let v2606 : string = "true; $0.iter().for_each(|x| { $1(x.clone()); }); //"
    let v2607 : (std_string_String -> unit) = closure19()
    let v2608 : bool = Fable.Core.RustInterop.emitRustExpr struct (v2605, v2607) v2606 
    let v2609 : string = "$0.total_gas_burnt"
    let v2610 : near_workspaces_types_Gas = Fable.Core.RustInterop.emitRustExpr v1736 v2609 
    let v2611 : string = "$0.as_gas()"
    let v2612 : uint64 = Fable.Core.RustInterop.emitRustExpr v2610 v2611 
    let v2613 : (uint64 -> float) = float
    let v2614 : float = v2613 v2612
    let v2615 : float = v2614 / 10000000000000000.0
    let v2616 : float = v2615 * 6.68
    let v2617 : unit = ()
    let v2618 : (unit -> unit) = closure21(v1, v2612, v2616)
    let v2619 : unit = (fun () -> v2618 (); v2617) ()
    let v3480 : string = "$0"
    let v3481 : near_workspaces_result_ExecutionFinalResult = Fable.Core.RustInterop.emitRustExpr v1736 v3480 
    let v3482 : string = "v3481.outcomes()"
    let v3483 : Vec<Ref<near_workspaces_result_ExecutionOutcome>> = Fable.Core.RustInterop.emitRustExpr () v3482 
    let v3484 : string = "v3483.into_iter()"
    let v3485 : _ = Fable.Core.RustInterop.emitRustExpr () v3484 
    let v3486 : string = "v3485.cloned()"
    let v3487 : _ = Fable.Core.RustInterop.emitRustExpr () v3486 
    let v3488 : string = "true; v3487.for_each(|x| $0(x))"
    let v3489 : (near_workspaces_result_ExecutionOutcome -> unit) = closure22()
    let v3490 : bool = Fable.Core.RustInterop.emitRustExpr v3489 v3488 
    let v3491 : string = "$0.into_result()"
    let v3492 : Result<near_workspaces_result_ExecutionSuccess, near_workspaces_result_ExecutionFailure> = Fable.Core.RustInterop.emitRustExpr v1736 v3491 
    let v3493 : unit = ()
    let v3494 : (unit -> unit) = closure24(v3492)
    let v3495 : unit = (fun () -> v3494 (); v3493) ()
    let v4316 : near_workspaces_result_ExecutionFinalResult = method15(v1736)
    let v4317 : string = "v4316.receipt_failures()"
    let v4318 : Vec<Ref<near_workspaces_result_ExecutionOutcome>> = Fable.Core.RustInterop.emitRustExpr () v4317 
    let v4319 : string = "$0.len()"
    let v4320 : unativeint = Fable.Core.RustInterop.emitRustExpr v4318 v4319 
    let v4321 : (unativeint -> int32) = int32
    let v4322 : int32 = v4321 v4320
    let v4323 : unit = ()
    let v4324 : (unit -> unit) = closure25(v4318, v4322)
    let v4325 : unit = (fun () -> v4324 (); v4323) ()
    let v5180 : near_workspaces_result_ExecutionFinalResult = method16(v1736)
    let v5181 : string = "v5180.receipt_outcomes()"
    let v5182 : Ref<Slice<near_workspaces_result_ExecutionOutcome>> = Fable.Core.RustInterop.emitRustExpr () v5181 
    let v5183 : string = "v5182.into()"
    let v5184 : Vec<near_workspaces_result_ExecutionOutcome> = Fable.Core.RustInterop.emitRustExpr () v5183 
    let v5185 : string = "$0.len()"
    let v5186 : unativeint = Fable.Core.RustInterop.emitRustExpr v5184 v5185 
    let v5187 : (unativeint -> int32) = int32
    let v5188 : int32 = v5187 v5186
    let v5189 : unit = ()
    let v5190 : (unit -> unit) = closure26(v5184, v5188)
    let v5191 : unit = (fun () -> v5190 (); v5189) ()
    let v6046 : string = "$0.json()"
    let v6047 : Result<std_string_String, near_workspaces_error_Error> = Fable.Core.RustInterop.emitRustExpr v1736 v6046 
    let v6048 : unit = ()
    let v6049 : (unit -> unit) = closure27(v6047)
    let v6050 : unit = (fun () -> v6049 (); v6048) ()
    let v6871 : string = "$0.borsh()"
    let v6872 : Result<std_string_String, near_workspaces_error_Error> = Fable.Core.RustInterop.emitRustExpr v1736 v6871 
    let v6873 : unit = ()
    let v6874 : (unit -> unit) = closure28(v6872)
    let v6875 : unit = (fun () -> v6874 (); v6873) ()
    let v7696 : string = method10()
    let v7697 : Mut3 = {l0 = v7696} : Mut3
    let v7698 : string = "{ "
    let v7699 : string = $"{v7698}"
    let v7702 : unit = ()
    let v7703 : (unit -> unit) = closure12(v7697, v7699)
    let v7704 : unit = (fun () -> v7703 (); v7702) ()
    let v7707 : string = "receipt_failures"
    let v7708 : string = $"{v7707}"
    let v7711 : unit = ()
    let v7712 : (unit -> unit) = closure12(v7697, v7708)
    let v7713 : unit = (fun () -> v7712 (); v7711) ()
    let v7716 : string = " = "
    let v7717 : string = $"{v7716}"
    let v7720 : unit = ()
    let v7721 : (unit -> unit) = closure12(v7697, v7717)
    let v7722 : unit = (fun () -> v7721 (); v7720) ()
    let v7725 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7726 : string = "format!(\"{:#?}\", $0)"
    let v7727 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4318 v7726 
    let v7728 : string = "fable_library_rust::String_::fromString($0)"
    let v7729 : string = Fable.Core.RustInterop.emitRustExpr v7727 v7728 
    let _v7725 = v7729 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v7730 : string = "format!(\"{:#?}\", $0)"
    let v7731 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4318 v7730 
    let v7732 : string = "fable_library_rust::String_::fromString($0)"
    let v7733 : string = Fable.Core.RustInterop.emitRustExpr v7731 v7732 
    let _v7725 = v7733 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7734 : string = "format!(\"{:#?}\", $0)"
    let v7735 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4318 v7734 
    let v7736 : string = "fable_library_rust::String_::fromString($0)"
    let v7737 : string = Fable.Core.RustInterop.emitRustExpr v7735 v7736 
    let _v7725 = v7737 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v7738 : string = $"%A{v4318}"
    let _v7725 = v7738 
    #endif
#if FABLE_COMPILER_PYTHON
    let v7741 : string = $"%A{v4318}"
    let _v7725 = v7741 
    #endif
#else
    let v7744 : string = $"%A{v4318}"
    let _v7725 = v7744 
    #endif
    let v7747 : string = _v7725 
    let v7752 : string = $"{v7747}"
    let v7755 : unit = ()
    let v7756 : (unit -> unit) = closure12(v7697, v7752)
    let v7757 : unit = (fun () -> v7756 (); v7755) ()
    let v7760 : string = "; "
    let v7761 : string = $"{v7760}"
    let v7764 : unit = ()
    let v7765 : (unit -> unit) = closure12(v7697, v7761)
    let v7766 : unit = (fun () -> v7765 (); v7764) ()
    let v7769 : string = "receipt_outcomes_len"
    let v7770 : string = $"{v7769}"
    let v7773 : unit = ()
    let v7774 : (unit -> unit) = closure12(v7697, v7770)
    let v7775 : unit = (fun () -> v7774 (); v7773) ()
    let v7778 : string = $"{v7716}"
    let v7781 : unit = ()
    let v7782 : (unit -> unit) = closure12(v7697, v7778)
    let v7783 : unit = (fun () -> v7782 (); v7781) ()
    let v7786 : string = $"{v5188}"
    let v7789 : unit = ()
    let v7790 : (unit -> unit) = closure12(v7697, v7786)
    let v7791 : unit = (fun () -> v7790 (); v7789) ()
    let v7794 : string = $"{v7760}"
    let v7797 : unit = ()
    let v7798 : (unit -> unit) = closure12(v7697, v7794)
    let v7799 : unit = (fun () -> v7798 (); v7797) ()
    let v7802 : string = "retry"
    let v7803 : string = $"{v7802}"
    let v7806 : unit = ()
    let v7807 : (unit -> unit) = closure12(v7697, v7803)
    let v7808 : unit = (fun () -> v7807 (); v7806) ()
    let v7811 : string = $"{v7716}"
    let v7814 : unit = ()
    let v7815 : (unit -> unit) = closure12(v7697, v7811)
    let v7816 : unit = (fun () -> v7815 (); v7814) ()
    let v7819 : string = $"{v1}"
    let v7822 : unit = ()
    let v7823 : (unit -> unit) = closure12(v7697, v7819)
    let v7824 : unit = (fun () -> v7823 (); v7822) ()
    let v7827 : string = " }"
    let v7828 : string = $"{v7827}"
    let v7831 : unit = ()
    let v7832 : (unit -> unit) = closure12(v7697, v7828)
    let v7833 : unit = (fun () -> v7832 (); v7831) ()
    let v7836 : string = v7697.l0
    let v7837 : bool = v4322 > 0
    let v7848 : Result<US4, anyhow_Error> =
        if v7837 then
            let v7838 : US4 = US4_0(v7836)
            let v7839 : Result<US4, anyhow_Error> = Ok v7838 
            v7839
        else
            let v7840 : bool = v5188 > 1
            if v7840 then
                let v7841 : US4 = US4_1
                let v7842 : Result<US4, anyhow_Error> = Ok v7841 
                v7842
            else
                let v7843 : string = "anyhow::anyhow!($0)"
                let v7844 : anyhow_Error = Fable.Core.RustInterop.emitRustExpr v7836 v7843 
                let v7845 : string = "Err($0)"
                let v7846 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr v7844 v7845 
                v7846
    let v7849 : Result<US4, anyhow_Error> = method17(v7848)
    let v7850 : string = ""
    let v7851 : string = "}"
    let v7852 : string = v7850 + v7851 
    let v7853 : string = "true; v7849 " + v7852 + "); " + v7850 + " // rust.fix_closure'"
    let v7854 : bool = Fable.Core.RustInterop.emitRustExpr () v7853 
    let v7855 : string = "__future_init"
    let v7856 : _ = Fable.Core.RustInterop.emitRustExpr () v7855 
    let v7857 : string = "v7856"
    let v7858 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = Fable.Core.RustInterop.emitRustExpr () v7857 
    v7858
and closure29 () (v0 : anyhow_Error) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#else
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
    let v17 : std_string_String = _v1 
    v17
and method18 () : (anyhow_Error -> std_string_String) =
    closure29()
and closure30 () (v0 : US4) : US6 =
    US6_0(v0)
and closure31 () (v0 : std_string_String) : US6 =
    US6_1(v0)
and closure32 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 3 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Warning"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_yellow"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_yellow"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_yellow"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[93m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[93m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[93m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{1uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v701 : string = "format!(\"{:#?}\", $0)"
        let v702 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v701 
        let v703 : string = "fable_library_rust::String_::fromString($0)"
        let v704 : string = Fable.Core.RustInterop.emitRustExpr v702 v703 
        let _v700 = v704 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v705 : string = "format!(\"{:#?}\", $0)"
        let v706 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v705 
        let v707 : string = "fable_library_rust::String_::fromString($0)"
        let v708 : string = Fable.Core.RustInterop.emitRustExpr v706 v707 
        let _v700 = v708 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v709 : string = "format!(\"{:#?}\", $0)"
        let v710 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v709 
        let v711 : string = "fable_library_rust::String_::fromString($0)"
        let v712 : string = Fable.Core.RustInterop.emitRustExpr v710 v711 
        let _v700 = v712 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v713 : string = $"%A{v0}"
        let _v700 = v713 
        #endif
#if FABLE_COMPILER_PYTHON
        let v716 : string = $"%A{v0}"
        let _v700 = v716 
        #endif
#else
        let v719 : string = $"%A{v0}"
        let _v700 = v719 
        #endif
        let v722 : string = _v700 
        let v727 : string = $"{v722}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure12(v638, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = " }"
        let v736 : string = $"{v735}"
        let v739 : unit = ()
        let v740 : (unit -> unit) = closure12(v638, v736)
        let v741 : unit = (fun () -> v740 (); v739) ()
        let v744 : string = v638.l0
        let v745 : string = "spiral_wasm.run / Error error"
        let v746 : string = $"{v495} {v630} #{v636} %s{v745} / {v744}"
        let v749 : char list = []
        let v750 : (char list -> (char [])) = List.toArray
        let v751 : (char []) = v750 v749
        let v754 : string = v746.TrimStart v751 
        let v772 : char list = []
        let v773 : char list = '/' :: v772 
        let v776 : char list = ' ' :: v773 
        let v779 : (char list -> (char [])) = List.toArray
        let v780 : (char []) = v779 v776
        let v783 : string = v754.TrimEnd v780 
        let v801 : (string -> unit) = closure13()
        let v802 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v803 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v803 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v804 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v804 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v805 : string = v20.l0
        let v806 : bool = v805 = ""
        let v814 : string =
            if v806 then
                v783
            else
                let v807 : bool = v783 = ""
                if v807 then
                    let v808 : string = v20.l0
                    v808
                else
                    let v809 : string = v20.l0
                    let v810 : string = "\n"
                    let v811 : string = v809 + v810 
                    let v812 : string = v811 + v783 
                    v812
        let v815 : string = "&*$0"
        let v816 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v814 v815 
        let v817 : string = $"$0.chars()"
        let v818 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v816 v817 
        let v819 : string = "v818"
        let v820 : _ = Fable.Core.RustInterop.emitRustExpr () v819 
        let v821 : string = "v820.collect::<Vec<_>>()"
        let v822 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v821 
        let v823 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v824 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v822 v823 
        let v825 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v826 : bool = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = "x"
        let v828 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v827 
        let v829 : string = "String::from_iter($0)"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr v828 v829 
        let v831 : string = "true; $0 }).collect::<Vec<_>>()"
        let v832 : bool = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let v833 : string = "_vec_map"
        let v834 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "$0.len()"
        let v836 : unativeint = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : (unativeint -> int32) = int32
        let v838 : int32 = v837 v836
        let v839 : string = ""
        let v840 : bool = v783 <> v839 
        let v844 : bool =
            if v840 then
                let v843 : bool = v838 <= 1
                v843
            else
                false
        if v844 then
            v20.l0 <- v814
            ()
        else
            v20.l0 <- v839
            let v845 : string = "true; $0.into_iter().for_each(|x| { //"
            let v846 : bool = Fable.Core.RustInterop.emitRustExpr v834 v845 
            let v847 : string = "x"
            let v848 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v847 
            let v849 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v848 v849 
            let v850 : string = $"true;"
            let v851 : bool = Fable.Core.RustInterop.emitRustExpr () v850 
            let v852 : string = "true; }}); { //"
            let v853 : bool = Fable.Core.RustInterop.emitRustExpr () v852 
            ()
        let _v802 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v801 v783
        let _v802 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v801 v783
        let _v802 = () 
        #endif
#else
        v801 v783
        let _v802 = () 
        #endif
        _v802 
        let v854 : (string -> unit) = v18.l0
        v854 v783
and closure33 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 3 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Warning"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_yellow"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_yellow"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_yellow"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[93m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[93m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[93m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{2uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v701 : string = "format!(\"{:#?}\", $0)"
        let v702 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v701 
        let v703 : string = "fable_library_rust::String_::fromString($0)"
        let v704 : string = Fable.Core.RustInterop.emitRustExpr v702 v703 
        let _v700 = v704 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v705 : string = "format!(\"{:#?}\", $0)"
        let v706 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v705 
        let v707 : string = "fable_library_rust::String_::fromString($0)"
        let v708 : string = Fable.Core.RustInterop.emitRustExpr v706 v707 
        let _v700 = v708 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v709 : string = "format!(\"{:#?}\", $0)"
        let v710 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v709 
        let v711 : string = "fable_library_rust::String_::fromString($0)"
        let v712 : string = Fable.Core.RustInterop.emitRustExpr v710 v711 
        let _v700 = v712 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v713 : string = $"%A{v0}"
        let _v700 = v713 
        #endif
#if FABLE_COMPILER_PYTHON
        let v716 : string = $"%A{v0}"
        let _v700 = v716 
        #endif
#else
        let v719 : string = $"%A{v0}"
        let _v700 = v719 
        #endif
        let v722 : string = _v700 
        let v727 : string = $"{v722}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure12(v638, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = " }"
        let v736 : string = $"{v735}"
        let v739 : unit = ()
        let v740 : (unit -> unit) = closure12(v638, v736)
        let v741 : unit = (fun () -> v740 (); v739) ()
        let v744 : string = v638.l0
        let v745 : string = "spiral_wasm.run / Error error"
        let v746 : string = $"{v495} {v630} #{v636} %s{v745} / {v744}"
        let v749 : char list = []
        let v750 : (char list -> (char [])) = List.toArray
        let v751 : (char []) = v750 v749
        let v754 : string = v746.TrimStart v751 
        let v772 : char list = []
        let v773 : char list = '/' :: v772 
        let v776 : char list = ' ' :: v773 
        let v779 : (char list -> (char [])) = List.toArray
        let v780 : (char []) = v779 v776
        let v783 : string = v754.TrimEnd v780 
        let v801 : (string -> unit) = closure13()
        let v802 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v803 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v803 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v804 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v804 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v805 : string = v20.l0
        let v806 : bool = v805 = ""
        let v814 : string =
            if v806 then
                v783
            else
                let v807 : bool = v783 = ""
                if v807 then
                    let v808 : string = v20.l0
                    v808
                else
                    let v809 : string = v20.l0
                    let v810 : string = "\n"
                    let v811 : string = v809 + v810 
                    let v812 : string = v811 + v783 
                    v812
        let v815 : string = "&*$0"
        let v816 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v814 v815 
        let v817 : string = $"$0.chars()"
        let v818 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v816 v817 
        let v819 : string = "v818"
        let v820 : _ = Fable.Core.RustInterop.emitRustExpr () v819 
        let v821 : string = "v820.collect::<Vec<_>>()"
        let v822 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v821 
        let v823 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v824 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v822 v823 
        let v825 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v826 : bool = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = "x"
        let v828 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v827 
        let v829 : string = "String::from_iter($0)"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr v828 v829 
        let v831 : string = "true; $0 }).collect::<Vec<_>>()"
        let v832 : bool = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let v833 : string = "_vec_map"
        let v834 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "$0.len()"
        let v836 : unativeint = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : (unativeint -> int32) = int32
        let v838 : int32 = v837 v836
        let v839 : string = ""
        let v840 : bool = v783 <> v839 
        let v844 : bool =
            if v840 then
                let v843 : bool = v838 <= 1
                v843
            else
                false
        if v844 then
            v20.l0 <- v814
            ()
        else
            v20.l0 <- v839
            let v845 : string = "true; $0.into_iter().for_each(|x| { //"
            let v846 : bool = Fable.Core.RustInterop.emitRustExpr v834 v845 
            let v847 : string = "x"
            let v848 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v847 
            let v849 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v848 v849 
            let v850 : string = $"true;"
            let v851 : bool = Fable.Core.RustInterop.emitRustExpr () v850 
            let v852 : string = "true; }}); { //"
            let v853 : bool = Fable.Core.RustInterop.emitRustExpr () v852 
            ()
        let _v802 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v801 v783
        let _v802 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v801 v783
        let _v802 = () 
        #endif
#else
        v801 v783
        let _v802 = () 
        #endif
        _v802 
        let v854 : (string -> unit) = v18.l0
        v854 v783
and closure34 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 3 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Warning"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_yellow"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_yellow"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_yellow"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[93m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[93m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[93m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{3uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v701 : string = "format!(\"{:#?}\", $0)"
        let v702 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v701 
        let v703 : string = "fable_library_rust::String_::fromString($0)"
        let v704 : string = Fable.Core.RustInterop.emitRustExpr v702 v703 
        let _v700 = v704 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v705 : string = "format!(\"{:#?}\", $0)"
        let v706 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v705 
        let v707 : string = "fable_library_rust::String_::fromString($0)"
        let v708 : string = Fable.Core.RustInterop.emitRustExpr v706 v707 
        let _v700 = v708 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v709 : string = "format!(\"{:#?}\", $0)"
        let v710 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v709 
        let v711 : string = "fable_library_rust::String_::fromString($0)"
        let v712 : string = Fable.Core.RustInterop.emitRustExpr v710 v711 
        let _v700 = v712 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v713 : string = $"%A{v0}"
        let _v700 = v713 
        #endif
#if FABLE_COMPILER_PYTHON
        let v716 : string = $"%A{v0}"
        let _v700 = v716 
        #endif
#else
        let v719 : string = $"%A{v0}"
        let _v700 = v719 
        #endif
        let v722 : string = _v700 
        let v727 : string = $"{v722}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure12(v638, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = " }"
        let v736 : string = $"{v735}"
        let v739 : unit = ()
        let v740 : (unit -> unit) = closure12(v638, v736)
        let v741 : unit = (fun () -> v740 (); v739) ()
        let v744 : string = v638.l0
        let v745 : string = "spiral_wasm.run / Error error"
        let v746 : string = $"{v495} {v630} #{v636} %s{v745} / {v744}"
        let v749 : char list = []
        let v750 : (char list -> (char [])) = List.toArray
        let v751 : (char []) = v750 v749
        let v754 : string = v746.TrimStart v751 
        let v772 : char list = []
        let v773 : char list = '/' :: v772 
        let v776 : char list = ' ' :: v773 
        let v779 : (char list -> (char [])) = List.toArray
        let v780 : (char []) = v779 v776
        let v783 : string = v754.TrimEnd v780 
        let v801 : (string -> unit) = closure13()
        let v802 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v803 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v803 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v804 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v804 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v805 : string = v20.l0
        let v806 : bool = v805 = ""
        let v814 : string =
            if v806 then
                v783
            else
                let v807 : bool = v783 = ""
                if v807 then
                    let v808 : string = v20.l0
                    v808
                else
                    let v809 : string = v20.l0
                    let v810 : string = "\n"
                    let v811 : string = v809 + v810 
                    let v812 : string = v811 + v783 
                    v812
        let v815 : string = "&*$0"
        let v816 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v814 v815 
        let v817 : string = $"$0.chars()"
        let v818 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v816 v817 
        let v819 : string = "v818"
        let v820 : _ = Fable.Core.RustInterop.emitRustExpr () v819 
        let v821 : string = "v820.collect::<Vec<_>>()"
        let v822 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v821 
        let v823 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v824 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v822 v823 
        let v825 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v826 : bool = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = "x"
        let v828 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v827 
        let v829 : string = "String::from_iter($0)"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr v828 v829 
        let v831 : string = "true; $0 }).collect::<Vec<_>>()"
        let v832 : bool = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let v833 : string = "_vec_map"
        let v834 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "$0.len()"
        let v836 : unativeint = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : (unativeint -> int32) = int32
        let v838 : int32 = v837 v836
        let v839 : string = ""
        let v840 : bool = v783 <> v839 
        let v844 : bool =
            if v840 then
                let v843 : bool = v838 <= 1
                v843
            else
                false
        if v844 then
            v20.l0 <- v814
            ()
        else
            v20.l0 <- v839
            let v845 : string = "true; $0.into_iter().for_each(|x| { //"
            let v846 : bool = Fable.Core.RustInterop.emitRustExpr v834 v845 
            let v847 : string = "x"
            let v848 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v847 
            let v849 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v848 v849 
            let v850 : string = $"true;"
            let v851 : bool = Fable.Core.RustInterop.emitRustExpr () v850 
            let v852 : string = "true; }}); { //"
            let v853 : bool = Fable.Core.RustInterop.emitRustExpr () v852 
            ()
        let _v802 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v801 v783
        let _v802 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v801 v783
        let _v802 = () 
        #endif
#else
        v801 v783
        let _v802 = () 
        #endif
        _v802 
        let v854 : (string -> unit) = v18.l0
        v854 v783
and closure35 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 3 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Warning"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_yellow"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_yellow"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_yellow"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[93m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[93m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[93m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{4uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v701 : string = "format!(\"{:#?}\", $0)"
        let v702 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v701 
        let v703 : string = "fable_library_rust::String_::fromString($0)"
        let v704 : string = Fable.Core.RustInterop.emitRustExpr v702 v703 
        let _v700 = v704 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v705 : string = "format!(\"{:#?}\", $0)"
        let v706 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v705 
        let v707 : string = "fable_library_rust::String_::fromString($0)"
        let v708 : string = Fable.Core.RustInterop.emitRustExpr v706 v707 
        let _v700 = v708 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v709 : string = "format!(\"{:#?}\", $0)"
        let v710 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v709 
        let v711 : string = "fable_library_rust::String_::fromString($0)"
        let v712 : string = Fable.Core.RustInterop.emitRustExpr v710 v711 
        let _v700 = v712 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v713 : string = $"%A{v0}"
        let _v700 = v713 
        #endif
#if FABLE_COMPILER_PYTHON
        let v716 : string = $"%A{v0}"
        let _v700 = v716 
        #endif
#else
        let v719 : string = $"%A{v0}"
        let _v700 = v719 
        #endif
        let v722 : string = _v700 
        let v727 : string = $"{v722}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure12(v638, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = " }"
        let v736 : string = $"{v735}"
        let v739 : unit = ()
        let v740 : (unit -> unit) = closure12(v638, v736)
        let v741 : unit = (fun () -> v740 (); v739) ()
        let v744 : string = v638.l0
        let v745 : string = "spiral_wasm.run / Error error"
        let v746 : string = $"{v495} {v630} #{v636} %s{v745} / {v744}"
        let v749 : char list = []
        let v750 : (char list -> (char [])) = List.toArray
        let v751 : (char []) = v750 v749
        let v754 : string = v746.TrimStart v751 
        let v772 : char list = []
        let v773 : char list = '/' :: v772 
        let v776 : char list = ' ' :: v773 
        let v779 : (char list -> (char [])) = List.toArray
        let v780 : (char []) = v779 v776
        let v783 : string = v754.TrimEnd v780 
        let v801 : (string -> unit) = closure13()
        let v802 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v803 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v803 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v804 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v804 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v805 : string = v20.l0
        let v806 : bool = v805 = ""
        let v814 : string =
            if v806 then
                v783
            else
                let v807 : bool = v783 = ""
                if v807 then
                    let v808 : string = v20.l0
                    v808
                else
                    let v809 : string = v20.l0
                    let v810 : string = "\n"
                    let v811 : string = v809 + v810 
                    let v812 : string = v811 + v783 
                    v812
        let v815 : string = "&*$0"
        let v816 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v814 v815 
        let v817 : string = $"$0.chars()"
        let v818 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v816 v817 
        let v819 : string = "v818"
        let v820 : _ = Fable.Core.RustInterop.emitRustExpr () v819 
        let v821 : string = "v820.collect::<Vec<_>>()"
        let v822 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v821 
        let v823 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v824 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v822 v823 
        let v825 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v826 : bool = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = "x"
        let v828 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v827 
        let v829 : string = "String::from_iter($0)"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr v828 v829 
        let v831 : string = "true; $0 }).collect::<Vec<_>>()"
        let v832 : bool = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let v833 : string = "_vec_map"
        let v834 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "$0.len()"
        let v836 : unativeint = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : (unativeint -> int32) = int32
        let v838 : int32 = v837 v836
        let v839 : string = ""
        let v840 : bool = v783 <> v839 
        let v844 : bool =
            if v840 then
                let v843 : bool = v838 <= 1
                v843
            else
                false
        if v844 then
            v20.l0 <- v814
            ()
        else
            v20.l0 <- v839
            let v845 : string = "true; $0.into_iter().for_each(|x| { //"
            let v846 : bool = Fable.Core.RustInterop.emitRustExpr v834 v845 
            let v847 : string = "x"
            let v848 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v847 
            let v849 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v848 v849 
            let v850 : string = $"true;"
            let v851 : bool = Fable.Core.RustInterop.emitRustExpr () v850 
            let v852 : string = "true; }}); { //"
            let v853 : bool = Fable.Core.RustInterop.emitRustExpr () v852 
            ()
        let _v802 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v801 v783
        let _v802 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v801 v783
        let _v802 = () 
        #endif
#else
        v801 v783
        let _v802 = () 
        #endif
        _v802 
        let v854 : (string -> unit) = v18.l0
        v854 v783
and closure36 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 3 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Warning"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_yellow"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_yellow"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_yellow"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[93m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[93m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[93m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{5uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v701 : string = "format!(\"{:#?}\", $0)"
        let v702 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v701 
        let v703 : string = "fable_library_rust::String_::fromString($0)"
        let v704 : string = Fable.Core.RustInterop.emitRustExpr v702 v703 
        let _v700 = v704 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v705 : string = "format!(\"{:#?}\", $0)"
        let v706 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v705 
        let v707 : string = "fable_library_rust::String_::fromString($0)"
        let v708 : string = Fable.Core.RustInterop.emitRustExpr v706 v707 
        let _v700 = v708 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v709 : string = "format!(\"{:#?}\", $0)"
        let v710 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v709 
        let v711 : string = "fable_library_rust::String_::fromString($0)"
        let v712 : string = Fable.Core.RustInterop.emitRustExpr v710 v711 
        let _v700 = v712 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v713 : string = $"%A{v0}"
        let _v700 = v713 
        #endif
#if FABLE_COMPILER_PYTHON
        let v716 : string = $"%A{v0}"
        let _v700 = v716 
        #endif
#else
        let v719 : string = $"%A{v0}"
        let _v700 = v719 
        #endif
        let v722 : string = _v700 
        let v727 : string = $"{v722}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure12(v638, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = " }"
        let v736 : string = $"{v735}"
        let v739 : unit = ()
        let v740 : (unit -> unit) = closure12(v638, v736)
        let v741 : unit = (fun () -> v740 (); v739) ()
        let v744 : string = v638.l0
        let v745 : string = "spiral_wasm.run / Error error"
        let v746 : string = $"{v495} {v630} #{v636} %s{v745} / {v744}"
        let v749 : char list = []
        let v750 : (char list -> (char [])) = List.toArray
        let v751 : (char []) = v750 v749
        let v754 : string = v746.TrimStart v751 
        let v772 : char list = []
        let v773 : char list = '/' :: v772 
        let v776 : char list = ' ' :: v773 
        let v779 : (char list -> (char [])) = List.toArray
        let v780 : (char []) = v779 v776
        let v783 : string = v754.TrimEnd v780 
        let v801 : (string -> unit) = closure13()
        let v802 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v803 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v803 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v804 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v804 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v805 : string = v20.l0
        let v806 : bool = v805 = ""
        let v814 : string =
            if v806 then
                v783
            else
                let v807 : bool = v783 = ""
                if v807 then
                    let v808 : string = v20.l0
                    v808
                else
                    let v809 : string = v20.l0
                    let v810 : string = "\n"
                    let v811 : string = v809 + v810 
                    let v812 : string = v811 + v783 
                    v812
        let v815 : string = "&*$0"
        let v816 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v814 v815 
        let v817 : string = $"$0.chars()"
        let v818 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v816 v817 
        let v819 : string = "v818"
        let v820 : _ = Fable.Core.RustInterop.emitRustExpr () v819 
        let v821 : string = "v820.collect::<Vec<_>>()"
        let v822 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v821 
        let v823 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v824 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v822 v823 
        let v825 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v826 : bool = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = "x"
        let v828 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v827 
        let v829 : string = "String::from_iter($0)"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr v828 v829 
        let v831 : string = "true; $0 }).collect::<Vec<_>>()"
        let v832 : bool = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let v833 : string = "_vec_map"
        let v834 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "$0.len()"
        let v836 : unativeint = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : (unativeint -> int32) = int32
        let v838 : int32 = v837 v836
        let v839 : string = ""
        let v840 : bool = v783 <> v839 
        let v844 : bool =
            if v840 then
                let v843 : bool = v838 <= 1
                v843
            else
                false
        if v844 then
            v20.l0 <- v814
            ()
        else
            v20.l0 <- v839
            let v845 : string = "true; $0.into_iter().for_each(|x| { //"
            let v846 : bool = Fable.Core.RustInterop.emitRustExpr v834 v845 
            let v847 : string = "x"
            let v848 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v847 
            let v849 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v848 v849 
            let v850 : string = $"true;"
            let v851 : bool = Fable.Core.RustInterop.emitRustExpr () v850 
            let v852 : string = "true; }}); { //"
            let v853 : bool = Fable.Core.RustInterop.emitRustExpr () v852 
            ()
        let _v802 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v801 v783
        let _v802 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v801 v783
        let _v802 = () 
        #endif
#else
        v801 v783
        let _v802 = () 
        #endif
        _v802 
        let v854 : (string -> unit) = v18.l0
        v854 v783
and closure37 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 3 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Warning"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_yellow"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_yellow"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_yellow"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[93m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[93m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[93m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{6uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v701 : string = "format!(\"{:#?}\", $0)"
        let v702 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v701 
        let v703 : string = "fable_library_rust::String_::fromString($0)"
        let v704 : string = Fable.Core.RustInterop.emitRustExpr v702 v703 
        let _v700 = v704 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v705 : string = "format!(\"{:#?}\", $0)"
        let v706 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v705 
        let v707 : string = "fable_library_rust::String_::fromString($0)"
        let v708 : string = Fable.Core.RustInterop.emitRustExpr v706 v707 
        let _v700 = v708 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v709 : string = "format!(\"{:#?}\", $0)"
        let v710 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v709 
        let v711 : string = "fable_library_rust::String_::fromString($0)"
        let v712 : string = Fable.Core.RustInterop.emitRustExpr v710 v711 
        let _v700 = v712 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v713 : string = $"%A{v0}"
        let _v700 = v713 
        #endif
#if FABLE_COMPILER_PYTHON
        let v716 : string = $"%A{v0}"
        let _v700 = v716 
        #endif
#else
        let v719 : string = $"%A{v0}"
        let _v700 = v719 
        #endif
        let v722 : string = _v700 
        let v727 : string = $"{v722}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure12(v638, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = " }"
        let v736 : string = $"{v735}"
        let v739 : unit = ()
        let v740 : (unit -> unit) = closure12(v638, v736)
        let v741 : unit = (fun () -> v740 (); v739) ()
        let v744 : string = v638.l0
        let v745 : string = "spiral_wasm.run / Error error"
        let v746 : string = $"{v495} {v630} #{v636} %s{v745} / {v744}"
        let v749 : char list = []
        let v750 : (char list -> (char [])) = List.toArray
        let v751 : (char []) = v750 v749
        let v754 : string = v746.TrimStart v751 
        let v772 : char list = []
        let v773 : char list = '/' :: v772 
        let v776 : char list = ' ' :: v773 
        let v779 : (char list -> (char [])) = List.toArray
        let v780 : (char []) = v779 v776
        let v783 : string = v754.TrimEnd v780 
        let v801 : (string -> unit) = closure13()
        let v802 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v803 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v803 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v804 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v804 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v805 : string = v20.l0
        let v806 : bool = v805 = ""
        let v814 : string =
            if v806 then
                v783
            else
                let v807 : bool = v783 = ""
                if v807 then
                    let v808 : string = v20.l0
                    v808
                else
                    let v809 : string = v20.l0
                    let v810 : string = "\n"
                    let v811 : string = v809 + v810 
                    let v812 : string = v811 + v783 
                    v812
        let v815 : string = "&*$0"
        let v816 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v814 v815 
        let v817 : string = $"$0.chars()"
        let v818 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v816 v817 
        let v819 : string = "v818"
        let v820 : _ = Fable.Core.RustInterop.emitRustExpr () v819 
        let v821 : string = "v820.collect::<Vec<_>>()"
        let v822 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v821 
        let v823 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v824 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v822 v823 
        let v825 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v826 : bool = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = "x"
        let v828 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v827 
        let v829 : string = "String::from_iter($0)"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr v828 v829 
        let v831 : string = "true; $0 }).collect::<Vec<_>>()"
        let v832 : bool = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let v833 : string = "_vec_map"
        let v834 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "$0.len()"
        let v836 : unativeint = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : (unativeint -> int32) = int32
        let v838 : int32 = v837 v836
        let v839 : string = ""
        let v840 : bool = v783 <> v839 
        let v844 : bool =
            if v840 then
                let v843 : bool = v838 <= 1
                v843
            else
                false
        if v844 then
            v20.l0 <- v814
            ()
        else
            v20.l0 <- v839
            let v845 : string = "true; $0.into_iter().for_each(|x| { //"
            let v846 : bool = Fable.Core.RustInterop.emitRustExpr v834 v845 
            let v847 : string = "x"
            let v848 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v847 
            let v849 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v848 v849 
            let v850 : string = $"true;"
            let v851 : bool = Fable.Core.RustInterop.emitRustExpr () v850 
            let v852 : string = "true; }}); { //"
            let v853 : bool = Fable.Core.RustInterop.emitRustExpr () v852 
            ()
        let _v802 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v801 v783
        let _v802 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v801 v783
        let _v802 = () 
        #endif
#else
        v801 v783
        let _v802 = () 
        #endif
        _v802 
        let v854 : (string -> unit) = v18.l0
        v854 v783
and closure38 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 3 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Warning"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_yellow"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_yellow"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_yellow"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[93m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[93m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[93m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{7uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v701 : string = "format!(\"{:#?}\", $0)"
        let v702 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v701 
        let v703 : string = "fable_library_rust::String_::fromString($0)"
        let v704 : string = Fable.Core.RustInterop.emitRustExpr v702 v703 
        let _v700 = v704 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v705 : string = "format!(\"{:#?}\", $0)"
        let v706 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v705 
        let v707 : string = "fable_library_rust::String_::fromString($0)"
        let v708 : string = Fable.Core.RustInterop.emitRustExpr v706 v707 
        let _v700 = v708 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v709 : string = "format!(\"{:#?}\", $0)"
        let v710 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v709 
        let v711 : string = "fable_library_rust::String_::fromString($0)"
        let v712 : string = Fable.Core.RustInterop.emitRustExpr v710 v711 
        let _v700 = v712 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v713 : string = $"%A{v0}"
        let _v700 = v713 
        #endif
#if FABLE_COMPILER_PYTHON
        let v716 : string = $"%A{v0}"
        let _v700 = v716 
        #endif
#else
        let v719 : string = $"%A{v0}"
        let _v700 = v719 
        #endif
        let v722 : string = _v700 
        let v727 : string = $"{v722}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure12(v638, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = " }"
        let v736 : string = $"{v735}"
        let v739 : unit = ()
        let v740 : (unit -> unit) = closure12(v638, v736)
        let v741 : unit = (fun () -> v740 (); v739) ()
        let v744 : string = v638.l0
        let v745 : string = "spiral_wasm.run / Error error"
        let v746 : string = $"{v495} {v630} #{v636} %s{v745} / {v744}"
        let v749 : char list = []
        let v750 : (char list -> (char [])) = List.toArray
        let v751 : (char []) = v750 v749
        let v754 : string = v746.TrimStart v751 
        let v772 : char list = []
        let v773 : char list = '/' :: v772 
        let v776 : char list = ' ' :: v773 
        let v779 : (char list -> (char [])) = List.toArray
        let v780 : (char []) = v779 v776
        let v783 : string = v754.TrimEnd v780 
        let v801 : (string -> unit) = closure13()
        let v802 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v803 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v803 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v804 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v804 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v805 : string = v20.l0
        let v806 : bool = v805 = ""
        let v814 : string =
            if v806 then
                v783
            else
                let v807 : bool = v783 = ""
                if v807 then
                    let v808 : string = v20.l0
                    v808
                else
                    let v809 : string = v20.l0
                    let v810 : string = "\n"
                    let v811 : string = v809 + v810 
                    let v812 : string = v811 + v783 
                    v812
        let v815 : string = "&*$0"
        let v816 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v814 v815 
        let v817 : string = $"$0.chars()"
        let v818 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v816 v817 
        let v819 : string = "v818"
        let v820 : _ = Fable.Core.RustInterop.emitRustExpr () v819 
        let v821 : string = "v820.collect::<Vec<_>>()"
        let v822 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v821 
        let v823 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v824 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v822 v823 
        let v825 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v826 : bool = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = "x"
        let v828 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v827 
        let v829 : string = "String::from_iter($0)"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr v828 v829 
        let v831 : string = "true; $0 }).collect::<Vec<_>>()"
        let v832 : bool = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let v833 : string = "_vec_map"
        let v834 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "$0.len()"
        let v836 : unativeint = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : (unativeint -> int32) = int32
        let v838 : int32 = v837 v836
        let v839 : string = ""
        let v840 : bool = v783 <> v839 
        let v844 : bool =
            if v840 then
                let v843 : bool = v838 <= 1
                v843
            else
                false
        if v844 then
            v20.l0 <- v814
            ()
        else
            v20.l0 <- v839
            let v845 : string = "true; $0.into_iter().for_each(|x| { //"
            let v846 : bool = Fable.Core.RustInterop.emitRustExpr v834 v845 
            let v847 : string = "x"
            let v848 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v847 
            let v849 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v848 v849 
            let v850 : string = $"true;"
            let v851 : bool = Fable.Core.RustInterop.emitRustExpr () v850 
            let v852 : string = "true; }}); { //"
            let v853 : bool = Fable.Core.RustInterop.emitRustExpr () v852 
            ()
        let _v802 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v801 v783
        let _v802 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v801 v783
        let _v802 = () 
        #endif
#else
        v801 v783
        let _v802 = () 
        #endif
        _v802 
        let v854 : (string -> unit) = v18.l0
        v854 v783
and closure39 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 3 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Warning"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_yellow"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_yellow"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_yellow"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[93m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[93m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[93m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{8uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v701 : string = "format!(\"{:#?}\", $0)"
        let v702 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v701 
        let v703 : string = "fable_library_rust::String_::fromString($0)"
        let v704 : string = Fable.Core.RustInterop.emitRustExpr v702 v703 
        let _v700 = v704 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v705 : string = "format!(\"{:#?}\", $0)"
        let v706 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v705 
        let v707 : string = "fable_library_rust::String_::fromString($0)"
        let v708 : string = Fable.Core.RustInterop.emitRustExpr v706 v707 
        let _v700 = v708 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v709 : string = "format!(\"{:#?}\", $0)"
        let v710 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v709 
        let v711 : string = "fable_library_rust::String_::fromString($0)"
        let v712 : string = Fable.Core.RustInterop.emitRustExpr v710 v711 
        let _v700 = v712 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v713 : string = $"%A{v0}"
        let _v700 = v713 
        #endif
#if FABLE_COMPILER_PYTHON
        let v716 : string = $"%A{v0}"
        let _v700 = v716 
        #endif
#else
        let v719 : string = $"%A{v0}"
        let _v700 = v719 
        #endif
        let v722 : string = _v700 
        let v727 : string = $"{v722}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure12(v638, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = " }"
        let v736 : string = $"{v735}"
        let v739 : unit = ()
        let v740 : (unit -> unit) = closure12(v638, v736)
        let v741 : unit = (fun () -> v740 (); v739) ()
        let v744 : string = v638.l0
        let v745 : string = "spiral_wasm.run / Error error"
        let v746 : string = $"{v495} {v630} #{v636} %s{v745} / {v744}"
        let v749 : char list = []
        let v750 : (char list -> (char [])) = List.toArray
        let v751 : (char []) = v750 v749
        let v754 : string = v746.TrimStart v751 
        let v772 : char list = []
        let v773 : char list = '/' :: v772 
        let v776 : char list = ' ' :: v773 
        let v779 : (char list -> (char [])) = List.toArray
        let v780 : (char []) = v779 v776
        let v783 : string = v754.TrimEnd v780 
        let v801 : (string -> unit) = closure13()
        let v802 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v803 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v803 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v804 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v804 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v805 : string = v20.l0
        let v806 : bool = v805 = ""
        let v814 : string =
            if v806 then
                v783
            else
                let v807 : bool = v783 = ""
                if v807 then
                    let v808 : string = v20.l0
                    v808
                else
                    let v809 : string = v20.l0
                    let v810 : string = "\n"
                    let v811 : string = v809 + v810 
                    let v812 : string = v811 + v783 
                    v812
        let v815 : string = "&*$0"
        let v816 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v814 v815 
        let v817 : string = $"$0.chars()"
        let v818 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v816 v817 
        let v819 : string = "v818"
        let v820 : _ = Fable.Core.RustInterop.emitRustExpr () v819 
        let v821 : string = "v820.collect::<Vec<_>>()"
        let v822 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v821 
        let v823 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v824 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v822 v823 
        let v825 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v826 : bool = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = "x"
        let v828 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v827 
        let v829 : string = "String::from_iter($0)"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr v828 v829 
        let v831 : string = "true; $0 }).collect::<Vec<_>>()"
        let v832 : bool = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let v833 : string = "_vec_map"
        let v834 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "$0.len()"
        let v836 : unativeint = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : (unativeint -> int32) = int32
        let v838 : int32 = v837 v836
        let v839 : string = ""
        let v840 : bool = v783 <> v839 
        let v844 : bool =
            if v840 then
                let v843 : bool = v838 <= 1
                v843
            else
                false
        if v844 then
            v20.l0 <- v814
            ()
        else
            v20.l0 <- v839
            let v845 : string = "true; $0.into_iter().for_each(|x| { //"
            let v846 : bool = Fable.Core.RustInterop.emitRustExpr v834 v845 
            let v847 : string = "x"
            let v848 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v847 
            let v849 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v848 v849 
            let v850 : string = $"true;"
            let v851 : bool = Fable.Core.RustInterop.emitRustExpr () v850 
            let v852 : string = "true; }}); { //"
            let v853 : bool = Fable.Core.RustInterop.emitRustExpr () v852 
            ()
        let _v802 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v801 v783
        let _v802 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v801 v783
        let _v802 = () 
        #endif
#else
        v801 v783
        let _v802 = () 
        #endif
        _v802 
        let v854 : (string -> unit) = v18.l0
        v854 v783
and closure40 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 3 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Warning"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_yellow"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_yellow"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_yellow"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[93m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[93m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[93m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{9uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v701 : string = "format!(\"{:#?}\", $0)"
        let v702 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v701 
        let v703 : string = "fable_library_rust::String_::fromString($0)"
        let v704 : string = Fable.Core.RustInterop.emitRustExpr v702 v703 
        let _v700 = v704 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v705 : string = "format!(\"{:#?}\", $0)"
        let v706 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v705 
        let v707 : string = "fable_library_rust::String_::fromString($0)"
        let v708 : string = Fable.Core.RustInterop.emitRustExpr v706 v707 
        let _v700 = v708 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v709 : string = "format!(\"{:#?}\", $0)"
        let v710 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v709 
        let v711 : string = "fable_library_rust::String_::fromString($0)"
        let v712 : string = Fable.Core.RustInterop.emitRustExpr v710 v711 
        let _v700 = v712 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v713 : string = $"%A{v0}"
        let _v700 = v713 
        #endif
#if FABLE_COMPILER_PYTHON
        let v716 : string = $"%A{v0}"
        let _v700 = v716 
        #endif
#else
        let v719 : string = $"%A{v0}"
        let _v700 = v719 
        #endif
        let v722 : string = _v700 
        let v727 : string = $"{v722}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure12(v638, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = " }"
        let v736 : string = $"{v735}"
        let v739 : unit = ()
        let v740 : (unit -> unit) = closure12(v638, v736)
        let v741 : unit = (fun () -> v740 (); v739) ()
        let v744 : string = v638.l0
        let v745 : string = "spiral_wasm.run / Error error"
        let v746 : string = $"{v495} {v630} #{v636} %s{v745} / {v744}"
        let v749 : char list = []
        let v750 : (char list -> (char [])) = List.toArray
        let v751 : (char []) = v750 v749
        let v754 : string = v746.TrimStart v751 
        let v772 : char list = []
        let v773 : char list = '/' :: v772 
        let v776 : char list = ' ' :: v773 
        let v779 : (char list -> (char [])) = List.toArray
        let v780 : (char []) = v779 v776
        let v783 : string = v754.TrimEnd v780 
        let v801 : (string -> unit) = closure13()
        let v802 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v803 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v803 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v804 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v804 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v805 : string = v20.l0
        let v806 : bool = v805 = ""
        let v814 : string =
            if v806 then
                v783
            else
                let v807 : bool = v783 = ""
                if v807 then
                    let v808 : string = v20.l0
                    v808
                else
                    let v809 : string = v20.l0
                    let v810 : string = "\n"
                    let v811 : string = v809 + v810 
                    let v812 : string = v811 + v783 
                    v812
        let v815 : string = "&*$0"
        let v816 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v814 v815 
        let v817 : string = $"$0.chars()"
        let v818 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v816 v817 
        let v819 : string = "v818"
        let v820 : _ = Fable.Core.RustInterop.emitRustExpr () v819 
        let v821 : string = "v820.collect::<Vec<_>>()"
        let v822 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v821 
        let v823 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v824 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v822 v823 
        let v825 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v826 : bool = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = "x"
        let v828 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v827 
        let v829 : string = "String::from_iter($0)"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr v828 v829 
        let v831 : string = "true; $0 }).collect::<Vec<_>>()"
        let v832 : bool = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let v833 : string = "_vec_map"
        let v834 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "$0.len()"
        let v836 : unativeint = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : (unativeint -> int32) = int32
        let v838 : int32 = v837 v836
        let v839 : string = ""
        let v840 : bool = v783 <> v839 
        let v844 : bool =
            if v840 then
                let v843 : bool = v838 <= 1
                v843
            else
                false
        if v844 then
            v20.l0 <- v814
            ()
        else
            v20.l0 <- v839
            let v845 : string = "true; $0.into_iter().for_each(|x| { //"
            let v846 : bool = Fable.Core.RustInterop.emitRustExpr v834 v845 
            let v847 : string = "x"
            let v848 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v847 
            let v849 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v848 v849 
            let v850 : string = $"true;"
            let v851 : bool = Fable.Core.RustInterop.emitRustExpr () v850 
            let v852 : string = "true; }}); { //"
            let v853 : bool = Fable.Core.RustInterop.emitRustExpr () v852 
            ()
        let _v802 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v801 v783
        let _v802 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v801 v783
        let _v802 = () 
        #endif
#else
        v801 v783
        let _v802 = () 
        #endif
        _v802 
        let v854 : (string -> unit) = v18.l0
        v854 v783
and closure41 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 3 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Warning"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_yellow"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_yellow"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_yellow"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[93m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[93m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[93m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{10uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v701 : string = "format!(\"{:#?}\", $0)"
        let v702 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v701 
        let v703 : string = "fable_library_rust::String_::fromString($0)"
        let v704 : string = Fable.Core.RustInterop.emitRustExpr v702 v703 
        let _v700 = v704 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v705 : string = "format!(\"{:#?}\", $0)"
        let v706 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v705 
        let v707 : string = "fable_library_rust::String_::fromString($0)"
        let v708 : string = Fable.Core.RustInterop.emitRustExpr v706 v707 
        let _v700 = v708 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v709 : string = "format!(\"{:#?}\", $0)"
        let v710 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v709 
        let v711 : string = "fable_library_rust::String_::fromString($0)"
        let v712 : string = Fable.Core.RustInterop.emitRustExpr v710 v711 
        let _v700 = v712 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v713 : string = $"%A{v0}"
        let _v700 = v713 
        #endif
#if FABLE_COMPILER_PYTHON
        let v716 : string = $"%A{v0}"
        let _v700 = v716 
        #endif
#else
        let v719 : string = $"%A{v0}"
        let _v700 = v719 
        #endif
        let v722 : string = _v700 
        let v727 : string = $"{v722}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure12(v638, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = " }"
        let v736 : string = $"{v735}"
        let v739 : unit = ()
        let v740 : (unit -> unit) = closure12(v638, v736)
        let v741 : unit = (fun () -> v740 (); v739) ()
        let v744 : string = v638.l0
        let v745 : string = "spiral_wasm.run / Error error"
        let v746 : string = $"{v495} {v630} #{v636} %s{v745} / {v744}"
        let v749 : char list = []
        let v750 : (char list -> (char [])) = List.toArray
        let v751 : (char []) = v750 v749
        let v754 : string = v746.TrimStart v751 
        let v772 : char list = []
        let v773 : char list = '/' :: v772 
        let v776 : char list = ' ' :: v773 
        let v779 : (char list -> (char [])) = List.toArray
        let v780 : (char []) = v779 v776
        let v783 : string = v754.TrimEnd v780 
        let v801 : (string -> unit) = closure13()
        let v802 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v803 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v803 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v804 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v804 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v805 : string = v20.l0
        let v806 : bool = v805 = ""
        let v814 : string =
            if v806 then
                v783
            else
                let v807 : bool = v783 = ""
                if v807 then
                    let v808 : string = v20.l0
                    v808
                else
                    let v809 : string = v20.l0
                    let v810 : string = "\n"
                    let v811 : string = v809 + v810 
                    let v812 : string = v811 + v783 
                    v812
        let v815 : string = "&*$0"
        let v816 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v814 v815 
        let v817 : string = $"$0.chars()"
        let v818 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v816 v817 
        let v819 : string = "v818"
        let v820 : _ = Fable.Core.RustInterop.emitRustExpr () v819 
        let v821 : string = "v820.collect::<Vec<_>>()"
        let v822 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v821 
        let v823 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v824 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v822 v823 
        let v825 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v826 : bool = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = "x"
        let v828 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v827 
        let v829 : string = "String::from_iter($0)"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr v828 v829 
        let v831 : string = "true; $0 }).collect::<Vec<_>>()"
        let v832 : bool = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let v833 : string = "_vec_map"
        let v834 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "$0.len()"
        let v836 : unativeint = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : (unativeint -> int32) = int32
        let v838 : int32 = v837 v836
        let v839 : string = ""
        let v840 : bool = v783 <> v839 
        let v844 : bool =
            if v840 then
                let v843 : bool = v838 <= 1
                v843
            else
                false
        if v844 then
            v20.l0 <- v814
            ()
        else
            v20.l0 <- v839
            let v845 : string = "true; $0.into_iter().for_each(|x| { //"
            let v846 : bool = Fable.Core.RustInterop.emitRustExpr v834 v845 
            let v847 : string = "x"
            let v848 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v847 
            let v849 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v848 v849 
            let v850 : string = $"true;"
            let v851 : bool = Fable.Core.RustInterop.emitRustExpr () v850 
            let v852 : string = "true; }}); { //"
            let v853 : bool = Fable.Core.RustInterop.emitRustExpr () v852 
            ()
        let _v802 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v801 v783
        let _v802 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v801 v783
        let _v802 = () 
        #endif
#else
        v801 v783
        let _v802 = () 
        #endif
        _v802 
        let v854 : (string -> unit) = v18.l0
        v854 v783
and closure42 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 3 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Warning"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_yellow"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_yellow"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_yellow"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[93m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[93m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[93m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{11uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v701 : string = "format!(\"{:#?}\", $0)"
        let v702 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v701 
        let v703 : string = "fable_library_rust::String_::fromString($0)"
        let v704 : string = Fable.Core.RustInterop.emitRustExpr v702 v703 
        let _v700 = v704 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v705 : string = "format!(\"{:#?}\", $0)"
        let v706 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v705 
        let v707 : string = "fable_library_rust::String_::fromString($0)"
        let v708 : string = Fable.Core.RustInterop.emitRustExpr v706 v707 
        let _v700 = v708 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v709 : string = "format!(\"{:#?}\", $0)"
        let v710 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v709 
        let v711 : string = "fable_library_rust::String_::fromString($0)"
        let v712 : string = Fable.Core.RustInterop.emitRustExpr v710 v711 
        let _v700 = v712 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v713 : string = $"%A{v0}"
        let _v700 = v713 
        #endif
#if FABLE_COMPILER_PYTHON
        let v716 : string = $"%A{v0}"
        let _v700 = v716 
        #endif
#else
        let v719 : string = $"%A{v0}"
        let _v700 = v719 
        #endif
        let v722 : string = _v700 
        let v727 : string = $"{v722}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure12(v638, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = " }"
        let v736 : string = $"{v735}"
        let v739 : unit = ()
        let v740 : (unit -> unit) = closure12(v638, v736)
        let v741 : unit = (fun () -> v740 (); v739) ()
        let v744 : string = v638.l0
        let v745 : string = "spiral_wasm.run / Error error"
        let v746 : string = $"{v495} {v630} #{v636} %s{v745} / {v744}"
        let v749 : char list = []
        let v750 : (char list -> (char [])) = List.toArray
        let v751 : (char []) = v750 v749
        let v754 : string = v746.TrimStart v751 
        let v772 : char list = []
        let v773 : char list = '/' :: v772 
        let v776 : char list = ' ' :: v773 
        let v779 : (char list -> (char [])) = List.toArray
        let v780 : (char []) = v779 v776
        let v783 : string = v754.TrimEnd v780 
        let v801 : (string -> unit) = closure13()
        let v802 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v803 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v803 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v804 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v804 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v805 : string = v20.l0
        let v806 : bool = v805 = ""
        let v814 : string =
            if v806 then
                v783
            else
                let v807 : bool = v783 = ""
                if v807 then
                    let v808 : string = v20.l0
                    v808
                else
                    let v809 : string = v20.l0
                    let v810 : string = "\n"
                    let v811 : string = v809 + v810 
                    let v812 : string = v811 + v783 
                    v812
        let v815 : string = "&*$0"
        let v816 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v814 v815 
        let v817 : string = $"$0.chars()"
        let v818 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v816 v817 
        let v819 : string = "v818"
        let v820 : _ = Fable.Core.RustInterop.emitRustExpr () v819 
        let v821 : string = "v820.collect::<Vec<_>>()"
        let v822 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v821 
        let v823 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v824 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v822 v823 
        let v825 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v826 : bool = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = "x"
        let v828 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v827 
        let v829 : string = "String::from_iter($0)"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr v828 v829 
        let v831 : string = "true; $0 }).collect::<Vec<_>>()"
        let v832 : bool = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let v833 : string = "_vec_map"
        let v834 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "$0.len()"
        let v836 : unativeint = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : (unativeint -> int32) = int32
        let v838 : int32 = v837 v836
        let v839 : string = ""
        let v840 : bool = v783 <> v839 
        let v844 : bool =
            if v840 then
                let v843 : bool = v838 <= 1
                v843
            else
                false
        if v844 then
            v20.l0 <- v814
            ()
        else
            v20.l0 <- v839
            let v845 : string = "true; $0.into_iter().for_each(|x| { //"
            let v846 : bool = Fable.Core.RustInterop.emitRustExpr v834 v845 
            let v847 : string = "x"
            let v848 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v847 
            let v849 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v848 v849 
            let v850 : string = $"true;"
            let v851 : bool = Fable.Core.RustInterop.emitRustExpr () v850 
            let v852 : string = "true; }}); { //"
            let v853 : bool = Fable.Core.RustInterop.emitRustExpr () v852 
            ()
        let _v802 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v801 v783
        let _v802 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v801 v783
        let _v802 = () 
        #endif
#else
        v801 v783
        let _v802 = () 
        #endif
        _v802 
        let v854 : (string -> unit) = v18.l0
        v854 v783
and closure43 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 3 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Warning"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_yellow"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_yellow"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_yellow"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[93m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[93m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[93m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{12uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v701 : string = "format!(\"{:#?}\", $0)"
        let v702 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v701 
        let v703 : string = "fable_library_rust::String_::fromString($0)"
        let v704 : string = Fable.Core.RustInterop.emitRustExpr v702 v703 
        let _v700 = v704 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v705 : string = "format!(\"{:#?}\", $0)"
        let v706 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v705 
        let v707 : string = "fable_library_rust::String_::fromString($0)"
        let v708 : string = Fable.Core.RustInterop.emitRustExpr v706 v707 
        let _v700 = v708 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v709 : string = "format!(\"{:#?}\", $0)"
        let v710 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v709 
        let v711 : string = "fable_library_rust::String_::fromString($0)"
        let v712 : string = Fable.Core.RustInterop.emitRustExpr v710 v711 
        let _v700 = v712 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v713 : string = $"%A{v0}"
        let _v700 = v713 
        #endif
#if FABLE_COMPILER_PYTHON
        let v716 : string = $"%A{v0}"
        let _v700 = v716 
        #endif
#else
        let v719 : string = $"%A{v0}"
        let _v700 = v719 
        #endif
        let v722 : string = _v700 
        let v727 : string = $"{v722}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure12(v638, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = " }"
        let v736 : string = $"{v735}"
        let v739 : unit = ()
        let v740 : (unit -> unit) = closure12(v638, v736)
        let v741 : unit = (fun () -> v740 (); v739) ()
        let v744 : string = v638.l0
        let v745 : string = "spiral_wasm.run / Error error"
        let v746 : string = $"{v495} {v630} #{v636} %s{v745} / {v744}"
        let v749 : char list = []
        let v750 : (char list -> (char [])) = List.toArray
        let v751 : (char []) = v750 v749
        let v754 : string = v746.TrimStart v751 
        let v772 : char list = []
        let v773 : char list = '/' :: v772 
        let v776 : char list = ' ' :: v773 
        let v779 : (char list -> (char [])) = List.toArray
        let v780 : (char []) = v779 v776
        let v783 : string = v754.TrimEnd v780 
        let v801 : (string -> unit) = closure13()
        let v802 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v803 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v803 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v804 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v804 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v805 : string = v20.l0
        let v806 : bool = v805 = ""
        let v814 : string =
            if v806 then
                v783
            else
                let v807 : bool = v783 = ""
                if v807 then
                    let v808 : string = v20.l0
                    v808
                else
                    let v809 : string = v20.l0
                    let v810 : string = "\n"
                    let v811 : string = v809 + v810 
                    let v812 : string = v811 + v783 
                    v812
        let v815 : string = "&*$0"
        let v816 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v814 v815 
        let v817 : string = $"$0.chars()"
        let v818 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v816 v817 
        let v819 : string = "v818"
        let v820 : _ = Fable.Core.RustInterop.emitRustExpr () v819 
        let v821 : string = "v820.collect::<Vec<_>>()"
        let v822 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v821 
        let v823 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v824 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v822 v823 
        let v825 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v826 : bool = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = "x"
        let v828 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v827 
        let v829 : string = "String::from_iter($0)"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr v828 v829 
        let v831 : string = "true; $0 }).collect::<Vec<_>>()"
        let v832 : bool = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let v833 : string = "_vec_map"
        let v834 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "$0.len()"
        let v836 : unativeint = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : (unativeint -> int32) = int32
        let v838 : int32 = v837 v836
        let v839 : string = ""
        let v840 : bool = v783 <> v839 
        let v844 : bool =
            if v840 then
                let v843 : bool = v838 <= 1
                v843
            else
                false
        if v844 then
            v20.l0 <- v814
            ()
        else
            v20.l0 <- v839
            let v845 : string = "true; $0.into_iter().for_each(|x| { //"
            let v846 : bool = Fable.Core.RustInterop.emitRustExpr v834 v845 
            let v847 : string = "x"
            let v848 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v847 
            let v849 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v848 v849 
            let v850 : string = $"true;"
            let v851 : bool = Fable.Core.RustInterop.emitRustExpr () v850 
            let v852 : string = "true; }}); { //"
            let v853 : bool = Fable.Core.RustInterop.emitRustExpr () v852 
            ()
        let _v802 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v801 v783
        let _v802 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v801 v783
        let _v802 = () 
        #endif
#else
        v801 v783
        let _v802 = () 
        #endif
        _v802 
        let v854 : (string -> unit) = v18.l0
        v854 v783
and closure44 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 3 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Warning"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_yellow"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_yellow"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_yellow"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[93m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[93m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[93m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{13uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v701 : string = "format!(\"{:#?}\", $0)"
        let v702 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v701 
        let v703 : string = "fable_library_rust::String_::fromString($0)"
        let v704 : string = Fable.Core.RustInterop.emitRustExpr v702 v703 
        let _v700 = v704 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v705 : string = "format!(\"{:#?}\", $0)"
        let v706 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v705 
        let v707 : string = "fable_library_rust::String_::fromString($0)"
        let v708 : string = Fable.Core.RustInterop.emitRustExpr v706 v707 
        let _v700 = v708 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v709 : string = "format!(\"{:#?}\", $0)"
        let v710 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v709 
        let v711 : string = "fable_library_rust::String_::fromString($0)"
        let v712 : string = Fable.Core.RustInterop.emitRustExpr v710 v711 
        let _v700 = v712 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v713 : string = $"%A{v0}"
        let _v700 = v713 
        #endif
#if FABLE_COMPILER_PYTHON
        let v716 : string = $"%A{v0}"
        let _v700 = v716 
        #endif
#else
        let v719 : string = $"%A{v0}"
        let _v700 = v719 
        #endif
        let v722 : string = _v700 
        let v727 : string = $"{v722}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure12(v638, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = " }"
        let v736 : string = $"{v735}"
        let v739 : unit = ()
        let v740 : (unit -> unit) = closure12(v638, v736)
        let v741 : unit = (fun () -> v740 (); v739) ()
        let v744 : string = v638.l0
        let v745 : string = "spiral_wasm.run / Error error"
        let v746 : string = $"{v495} {v630} #{v636} %s{v745} / {v744}"
        let v749 : char list = []
        let v750 : (char list -> (char [])) = List.toArray
        let v751 : (char []) = v750 v749
        let v754 : string = v746.TrimStart v751 
        let v772 : char list = []
        let v773 : char list = '/' :: v772 
        let v776 : char list = ' ' :: v773 
        let v779 : (char list -> (char [])) = List.toArray
        let v780 : (char []) = v779 v776
        let v783 : string = v754.TrimEnd v780 
        let v801 : (string -> unit) = closure13()
        let v802 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v803 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v803 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v804 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v804 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v805 : string = v20.l0
        let v806 : bool = v805 = ""
        let v814 : string =
            if v806 then
                v783
            else
                let v807 : bool = v783 = ""
                if v807 then
                    let v808 : string = v20.l0
                    v808
                else
                    let v809 : string = v20.l0
                    let v810 : string = "\n"
                    let v811 : string = v809 + v810 
                    let v812 : string = v811 + v783 
                    v812
        let v815 : string = "&*$0"
        let v816 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v814 v815 
        let v817 : string = $"$0.chars()"
        let v818 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v816 v817 
        let v819 : string = "v818"
        let v820 : _ = Fable.Core.RustInterop.emitRustExpr () v819 
        let v821 : string = "v820.collect::<Vec<_>>()"
        let v822 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v821 
        let v823 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v824 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v822 v823 
        let v825 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v826 : bool = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = "x"
        let v828 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v827 
        let v829 : string = "String::from_iter($0)"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr v828 v829 
        let v831 : string = "true; $0 }).collect::<Vec<_>>()"
        let v832 : bool = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let v833 : string = "_vec_map"
        let v834 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "$0.len()"
        let v836 : unativeint = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : (unativeint -> int32) = int32
        let v838 : int32 = v837 v836
        let v839 : string = ""
        let v840 : bool = v783 <> v839 
        let v844 : bool =
            if v840 then
                let v843 : bool = v838 <= 1
                v843
            else
                false
        if v844 then
            v20.l0 <- v814
            ()
        else
            v20.l0 <- v839
            let v845 : string = "true; $0.into_iter().for_each(|x| { //"
            let v846 : bool = Fable.Core.RustInterop.emitRustExpr v834 v845 
            let v847 : string = "x"
            let v848 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v847 
            let v849 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v848 v849 
            let v850 : string = $"true;"
            let v851 : bool = Fable.Core.RustInterop.emitRustExpr () v850 
            let v852 : string = "true; }}); { //"
            let v853 : bool = Fable.Core.RustInterop.emitRustExpr () v852 
            ()
        let _v802 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v801 v783
        let _v802 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v801 v783
        let _v802 = () 
        #endif
#else
        v801 v783
        let _v802 = () 
        #endif
        _v802 
        let v854 : (string -> unit) = v18.l0
        v854 v783
and closure45 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 3 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Warning"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_yellow"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_yellow"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_yellow"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[93m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[93m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[93m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{14uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v701 : string = "format!(\"{:#?}\", $0)"
        let v702 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v701 
        let v703 : string = "fable_library_rust::String_::fromString($0)"
        let v704 : string = Fable.Core.RustInterop.emitRustExpr v702 v703 
        let _v700 = v704 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v705 : string = "format!(\"{:#?}\", $0)"
        let v706 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v705 
        let v707 : string = "fable_library_rust::String_::fromString($0)"
        let v708 : string = Fable.Core.RustInterop.emitRustExpr v706 v707 
        let _v700 = v708 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v709 : string = "format!(\"{:#?}\", $0)"
        let v710 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v709 
        let v711 : string = "fable_library_rust::String_::fromString($0)"
        let v712 : string = Fable.Core.RustInterop.emitRustExpr v710 v711 
        let _v700 = v712 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v713 : string = $"%A{v0}"
        let _v700 = v713 
        #endif
#if FABLE_COMPILER_PYTHON
        let v716 : string = $"%A{v0}"
        let _v700 = v716 
        #endif
#else
        let v719 : string = $"%A{v0}"
        let _v700 = v719 
        #endif
        let v722 : string = _v700 
        let v727 : string = $"{v722}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure12(v638, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = " }"
        let v736 : string = $"{v735}"
        let v739 : unit = ()
        let v740 : (unit -> unit) = closure12(v638, v736)
        let v741 : unit = (fun () -> v740 (); v739) ()
        let v744 : string = v638.l0
        let v745 : string = "spiral_wasm.run / Error error"
        let v746 : string = $"{v495} {v630} #{v636} %s{v745} / {v744}"
        let v749 : char list = []
        let v750 : (char list -> (char [])) = List.toArray
        let v751 : (char []) = v750 v749
        let v754 : string = v746.TrimStart v751 
        let v772 : char list = []
        let v773 : char list = '/' :: v772 
        let v776 : char list = ' ' :: v773 
        let v779 : (char list -> (char [])) = List.toArray
        let v780 : (char []) = v779 v776
        let v783 : string = v754.TrimEnd v780 
        let v801 : (string -> unit) = closure13()
        let v802 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v803 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v803 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v804 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v804 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v805 : string = v20.l0
        let v806 : bool = v805 = ""
        let v814 : string =
            if v806 then
                v783
            else
                let v807 : bool = v783 = ""
                if v807 then
                    let v808 : string = v20.l0
                    v808
                else
                    let v809 : string = v20.l0
                    let v810 : string = "\n"
                    let v811 : string = v809 + v810 
                    let v812 : string = v811 + v783 
                    v812
        let v815 : string = "&*$0"
        let v816 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v814 v815 
        let v817 : string = $"$0.chars()"
        let v818 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v816 v817 
        let v819 : string = "v818"
        let v820 : _ = Fable.Core.RustInterop.emitRustExpr () v819 
        let v821 : string = "v820.collect::<Vec<_>>()"
        let v822 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v821 
        let v823 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v824 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v822 v823 
        let v825 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v826 : bool = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = "x"
        let v828 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v827 
        let v829 : string = "String::from_iter($0)"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr v828 v829 
        let v831 : string = "true; $0 }).collect::<Vec<_>>()"
        let v832 : bool = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let v833 : string = "_vec_map"
        let v834 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "$0.len()"
        let v836 : unativeint = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : (unativeint -> int32) = int32
        let v838 : int32 = v837 v836
        let v839 : string = ""
        let v840 : bool = v783 <> v839 
        let v844 : bool =
            if v840 then
                let v843 : bool = v838 <= 1
                v843
            else
                false
        if v844 then
            v20.l0 <- v814
            ()
        else
            v20.l0 <- v839
            let v845 : string = "true; $0.into_iter().for_each(|x| { //"
            let v846 : bool = Fable.Core.RustInterop.emitRustExpr v834 v845 
            let v847 : string = "x"
            let v848 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v847 
            let v849 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v848 v849 
            let v850 : string = $"true;"
            let v851 : bool = Fable.Core.RustInterop.emitRustExpr () v850 
            let v852 : string = "true; }}); { //"
            let v853 : bool = Fable.Core.RustInterop.emitRustExpr () v852 
            ()
        let _v802 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v801 v783
        let _v802 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v801 v783
        let _v802 = () 
        #endif
#else
        v801 v783
        let _v802 = () 
        #endif
        _v802 
        let v854 : (string -> unit) = v18.l0
        v854 v783
and closure46 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 3 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Warning"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_yellow"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_yellow"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_yellow"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[93m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[93m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[93m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{15uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v701 : string = "format!(\"{:#?}\", $0)"
        let v702 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v701 
        let v703 : string = "fable_library_rust::String_::fromString($0)"
        let v704 : string = Fable.Core.RustInterop.emitRustExpr v702 v703 
        let _v700 = v704 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v705 : string = "format!(\"{:#?}\", $0)"
        let v706 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v705 
        let v707 : string = "fable_library_rust::String_::fromString($0)"
        let v708 : string = Fable.Core.RustInterop.emitRustExpr v706 v707 
        let _v700 = v708 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v709 : string = "format!(\"{:#?}\", $0)"
        let v710 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v709 
        let v711 : string = "fable_library_rust::String_::fromString($0)"
        let v712 : string = Fable.Core.RustInterop.emitRustExpr v710 v711 
        let _v700 = v712 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v713 : string = $"%A{v0}"
        let _v700 = v713 
        #endif
#if FABLE_COMPILER_PYTHON
        let v716 : string = $"%A{v0}"
        let _v700 = v716 
        #endif
#else
        let v719 : string = $"%A{v0}"
        let _v700 = v719 
        #endif
        let v722 : string = _v700 
        let v727 : string = $"{v722}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure12(v638, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = " }"
        let v736 : string = $"{v735}"
        let v739 : unit = ()
        let v740 : (unit -> unit) = closure12(v638, v736)
        let v741 : unit = (fun () -> v740 (); v739) ()
        let v744 : string = v638.l0
        let v745 : string = "spiral_wasm.run / Error error"
        let v746 : string = $"{v495} {v630} #{v636} %s{v745} / {v744}"
        let v749 : char list = []
        let v750 : (char list -> (char [])) = List.toArray
        let v751 : (char []) = v750 v749
        let v754 : string = v746.TrimStart v751 
        let v772 : char list = []
        let v773 : char list = '/' :: v772 
        let v776 : char list = ' ' :: v773 
        let v779 : (char list -> (char [])) = List.toArray
        let v780 : (char []) = v779 v776
        let v783 : string = v754.TrimEnd v780 
        let v801 : (string -> unit) = closure13()
        let v802 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v803 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v803 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v804 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v804 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v805 : string = v20.l0
        let v806 : bool = v805 = ""
        let v814 : string =
            if v806 then
                v783
            else
                let v807 : bool = v783 = ""
                if v807 then
                    let v808 : string = v20.l0
                    v808
                else
                    let v809 : string = v20.l0
                    let v810 : string = "\n"
                    let v811 : string = v809 + v810 
                    let v812 : string = v811 + v783 
                    v812
        let v815 : string = "&*$0"
        let v816 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v814 v815 
        let v817 : string = $"$0.chars()"
        let v818 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v816 v817 
        let v819 : string = "v818"
        let v820 : _ = Fable.Core.RustInterop.emitRustExpr () v819 
        let v821 : string = "v820.collect::<Vec<_>>()"
        let v822 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v821 
        let v823 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v824 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v822 v823 
        let v825 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v826 : bool = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = "x"
        let v828 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v827 
        let v829 : string = "String::from_iter($0)"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr v828 v829 
        let v831 : string = "true; $0 }).collect::<Vec<_>>()"
        let v832 : bool = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let v833 : string = "_vec_map"
        let v834 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "$0.len()"
        let v836 : unativeint = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : (unativeint -> int32) = int32
        let v838 : int32 = v837 v836
        let v839 : string = ""
        let v840 : bool = v783 <> v839 
        let v844 : bool =
            if v840 then
                let v843 : bool = v838 <= 1
                v843
            else
                false
        if v844 then
            v20.l0 <- v814
            ()
        else
            v20.l0 <- v839
            let v845 : string = "true; $0.into_iter().for_each(|x| { //"
            let v846 : bool = Fable.Core.RustInterop.emitRustExpr v834 v845 
            let v847 : string = "x"
            let v848 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v847 
            let v849 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v848 v849 
            let v850 : string = $"true;"
            let v851 : bool = Fable.Core.RustInterop.emitRustExpr () v850 
            let v852 : string = "true; }}); { //"
            let v853 : bool = Fable.Core.RustInterop.emitRustExpr () v852 
            ()
        let _v802 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v801 v783
        let _v802 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v801 v783
        let _v802 = () 
        #endif
#else
        v801 v783
        let _v802 = () 
        #endif
        _v802 
        let v854 : (string -> unit) = v18.l0
        v854 v783
and closure47 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 3 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Warning"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_yellow"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_yellow"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_yellow"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[93m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[93m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[93m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{16uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v701 : string = "format!(\"{:#?}\", $0)"
        let v702 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v701 
        let v703 : string = "fable_library_rust::String_::fromString($0)"
        let v704 : string = Fable.Core.RustInterop.emitRustExpr v702 v703 
        let _v700 = v704 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v705 : string = "format!(\"{:#?}\", $0)"
        let v706 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v705 
        let v707 : string = "fable_library_rust::String_::fromString($0)"
        let v708 : string = Fable.Core.RustInterop.emitRustExpr v706 v707 
        let _v700 = v708 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v709 : string = "format!(\"{:#?}\", $0)"
        let v710 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v709 
        let v711 : string = "fable_library_rust::String_::fromString($0)"
        let v712 : string = Fable.Core.RustInterop.emitRustExpr v710 v711 
        let _v700 = v712 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v713 : string = $"%A{v0}"
        let _v700 = v713 
        #endif
#if FABLE_COMPILER_PYTHON
        let v716 : string = $"%A{v0}"
        let _v700 = v716 
        #endif
#else
        let v719 : string = $"%A{v0}"
        let _v700 = v719 
        #endif
        let v722 : string = _v700 
        let v727 : string = $"{v722}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure12(v638, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = " }"
        let v736 : string = $"{v735}"
        let v739 : unit = ()
        let v740 : (unit -> unit) = closure12(v638, v736)
        let v741 : unit = (fun () -> v740 (); v739) ()
        let v744 : string = v638.l0
        let v745 : string = "spiral_wasm.run / Error error"
        let v746 : string = $"{v495} {v630} #{v636} %s{v745} / {v744}"
        let v749 : char list = []
        let v750 : (char list -> (char [])) = List.toArray
        let v751 : (char []) = v750 v749
        let v754 : string = v746.TrimStart v751 
        let v772 : char list = []
        let v773 : char list = '/' :: v772 
        let v776 : char list = ' ' :: v773 
        let v779 : (char list -> (char [])) = List.toArray
        let v780 : (char []) = v779 v776
        let v783 : string = v754.TrimEnd v780 
        let v801 : (string -> unit) = closure13()
        let v802 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v803 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v803 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v804 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v804 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v805 : string = v20.l0
        let v806 : bool = v805 = ""
        let v814 : string =
            if v806 then
                v783
            else
                let v807 : bool = v783 = ""
                if v807 then
                    let v808 : string = v20.l0
                    v808
                else
                    let v809 : string = v20.l0
                    let v810 : string = "\n"
                    let v811 : string = v809 + v810 
                    let v812 : string = v811 + v783 
                    v812
        let v815 : string = "&*$0"
        let v816 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v814 v815 
        let v817 : string = $"$0.chars()"
        let v818 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v816 v817 
        let v819 : string = "v818"
        let v820 : _ = Fable.Core.RustInterop.emitRustExpr () v819 
        let v821 : string = "v820.collect::<Vec<_>>()"
        let v822 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v821 
        let v823 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v824 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v822 v823 
        let v825 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v826 : bool = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = "x"
        let v828 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v827 
        let v829 : string = "String::from_iter($0)"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr v828 v829 
        let v831 : string = "true; $0 }).collect::<Vec<_>>()"
        let v832 : bool = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let v833 : string = "_vec_map"
        let v834 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "$0.len()"
        let v836 : unativeint = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : (unativeint -> int32) = int32
        let v838 : int32 = v837 v836
        let v839 : string = ""
        let v840 : bool = v783 <> v839 
        let v844 : bool =
            if v840 then
                let v843 : bool = v838 <= 1
                v843
            else
                false
        if v844 then
            v20.l0 <- v814
            ()
        else
            v20.l0 <- v839
            let v845 : string = "true; $0.into_iter().for_each(|x| { //"
            let v846 : bool = Fable.Core.RustInterop.emitRustExpr v834 v845 
            let v847 : string = "x"
            let v848 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v847 
            let v849 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v848 v849 
            let v850 : string = $"true;"
            let v851 : bool = Fable.Core.RustInterop.emitRustExpr () v850 
            let v852 : string = "true; }}); { //"
            let v853 : bool = Fable.Core.RustInterop.emitRustExpr () v852 
            ()
        let _v802 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v801 v783
        let _v802 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v801 v783
        let _v802 = () 
        #endif
#else
        v801 v783
        let _v802 = () 
        #endif
        _v802 
        let v854 : (string -> unit) = v18.l0
        v854 v783
and closure48 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 3 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Warning"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_yellow"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_yellow"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_yellow"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[93m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[93m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[93m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{17uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v701 : string = "format!(\"{:#?}\", $0)"
        let v702 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v701 
        let v703 : string = "fable_library_rust::String_::fromString($0)"
        let v704 : string = Fable.Core.RustInterop.emitRustExpr v702 v703 
        let _v700 = v704 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v705 : string = "format!(\"{:#?}\", $0)"
        let v706 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v705 
        let v707 : string = "fable_library_rust::String_::fromString($0)"
        let v708 : string = Fable.Core.RustInterop.emitRustExpr v706 v707 
        let _v700 = v708 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v709 : string = "format!(\"{:#?}\", $0)"
        let v710 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v709 
        let v711 : string = "fable_library_rust::String_::fromString($0)"
        let v712 : string = Fable.Core.RustInterop.emitRustExpr v710 v711 
        let _v700 = v712 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v713 : string = $"%A{v0}"
        let _v700 = v713 
        #endif
#if FABLE_COMPILER_PYTHON
        let v716 : string = $"%A{v0}"
        let _v700 = v716 
        #endif
#else
        let v719 : string = $"%A{v0}"
        let _v700 = v719 
        #endif
        let v722 : string = _v700 
        let v727 : string = $"{v722}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure12(v638, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = " }"
        let v736 : string = $"{v735}"
        let v739 : unit = ()
        let v740 : (unit -> unit) = closure12(v638, v736)
        let v741 : unit = (fun () -> v740 (); v739) ()
        let v744 : string = v638.l0
        let v745 : string = "spiral_wasm.run / Error error"
        let v746 : string = $"{v495} {v630} #{v636} %s{v745} / {v744}"
        let v749 : char list = []
        let v750 : (char list -> (char [])) = List.toArray
        let v751 : (char []) = v750 v749
        let v754 : string = v746.TrimStart v751 
        let v772 : char list = []
        let v773 : char list = '/' :: v772 
        let v776 : char list = ' ' :: v773 
        let v779 : (char list -> (char [])) = List.toArray
        let v780 : (char []) = v779 v776
        let v783 : string = v754.TrimEnd v780 
        let v801 : (string -> unit) = closure13()
        let v802 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v803 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v803 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v804 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v804 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v805 : string = v20.l0
        let v806 : bool = v805 = ""
        let v814 : string =
            if v806 then
                v783
            else
                let v807 : bool = v783 = ""
                if v807 then
                    let v808 : string = v20.l0
                    v808
                else
                    let v809 : string = v20.l0
                    let v810 : string = "\n"
                    let v811 : string = v809 + v810 
                    let v812 : string = v811 + v783 
                    v812
        let v815 : string = "&*$0"
        let v816 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v814 v815 
        let v817 : string = $"$0.chars()"
        let v818 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v816 v817 
        let v819 : string = "v818"
        let v820 : _ = Fable.Core.RustInterop.emitRustExpr () v819 
        let v821 : string = "v820.collect::<Vec<_>>()"
        let v822 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v821 
        let v823 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v824 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v822 v823 
        let v825 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v826 : bool = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = "x"
        let v828 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v827 
        let v829 : string = "String::from_iter($0)"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr v828 v829 
        let v831 : string = "true; $0 }).collect::<Vec<_>>()"
        let v832 : bool = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let v833 : string = "_vec_map"
        let v834 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "$0.len()"
        let v836 : unativeint = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : (unativeint -> int32) = int32
        let v838 : int32 = v837 v836
        let v839 : string = ""
        let v840 : bool = v783 <> v839 
        let v844 : bool =
            if v840 then
                let v843 : bool = v838 <= 1
                v843
            else
                false
        if v844 then
            v20.l0 <- v814
            ()
        else
            v20.l0 <- v839
            let v845 : string = "true; $0.into_iter().for_each(|x| { //"
            let v846 : bool = Fable.Core.RustInterop.emitRustExpr v834 v845 
            let v847 : string = "x"
            let v848 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v847 
            let v849 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v848 v849 
            let v850 : string = $"true;"
            let v851 : bool = Fable.Core.RustInterop.emitRustExpr () v850 
            let v852 : string = "true; }}); { //"
            let v853 : bool = Fable.Core.RustInterop.emitRustExpr () v852 
            ()
        let _v802 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v801 v783
        let _v802 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v801 v783
        let _v802 = () 
        #endif
#else
        v801 v783
        let _v802 = () 
        #endif
        _v802 
        let v854 : (string -> unit) = v18.l0
        v854 v783
and closure49 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 3 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Warning"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_yellow"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_yellow"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_yellow"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[93m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[93m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[93m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{18uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v701 : string = "format!(\"{:#?}\", $0)"
        let v702 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v701 
        let v703 : string = "fable_library_rust::String_::fromString($0)"
        let v704 : string = Fable.Core.RustInterop.emitRustExpr v702 v703 
        let _v700 = v704 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v705 : string = "format!(\"{:#?}\", $0)"
        let v706 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v705 
        let v707 : string = "fable_library_rust::String_::fromString($0)"
        let v708 : string = Fable.Core.RustInterop.emitRustExpr v706 v707 
        let _v700 = v708 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v709 : string = "format!(\"{:#?}\", $0)"
        let v710 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v709 
        let v711 : string = "fable_library_rust::String_::fromString($0)"
        let v712 : string = Fable.Core.RustInterop.emitRustExpr v710 v711 
        let _v700 = v712 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v713 : string = $"%A{v0}"
        let _v700 = v713 
        #endif
#if FABLE_COMPILER_PYTHON
        let v716 : string = $"%A{v0}"
        let _v700 = v716 
        #endif
#else
        let v719 : string = $"%A{v0}"
        let _v700 = v719 
        #endif
        let v722 : string = _v700 
        let v727 : string = $"{v722}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure12(v638, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = " }"
        let v736 : string = $"{v735}"
        let v739 : unit = ()
        let v740 : (unit -> unit) = closure12(v638, v736)
        let v741 : unit = (fun () -> v740 (); v739) ()
        let v744 : string = v638.l0
        let v745 : string = "spiral_wasm.run / Error error"
        let v746 : string = $"{v495} {v630} #{v636} %s{v745} / {v744}"
        let v749 : char list = []
        let v750 : (char list -> (char [])) = List.toArray
        let v751 : (char []) = v750 v749
        let v754 : string = v746.TrimStart v751 
        let v772 : char list = []
        let v773 : char list = '/' :: v772 
        let v776 : char list = ' ' :: v773 
        let v779 : (char list -> (char [])) = List.toArray
        let v780 : (char []) = v779 v776
        let v783 : string = v754.TrimEnd v780 
        let v801 : (string -> unit) = closure13()
        let v802 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v803 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v803 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v804 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v804 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v805 : string = v20.l0
        let v806 : bool = v805 = ""
        let v814 : string =
            if v806 then
                v783
            else
                let v807 : bool = v783 = ""
                if v807 then
                    let v808 : string = v20.l0
                    v808
                else
                    let v809 : string = v20.l0
                    let v810 : string = "\n"
                    let v811 : string = v809 + v810 
                    let v812 : string = v811 + v783 
                    v812
        let v815 : string = "&*$0"
        let v816 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v814 v815 
        let v817 : string = $"$0.chars()"
        let v818 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v816 v817 
        let v819 : string = "v818"
        let v820 : _ = Fable.Core.RustInterop.emitRustExpr () v819 
        let v821 : string = "v820.collect::<Vec<_>>()"
        let v822 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v821 
        let v823 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v824 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v822 v823 
        let v825 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v826 : bool = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = "x"
        let v828 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v827 
        let v829 : string = "String::from_iter($0)"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr v828 v829 
        let v831 : string = "true; $0 }).collect::<Vec<_>>()"
        let v832 : bool = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let v833 : string = "_vec_map"
        let v834 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "$0.len()"
        let v836 : unativeint = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : (unativeint -> int32) = int32
        let v838 : int32 = v837 v836
        let v839 : string = ""
        let v840 : bool = v783 <> v839 
        let v844 : bool =
            if v840 then
                let v843 : bool = v838 <= 1
                v843
            else
                false
        if v844 then
            v20.l0 <- v814
            ()
        else
            v20.l0 <- v839
            let v845 : string = "true; $0.into_iter().for_each(|x| { //"
            let v846 : bool = Fable.Core.RustInterop.emitRustExpr v834 v845 
            let v847 : string = "x"
            let v848 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v847 
            let v849 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v848 v849 
            let v850 : string = $"true;"
            let v851 : bool = Fable.Core.RustInterop.emitRustExpr () v850 
            let v852 : string = "true; }}); { //"
            let v853 : bool = Fable.Core.RustInterop.emitRustExpr () v852 
            ()
        let _v802 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v801 v783
        let _v802 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v801 v783
        let _v802 = () 
        #endif
#else
        v801 v783
        let _v802 = () 
        #endif
        _v802 
        let v854 : (string -> unit) = v18.l0
        v854 v783
and closure50 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 3 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Warning"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_yellow"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_yellow"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_yellow"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[93m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[93m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[93m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{19uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v701 : string = "format!(\"{:#?}\", $0)"
        let v702 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v701 
        let v703 : string = "fable_library_rust::String_::fromString($0)"
        let v704 : string = Fable.Core.RustInterop.emitRustExpr v702 v703 
        let _v700 = v704 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v705 : string = "format!(\"{:#?}\", $0)"
        let v706 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v705 
        let v707 : string = "fable_library_rust::String_::fromString($0)"
        let v708 : string = Fable.Core.RustInterop.emitRustExpr v706 v707 
        let _v700 = v708 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v709 : string = "format!(\"{:#?}\", $0)"
        let v710 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v709 
        let v711 : string = "fable_library_rust::String_::fromString($0)"
        let v712 : string = Fable.Core.RustInterop.emitRustExpr v710 v711 
        let _v700 = v712 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v713 : string = $"%A{v0}"
        let _v700 = v713 
        #endif
#if FABLE_COMPILER_PYTHON
        let v716 : string = $"%A{v0}"
        let _v700 = v716 
        #endif
#else
        let v719 : string = $"%A{v0}"
        let _v700 = v719 
        #endif
        let v722 : string = _v700 
        let v727 : string = $"{v722}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure12(v638, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = " }"
        let v736 : string = $"{v735}"
        let v739 : unit = ()
        let v740 : (unit -> unit) = closure12(v638, v736)
        let v741 : unit = (fun () -> v740 (); v739) ()
        let v744 : string = v638.l0
        let v745 : string = "spiral_wasm.run / Error error"
        let v746 : string = $"{v495} {v630} #{v636} %s{v745} / {v744}"
        let v749 : char list = []
        let v750 : (char list -> (char [])) = List.toArray
        let v751 : (char []) = v750 v749
        let v754 : string = v746.TrimStart v751 
        let v772 : char list = []
        let v773 : char list = '/' :: v772 
        let v776 : char list = ' ' :: v773 
        let v779 : (char list -> (char [])) = List.toArray
        let v780 : (char []) = v779 v776
        let v783 : string = v754.TrimEnd v780 
        let v801 : (string -> unit) = closure13()
        let v802 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v803 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v803 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v804 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v804 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v805 : string = v20.l0
        let v806 : bool = v805 = ""
        let v814 : string =
            if v806 then
                v783
            else
                let v807 : bool = v783 = ""
                if v807 then
                    let v808 : string = v20.l0
                    v808
                else
                    let v809 : string = v20.l0
                    let v810 : string = "\n"
                    let v811 : string = v809 + v810 
                    let v812 : string = v811 + v783 
                    v812
        let v815 : string = "&*$0"
        let v816 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v814 v815 
        let v817 : string = $"$0.chars()"
        let v818 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v816 v817 
        let v819 : string = "v818"
        let v820 : _ = Fable.Core.RustInterop.emitRustExpr () v819 
        let v821 : string = "v820.collect::<Vec<_>>()"
        let v822 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v821 
        let v823 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v824 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v822 v823 
        let v825 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v826 : bool = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = "x"
        let v828 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v827 
        let v829 : string = "String::from_iter($0)"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr v828 v829 
        let v831 : string = "true; $0 }).collect::<Vec<_>>()"
        let v832 : bool = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let v833 : string = "_vec_map"
        let v834 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "$0.len()"
        let v836 : unativeint = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : (unativeint -> int32) = int32
        let v838 : int32 = v837 v836
        let v839 : string = ""
        let v840 : bool = v783 <> v839 
        let v844 : bool =
            if v840 then
                let v843 : bool = v838 <= 1
                v843
            else
                false
        if v844 then
            v20.l0 <- v814
            ()
        else
            v20.l0 <- v839
            let v845 : string = "true; $0.into_iter().for_each(|x| { //"
            let v846 : bool = Fable.Core.RustInterop.emitRustExpr v834 v845 
            let v847 : string = "x"
            let v848 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v847 
            let v849 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v848 v849 
            let v850 : string = $"true;"
            let v851 : bool = Fable.Core.RustInterop.emitRustExpr () v850 
            let v852 : string = "true; }}); { //"
            let v853 : bool = Fable.Core.RustInterop.emitRustExpr () v852 
            ()
        let _v802 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v801 v783
        let _v802 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v801 v783
        let _v802 = () 
        #endif
#else
        v801 v783
        let _v802 = () 
        #endif
        _v802 
        let v854 : (string -> unit) = v18.l0
        v854 v783
and closure51 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 3 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Warning"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_yellow"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_yellow"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_yellow"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[93m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[93m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[93m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{20uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v701 : string = "format!(\"{:#?}\", $0)"
        let v702 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v701 
        let v703 : string = "fable_library_rust::String_::fromString($0)"
        let v704 : string = Fable.Core.RustInterop.emitRustExpr v702 v703 
        let _v700 = v704 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v705 : string = "format!(\"{:#?}\", $0)"
        let v706 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v705 
        let v707 : string = "fable_library_rust::String_::fromString($0)"
        let v708 : string = Fable.Core.RustInterop.emitRustExpr v706 v707 
        let _v700 = v708 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v709 : string = "format!(\"{:#?}\", $0)"
        let v710 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v709 
        let v711 : string = "fable_library_rust::String_::fromString($0)"
        let v712 : string = Fable.Core.RustInterop.emitRustExpr v710 v711 
        let _v700 = v712 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v713 : string = $"%A{v0}"
        let _v700 = v713 
        #endif
#if FABLE_COMPILER_PYTHON
        let v716 : string = $"%A{v0}"
        let _v700 = v716 
        #endif
#else
        let v719 : string = $"%A{v0}"
        let _v700 = v719 
        #endif
        let v722 : string = _v700 
        let v727 : string = $"{v722}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure12(v638, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = " }"
        let v736 : string = $"{v735}"
        let v739 : unit = ()
        let v740 : (unit -> unit) = closure12(v638, v736)
        let v741 : unit = (fun () -> v740 (); v739) ()
        let v744 : string = v638.l0
        let v745 : string = "spiral_wasm.run / Error error"
        let v746 : string = $"{v495} {v630} #{v636} %s{v745} / {v744}"
        let v749 : char list = []
        let v750 : (char list -> (char [])) = List.toArray
        let v751 : (char []) = v750 v749
        let v754 : string = v746.TrimStart v751 
        let v772 : char list = []
        let v773 : char list = '/' :: v772 
        let v776 : char list = ' ' :: v773 
        let v779 : (char list -> (char [])) = List.toArray
        let v780 : (char []) = v779 v776
        let v783 : string = v754.TrimEnd v780 
        let v801 : (string -> unit) = closure13()
        let v802 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v803 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v803 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v804 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v804 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v805 : string = v20.l0
        let v806 : bool = v805 = ""
        let v814 : string =
            if v806 then
                v783
            else
                let v807 : bool = v783 = ""
                if v807 then
                    let v808 : string = v20.l0
                    v808
                else
                    let v809 : string = v20.l0
                    let v810 : string = "\n"
                    let v811 : string = v809 + v810 
                    let v812 : string = v811 + v783 
                    v812
        let v815 : string = "&*$0"
        let v816 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v814 v815 
        let v817 : string = $"$0.chars()"
        let v818 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v816 v817 
        let v819 : string = "v818"
        let v820 : _ = Fable.Core.RustInterop.emitRustExpr () v819 
        let v821 : string = "v820.collect::<Vec<_>>()"
        let v822 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v821 
        let v823 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v824 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v822 v823 
        let v825 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v826 : bool = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = "x"
        let v828 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v827 
        let v829 : string = "String::from_iter($0)"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr v828 v829 
        let v831 : string = "true; $0 }).collect::<Vec<_>>()"
        let v832 : bool = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let v833 : string = "_vec_map"
        let v834 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "$0.len()"
        let v836 : unativeint = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : (unativeint -> int32) = int32
        let v838 : int32 = v837 v836
        let v839 : string = ""
        let v840 : bool = v783 <> v839 
        let v844 : bool =
            if v840 then
                let v843 : bool = v838 <= 1
                v843
            else
                false
        if v844 then
            v20.l0 <- v814
            ()
        else
            v20.l0 <- v839
            let v845 : string = "true; $0.into_iter().for_each(|x| { //"
            let v846 : bool = Fable.Core.RustInterop.emitRustExpr v834 v845 
            let v847 : string = "x"
            let v848 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v847 
            let v849 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v848 v849 
            let v850 : string = $"true;"
            let v851 : bool = Fable.Core.RustInterop.emitRustExpr () v850 
            let v852 : string = "true; }}); { //"
            let v853 : bool = Fable.Core.RustInterop.emitRustExpr () v852 
            ()
        let _v802 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v801 v783
        let _v802 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v801 v783
        let _v802 = () 
        #endif
#else
        v801 v783
        let _v802 = () 
        #endif
        _v802 
        let v854 : (string -> unit) = v18.l0
        v854 v783
and closure52 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 3 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Warning"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_yellow"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_yellow"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_yellow"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[93m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[93m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[93m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{21uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v701 : string = "format!(\"{:#?}\", $0)"
        let v702 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v701 
        let v703 : string = "fable_library_rust::String_::fromString($0)"
        let v704 : string = Fable.Core.RustInterop.emitRustExpr v702 v703 
        let _v700 = v704 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v705 : string = "format!(\"{:#?}\", $0)"
        let v706 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v705 
        let v707 : string = "fable_library_rust::String_::fromString($0)"
        let v708 : string = Fable.Core.RustInterop.emitRustExpr v706 v707 
        let _v700 = v708 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v709 : string = "format!(\"{:#?}\", $0)"
        let v710 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v709 
        let v711 : string = "fable_library_rust::String_::fromString($0)"
        let v712 : string = Fable.Core.RustInterop.emitRustExpr v710 v711 
        let _v700 = v712 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v713 : string = $"%A{v0}"
        let _v700 = v713 
        #endif
#if FABLE_COMPILER_PYTHON
        let v716 : string = $"%A{v0}"
        let _v700 = v716 
        #endif
#else
        let v719 : string = $"%A{v0}"
        let _v700 = v719 
        #endif
        let v722 : string = _v700 
        let v727 : string = $"{v722}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure12(v638, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = " }"
        let v736 : string = $"{v735}"
        let v739 : unit = ()
        let v740 : (unit -> unit) = closure12(v638, v736)
        let v741 : unit = (fun () -> v740 (); v739) ()
        let v744 : string = v638.l0
        let v745 : string = "spiral_wasm.run / Error error"
        let v746 : string = $"{v495} {v630} #{v636} %s{v745} / {v744}"
        let v749 : char list = []
        let v750 : (char list -> (char [])) = List.toArray
        let v751 : (char []) = v750 v749
        let v754 : string = v746.TrimStart v751 
        let v772 : char list = []
        let v773 : char list = '/' :: v772 
        let v776 : char list = ' ' :: v773 
        let v779 : (char list -> (char [])) = List.toArray
        let v780 : (char []) = v779 v776
        let v783 : string = v754.TrimEnd v780 
        let v801 : (string -> unit) = closure13()
        let v802 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v803 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v803 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v804 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v804 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v805 : string = v20.l0
        let v806 : bool = v805 = ""
        let v814 : string =
            if v806 then
                v783
            else
                let v807 : bool = v783 = ""
                if v807 then
                    let v808 : string = v20.l0
                    v808
                else
                    let v809 : string = v20.l0
                    let v810 : string = "\n"
                    let v811 : string = v809 + v810 
                    let v812 : string = v811 + v783 
                    v812
        let v815 : string = "&*$0"
        let v816 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v814 v815 
        let v817 : string = $"$0.chars()"
        let v818 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v816 v817 
        let v819 : string = "v818"
        let v820 : _ = Fable.Core.RustInterop.emitRustExpr () v819 
        let v821 : string = "v820.collect::<Vec<_>>()"
        let v822 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v821 
        let v823 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v824 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v822 v823 
        let v825 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v826 : bool = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = "x"
        let v828 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v827 
        let v829 : string = "String::from_iter($0)"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr v828 v829 
        let v831 : string = "true; $0 }).collect::<Vec<_>>()"
        let v832 : bool = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let v833 : string = "_vec_map"
        let v834 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "$0.len()"
        let v836 : unativeint = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : (unativeint -> int32) = int32
        let v838 : int32 = v837 v836
        let v839 : string = ""
        let v840 : bool = v783 <> v839 
        let v844 : bool =
            if v840 then
                let v843 : bool = v838 <= 1
                v843
            else
                false
        if v844 then
            v20.l0 <- v814
            ()
        else
            v20.l0 <- v839
            let v845 : string = "true; $0.into_iter().for_each(|x| { //"
            let v846 : bool = Fable.Core.RustInterop.emitRustExpr v834 v845 
            let v847 : string = "x"
            let v848 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v847 
            let v849 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v848 v849 
            let v850 : string = $"true;"
            let v851 : bool = Fable.Core.RustInterop.emitRustExpr () v850 
            let v852 : string = "true; }}); { //"
            let v853 : bool = Fable.Core.RustInterop.emitRustExpr () v852 
            ()
        let _v802 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v801 v783
        let _v802 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v801 v783
        let _v802 = () 
        #endif
#else
        v801 v783
        let _v802 = () 
        #endif
        _v802 
        let v854 : (string -> unit) = v18.l0
        v854 v783
and closure53 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 3 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Warning"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_yellow"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_yellow"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_yellow"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[93m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[93m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[93m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{22uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v701 : string = "format!(\"{:#?}\", $0)"
        let v702 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v701 
        let v703 : string = "fable_library_rust::String_::fromString($0)"
        let v704 : string = Fable.Core.RustInterop.emitRustExpr v702 v703 
        let _v700 = v704 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v705 : string = "format!(\"{:#?}\", $0)"
        let v706 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v705 
        let v707 : string = "fable_library_rust::String_::fromString($0)"
        let v708 : string = Fable.Core.RustInterop.emitRustExpr v706 v707 
        let _v700 = v708 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v709 : string = "format!(\"{:#?}\", $0)"
        let v710 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v709 
        let v711 : string = "fable_library_rust::String_::fromString($0)"
        let v712 : string = Fable.Core.RustInterop.emitRustExpr v710 v711 
        let _v700 = v712 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v713 : string = $"%A{v0}"
        let _v700 = v713 
        #endif
#if FABLE_COMPILER_PYTHON
        let v716 : string = $"%A{v0}"
        let _v700 = v716 
        #endif
#else
        let v719 : string = $"%A{v0}"
        let _v700 = v719 
        #endif
        let v722 : string = _v700 
        let v727 : string = $"{v722}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure12(v638, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = " }"
        let v736 : string = $"{v735}"
        let v739 : unit = ()
        let v740 : (unit -> unit) = closure12(v638, v736)
        let v741 : unit = (fun () -> v740 (); v739) ()
        let v744 : string = v638.l0
        let v745 : string = "spiral_wasm.run / Error error"
        let v746 : string = $"{v495} {v630} #{v636} %s{v745} / {v744}"
        let v749 : char list = []
        let v750 : (char list -> (char [])) = List.toArray
        let v751 : (char []) = v750 v749
        let v754 : string = v746.TrimStart v751 
        let v772 : char list = []
        let v773 : char list = '/' :: v772 
        let v776 : char list = ' ' :: v773 
        let v779 : (char list -> (char [])) = List.toArray
        let v780 : (char []) = v779 v776
        let v783 : string = v754.TrimEnd v780 
        let v801 : (string -> unit) = closure13()
        let v802 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v803 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v803 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v804 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v804 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v805 : string = v20.l0
        let v806 : bool = v805 = ""
        let v814 : string =
            if v806 then
                v783
            else
                let v807 : bool = v783 = ""
                if v807 then
                    let v808 : string = v20.l0
                    v808
                else
                    let v809 : string = v20.l0
                    let v810 : string = "\n"
                    let v811 : string = v809 + v810 
                    let v812 : string = v811 + v783 
                    v812
        let v815 : string = "&*$0"
        let v816 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v814 v815 
        let v817 : string = $"$0.chars()"
        let v818 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v816 v817 
        let v819 : string = "v818"
        let v820 : _ = Fable.Core.RustInterop.emitRustExpr () v819 
        let v821 : string = "v820.collect::<Vec<_>>()"
        let v822 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v821 
        let v823 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v824 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v822 v823 
        let v825 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v826 : bool = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = "x"
        let v828 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v827 
        let v829 : string = "String::from_iter($0)"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr v828 v829 
        let v831 : string = "true; $0 }).collect::<Vec<_>>()"
        let v832 : bool = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let v833 : string = "_vec_map"
        let v834 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "$0.len()"
        let v836 : unativeint = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : (unativeint -> int32) = int32
        let v838 : int32 = v837 v836
        let v839 : string = ""
        let v840 : bool = v783 <> v839 
        let v844 : bool =
            if v840 then
                let v843 : bool = v838 <= 1
                v843
            else
                false
        if v844 then
            v20.l0 <- v814
            ()
        else
            v20.l0 <- v839
            let v845 : string = "true; $0.into_iter().for_each(|x| { //"
            let v846 : bool = Fable.Core.RustInterop.emitRustExpr v834 v845 
            let v847 : string = "x"
            let v848 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v847 
            let v849 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v848 v849 
            let v850 : string = $"true;"
            let v851 : bool = Fable.Core.RustInterop.emitRustExpr () v850 
            let v852 : string = "true; }}); { //"
            let v853 : bool = Fable.Core.RustInterop.emitRustExpr () v852 
            ()
        let _v802 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v801 v783
        let _v802 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v801 v783
        let _v802 = () 
        #endif
#else
        v801 v783
        let _v802 = () 
        #endif
        _v802 
        let v854 : (string -> unit) = v18.l0
        v854 v783
and closure54 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 3 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Warning"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_yellow"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_yellow"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_yellow"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[93m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[93m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[93m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{23uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v701 : string = "format!(\"{:#?}\", $0)"
        let v702 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v701 
        let v703 : string = "fable_library_rust::String_::fromString($0)"
        let v704 : string = Fable.Core.RustInterop.emitRustExpr v702 v703 
        let _v700 = v704 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v705 : string = "format!(\"{:#?}\", $0)"
        let v706 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v705 
        let v707 : string = "fable_library_rust::String_::fromString($0)"
        let v708 : string = Fable.Core.RustInterop.emitRustExpr v706 v707 
        let _v700 = v708 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v709 : string = "format!(\"{:#?}\", $0)"
        let v710 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v709 
        let v711 : string = "fable_library_rust::String_::fromString($0)"
        let v712 : string = Fable.Core.RustInterop.emitRustExpr v710 v711 
        let _v700 = v712 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v713 : string = $"%A{v0}"
        let _v700 = v713 
        #endif
#if FABLE_COMPILER_PYTHON
        let v716 : string = $"%A{v0}"
        let _v700 = v716 
        #endif
#else
        let v719 : string = $"%A{v0}"
        let _v700 = v719 
        #endif
        let v722 : string = _v700 
        let v727 : string = $"{v722}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure12(v638, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = " }"
        let v736 : string = $"{v735}"
        let v739 : unit = ()
        let v740 : (unit -> unit) = closure12(v638, v736)
        let v741 : unit = (fun () -> v740 (); v739) ()
        let v744 : string = v638.l0
        let v745 : string = "spiral_wasm.run / Error error"
        let v746 : string = $"{v495} {v630} #{v636} %s{v745} / {v744}"
        let v749 : char list = []
        let v750 : (char list -> (char [])) = List.toArray
        let v751 : (char []) = v750 v749
        let v754 : string = v746.TrimStart v751 
        let v772 : char list = []
        let v773 : char list = '/' :: v772 
        let v776 : char list = ' ' :: v773 
        let v779 : (char list -> (char [])) = List.toArray
        let v780 : (char []) = v779 v776
        let v783 : string = v754.TrimEnd v780 
        let v801 : (string -> unit) = closure13()
        let v802 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v803 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v803 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v804 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v804 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v805 : string = v20.l0
        let v806 : bool = v805 = ""
        let v814 : string =
            if v806 then
                v783
            else
                let v807 : bool = v783 = ""
                if v807 then
                    let v808 : string = v20.l0
                    v808
                else
                    let v809 : string = v20.l0
                    let v810 : string = "\n"
                    let v811 : string = v809 + v810 
                    let v812 : string = v811 + v783 
                    v812
        let v815 : string = "&*$0"
        let v816 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v814 v815 
        let v817 : string = $"$0.chars()"
        let v818 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v816 v817 
        let v819 : string = "v818"
        let v820 : _ = Fable.Core.RustInterop.emitRustExpr () v819 
        let v821 : string = "v820.collect::<Vec<_>>()"
        let v822 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v821 
        let v823 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v824 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v822 v823 
        let v825 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v826 : bool = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = "x"
        let v828 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v827 
        let v829 : string = "String::from_iter($0)"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr v828 v829 
        let v831 : string = "true; $0 }).collect::<Vec<_>>()"
        let v832 : bool = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let v833 : string = "_vec_map"
        let v834 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "$0.len()"
        let v836 : unativeint = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : (unativeint -> int32) = int32
        let v838 : int32 = v837 v836
        let v839 : string = ""
        let v840 : bool = v783 <> v839 
        let v844 : bool =
            if v840 then
                let v843 : bool = v838 <= 1
                v843
            else
                false
        if v844 then
            v20.l0 <- v814
            ()
        else
            v20.l0 <- v839
            let v845 : string = "true; $0.into_iter().for_each(|x| { //"
            let v846 : bool = Fable.Core.RustInterop.emitRustExpr v834 v845 
            let v847 : string = "x"
            let v848 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v847 
            let v849 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v848 v849 
            let v850 : string = $"true;"
            let v851 : bool = Fable.Core.RustInterop.emitRustExpr () v850 
            let v852 : string = "true; }}); { //"
            let v853 : bool = Fable.Core.RustInterop.emitRustExpr () v852 
            ()
        let _v802 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v801 v783
        let _v802 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v801 v783
        let _v802 = () 
        #endif
#else
        v801 v783
        let _v802 = () 
        #endif
        _v802 
        let v854 : (string -> unit) = v18.l0
        v854 v783
and closure55 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 3 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Warning"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_yellow"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_yellow"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_yellow"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[93m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[93m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[93m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{24uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v701 : string = "format!(\"{:#?}\", $0)"
        let v702 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v701 
        let v703 : string = "fable_library_rust::String_::fromString($0)"
        let v704 : string = Fable.Core.RustInterop.emitRustExpr v702 v703 
        let _v700 = v704 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v705 : string = "format!(\"{:#?}\", $0)"
        let v706 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v705 
        let v707 : string = "fable_library_rust::String_::fromString($0)"
        let v708 : string = Fable.Core.RustInterop.emitRustExpr v706 v707 
        let _v700 = v708 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v709 : string = "format!(\"{:#?}\", $0)"
        let v710 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v709 
        let v711 : string = "fable_library_rust::String_::fromString($0)"
        let v712 : string = Fable.Core.RustInterop.emitRustExpr v710 v711 
        let _v700 = v712 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v713 : string = $"%A{v0}"
        let _v700 = v713 
        #endif
#if FABLE_COMPILER_PYTHON
        let v716 : string = $"%A{v0}"
        let _v700 = v716 
        #endif
#else
        let v719 : string = $"%A{v0}"
        let _v700 = v719 
        #endif
        let v722 : string = _v700 
        let v727 : string = $"{v722}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure12(v638, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = " }"
        let v736 : string = $"{v735}"
        let v739 : unit = ()
        let v740 : (unit -> unit) = closure12(v638, v736)
        let v741 : unit = (fun () -> v740 (); v739) ()
        let v744 : string = v638.l0
        let v745 : string = "spiral_wasm.run / Error error"
        let v746 : string = $"{v495} {v630} #{v636} %s{v745} / {v744}"
        let v749 : char list = []
        let v750 : (char list -> (char [])) = List.toArray
        let v751 : (char []) = v750 v749
        let v754 : string = v746.TrimStart v751 
        let v772 : char list = []
        let v773 : char list = '/' :: v772 
        let v776 : char list = ' ' :: v773 
        let v779 : (char list -> (char [])) = List.toArray
        let v780 : (char []) = v779 v776
        let v783 : string = v754.TrimEnd v780 
        let v801 : (string -> unit) = closure13()
        let v802 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v803 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v803 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v804 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v804 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v805 : string = v20.l0
        let v806 : bool = v805 = ""
        let v814 : string =
            if v806 then
                v783
            else
                let v807 : bool = v783 = ""
                if v807 then
                    let v808 : string = v20.l0
                    v808
                else
                    let v809 : string = v20.l0
                    let v810 : string = "\n"
                    let v811 : string = v809 + v810 
                    let v812 : string = v811 + v783 
                    v812
        let v815 : string = "&*$0"
        let v816 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v814 v815 
        let v817 : string = $"$0.chars()"
        let v818 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v816 v817 
        let v819 : string = "v818"
        let v820 : _ = Fable.Core.RustInterop.emitRustExpr () v819 
        let v821 : string = "v820.collect::<Vec<_>>()"
        let v822 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v821 
        let v823 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v824 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v822 v823 
        let v825 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v826 : bool = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = "x"
        let v828 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v827 
        let v829 : string = "String::from_iter($0)"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr v828 v829 
        let v831 : string = "true; $0 }).collect::<Vec<_>>()"
        let v832 : bool = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let v833 : string = "_vec_map"
        let v834 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "$0.len()"
        let v836 : unativeint = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : (unativeint -> int32) = int32
        let v838 : int32 = v837 v836
        let v839 : string = ""
        let v840 : bool = v783 <> v839 
        let v844 : bool =
            if v840 then
                let v843 : bool = v838 <= 1
                v843
            else
                false
        if v844 then
            v20.l0 <- v814
            ()
        else
            v20.l0 <- v839
            let v845 : string = "true; $0.into_iter().for_each(|x| { //"
            let v846 : bool = Fable.Core.RustInterop.emitRustExpr v834 v845 
            let v847 : string = "x"
            let v848 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v847 
            let v849 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v848 v849 
            let v850 : string = $"true;"
            let v851 : bool = Fable.Core.RustInterop.emitRustExpr () v850 
            let v852 : string = "true; }}); { //"
            let v853 : bool = Fable.Core.RustInterop.emitRustExpr () v852 
            ()
        let _v802 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v801 v783
        let _v802 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v801 v783
        let _v802 = () 
        #endif
#else
        v801 v783
        let _v802 = () 
        #endif
        _v802 
        let v854 : (string -> unit) = v18.l0
        v854 v783
and closure56 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 3 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Warning"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_yellow"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_yellow"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_yellow"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[93m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[93m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[93m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{25uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v701 : string = "format!(\"{:#?}\", $0)"
        let v702 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v701 
        let v703 : string = "fable_library_rust::String_::fromString($0)"
        let v704 : string = Fable.Core.RustInterop.emitRustExpr v702 v703 
        let _v700 = v704 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v705 : string = "format!(\"{:#?}\", $0)"
        let v706 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v705 
        let v707 : string = "fable_library_rust::String_::fromString($0)"
        let v708 : string = Fable.Core.RustInterop.emitRustExpr v706 v707 
        let _v700 = v708 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v709 : string = "format!(\"{:#?}\", $0)"
        let v710 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v709 
        let v711 : string = "fable_library_rust::String_::fromString($0)"
        let v712 : string = Fable.Core.RustInterop.emitRustExpr v710 v711 
        let _v700 = v712 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v713 : string = $"%A{v0}"
        let _v700 = v713 
        #endif
#if FABLE_COMPILER_PYTHON
        let v716 : string = $"%A{v0}"
        let _v700 = v716 
        #endif
#else
        let v719 : string = $"%A{v0}"
        let _v700 = v719 
        #endif
        let v722 : string = _v700 
        let v727 : string = $"{v722}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure12(v638, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = " }"
        let v736 : string = $"{v735}"
        let v739 : unit = ()
        let v740 : (unit -> unit) = closure12(v638, v736)
        let v741 : unit = (fun () -> v740 (); v739) ()
        let v744 : string = v638.l0
        let v745 : string = "spiral_wasm.run / Error error"
        let v746 : string = $"{v495} {v630} #{v636} %s{v745} / {v744}"
        let v749 : char list = []
        let v750 : (char list -> (char [])) = List.toArray
        let v751 : (char []) = v750 v749
        let v754 : string = v746.TrimStart v751 
        let v772 : char list = []
        let v773 : char list = '/' :: v772 
        let v776 : char list = ' ' :: v773 
        let v779 : (char list -> (char [])) = List.toArray
        let v780 : (char []) = v779 v776
        let v783 : string = v754.TrimEnd v780 
        let v801 : (string -> unit) = closure13()
        let v802 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v803 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v803 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v804 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v804 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v805 : string = v20.l0
        let v806 : bool = v805 = ""
        let v814 : string =
            if v806 then
                v783
            else
                let v807 : bool = v783 = ""
                if v807 then
                    let v808 : string = v20.l0
                    v808
                else
                    let v809 : string = v20.l0
                    let v810 : string = "\n"
                    let v811 : string = v809 + v810 
                    let v812 : string = v811 + v783 
                    v812
        let v815 : string = "&*$0"
        let v816 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v814 v815 
        let v817 : string = $"$0.chars()"
        let v818 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v816 v817 
        let v819 : string = "v818"
        let v820 : _ = Fable.Core.RustInterop.emitRustExpr () v819 
        let v821 : string = "v820.collect::<Vec<_>>()"
        let v822 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v821 
        let v823 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v824 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v822 v823 
        let v825 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v826 : bool = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = "x"
        let v828 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v827 
        let v829 : string = "String::from_iter($0)"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr v828 v829 
        let v831 : string = "true; $0 }).collect::<Vec<_>>()"
        let v832 : bool = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let v833 : string = "_vec_map"
        let v834 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "$0.len()"
        let v836 : unativeint = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : (unativeint -> int32) = int32
        let v838 : int32 = v837 v836
        let v839 : string = ""
        let v840 : bool = v783 <> v839 
        let v844 : bool =
            if v840 then
                let v843 : bool = v838 <= 1
                v843
            else
                false
        if v844 then
            v20.l0 <- v814
            ()
        else
            v20.l0 <- v839
            let v845 : string = "true; $0.into_iter().for_each(|x| { //"
            let v846 : bool = Fable.Core.RustInterop.emitRustExpr v834 v845 
            let v847 : string = "x"
            let v848 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v847 
            let v849 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v848 v849 
            let v850 : string = $"true;"
            let v851 : bool = Fable.Core.RustInterop.emitRustExpr () v850 
            let v852 : string = "true; }}); { //"
            let v853 : bool = Fable.Core.RustInterop.emitRustExpr () v852 
            ()
        let _v802 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v801 v783
        let _v802 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v801 v783
        let _v802 = () 
        #endif
#else
        v801 v783
        let _v802 = () 
        #endif
        _v802 
        let v854 : (string -> unit) = v18.l0
        v854 v783
and closure57 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 3 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Warning"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_yellow"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_yellow"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_yellow"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[93m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[93m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[93m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{26uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v701 : string = "format!(\"{:#?}\", $0)"
        let v702 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v701 
        let v703 : string = "fable_library_rust::String_::fromString($0)"
        let v704 : string = Fable.Core.RustInterop.emitRustExpr v702 v703 
        let _v700 = v704 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v705 : string = "format!(\"{:#?}\", $0)"
        let v706 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v705 
        let v707 : string = "fable_library_rust::String_::fromString($0)"
        let v708 : string = Fable.Core.RustInterop.emitRustExpr v706 v707 
        let _v700 = v708 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v709 : string = "format!(\"{:#?}\", $0)"
        let v710 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v709 
        let v711 : string = "fable_library_rust::String_::fromString($0)"
        let v712 : string = Fable.Core.RustInterop.emitRustExpr v710 v711 
        let _v700 = v712 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v713 : string = $"%A{v0}"
        let _v700 = v713 
        #endif
#if FABLE_COMPILER_PYTHON
        let v716 : string = $"%A{v0}"
        let _v700 = v716 
        #endif
#else
        let v719 : string = $"%A{v0}"
        let _v700 = v719 
        #endif
        let v722 : string = _v700 
        let v727 : string = $"{v722}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure12(v638, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = " }"
        let v736 : string = $"{v735}"
        let v739 : unit = ()
        let v740 : (unit -> unit) = closure12(v638, v736)
        let v741 : unit = (fun () -> v740 (); v739) ()
        let v744 : string = v638.l0
        let v745 : string = "spiral_wasm.run / Error error"
        let v746 : string = $"{v495} {v630} #{v636} %s{v745} / {v744}"
        let v749 : char list = []
        let v750 : (char list -> (char [])) = List.toArray
        let v751 : (char []) = v750 v749
        let v754 : string = v746.TrimStart v751 
        let v772 : char list = []
        let v773 : char list = '/' :: v772 
        let v776 : char list = ' ' :: v773 
        let v779 : (char list -> (char [])) = List.toArray
        let v780 : (char []) = v779 v776
        let v783 : string = v754.TrimEnd v780 
        let v801 : (string -> unit) = closure13()
        let v802 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v803 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v803 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v804 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v804 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v805 : string = v20.l0
        let v806 : bool = v805 = ""
        let v814 : string =
            if v806 then
                v783
            else
                let v807 : bool = v783 = ""
                if v807 then
                    let v808 : string = v20.l0
                    v808
                else
                    let v809 : string = v20.l0
                    let v810 : string = "\n"
                    let v811 : string = v809 + v810 
                    let v812 : string = v811 + v783 
                    v812
        let v815 : string = "&*$0"
        let v816 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v814 v815 
        let v817 : string = $"$0.chars()"
        let v818 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v816 v817 
        let v819 : string = "v818"
        let v820 : _ = Fable.Core.RustInterop.emitRustExpr () v819 
        let v821 : string = "v820.collect::<Vec<_>>()"
        let v822 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v821 
        let v823 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v824 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v822 v823 
        let v825 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v826 : bool = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = "x"
        let v828 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v827 
        let v829 : string = "String::from_iter($0)"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr v828 v829 
        let v831 : string = "true; $0 }).collect::<Vec<_>>()"
        let v832 : bool = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let v833 : string = "_vec_map"
        let v834 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "$0.len()"
        let v836 : unativeint = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : (unativeint -> int32) = int32
        let v838 : int32 = v837 v836
        let v839 : string = ""
        let v840 : bool = v783 <> v839 
        let v844 : bool =
            if v840 then
                let v843 : bool = v838 <= 1
                v843
            else
                false
        if v844 then
            v20.l0 <- v814
            ()
        else
            v20.l0 <- v839
            let v845 : string = "true; $0.into_iter().for_each(|x| { //"
            let v846 : bool = Fable.Core.RustInterop.emitRustExpr v834 v845 
            let v847 : string = "x"
            let v848 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v847 
            let v849 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v848 v849 
            let v850 : string = $"true;"
            let v851 : bool = Fable.Core.RustInterop.emitRustExpr () v850 
            let v852 : string = "true; }}); { //"
            let v853 : bool = Fable.Core.RustInterop.emitRustExpr () v852 
            ()
        let _v802 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v801 v783
        let _v802 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v801 v783
        let _v802 = () 
        #endif
#else
        v801 v783
        let _v802 = () 
        #endif
        _v802 
        let v854 : (string -> unit) = v18.l0
        v854 v783
and closure58 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 3 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Warning"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_yellow"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_yellow"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_yellow"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[93m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[93m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[93m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{27uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v701 : string = "format!(\"{:#?}\", $0)"
        let v702 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v701 
        let v703 : string = "fable_library_rust::String_::fromString($0)"
        let v704 : string = Fable.Core.RustInterop.emitRustExpr v702 v703 
        let _v700 = v704 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v705 : string = "format!(\"{:#?}\", $0)"
        let v706 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v705 
        let v707 : string = "fable_library_rust::String_::fromString($0)"
        let v708 : string = Fable.Core.RustInterop.emitRustExpr v706 v707 
        let _v700 = v708 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v709 : string = "format!(\"{:#?}\", $0)"
        let v710 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v709 
        let v711 : string = "fable_library_rust::String_::fromString($0)"
        let v712 : string = Fable.Core.RustInterop.emitRustExpr v710 v711 
        let _v700 = v712 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v713 : string = $"%A{v0}"
        let _v700 = v713 
        #endif
#if FABLE_COMPILER_PYTHON
        let v716 : string = $"%A{v0}"
        let _v700 = v716 
        #endif
#else
        let v719 : string = $"%A{v0}"
        let _v700 = v719 
        #endif
        let v722 : string = _v700 
        let v727 : string = $"{v722}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure12(v638, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = " }"
        let v736 : string = $"{v735}"
        let v739 : unit = ()
        let v740 : (unit -> unit) = closure12(v638, v736)
        let v741 : unit = (fun () -> v740 (); v739) ()
        let v744 : string = v638.l0
        let v745 : string = "spiral_wasm.run / Error error"
        let v746 : string = $"{v495} {v630} #{v636} %s{v745} / {v744}"
        let v749 : char list = []
        let v750 : (char list -> (char [])) = List.toArray
        let v751 : (char []) = v750 v749
        let v754 : string = v746.TrimStart v751 
        let v772 : char list = []
        let v773 : char list = '/' :: v772 
        let v776 : char list = ' ' :: v773 
        let v779 : (char list -> (char [])) = List.toArray
        let v780 : (char []) = v779 v776
        let v783 : string = v754.TrimEnd v780 
        let v801 : (string -> unit) = closure13()
        let v802 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v803 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v803 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v804 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v804 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v805 : string = v20.l0
        let v806 : bool = v805 = ""
        let v814 : string =
            if v806 then
                v783
            else
                let v807 : bool = v783 = ""
                if v807 then
                    let v808 : string = v20.l0
                    v808
                else
                    let v809 : string = v20.l0
                    let v810 : string = "\n"
                    let v811 : string = v809 + v810 
                    let v812 : string = v811 + v783 
                    v812
        let v815 : string = "&*$0"
        let v816 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v814 v815 
        let v817 : string = $"$0.chars()"
        let v818 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v816 v817 
        let v819 : string = "v818"
        let v820 : _ = Fable.Core.RustInterop.emitRustExpr () v819 
        let v821 : string = "v820.collect::<Vec<_>>()"
        let v822 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v821 
        let v823 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v824 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v822 v823 
        let v825 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v826 : bool = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = "x"
        let v828 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v827 
        let v829 : string = "String::from_iter($0)"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr v828 v829 
        let v831 : string = "true; $0 }).collect::<Vec<_>>()"
        let v832 : bool = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let v833 : string = "_vec_map"
        let v834 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "$0.len()"
        let v836 : unativeint = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : (unativeint -> int32) = int32
        let v838 : int32 = v837 v836
        let v839 : string = ""
        let v840 : bool = v783 <> v839 
        let v844 : bool =
            if v840 then
                let v843 : bool = v838 <= 1
                v843
            else
                false
        if v844 then
            v20.l0 <- v814
            ()
        else
            v20.l0 <- v839
            let v845 : string = "true; $0.into_iter().for_each(|x| { //"
            let v846 : bool = Fable.Core.RustInterop.emitRustExpr v834 v845 
            let v847 : string = "x"
            let v848 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v847 
            let v849 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v848 v849 
            let v850 : string = $"true;"
            let v851 : bool = Fable.Core.RustInterop.emitRustExpr () v850 
            let v852 : string = "true; }}); { //"
            let v853 : bool = Fable.Core.RustInterop.emitRustExpr () v852 
            ()
        let _v802 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v801 v783
        let _v802 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v801 v783
        let _v802 = () 
        #endif
#else
        v801 v783
        let _v802 = () 
        #endif
        _v802 
        let v854 : (string -> unit) = v18.l0
        v854 v783
and closure59 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 3 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Warning"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_yellow"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_yellow"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_yellow"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[93m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[93m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[93m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{28uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v701 : string = "format!(\"{:#?}\", $0)"
        let v702 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v701 
        let v703 : string = "fable_library_rust::String_::fromString($0)"
        let v704 : string = Fable.Core.RustInterop.emitRustExpr v702 v703 
        let _v700 = v704 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v705 : string = "format!(\"{:#?}\", $0)"
        let v706 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v705 
        let v707 : string = "fable_library_rust::String_::fromString($0)"
        let v708 : string = Fable.Core.RustInterop.emitRustExpr v706 v707 
        let _v700 = v708 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v709 : string = "format!(\"{:#?}\", $0)"
        let v710 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v709 
        let v711 : string = "fable_library_rust::String_::fromString($0)"
        let v712 : string = Fable.Core.RustInterop.emitRustExpr v710 v711 
        let _v700 = v712 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v713 : string = $"%A{v0}"
        let _v700 = v713 
        #endif
#if FABLE_COMPILER_PYTHON
        let v716 : string = $"%A{v0}"
        let _v700 = v716 
        #endif
#else
        let v719 : string = $"%A{v0}"
        let _v700 = v719 
        #endif
        let v722 : string = _v700 
        let v727 : string = $"{v722}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure12(v638, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = " }"
        let v736 : string = $"{v735}"
        let v739 : unit = ()
        let v740 : (unit -> unit) = closure12(v638, v736)
        let v741 : unit = (fun () -> v740 (); v739) ()
        let v744 : string = v638.l0
        let v745 : string = "spiral_wasm.run / Error error"
        let v746 : string = $"{v495} {v630} #{v636} %s{v745} / {v744}"
        let v749 : char list = []
        let v750 : (char list -> (char [])) = List.toArray
        let v751 : (char []) = v750 v749
        let v754 : string = v746.TrimStart v751 
        let v772 : char list = []
        let v773 : char list = '/' :: v772 
        let v776 : char list = ' ' :: v773 
        let v779 : (char list -> (char [])) = List.toArray
        let v780 : (char []) = v779 v776
        let v783 : string = v754.TrimEnd v780 
        let v801 : (string -> unit) = closure13()
        let v802 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v803 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v803 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v804 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v804 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v805 : string = v20.l0
        let v806 : bool = v805 = ""
        let v814 : string =
            if v806 then
                v783
            else
                let v807 : bool = v783 = ""
                if v807 then
                    let v808 : string = v20.l0
                    v808
                else
                    let v809 : string = v20.l0
                    let v810 : string = "\n"
                    let v811 : string = v809 + v810 
                    let v812 : string = v811 + v783 
                    v812
        let v815 : string = "&*$0"
        let v816 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v814 v815 
        let v817 : string = $"$0.chars()"
        let v818 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v816 v817 
        let v819 : string = "v818"
        let v820 : _ = Fable.Core.RustInterop.emitRustExpr () v819 
        let v821 : string = "v820.collect::<Vec<_>>()"
        let v822 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v821 
        let v823 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v824 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v822 v823 
        let v825 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v826 : bool = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = "x"
        let v828 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v827 
        let v829 : string = "String::from_iter($0)"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr v828 v829 
        let v831 : string = "true; $0 }).collect::<Vec<_>>()"
        let v832 : bool = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let v833 : string = "_vec_map"
        let v834 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "$0.len()"
        let v836 : unativeint = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : (unativeint -> int32) = int32
        let v838 : int32 = v837 v836
        let v839 : string = ""
        let v840 : bool = v783 <> v839 
        let v844 : bool =
            if v840 then
                let v843 : bool = v838 <= 1
                v843
            else
                false
        if v844 then
            v20.l0 <- v814
            ()
        else
            v20.l0 <- v839
            let v845 : string = "true; $0.into_iter().for_each(|x| { //"
            let v846 : bool = Fable.Core.RustInterop.emitRustExpr v834 v845 
            let v847 : string = "x"
            let v848 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v847 
            let v849 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v848 v849 
            let v850 : string = $"true;"
            let v851 : bool = Fable.Core.RustInterop.emitRustExpr () v850 
            let v852 : string = "true; }}); { //"
            let v853 : bool = Fable.Core.RustInterop.emitRustExpr () v852 
            ()
        let _v802 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v801 v783
        let _v802 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v801 v783
        let _v802 = () 
        #endif
#else
        v801 v783
        let _v802 = () 
        #endif
        _v802 
        let v854 : (string -> unit) = v18.l0
        v854 v783
and closure60 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 3 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Warning"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_yellow"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_yellow"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_yellow"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[93m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[93m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[93m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{29uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v701 : string = "format!(\"{:#?}\", $0)"
        let v702 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v701 
        let v703 : string = "fable_library_rust::String_::fromString($0)"
        let v704 : string = Fable.Core.RustInterop.emitRustExpr v702 v703 
        let _v700 = v704 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v705 : string = "format!(\"{:#?}\", $0)"
        let v706 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v705 
        let v707 : string = "fable_library_rust::String_::fromString($0)"
        let v708 : string = Fable.Core.RustInterop.emitRustExpr v706 v707 
        let _v700 = v708 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v709 : string = "format!(\"{:#?}\", $0)"
        let v710 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v709 
        let v711 : string = "fable_library_rust::String_::fromString($0)"
        let v712 : string = Fable.Core.RustInterop.emitRustExpr v710 v711 
        let _v700 = v712 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v713 : string = $"%A{v0}"
        let _v700 = v713 
        #endif
#if FABLE_COMPILER_PYTHON
        let v716 : string = $"%A{v0}"
        let _v700 = v716 
        #endif
#else
        let v719 : string = $"%A{v0}"
        let _v700 = v719 
        #endif
        let v722 : string = _v700 
        let v727 : string = $"{v722}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure12(v638, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = " }"
        let v736 : string = $"{v735}"
        let v739 : unit = ()
        let v740 : (unit -> unit) = closure12(v638, v736)
        let v741 : unit = (fun () -> v740 (); v739) ()
        let v744 : string = v638.l0
        let v745 : string = "spiral_wasm.run / Error error"
        let v746 : string = $"{v495} {v630} #{v636} %s{v745} / {v744}"
        let v749 : char list = []
        let v750 : (char list -> (char [])) = List.toArray
        let v751 : (char []) = v750 v749
        let v754 : string = v746.TrimStart v751 
        let v772 : char list = []
        let v773 : char list = '/' :: v772 
        let v776 : char list = ' ' :: v773 
        let v779 : (char list -> (char [])) = List.toArray
        let v780 : (char []) = v779 v776
        let v783 : string = v754.TrimEnd v780 
        let v801 : (string -> unit) = closure13()
        let v802 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v803 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v803 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v804 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v783 v804 
        let _v802 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v805 : string = v20.l0
        let v806 : bool = v805 = ""
        let v814 : string =
            if v806 then
                v783
            else
                let v807 : bool = v783 = ""
                if v807 then
                    let v808 : string = v20.l0
                    v808
                else
                    let v809 : string = v20.l0
                    let v810 : string = "\n"
                    let v811 : string = v809 + v810 
                    let v812 : string = v811 + v783 
                    v812
        let v815 : string = "&*$0"
        let v816 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v814 v815 
        let v817 : string = $"$0.chars()"
        let v818 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v816 v817 
        let v819 : string = "v818"
        let v820 : _ = Fable.Core.RustInterop.emitRustExpr () v819 
        let v821 : string = "v820.collect::<Vec<_>>()"
        let v822 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v821 
        let v823 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v824 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v822 v823 
        let v825 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v826 : bool = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = "x"
        let v828 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v827 
        let v829 : string = "String::from_iter($0)"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr v828 v829 
        let v831 : string = "true; $0 }).collect::<Vec<_>>()"
        let v832 : bool = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let v833 : string = "_vec_map"
        let v834 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "$0.len()"
        let v836 : unativeint = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : (unativeint -> int32) = int32
        let v838 : int32 = v837 v836
        let v839 : string = ""
        let v840 : bool = v783 <> v839 
        let v844 : bool =
            if v840 then
                let v843 : bool = v838 <= 1
                v843
            else
                false
        if v844 then
            v20.l0 <- v814
            ()
        else
            v20.l0 <- v839
            let v845 : string = "true; $0.into_iter().for_each(|x| { //"
            let v846 : bool = Fable.Core.RustInterop.emitRustExpr v834 v845 
            let v847 : string = "x"
            let v848 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v847 
            let v849 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v848 v849 
            let v850 : string = $"true;"
            let v851 : bool = Fable.Core.RustInterop.emitRustExpr () v850 
            let v852 : string = "true; }}); { //"
            let v853 : bool = Fable.Core.RustInterop.emitRustExpr () v852 
            ()
        let _v802 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v801 v783
        let _v802 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v801 v783
        let _v802 = () 
        #endif
#else
        v801 v783
        let _v802 = () 
        #endif
        _v802 
        let v854 : (string -> unit) = v18.l0
        v854 v783
and method19 () : uint8 =
    30uy
and method20 (v0 : uint8) : US7 =
    US7_1(v0)
and method21 () : uint8 =
    29uy
and method22 (v0 : uint8) : US7 =
    US7_0(v0)
and closure61 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 4 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Critical"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_red"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_red"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_red"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[91m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[91m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[91m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{29uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : string = $"{v0}"
        let v703 : unit = ()
        let v704 : (unit -> unit) = closure12(v638, v700)
        let v705 : unit = (fun () -> v704 (); v703) ()
        let v708 : string = " }"
        let v709 : string = $"{v708}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure12(v638, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = v638.l0
        let v718 : string = "spiral_wasm.run / Ok (Some error)"
        let v719 : string = $"{v495} {v630} #{v636} %s{v718} / {v717}"
        let v722 : char list = []
        let v723 : (char list -> (char [])) = List.toArray
        let v724 : (char []) = v723 v722
        let v727 : string = v719.TrimStart v724 
        let v745 : char list = []
        let v746 : char list = '/' :: v745 
        let v749 : char list = ' ' :: v746 
        let v752 : (char list -> (char [])) = List.toArray
        let v753 : (char []) = v752 v749
        let v756 : string = v727.TrimEnd v753 
        let v774 : (string -> unit) = closure13()
        let v775 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v776 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v776 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v777 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v777 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v778 : string = v20.l0
        let v779 : bool = v778 = ""
        let v787 : string =
            if v779 then
                v756
            else
                let v780 : bool = v756 = ""
                if v780 then
                    let v781 : string = v20.l0
                    v781
                else
                    let v782 : string = v20.l0
                    let v783 : string = "\n"
                    let v784 : string = v782 + v783 
                    let v785 : string = v784 + v756 
                    v785
        let v788 : string = "&*$0"
        let v789 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v787 v788 
        let v790 : string = $"$0.chars()"
        let v791 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v789 v790 
        let v792 : string = "v791"
        let v793 : _ = Fable.Core.RustInterop.emitRustExpr () v792 
        let v794 : string = "v793.collect::<Vec<_>>()"
        let v795 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v794 
        let v796 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v797 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v795 v796 
        let v798 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v799 : bool = Fable.Core.RustInterop.emitRustExpr v797 v798 
        let v800 : string = "x"
        let v801 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v800 
        let v802 : string = "String::from_iter($0)"
        let v803 : std_string_String = Fable.Core.RustInterop.emitRustExpr v801 v802 
        let v804 : string = "true; $0 }).collect::<Vec<_>>()"
        let v805 : bool = Fable.Core.RustInterop.emitRustExpr v803 v804 
        let v806 : string = "_vec_map"
        let v807 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v806 
        let v808 : string = "$0.len()"
        let v809 : unativeint = Fable.Core.RustInterop.emitRustExpr v807 v808 
        let v810 : (unativeint -> int32) = int32
        let v811 : int32 = v810 v809
        let v812 : string = ""
        let v813 : bool = v756 <> v812 
        let v817 : bool =
            if v813 then
                let v816 : bool = v811 <= 1
                v816
            else
                false
        if v817 then
            v20.l0 <- v787
            ()
        else
            v20.l0 <- v812
            let v818 : string = "true; $0.into_iter().for_each(|x| { //"
            let v819 : bool = Fable.Core.RustInterop.emitRustExpr v807 v818 
            let v820 : string = "x"
            let v821 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v820 
            let v822 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v821 v822 
            let v823 : string = $"true;"
            let v824 : bool = Fable.Core.RustInterop.emitRustExpr () v823 
            let v825 : string = "true; }}); { //"
            let v826 : bool = Fable.Core.RustInterop.emitRustExpr () v825 
            ()
        let _v775 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v774 v756
        let _v775 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v774 v756
        let _v775 = () 
        #endif
#else
        v774 v756
        let _v775 = () 
        #endif
        _v775 
        let v827 : (string -> unit) = v18.l0
        v827 v756
and method23 () : uint8 =
    28uy
and closure62 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 4 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Critical"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_red"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_red"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_red"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[91m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[91m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[91m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{28uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : string = $"{v0}"
        let v703 : unit = ()
        let v704 : (unit -> unit) = closure12(v638, v700)
        let v705 : unit = (fun () -> v704 (); v703) ()
        let v708 : string = " }"
        let v709 : string = $"{v708}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure12(v638, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = v638.l0
        let v718 : string = "spiral_wasm.run / Ok (Some error)"
        let v719 : string = $"{v495} {v630} #{v636} %s{v718} / {v717}"
        let v722 : char list = []
        let v723 : (char list -> (char [])) = List.toArray
        let v724 : (char []) = v723 v722
        let v727 : string = v719.TrimStart v724 
        let v745 : char list = []
        let v746 : char list = '/' :: v745 
        let v749 : char list = ' ' :: v746 
        let v752 : (char list -> (char [])) = List.toArray
        let v753 : (char []) = v752 v749
        let v756 : string = v727.TrimEnd v753 
        let v774 : (string -> unit) = closure13()
        let v775 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v776 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v776 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v777 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v777 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v778 : string = v20.l0
        let v779 : bool = v778 = ""
        let v787 : string =
            if v779 then
                v756
            else
                let v780 : bool = v756 = ""
                if v780 then
                    let v781 : string = v20.l0
                    v781
                else
                    let v782 : string = v20.l0
                    let v783 : string = "\n"
                    let v784 : string = v782 + v783 
                    let v785 : string = v784 + v756 
                    v785
        let v788 : string = "&*$0"
        let v789 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v787 v788 
        let v790 : string = $"$0.chars()"
        let v791 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v789 v790 
        let v792 : string = "v791"
        let v793 : _ = Fable.Core.RustInterop.emitRustExpr () v792 
        let v794 : string = "v793.collect::<Vec<_>>()"
        let v795 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v794 
        let v796 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v797 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v795 v796 
        let v798 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v799 : bool = Fable.Core.RustInterop.emitRustExpr v797 v798 
        let v800 : string = "x"
        let v801 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v800 
        let v802 : string = "String::from_iter($0)"
        let v803 : std_string_String = Fable.Core.RustInterop.emitRustExpr v801 v802 
        let v804 : string = "true; $0 }).collect::<Vec<_>>()"
        let v805 : bool = Fable.Core.RustInterop.emitRustExpr v803 v804 
        let v806 : string = "_vec_map"
        let v807 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v806 
        let v808 : string = "$0.len()"
        let v809 : unativeint = Fable.Core.RustInterop.emitRustExpr v807 v808 
        let v810 : (unativeint -> int32) = int32
        let v811 : int32 = v810 v809
        let v812 : string = ""
        let v813 : bool = v756 <> v812 
        let v817 : bool =
            if v813 then
                let v816 : bool = v811 <= 1
                v816
            else
                false
        if v817 then
            v20.l0 <- v787
            ()
        else
            v20.l0 <- v812
            let v818 : string = "true; $0.into_iter().for_each(|x| { //"
            let v819 : bool = Fable.Core.RustInterop.emitRustExpr v807 v818 
            let v820 : string = "x"
            let v821 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v820 
            let v822 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v821 v822 
            let v823 : string = $"true;"
            let v824 : bool = Fable.Core.RustInterop.emitRustExpr () v823 
            let v825 : string = "true; }}); { //"
            let v826 : bool = Fable.Core.RustInterop.emitRustExpr () v825 
            ()
        let _v775 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v774 v756
        let _v775 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v774 v756
        let _v775 = () 
        #endif
#else
        v774 v756
        let _v775 = () 
        #endif
        _v775 
        let v827 : (string -> unit) = v18.l0
        v827 v756
and method24 () : uint8 =
    27uy
and closure63 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 4 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Critical"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_red"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_red"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_red"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[91m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[91m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[91m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{27uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : string = $"{v0}"
        let v703 : unit = ()
        let v704 : (unit -> unit) = closure12(v638, v700)
        let v705 : unit = (fun () -> v704 (); v703) ()
        let v708 : string = " }"
        let v709 : string = $"{v708}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure12(v638, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = v638.l0
        let v718 : string = "spiral_wasm.run / Ok (Some error)"
        let v719 : string = $"{v495} {v630} #{v636} %s{v718} / {v717}"
        let v722 : char list = []
        let v723 : (char list -> (char [])) = List.toArray
        let v724 : (char []) = v723 v722
        let v727 : string = v719.TrimStart v724 
        let v745 : char list = []
        let v746 : char list = '/' :: v745 
        let v749 : char list = ' ' :: v746 
        let v752 : (char list -> (char [])) = List.toArray
        let v753 : (char []) = v752 v749
        let v756 : string = v727.TrimEnd v753 
        let v774 : (string -> unit) = closure13()
        let v775 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v776 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v776 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v777 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v777 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v778 : string = v20.l0
        let v779 : bool = v778 = ""
        let v787 : string =
            if v779 then
                v756
            else
                let v780 : bool = v756 = ""
                if v780 then
                    let v781 : string = v20.l0
                    v781
                else
                    let v782 : string = v20.l0
                    let v783 : string = "\n"
                    let v784 : string = v782 + v783 
                    let v785 : string = v784 + v756 
                    v785
        let v788 : string = "&*$0"
        let v789 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v787 v788 
        let v790 : string = $"$0.chars()"
        let v791 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v789 v790 
        let v792 : string = "v791"
        let v793 : _ = Fable.Core.RustInterop.emitRustExpr () v792 
        let v794 : string = "v793.collect::<Vec<_>>()"
        let v795 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v794 
        let v796 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v797 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v795 v796 
        let v798 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v799 : bool = Fable.Core.RustInterop.emitRustExpr v797 v798 
        let v800 : string = "x"
        let v801 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v800 
        let v802 : string = "String::from_iter($0)"
        let v803 : std_string_String = Fable.Core.RustInterop.emitRustExpr v801 v802 
        let v804 : string = "true; $0 }).collect::<Vec<_>>()"
        let v805 : bool = Fable.Core.RustInterop.emitRustExpr v803 v804 
        let v806 : string = "_vec_map"
        let v807 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v806 
        let v808 : string = "$0.len()"
        let v809 : unativeint = Fable.Core.RustInterop.emitRustExpr v807 v808 
        let v810 : (unativeint -> int32) = int32
        let v811 : int32 = v810 v809
        let v812 : string = ""
        let v813 : bool = v756 <> v812 
        let v817 : bool =
            if v813 then
                let v816 : bool = v811 <= 1
                v816
            else
                false
        if v817 then
            v20.l0 <- v787
            ()
        else
            v20.l0 <- v812
            let v818 : string = "true; $0.into_iter().for_each(|x| { //"
            let v819 : bool = Fable.Core.RustInterop.emitRustExpr v807 v818 
            let v820 : string = "x"
            let v821 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v820 
            let v822 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v821 v822 
            let v823 : string = $"true;"
            let v824 : bool = Fable.Core.RustInterop.emitRustExpr () v823 
            let v825 : string = "true; }}); { //"
            let v826 : bool = Fable.Core.RustInterop.emitRustExpr () v825 
            ()
        let _v775 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v774 v756
        let _v775 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v774 v756
        let _v775 = () 
        #endif
#else
        v774 v756
        let _v775 = () 
        #endif
        _v775 
        let v827 : (string -> unit) = v18.l0
        v827 v756
and method25 () : uint8 =
    26uy
and closure64 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 4 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Critical"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_red"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_red"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_red"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[91m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[91m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[91m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{26uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : string = $"{v0}"
        let v703 : unit = ()
        let v704 : (unit -> unit) = closure12(v638, v700)
        let v705 : unit = (fun () -> v704 (); v703) ()
        let v708 : string = " }"
        let v709 : string = $"{v708}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure12(v638, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = v638.l0
        let v718 : string = "spiral_wasm.run / Ok (Some error)"
        let v719 : string = $"{v495} {v630} #{v636} %s{v718} / {v717}"
        let v722 : char list = []
        let v723 : (char list -> (char [])) = List.toArray
        let v724 : (char []) = v723 v722
        let v727 : string = v719.TrimStart v724 
        let v745 : char list = []
        let v746 : char list = '/' :: v745 
        let v749 : char list = ' ' :: v746 
        let v752 : (char list -> (char [])) = List.toArray
        let v753 : (char []) = v752 v749
        let v756 : string = v727.TrimEnd v753 
        let v774 : (string -> unit) = closure13()
        let v775 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v776 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v776 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v777 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v777 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v778 : string = v20.l0
        let v779 : bool = v778 = ""
        let v787 : string =
            if v779 then
                v756
            else
                let v780 : bool = v756 = ""
                if v780 then
                    let v781 : string = v20.l0
                    v781
                else
                    let v782 : string = v20.l0
                    let v783 : string = "\n"
                    let v784 : string = v782 + v783 
                    let v785 : string = v784 + v756 
                    v785
        let v788 : string = "&*$0"
        let v789 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v787 v788 
        let v790 : string = $"$0.chars()"
        let v791 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v789 v790 
        let v792 : string = "v791"
        let v793 : _ = Fable.Core.RustInterop.emitRustExpr () v792 
        let v794 : string = "v793.collect::<Vec<_>>()"
        let v795 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v794 
        let v796 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v797 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v795 v796 
        let v798 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v799 : bool = Fable.Core.RustInterop.emitRustExpr v797 v798 
        let v800 : string = "x"
        let v801 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v800 
        let v802 : string = "String::from_iter($0)"
        let v803 : std_string_String = Fable.Core.RustInterop.emitRustExpr v801 v802 
        let v804 : string = "true; $0 }).collect::<Vec<_>>()"
        let v805 : bool = Fable.Core.RustInterop.emitRustExpr v803 v804 
        let v806 : string = "_vec_map"
        let v807 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v806 
        let v808 : string = "$0.len()"
        let v809 : unativeint = Fable.Core.RustInterop.emitRustExpr v807 v808 
        let v810 : (unativeint -> int32) = int32
        let v811 : int32 = v810 v809
        let v812 : string = ""
        let v813 : bool = v756 <> v812 
        let v817 : bool =
            if v813 then
                let v816 : bool = v811 <= 1
                v816
            else
                false
        if v817 then
            v20.l0 <- v787
            ()
        else
            v20.l0 <- v812
            let v818 : string = "true; $0.into_iter().for_each(|x| { //"
            let v819 : bool = Fable.Core.RustInterop.emitRustExpr v807 v818 
            let v820 : string = "x"
            let v821 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v820 
            let v822 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v821 v822 
            let v823 : string = $"true;"
            let v824 : bool = Fable.Core.RustInterop.emitRustExpr () v823 
            let v825 : string = "true; }}); { //"
            let v826 : bool = Fable.Core.RustInterop.emitRustExpr () v825 
            ()
        let _v775 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v774 v756
        let _v775 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v774 v756
        let _v775 = () 
        #endif
#else
        v774 v756
        let _v775 = () 
        #endif
        _v775 
        let v827 : (string -> unit) = v18.l0
        v827 v756
and method26 () : uint8 =
    25uy
and closure65 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 4 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Critical"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_red"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_red"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_red"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[91m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[91m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[91m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{25uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : string = $"{v0}"
        let v703 : unit = ()
        let v704 : (unit -> unit) = closure12(v638, v700)
        let v705 : unit = (fun () -> v704 (); v703) ()
        let v708 : string = " }"
        let v709 : string = $"{v708}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure12(v638, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = v638.l0
        let v718 : string = "spiral_wasm.run / Ok (Some error)"
        let v719 : string = $"{v495} {v630} #{v636} %s{v718} / {v717}"
        let v722 : char list = []
        let v723 : (char list -> (char [])) = List.toArray
        let v724 : (char []) = v723 v722
        let v727 : string = v719.TrimStart v724 
        let v745 : char list = []
        let v746 : char list = '/' :: v745 
        let v749 : char list = ' ' :: v746 
        let v752 : (char list -> (char [])) = List.toArray
        let v753 : (char []) = v752 v749
        let v756 : string = v727.TrimEnd v753 
        let v774 : (string -> unit) = closure13()
        let v775 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v776 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v776 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v777 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v777 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v778 : string = v20.l0
        let v779 : bool = v778 = ""
        let v787 : string =
            if v779 then
                v756
            else
                let v780 : bool = v756 = ""
                if v780 then
                    let v781 : string = v20.l0
                    v781
                else
                    let v782 : string = v20.l0
                    let v783 : string = "\n"
                    let v784 : string = v782 + v783 
                    let v785 : string = v784 + v756 
                    v785
        let v788 : string = "&*$0"
        let v789 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v787 v788 
        let v790 : string = $"$0.chars()"
        let v791 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v789 v790 
        let v792 : string = "v791"
        let v793 : _ = Fable.Core.RustInterop.emitRustExpr () v792 
        let v794 : string = "v793.collect::<Vec<_>>()"
        let v795 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v794 
        let v796 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v797 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v795 v796 
        let v798 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v799 : bool = Fable.Core.RustInterop.emitRustExpr v797 v798 
        let v800 : string = "x"
        let v801 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v800 
        let v802 : string = "String::from_iter($0)"
        let v803 : std_string_String = Fable.Core.RustInterop.emitRustExpr v801 v802 
        let v804 : string = "true; $0 }).collect::<Vec<_>>()"
        let v805 : bool = Fable.Core.RustInterop.emitRustExpr v803 v804 
        let v806 : string = "_vec_map"
        let v807 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v806 
        let v808 : string = "$0.len()"
        let v809 : unativeint = Fable.Core.RustInterop.emitRustExpr v807 v808 
        let v810 : (unativeint -> int32) = int32
        let v811 : int32 = v810 v809
        let v812 : string = ""
        let v813 : bool = v756 <> v812 
        let v817 : bool =
            if v813 then
                let v816 : bool = v811 <= 1
                v816
            else
                false
        if v817 then
            v20.l0 <- v787
            ()
        else
            v20.l0 <- v812
            let v818 : string = "true; $0.into_iter().for_each(|x| { //"
            let v819 : bool = Fable.Core.RustInterop.emitRustExpr v807 v818 
            let v820 : string = "x"
            let v821 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v820 
            let v822 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v821 v822 
            let v823 : string = $"true;"
            let v824 : bool = Fable.Core.RustInterop.emitRustExpr () v823 
            let v825 : string = "true; }}); { //"
            let v826 : bool = Fable.Core.RustInterop.emitRustExpr () v825 
            ()
        let _v775 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v774 v756
        let _v775 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v774 v756
        let _v775 = () 
        #endif
#else
        v774 v756
        let _v775 = () 
        #endif
        _v775 
        let v827 : (string -> unit) = v18.l0
        v827 v756
and method27 () : uint8 =
    24uy
and closure66 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 4 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Critical"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_red"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_red"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_red"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[91m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[91m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[91m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{24uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : string = $"{v0}"
        let v703 : unit = ()
        let v704 : (unit -> unit) = closure12(v638, v700)
        let v705 : unit = (fun () -> v704 (); v703) ()
        let v708 : string = " }"
        let v709 : string = $"{v708}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure12(v638, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = v638.l0
        let v718 : string = "spiral_wasm.run / Ok (Some error)"
        let v719 : string = $"{v495} {v630} #{v636} %s{v718} / {v717}"
        let v722 : char list = []
        let v723 : (char list -> (char [])) = List.toArray
        let v724 : (char []) = v723 v722
        let v727 : string = v719.TrimStart v724 
        let v745 : char list = []
        let v746 : char list = '/' :: v745 
        let v749 : char list = ' ' :: v746 
        let v752 : (char list -> (char [])) = List.toArray
        let v753 : (char []) = v752 v749
        let v756 : string = v727.TrimEnd v753 
        let v774 : (string -> unit) = closure13()
        let v775 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v776 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v776 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v777 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v777 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v778 : string = v20.l0
        let v779 : bool = v778 = ""
        let v787 : string =
            if v779 then
                v756
            else
                let v780 : bool = v756 = ""
                if v780 then
                    let v781 : string = v20.l0
                    v781
                else
                    let v782 : string = v20.l0
                    let v783 : string = "\n"
                    let v784 : string = v782 + v783 
                    let v785 : string = v784 + v756 
                    v785
        let v788 : string = "&*$0"
        let v789 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v787 v788 
        let v790 : string = $"$0.chars()"
        let v791 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v789 v790 
        let v792 : string = "v791"
        let v793 : _ = Fable.Core.RustInterop.emitRustExpr () v792 
        let v794 : string = "v793.collect::<Vec<_>>()"
        let v795 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v794 
        let v796 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v797 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v795 v796 
        let v798 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v799 : bool = Fable.Core.RustInterop.emitRustExpr v797 v798 
        let v800 : string = "x"
        let v801 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v800 
        let v802 : string = "String::from_iter($0)"
        let v803 : std_string_String = Fable.Core.RustInterop.emitRustExpr v801 v802 
        let v804 : string = "true; $0 }).collect::<Vec<_>>()"
        let v805 : bool = Fable.Core.RustInterop.emitRustExpr v803 v804 
        let v806 : string = "_vec_map"
        let v807 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v806 
        let v808 : string = "$0.len()"
        let v809 : unativeint = Fable.Core.RustInterop.emitRustExpr v807 v808 
        let v810 : (unativeint -> int32) = int32
        let v811 : int32 = v810 v809
        let v812 : string = ""
        let v813 : bool = v756 <> v812 
        let v817 : bool =
            if v813 then
                let v816 : bool = v811 <= 1
                v816
            else
                false
        if v817 then
            v20.l0 <- v787
            ()
        else
            v20.l0 <- v812
            let v818 : string = "true; $0.into_iter().for_each(|x| { //"
            let v819 : bool = Fable.Core.RustInterop.emitRustExpr v807 v818 
            let v820 : string = "x"
            let v821 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v820 
            let v822 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v821 v822 
            let v823 : string = $"true;"
            let v824 : bool = Fable.Core.RustInterop.emitRustExpr () v823 
            let v825 : string = "true; }}); { //"
            let v826 : bool = Fable.Core.RustInterop.emitRustExpr () v825 
            ()
        let _v775 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v774 v756
        let _v775 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v774 v756
        let _v775 = () 
        #endif
#else
        v774 v756
        let _v775 = () 
        #endif
        _v775 
        let v827 : (string -> unit) = v18.l0
        v827 v756
and method28 () : uint8 =
    23uy
and closure67 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 4 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Critical"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_red"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_red"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_red"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[91m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[91m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[91m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{23uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : string = $"{v0}"
        let v703 : unit = ()
        let v704 : (unit -> unit) = closure12(v638, v700)
        let v705 : unit = (fun () -> v704 (); v703) ()
        let v708 : string = " }"
        let v709 : string = $"{v708}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure12(v638, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = v638.l0
        let v718 : string = "spiral_wasm.run / Ok (Some error)"
        let v719 : string = $"{v495} {v630} #{v636} %s{v718} / {v717}"
        let v722 : char list = []
        let v723 : (char list -> (char [])) = List.toArray
        let v724 : (char []) = v723 v722
        let v727 : string = v719.TrimStart v724 
        let v745 : char list = []
        let v746 : char list = '/' :: v745 
        let v749 : char list = ' ' :: v746 
        let v752 : (char list -> (char [])) = List.toArray
        let v753 : (char []) = v752 v749
        let v756 : string = v727.TrimEnd v753 
        let v774 : (string -> unit) = closure13()
        let v775 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v776 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v776 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v777 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v777 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v778 : string = v20.l0
        let v779 : bool = v778 = ""
        let v787 : string =
            if v779 then
                v756
            else
                let v780 : bool = v756 = ""
                if v780 then
                    let v781 : string = v20.l0
                    v781
                else
                    let v782 : string = v20.l0
                    let v783 : string = "\n"
                    let v784 : string = v782 + v783 
                    let v785 : string = v784 + v756 
                    v785
        let v788 : string = "&*$0"
        let v789 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v787 v788 
        let v790 : string = $"$0.chars()"
        let v791 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v789 v790 
        let v792 : string = "v791"
        let v793 : _ = Fable.Core.RustInterop.emitRustExpr () v792 
        let v794 : string = "v793.collect::<Vec<_>>()"
        let v795 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v794 
        let v796 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v797 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v795 v796 
        let v798 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v799 : bool = Fable.Core.RustInterop.emitRustExpr v797 v798 
        let v800 : string = "x"
        let v801 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v800 
        let v802 : string = "String::from_iter($0)"
        let v803 : std_string_String = Fable.Core.RustInterop.emitRustExpr v801 v802 
        let v804 : string = "true; $0 }).collect::<Vec<_>>()"
        let v805 : bool = Fable.Core.RustInterop.emitRustExpr v803 v804 
        let v806 : string = "_vec_map"
        let v807 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v806 
        let v808 : string = "$0.len()"
        let v809 : unativeint = Fable.Core.RustInterop.emitRustExpr v807 v808 
        let v810 : (unativeint -> int32) = int32
        let v811 : int32 = v810 v809
        let v812 : string = ""
        let v813 : bool = v756 <> v812 
        let v817 : bool =
            if v813 then
                let v816 : bool = v811 <= 1
                v816
            else
                false
        if v817 then
            v20.l0 <- v787
            ()
        else
            v20.l0 <- v812
            let v818 : string = "true; $0.into_iter().for_each(|x| { //"
            let v819 : bool = Fable.Core.RustInterop.emitRustExpr v807 v818 
            let v820 : string = "x"
            let v821 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v820 
            let v822 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v821 v822 
            let v823 : string = $"true;"
            let v824 : bool = Fable.Core.RustInterop.emitRustExpr () v823 
            let v825 : string = "true; }}); { //"
            let v826 : bool = Fable.Core.RustInterop.emitRustExpr () v825 
            ()
        let _v775 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v774 v756
        let _v775 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v774 v756
        let _v775 = () 
        #endif
#else
        v774 v756
        let _v775 = () 
        #endif
        _v775 
        let v827 : (string -> unit) = v18.l0
        v827 v756
and method29 () : uint8 =
    22uy
and closure68 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 4 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Critical"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_red"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_red"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_red"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[91m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[91m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[91m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{22uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : string = $"{v0}"
        let v703 : unit = ()
        let v704 : (unit -> unit) = closure12(v638, v700)
        let v705 : unit = (fun () -> v704 (); v703) ()
        let v708 : string = " }"
        let v709 : string = $"{v708}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure12(v638, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = v638.l0
        let v718 : string = "spiral_wasm.run / Ok (Some error)"
        let v719 : string = $"{v495} {v630} #{v636} %s{v718} / {v717}"
        let v722 : char list = []
        let v723 : (char list -> (char [])) = List.toArray
        let v724 : (char []) = v723 v722
        let v727 : string = v719.TrimStart v724 
        let v745 : char list = []
        let v746 : char list = '/' :: v745 
        let v749 : char list = ' ' :: v746 
        let v752 : (char list -> (char [])) = List.toArray
        let v753 : (char []) = v752 v749
        let v756 : string = v727.TrimEnd v753 
        let v774 : (string -> unit) = closure13()
        let v775 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v776 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v776 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v777 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v777 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v778 : string = v20.l0
        let v779 : bool = v778 = ""
        let v787 : string =
            if v779 then
                v756
            else
                let v780 : bool = v756 = ""
                if v780 then
                    let v781 : string = v20.l0
                    v781
                else
                    let v782 : string = v20.l0
                    let v783 : string = "\n"
                    let v784 : string = v782 + v783 
                    let v785 : string = v784 + v756 
                    v785
        let v788 : string = "&*$0"
        let v789 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v787 v788 
        let v790 : string = $"$0.chars()"
        let v791 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v789 v790 
        let v792 : string = "v791"
        let v793 : _ = Fable.Core.RustInterop.emitRustExpr () v792 
        let v794 : string = "v793.collect::<Vec<_>>()"
        let v795 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v794 
        let v796 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v797 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v795 v796 
        let v798 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v799 : bool = Fable.Core.RustInterop.emitRustExpr v797 v798 
        let v800 : string = "x"
        let v801 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v800 
        let v802 : string = "String::from_iter($0)"
        let v803 : std_string_String = Fable.Core.RustInterop.emitRustExpr v801 v802 
        let v804 : string = "true; $0 }).collect::<Vec<_>>()"
        let v805 : bool = Fable.Core.RustInterop.emitRustExpr v803 v804 
        let v806 : string = "_vec_map"
        let v807 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v806 
        let v808 : string = "$0.len()"
        let v809 : unativeint = Fable.Core.RustInterop.emitRustExpr v807 v808 
        let v810 : (unativeint -> int32) = int32
        let v811 : int32 = v810 v809
        let v812 : string = ""
        let v813 : bool = v756 <> v812 
        let v817 : bool =
            if v813 then
                let v816 : bool = v811 <= 1
                v816
            else
                false
        if v817 then
            v20.l0 <- v787
            ()
        else
            v20.l0 <- v812
            let v818 : string = "true; $0.into_iter().for_each(|x| { //"
            let v819 : bool = Fable.Core.RustInterop.emitRustExpr v807 v818 
            let v820 : string = "x"
            let v821 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v820 
            let v822 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v821 v822 
            let v823 : string = $"true;"
            let v824 : bool = Fable.Core.RustInterop.emitRustExpr () v823 
            let v825 : string = "true; }}); { //"
            let v826 : bool = Fable.Core.RustInterop.emitRustExpr () v825 
            ()
        let _v775 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v774 v756
        let _v775 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v774 v756
        let _v775 = () 
        #endif
#else
        v774 v756
        let _v775 = () 
        #endif
        _v775 
        let v827 : (string -> unit) = v18.l0
        v827 v756
and method30 () : uint8 =
    21uy
and closure69 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 4 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Critical"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_red"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_red"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_red"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[91m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[91m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[91m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{21uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : string = $"{v0}"
        let v703 : unit = ()
        let v704 : (unit -> unit) = closure12(v638, v700)
        let v705 : unit = (fun () -> v704 (); v703) ()
        let v708 : string = " }"
        let v709 : string = $"{v708}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure12(v638, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = v638.l0
        let v718 : string = "spiral_wasm.run / Ok (Some error)"
        let v719 : string = $"{v495} {v630} #{v636} %s{v718} / {v717}"
        let v722 : char list = []
        let v723 : (char list -> (char [])) = List.toArray
        let v724 : (char []) = v723 v722
        let v727 : string = v719.TrimStart v724 
        let v745 : char list = []
        let v746 : char list = '/' :: v745 
        let v749 : char list = ' ' :: v746 
        let v752 : (char list -> (char [])) = List.toArray
        let v753 : (char []) = v752 v749
        let v756 : string = v727.TrimEnd v753 
        let v774 : (string -> unit) = closure13()
        let v775 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v776 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v776 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v777 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v777 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v778 : string = v20.l0
        let v779 : bool = v778 = ""
        let v787 : string =
            if v779 then
                v756
            else
                let v780 : bool = v756 = ""
                if v780 then
                    let v781 : string = v20.l0
                    v781
                else
                    let v782 : string = v20.l0
                    let v783 : string = "\n"
                    let v784 : string = v782 + v783 
                    let v785 : string = v784 + v756 
                    v785
        let v788 : string = "&*$0"
        let v789 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v787 v788 
        let v790 : string = $"$0.chars()"
        let v791 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v789 v790 
        let v792 : string = "v791"
        let v793 : _ = Fable.Core.RustInterop.emitRustExpr () v792 
        let v794 : string = "v793.collect::<Vec<_>>()"
        let v795 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v794 
        let v796 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v797 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v795 v796 
        let v798 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v799 : bool = Fable.Core.RustInterop.emitRustExpr v797 v798 
        let v800 : string = "x"
        let v801 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v800 
        let v802 : string = "String::from_iter($0)"
        let v803 : std_string_String = Fable.Core.RustInterop.emitRustExpr v801 v802 
        let v804 : string = "true; $0 }).collect::<Vec<_>>()"
        let v805 : bool = Fable.Core.RustInterop.emitRustExpr v803 v804 
        let v806 : string = "_vec_map"
        let v807 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v806 
        let v808 : string = "$0.len()"
        let v809 : unativeint = Fable.Core.RustInterop.emitRustExpr v807 v808 
        let v810 : (unativeint -> int32) = int32
        let v811 : int32 = v810 v809
        let v812 : string = ""
        let v813 : bool = v756 <> v812 
        let v817 : bool =
            if v813 then
                let v816 : bool = v811 <= 1
                v816
            else
                false
        if v817 then
            v20.l0 <- v787
            ()
        else
            v20.l0 <- v812
            let v818 : string = "true; $0.into_iter().for_each(|x| { //"
            let v819 : bool = Fable.Core.RustInterop.emitRustExpr v807 v818 
            let v820 : string = "x"
            let v821 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v820 
            let v822 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v821 v822 
            let v823 : string = $"true;"
            let v824 : bool = Fable.Core.RustInterop.emitRustExpr () v823 
            let v825 : string = "true; }}); { //"
            let v826 : bool = Fable.Core.RustInterop.emitRustExpr () v825 
            ()
        let _v775 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v774 v756
        let _v775 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v774 v756
        let _v775 = () 
        #endif
#else
        v774 v756
        let _v775 = () 
        #endif
        _v775 
        let v827 : (string -> unit) = v18.l0
        v827 v756
and method31 () : uint8 =
    20uy
and closure70 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 4 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Critical"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_red"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_red"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_red"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[91m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[91m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[91m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{20uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : string = $"{v0}"
        let v703 : unit = ()
        let v704 : (unit -> unit) = closure12(v638, v700)
        let v705 : unit = (fun () -> v704 (); v703) ()
        let v708 : string = " }"
        let v709 : string = $"{v708}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure12(v638, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = v638.l0
        let v718 : string = "spiral_wasm.run / Ok (Some error)"
        let v719 : string = $"{v495} {v630} #{v636} %s{v718} / {v717}"
        let v722 : char list = []
        let v723 : (char list -> (char [])) = List.toArray
        let v724 : (char []) = v723 v722
        let v727 : string = v719.TrimStart v724 
        let v745 : char list = []
        let v746 : char list = '/' :: v745 
        let v749 : char list = ' ' :: v746 
        let v752 : (char list -> (char [])) = List.toArray
        let v753 : (char []) = v752 v749
        let v756 : string = v727.TrimEnd v753 
        let v774 : (string -> unit) = closure13()
        let v775 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v776 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v776 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v777 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v777 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v778 : string = v20.l0
        let v779 : bool = v778 = ""
        let v787 : string =
            if v779 then
                v756
            else
                let v780 : bool = v756 = ""
                if v780 then
                    let v781 : string = v20.l0
                    v781
                else
                    let v782 : string = v20.l0
                    let v783 : string = "\n"
                    let v784 : string = v782 + v783 
                    let v785 : string = v784 + v756 
                    v785
        let v788 : string = "&*$0"
        let v789 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v787 v788 
        let v790 : string = $"$0.chars()"
        let v791 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v789 v790 
        let v792 : string = "v791"
        let v793 : _ = Fable.Core.RustInterop.emitRustExpr () v792 
        let v794 : string = "v793.collect::<Vec<_>>()"
        let v795 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v794 
        let v796 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v797 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v795 v796 
        let v798 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v799 : bool = Fable.Core.RustInterop.emitRustExpr v797 v798 
        let v800 : string = "x"
        let v801 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v800 
        let v802 : string = "String::from_iter($0)"
        let v803 : std_string_String = Fable.Core.RustInterop.emitRustExpr v801 v802 
        let v804 : string = "true; $0 }).collect::<Vec<_>>()"
        let v805 : bool = Fable.Core.RustInterop.emitRustExpr v803 v804 
        let v806 : string = "_vec_map"
        let v807 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v806 
        let v808 : string = "$0.len()"
        let v809 : unativeint = Fable.Core.RustInterop.emitRustExpr v807 v808 
        let v810 : (unativeint -> int32) = int32
        let v811 : int32 = v810 v809
        let v812 : string = ""
        let v813 : bool = v756 <> v812 
        let v817 : bool =
            if v813 then
                let v816 : bool = v811 <= 1
                v816
            else
                false
        if v817 then
            v20.l0 <- v787
            ()
        else
            v20.l0 <- v812
            let v818 : string = "true; $0.into_iter().for_each(|x| { //"
            let v819 : bool = Fable.Core.RustInterop.emitRustExpr v807 v818 
            let v820 : string = "x"
            let v821 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v820 
            let v822 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v821 v822 
            let v823 : string = $"true;"
            let v824 : bool = Fable.Core.RustInterop.emitRustExpr () v823 
            let v825 : string = "true; }}); { //"
            let v826 : bool = Fable.Core.RustInterop.emitRustExpr () v825 
            ()
        let _v775 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v774 v756
        let _v775 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v774 v756
        let _v775 = () 
        #endif
#else
        v774 v756
        let _v775 = () 
        #endif
        _v775 
        let v827 : (string -> unit) = v18.l0
        v827 v756
and method32 () : uint8 =
    19uy
and closure71 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 4 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Critical"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_red"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_red"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_red"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[91m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[91m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[91m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{19uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : string = $"{v0}"
        let v703 : unit = ()
        let v704 : (unit -> unit) = closure12(v638, v700)
        let v705 : unit = (fun () -> v704 (); v703) ()
        let v708 : string = " }"
        let v709 : string = $"{v708}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure12(v638, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = v638.l0
        let v718 : string = "spiral_wasm.run / Ok (Some error)"
        let v719 : string = $"{v495} {v630} #{v636} %s{v718} / {v717}"
        let v722 : char list = []
        let v723 : (char list -> (char [])) = List.toArray
        let v724 : (char []) = v723 v722
        let v727 : string = v719.TrimStart v724 
        let v745 : char list = []
        let v746 : char list = '/' :: v745 
        let v749 : char list = ' ' :: v746 
        let v752 : (char list -> (char [])) = List.toArray
        let v753 : (char []) = v752 v749
        let v756 : string = v727.TrimEnd v753 
        let v774 : (string -> unit) = closure13()
        let v775 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v776 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v776 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v777 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v777 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v778 : string = v20.l0
        let v779 : bool = v778 = ""
        let v787 : string =
            if v779 then
                v756
            else
                let v780 : bool = v756 = ""
                if v780 then
                    let v781 : string = v20.l0
                    v781
                else
                    let v782 : string = v20.l0
                    let v783 : string = "\n"
                    let v784 : string = v782 + v783 
                    let v785 : string = v784 + v756 
                    v785
        let v788 : string = "&*$0"
        let v789 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v787 v788 
        let v790 : string = $"$0.chars()"
        let v791 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v789 v790 
        let v792 : string = "v791"
        let v793 : _ = Fable.Core.RustInterop.emitRustExpr () v792 
        let v794 : string = "v793.collect::<Vec<_>>()"
        let v795 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v794 
        let v796 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v797 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v795 v796 
        let v798 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v799 : bool = Fable.Core.RustInterop.emitRustExpr v797 v798 
        let v800 : string = "x"
        let v801 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v800 
        let v802 : string = "String::from_iter($0)"
        let v803 : std_string_String = Fable.Core.RustInterop.emitRustExpr v801 v802 
        let v804 : string = "true; $0 }).collect::<Vec<_>>()"
        let v805 : bool = Fable.Core.RustInterop.emitRustExpr v803 v804 
        let v806 : string = "_vec_map"
        let v807 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v806 
        let v808 : string = "$0.len()"
        let v809 : unativeint = Fable.Core.RustInterop.emitRustExpr v807 v808 
        let v810 : (unativeint -> int32) = int32
        let v811 : int32 = v810 v809
        let v812 : string = ""
        let v813 : bool = v756 <> v812 
        let v817 : bool =
            if v813 then
                let v816 : bool = v811 <= 1
                v816
            else
                false
        if v817 then
            v20.l0 <- v787
            ()
        else
            v20.l0 <- v812
            let v818 : string = "true; $0.into_iter().for_each(|x| { //"
            let v819 : bool = Fable.Core.RustInterop.emitRustExpr v807 v818 
            let v820 : string = "x"
            let v821 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v820 
            let v822 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v821 v822 
            let v823 : string = $"true;"
            let v824 : bool = Fable.Core.RustInterop.emitRustExpr () v823 
            let v825 : string = "true; }}); { //"
            let v826 : bool = Fable.Core.RustInterop.emitRustExpr () v825 
            ()
        let _v775 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v774 v756
        let _v775 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v774 v756
        let _v775 = () 
        #endif
#else
        v774 v756
        let _v775 = () 
        #endif
        _v775 
        let v827 : (string -> unit) = v18.l0
        v827 v756
and method33 () : uint8 =
    18uy
and closure72 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 4 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Critical"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_red"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_red"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_red"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[91m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[91m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[91m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{18uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : string = $"{v0}"
        let v703 : unit = ()
        let v704 : (unit -> unit) = closure12(v638, v700)
        let v705 : unit = (fun () -> v704 (); v703) ()
        let v708 : string = " }"
        let v709 : string = $"{v708}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure12(v638, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = v638.l0
        let v718 : string = "spiral_wasm.run / Ok (Some error)"
        let v719 : string = $"{v495} {v630} #{v636} %s{v718} / {v717}"
        let v722 : char list = []
        let v723 : (char list -> (char [])) = List.toArray
        let v724 : (char []) = v723 v722
        let v727 : string = v719.TrimStart v724 
        let v745 : char list = []
        let v746 : char list = '/' :: v745 
        let v749 : char list = ' ' :: v746 
        let v752 : (char list -> (char [])) = List.toArray
        let v753 : (char []) = v752 v749
        let v756 : string = v727.TrimEnd v753 
        let v774 : (string -> unit) = closure13()
        let v775 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v776 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v776 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v777 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v777 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v778 : string = v20.l0
        let v779 : bool = v778 = ""
        let v787 : string =
            if v779 then
                v756
            else
                let v780 : bool = v756 = ""
                if v780 then
                    let v781 : string = v20.l0
                    v781
                else
                    let v782 : string = v20.l0
                    let v783 : string = "\n"
                    let v784 : string = v782 + v783 
                    let v785 : string = v784 + v756 
                    v785
        let v788 : string = "&*$0"
        let v789 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v787 v788 
        let v790 : string = $"$0.chars()"
        let v791 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v789 v790 
        let v792 : string = "v791"
        let v793 : _ = Fable.Core.RustInterop.emitRustExpr () v792 
        let v794 : string = "v793.collect::<Vec<_>>()"
        let v795 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v794 
        let v796 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v797 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v795 v796 
        let v798 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v799 : bool = Fable.Core.RustInterop.emitRustExpr v797 v798 
        let v800 : string = "x"
        let v801 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v800 
        let v802 : string = "String::from_iter($0)"
        let v803 : std_string_String = Fable.Core.RustInterop.emitRustExpr v801 v802 
        let v804 : string = "true; $0 }).collect::<Vec<_>>()"
        let v805 : bool = Fable.Core.RustInterop.emitRustExpr v803 v804 
        let v806 : string = "_vec_map"
        let v807 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v806 
        let v808 : string = "$0.len()"
        let v809 : unativeint = Fable.Core.RustInterop.emitRustExpr v807 v808 
        let v810 : (unativeint -> int32) = int32
        let v811 : int32 = v810 v809
        let v812 : string = ""
        let v813 : bool = v756 <> v812 
        let v817 : bool =
            if v813 then
                let v816 : bool = v811 <= 1
                v816
            else
                false
        if v817 then
            v20.l0 <- v787
            ()
        else
            v20.l0 <- v812
            let v818 : string = "true; $0.into_iter().for_each(|x| { //"
            let v819 : bool = Fable.Core.RustInterop.emitRustExpr v807 v818 
            let v820 : string = "x"
            let v821 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v820 
            let v822 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v821 v822 
            let v823 : string = $"true;"
            let v824 : bool = Fable.Core.RustInterop.emitRustExpr () v823 
            let v825 : string = "true; }}); { //"
            let v826 : bool = Fable.Core.RustInterop.emitRustExpr () v825 
            ()
        let _v775 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v774 v756
        let _v775 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v774 v756
        let _v775 = () 
        #endif
#else
        v774 v756
        let _v775 = () 
        #endif
        _v775 
        let v827 : (string -> unit) = v18.l0
        v827 v756
and method34 () : uint8 =
    17uy
and closure73 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 4 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Critical"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_red"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_red"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_red"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[91m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[91m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[91m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{17uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : string = $"{v0}"
        let v703 : unit = ()
        let v704 : (unit -> unit) = closure12(v638, v700)
        let v705 : unit = (fun () -> v704 (); v703) ()
        let v708 : string = " }"
        let v709 : string = $"{v708}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure12(v638, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = v638.l0
        let v718 : string = "spiral_wasm.run / Ok (Some error)"
        let v719 : string = $"{v495} {v630} #{v636} %s{v718} / {v717}"
        let v722 : char list = []
        let v723 : (char list -> (char [])) = List.toArray
        let v724 : (char []) = v723 v722
        let v727 : string = v719.TrimStart v724 
        let v745 : char list = []
        let v746 : char list = '/' :: v745 
        let v749 : char list = ' ' :: v746 
        let v752 : (char list -> (char [])) = List.toArray
        let v753 : (char []) = v752 v749
        let v756 : string = v727.TrimEnd v753 
        let v774 : (string -> unit) = closure13()
        let v775 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v776 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v776 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v777 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v777 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v778 : string = v20.l0
        let v779 : bool = v778 = ""
        let v787 : string =
            if v779 then
                v756
            else
                let v780 : bool = v756 = ""
                if v780 then
                    let v781 : string = v20.l0
                    v781
                else
                    let v782 : string = v20.l0
                    let v783 : string = "\n"
                    let v784 : string = v782 + v783 
                    let v785 : string = v784 + v756 
                    v785
        let v788 : string = "&*$0"
        let v789 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v787 v788 
        let v790 : string = $"$0.chars()"
        let v791 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v789 v790 
        let v792 : string = "v791"
        let v793 : _ = Fable.Core.RustInterop.emitRustExpr () v792 
        let v794 : string = "v793.collect::<Vec<_>>()"
        let v795 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v794 
        let v796 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v797 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v795 v796 
        let v798 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v799 : bool = Fable.Core.RustInterop.emitRustExpr v797 v798 
        let v800 : string = "x"
        let v801 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v800 
        let v802 : string = "String::from_iter($0)"
        let v803 : std_string_String = Fable.Core.RustInterop.emitRustExpr v801 v802 
        let v804 : string = "true; $0 }).collect::<Vec<_>>()"
        let v805 : bool = Fable.Core.RustInterop.emitRustExpr v803 v804 
        let v806 : string = "_vec_map"
        let v807 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v806 
        let v808 : string = "$0.len()"
        let v809 : unativeint = Fable.Core.RustInterop.emitRustExpr v807 v808 
        let v810 : (unativeint -> int32) = int32
        let v811 : int32 = v810 v809
        let v812 : string = ""
        let v813 : bool = v756 <> v812 
        let v817 : bool =
            if v813 then
                let v816 : bool = v811 <= 1
                v816
            else
                false
        if v817 then
            v20.l0 <- v787
            ()
        else
            v20.l0 <- v812
            let v818 : string = "true; $0.into_iter().for_each(|x| { //"
            let v819 : bool = Fable.Core.RustInterop.emitRustExpr v807 v818 
            let v820 : string = "x"
            let v821 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v820 
            let v822 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v821 v822 
            let v823 : string = $"true;"
            let v824 : bool = Fable.Core.RustInterop.emitRustExpr () v823 
            let v825 : string = "true; }}); { //"
            let v826 : bool = Fable.Core.RustInterop.emitRustExpr () v825 
            ()
        let _v775 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v774 v756
        let _v775 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v774 v756
        let _v775 = () 
        #endif
#else
        v774 v756
        let _v775 = () 
        #endif
        _v775 
        let v827 : (string -> unit) = v18.l0
        v827 v756
and method35 () : uint8 =
    16uy
and closure74 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 4 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Critical"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_red"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_red"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_red"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[91m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[91m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[91m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{16uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : string = $"{v0}"
        let v703 : unit = ()
        let v704 : (unit -> unit) = closure12(v638, v700)
        let v705 : unit = (fun () -> v704 (); v703) ()
        let v708 : string = " }"
        let v709 : string = $"{v708}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure12(v638, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = v638.l0
        let v718 : string = "spiral_wasm.run / Ok (Some error)"
        let v719 : string = $"{v495} {v630} #{v636} %s{v718} / {v717}"
        let v722 : char list = []
        let v723 : (char list -> (char [])) = List.toArray
        let v724 : (char []) = v723 v722
        let v727 : string = v719.TrimStart v724 
        let v745 : char list = []
        let v746 : char list = '/' :: v745 
        let v749 : char list = ' ' :: v746 
        let v752 : (char list -> (char [])) = List.toArray
        let v753 : (char []) = v752 v749
        let v756 : string = v727.TrimEnd v753 
        let v774 : (string -> unit) = closure13()
        let v775 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v776 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v776 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v777 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v777 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v778 : string = v20.l0
        let v779 : bool = v778 = ""
        let v787 : string =
            if v779 then
                v756
            else
                let v780 : bool = v756 = ""
                if v780 then
                    let v781 : string = v20.l0
                    v781
                else
                    let v782 : string = v20.l0
                    let v783 : string = "\n"
                    let v784 : string = v782 + v783 
                    let v785 : string = v784 + v756 
                    v785
        let v788 : string = "&*$0"
        let v789 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v787 v788 
        let v790 : string = $"$0.chars()"
        let v791 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v789 v790 
        let v792 : string = "v791"
        let v793 : _ = Fable.Core.RustInterop.emitRustExpr () v792 
        let v794 : string = "v793.collect::<Vec<_>>()"
        let v795 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v794 
        let v796 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v797 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v795 v796 
        let v798 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v799 : bool = Fable.Core.RustInterop.emitRustExpr v797 v798 
        let v800 : string = "x"
        let v801 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v800 
        let v802 : string = "String::from_iter($0)"
        let v803 : std_string_String = Fable.Core.RustInterop.emitRustExpr v801 v802 
        let v804 : string = "true; $0 }).collect::<Vec<_>>()"
        let v805 : bool = Fable.Core.RustInterop.emitRustExpr v803 v804 
        let v806 : string = "_vec_map"
        let v807 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v806 
        let v808 : string = "$0.len()"
        let v809 : unativeint = Fable.Core.RustInterop.emitRustExpr v807 v808 
        let v810 : (unativeint -> int32) = int32
        let v811 : int32 = v810 v809
        let v812 : string = ""
        let v813 : bool = v756 <> v812 
        let v817 : bool =
            if v813 then
                let v816 : bool = v811 <= 1
                v816
            else
                false
        if v817 then
            v20.l0 <- v787
            ()
        else
            v20.l0 <- v812
            let v818 : string = "true; $0.into_iter().for_each(|x| { //"
            let v819 : bool = Fable.Core.RustInterop.emitRustExpr v807 v818 
            let v820 : string = "x"
            let v821 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v820 
            let v822 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v821 v822 
            let v823 : string = $"true;"
            let v824 : bool = Fable.Core.RustInterop.emitRustExpr () v823 
            let v825 : string = "true; }}); { //"
            let v826 : bool = Fable.Core.RustInterop.emitRustExpr () v825 
            ()
        let _v775 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v774 v756
        let _v775 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v774 v756
        let _v775 = () 
        #endif
#else
        v774 v756
        let _v775 = () 
        #endif
        _v775 
        let v827 : (string -> unit) = v18.l0
        v827 v756
and method36 () : uint8 =
    15uy
and closure75 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 4 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Critical"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_red"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_red"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_red"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[91m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[91m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[91m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{15uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : string = $"{v0}"
        let v703 : unit = ()
        let v704 : (unit -> unit) = closure12(v638, v700)
        let v705 : unit = (fun () -> v704 (); v703) ()
        let v708 : string = " }"
        let v709 : string = $"{v708}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure12(v638, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = v638.l0
        let v718 : string = "spiral_wasm.run / Ok (Some error)"
        let v719 : string = $"{v495} {v630} #{v636} %s{v718} / {v717}"
        let v722 : char list = []
        let v723 : (char list -> (char [])) = List.toArray
        let v724 : (char []) = v723 v722
        let v727 : string = v719.TrimStart v724 
        let v745 : char list = []
        let v746 : char list = '/' :: v745 
        let v749 : char list = ' ' :: v746 
        let v752 : (char list -> (char [])) = List.toArray
        let v753 : (char []) = v752 v749
        let v756 : string = v727.TrimEnd v753 
        let v774 : (string -> unit) = closure13()
        let v775 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v776 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v776 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v777 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v777 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v778 : string = v20.l0
        let v779 : bool = v778 = ""
        let v787 : string =
            if v779 then
                v756
            else
                let v780 : bool = v756 = ""
                if v780 then
                    let v781 : string = v20.l0
                    v781
                else
                    let v782 : string = v20.l0
                    let v783 : string = "\n"
                    let v784 : string = v782 + v783 
                    let v785 : string = v784 + v756 
                    v785
        let v788 : string = "&*$0"
        let v789 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v787 v788 
        let v790 : string = $"$0.chars()"
        let v791 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v789 v790 
        let v792 : string = "v791"
        let v793 : _ = Fable.Core.RustInterop.emitRustExpr () v792 
        let v794 : string = "v793.collect::<Vec<_>>()"
        let v795 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v794 
        let v796 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v797 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v795 v796 
        let v798 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v799 : bool = Fable.Core.RustInterop.emitRustExpr v797 v798 
        let v800 : string = "x"
        let v801 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v800 
        let v802 : string = "String::from_iter($0)"
        let v803 : std_string_String = Fable.Core.RustInterop.emitRustExpr v801 v802 
        let v804 : string = "true; $0 }).collect::<Vec<_>>()"
        let v805 : bool = Fable.Core.RustInterop.emitRustExpr v803 v804 
        let v806 : string = "_vec_map"
        let v807 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v806 
        let v808 : string = "$0.len()"
        let v809 : unativeint = Fable.Core.RustInterop.emitRustExpr v807 v808 
        let v810 : (unativeint -> int32) = int32
        let v811 : int32 = v810 v809
        let v812 : string = ""
        let v813 : bool = v756 <> v812 
        let v817 : bool =
            if v813 then
                let v816 : bool = v811 <= 1
                v816
            else
                false
        if v817 then
            v20.l0 <- v787
            ()
        else
            v20.l0 <- v812
            let v818 : string = "true; $0.into_iter().for_each(|x| { //"
            let v819 : bool = Fable.Core.RustInterop.emitRustExpr v807 v818 
            let v820 : string = "x"
            let v821 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v820 
            let v822 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v821 v822 
            let v823 : string = $"true;"
            let v824 : bool = Fable.Core.RustInterop.emitRustExpr () v823 
            let v825 : string = "true; }}); { //"
            let v826 : bool = Fable.Core.RustInterop.emitRustExpr () v825 
            ()
        let _v775 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v774 v756
        let _v775 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v774 v756
        let _v775 = () 
        #endif
#else
        v774 v756
        let _v775 = () 
        #endif
        _v775 
        let v827 : (string -> unit) = v18.l0
        v827 v756
and method37 () : uint8 =
    14uy
and closure76 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 4 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Critical"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_red"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_red"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_red"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[91m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[91m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[91m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{14uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : string = $"{v0}"
        let v703 : unit = ()
        let v704 : (unit -> unit) = closure12(v638, v700)
        let v705 : unit = (fun () -> v704 (); v703) ()
        let v708 : string = " }"
        let v709 : string = $"{v708}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure12(v638, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = v638.l0
        let v718 : string = "spiral_wasm.run / Ok (Some error)"
        let v719 : string = $"{v495} {v630} #{v636} %s{v718} / {v717}"
        let v722 : char list = []
        let v723 : (char list -> (char [])) = List.toArray
        let v724 : (char []) = v723 v722
        let v727 : string = v719.TrimStart v724 
        let v745 : char list = []
        let v746 : char list = '/' :: v745 
        let v749 : char list = ' ' :: v746 
        let v752 : (char list -> (char [])) = List.toArray
        let v753 : (char []) = v752 v749
        let v756 : string = v727.TrimEnd v753 
        let v774 : (string -> unit) = closure13()
        let v775 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v776 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v776 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v777 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v777 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v778 : string = v20.l0
        let v779 : bool = v778 = ""
        let v787 : string =
            if v779 then
                v756
            else
                let v780 : bool = v756 = ""
                if v780 then
                    let v781 : string = v20.l0
                    v781
                else
                    let v782 : string = v20.l0
                    let v783 : string = "\n"
                    let v784 : string = v782 + v783 
                    let v785 : string = v784 + v756 
                    v785
        let v788 : string = "&*$0"
        let v789 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v787 v788 
        let v790 : string = $"$0.chars()"
        let v791 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v789 v790 
        let v792 : string = "v791"
        let v793 : _ = Fable.Core.RustInterop.emitRustExpr () v792 
        let v794 : string = "v793.collect::<Vec<_>>()"
        let v795 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v794 
        let v796 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v797 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v795 v796 
        let v798 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v799 : bool = Fable.Core.RustInterop.emitRustExpr v797 v798 
        let v800 : string = "x"
        let v801 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v800 
        let v802 : string = "String::from_iter($0)"
        let v803 : std_string_String = Fable.Core.RustInterop.emitRustExpr v801 v802 
        let v804 : string = "true; $0 }).collect::<Vec<_>>()"
        let v805 : bool = Fable.Core.RustInterop.emitRustExpr v803 v804 
        let v806 : string = "_vec_map"
        let v807 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v806 
        let v808 : string = "$0.len()"
        let v809 : unativeint = Fable.Core.RustInterop.emitRustExpr v807 v808 
        let v810 : (unativeint -> int32) = int32
        let v811 : int32 = v810 v809
        let v812 : string = ""
        let v813 : bool = v756 <> v812 
        let v817 : bool =
            if v813 then
                let v816 : bool = v811 <= 1
                v816
            else
                false
        if v817 then
            v20.l0 <- v787
            ()
        else
            v20.l0 <- v812
            let v818 : string = "true; $0.into_iter().for_each(|x| { //"
            let v819 : bool = Fable.Core.RustInterop.emitRustExpr v807 v818 
            let v820 : string = "x"
            let v821 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v820 
            let v822 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v821 v822 
            let v823 : string = $"true;"
            let v824 : bool = Fable.Core.RustInterop.emitRustExpr () v823 
            let v825 : string = "true; }}); { //"
            let v826 : bool = Fable.Core.RustInterop.emitRustExpr () v825 
            ()
        let _v775 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v774 v756
        let _v775 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v774 v756
        let _v775 = () 
        #endif
#else
        v774 v756
        let _v775 = () 
        #endif
        _v775 
        let v827 : (string -> unit) = v18.l0
        v827 v756
and method38 () : uint8 =
    13uy
and closure77 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 4 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Critical"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_red"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_red"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_red"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[91m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[91m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[91m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{13uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : string = $"{v0}"
        let v703 : unit = ()
        let v704 : (unit -> unit) = closure12(v638, v700)
        let v705 : unit = (fun () -> v704 (); v703) ()
        let v708 : string = " }"
        let v709 : string = $"{v708}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure12(v638, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = v638.l0
        let v718 : string = "spiral_wasm.run / Ok (Some error)"
        let v719 : string = $"{v495} {v630} #{v636} %s{v718} / {v717}"
        let v722 : char list = []
        let v723 : (char list -> (char [])) = List.toArray
        let v724 : (char []) = v723 v722
        let v727 : string = v719.TrimStart v724 
        let v745 : char list = []
        let v746 : char list = '/' :: v745 
        let v749 : char list = ' ' :: v746 
        let v752 : (char list -> (char [])) = List.toArray
        let v753 : (char []) = v752 v749
        let v756 : string = v727.TrimEnd v753 
        let v774 : (string -> unit) = closure13()
        let v775 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v776 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v776 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v777 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v777 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v778 : string = v20.l0
        let v779 : bool = v778 = ""
        let v787 : string =
            if v779 then
                v756
            else
                let v780 : bool = v756 = ""
                if v780 then
                    let v781 : string = v20.l0
                    v781
                else
                    let v782 : string = v20.l0
                    let v783 : string = "\n"
                    let v784 : string = v782 + v783 
                    let v785 : string = v784 + v756 
                    v785
        let v788 : string = "&*$0"
        let v789 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v787 v788 
        let v790 : string = $"$0.chars()"
        let v791 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v789 v790 
        let v792 : string = "v791"
        let v793 : _ = Fable.Core.RustInterop.emitRustExpr () v792 
        let v794 : string = "v793.collect::<Vec<_>>()"
        let v795 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v794 
        let v796 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v797 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v795 v796 
        let v798 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v799 : bool = Fable.Core.RustInterop.emitRustExpr v797 v798 
        let v800 : string = "x"
        let v801 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v800 
        let v802 : string = "String::from_iter($0)"
        let v803 : std_string_String = Fable.Core.RustInterop.emitRustExpr v801 v802 
        let v804 : string = "true; $0 }).collect::<Vec<_>>()"
        let v805 : bool = Fable.Core.RustInterop.emitRustExpr v803 v804 
        let v806 : string = "_vec_map"
        let v807 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v806 
        let v808 : string = "$0.len()"
        let v809 : unativeint = Fable.Core.RustInterop.emitRustExpr v807 v808 
        let v810 : (unativeint -> int32) = int32
        let v811 : int32 = v810 v809
        let v812 : string = ""
        let v813 : bool = v756 <> v812 
        let v817 : bool =
            if v813 then
                let v816 : bool = v811 <= 1
                v816
            else
                false
        if v817 then
            v20.l0 <- v787
            ()
        else
            v20.l0 <- v812
            let v818 : string = "true; $0.into_iter().for_each(|x| { //"
            let v819 : bool = Fable.Core.RustInterop.emitRustExpr v807 v818 
            let v820 : string = "x"
            let v821 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v820 
            let v822 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v821 v822 
            let v823 : string = $"true;"
            let v824 : bool = Fable.Core.RustInterop.emitRustExpr () v823 
            let v825 : string = "true; }}); { //"
            let v826 : bool = Fable.Core.RustInterop.emitRustExpr () v825 
            ()
        let _v775 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v774 v756
        let _v775 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v774 v756
        let _v775 = () 
        #endif
#else
        v774 v756
        let _v775 = () 
        #endif
        _v775 
        let v827 : (string -> unit) = v18.l0
        v827 v756
and method39 () : uint8 =
    12uy
and closure78 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 4 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Critical"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_red"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_red"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_red"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[91m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[91m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[91m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{12uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : string = $"{v0}"
        let v703 : unit = ()
        let v704 : (unit -> unit) = closure12(v638, v700)
        let v705 : unit = (fun () -> v704 (); v703) ()
        let v708 : string = " }"
        let v709 : string = $"{v708}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure12(v638, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = v638.l0
        let v718 : string = "spiral_wasm.run / Ok (Some error)"
        let v719 : string = $"{v495} {v630} #{v636} %s{v718} / {v717}"
        let v722 : char list = []
        let v723 : (char list -> (char [])) = List.toArray
        let v724 : (char []) = v723 v722
        let v727 : string = v719.TrimStart v724 
        let v745 : char list = []
        let v746 : char list = '/' :: v745 
        let v749 : char list = ' ' :: v746 
        let v752 : (char list -> (char [])) = List.toArray
        let v753 : (char []) = v752 v749
        let v756 : string = v727.TrimEnd v753 
        let v774 : (string -> unit) = closure13()
        let v775 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v776 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v776 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v777 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v777 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v778 : string = v20.l0
        let v779 : bool = v778 = ""
        let v787 : string =
            if v779 then
                v756
            else
                let v780 : bool = v756 = ""
                if v780 then
                    let v781 : string = v20.l0
                    v781
                else
                    let v782 : string = v20.l0
                    let v783 : string = "\n"
                    let v784 : string = v782 + v783 
                    let v785 : string = v784 + v756 
                    v785
        let v788 : string = "&*$0"
        let v789 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v787 v788 
        let v790 : string = $"$0.chars()"
        let v791 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v789 v790 
        let v792 : string = "v791"
        let v793 : _ = Fable.Core.RustInterop.emitRustExpr () v792 
        let v794 : string = "v793.collect::<Vec<_>>()"
        let v795 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v794 
        let v796 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v797 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v795 v796 
        let v798 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v799 : bool = Fable.Core.RustInterop.emitRustExpr v797 v798 
        let v800 : string = "x"
        let v801 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v800 
        let v802 : string = "String::from_iter($0)"
        let v803 : std_string_String = Fable.Core.RustInterop.emitRustExpr v801 v802 
        let v804 : string = "true; $0 }).collect::<Vec<_>>()"
        let v805 : bool = Fable.Core.RustInterop.emitRustExpr v803 v804 
        let v806 : string = "_vec_map"
        let v807 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v806 
        let v808 : string = "$0.len()"
        let v809 : unativeint = Fable.Core.RustInterop.emitRustExpr v807 v808 
        let v810 : (unativeint -> int32) = int32
        let v811 : int32 = v810 v809
        let v812 : string = ""
        let v813 : bool = v756 <> v812 
        let v817 : bool =
            if v813 then
                let v816 : bool = v811 <= 1
                v816
            else
                false
        if v817 then
            v20.l0 <- v787
            ()
        else
            v20.l0 <- v812
            let v818 : string = "true; $0.into_iter().for_each(|x| { //"
            let v819 : bool = Fable.Core.RustInterop.emitRustExpr v807 v818 
            let v820 : string = "x"
            let v821 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v820 
            let v822 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v821 v822 
            let v823 : string = $"true;"
            let v824 : bool = Fable.Core.RustInterop.emitRustExpr () v823 
            let v825 : string = "true; }}); { //"
            let v826 : bool = Fable.Core.RustInterop.emitRustExpr () v825 
            ()
        let _v775 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v774 v756
        let _v775 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v774 v756
        let _v775 = () 
        #endif
#else
        v774 v756
        let _v775 = () 
        #endif
        _v775 
        let v827 : (string -> unit) = v18.l0
        v827 v756
and method40 () : uint8 =
    11uy
and closure79 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 4 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Critical"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_red"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_red"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_red"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[91m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[91m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[91m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{11uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : string = $"{v0}"
        let v703 : unit = ()
        let v704 : (unit -> unit) = closure12(v638, v700)
        let v705 : unit = (fun () -> v704 (); v703) ()
        let v708 : string = " }"
        let v709 : string = $"{v708}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure12(v638, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = v638.l0
        let v718 : string = "spiral_wasm.run / Ok (Some error)"
        let v719 : string = $"{v495} {v630} #{v636} %s{v718} / {v717}"
        let v722 : char list = []
        let v723 : (char list -> (char [])) = List.toArray
        let v724 : (char []) = v723 v722
        let v727 : string = v719.TrimStart v724 
        let v745 : char list = []
        let v746 : char list = '/' :: v745 
        let v749 : char list = ' ' :: v746 
        let v752 : (char list -> (char [])) = List.toArray
        let v753 : (char []) = v752 v749
        let v756 : string = v727.TrimEnd v753 
        let v774 : (string -> unit) = closure13()
        let v775 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v776 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v776 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v777 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v777 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v778 : string = v20.l0
        let v779 : bool = v778 = ""
        let v787 : string =
            if v779 then
                v756
            else
                let v780 : bool = v756 = ""
                if v780 then
                    let v781 : string = v20.l0
                    v781
                else
                    let v782 : string = v20.l0
                    let v783 : string = "\n"
                    let v784 : string = v782 + v783 
                    let v785 : string = v784 + v756 
                    v785
        let v788 : string = "&*$0"
        let v789 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v787 v788 
        let v790 : string = $"$0.chars()"
        let v791 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v789 v790 
        let v792 : string = "v791"
        let v793 : _ = Fable.Core.RustInterop.emitRustExpr () v792 
        let v794 : string = "v793.collect::<Vec<_>>()"
        let v795 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v794 
        let v796 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v797 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v795 v796 
        let v798 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v799 : bool = Fable.Core.RustInterop.emitRustExpr v797 v798 
        let v800 : string = "x"
        let v801 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v800 
        let v802 : string = "String::from_iter($0)"
        let v803 : std_string_String = Fable.Core.RustInterop.emitRustExpr v801 v802 
        let v804 : string = "true; $0 }).collect::<Vec<_>>()"
        let v805 : bool = Fable.Core.RustInterop.emitRustExpr v803 v804 
        let v806 : string = "_vec_map"
        let v807 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v806 
        let v808 : string = "$0.len()"
        let v809 : unativeint = Fable.Core.RustInterop.emitRustExpr v807 v808 
        let v810 : (unativeint -> int32) = int32
        let v811 : int32 = v810 v809
        let v812 : string = ""
        let v813 : bool = v756 <> v812 
        let v817 : bool =
            if v813 then
                let v816 : bool = v811 <= 1
                v816
            else
                false
        if v817 then
            v20.l0 <- v787
            ()
        else
            v20.l0 <- v812
            let v818 : string = "true; $0.into_iter().for_each(|x| { //"
            let v819 : bool = Fable.Core.RustInterop.emitRustExpr v807 v818 
            let v820 : string = "x"
            let v821 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v820 
            let v822 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v821 v822 
            let v823 : string = $"true;"
            let v824 : bool = Fable.Core.RustInterop.emitRustExpr () v823 
            let v825 : string = "true; }}); { //"
            let v826 : bool = Fable.Core.RustInterop.emitRustExpr () v825 
            ()
        let _v775 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v774 v756
        let _v775 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v774 v756
        let _v775 = () 
        #endif
#else
        v774 v756
        let _v775 = () 
        #endif
        _v775 
        let v827 : (string -> unit) = v18.l0
        v827 v756
and method41 () : uint8 =
    10uy
and closure80 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 4 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Critical"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_red"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_red"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_red"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[91m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[91m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[91m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{10uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : string = $"{v0}"
        let v703 : unit = ()
        let v704 : (unit -> unit) = closure12(v638, v700)
        let v705 : unit = (fun () -> v704 (); v703) ()
        let v708 : string = " }"
        let v709 : string = $"{v708}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure12(v638, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = v638.l0
        let v718 : string = "spiral_wasm.run / Ok (Some error)"
        let v719 : string = $"{v495} {v630} #{v636} %s{v718} / {v717}"
        let v722 : char list = []
        let v723 : (char list -> (char [])) = List.toArray
        let v724 : (char []) = v723 v722
        let v727 : string = v719.TrimStart v724 
        let v745 : char list = []
        let v746 : char list = '/' :: v745 
        let v749 : char list = ' ' :: v746 
        let v752 : (char list -> (char [])) = List.toArray
        let v753 : (char []) = v752 v749
        let v756 : string = v727.TrimEnd v753 
        let v774 : (string -> unit) = closure13()
        let v775 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v776 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v776 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v777 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v777 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v778 : string = v20.l0
        let v779 : bool = v778 = ""
        let v787 : string =
            if v779 then
                v756
            else
                let v780 : bool = v756 = ""
                if v780 then
                    let v781 : string = v20.l0
                    v781
                else
                    let v782 : string = v20.l0
                    let v783 : string = "\n"
                    let v784 : string = v782 + v783 
                    let v785 : string = v784 + v756 
                    v785
        let v788 : string = "&*$0"
        let v789 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v787 v788 
        let v790 : string = $"$0.chars()"
        let v791 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v789 v790 
        let v792 : string = "v791"
        let v793 : _ = Fable.Core.RustInterop.emitRustExpr () v792 
        let v794 : string = "v793.collect::<Vec<_>>()"
        let v795 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v794 
        let v796 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v797 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v795 v796 
        let v798 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v799 : bool = Fable.Core.RustInterop.emitRustExpr v797 v798 
        let v800 : string = "x"
        let v801 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v800 
        let v802 : string = "String::from_iter($0)"
        let v803 : std_string_String = Fable.Core.RustInterop.emitRustExpr v801 v802 
        let v804 : string = "true; $0 }).collect::<Vec<_>>()"
        let v805 : bool = Fable.Core.RustInterop.emitRustExpr v803 v804 
        let v806 : string = "_vec_map"
        let v807 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v806 
        let v808 : string = "$0.len()"
        let v809 : unativeint = Fable.Core.RustInterop.emitRustExpr v807 v808 
        let v810 : (unativeint -> int32) = int32
        let v811 : int32 = v810 v809
        let v812 : string = ""
        let v813 : bool = v756 <> v812 
        let v817 : bool =
            if v813 then
                let v816 : bool = v811 <= 1
                v816
            else
                false
        if v817 then
            v20.l0 <- v787
            ()
        else
            v20.l0 <- v812
            let v818 : string = "true; $0.into_iter().for_each(|x| { //"
            let v819 : bool = Fable.Core.RustInterop.emitRustExpr v807 v818 
            let v820 : string = "x"
            let v821 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v820 
            let v822 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v821 v822 
            let v823 : string = $"true;"
            let v824 : bool = Fable.Core.RustInterop.emitRustExpr () v823 
            let v825 : string = "true; }}); { //"
            let v826 : bool = Fable.Core.RustInterop.emitRustExpr () v825 
            ()
        let _v775 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v774 v756
        let _v775 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v774 v756
        let _v775 = () 
        #endif
#else
        v774 v756
        let _v775 = () 
        #endif
        _v775 
        let v827 : (string -> unit) = v18.l0
        v827 v756
and method42 () : uint8 =
    9uy
and closure81 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 4 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Critical"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_red"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_red"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_red"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[91m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[91m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[91m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{9uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : string = $"{v0}"
        let v703 : unit = ()
        let v704 : (unit -> unit) = closure12(v638, v700)
        let v705 : unit = (fun () -> v704 (); v703) ()
        let v708 : string = " }"
        let v709 : string = $"{v708}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure12(v638, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = v638.l0
        let v718 : string = "spiral_wasm.run / Ok (Some error)"
        let v719 : string = $"{v495} {v630} #{v636} %s{v718} / {v717}"
        let v722 : char list = []
        let v723 : (char list -> (char [])) = List.toArray
        let v724 : (char []) = v723 v722
        let v727 : string = v719.TrimStart v724 
        let v745 : char list = []
        let v746 : char list = '/' :: v745 
        let v749 : char list = ' ' :: v746 
        let v752 : (char list -> (char [])) = List.toArray
        let v753 : (char []) = v752 v749
        let v756 : string = v727.TrimEnd v753 
        let v774 : (string -> unit) = closure13()
        let v775 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v776 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v776 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v777 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v777 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v778 : string = v20.l0
        let v779 : bool = v778 = ""
        let v787 : string =
            if v779 then
                v756
            else
                let v780 : bool = v756 = ""
                if v780 then
                    let v781 : string = v20.l0
                    v781
                else
                    let v782 : string = v20.l0
                    let v783 : string = "\n"
                    let v784 : string = v782 + v783 
                    let v785 : string = v784 + v756 
                    v785
        let v788 : string = "&*$0"
        let v789 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v787 v788 
        let v790 : string = $"$0.chars()"
        let v791 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v789 v790 
        let v792 : string = "v791"
        let v793 : _ = Fable.Core.RustInterop.emitRustExpr () v792 
        let v794 : string = "v793.collect::<Vec<_>>()"
        let v795 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v794 
        let v796 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v797 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v795 v796 
        let v798 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v799 : bool = Fable.Core.RustInterop.emitRustExpr v797 v798 
        let v800 : string = "x"
        let v801 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v800 
        let v802 : string = "String::from_iter($0)"
        let v803 : std_string_String = Fable.Core.RustInterop.emitRustExpr v801 v802 
        let v804 : string = "true; $0 }).collect::<Vec<_>>()"
        let v805 : bool = Fable.Core.RustInterop.emitRustExpr v803 v804 
        let v806 : string = "_vec_map"
        let v807 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v806 
        let v808 : string = "$0.len()"
        let v809 : unativeint = Fable.Core.RustInterop.emitRustExpr v807 v808 
        let v810 : (unativeint -> int32) = int32
        let v811 : int32 = v810 v809
        let v812 : string = ""
        let v813 : bool = v756 <> v812 
        let v817 : bool =
            if v813 then
                let v816 : bool = v811 <= 1
                v816
            else
                false
        if v817 then
            v20.l0 <- v787
            ()
        else
            v20.l0 <- v812
            let v818 : string = "true; $0.into_iter().for_each(|x| { //"
            let v819 : bool = Fable.Core.RustInterop.emitRustExpr v807 v818 
            let v820 : string = "x"
            let v821 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v820 
            let v822 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v821 v822 
            let v823 : string = $"true;"
            let v824 : bool = Fable.Core.RustInterop.emitRustExpr () v823 
            let v825 : string = "true; }}); { //"
            let v826 : bool = Fable.Core.RustInterop.emitRustExpr () v825 
            ()
        let _v775 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v774 v756
        let _v775 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v774 v756
        let _v775 = () 
        #endif
#else
        v774 v756
        let _v775 = () 
        #endif
        _v775 
        let v827 : (string -> unit) = v18.l0
        v827 v756
and method43 () : uint8 =
    8uy
and closure82 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 4 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Critical"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_red"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_red"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_red"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[91m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[91m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[91m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{8uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : string = $"{v0}"
        let v703 : unit = ()
        let v704 : (unit -> unit) = closure12(v638, v700)
        let v705 : unit = (fun () -> v704 (); v703) ()
        let v708 : string = " }"
        let v709 : string = $"{v708}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure12(v638, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = v638.l0
        let v718 : string = "spiral_wasm.run / Ok (Some error)"
        let v719 : string = $"{v495} {v630} #{v636} %s{v718} / {v717}"
        let v722 : char list = []
        let v723 : (char list -> (char [])) = List.toArray
        let v724 : (char []) = v723 v722
        let v727 : string = v719.TrimStart v724 
        let v745 : char list = []
        let v746 : char list = '/' :: v745 
        let v749 : char list = ' ' :: v746 
        let v752 : (char list -> (char [])) = List.toArray
        let v753 : (char []) = v752 v749
        let v756 : string = v727.TrimEnd v753 
        let v774 : (string -> unit) = closure13()
        let v775 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v776 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v776 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v777 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v777 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v778 : string = v20.l0
        let v779 : bool = v778 = ""
        let v787 : string =
            if v779 then
                v756
            else
                let v780 : bool = v756 = ""
                if v780 then
                    let v781 : string = v20.l0
                    v781
                else
                    let v782 : string = v20.l0
                    let v783 : string = "\n"
                    let v784 : string = v782 + v783 
                    let v785 : string = v784 + v756 
                    v785
        let v788 : string = "&*$0"
        let v789 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v787 v788 
        let v790 : string = $"$0.chars()"
        let v791 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v789 v790 
        let v792 : string = "v791"
        let v793 : _ = Fable.Core.RustInterop.emitRustExpr () v792 
        let v794 : string = "v793.collect::<Vec<_>>()"
        let v795 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v794 
        let v796 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v797 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v795 v796 
        let v798 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v799 : bool = Fable.Core.RustInterop.emitRustExpr v797 v798 
        let v800 : string = "x"
        let v801 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v800 
        let v802 : string = "String::from_iter($0)"
        let v803 : std_string_String = Fable.Core.RustInterop.emitRustExpr v801 v802 
        let v804 : string = "true; $0 }).collect::<Vec<_>>()"
        let v805 : bool = Fable.Core.RustInterop.emitRustExpr v803 v804 
        let v806 : string = "_vec_map"
        let v807 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v806 
        let v808 : string = "$0.len()"
        let v809 : unativeint = Fable.Core.RustInterop.emitRustExpr v807 v808 
        let v810 : (unativeint -> int32) = int32
        let v811 : int32 = v810 v809
        let v812 : string = ""
        let v813 : bool = v756 <> v812 
        let v817 : bool =
            if v813 then
                let v816 : bool = v811 <= 1
                v816
            else
                false
        if v817 then
            v20.l0 <- v787
            ()
        else
            v20.l0 <- v812
            let v818 : string = "true; $0.into_iter().for_each(|x| { //"
            let v819 : bool = Fable.Core.RustInterop.emitRustExpr v807 v818 
            let v820 : string = "x"
            let v821 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v820 
            let v822 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v821 v822 
            let v823 : string = $"true;"
            let v824 : bool = Fable.Core.RustInterop.emitRustExpr () v823 
            let v825 : string = "true; }}); { //"
            let v826 : bool = Fable.Core.RustInterop.emitRustExpr () v825 
            ()
        let _v775 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v774 v756
        let _v775 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v774 v756
        let _v775 = () 
        #endif
#else
        v774 v756
        let _v775 = () 
        #endif
        _v775 
        let v827 : (string -> unit) = v18.l0
        v827 v756
and method44 () : uint8 =
    7uy
and closure83 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 4 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Critical"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_red"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_red"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_red"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[91m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[91m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[91m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{7uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : string = $"{v0}"
        let v703 : unit = ()
        let v704 : (unit -> unit) = closure12(v638, v700)
        let v705 : unit = (fun () -> v704 (); v703) ()
        let v708 : string = " }"
        let v709 : string = $"{v708}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure12(v638, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = v638.l0
        let v718 : string = "spiral_wasm.run / Ok (Some error)"
        let v719 : string = $"{v495} {v630} #{v636} %s{v718} / {v717}"
        let v722 : char list = []
        let v723 : (char list -> (char [])) = List.toArray
        let v724 : (char []) = v723 v722
        let v727 : string = v719.TrimStart v724 
        let v745 : char list = []
        let v746 : char list = '/' :: v745 
        let v749 : char list = ' ' :: v746 
        let v752 : (char list -> (char [])) = List.toArray
        let v753 : (char []) = v752 v749
        let v756 : string = v727.TrimEnd v753 
        let v774 : (string -> unit) = closure13()
        let v775 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v776 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v776 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v777 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v777 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v778 : string = v20.l0
        let v779 : bool = v778 = ""
        let v787 : string =
            if v779 then
                v756
            else
                let v780 : bool = v756 = ""
                if v780 then
                    let v781 : string = v20.l0
                    v781
                else
                    let v782 : string = v20.l0
                    let v783 : string = "\n"
                    let v784 : string = v782 + v783 
                    let v785 : string = v784 + v756 
                    v785
        let v788 : string = "&*$0"
        let v789 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v787 v788 
        let v790 : string = $"$0.chars()"
        let v791 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v789 v790 
        let v792 : string = "v791"
        let v793 : _ = Fable.Core.RustInterop.emitRustExpr () v792 
        let v794 : string = "v793.collect::<Vec<_>>()"
        let v795 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v794 
        let v796 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v797 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v795 v796 
        let v798 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v799 : bool = Fable.Core.RustInterop.emitRustExpr v797 v798 
        let v800 : string = "x"
        let v801 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v800 
        let v802 : string = "String::from_iter($0)"
        let v803 : std_string_String = Fable.Core.RustInterop.emitRustExpr v801 v802 
        let v804 : string = "true; $0 }).collect::<Vec<_>>()"
        let v805 : bool = Fable.Core.RustInterop.emitRustExpr v803 v804 
        let v806 : string = "_vec_map"
        let v807 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v806 
        let v808 : string = "$0.len()"
        let v809 : unativeint = Fable.Core.RustInterop.emitRustExpr v807 v808 
        let v810 : (unativeint -> int32) = int32
        let v811 : int32 = v810 v809
        let v812 : string = ""
        let v813 : bool = v756 <> v812 
        let v817 : bool =
            if v813 then
                let v816 : bool = v811 <= 1
                v816
            else
                false
        if v817 then
            v20.l0 <- v787
            ()
        else
            v20.l0 <- v812
            let v818 : string = "true; $0.into_iter().for_each(|x| { //"
            let v819 : bool = Fable.Core.RustInterop.emitRustExpr v807 v818 
            let v820 : string = "x"
            let v821 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v820 
            let v822 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v821 v822 
            let v823 : string = $"true;"
            let v824 : bool = Fable.Core.RustInterop.emitRustExpr () v823 
            let v825 : string = "true; }}); { //"
            let v826 : bool = Fable.Core.RustInterop.emitRustExpr () v825 
            ()
        let _v775 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v774 v756
        let _v775 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v774 v756
        let _v775 = () 
        #endif
#else
        v774 v756
        let _v775 = () 
        #endif
        _v775 
        let v827 : (string -> unit) = v18.l0
        v827 v756
and method45 () : uint8 =
    6uy
and closure84 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 4 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Critical"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_red"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_red"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_red"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[91m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[91m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[91m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{6uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : string = $"{v0}"
        let v703 : unit = ()
        let v704 : (unit -> unit) = closure12(v638, v700)
        let v705 : unit = (fun () -> v704 (); v703) ()
        let v708 : string = " }"
        let v709 : string = $"{v708}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure12(v638, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = v638.l0
        let v718 : string = "spiral_wasm.run / Ok (Some error)"
        let v719 : string = $"{v495} {v630} #{v636} %s{v718} / {v717}"
        let v722 : char list = []
        let v723 : (char list -> (char [])) = List.toArray
        let v724 : (char []) = v723 v722
        let v727 : string = v719.TrimStart v724 
        let v745 : char list = []
        let v746 : char list = '/' :: v745 
        let v749 : char list = ' ' :: v746 
        let v752 : (char list -> (char [])) = List.toArray
        let v753 : (char []) = v752 v749
        let v756 : string = v727.TrimEnd v753 
        let v774 : (string -> unit) = closure13()
        let v775 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v776 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v776 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v777 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v777 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v778 : string = v20.l0
        let v779 : bool = v778 = ""
        let v787 : string =
            if v779 then
                v756
            else
                let v780 : bool = v756 = ""
                if v780 then
                    let v781 : string = v20.l0
                    v781
                else
                    let v782 : string = v20.l0
                    let v783 : string = "\n"
                    let v784 : string = v782 + v783 
                    let v785 : string = v784 + v756 
                    v785
        let v788 : string = "&*$0"
        let v789 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v787 v788 
        let v790 : string = $"$0.chars()"
        let v791 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v789 v790 
        let v792 : string = "v791"
        let v793 : _ = Fable.Core.RustInterop.emitRustExpr () v792 
        let v794 : string = "v793.collect::<Vec<_>>()"
        let v795 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v794 
        let v796 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v797 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v795 v796 
        let v798 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v799 : bool = Fable.Core.RustInterop.emitRustExpr v797 v798 
        let v800 : string = "x"
        let v801 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v800 
        let v802 : string = "String::from_iter($0)"
        let v803 : std_string_String = Fable.Core.RustInterop.emitRustExpr v801 v802 
        let v804 : string = "true; $0 }).collect::<Vec<_>>()"
        let v805 : bool = Fable.Core.RustInterop.emitRustExpr v803 v804 
        let v806 : string = "_vec_map"
        let v807 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v806 
        let v808 : string = "$0.len()"
        let v809 : unativeint = Fable.Core.RustInterop.emitRustExpr v807 v808 
        let v810 : (unativeint -> int32) = int32
        let v811 : int32 = v810 v809
        let v812 : string = ""
        let v813 : bool = v756 <> v812 
        let v817 : bool =
            if v813 then
                let v816 : bool = v811 <= 1
                v816
            else
                false
        if v817 then
            v20.l0 <- v787
            ()
        else
            v20.l0 <- v812
            let v818 : string = "true; $0.into_iter().for_each(|x| { //"
            let v819 : bool = Fable.Core.RustInterop.emitRustExpr v807 v818 
            let v820 : string = "x"
            let v821 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v820 
            let v822 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v821 v822 
            let v823 : string = $"true;"
            let v824 : bool = Fable.Core.RustInterop.emitRustExpr () v823 
            let v825 : string = "true; }}); { //"
            let v826 : bool = Fable.Core.RustInterop.emitRustExpr () v825 
            ()
        let _v775 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v774 v756
        let _v775 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v774 v756
        let _v775 = () 
        #endif
#else
        v774 v756
        let _v775 = () 
        #endif
        _v775 
        let v827 : (string -> unit) = v18.l0
        v827 v756
and method46 () : uint8 =
    5uy
and closure85 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 4 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Critical"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_red"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_red"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_red"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[91m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[91m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[91m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{5uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : string = $"{v0}"
        let v703 : unit = ()
        let v704 : (unit -> unit) = closure12(v638, v700)
        let v705 : unit = (fun () -> v704 (); v703) ()
        let v708 : string = " }"
        let v709 : string = $"{v708}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure12(v638, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = v638.l0
        let v718 : string = "spiral_wasm.run / Ok (Some error)"
        let v719 : string = $"{v495} {v630} #{v636} %s{v718} / {v717}"
        let v722 : char list = []
        let v723 : (char list -> (char [])) = List.toArray
        let v724 : (char []) = v723 v722
        let v727 : string = v719.TrimStart v724 
        let v745 : char list = []
        let v746 : char list = '/' :: v745 
        let v749 : char list = ' ' :: v746 
        let v752 : (char list -> (char [])) = List.toArray
        let v753 : (char []) = v752 v749
        let v756 : string = v727.TrimEnd v753 
        let v774 : (string -> unit) = closure13()
        let v775 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v776 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v776 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v777 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v777 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v778 : string = v20.l0
        let v779 : bool = v778 = ""
        let v787 : string =
            if v779 then
                v756
            else
                let v780 : bool = v756 = ""
                if v780 then
                    let v781 : string = v20.l0
                    v781
                else
                    let v782 : string = v20.l0
                    let v783 : string = "\n"
                    let v784 : string = v782 + v783 
                    let v785 : string = v784 + v756 
                    v785
        let v788 : string = "&*$0"
        let v789 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v787 v788 
        let v790 : string = $"$0.chars()"
        let v791 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v789 v790 
        let v792 : string = "v791"
        let v793 : _ = Fable.Core.RustInterop.emitRustExpr () v792 
        let v794 : string = "v793.collect::<Vec<_>>()"
        let v795 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v794 
        let v796 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v797 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v795 v796 
        let v798 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v799 : bool = Fable.Core.RustInterop.emitRustExpr v797 v798 
        let v800 : string = "x"
        let v801 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v800 
        let v802 : string = "String::from_iter($0)"
        let v803 : std_string_String = Fable.Core.RustInterop.emitRustExpr v801 v802 
        let v804 : string = "true; $0 }).collect::<Vec<_>>()"
        let v805 : bool = Fable.Core.RustInterop.emitRustExpr v803 v804 
        let v806 : string = "_vec_map"
        let v807 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v806 
        let v808 : string = "$0.len()"
        let v809 : unativeint = Fable.Core.RustInterop.emitRustExpr v807 v808 
        let v810 : (unativeint -> int32) = int32
        let v811 : int32 = v810 v809
        let v812 : string = ""
        let v813 : bool = v756 <> v812 
        let v817 : bool =
            if v813 then
                let v816 : bool = v811 <= 1
                v816
            else
                false
        if v817 then
            v20.l0 <- v787
            ()
        else
            v20.l0 <- v812
            let v818 : string = "true; $0.into_iter().for_each(|x| { //"
            let v819 : bool = Fable.Core.RustInterop.emitRustExpr v807 v818 
            let v820 : string = "x"
            let v821 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v820 
            let v822 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v821 v822 
            let v823 : string = $"true;"
            let v824 : bool = Fable.Core.RustInterop.emitRustExpr () v823 
            let v825 : string = "true; }}); { //"
            let v826 : bool = Fable.Core.RustInterop.emitRustExpr () v825 
            ()
        let _v775 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v774 v756
        let _v775 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v774 v756
        let _v775 = () 
        #endif
#else
        v774 v756
        let _v775 = () 
        #endif
        _v775 
        let v827 : (string -> unit) = v18.l0
        v827 v756
and method47 () : uint8 =
    4uy
and closure86 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 4 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Critical"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_red"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_red"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_red"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[91m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[91m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[91m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{4uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : string = $"{v0}"
        let v703 : unit = ()
        let v704 : (unit -> unit) = closure12(v638, v700)
        let v705 : unit = (fun () -> v704 (); v703) ()
        let v708 : string = " }"
        let v709 : string = $"{v708}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure12(v638, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = v638.l0
        let v718 : string = "spiral_wasm.run / Ok (Some error)"
        let v719 : string = $"{v495} {v630} #{v636} %s{v718} / {v717}"
        let v722 : char list = []
        let v723 : (char list -> (char [])) = List.toArray
        let v724 : (char []) = v723 v722
        let v727 : string = v719.TrimStart v724 
        let v745 : char list = []
        let v746 : char list = '/' :: v745 
        let v749 : char list = ' ' :: v746 
        let v752 : (char list -> (char [])) = List.toArray
        let v753 : (char []) = v752 v749
        let v756 : string = v727.TrimEnd v753 
        let v774 : (string -> unit) = closure13()
        let v775 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v776 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v776 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v777 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v777 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v778 : string = v20.l0
        let v779 : bool = v778 = ""
        let v787 : string =
            if v779 then
                v756
            else
                let v780 : bool = v756 = ""
                if v780 then
                    let v781 : string = v20.l0
                    v781
                else
                    let v782 : string = v20.l0
                    let v783 : string = "\n"
                    let v784 : string = v782 + v783 
                    let v785 : string = v784 + v756 
                    v785
        let v788 : string = "&*$0"
        let v789 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v787 v788 
        let v790 : string = $"$0.chars()"
        let v791 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v789 v790 
        let v792 : string = "v791"
        let v793 : _ = Fable.Core.RustInterop.emitRustExpr () v792 
        let v794 : string = "v793.collect::<Vec<_>>()"
        let v795 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v794 
        let v796 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v797 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v795 v796 
        let v798 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v799 : bool = Fable.Core.RustInterop.emitRustExpr v797 v798 
        let v800 : string = "x"
        let v801 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v800 
        let v802 : string = "String::from_iter($0)"
        let v803 : std_string_String = Fable.Core.RustInterop.emitRustExpr v801 v802 
        let v804 : string = "true; $0 }).collect::<Vec<_>>()"
        let v805 : bool = Fable.Core.RustInterop.emitRustExpr v803 v804 
        let v806 : string = "_vec_map"
        let v807 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v806 
        let v808 : string = "$0.len()"
        let v809 : unativeint = Fable.Core.RustInterop.emitRustExpr v807 v808 
        let v810 : (unativeint -> int32) = int32
        let v811 : int32 = v810 v809
        let v812 : string = ""
        let v813 : bool = v756 <> v812 
        let v817 : bool =
            if v813 then
                let v816 : bool = v811 <= 1
                v816
            else
                false
        if v817 then
            v20.l0 <- v787
            ()
        else
            v20.l0 <- v812
            let v818 : string = "true; $0.into_iter().for_each(|x| { //"
            let v819 : bool = Fable.Core.RustInterop.emitRustExpr v807 v818 
            let v820 : string = "x"
            let v821 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v820 
            let v822 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v821 v822 
            let v823 : string = $"true;"
            let v824 : bool = Fable.Core.RustInterop.emitRustExpr () v823 
            let v825 : string = "true; }}); { //"
            let v826 : bool = Fable.Core.RustInterop.emitRustExpr () v825 
            ()
        let _v775 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v774 v756
        let _v775 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v774 v756
        let _v775 = () 
        #endif
#else
        v774 v756
        let _v775 = () 
        #endif
        _v775 
        let v827 : (string -> unit) = v18.l0
        v827 v756
and method48 () : uint8 =
    3uy
and closure87 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 4 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Critical"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_red"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_red"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_red"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[91m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[91m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[91m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{3uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : string = $"{v0}"
        let v703 : unit = ()
        let v704 : (unit -> unit) = closure12(v638, v700)
        let v705 : unit = (fun () -> v704 (); v703) ()
        let v708 : string = " }"
        let v709 : string = $"{v708}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure12(v638, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = v638.l0
        let v718 : string = "spiral_wasm.run / Ok (Some error)"
        let v719 : string = $"{v495} {v630} #{v636} %s{v718} / {v717}"
        let v722 : char list = []
        let v723 : (char list -> (char [])) = List.toArray
        let v724 : (char []) = v723 v722
        let v727 : string = v719.TrimStart v724 
        let v745 : char list = []
        let v746 : char list = '/' :: v745 
        let v749 : char list = ' ' :: v746 
        let v752 : (char list -> (char [])) = List.toArray
        let v753 : (char []) = v752 v749
        let v756 : string = v727.TrimEnd v753 
        let v774 : (string -> unit) = closure13()
        let v775 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v776 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v776 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v777 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v777 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v778 : string = v20.l0
        let v779 : bool = v778 = ""
        let v787 : string =
            if v779 then
                v756
            else
                let v780 : bool = v756 = ""
                if v780 then
                    let v781 : string = v20.l0
                    v781
                else
                    let v782 : string = v20.l0
                    let v783 : string = "\n"
                    let v784 : string = v782 + v783 
                    let v785 : string = v784 + v756 
                    v785
        let v788 : string = "&*$0"
        let v789 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v787 v788 
        let v790 : string = $"$0.chars()"
        let v791 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v789 v790 
        let v792 : string = "v791"
        let v793 : _ = Fable.Core.RustInterop.emitRustExpr () v792 
        let v794 : string = "v793.collect::<Vec<_>>()"
        let v795 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v794 
        let v796 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v797 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v795 v796 
        let v798 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v799 : bool = Fable.Core.RustInterop.emitRustExpr v797 v798 
        let v800 : string = "x"
        let v801 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v800 
        let v802 : string = "String::from_iter($0)"
        let v803 : std_string_String = Fable.Core.RustInterop.emitRustExpr v801 v802 
        let v804 : string = "true; $0 }).collect::<Vec<_>>()"
        let v805 : bool = Fable.Core.RustInterop.emitRustExpr v803 v804 
        let v806 : string = "_vec_map"
        let v807 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v806 
        let v808 : string = "$0.len()"
        let v809 : unativeint = Fable.Core.RustInterop.emitRustExpr v807 v808 
        let v810 : (unativeint -> int32) = int32
        let v811 : int32 = v810 v809
        let v812 : string = ""
        let v813 : bool = v756 <> v812 
        let v817 : bool =
            if v813 then
                let v816 : bool = v811 <= 1
                v816
            else
                false
        if v817 then
            v20.l0 <- v787
            ()
        else
            v20.l0 <- v812
            let v818 : string = "true; $0.into_iter().for_each(|x| { //"
            let v819 : bool = Fable.Core.RustInterop.emitRustExpr v807 v818 
            let v820 : string = "x"
            let v821 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v820 
            let v822 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v821 v822 
            let v823 : string = $"true;"
            let v824 : bool = Fable.Core.RustInterop.emitRustExpr () v823 
            let v825 : string = "true; }}); { //"
            let v826 : bool = Fable.Core.RustInterop.emitRustExpr () v825 
            ()
        let _v775 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v774 v756
        let _v775 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v774 v756
        let _v775 = () 
        #endif
#else
        v774 v756
        let _v775 = () 
        #endif
        _v775 
        let v827 : (string -> unit) = v18.l0
        v827 v756
and method49 () : uint8 =
    2uy
and closure88 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 4 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Critical"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_red"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_red"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_red"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[91m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[91m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[91m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{2uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : string = $"{v0}"
        let v703 : unit = ()
        let v704 : (unit -> unit) = closure12(v638, v700)
        let v705 : unit = (fun () -> v704 (); v703) ()
        let v708 : string = " }"
        let v709 : string = $"{v708}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure12(v638, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = v638.l0
        let v718 : string = "spiral_wasm.run / Ok (Some error)"
        let v719 : string = $"{v495} {v630} #{v636} %s{v718} / {v717}"
        let v722 : char list = []
        let v723 : (char list -> (char [])) = List.toArray
        let v724 : (char []) = v723 v722
        let v727 : string = v719.TrimStart v724 
        let v745 : char list = []
        let v746 : char list = '/' :: v745 
        let v749 : char list = ' ' :: v746 
        let v752 : (char list -> (char [])) = List.toArray
        let v753 : (char []) = v752 v749
        let v756 : string = v727.TrimEnd v753 
        let v774 : (string -> unit) = closure13()
        let v775 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v776 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v776 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v777 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v777 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v778 : string = v20.l0
        let v779 : bool = v778 = ""
        let v787 : string =
            if v779 then
                v756
            else
                let v780 : bool = v756 = ""
                if v780 then
                    let v781 : string = v20.l0
                    v781
                else
                    let v782 : string = v20.l0
                    let v783 : string = "\n"
                    let v784 : string = v782 + v783 
                    let v785 : string = v784 + v756 
                    v785
        let v788 : string = "&*$0"
        let v789 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v787 v788 
        let v790 : string = $"$0.chars()"
        let v791 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v789 v790 
        let v792 : string = "v791"
        let v793 : _ = Fable.Core.RustInterop.emitRustExpr () v792 
        let v794 : string = "v793.collect::<Vec<_>>()"
        let v795 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v794 
        let v796 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v797 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v795 v796 
        let v798 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v799 : bool = Fable.Core.RustInterop.emitRustExpr v797 v798 
        let v800 : string = "x"
        let v801 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v800 
        let v802 : string = "String::from_iter($0)"
        let v803 : std_string_String = Fable.Core.RustInterop.emitRustExpr v801 v802 
        let v804 : string = "true; $0 }).collect::<Vec<_>>()"
        let v805 : bool = Fable.Core.RustInterop.emitRustExpr v803 v804 
        let v806 : string = "_vec_map"
        let v807 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v806 
        let v808 : string = "$0.len()"
        let v809 : unativeint = Fable.Core.RustInterop.emitRustExpr v807 v808 
        let v810 : (unativeint -> int32) = int32
        let v811 : int32 = v810 v809
        let v812 : string = ""
        let v813 : bool = v756 <> v812 
        let v817 : bool =
            if v813 then
                let v816 : bool = v811 <= 1
                v816
            else
                false
        if v817 then
            v20.l0 <- v787
            ()
        else
            v20.l0 <- v812
            let v818 : string = "true; $0.into_iter().for_each(|x| { //"
            let v819 : bool = Fable.Core.RustInterop.emitRustExpr v807 v818 
            let v820 : string = "x"
            let v821 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v820 
            let v822 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v821 v822 
            let v823 : string = $"true;"
            let v824 : bool = Fable.Core.RustInterop.emitRustExpr () v823 
            let v825 : string = "true; }}); { //"
            let v826 : bool = Fable.Core.RustInterop.emitRustExpr () v825 
            ()
        let _v775 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v774 v756
        let _v775 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v774 v756
        let _v775 = () 
        #endif
#else
        v774 v756
        let _v775 = () 
        #endif
        _v775 
        let v827 : (string -> unit) = v18.l0
        v827 v756
and method50 () : uint8 =
    1uy
and closure89 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 4 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Critical"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_red"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_red"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_red"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[91m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[91m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[91m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retry"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{1uy}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = "; "
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure12(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = "error"
        let v684 : string = $"{v683}"
        let v687 : unit = ()
        let v688 : (unit -> unit) = closure12(v638, v684)
        let v689 : unit = (fun () -> v688 (); v687) ()
        let v692 : string = $"{v657}"
        let v695 : unit = ()
        let v696 : (unit -> unit) = closure12(v638, v692)
        let v697 : unit = (fun () -> v696 (); v695) ()
        let v700 : string = $"{v0}"
        let v703 : unit = ()
        let v704 : (unit -> unit) = closure12(v638, v700)
        let v705 : unit = (fun () -> v704 (); v703) ()
        let v708 : string = " }"
        let v709 : string = $"{v708}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure12(v638, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = v638.l0
        let v718 : string = "spiral_wasm.run / Ok (Some error)"
        let v719 : string = $"{v495} {v630} #{v636} %s{v718} / {v717}"
        let v722 : char list = []
        let v723 : (char list -> (char [])) = List.toArray
        let v724 : (char []) = v723 v722
        let v727 : string = v719.TrimStart v724 
        let v745 : char list = []
        let v746 : char list = '/' :: v745 
        let v749 : char list = ' ' :: v746 
        let v752 : (char list -> (char [])) = List.toArray
        let v753 : (char []) = v752 v749
        let v756 : string = v727.TrimEnd v753 
        let v774 : (string -> unit) = closure13()
        let v775 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v776 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v776 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v777 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v756 v777 
        let _v775 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v778 : string = v20.l0
        let v779 : bool = v778 = ""
        let v787 : string =
            if v779 then
                v756
            else
                let v780 : bool = v756 = ""
                if v780 then
                    let v781 : string = v20.l0
                    v781
                else
                    let v782 : string = v20.l0
                    let v783 : string = "\n"
                    let v784 : string = v782 + v783 
                    let v785 : string = v784 + v756 
                    v785
        let v788 : string = "&*$0"
        let v789 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v787 v788 
        let v790 : string = $"$0.chars()"
        let v791 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v789 v790 
        let v792 : string = "v791"
        let v793 : _ = Fable.Core.RustInterop.emitRustExpr () v792 
        let v794 : string = "v793.collect::<Vec<_>>()"
        let v795 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v794 
        let v796 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v797 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v795 v796 
        let v798 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v799 : bool = Fable.Core.RustInterop.emitRustExpr v797 v798 
        let v800 : string = "x"
        let v801 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v800 
        let v802 : string = "String::from_iter($0)"
        let v803 : std_string_String = Fable.Core.RustInterop.emitRustExpr v801 v802 
        let v804 : string = "true; $0 }).collect::<Vec<_>>()"
        let v805 : bool = Fable.Core.RustInterop.emitRustExpr v803 v804 
        let v806 : string = "_vec_map"
        let v807 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v806 
        let v808 : string = "$0.len()"
        let v809 : unativeint = Fable.Core.RustInterop.emitRustExpr v807 v808 
        let v810 : (unativeint -> int32) = int32
        let v811 : int32 = v810 v809
        let v812 : string = ""
        let v813 : bool = v756 <> v812 
        let v817 : bool =
            if v813 then
                let v816 : bool = v811 <= 1
                v816
            else
                false
        if v817 then
            v20.l0 <- v787
            ()
        else
            v20.l0 <- v812
            let v818 : string = "true; $0.into_iter().for_each(|x| { //"
            let v819 : bool = Fable.Core.RustInterop.emitRustExpr v807 v818 
            let v820 : string = "x"
            let v821 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v820 
            let v822 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v821 v822 
            let v823 : string = $"true;"
            let v824 : bool = Fable.Core.RustInterop.emitRustExpr () v823 
            let v825 : string = "true; }}); { //"
            let v826 : bool = Fable.Core.RustInterop.emitRustExpr () v825 
            ()
        let _v775 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v774 v756
        let _v775 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v774 v756
        let _v775 = () 
        #endif
#else
        v774 v756
        let _v775 = () 
        #endif
        _v775 
        let v827 : (string -> unit) = v18.l0
        v827 v756
and closure90 (v0 : US7) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US3 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 0 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US5 option = None
        let _v113 = ref v113 
        let v114 : US5 option ref = _v113 
        let v115 : (US5 option -> US5 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US5 option = _v113.Value 
        let v132 : US5 = US5_1
        let v133 : US5 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US5_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US5_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method7()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US5 option = None
        let _v181 = ref v181 
        let v182 : US5 option ref = _v181 
        let v183 : (US5 option -> US5 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US5 option = _v181.Value 
        let v200 : US5 = US5_1
        let v201 : US5 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US5_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US5_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method7()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US5 option = None
        let _v251 = ref v251 
        let v252 : US5 option ref = _v251 
        let v253 : (US5 option -> US5 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US5 option = _v251.Value 
        let v270 : US5 = US5_1
        let v271 : US5 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US5_1 -> (* None *)
                v250
            | US5_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US5 option = None
        let _v291 = ref v291 
        let v292 : US5 option ref = _v291 
        let v293 : (US5 option -> US5 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US5 option = _v291.Value 
        let v310 : US5 = US5_1
        let v311 : US5 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US5_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US5_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method8()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US5 option = None
        let _v359 = ref v359 
        let v360 : US5 option ref = _v359 
        let v361 : (US5 option -> US5 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US5 option = _v359.Value 
        let v378 : US5 = US5_1
        let v379 : US5 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US5_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US5_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method8()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US5 option = None
        let _v427 = ref v427 
        let v428 : US5 option ref = _v427 
        let v429 : (US5 option -> US5 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US5 option = _v427.Value 
        let v446 : US5 = US5_1
        let v447 : US5 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US5_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US5_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method8()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Verbose"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_black"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_black"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_black"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[90m"
        let v619 : string = method9()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[90m"
        let v623 : string = method9()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[90m"
        let v627 : string = method9()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method10()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure12(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "retries"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure12(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure12(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"%A{v0}"
        let v669 : string = $"{v666}"
        let v672 : unit = ()
        let v673 : (unit -> unit) = closure12(v638, v669)
        let v674 : unit = (fun () -> v673 (); v672) ()
        let v677 : string = " }"
        let v678 : string = $"{v677}"
        let v681 : unit = ()
        let v682 : (unit -> unit) = closure12(v638, v678)
        let v683 : unit = (fun () -> v682 (); v681) ()
        let v686 : string = v638.l0
        let v687 : string = "spiral_wasm.run"
        let v688 : string = $"{v495} {v630} #{v636} %s{v687} / {v686}"
        let v691 : char list = []
        let v692 : (char list -> (char [])) = List.toArray
        let v693 : (char []) = v692 v691
        let v696 : string = v688.TrimStart v693 
        let v714 : char list = []
        let v715 : char list = '/' :: v714 
        let v718 : char list = ' ' :: v715 
        let v721 : (char list -> (char [])) = List.toArray
        let v722 : (char []) = v721 v718
        let v725 : string = v696.TrimEnd v722 
        let v743 : (string -> unit) = closure13()
        let v744 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v745 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v725 v745 
        let _v744 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v746 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v725 v746 
        let _v744 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v747 : string = v20.l0
        let v748 : bool = v747 = ""
        let v756 : string =
            if v748 then
                v725
            else
                let v749 : bool = v725 = ""
                if v749 then
                    let v750 : string = v20.l0
                    v750
                else
                    let v751 : string = v20.l0
                    let v752 : string = "\n"
                    let v753 : string = v751 + v752 
                    let v754 : string = v753 + v725 
                    v754
        let v757 : string = "&*$0"
        let v758 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v756 v757 
        let v759 : string = $"$0.chars()"
        let v760 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v758 v759 
        let v761 : string = "v760"
        let v762 : _ = Fable.Core.RustInterop.emitRustExpr () v761 
        let v763 : string = "v762.collect::<Vec<_>>()"
        let v764 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v763 
        let v765 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v766 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v764 v765 
        let v767 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v768 : bool = Fable.Core.RustInterop.emitRustExpr v766 v767 
        let v769 : string = "x"
        let v770 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v769 
        let v771 : string = "String::from_iter($0)"
        let v772 : std_string_String = Fable.Core.RustInterop.emitRustExpr v770 v771 
        let v773 : string = "true; $0 }).collect::<Vec<_>>()"
        let v774 : bool = Fable.Core.RustInterop.emitRustExpr v772 v773 
        let v775 : string = "_vec_map"
        let v776 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v775 
        let v777 : string = "$0.len()"
        let v778 : unativeint = Fable.Core.RustInterop.emitRustExpr v776 v777 
        let v779 : (unativeint -> int32) = int32
        let v780 : int32 = v779 v778
        let v781 : string = ""
        let v782 : bool = v725 <> v781 
        let v786 : bool =
            if v782 then
                let v785 : bool = v780 <= 1
                v785
            else
                false
        if v786 then
            v20.l0 <- v756
            ()
        else
            v20.l0 <- v781
            let v787 : string = "true; $0.into_iter().for_each(|x| { //"
            let v788 : bool = Fable.Core.RustInterop.emitRustExpr v776 v787 
            let v789 : string = "x"
            let v790 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v789 
            let v791 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v790 v791 
            let v792 : string = $"true;"
            let v793 : bool = Fable.Core.RustInterop.emitRustExpr () v792 
            let v794 : string = "true; }}); { //"
            let v795 : bool = Fable.Core.RustInterop.emitRustExpr () v794 
            ()
        let _v744 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v743 v725
        let _v744 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v743 v725
        let _v744 = () 
        #endif
#else
        v743 v725
        let _v744 = () 
        #endif
        _v744 
        let v796 : (string -> unit) = v18.l0
        v796 v725
and method51 (v0 : Result<uint8, anyhow_Error>) : Result<uint8, anyhow_Error> =
    v0
and method12 (v0 : clap_ArgMatches) : std_pin_Pin<Box<Dyn<std_future_Future<Result<uint8, anyhow_Error>>>>> =
    let v1 : string = "true; let __future_init = Box::pin(async move { //"
    let v2 : bool = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : string = method13()
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "clap::ArgMatches::get_one(&$0, v5).cloned()"
    let v7 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let v8 : US0 option = None
    let _v8 = ref v8 
    let v9 : US0 option ref = _v8 
    let v10 : (US0 option -> US0 option ref) = closure1(v9)
    let v11 : unit = ()
    let v12 : (unit -> unit) = closure2(v7, v10)
    let v13 : unit = (fun () -> v12 (); v11) ()
    let v16 : US0 option = _v8.Value 
    let v27 : US0 = US0_1
    let v28 : US0 = v16 |> Option.defaultValue v27 
    let v35 : std_string_String =
        match v28 with
        | US0_1 -> (* None *)
            failwith<std_string_String> "Option does not have a value."
        | US0_0(v32) -> (* Some *)
            v32
    let v36 : string = "fable_library_rust::String_::fromString($0)"
    let v37 : string = Fable.Core.RustInterop.emitRustExpr v35 v36 
    let v38 : unit = ()
    let v39 : (unit -> unit) = closure15(v37)
    let v40 : unit = (fun () -> v39 (); v38) ()
    let v834 : string = "std::fs::read(&*$0)"
    let v835 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v37 v834 
    let v836 : string = "$0?"
    let v837 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v835 v836 
    let v838 : uint8 = 1uy
    let v839 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method14(v837, v838)
    let v840 : string = "v839.await"
    let v841 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v840 
    let v842 : (anyhow_Error -> std_string_String) = method18()
    let v843 : string = "$0.map_err(|x| $1(x))"
    let v844 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v841, v842) v843 
    let v845 : (US4 -> US6) = closure30()
    let v846 : (std_string_String -> US6) = closure31()
    let v847 : US6 = match v844 with Ok x -> v845 x | Error x -> v846 x
    let v51613 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> =
        match v847 with
        | US6_1(v1730) -> (* Error *)
            let v1731 : unit = ()
            let v1732 : (unit -> unit) = closure32(v1730)
            let v1733 : unit = (fun () -> v1732 (); v1731) ()
            let v2588 : uint8 = 2uy
            let v2589 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method14(v837, v2588)
            let v2590 : string = "v2589.await"
            let v2591 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v2590 
            let v2592 : (anyhow_Error -> std_string_String) = method18()
            let v2593 : string = "$0.map_err(|x| $1(x))"
            let v2594 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v2591, v2592) v2593 
            let v2595 : US6 = match v2594 with Ok x -> v845 x | Error x -> v846 x
            match v2595 with
            | US6_1(v3478) -> (* Error *)
                let v3479 : unit = ()
                let v3480 : (unit -> unit) = closure33(v3478)
                let v3481 : unit = (fun () -> v3480 (); v3479) ()
                let v4336 : uint8 = 3uy
                let v4337 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method14(v837, v4336)
                let v4338 : string = "v4337.await"
                let v4339 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v4338 
                let v4340 : (anyhow_Error -> std_string_String) = method18()
                let v4341 : string = "$0.map_err(|x| $1(x))"
                let v4342 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v4339, v4340) v4341 
                let v4343 : US6 = match v4342 with Ok x -> v845 x | Error x -> v846 x
                match v4343 with
                | US6_1(v5226) -> (* Error *)
                    let v5227 : unit = ()
                    let v5228 : (unit -> unit) = closure34(v5226)
                    let v5229 : unit = (fun () -> v5228 (); v5227) ()
                    let v6084 : uint8 = 4uy
                    let v6085 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method14(v837, v6084)
                    let v6086 : string = "v6085.await"
                    let v6087 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v6086 
                    let v6088 : (anyhow_Error -> std_string_String) = method18()
                    let v6089 : string = "$0.map_err(|x| $1(x))"
                    let v6090 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v6087, v6088) v6089 
                    let v6091 : US6 = match v6090 with Ok x -> v845 x | Error x -> v846 x
                    match v6091 with
                    | US6_1(v6974) -> (* Error *)
                        let v6975 : unit = ()
                        let v6976 : (unit -> unit) = closure35(v6974)
                        let v6977 : unit = (fun () -> v6976 (); v6975) ()
                        let v7832 : uint8 = 5uy
                        let v7833 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method14(v837, v7832)
                        let v7834 : string = "v7833.await"
                        let v7835 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v7834 
                        let v7836 : (anyhow_Error -> std_string_String) = method18()
                        let v7837 : string = "$0.map_err(|x| $1(x))"
                        let v7838 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v7835, v7836) v7837 
                        let v7839 : US6 = match v7838 with Ok x -> v845 x | Error x -> v846 x
                        match v7839 with
                        | US6_1(v8722) -> (* Error *)
                            let v8723 : unit = ()
                            let v8724 : (unit -> unit) = closure36(v8722)
                            let v8725 : unit = (fun () -> v8724 (); v8723) ()
                            let v9580 : uint8 = 6uy
                            let v9581 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method14(v837, v9580)
                            let v9582 : string = "v9581.await"
                            let v9583 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v9582 
                            let v9584 : (anyhow_Error -> std_string_String) = method18()
                            let v9585 : string = "$0.map_err(|x| $1(x))"
                            let v9586 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v9583, v9584) v9585 
                            let v9587 : US6 = match v9586 with Ok x -> v845 x | Error x -> v846 x
                            match v9587 with
                            | US6_1(v10470) -> (* Error *)
                                let v10471 : unit = ()
                                let v10472 : (unit -> unit) = closure37(v10470)
                                let v10473 : unit = (fun () -> v10472 (); v10471) ()
                                let v11328 : uint8 = 7uy
                                let v11329 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method14(v837, v11328)
                                let v11330 : string = "v11329.await"
                                let v11331 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v11330 
                                let v11332 : (anyhow_Error -> std_string_String) = method18()
                                let v11333 : string = "$0.map_err(|x| $1(x))"
                                let v11334 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v11331, v11332) v11333 
                                let v11335 : US6 = match v11334 with Ok x -> v845 x | Error x -> v846 x
                                match v11335 with
                                | US6_1(v12218) -> (* Error *)
                                    let v12219 : unit = ()
                                    let v12220 : (unit -> unit) = closure38(v12218)
                                    let v12221 : unit = (fun () -> v12220 (); v12219) ()
                                    let v13076 : uint8 = 8uy
                                    let v13077 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method14(v837, v13076)
                                    let v13078 : string = "v13077.await"
                                    let v13079 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v13078 
                                    let v13080 : (anyhow_Error -> std_string_String) = method18()
                                    let v13081 : string = "$0.map_err(|x| $1(x))"
                                    let v13082 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v13079, v13080) v13081 
                                    let v13083 : US6 = match v13082 with Ok x -> v845 x | Error x -> v846 x
                                    match v13083 with
                                    | US6_1(v13966) -> (* Error *)
                                        let v13967 : unit = ()
                                        let v13968 : (unit -> unit) = closure39(v13966)
                                        let v13969 : unit = (fun () -> v13968 (); v13967) ()
                                        let v14824 : uint8 = 9uy
                                        let v14825 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method14(v837, v14824)
                                        let v14826 : string = "v14825.await"
                                        let v14827 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v14826 
                                        let v14828 : (anyhow_Error -> std_string_String) = method18()
                                        let v14829 : string = "$0.map_err(|x| $1(x))"
                                        let v14830 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v14827, v14828) v14829 
                                        let v14831 : US6 = match v14830 with Ok x -> v845 x | Error x -> v846 x
                                        match v14831 with
                                        | US6_1(v15714) -> (* Error *)
                                            let v15715 : unit = ()
                                            let v15716 : (unit -> unit) = closure40(v15714)
                                            let v15717 : unit = (fun () -> v15716 (); v15715) ()
                                            let v16572 : uint8 = 10uy
                                            let v16573 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method14(v837, v16572)
                                            let v16574 : string = "v16573.await"
                                            let v16575 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v16574 
                                            let v16576 : (anyhow_Error -> std_string_String) = method18()
                                            let v16577 : string = "$0.map_err(|x| $1(x))"
                                            let v16578 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v16575, v16576) v16577 
                                            let v16579 : US6 = match v16578 with Ok x -> v845 x | Error x -> v846 x
                                            match v16579 with
                                            | US6_1(v17462) -> (* Error *)
                                                let v17463 : unit = ()
                                                let v17464 : (unit -> unit) = closure41(v17462)
                                                let v17465 : unit = (fun () -> v17464 (); v17463) ()
                                                let v18320 : uint8 = 11uy
                                                let v18321 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method14(v837, v18320)
                                                let v18322 : string = "v18321.await"
                                                let v18323 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v18322 
                                                let v18324 : (anyhow_Error -> std_string_String) = method18()
                                                let v18325 : string = "$0.map_err(|x| $1(x))"
                                                let v18326 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v18323, v18324) v18325 
                                                let v18327 : US6 = match v18326 with Ok x -> v845 x | Error x -> v846 x
                                                match v18327 with
                                                | US6_1(v19210) -> (* Error *)
                                                    let v19211 : unit = ()
                                                    let v19212 : (unit -> unit) = closure42(v19210)
                                                    let v19213 : unit = (fun () -> v19212 (); v19211) ()
                                                    let v20068 : uint8 = 12uy
                                                    let v20069 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method14(v837, v20068)
                                                    let v20070 : string = "v20069.await"
                                                    let v20071 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v20070 
                                                    let v20072 : (anyhow_Error -> std_string_String) = method18()
                                                    let v20073 : string = "$0.map_err(|x| $1(x))"
                                                    let v20074 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v20071, v20072) v20073 
                                                    let v20075 : US6 = match v20074 with Ok x -> v845 x | Error x -> v846 x
                                                    match v20075 with
                                                    | US6_1(v20958) -> (* Error *)
                                                        let v20959 : unit = ()
                                                        let v20960 : (unit -> unit) = closure43(v20958)
                                                        let v20961 : unit = (fun () -> v20960 (); v20959) ()
                                                        let v21816 : uint8 = 13uy
                                                        let v21817 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method14(v837, v21816)
                                                        let v21818 : string = "v21817.await"
                                                        let v21819 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v21818 
                                                        let v21820 : (anyhow_Error -> std_string_String) = method18()
                                                        let v21821 : string = "$0.map_err(|x| $1(x))"
                                                        let v21822 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v21819, v21820) v21821 
                                                        let v21823 : US6 = match v21822 with Ok x -> v845 x | Error x -> v846 x
                                                        match v21823 with
                                                        | US6_1(v22706) -> (* Error *)
                                                            let v22707 : unit = ()
                                                            let v22708 : (unit -> unit) = closure44(v22706)
                                                            let v22709 : unit = (fun () -> v22708 (); v22707) ()
                                                            let v23564 : uint8 = 14uy
                                                            let v23565 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method14(v837, v23564)
                                                            let v23566 : string = "v23565.await"
                                                            let v23567 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v23566 
                                                            let v23568 : (anyhow_Error -> std_string_String) = method18()
                                                            let v23569 : string = "$0.map_err(|x| $1(x))"
                                                            let v23570 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v23567, v23568) v23569 
                                                            let v23571 : US6 = match v23570 with Ok x -> v845 x | Error x -> v846 x
                                                            match v23571 with
                                                            | US6_1(v24454) -> (* Error *)
                                                                let v24455 : unit = ()
                                                                let v24456 : (unit -> unit) = closure45(v24454)
                                                                let v24457 : unit = (fun () -> v24456 (); v24455) ()
                                                                let v25312 : uint8 = 15uy
                                                                let v25313 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method14(v837, v25312)
                                                                let v25314 : string = "v25313.await"
                                                                let v25315 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v25314 
                                                                let v25316 : (anyhow_Error -> std_string_String) = method18()
                                                                let v25317 : string = "$0.map_err(|x| $1(x))"
                                                                let v25318 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v25315, v25316) v25317 
                                                                let v25319 : US6 = match v25318 with Ok x -> v845 x | Error x -> v846 x
                                                                match v25319 with
                                                                | US6_1(v26202) -> (* Error *)
                                                                    let v26203 : unit = ()
                                                                    let v26204 : (unit -> unit) = closure46(v26202)
                                                                    let v26205 : unit = (fun () -> v26204 (); v26203) ()
                                                                    let v27060 : uint8 = 16uy
                                                                    let v27061 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method14(v837, v27060)
                                                                    let v27062 : string = "v27061.await"
                                                                    let v27063 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v27062 
                                                                    let v27064 : (anyhow_Error -> std_string_String) = method18()
                                                                    let v27065 : string = "$0.map_err(|x| $1(x))"
                                                                    let v27066 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v27063, v27064) v27065 
                                                                    let v27067 : US6 = match v27066 with Ok x -> v845 x | Error x -> v846 x
                                                                    match v27067 with
                                                                    | US6_1(v27950) -> (* Error *)
                                                                        let v27951 : unit = ()
                                                                        let v27952 : (unit -> unit) = closure47(v27950)
                                                                        let v27953 : unit = (fun () -> v27952 (); v27951) ()
                                                                        let v28808 : uint8 = 17uy
                                                                        let v28809 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method14(v837, v28808)
                                                                        let v28810 : string = "v28809.await"
                                                                        let v28811 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v28810 
                                                                        let v28812 : (anyhow_Error -> std_string_String) = method18()
                                                                        let v28813 : string = "$0.map_err(|x| $1(x))"
                                                                        let v28814 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v28811, v28812) v28813 
                                                                        let v28815 : US6 = match v28814 with Ok x -> v845 x | Error x -> v846 x
                                                                        match v28815 with
                                                                        | US6_1(v29698) -> (* Error *)
                                                                            let v29699 : unit = ()
                                                                            let v29700 : (unit -> unit) = closure48(v29698)
                                                                            let v29701 : unit = (fun () -> v29700 (); v29699) ()
                                                                            let v30556 : uint8 = 18uy
                                                                            let v30557 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method14(v837, v30556)
                                                                            let v30558 : string = "v30557.await"
                                                                            let v30559 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v30558 
                                                                            let v30560 : (anyhow_Error -> std_string_String) = method18()
                                                                            let v30561 : string = "$0.map_err(|x| $1(x))"
                                                                            let v30562 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v30559, v30560) v30561 
                                                                            let v30563 : US6 = match v30562 with Ok x -> v845 x | Error x -> v846 x
                                                                            match v30563 with
                                                                            | US6_1(v31446) -> (* Error *)
                                                                                let v31447 : unit = ()
                                                                                let v31448 : (unit -> unit) = closure49(v31446)
                                                                                let v31449 : unit = (fun () -> v31448 (); v31447) ()
                                                                                let v32304 : uint8 = 19uy
                                                                                let v32305 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method14(v837, v32304)
                                                                                let v32306 : string = "v32305.await"
                                                                                let v32307 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v32306 
                                                                                let v32308 : (anyhow_Error -> std_string_String) = method18()
                                                                                let v32309 : string = "$0.map_err(|x| $1(x))"
                                                                                let v32310 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v32307, v32308) v32309 
                                                                                let v32311 : US6 = match v32310 with Ok x -> v845 x | Error x -> v846 x
                                                                                match v32311 with
                                                                                | US6_1(v33194) -> (* Error *)
                                                                                    let v33195 : unit = ()
                                                                                    let v33196 : (unit -> unit) = closure50(v33194)
                                                                                    let v33197 : unit = (fun () -> v33196 (); v33195) ()
                                                                                    let v34052 : uint8 = 20uy
                                                                                    let v34053 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method14(v837, v34052)
                                                                                    let v34054 : string = "v34053.await"
                                                                                    let v34055 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v34054 
                                                                                    let v34056 : (anyhow_Error -> std_string_String) = method18()
                                                                                    let v34057 : string = "$0.map_err(|x| $1(x))"
                                                                                    let v34058 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v34055, v34056) v34057 
                                                                                    let v34059 : US6 = match v34058 with Ok x -> v845 x | Error x -> v846 x
                                                                                    match v34059 with
                                                                                    | US6_1(v34942) -> (* Error *)
                                                                                        let v34943 : unit = ()
                                                                                        let v34944 : (unit -> unit) = closure51(v34942)
                                                                                        let v34945 : unit = (fun () -> v34944 (); v34943) ()
                                                                                        let v35800 : uint8 = 21uy
                                                                                        let v35801 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method14(v837, v35800)
                                                                                        let v35802 : string = "v35801.await"
                                                                                        let v35803 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v35802 
                                                                                        let v35804 : (anyhow_Error -> std_string_String) = method18()
                                                                                        let v35805 : string = "$0.map_err(|x| $1(x))"
                                                                                        let v35806 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v35803, v35804) v35805 
                                                                                        let v35807 : US6 = match v35806 with Ok x -> v845 x | Error x -> v846 x
                                                                                        match v35807 with
                                                                                        | US6_1(v36690) -> (* Error *)
                                                                                            let v36691 : unit = ()
                                                                                            let v36692 : (unit -> unit) = closure52(v36690)
                                                                                            let v36693 : unit = (fun () -> v36692 (); v36691) ()
                                                                                            let v37548 : uint8 = 22uy
                                                                                            let v37549 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method14(v837, v37548)
                                                                                            let v37550 : string = "v37549.await"
                                                                                            let v37551 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v37550 
                                                                                            let v37552 : (anyhow_Error -> std_string_String) = method18()
                                                                                            let v37553 : string = "$0.map_err(|x| $1(x))"
                                                                                            let v37554 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v37551, v37552) v37553 
                                                                                            let v37555 : US6 = match v37554 with Ok x -> v845 x | Error x -> v846 x
                                                                                            match v37555 with
                                                                                            | US6_1(v38438) -> (* Error *)
                                                                                                let v38439 : unit = ()
                                                                                                let v38440 : (unit -> unit) = closure53(v38438)
                                                                                                let v38441 : unit = (fun () -> v38440 (); v38439) ()
                                                                                                let v39296 : uint8 = 23uy
                                                                                                let v39297 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method14(v837, v39296)
                                                                                                let v39298 : string = "v39297.await"
                                                                                                let v39299 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v39298 
                                                                                                let v39300 : (anyhow_Error -> std_string_String) = method18()
                                                                                                let v39301 : string = "$0.map_err(|x| $1(x))"
                                                                                                let v39302 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v39299, v39300) v39301 
                                                                                                let v39303 : US6 = match v39302 with Ok x -> v845 x | Error x -> v846 x
                                                                                                match v39303 with
                                                                                                | US6_1(v40186) -> (* Error *)
                                                                                                    let v40187 : unit = ()
                                                                                                    let v40188 : (unit -> unit) = closure54(v40186)
                                                                                                    let v40189 : unit = (fun () -> v40188 (); v40187) ()
                                                                                                    let v41044 : uint8 = 24uy
                                                                                                    let v41045 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method14(v837, v41044)
                                                                                                    let v41046 : string = "v41045.await"
                                                                                                    let v41047 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v41046 
                                                                                                    let v41048 : (anyhow_Error -> std_string_String) = method18()
                                                                                                    let v41049 : string = "$0.map_err(|x| $1(x))"
                                                                                                    let v41050 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v41047, v41048) v41049 
                                                                                                    let v41051 : US6 = match v41050 with Ok x -> v845 x | Error x -> v846 x
                                                                                                    match v41051 with
                                                                                                    | US6_1(v41934) -> (* Error *)
                                                                                                        let v41935 : unit = ()
                                                                                                        let v41936 : (unit -> unit) = closure55(v41934)
                                                                                                        let v41937 : unit = (fun () -> v41936 (); v41935) ()
                                                                                                        let v42792 : uint8 = 25uy
                                                                                                        let v42793 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method14(v837, v42792)
                                                                                                        let v42794 : string = "v42793.await"
                                                                                                        let v42795 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v42794 
                                                                                                        let v42796 : (anyhow_Error -> std_string_String) = method18()
                                                                                                        let v42797 : string = "$0.map_err(|x| $1(x))"
                                                                                                        let v42798 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v42795, v42796) v42797 
                                                                                                        let v42799 : US6 = match v42798 with Ok x -> v845 x | Error x -> v846 x
                                                                                                        match v42799 with
                                                                                                        | US6_1(v43682) -> (* Error *)
                                                                                                            let v43683 : unit = ()
                                                                                                            let v43684 : (unit -> unit) = closure56(v43682)
                                                                                                            let v43685 : unit = (fun () -> v43684 (); v43683) ()
                                                                                                            let v44540 : uint8 = 26uy
                                                                                                            let v44541 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method14(v837, v44540)
                                                                                                            let v44542 : string = "v44541.await"
                                                                                                            let v44543 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v44542 
                                                                                                            let v44544 : (anyhow_Error -> std_string_String) = method18()
                                                                                                            let v44545 : string = "$0.map_err(|x| $1(x))"
                                                                                                            let v44546 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v44543, v44544) v44545 
                                                                                                            let v44547 : US6 = match v44546 with Ok x -> v845 x | Error x -> v846 x
                                                                                                            match v44547 with
                                                                                                            | US6_1(v45430) -> (* Error *)
                                                                                                                let v45431 : unit = ()
                                                                                                                let v45432 : (unit -> unit) = closure57(v45430)
                                                                                                                let v45433 : unit = (fun () -> v45432 (); v45431) ()
                                                                                                                let v46288 : uint8 = 27uy
                                                                                                                let v46289 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method14(v837, v46288)
                                                                                                                let v46290 : string = "v46289.await"
                                                                                                                let v46291 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v46290 
                                                                                                                let v46292 : (anyhow_Error -> std_string_String) = method18()
                                                                                                                let v46293 : string = "$0.map_err(|x| $1(x))"
                                                                                                                let v46294 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v46291, v46292) v46293 
                                                                                                                let v46295 : US6 = match v46294 with Ok x -> v845 x | Error x -> v846 x
                                                                                                                match v46295 with
                                                                                                                | US6_1(v47178) -> (* Error *)
                                                                                                                    let v47179 : unit = ()
                                                                                                                    let v47180 : (unit -> unit) = closure58(v47178)
                                                                                                                    let v47181 : unit = (fun () -> v47180 (); v47179) ()
                                                                                                                    let v48036 : uint8 = 28uy
                                                                                                                    let v48037 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method14(v837, v48036)
                                                                                                                    let v48038 : string = "v48037.await"
                                                                                                                    let v48039 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v48038 
                                                                                                                    let v48040 : (anyhow_Error -> std_string_String) = method18()
                                                                                                                    let v48041 : string = "$0.map_err(|x| $1(x))"
                                                                                                                    let v48042 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v48039, v48040) v48041 
                                                                                                                    let v48043 : US6 = match v48042 with Ok x -> v845 x | Error x -> v846 x
                                                                                                                    match v48043 with
                                                                                                                    | US6_1(v48926) -> (* Error *)
                                                                                                                        let v48927 : unit = ()
                                                                                                                        let v48928 : (unit -> unit) = closure59(v48926)
                                                                                                                        let v48929 : unit = (fun () -> v48928 (); v48927) ()
                                                                                                                        let v49784 : uint8 = 29uy
                                                                                                                        let v49785 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method14(v837, v49784)
                                                                                                                        let v49786 : string = "v49785.await"
                                                                                                                        let v49787 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v49786 
                                                                                                                        let v49788 : (anyhow_Error -> std_string_String) = method18()
                                                                                                                        let v49789 : string = "$0.map_err(|x| $1(x))"
                                                                                                                        let v49790 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v49787, v49788) v49789 
                                                                                                                        let v49791 : US6 = match v49790 with Ok x -> v845 x | Error x -> v846 x
                                                                                                                        match v49791 with
                                                                                                                        | US6_1(v50674) -> (* Error *)
                                                                                                                            let v50675 : unit = ()
                                                                                                                            let v50676 : (unit -> unit) = closure60(v50674)
                                                                                                                            let v50677 : unit = (fun () -> v50676 (); v50675) ()
                                                                                                                            let v51532 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                            let v51533 : bool = Fable.Core.RustInterop.emitRustExpr () v51532 
                                                                                                                            let v51534 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                            let v51535 : bool = Fable.Core.RustInterop.emitRustExpr () v51534 
                                                                                                                            let v51536 : uint8 = method19()
                                                                                                                            let v51537 : string = ""
                                                                                                                            let v51538 : string = "}"
                                                                                                                            let v51539 : string = v51537 + v51538 
                                                                                                                            let v51540 : string = "true; v51536 " + v51539 + "); " + v51537 + " // rust.fix_closure'"
                                                                                                                            let v51541 : bool = Fable.Core.RustInterop.emitRustExpr () v51540 
                                                                                                                            let v51542 : string = "__future_init"
                                                                                                                            let v51543 : _ = Fable.Core.RustInterop.emitRustExpr () v51542 
                                                                                                                            let v51544 : string = "v51543"
                                                                                                                            let v51545 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v51544 
                                                                                                                            let v51546 : string = "v51545.await"
                                                                                                                            let v51547 : uint8 = Fable.Core.RustInterop.emitRustExpr () v51546 
                                                                                                                            let v51548 : US7 = method20(v51547)
                                                                                                                            let v51549 : string = v51537 + v51538 
                                                                                                                            let v51550 : string = "true; v51548 " + v51549 + "); " + v51537 + " // rust.fix_closure'"
                                                                                                                            let v51551 : bool = Fable.Core.RustInterop.emitRustExpr () v51550 
                                                                                                                            let v51552 : string = "__future_init"
                                                                                                                            let v51553 : _ = Fable.Core.RustInterop.emitRustExpr () v51552 
                                                                                                                            let v51554 : string = "v51553"
                                                                                                                            let v51555 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v51554 
                                                                                                                            v51555
                                                                                                                        | US6_0(v49792) -> (* Ok *)
                                                                                                                            match v49792 with
                                                                                                                            | US4_1 -> (* None *)
                                                                                                                                let v49793 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                                let v49794 : bool = Fable.Core.RustInterop.emitRustExpr () v49793 
                                                                                                                                let v49795 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                                let v49796 : bool = Fable.Core.RustInterop.emitRustExpr () v49795 
                                                                                                                                let v49797 : uint8 = method21()
                                                                                                                                let v49798 : string = ""
                                                                                                                                let v49799 : string = "}"
                                                                                                                                let v49800 : string = v49798 + v49799 
                                                                                                                                let v49801 : string = "true; v49797 " + v49800 + "); " + v49798 + " // rust.fix_closure'"
                                                                                                                                let v49802 : bool = Fable.Core.RustInterop.emitRustExpr () v49801 
                                                                                                                                let v49803 : string = "__future_init"
                                                                                                                                let v49804 : _ = Fable.Core.RustInterop.emitRustExpr () v49803 
                                                                                                                                let v49805 : string = "v49804"
                                                                                                                                let v49806 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v49805 
                                                                                                                                let v49807 : string = "v49806.await"
                                                                                                                                let v49808 : uint8 = Fable.Core.RustInterop.emitRustExpr () v49807 
                                                                                                                                let v49809 : US7 = method22(v49808)
                                                                                                                                let v49810 : string = v49798 + v49799 
                                                                                                                                let v49811 : string = "true; v49809 " + v49810 + "); " + v49798 + " // rust.fix_closure'"
                                                                                                                                let v49812 : bool = Fable.Core.RustInterop.emitRustExpr () v49811 
                                                                                                                                let v49813 : string = "__future_init"
                                                                                                                                let v49814 : _ = Fable.Core.RustInterop.emitRustExpr () v49813 
                                                                                                                                let v49815 : string = "v49814"
                                                                                                                                let v49816 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v49815 
                                                                                                                                v49816
                                                                                                                            | US4_0(v49817) -> (* Some *)
                                                                                                                                let v49818 : unit = ()
                                                                                                                                let v49819 : (unit -> unit) = closure61(v49817)
                                                                                                                                let v49820 : unit = (fun () -> v49819 (); v49818) ()
                                                                                                                                let v50648 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                                let v50649 : bool = Fable.Core.RustInterop.emitRustExpr () v50648 
                                                                                                                                let v50650 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                                let v50651 : bool = Fable.Core.RustInterop.emitRustExpr () v50650 
                                                                                                                                let v50652 : uint8 = method21()
                                                                                                                                let v50653 : string = ""
                                                                                                                                let v50654 : string = "}"
                                                                                                                                let v50655 : string = v50653 + v50654 
                                                                                                                                let v50656 : string = "true; v50652 " + v50655 + "); " + v50653 + " // rust.fix_closure'"
                                                                                                                                let v50657 : bool = Fable.Core.RustInterop.emitRustExpr () v50656 
                                                                                                                                let v50658 : string = "__future_init"
                                                                                                                                let v50659 : _ = Fable.Core.RustInterop.emitRustExpr () v50658 
                                                                                                                                let v50660 : string = "v50659"
                                                                                                                                let v50661 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v50660 
                                                                                                                                let v50662 : string = "v50661.await"
                                                                                                                                let v50663 : uint8 = Fable.Core.RustInterop.emitRustExpr () v50662 
                                                                                                                                let v50664 : US7 = method20(v50663)
                                                                                                                                let v50665 : string = v50653 + v50654 
                                                                                                                                let v50666 : string = "true; v50664 " + v50665 + "); " + v50653 + " // rust.fix_closure'"
                                                                                                                                let v50667 : bool = Fable.Core.RustInterop.emitRustExpr () v50666 
                                                                                                                                let v50668 : string = "__future_init"
                                                                                                                                let v50669 : _ = Fable.Core.RustInterop.emitRustExpr () v50668 
                                                                                                                                let v50670 : string = "v50669"
                                                                                                                                let v50671 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v50670 
                                                                                                                                v50671
                                                                                                                    | US6_0(v48044) -> (* Ok *)
                                                                                                                        match v48044 with
                                                                                                                        | US4_1 -> (* None *)
                                                                                                                            let v48045 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                            let v48046 : bool = Fable.Core.RustInterop.emitRustExpr () v48045 
                                                                                                                            let v48047 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                            let v48048 : bool = Fable.Core.RustInterop.emitRustExpr () v48047 
                                                                                                                            let v48049 : uint8 = method23()
                                                                                                                            let v48050 : string = ""
                                                                                                                            let v48051 : string = "}"
                                                                                                                            let v48052 : string = v48050 + v48051 
                                                                                                                            let v48053 : string = "true; v48049 " + v48052 + "); " + v48050 + " // rust.fix_closure'"
                                                                                                                            let v48054 : bool = Fable.Core.RustInterop.emitRustExpr () v48053 
                                                                                                                            let v48055 : string = "__future_init"
                                                                                                                            let v48056 : _ = Fable.Core.RustInterop.emitRustExpr () v48055 
                                                                                                                            let v48057 : string = "v48056"
                                                                                                                            let v48058 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v48057 
                                                                                                                            let v48059 : string = "v48058.await"
                                                                                                                            let v48060 : uint8 = Fable.Core.RustInterop.emitRustExpr () v48059 
                                                                                                                            let v48061 : US7 = method22(v48060)
                                                                                                                            let v48062 : string = v48050 + v48051 
                                                                                                                            let v48063 : string = "true; v48061 " + v48062 + "); " + v48050 + " // rust.fix_closure'"
                                                                                                                            let v48064 : bool = Fable.Core.RustInterop.emitRustExpr () v48063 
                                                                                                                            let v48065 : string = "__future_init"
                                                                                                                            let v48066 : _ = Fable.Core.RustInterop.emitRustExpr () v48065 
                                                                                                                            let v48067 : string = "v48066"
                                                                                                                            let v48068 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v48067 
                                                                                                                            v48068
                                                                                                                        | US4_0(v48069) -> (* Some *)
                                                                                                                            let v48070 : unit = ()
                                                                                                                            let v48071 : (unit -> unit) = closure62(v48069)
                                                                                                                            let v48072 : unit = (fun () -> v48071 (); v48070) ()
                                                                                                                            let v48900 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                            let v48901 : bool = Fable.Core.RustInterop.emitRustExpr () v48900 
                                                                                                                            let v48902 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                            let v48903 : bool = Fable.Core.RustInterop.emitRustExpr () v48902 
                                                                                                                            let v48904 : uint8 = method23()
                                                                                                                            let v48905 : string = ""
                                                                                                                            let v48906 : string = "}"
                                                                                                                            let v48907 : string = v48905 + v48906 
                                                                                                                            let v48908 : string = "true; v48904 " + v48907 + "); " + v48905 + " // rust.fix_closure'"
                                                                                                                            let v48909 : bool = Fable.Core.RustInterop.emitRustExpr () v48908 
                                                                                                                            let v48910 : string = "__future_init"
                                                                                                                            let v48911 : _ = Fable.Core.RustInterop.emitRustExpr () v48910 
                                                                                                                            let v48912 : string = "v48911"
                                                                                                                            let v48913 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v48912 
                                                                                                                            let v48914 : string = "v48913.await"
                                                                                                                            let v48915 : uint8 = Fable.Core.RustInterop.emitRustExpr () v48914 
                                                                                                                            let v48916 : US7 = method20(v48915)
                                                                                                                            let v48917 : string = v48905 + v48906 
                                                                                                                            let v48918 : string = "true; v48916 " + v48917 + "); " + v48905 + " // rust.fix_closure'"
                                                                                                                            let v48919 : bool = Fable.Core.RustInterop.emitRustExpr () v48918 
                                                                                                                            let v48920 : string = "__future_init"
                                                                                                                            let v48921 : _ = Fable.Core.RustInterop.emitRustExpr () v48920 
                                                                                                                            let v48922 : string = "v48921"
                                                                                                                            let v48923 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v48922 
                                                                                                                            v48923
                                                                                                                | US6_0(v46296) -> (* Ok *)
                                                                                                                    match v46296 with
                                                                                                                    | US4_1 -> (* None *)
                                                                                                                        let v46297 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                        let v46298 : bool = Fable.Core.RustInterop.emitRustExpr () v46297 
                                                                                                                        let v46299 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                        let v46300 : bool = Fable.Core.RustInterop.emitRustExpr () v46299 
                                                                                                                        let v46301 : uint8 = method24()
                                                                                                                        let v46302 : string = ""
                                                                                                                        let v46303 : string = "}"
                                                                                                                        let v46304 : string = v46302 + v46303 
                                                                                                                        let v46305 : string = "true; v46301 " + v46304 + "); " + v46302 + " // rust.fix_closure'"
                                                                                                                        let v46306 : bool = Fable.Core.RustInterop.emitRustExpr () v46305 
                                                                                                                        let v46307 : string = "__future_init"
                                                                                                                        let v46308 : _ = Fable.Core.RustInterop.emitRustExpr () v46307 
                                                                                                                        let v46309 : string = "v46308"
                                                                                                                        let v46310 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v46309 
                                                                                                                        let v46311 : string = "v46310.await"
                                                                                                                        let v46312 : uint8 = Fable.Core.RustInterop.emitRustExpr () v46311 
                                                                                                                        let v46313 : US7 = method22(v46312)
                                                                                                                        let v46314 : string = v46302 + v46303 
                                                                                                                        let v46315 : string = "true; v46313 " + v46314 + "); " + v46302 + " // rust.fix_closure'"
                                                                                                                        let v46316 : bool = Fable.Core.RustInterop.emitRustExpr () v46315 
                                                                                                                        let v46317 : string = "__future_init"
                                                                                                                        let v46318 : _ = Fable.Core.RustInterop.emitRustExpr () v46317 
                                                                                                                        let v46319 : string = "v46318"
                                                                                                                        let v46320 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v46319 
                                                                                                                        v46320
                                                                                                                    | US4_0(v46321) -> (* Some *)
                                                                                                                        let v46322 : unit = ()
                                                                                                                        let v46323 : (unit -> unit) = closure63(v46321)
                                                                                                                        let v46324 : unit = (fun () -> v46323 (); v46322) ()
                                                                                                                        let v47152 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                        let v47153 : bool = Fable.Core.RustInterop.emitRustExpr () v47152 
                                                                                                                        let v47154 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                        let v47155 : bool = Fable.Core.RustInterop.emitRustExpr () v47154 
                                                                                                                        let v47156 : uint8 = method24()
                                                                                                                        let v47157 : string = ""
                                                                                                                        let v47158 : string = "}"
                                                                                                                        let v47159 : string = v47157 + v47158 
                                                                                                                        let v47160 : string = "true; v47156 " + v47159 + "); " + v47157 + " // rust.fix_closure'"
                                                                                                                        let v47161 : bool = Fable.Core.RustInterop.emitRustExpr () v47160 
                                                                                                                        let v47162 : string = "__future_init"
                                                                                                                        let v47163 : _ = Fable.Core.RustInterop.emitRustExpr () v47162 
                                                                                                                        let v47164 : string = "v47163"
                                                                                                                        let v47165 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v47164 
                                                                                                                        let v47166 : string = "v47165.await"
                                                                                                                        let v47167 : uint8 = Fable.Core.RustInterop.emitRustExpr () v47166 
                                                                                                                        let v47168 : US7 = method20(v47167)
                                                                                                                        let v47169 : string = v47157 + v47158 
                                                                                                                        let v47170 : string = "true; v47168 " + v47169 + "); " + v47157 + " // rust.fix_closure'"
                                                                                                                        let v47171 : bool = Fable.Core.RustInterop.emitRustExpr () v47170 
                                                                                                                        let v47172 : string = "__future_init"
                                                                                                                        let v47173 : _ = Fable.Core.RustInterop.emitRustExpr () v47172 
                                                                                                                        let v47174 : string = "v47173"
                                                                                                                        let v47175 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v47174 
                                                                                                                        v47175
                                                                                                            | US6_0(v44548) -> (* Ok *)
                                                                                                                match v44548 with
                                                                                                                | US4_1 -> (* None *)
                                                                                                                    let v44549 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                    let v44550 : bool = Fable.Core.RustInterop.emitRustExpr () v44549 
                                                                                                                    let v44551 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                    let v44552 : bool = Fable.Core.RustInterop.emitRustExpr () v44551 
                                                                                                                    let v44553 : uint8 = method25()
                                                                                                                    let v44554 : string = ""
                                                                                                                    let v44555 : string = "}"
                                                                                                                    let v44556 : string = v44554 + v44555 
                                                                                                                    let v44557 : string = "true; v44553 " + v44556 + "); " + v44554 + " // rust.fix_closure'"
                                                                                                                    let v44558 : bool = Fable.Core.RustInterop.emitRustExpr () v44557 
                                                                                                                    let v44559 : string = "__future_init"
                                                                                                                    let v44560 : _ = Fable.Core.RustInterop.emitRustExpr () v44559 
                                                                                                                    let v44561 : string = "v44560"
                                                                                                                    let v44562 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v44561 
                                                                                                                    let v44563 : string = "v44562.await"
                                                                                                                    let v44564 : uint8 = Fable.Core.RustInterop.emitRustExpr () v44563 
                                                                                                                    let v44565 : US7 = method22(v44564)
                                                                                                                    let v44566 : string = v44554 + v44555 
                                                                                                                    let v44567 : string = "true; v44565 " + v44566 + "); " + v44554 + " // rust.fix_closure'"
                                                                                                                    let v44568 : bool = Fable.Core.RustInterop.emitRustExpr () v44567 
                                                                                                                    let v44569 : string = "__future_init"
                                                                                                                    let v44570 : _ = Fable.Core.RustInterop.emitRustExpr () v44569 
                                                                                                                    let v44571 : string = "v44570"
                                                                                                                    let v44572 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v44571 
                                                                                                                    v44572
                                                                                                                | US4_0(v44573) -> (* Some *)
                                                                                                                    let v44574 : unit = ()
                                                                                                                    let v44575 : (unit -> unit) = closure64(v44573)
                                                                                                                    let v44576 : unit = (fun () -> v44575 (); v44574) ()
                                                                                                                    let v45404 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                    let v45405 : bool = Fable.Core.RustInterop.emitRustExpr () v45404 
                                                                                                                    let v45406 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                    let v45407 : bool = Fable.Core.RustInterop.emitRustExpr () v45406 
                                                                                                                    let v45408 : uint8 = method25()
                                                                                                                    let v45409 : string = ""
                                                                                                                    let v45410 : string = "}"
                                                                                                                    let v45411 : string = v45409 + v45410 
                                                                                                                    let v45412 : string = "true; v45408 " + v45411 + "); " + v45409 + " // rust.fix_closure'"
                                                                                                                    let v45413 : bool = Fable.Core.RustInterop.emitRustExpr () v45412 
                                                                                                                    let v45414 : string = "__future_init"
                                                                                                                    let v45415 : _ = Fable.Core.RustInterop.emitRustExpr () v45414 
                                                                                                                    let v45416 : string = "v45415"
                                                                                                                    let v45417 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v45416 
                                                                                                                    let v45418 : string = "v45417.await"
                                                                                                                    let v45419 : uint8 = Fable.Core.RustInterop.emitRustExpr () v45418 
                                                                                                                    let v45420 : US7 = method20(v45419)
                                                                                                                    let v45421 : string = v45409 + v45410 
                                                                                                                    let v45422 : string = "true; v45420 " + v45421 + "); " + v45409 + " // rust.fix_closure'"
                                                                                                                    let v45423 : bool = Fable.Core.RustInterop.emitRustExpr () v45422 
                                                                                                                    let v45424 : string = "__future_init"
                                                                                                                    let v45425 : _ = Fable.Core.RustInterop.emitRustExpr () v45424 
                                                                                                                    let v45426 : string = "v45425"
                                                                                                                    let v45427 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v45426 
                                                                                                                    v45427
                                                                                                        | US6_0(v42800) -> (* Ok *)
                                                                                                            match v42800 with
                                                                                                            | US4_1 -> (* None *)
                                                                                                                let v42801 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                let v42802 : bool = Fable.Core.RustInterop.emitRustExpr () v42801 
                                                                                                                let v42803 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                let v42804 : bool = Fable.Core.RustInterop.emitRustExpr () v42803 
                                                                                                                let v42805 : uint8 = method26()
                                                                                                                let v42806 : string = ""
                                                                                                                let v42807 : string = "}"
                                                                                                                let v42808 : string = v42806 + v42807 
                                                                                                                let v42809 : string = "true; v42805 " + v42808 + "); " + v42806 + " // rust.fix_closure'"
                                                                                                                let v42810 : bool = Fable.Core.RustInterop.emitRustExpr () v42809 
                                                                                                                let v42811 : string = "__future_init"
                                                                                                                let v42812 : _ = Fable.Core.RustInterop.emitRustExpr () v42811 
                                                                                                                let v42813 : string = "v42812"
                                                                                                                let v42814 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v42813 
                                                                                                                let v42815 : string = "v42814.await"
                                                                                                                let v42816 : uint8 = Fable.Core.RustInterop.emitRustExpr () v42815 
                                                                                                                let v42817 : US7 = method22(v42816)
                                                                                                                let v42818 : string = v42806 + v42807 
                                                                                                                let v42819 : string = "true; v42817 " + v42818 + "); " + v42806 + " // rust.fix_closure'"
                                                                                                                let v42820 : bool = Fable.Core.RustInterop.emitRustExpr () v42819 
                                                                                                                let v42821 : string = "__future_init"
                                                                                                                let v42822 : _ = Fable.Core.RustInterop.emitRustExpr () v42821 
                                                                                                                let v42823 : string = "v42822"
                                                                                                                let v42824 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v42823 
                                                                                                                v42824
                                                                                                            | US4_0(v42825) -> (* Some *)
                                                                                                                let v42826 : unit = ()
                                                                                                                let v42827 : (unit -> unit) = closure65(v42825)
                                                                                                                let v42828 : unit = (fun () -> v42827 (); v42826) ()
                                                                                                                let v43656 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                let v43657 : bool = Fable.Core.RustInterop.emitRustExpr () v43656 
                                                                                                                let v43658 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                let v43659 : bool = Fable.Core.RustInterop.emitRustExpr () v43658 
                                                                                                                let v43660 : uint8 = method26()
                                                                                                                let v43661 : string = ""
                                                                                                                let v43662 : string = "}"
                                                                                                                let v43663 : string = v43661 + v43662 
                                                                                                                let v43664 : string = "true; v43660 " + v43663 + "); " + v43661 + " // rust.fix_closure'"
                                                                                                                let v43665 : bool = Fable.Core.RustInterop.emitRustExpr () v43664 
                                                                                                                let v43666 : string = "__future_init"
                                                                                                                let v43667 : _ = Fable.Core.RustInterop.emitRustExpr () v43666 
                                                                                                                let v43668 : string = "v43667"
                                                                                                                let v43669 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v43668 
                                                                                                                let v43670 : string = "v43669.await"
                                                                                                                let v43671 : uint8 = Fable.Core.RustInterop.emitRustExpr () v43670 
                                                                                                                let v43672 : US7 = method20(v43671)
                                                                                                                let v43673 : string = v43661 + v43662 
                                                                                                                let v43674 : string = "true; v43672 " + v43673 + "); " + v43661 + " // rust.fix_closure'"
                                                                                                                let v43675 : bool = Fable.Core.RustInterop.emitRustExpr () v43674 
                                                                                                                let v43676 : string = "__future_init"
                                                                                                                let v43677 : _ = Fable.Core.RustInterop.emitRustExpr () v43676 
                                                                                                                let v43678 : string = "v43677"
                                                                                                                let v43679 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v43678 
                                                                                                                v43679
                                                                                                    | US6_0(v41052) -> (* Ok *)
                                                                                                        match v41052 with
                                                                                                        | US4_1 -> (* None *)
                                                                                                            let v41053 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                            let v41054 : bool = Fable.Core.RustInterop.emitRustExpr () v41053 
                                                                                                            let v41055 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                            let v41056 : bool = Fable.Core.RustInterop.emitRustExpr () v41055 
                                                                                                            let v41057 : uint8 = method27()
                                                                                                            let v41058 : string = ""
                                                                                                            let v41059 : string = "}"
                                                                                                            let v41060 : string = v41058 + v41059 
                                                                                                            let v41061 : string = "true; v41057 " + v41060 + "); " + v41058 + " // rust.fix_closure'"
                                                                                                            let v41062 : bool = Fable.Core.RustInterop.emitRustExpr () v41061 
                                                                                                            let v41063 : string = "__future_init"
                                                                                                            let v41064 : _ = Fable.Core.RustInterop.emitRustExpr () v41063 
                                                                                                            let v41065 : string = "v41064"
                                                                                                            let v41066 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v41065 
                                                                                                            let v41067 : string = "v41066.await"
                                                                                                            let v41068 : uint8 = Fable.Core.RustInterop.emitRustExpr () v41067 
                                                                                                            let v41069 : US7 = method22(v41068)
                                                                                                            let v41070 : string = v41058 + v41059 
                                                                                                            let v41071 : string = "true; v41069 " + v41070 + "); " + v41058 + " // rust.fix_closure'"
                                                                                                            let v41072 : bool = Fable.Core.RustInterop.emitRustExpr () v41071 
                                                                                                            let v41073 : string = "__future_init"
                                                                                                            let v41074 : _ = Fable.Core.RustInterop.emitRustExpr () v41073 
                                                                                                            let v41075 : string = "v41074"
                                                                                                            let v41076 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v41075 
                                                                                                            v41076
                                                                                                        | US4_0(v41077) -> (* Some *)
                                                                                                            let v41078 : unit = ()
                                                                                                            let v41079 : (unit -> unit) = closure66(v41077)
                                                                                                            let v41080 : unit = (fun () -> v41079 (); v41078) ()
                                                                                                            let v41908 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                            let v41909 : bool = Fable.Core.RustInterop.emitRustExpr () v41908 
                                                                                                            let v41910 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                            let v41911 : bool = Fable.Core.RustInterop.emitRustExpr () v41910 
                                                                                                            let v41912 : uint8 = method27()
                                                                                                            let v41913 : string = ""
                                                                                                            let v41914 : string = "}"
                                                                                                            let v41915 : string = v41913 + v41914 
                                                                                                            let v41916 : string = "true; v41912 " + v41915 + "); " + v41913 + " // rust.fix_closure'"
                                                                                                            let v41917 : bool = Fable.Core.RustInterop.emitRustExpr () v41916 
                                                                                                            let v41918 : string = "__future_init"
                                                                                                            let v41919 : _ = Fable.Core.RustInterop.emitRustExpr () v41918 
                                                                                                            let v41920 : string = "v41919"
                                                                                                            let v41921 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v41920 
                                                                                                            let v41922 : string = "v41921.await"
                                                                                                            let v41923 : uint8 = Fable.Core.RustInterop.emitRustExpr () v41922 
                                                                                                            let v41924 : US7 = method20(v41923)
                                                                                                            let v41925 : string = v41913 + v41914 
                                                                                                            let v41926 : string = "true; v41924 " + v41925 + "); " + v41913 + " // rust.fix_closure'"
                                                                                                            let v41927 : bool = Fable.Core.RustInterop.emitRustExpr () v41926 
                                                                                                            let v41928 : string = "__future_init"
                                                                                                            let v41929 : _ = Fable.Core.RustInterop.emitRustExpr () v41928 
                                                                                                            let v41930 : string = "v41929"
                                                                                                            let v41931 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v41930 
                                                                                                            v41931
                                                                                                | US6_0(v39304) -> (* Ok *)
                                                                                                    match v39304 with
                                                                                                    | US4_1 -> (* None *)
                                                                                                        let v39305 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                        let v39306 : bool = Fable.Core.RustInterop.emitRustExpr () v39305 
                                                                                                        let v39307 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                        let v39308 : bool = Fable.Core.RustInterop.emitRustExpr () v39307 
                                                                                                        let v39309 : uint8 = method28()
                                                                                                        let v39310 : string = ""
                                                                                                        let v39311 : string = "}"
                                                                                                        let v39312 : string = v39310 + v39311 
                                                                                                        let v39313 : string = "true; v39309 " + v39312 + "); " + v39310 + " // rust.fix_closure'"
                                                                                                        let v39314 : bool = Fable.Core.RustInterop.emitRustExpr () v39313 
                                                                                                        let v39315 : string = "__future_init"
                                                                                                        let v39316 : _ = Fable.Core.RustInterop.emitRustExpr () v39315 
                                                                                                        let v39317 : string = "v39316"
                                                                                                        let v39318 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v39317 
                                                                                                        let v39319 : string = "v39318.await"
                                                                                                        let v39320 : uint8 = Fable.Core.RustInterop.emitRustExpr () v39319 
                                                                                                        let v39321 : US7 = method22(v39320)
                                                                                                        let v39322 : string = v39310 + v39311 
                                                                                                        let v39323 : string = "true; v39321 " + v39322 + "); " + v39310 + " // rust.fix_closure'"
                                                                                                        let v39324 : bool = Fable.Core.RustInterop.emitRustExpr () v39323 
                                                                                                        let v39325 : string = "__future_init"
                                                                                                        let v39326 : _ = Fable.Core.RustInterop.emitRustExpr () v39325 
                                                                                                        let v39327 : string = "v39326"
                                                                                                        let v39328 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v39327 
                                                                                                        v39328
                                                                                                    | US4_0(v39329) -> (* Some *)
                                                                                                        let v39330 : unit = ()
                                                                                                        let v39331 : (unit -> unit) = closure67(v39329)
                                                                                                        let v39332 : unit = (fun () -> v39331 (); v39330) ()
                                                                                                        let v40160 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                        let v40161 : bool = Fable.Core.RustInterop.emitRustExpr () v40160 
                                                                                                        let v40162 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                        let v40163 : bool = Fable.Core.RustInterop.emitRustExpr () v40162 
                                                                                                        let v40164 : uint8 = method28()
                                                                                                        let v40165 : string = ""
                                                                                                        let v40166 : string = "}"
                                                                                                        let v40167 : string = v40165 + v40166 
                                                                                                        let v40168 : string = "true; v40164 " + v40167 + "); " + v40165 + " // rust.fix_closure'"
                                                                                                        let v40169 : bool = Fable.Core.RustInterop.emitRustExpr () v40168 
                                                                                                        let v40170 : string = "__future_init"
                                                                                                        let v40171 : _ = Fable.Core.RustInterop.emitRustExpr () v40170 
                                                                                                        let v40172 : string = "v40171"
                                                                                                        let v40173 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v40172 
                                                                                                        let v40174 : string = "v40173.await"
                                                                                                        let v40175 : uint8 = Fable.Core.RustInterop.emitRustExpr () v40174 
                                                                                                        let v40176 : US7 = method20(v40175)
                                                                                                        let v40177 : string = v40165 + v40166 
                                                                                                        let v40178 : string = "true; v40176 " + v40177 + "); " + v40165 + " // rust.fix_closure'"
                                                                                                        let v40179 : bool = Fable.Core.RustInterop.emitRustExpr () v40178 
                                                                                                        let v40180 : string = "__future_init"
                                                                                                        let v40181 : _ = Fable.Core.RustInterop.emitRustExpr () v40180 
                                                                                                        let v40182 : string = "v40181"
                                                                                                        let v40183 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v40182 
                                                                                                        v40183
                                                                                            | US6_0(v37556) -> (* Ok *)
                                                                                                match v37556 with
                                                                                                | US4_1 -> (* None *)
                                                                                                    let v37557 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                    let v37558 : bool = Fable.Core.RustInterop.emitRustExpr () v37557 
                                                                                                    let v37559 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                    let v37560 : bool = Fable.Core.RustInterop.emitRustExpr () v37559 
                                                                                                    let v37561 : uint8 = method29()
                                                                                                    let v37562 : string = ""
                                                                                                    let v37563 : string = "}"
                                                                                                    let v37564 : string = v37562 + v37563 
                                                                                                    let v37565 : string = "true; v37561 " + v37564 + "); " + v37562 + " // rust.fix_closure'"
                                                                                                    let v37566 : bool = Fable.Core.RustInterop.emitRustExpr () v37565 
                                                                                                    let v37567 : string = "__future_init"
                                                                                                    let v37568 : _ = Fable.Core.RustInterop.emitRustExpr () v37567 
                                                                                                    let v37569 : string = "v37568"
                                                                                                    let v37570 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v37569 
                                                                                                    let v37571 : string = "v37570.await"
                                                                                                    let v37572 : uint8 = Fable.Core.RustInterop.emitRustExpr () v37571 
                                                                                                    let v37573 : US7 = method22(v37572)
                                                                                                    let v37574 : string = v37562 + v37563 
                                                                                                    let v37575 : string = "true; v37573 " + v37574 + "); " + v37562 + " // rust.fix_closure'"
                                                                                                    let v37576 : bool = Fable.Core.RustInterop.emitRustExpr () v37575 
                                                                                                    let v37577 : string = "__future_init"
                                                                                                    let v37578 : _ = Fable.Core.RustInterop.emitRustExpr () v37577 
                                                                                                    let v37579 : string = "v37578"
                                                                                                    let v37580 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v37579 
                                                                                                    v37580
                                                                                                | US4_0(v37581) -> (* Some *)
                                                                                                    let v37582 : unit = ()
                                                                                                    let v37583 : (unit -> unit) = closure68(v37581)
                                                                                                    let v37584 : unit = (fun () -> v37583 (); v37582) ()
                                                                                                    let v38412 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                    let v38413 : bool = Fable.Core.RustInterop.emitRustExpr () v38412 
                                                                                                    let v38414 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                    let v38415 : bool = Fable.Core.RustInterop.emitRustExpr () v38414 
                                                                                                    let v38416 : uint8 = method29()
                                                                                                    let v38417 : string = ""
                                                                                                    let v38418 : string = "}"
                                                                                                    let v38419 : string = v38417 + v38418 
                                                                                                    let v38420 : string = "true; v38416 " + v38419 + "); " + v38417 + " // rust.fix_closure'"
                                                                                                    let v38421 : bool = Fable.Core.RustInterop.emitRustExpr () v38420 
                                                                                                    let v38422 : string = "__future_init"
                                                                                                    let v38423 : _ = Fable.Core.RustInterop.emitRustExpr () v38422 
                                                                                                    let v38424 : string = "v38423"
                                                                                                    let v38425 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v38424 
                                                                                                    let v38426 : string = "v38425.await"
                                                                                                    let v38427 : uint8 = Fable.Core.RustInterop.emitRustExpr () v38426 
                                                                                                    let v38428 : US7 = method20(v38427)
                                                                                                    let v38429 : string = v38417 + v38418 
                                                                                                    let v38430 : string = "true; v38428 " + v38429 + "); " + v38417 + " // rust.fix_closure'"
                                                                                                    let v38431 : bool = Fable.Core.RustInterop.emitRustExpr () v38430 
                                                                                                    let v38432 : string = "__future_init"
                                                                                                    let v38433 : _ = Fable.Core.RustInterop.emitRustExpr () v38432 
                                                                                                    let v38434 : string = "v38433"
                                                                                                    let v38435 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v38434 
                                                                                                    v38435
                                                                                        | US6_0(v35808) -> (* Ok *)
                                                                                            match v35808 with
                                                                                            | US4_1 -> (* None *)
                                                                                                let v35809 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                let v35810 : bool = Fable.Core.RustInterop.emitRustExpr () v35809 
                                                                                                let v35811 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                let v35812 : bool = Fable.Core.RustInterop.emitRustExpr () v35811 
                                                                                                let v35813 : uint8 = method30()
                                                                                                let v35814 : string = ""
                                                                                                let v35815 : string = "}"
                                                                                                let v35816 : string = v35814 + v35815 
                                                                                                let v35817 : string = "true; v35813 " + v35816 + "); " + v35814 + " // rust.fix_closure'"
                                                                                                let v35818 : bool = Fable.Core.RustInterop.emitRustExpr () v35817 
                                                                                                let v35819 : string = "__future_init"
                                                                                                let v35820 : _ = Fable.Core.RustInterop.emitRustExpr () v35819 
                                                                                                let v35821 : string = "v35820"
                                                                                                let v35822 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v35821 
                                                                                                let v35823 : string = "v35822.await"
                                                                                                let v35824 : uint8 = Fable.Core.RustInterop.emitRustExpr () v35823 
                                                                                                let v35825 : US7 = method22(v35824)
                                                                                                let v35826 : string = v35814 + v35815 
                                                                                                let v35827 : string = "true; v35825 " + v35826 + "); " + v35814 + " // rust.fix_closure'"
                                                                                                let v35828 : bool = Fable.Core.RustInterop.emitRustExpr () v35827 
                                                                                                let v35829 : string = "__future_init"
                                                                                                let v35830 : _ = Fable.Core.RustInterop.emitRustExpr () v35829 
                                                                                                let v35831 : string = "v35830"
                                                                                                let v35832 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v35831 
                                                                                                v35832
                                                                                            | US4_0(v35833) -> (* Some *)
                                                                                                let v35834 : unit = ()
                                                                                                let v35835 : (unit -> unit) = closure69(v35833)
                                                                                                let v35836 : unit = (fun () -> v35835 (); v35834) ()
                                                                                                let v36664 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                let v36665 : bool = Fable.Core.RustInterop.emitRustExpr () v36664 
                                                                                                let v36666 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                let v36667 : bool = Fable.Core.RustInterop.emitRustExpr () v36666 
                                                                                                let v36668 : uint8 = method30()
                                                                                                let v36669 : string = ""
                                                                                                let v36670 : string = "}"
                                                                                                let v36671 : string = v36669 + v36670 
                                                                                                let v36672 : string = "true; v36668 " + v36671 + "); " + v36669 + " // rust.fix_closure'"
                                                                                                let v36673 : bool = Fable.Core.RustInterop.emitRustExpr () v36672 
                                                                                                let v36674 : string = "__future_init"
                                                                                                let v36675 : _ = Fable.Core.RustInterop.emitRustExpr () v36674 
                                                                                                let v36676 : string = "v36675"
                                                                                                let v36677 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v36676 
                                                                                                let v36678 : string = "v36677.await"
                                                                                                let v36679 : uint8 = Fable.Core.RustInterop.emitRustExpr () v36678 
                                                                                                let v36680 : US7 = method20(v36679)
                                                                                                let v36681 : string = v36669 + v36670 
                                                                                                let v36682 : string = "true; v36680 " + v36681 + "); " + v36669 + " // rust.fix_closure'"
                                                                                                let v36683 : bool = Fable.Core.RustInterop.emitRustExpr () v36682 
                                                                                                let v36684 : string = "__future_init"
                                                                                                let v36685 : _ = Fable.Core.RustInterop.emitRustExpr () v36684 
                                                                                                let v36686 : string = "v36685"
                                                                                                let v36687 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v36686 
                                                                                                v36687
                                                                                    | US6_0(v34060) -> (* Ok *)
                                                                                        match v34060 with
                                                                                        | US4_1 -> (* None *)
                                                                                            let v34061 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                            let v34062 : bool = Fable.Core.RustInterop.emitRustExpr () v34061 
                                                                                            let v34063 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                            let v34064 : bool = Fable.Core.RustInterop.emitRustExpr () v34063 
                                                                                            let v34065 : uint8 = method31()
                                                                                            let v34066 : string = ""
                                                                                            let v34067 : string = "}"
                                                                                            let v34068 : string = v34066 + v34067 
                                                                                            let v34069 : string = "true; v34065 " + v34068 + "); " + v34066 + " // rust.fix_closure'"
                                                                                            let v34070 : bool = Fable.Core.RustInterop.emitRustExpr () v34069 
                                                                                            let v34071 : string = "__future_init"
                                                                                            let v34072 : _ = Fable.Core.RustInterop.emitRustExpr () v34071 
                                                                                            let v34073 : string = "v34072"
                                                                                            let v34074 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v34073 
                                                                                            let v34075 : string = "v34074.await"
                                                                                            let v34076 : uint8 = Fable.Core.RustInterop.emitRustExpr () v34075 
                                                                                            let v34077 : US7 = method22(v34076)
                                                                                            let v34078 : string = v34066 + v34067 
                                                                                            let v34079 : string = "true; v34077 " + v34078 + "); " + v34066 + " // rust.fix_closure'"
                                                                                            let v34080 : bool = Fable.Core.RustInterop.emitRustExpr () v34079 
                                                                                            let v34081 : string = "__future_init"
                                                                                            let v34082 : _ = Fable.Core.RustInterop.emitRustExpr () v34081 
                                                                                            let v34083 : string = "v34082"
                                                                                            let v34084 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v34083 
                                                                                            v34084
                                                                                        | US4_0(v34085) -> (* Some *)
                                                                                            let v34086 : unit = ()
                                                                                            let v34087 : (unit -> unit) = closure70(v34085)
                                                                                            let v34088 : unit = (fun () -> v34087 (); v34086) ()
                                                                                            let v34916 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                            let v34917 : bool = Fable.Core.RustInterop.emitRustExpr () v34916 
                                                                                            let v34918 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                            let v34919 : bool = Fable.Core.RustInterop.emitRustExpr () v34918 
                                                                                            let v34920 : uint8 = method31()
                                                                                            let v34921 : string = ""
                                                                                            let v34922 : string = "}"
                                                                                            let v34923 : string = v34921 + v34922 
                                                                                            let v34924 : string = "true; v34920 " + v34923 + "); " + v34921 + " // rust.fix_closure'"
                                                                                            let v34925 : bool = Fable.Core.RustInterop.emitRustExpr () v34924 
                                                                                            let v34926 : string = "__future_init"
                                                                                            let v34927 : _ = Fable.Core.RustInterop.emitRustExpr () v34926 
                                                                                            let v34928 : string = "v34927"
                                                                                            let v34929 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v34928 
                                                                                            let v34930 : string = "v34929.await"
                                                                                            let v34931 : uint8 = Fable.Core.RustInterop.emitRustExpr () v34930 
                                                                                            let v34932 : US7 = method20(v34931)
                                                                                            let v34933 : string = v34921 + v34922 
                                                                                            let v34934 : string = "true; v34932 " + v34933 + "); " + v34921 + " // rust.fix_closure'"
                                                                                            let v34935 : bool = Fable.Core.RustInterop.emitRustExpr () v34934 
                                                                                            let v34936 : string = "__future_init"
                                                                                            let v34937 : _ = Fable.Core.RustInterop.emitRustExpr () v34936 
                                                                                            let v34938 : string = "v34937"
                                                                                            let v34939 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v34938 
                                                                                            v34939
                                                                                | US6_0(v32312) -> (* Ok *)
                                                                                    match v32312 with
                                                                                    | US4_1 -> (* None *)
                                                                                        let v32313 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                        let v32314 : bool = Fable.Core.RustInterop.emitRustExpr () v32313 
                                                                                        let v32315 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                        let v32316 : bool = Fable.Core.RustInterop.emitRustExpr () v32315 
                                                                                        let v32317 : uint8 = method32()
                                                                                        let v32318 : string = ""
                                                                                        let v32319 : string = "}"
                                                                                        let v32320 : string = v32318 + v32319 
                                                                                        let v32321 : string = "true; v32317 " + v32320 + "); " + v32318 + " // rust.fix_closure'"
                                                                                        let v32322 : bool = Fable.Core.RustInterop.emitRustExpr () v32321 
                                                                                        let v32323 : string = "__future_init"
                                                                                        let v32324 : _ = Fable.Core.RustInterop.emitRustExpr () v32323 
                                                                                        let v32325 : string = "v32324"
                                                                                        let v32326 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v32325 
                                                                                        let v32327 : string = "v32326.await"
                                                                                        let v32328 : uint8 = Fable.Core.RustInterop.emitRustExpr () v32327 
                                                                                        let v32329 : US7 = method22(v32328)
                                                                                        let v32330 : string = v32318 + v32319 
                                                                                        let v32331 : string = "true; v32329 " + v32330 + "); " + v32318 + " // rust.fix_closure'"
                                                                                        let v32332 : bool = Fable.Core.RustInterop.emitRustExpr () v32331 
                                                                                        let v32333 : string = "__future_init"
                                                                                        let v32334 : _ = Fable.Core.RustInterop.emitRustExpr () v32333 
                                                                                        let v32335 : string = "v32334"
                                                                                        let v32336 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v32335 
                                                                                        v32336
                                                                                    | US4_0(v32337) -> (* Some *)
                                                                                        let v32338 : unit = ()
                                                                                        let v32339 : (unit -> unit) = closure71(v32337)
                                                                                        let v32340 : unit = (fun () -> v32339 (); v32338) ()
                                                                                        let v33168 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                        let v33169 : bool = Fable.Core.RustInterop.emitRustExpr () v33168 
                                                                                        let v33170 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                        let v33171 : bool = Fable.Core.RustInterop.emitRustExpr () v33170 
                                                                                        let v33172 : uint8 = method32()
                                                                                        let v33173 : string = ""
                                                                                        let v33174 : string = "}"
                                                                                        let v33175 : string = v33173 + v33174 
                                                                                        let v33176 : string = "true; v33172 " + v33175 + "); " + v33173 + " // rust.fix_closure'"
                                                                                        let v33177 : bool = Fable.Core.RustInterop.emitRustExpr () v33176 
                                                                                        let v33178 : string = "__future_init"
                                                                                        let v33179 : _ = Fable.Core.RustInterop.emitRustExpr () v33178 
                                                                                        let v33180 : string = "v33179"
                                                                                        let v33181 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v33180 
                                                                                        let v33182 : string = "v33181.await"
                                                                                        let v33183 : uint8 = Fable.Core.RustInterop.emitRustExpr () v33182 
                                                                                        let v33184 : US7 = method20(v33183)
                                                                                        let v33185 : string = v33173 + v33174 
                                                                                        let v33186 : string = "true; v33184 " + v33185 + "); " + v33173 + " // rust.fix_closure'"
                                                                                        let v33187 : bool = Fable.Core.RustInterop.emitRustExpr () v33186 
                                                                                        let v33188 : string = "__future_init"
                                                                                        let v33189 : _ = Fable.Core.RustInterop.emitRustExpr () v33188 
                                                                                        let v33190 : string = "v33189"
                                                                                        let v33191 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v33190 
                                                                                        v33191
                                                                            | US6_0(v30564) -> (* Ok *)
                                                                                match v30564 with
                                                                                | US4_1 -> (* None *)
                                                                                    let v30565 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                    let v30566 : bool = Fable.Core.RustInterop.emitRustExpr () v30565 
                                                                                    let v30567 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                    let v30568 : bool = Fable.Core.RustInterop.emitRustExpr () v30567 
                                                                                    let v30569 : uint8 = method33()
                                                                                    let v30570 : string = ""
                                                                                    let v30571 : string = "}"
                                                                                    let v30572 : string = v30570 + v30571 
                                                                                    let v30573 : string = "true; v30569 " + v30572 + "); " + v30570 + " // rust.fix_closure'"
                                                                                    let v30574 : bool = Fable.Core.RustInterop.emitRustExpr () v30573 
                                                                                    let v30575 : string = "__future_init"
                                                                                    let v30576 : _ = Fable.Core.RustInterop.emitRustExpr () v30575 
                                                                                    let v30577 : string = "v30576"
                                                                                    let v30578 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v30577 
                                                                                    let v30579 : string = "v30578.await"
                                                                                    let v30580 : uint8 = Fable.Core.RustInterop.emitRustExpr () v30579 
                                                                                    let v30581 : US7 = method22(v30580)
                                                                                    let v30582 : string = v30570 + v30571 
                                                                                    let v30583 : string = "true; v30581 " + v30582 + "); " + v30570 + " // rust.fix_closure'"
                                                                                    let v30584 : bool = Fable.Core.RustInterop.emitRustExpr () v30583 
                                                                                    let v30585 : string = "__future_init"
                                                                                    let v30586 : _ = Fable.Core.RustInterop.emitRustExpr () v30585 
                                                                                    let v30587 : string = "v30586"
                                                                                    let v30588 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v30587 
                                                                                    v30588
                                                                                | US4_0(v30589) -> (* Some *)
                                                                                    let v30590 : unit = ()
                                                                                    let v30591 : (unit -> unit) = closure72(v30589)
                                                                                    let v30592 : unit = (fun () -> v30591 (); v30590) ()
                                                                                    let v31420 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                    let v31421 : bool = Fable.Core.RustInterop.emitRustExpr () v31420 
                                                                                    let v31422 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                    let v31423 : bool = Fable.Core.RustInterop.emitRustExpr () v31422 
                                                                                    let v31424 : uint8 = method33()
                                                                                    let v31425 : string = ""
                                                                                    let v31426 : string = "}"
                                                                                    let v31427 : string = v31425 + v31426 
                                                                                    let v31428 : string = "true; v31424 " + v31427 + "); " + v31425 + " // rust.fix_closure'"
                                                                                    let v31429 : bool = Fable.Core.RustInterop.emitRustExpr () v31428 
                                                                                    let v31430 : string = "__future_init"
                                                                                    let v31431 : _ = Fable.Core.RustInterop.emitRustExpr () v31430 
                                                                                    let v31432 : string = "v31431"
                                                                                    let v31433 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v31432 
                                                                                    let v31434 : string = "v31433.await"
                                                                                    let v31435 : uint8 = Fable.Core.RustInterop.emitRustExpr () v31434 
                                                                                    let v31436 : US7 = method20(v31435)
                                                                                    let v31437 : string = v31425 + v31426 
                                                                                    let v31438 : string = "true; v31436 " + v31437 + "); " + v31425 + " // rust.fix_closure'"
                                                                                    let v31439 : bool = Fable.Core.RustInterop.emitRustExpr () v31438 
                                                                                    let v31440 : string = "__future_init"
                                                                                    let v31441 : _ = Fable.Core.RustInterop.emitRustExpr () v31440 
                                                                                    let v31442 : string = "v31441"
                                                                                    let v31443 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v31442 
                                                                                    v31443
                                                                        | US6_0(v28816) -> (* Ok *)
                                                                            match v28816 with
                                                                            | US4_1 -> (* None *)
                                                                                let v28817 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                let v28818 : bool = Fable.Core.RustInterop.emitRustExpr () v28817 
                                                                                let v28819 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                let v28820 : bool = Fable.Core.RustInterop.emitRustExpr () v28819 
                                                                                let v28821 : uint8 = method34()
                                                                                let v28822 : string = ""
                                                                                let v28823 : string = "}"
                                                                                let v28824 : string = v28822 + v28823 
                                                                                let v28825 : string = "true; v28821 " + v28824 + "); " + v28822 + " // rust.fix_closure'"
                                                                                let v28826 : bool = Fable.Core.RustInterop.emitRustExpr () v28825 
                                                                                let v28827 : string = "__future_init"
                                                                                let v28828 : _ = Fable.Core.RustInterop.emitRustExpr () v28827 
                                                                                let v28829 : string = "v28828"
                                                                                let v28830 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v28829 
                                                                                let v28831 : string = "v28830.await"
                                                                                let v28832 : uint8 = Fable.Core.RustInterop.emitRustExpr () v28831 
                                                                                let v28833 : US7 = method22(v28832)
                                                                                let v28834 : string = v28822 + v28823 
                                                                                let v28835 : string = "true; v28833 " + v28834 + "); " + v28822 + " // rust.fix_closure'"
                                                                                let v28836 : bool = Fable.Core.RustInterop.emitRustExpr () v28835 
                                                                                let v28837 : string = "__future_init"
                                                                                let v28838 : _ = Fable.Core.RustInterop.emitRustExpr () v28837 
                                                                                let v28839 : string = "v28838"
                                                                                let v28840 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v28839 
                                                                                v28840
                                                                            | US4_0(v28841) -> (* Some *)
                                                                                let v28842 : unit = ()
                                                                                let v28843 : (unit -> unit) = closure73(v28841)
                                                                                let v28844 : unit = (fun () -> v28843 (); v28842) ()
                                                                                let v29672 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                let v29673 : bool = Fable.Core.RustInterop.emitRustExpr () v29672 
                                                                                let v29674 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                let v29675 : bool = Fable.Core.RustInterop.emitRustExpr () v29674 
                                                                                let v29676 : uint8 = method34()
                                                                                let v29677 : string = ""
                                                                                let v29678 : string = "}"
                                                                                let v29679 : string = v29677 + v29678 
                                                                                let v29680 : string = "true; v29676 " + v29679 + "); " + v29677 + " // rust.fix_closure'"
                                                                                let v29681 : bool = Fable.Core.RustInterop.emitRustExpr () v29680 
                                                                                let v29682 : string = "__future_init"
                                                                                let v29683 : _ = Fable.Core.RustInterop.emitRustExpr () v29682 
                                                                                let v29684 : string = "v29683"
                                                                                let v29685 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v29684 
                                                                                let v29686 : string = "v29685.await"
                                                                                let v29687 : uint8 = Fable.Core.RustInterop.emitRustExpr () v29686 
                                                                                let v29688 : US7 = method20(v29687)
                                                                                let v29689 : string = v29677 + v29678 
                                                                                let v29690 : string = "true; v29688 " + v29689 + "); " + v29677 + " // rust.fix_closure'"
                                                                                let v29691 : bool = Fable.Core.RustInterop.emitRustExpr () v29690 
                                                                                let v29692 : string = "__future_init"
                                                                                let v29693 : _ = Fable.Core.RustInterop.emitRustExpr () v29692 
                                                                                let v29694 : string = "v29693"
                                                                                let v29695 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v29694 
                                                                                v29695
                                                                    | US6_0(v27068) -> (* Ok *)
                                                                        match v27068 with
                                                                        | US4_1 -> (* None *)
                                                                            let v27069 : string = "true; let __future_init = Box::pin(async move { //"
                                                                            let v27070 : bool = Fable.Core.RustInterop.emitRustExpr () v27069 
                                                                            let v27071 : string = "true; let __future_init = Box::pin(async move { //"
                                                                            let v27072 : bool = Fable.Core.RustInterop.emitRustExpr () v27071 
                                                                            let v27073 : uint8 = method35()
                                                                            let v27074 : string = ""
                                                                            let v27075 : string = "}"
                                                                            let v27076 : string = v27074 + v27075 
                                                                            let v27077 : string = "true; v27073 " + v27076 + "); " + v27074 + " // rust.fix_closure'"
                                                                            let v27078 : bool = Fable.Core.RustInterop.emitRustExpr () v27077 
                                                                            let v27079 : string = "__future_init"
                                                                            let v27080 : _ = Fable.Core.RustInterop.emitRustExpr () v27079 
                                                                            let v27081 : string = "v27080"
                                                                            let v27082 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v27081 
                                                                            let v27083 : string = "v27082.await"
                                                                            let v27084 : uint8 = Fable.Core.RustInterop.emitRustExpr () v27083 
                                                                            let v27085 : US7 = method22(v27084)
                                                                            let v27086 : string = v27074 + v27075 
                                                                            let v27087 : string = "true; v27085 " + v27086 + "); " + v27074 + " // rust.fix_closure'"
                                                                            let v27088 : bool = Fable.Core.RustInterop.emitRustExpr () v27087 
                                                                            let v27089 : string = "__future_init"
                                                                            let v27090 : _ = Fable.Core.RustInterop.emitRustExpr () v27089 
                                                                            let v27091 : string = "v27090"
                                                                            let v27092 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v27091 
                                                                            v27092
                                                                        | US4_0(v27093) -> (* Some *)
                                                                            let v27094 : unit = ()
                                                                            let v27095 : (unit -> unit) = closure74(v27093)
                                                                            let v27096 : unit = (fun () -> v27095 (); v27094) ()
                                                                            let v27924 : string = "true; let __future_init = Box::pin(async move { //"
                                                                            let v27925 : bool = Fable.Core.RustInterop.emitRustExpr () v27924 
                                                                            let v27926 : string = "true; let __future_init = Box::pin(async move { //"
                                                                            let v27927 : bool = Fable.Core.RustInterop.emitRustExpr () v27926 
                                                                            let v27928 : uint8 = method35()
                                                                            let v27929 : string = ""
                                                                            let v27930 : string = "}"
                                                                            let v27931 : string = v27929 + v27930 
                                                                            let v27932 : string = "true; v27928 " + v27931 + "); " + v27929 + " // rust.fix_closure'"
                                                                            let v27933 : bool = Fable.Core.RustInterop.emitRustExpr () v27932 
                                                                            let v27934 : string = "__future_init"
                                                                            let v27935 : _ = Fable.Core.RustInterop.emitRustExpr () v27934 
                                                                            let v27936 : string = "v27935"
                                                                            let v27937 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v27936 
                                                                            let v27938 : string = "v27937.await"
                                                                            let v27939 : uint8 = Fable.Core.RustInterop.emitRustExpr () v27938 
                                                                            let v27940 : US7 = method20(v27939)
                                                                            let v27941 : string = v27929 + v27930 
                                                                            let v27942 : string = "true; v27940 " + v27941 + "); " + v27929 + " // rust.fix_closure'"
                                                                            let v27943 : bool = Fable.Core.RustInterop.emitRustExpr () v27942 
                                                                            let v27944 : string = "__future_init"
                                                                            let v27945 : _ = Fable.Core.RustInterop.emitRustExpr () v27944 
                                                                            let v27946 : string = "v27945"
                                                                            let v27947 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v27946 
                                                                            v27947
                                                                | US6_0(v25320) -> (* Ok *)
                                                                    match v25320 with
                                                                    | US4_1 -> (* None *)
                                                                        let v25321 : string = "true; let __future_init = Box::pin(async move { //"
                                                                        let v25322 : bool = Fable.Core.RustInterop.emitRustExpr () v25321 
                                                                        let v25323 : string = "true; let __future_init = Box::pin(async move { //"
                                                                        let v25324 : bool = Fable.Core.RustInterop.emitRustExpr () v25323 
                                                                        let v25325 : uint8 = method36()
                                                                        let v25326 : string = ""
                                                                        let v25327 : string = "}"
                                                                        let v25328 : string = v25326 + v25327 
                                                                        let v25329 : string = "true; v25325 " + v25328 + "); " + v25326 + " // rust.fix_closure'"
                                                                        let v25330 : bool = Fable.Core.RustInterop.emitRustExpr () v25329 
                                                                        let v25331 : string = "__future_init"
                                                                        let v25332 : _ = Fable.Core.RustInterop.emitRustExpr () v25331 
                                                                        let v25333 : string = "v25332"
                                                                        let v25334 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v25333 
                                                                        let v25335 : string = "v25334.await"
                                                                        let v25336 : uint8 = Fable.Core.RustInterop.emitRustExpr () v25335 
                                                                        let v25337 : US7 = method22(v25336)
                                                                        let v25338 : string = v25326 + v25327 
                                                                        let v25339 : string = "true; v25337 " + v25338 + "); " + v25326 + " // rust.fix_closure'"
                                                                        let v25340 : bool = Fable.Core.RustInterop.emitRustExpr () v25339 
                                                                        let v25341 : string = "__future_init"
                                                                        let v25342 : _ = Fable.Core.RustInterop.emitRustExpr () v25341 
                                                                        let v25343 : string = "v25342"
                                                                        let v25344 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v25343 
                                                                        v25344
                                                                    | US4_0(v25345) -> (* Some *)
                                                                        let v25346 : unit = ()
                                                                        let v25347 : (unit -> unit) = closure75(v25345)
                                                                        let v25348 : unit = (fun () -> v25347 (); v25346) ()
                                                                        let v26176 : string = "true; let __future_init = Box::pin(async move { //"
                                                                        let v26177 : bool = Fable.Core.RustInterop.emitRustExpr () v26176 
                                                                        let v26178 : string = "true; let __future_init = Box::pin(async move { //"
                                                                        let v26179 : bool = Fable.Core.RustInterop.emitRustExpr () v26178 
                                                                        let v26180 : uint8 = method36()
                                                                        let v26181 : string = ""
                                                                        let v26182 : string = "}"
                                                                        let v26183 : string = v26181 + v26182 
                                                                        let v26184 : string = "true; v26180 " + v26183 + "); " + v26181 + " // rust.fix_closure'"
                                                                        let v26185 : bool = Fable.Core.RustInterop.emitRustExpr () v26184 
                                                                        let v26186 : string = "__future_init"
                                                                        let v26187 : _ = Fable.Core.RustInterop.emitRustExpr () v26186 
                                                                        let v26188 : string = "v26187"
                                                                        let v26189 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v26188 
                                                                        let v26190 : string = "v26189.await"
                                                                        let v26191 : uint8 = Fable.Core.RustInterop.emitRustExpr () v26190 
                                                                        let v26192 : US7 = method20(v26191)
                                                                        let v26193 : string = v26181 + v26182 
                                                                        let v26194 : string = "true; v26192 " + v26193 + "); " + v26181 + " // rust.fix_closure'"
                                                                        let v26195 : bool = Fable.Core.RustInterop.emitRustExpr () v26194 
                                                                        let v26196 : string = "__future_init"
                                                                        let v26197 : _ = Fable.Core.RustInterop.emitRustExpr () v26196 
                                                                        let v26198 : string = "v26197"
                                                                        let v26199 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v26198 
                                                                        v26199
                                                            | US6_0(v23572) -> (* Ok *)
                                                                match v23572 with
                                                                | US4_1 -> (* None *)
                                                                    let v23573 : string = "true; let __future_init = Box::pin(async move { //"
                                                                    let v23574 : bool = Fable.Core.RustInterop.emitRustExpr () v23573 
                                                                    let v23575 : string = "true; let __future_init = Box::pin(async move { //"
                                                                    let v23576 : bool = Fable.Core.RustInterop.emitRustExpr () v23575 
                                                                    let v23577 : uint8 = method37()
                                                                    let v23578 : string = ""
                                                                    let v23579 : string = "}"
                                                                    let v23580 : string = v23578 + v23579 
                                                                    let v23581 : string = "true; v23577 " + v23580 + "); " + v23578 + " // rust.fix_closure'"
                                                                    let v23582 : bool = Fable.Core.RustInterop.emitRustExpr () v23581 
                                                                    let v23583 : string = "__future_init"
                                                                    let v23584 : _ = Fable.Core.RustInterop.emitRustExpr () v23583 
                                                                    let v23585 : string = "v23584"
                                                                    let v23586 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v23585 
                                                                    let v23587 : string = "v23586.await"
                                                                    let v23588 : uint8 = Fable.Core.RustInterop.emitRustExpr () v23587 
                                                                    let v23589 : US7 = method22(v23588)
                                                                    let v23590 : string = v23578 + v23579 
                                                                    let v23591 : string = "true; v23589 " + v23590 + "); " + v23578 + " // rust.fix_closure'"
                                                                    let v23592 : bool = Fable.Core.RustInterop.emitRustExpr () v23591 
                                                                    let v23593 : string = "__future_init"
                                                                    let v23594 : _ = Fable.Core.RustInterop.emitRustExpr () v23593 
                                                                    let v23595 : string = "v23594"
                                                                    let v23596 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v23595 
                                                                    v23596
                                                                | US4_0(v23597) -> (* Some *)
                                                                    let v23598 : unit = ()
                                                                    let v23599 : (unit -> unit) = closure76(v23597)
                                                                    let v23600 : unit = (fun () -> v23599 (); v23598) ()
                                                                    let v24428 : string = "true; let __future_init = Box::pin(async move { //"
                                                                    let v24429 : bool = Fable.Core.RustInterop.emitRustExpr () v24428 
                                                                    let v24430 : string = "true; let __future_init = Box::pin(async move { //"
                                                                    let v24431 : bool = Fable.Core.RustInterop.emitRustExpr () v24430 
                                                                    let v24432 : uint8 = method37()
                                                                    let v24433 : string = ""
                                                                    let v24434 : string = "}"
                                                                    let v24435 : string = v24433 + v24434 
                                                                    let v24436 : string = "true; v24432 " + v24435 + "); " + v24433 + " // rust.fix_closure'"
                                                                    let v24437 : bool = Fable.Core.RustInterop.emitRustExpr () v24436 
                                                                    let v24438 : string = "__future_init"
                                                                    let v24439 : _ = Fable.Core.RustInterop.emitRustExpr () v24438 
                                                                    let v24440 : string = "v24439"
                                                                    let v24441 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v24440 
                                                                    let v24442 : string = "v24441.await"
                                                                    let v24443 : uint8 = Fable.Core.RustInterop.emitRustExpr () v24442 
                                                                    let v24444 : US7 = method20(v24443)
                                                                    let v24445 : string = v24433 + v24434 
                                                                    let v24446 : string = "true; v24444 " + v24445 + "); " + v24433 + " // rust.fix_closure'"
                                                                    let v24447 : bool = Fable.Core.RustInterop.emitRustExpr () v24446 
                                                                    let v24448 : string = "__future_init"
                                                                    let v24449 : _ = Fable.Core.RustInterop.emitRustExpr () v24448 
                                                                    let v24450 : string = "v24449"
                                                                    let v24451 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v24450 
                                                                    v24451
                                                        | US6_0(v21824) -> (* Ok *)
                                                            match v21824 with
                                                            | US4_1 -> (* None *)
                                                                let v21825 : string = "true; let __future_init = Box::pin(async move { //"
                                                                let v21826 : bool = Fable.Core.RustInterop.emitRustExpr () v21825 
                                                                let v21827 : string = "true; let __future_init = Box::pin(async move { //"
                                                                let v21828 : bool = Fable.Core.RustInterop.emitRustExpr () v21827 
                                                                let v21829 : uint8 = method38()
                                                                let v21830 : string = ""
                                                                let v21831 : string = "}"
                                                                let v21832 : string = v21830 + v21831 
                                                                let v21833 : string = "true; v21829 " + v21832 + "); " + v21830 + " // rust.fix_closure'"
                                                                let v21834 : bool = Fable.Core.RustInterop.emitRustExpr () v21833 
                                                                let v21835 : string = "__future_init"
                                                                let v21836 : _ = Fable.Core.RustInterop.emitRustExpr () v21835 
                                                                let v21837 : string = "v21836"
                                                                let v21838 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v21837 
                                                                let v21839 : string = "v21838.await"
                                                                let v21840 : uint8 = Fable.Core.RustInterop.emitRustExpr () v21839 
                                                                let v21841 : US7 = method22(v21840)
                                                                let v21842 : string = v21830 + v21831 
                                                                let v21843 : string = "true; v21841 " + v21842 + "); " + v21830 + " // rust.fix_closure'"
                                                                let v21844 : bool = Fable.Core.RustInterop.emitRustExpr () v21843 
                                                                let v21845 : string = "__future_init"
                                                                let v21846 : _ = Fable.Core.RustInterop.emitRustExpr () v21845 
                                                                let v21847 : string = "v21846"
                                                                let v21848 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v21847 
                                                                v21848
                                                            | US4_0(v21849) -> (* Some *)
                                                                let v21850 : unit = ()
                                                                let v21851 : (unit -> unit) = closure77(v21849)
                                                                let v21852 : unit = (fun () -> v21851 (); v21850) ()
                                                                let v22680 : string = "true; let __future_init = Box::pin(async move { //"
                                                                let v22681 : bool = Fable.Core.RustInterop.emitRustExpr () v22680 
                                                                let v22682 : string = "true; let __future_init = Box::pin(async move { //"
                                                                let v22683 : bool = Fable.Core.RustInterop.emitRustExpr () v22682 
                                                                let v22684 : uint8 = method38()
                                                                let v22685 : string = ""
                                                                let v22686 : string = "}"
                                                                let v22687 : string = v22685 + v22686 
                                                                let v22688 : string = "true; v22684 " + v22687 + "); " + v22685 + " // rust.fix_closure'"
                                                                let v22689 : bool = Fable.Core.RustInterop.emitRustExpr () v22688 
                                                                let v22690 : string = "__future_init"
                                                                let v22691 : _ = Fable.Core.RustInterop.emitRustExpr () v22690 
                                                                let v22692 : string = "v22691"
                                                                let v22693 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v22692 
                                                                let v22694 : string = "v22693.await"
                                                                let v22695 : uint8 = Fable.Core.RustInterop.emitRustExpr () v22694 
                                                                let v22696 : US7 = method20(v22695)
                                                                let v22697 : string = v22685 + v22686 
                                                                let v22698 : string = "true; v22696 " + v22697 + "); " + v22685 + " // rust.fix_closure'"
                                                                let v22699 : bool = Fable.Core.RustInterop.emitRustExpr () v22698 
                                                                let v22700 : string = "__future_init"
                                                                let v22701 : _ = Fable.Core.RustInterop.emitRustExpr () v22700 
                                                                let v22702 : string = "v22701"
                                                                let v22703 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v22702 
                                                                v22703
                                                    | US6_0(v20076) -> (* Ok *)
                                                        match v20076 with
                                                        | US4_1 -> (* None *)
                                                            let v20077 : string = "true; let __future_init = Box::pin(async move { //"
                                                            let v20078 : bool = Fable.Core.RustInterop.emitRustExpr () v20077 
                                                            let v20079 : string = "true; let __future_init = Box::pin(async move { //"
                                                            let v20080 : bool = Fable.Core.RustInterop.emitRustExpr () v20079 
                                                            let v20081 : uint8 = method39()
                                                            let v20082 : string = ""
                                                            let v20083 : string = "}"
                                                            let v20084 : string = v20082 + v20083 
                                                            let v20085 : string = "true; v20081 " + v20084 + "); " + v20082 + " // rust.fix_closure'"
                                                            let v20086 : bool = Fable.Core.RustInterop.emitRustExpr () v20085 
                                                            let v20087 : string = "__future_init"
                                                            let v20088 : _ = Fable.Core.RustInterop.emitRustExpr () v20087 
                                                            let v20089 : string = "v20088"
                                                            let v20090 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v20089 
                                                            let v20091 : string = "v20090.await"
                                                            let v20092 : uint8 = Fable.Core.RustInterop.emitRustExpr () v20091 
                                                            let v20093 : US7 = method22(v20092)
                                                            let v20094 : string = v20082 + v20083 
                                                            let v20095 : string = "true; v20093 " + v20094 + "); " + v20082 + " // rust.fix_closure'"
                                                            let v20096 : bool = Fable.Core.RustInterop.emitRustExpr () v20095 
                                                            let v20097 : string = "__future_init"
                                                            let v20098 : _ = Fable.Core.RustInterop.emitRustExpr () v20097 
                                                            let v20099 : string = "v20098"
                                                            let v20100 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v20099 
                                                            v20100
                                                        | US4_0(v20101) -> (* Some *)
                                                            let v20102 : unit = ()
                                                            let v20103 : (unit -> unit) = closure78(v20101)
                                                            let v20104 : unit = (fun () -> v20103 (); v20102) ()
                                                            let v20932 : string = "true; let __future_init = Box::pin(async move { //"
                                                            let v20933 : bool = Fable.Core.RustInterop.emitRustExpr () v20932 
                                                            let v20934 : string = "true; let __future_init = Box::pin(async move { //"
                                                            let v20935 : bool = Fable.Core.RustInterop.emitRustExpr () v20934 
                                                            let v20936 : uint8 = method39()
                                                            let v20937 : string = ""
                                                            let v20938 : string = "}"
                                                            let v20939 : string = v20937 + v20938 
                                                            let v20940 : string = "true; v20936 " + v20939 + "); " + v20937 + " // rust.fix_closure'"
                                                            let v20941 : bool = Fable.Core.RustInterop.emitRustExpr () v20940 
                                                            let v20942 : string = "__future_init"
                                                            let v20943 : _ = Fable.Core.RustInterop.emitRustExpr () v20942 
                                                            let v20944 : string = "v20943"
                                                            let v20945 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v20944 
                                                            let v20946 : string = "v20945.await"
                                                            let v20947 : uint8 = Fable.Core.RustInterop.emitRustExpr () v20946 
                                                            let v20948 : US7 = method20(v20947)
                                                            let v20949 : string = v20937 + v20938 
                                                            let v20950 : string = "true; v20948 " + v20949 + "); " + v20937 + " // rust.fix_closure'"
                                                            let v20951 : bool = Fable.Core.RustInterop.emitRustExpr () v20950 
                                                            let v20952 : string = "__future_init"
                                                            let v20953 : _ = Fable.Core.RustInterop.emitRustExpr () v20952 
                                                            let v20954 : string = "v20953"
                                                            let v20955 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v20954 
                                                            v20955
                                                | US6_0(v18328) -> (* Ok *)
                                                    match v18328 with
                                                    | US4_1 -> (* None *)
                                                        let v18329 : string = "true; let __future_init = Box::pin(async move { //"
                                                        let v18330 : bool = Fable.Core.RustInterop.emitRustExpr () v18329 
                                                        let v18331 : string = "true; let __future_init = Box::pin(async move { //"
                                                        let v18332 : bool = Fable.Core.RustInterop.emitRustExpr () v18331 
                                                        let v18333 : uint8 = method40()
                                                        let v18334 : string = ""
                                                        let v18335 : string = "}"
                                                        let v18336 : string = v18334 + v18335 
                                                        let v18337 : string = "true; v18333 " + v18336 + "); " + v18334 + " // rust.fix_closure'"
                                                        let v18338 : bool = Fable.Core.RustInterop.emitRustExpr () v18337 
                                                        let v18339 : string = "__future_init"
                                                        let v18340 : _ = Fable.Core.RustInterop.emitRustExpr () v18339 
                                                        let v18341 : string = "v18340"
                                                        let v18342 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v18341 
                                                        let v18343 : string = "v18342.await"
                                                        let v18344 : uint8 = Fable.Core.RustInterop.emitRustExpr () v18343 
                                                        let v18345 : US7 = method22(v18344)
                                                        let v18346 : string = v18334 + v18335 
                                                        let v18347 : string = "true; v18345 " + v18346 + "); " + v18334 + " // rust.fix_closure'"
                                                        let v18348 : bool = Fable.Core.RustInterop.emitRustExpr () v18347 
                                                        let v18349 : string = "__future_init"
                                                        let v18350 : _ = Fable.Core.RustInterop.emitRustExpr () v18349 
                                                        let v18351 : string = "v18350"
                                                        let v18352 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v18351 
                                                        v18352
                                                    | US4_0(v18353) -> (* Some *)
                                                        let v18354 : unit = ()
                                                        let v18355 : (unit -> unit) = closure79(v18353)
                                                        let v18356 : unit = (fun () -> v18355 (); v18354) ()
                                                        let v19184 : string = "true; let __future_init = Box::pin(async move { //"
                                                        let v19185 : bool = Fable.Core.RustInterop.emitRustExpr () v19184 
                                                        let v19186 : string = "true; let __future_init = Box::pin(async move { //"
                                                        let v19187 : bool = Fable.Core.RustInterop.emitRustExpr () v19186 
                                                        let v19188 : uint8 = method40()
                                                        let v19189 : string = ""
                                                        let v19190 : string = "}"
                                                        let v19191 : string = v19189 + v19190 
                                                        let v19192 : string = "true; v19188 " + v19191 + "); " + v19189 + " // rust.fix_closure'"
                                                        let v19193 : bool = Fable.Core.RustInterop.emitRustExpr () v19192 
                                                        let v19194 : string = "__future_init"
                                                        let v19195 : _ = Fable.Core.RustInterop.emitRustExpr () v19194 
                                                        let v19196 : string = "v19195"
                                                        let v19197 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v19196 
                                                        let v19198 : string = "v19197.await"
                                                        let v19199 : uint8 = Fable.Core.RustInterop.emitRustExpr () v19198 
                                                        let v19200 : US7 = method20(v19199)
                                                        let v19201 : string = v19189 + v19190 
                                                        let v19202 : string = "true; v19200 " + v19201 + "); " + v19189 + " // rust.fix_closure'"
                                                        let v19203 : bool = Fable.Core.RustInterop.emitRustExpr () v19202 
                                                        let v19204 : string = "__future_init"
                                                        let v19205 : _ = Fable.Core.RustInterop.emitRustExpr () v19204 
                                                        let v19206 : string = "v19205"
                                                        let v19207 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v19206 
                                                        v19207
                                            | US6_0(v16580) -> (* Ok *)
                                                match v16580 with
                                                | US4_1 -> (* None *)
                                                    let v16581 : string = "true; let __future_init = Box::pin(async move { //"
                                                    let v16582 : bool = Fable.Core.RustInterop.emitRustExpr () v16581 
                                                    let v16583 : string = "true; let __future_init = Box::pin(async move { //"
                                                    let v16584 : bool = Fable.Core.RustInterop.emitRustExpr () v16583 
                                                    let v16585 : uint8 = method41()
                                                    let v16586 : string = ""
                                                    let v16587 : string = "}"
                                                    let v16588 : string = v16586 + v16587 
                                                    let v16589 : string = "true; v16585 " + v16588 + "); " + v16586 + " // rust.fix_closure'"
                                                    let v16590 : bool = Fable.Core.RustInterop.emitRustExpr () v16589 
                                                    let v16591 : string = "__future_init"
                                                    let v16592 : _ = Fable.Core.RustInterop.emitRustExpr () v16591 
                                                    let v16593 : string = "v16592"
                                                    let v16594 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v16593 
                                                    let v16595 : string = "v16594.await"
                                                    let v16596 : uint8 = Fable.Core.RustInterop.emitRustExpr () v16595 
                                                    let v16597 : US7 = method22(v16596)
                                                    let v16598 : string = v16586 + v16587 
                                                    let v16599 : string = "true; v16597 " + v16598 + "); " + v16586 + " // rust.fix_closure'"
                                                    let v16600 : bool = Fable.Core.RustInterop.emitRustExpr () v16599 
                                                    let v16601 : string = "__future_init"
                                                    let v16602 : _ = Fable.Core.RustInterop.emitRustExpr () v16601 
                                                    let v16603 : string = "v16602"
                                                    let v16604 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v16603 
                                                    v16604
                                                | US4_0(v16605) -> (* Some *)
                                                    let v16606 : unit = ()
                                                    let v16607 : (unit -> unit) = closure80(v16605)
                                                    let v16608 : unit = (fun () -> v16607 (); v16606) ()
                                                    let v17436 : string = "true; let __future_init = Box::pin(async move { //"
                                                    let v17437 : bool = Fable.Core.RustInterop.emitRustExpr () v17436 
                                                    let v17438 : string = "true; let __future_init = Box::pin(async move { //"
                                                    let v17439 : bool = Fable.Core.RustInterop.emitRustExpr () v17438 
                                                    let v17440 : uint8 = method41()
                                                    let v17441 : string = ""
                                                    let v17442 : string = "}"
                                                    let v17443 : string = v17441 + v17442 
                                                    let v17444 : string = "true; v17440 " + v17443 + "); " + v17441 + " // rust.fix_closure'"
                                                    let v17445 : bool = Fable.Core.RustInterop.emitRustExpr () v17444 
                                                    let v17446 : string = "__future_init"
                                                    let v17447 : _ = Fable.Core.RustInterop.emitRustExpr () v17446 
                                                    let v17448 : string = "v17447"
                                                    let v17449 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v17448 
                                                    let v17450 : string = "v17449.await"
                                                    let v17451 : uint8 = Fable.Core.RustInterop.emitRustExpr () v17450 
                                                    let v17452 : US7 = method20(v17451)
                                                    let v17453 : string = v17441 + v17442 
                                                    let v17454 : string = "true; v17452 " + v17453 + "); " + v17441 + " // rust.fix_closure'"
                                                    let v17455 : bool = Fable.Core.RustInterop.emitRustExpr () v17454 
                                                    let v17456 : string = "__future_init"
                                                    let v17457 : _ = Fable.Core.RustInterop.emitRustExpr () v17456 
                                                    let v17458 : string = "v17457"
                                                    let v17459 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v17458 
                                                    v17459
                                        | US6_0(v14832) -> (* Ok *)
                                            match v14832 with
                                            | US4_1 -> (* None *)
                                                let v14833 : string = "true; let __future_init = Box::pin(async move { //"
                                                let v14834 : bool = Fable.Core.RustInterop.emitRustExpr () v14833 
                                                let v14835 : string = "true; let __future_init = Box::pin(async move { //"
                                                let v14836 : bool = Fable.Core.RustInterop.emitRustExpr () v14835 
                                                let v14837 : uint8 = method42()
                                                let v14838 : string = ""
                                                let v14839 : string = "}"
                                                let v14840 : string = v14838 + v14839 
                                                let v14841 : string = "true; v14837 " + v14840 + "); " + v14838 + " // rust.fix_closure'"
                                                let v14842 : bool = Fable.Core.RustInterop.emitRustExpr () v14841 
                                                let v14843 : string = "__future_init"
                                                let v14844 : _ = Fable.Core.RustInterop.emitRustExpr () v14843 
                                                let v14845 : string = "v14844"
                                                let v14846 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v14845 
                                                let v14847 : string = "v14846.await"
                                                let v14848 : uint8 = Fable.Core.RustInterop.emitRustExpr () v14847 
                                                let v14849 : US7 = method22(v14848)
                                                let v14850 : string = v14838 + v14839 
                                                let v14851 : string = "true; v14849 " + v14850 + "); " + v14838 + " // rust.fix_closure'"
                                                let v14852 : bool = Fable.Core.RustInterop.emitRustExpr () v14851 
                                                let v14853 : string = "__future_init"
                                                let v14854 : _ = Fable.Core.RustInterop.emitRustExpr () v14853 
                                                let v14855 : string = "v14854"
                                                let v14856 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v14855 
                                                v14856
                                            | US4_0(v14857) -> (* Some *)
                                                let v14858 : unit = ()
                                                let v14859 : (unit -> unit) = closure81(v14857)
                                                let v14860 : unit = (fun () -> v14859 (); v14858) ()
                                                let v15688 : string = "true; let __future_init = Box::pin(async move { //"
                                                let v15689 : bool = Fable.Core.RustInterop.emitRustExpr () v15688 
                                                let v15690 : string = "true; let __future_init = Box::pin(async move { //"
                                                let v15691 : bool = Fable.Core.RustInterop.emitRustExpr () v15690 
                                                let v15692 : uint8 = method42()
                                                let v15693 : string = ""
                                                let v15694 : string = "}"
                                                let v15695 : string = v15693 + v15694 
                                                let v15696 : string = "true; v15692 " + v15695 + "); " + v15693 + " // rust.fix_closure'"
                                                let v15697 : bool = Fable.Core.RustInterop.emitRustExpr () v15696 
                                                let v15698 : string = "__future_init"
                                                let v15699 : _ = Fable.Core.RustInterop.emitRustExpr () v15698 
                                                let v15700 : string = "v15699"
                                                let v15701 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v15700 
                                                let v15702 : string = "v15701.await"
                                                let v15703 : uint8 = Fable.Core.RustInterop.emitRustExpr () v15702 
                                                let v15704 : US7 = method20(v15703)
                                                let v15705 : string = v15693 + v15694 
                                                let v15706 : string = "true; v15704 " + v15705 + "); " + v15693 + " // rust.fix_closure'"
                                                let v15707 : bool = Fable.Core.RustInterop.emitRustExpr () v15706 
                                                let v15708 : string = "__future_init"
                                                let v15709 : _ = Fable.Core.RustInterop.emitRustExpr () v15708 
                                                let v15710 : string = "v15709"
                                                let v15711 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v15710 
                                                v15711
                                    | US6_0(v13084) -> (* Ok *)
                                        match v13084 with
                                        | US4_1 -> (* None *)
                                            let v13085 : string = "true; let __future_init = Box::pin(async move { //"
                                            let v13086 : bool = Fable.Core.RustInterop.emitRustExpr () v13085 
                                            let v13087 : string = "true; let __future_init = Box::pin(async move { //"
                                            let v13088 : bool = Fable.Core.RustInterop.emitRustExpr () v13087 
                                            let v13089 : uint8 = method43()
                                            let v13090 : string = ""
                                            let v13091 : string = "}"
                                            let v13092 : string = v13090 + v13091 
                                            let v13093 : string = "true; v13089 " + v13092 + "); " + v13090 + " // rust.fix_closure'"
                                            let v13094 : bool = Fable.Core.RustInterop.emitRustExpr () v13093 
                                            let v13095 : string = "__future_init"
                                            let v13096 : _ = Fable.Core.RustInterop.emitRustExpr () v13095 
                                            let v13097 : string = "v13096"
                                            let v13098 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v13097 
                                            let v13099 : string = "v13098.await"
                                            let v13100 : uint8 = Fable.Core.RustInterop.emitRustExpr () v13099 
                                            let v13101 : US7 = method22(v13100)
                                            let v13102 : string = v13090 + v13091 
                                            let v13103 : string = "true; v13101 " + v13102 + "); " + v13090 + " // rust.fix_closure'"
                                            let v13104 : bool = Fable.Core.RustInterop.emitRustExpr () v13103 
                                            let v13105 : string = "__future_init"
                                            let v13106 : _ = Fable.Core.RustInterop.emitRustExpr () v13105 
                                            let v13107 : string = "v13106"
                                            let v13108 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v13107 
                                            v13108
                                        | US4_0(v13109) -> (* Some *)
                                            let v13110 : unit = ()
                                            let v13111 : (unit -> unit) = closure82(v13109)
                                            let v13112 : unit = (fun () -> v13111 (); v13110) ()
                                            let v13940 : string = "true; let __future_init = Box::pin(async move { //"
                                            let v13941 : bool = Fable.Core.RustInterop.emitRustExpr () v13940 
                                            let v13942 : string = "true; let __future_init = Box::pin(async move { //"
                                            let v13943 : bool = Fable.Core.RustInterop.emitRustExpr () v13942 
                                            let v13944 : uint8 = method43()
                                            let v13945 : string = ""
                                            let v13946 : string = "}"
                                            let v13947 : string = v13945 + v13946 
                                            let v13948 : string = "true; v13944 " + v13947 + "); " + v13945 + " // rust.fix_closure'"
                                            let v13949 : bool = Fable.Core.RustInterop.emitRustExpr () v13948 
                                            let v13950 : string = "__future_init"
                                            let v13951 : _ = Fable.Core.RustInterop.emitRustExpr () v13950 
                                            let v13952 : string = "v13951"
                                            let v13953 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v13952 
                                            let v13954 : string = "v13953.await"
                                            let v13955 : uint8 = Fable.Core.RustInterop.emitRustExpr () v13954 
                                            let v13956 : US7 = method20(v13955)
                                            let v13957 : string = v13945 + v13946 
                                            let v13958 : string = "true; v13956 " + v13957 + "); " + v13945 + " // rust.fix_closure'"
                                            let v13959 : bool = Fable.Core.RustInterop.emitRustExpr () v13958 
                                            let v13960 : string = "__future_init"
                                            let v13961 : _ = Fable.Core.RustInterop.emitRustExpr () v13960 
                                            let v13962 : string = "v13961"
                                            let v13963 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v13962 
                                            v13963
                                | US6_0(v11336) -> (* Ok *)
                                    match v11336 with
                                    | US4_1 -> (* None *)
                                        let v11337 : string = "true; let __future_init = Box::pin(async move { //"
                                        let v11338 : bool = Fable.Core.RustInterop.emitRustExpr () v11337 
                                        let v11339 : string = "true; let __future_init = Box::pin(async move { //"
                                        let v11340 : bool = Fable.Core.RustInterop.emitRustExpr () v11339 
                                        let v11341 : uint8 = method44()
                                        let v11342 : string = ""
                                        let v11343 : string = "}"
                                        let v11344 : string = v11342 + v11343 
                                        let v11345 : string = "true; v11341 " + v11344 + "); " + v11342 + " // rust.fix_closure'"
                                        let v11346 : bool = Fable.Core.RustInterop.emitRustExpr () v11345 
                                        let v11347 : string = "__future_init"
                                        let v11348 : _ = Fable.Core.RustInterop.emitRustExpr () v11347 
                                        let v11349 : string = "v11348"
                                        let v11350 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v11349 
                                        let v11351 : string = "v11350.await"
                                        let v11352 : uint8 = Fable.Core.RustInterop.emitRustExpr () v11351 
                                        let v11353 : US7 = method22(v11352)
                                        let v11354 : string = v11342 + v11343 
                                        let v11355 : string = "true; v11353 " + v11354 + "); " + v11342 + " // rust.fix_closure'"
                                        let v11356 : bool = Fable.Core.RustInterop.emitRustExpr () v11355 
                                        let v11357 : string = "__future_init"
                                        let v11358 : _ = Fable.Core.RustInterop.emitRustExpr () v11357 
                                        let v11359 : string = "v11358"
                                        let v11360 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v11359 
                                        v11360
                                    | US4_0(v11361) -> (* Some *)
                                        let v11362 : unit = ()
                                        let v11363 : (unit -> unit) = closure83(v11361)
                                        let v11364 : unit = (fun () -> v11363 (); v11362) ()
                                        let v12192 : string = "true; let __future_init = Box::pin(async move { //"
                                        let v12193 : bool = Fable.Core.RustInterop.emitRustExpr () v12192 
                                        let v12194 : string = "true; let __future_init = Box::pin(async move { //"
                                        let v12195 : bool = Fable.Core.RustInterop.emitRustExpr () v12194 
                                        let v12196 : uint8 = method44()
                                        let v12197 : string = ""
                                        let v12198 : string = "}"
                                        let v12199 : string = v12197 + v12198 
                                        let v12200 : string = "true; v12196 " + v12199 + "); " + v12197 + " // rust.fix_closure'"
                                        let v12201 : bool = Fable.Core.RustInterop.emitRustExpr () v12200 
                                        let v12202 : string = "__future_init"
                                        let v12203 : _ = Fable.Core.RustInterop.emitRustExpr () v12202 
                                        let v12204 : string = "v12203"
                                        let v12205 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v12204 
                                        let v12206 : string = "v12205.await"
                                        let v12207 : uint8 = Fable.Core.RustInterop.emitRustExpr () v12206 
                                        let v12208 : US7 = method20(v12207)
                                        let v12209 : string = v12197 + v12198 
                                        let v12210 : string = "true; v12208 " + v12209 + "); " + v12197 + " // rust.fix_closure'"
                                        let v12211 : bool = Fable.Core.RustInterop.emitRustExpr () v12210 
                                        let v12212 : string = "__future_init"
                                        let v12213 : _ = Fable.Core.RustInterop.emitRustExpr () v12212 
                                        let v12214 : string = "v12213"
                                        let v12215 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v12214 
                                        v12215
                            | US6_0(v9588) -> (* Ok *)
                                match v9588 with
                                | US4_1 -> (* None *)
                                    let v9589 : string = "true; let __future_init = Box::pin(async move { //"
                                    let v9590 : bool = Fable.Core.RustInterop.emitRustExpr () v9589 
                                    let v9591 : string = "true; let __future_init = Box::pin(async move { //"
                                    let v9592 : bool = Fable.Core.RustInterop.emitRustExpr () v9591 
                                    let v9593 : uint8 = method45()
                                    let v9594 : string = ""
                                    let v9595 : string = "}"
                                    let v9596 : string = v9594 + v9595 
                                    let v9597 : string = "true; v9593 " + v9596 + "); " + v9594 + " // rust.fix_closure'"
                                    let v9598 : bool = Fable.Core.RustInterop.emitRustExpr () v9597 
                                    let v9599 : string = "__future_init"
                                    let v9600 : _ = Fable.Core.RustInterop.emitRustExpr () v9599 
                                    let v9601 : string = "v9600"
                                    let v9602 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v9601 
                                    let v9603 : string = "v9602.await"
                                    let v9604 : uint8 = Fable.Core.RustInterop.emitRustExpr () v9603 
                                    let v9605 : US7 = method22(v9604)
                                    let v9606 : string = v9594 + v9595 
                                    let v9607 : string = "true; v9605 " + v9606 + "); " + v9594 + " // rust.fix_closure'"
                                    let v9608 : bool = Fable.Core.RustInterop.emitRustExpr () v9607 
                                    let v9609 : string = "__future_init"
                                    let v9610 : _ = Fable.Core.RustInterop.emitRustExpr () v9609 
                                    let v9611 : string = "v9610"
                                    let v9612 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v9611 
                                    v9612
                                | US4_0(v9613) -> (* Some *)
                                    let v9614 : unit = ()
                                    let v9615 : (unit -> unit) = closure84(v9613)
                                    let v9616 : unit = (fun () -> v9615 (); v9614) ()
                                    let v10444 : string = "true; let __future_init = Box::pin(async move { //"
                                    let v10445 : bool = Fable.Core.RustInterop.emitRustExpr () v10444 
                                    let v10446 : string = "true; let __future_init = Box::pin(async move { //"
                                    let v10447 : bool = Fable.Core.RustInterop.emitRustExpr () v10446 
                                    let v10448 : uint8 = method45()
                                    let v10449 : string = ""
                                    let v10450 : string = "}"
                                    let v10451 : string = v10449 + v10450 
                                    let v10452 : string = "true; v10448 " + v10451 + "); " + v10449 + " // rust.fix_closure'"
                                    let v10453 : bool = Fable.Core.RustInterop.emitRustExpr () v10452 
                                    let v10454 : string = "__future_init"
                                    let v10455 : _ = Fable.Core.RustInterop.emitRustExpr () v10454 
                                    let v10456 : string = "v10455"
                                    let v10457 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v10456 
                                    let v10458 : string = "v10457.await"
                                    let v10459 : uint8 = Fable.Core.RustInterop.emitRustExpr () v10458 
                                    let v10460 : US7 = method20(v10459)
                                    let v10461 : string = v10449 + v10450 
                                    let v10462 : string = "true; v10460 " + v10461 + "); " + v10449 + " // rust.fix_closure'"
                                    let v10463 : bool = Fable.Core.RustInterop.emitRustExpr () v10462 
                                    let v10464 : string = "__future_init"
                                    let v10465 : _ = Fable.Core.RustInterop.emitRustExpr () v10464 
                                    let v10466 : string = "v10465"
                                    let v10467 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v10466 
                                    v10467
                        | US6_0(v7840) -> (* Ok *)
                            match v7840 with
                            | US4_1 -> (* None *)
                                let v7841 : string = "true; let __future_init = Box::pin(async move { //"
                                let v7842 : bool = Fable.Core.RustInterop.emitRustExpr () v7841 
                                let v7843 : string = "true; let __future_init = Box::pin(async move { //"
                                let v7844 : bool = Fable.Core.RustInterop.emitRustExpr () v7843 
                                let v7845 : uint8 = method46()
                                let v7846 : string = ""
                                let v7847 : string = "}"
                                let v7848 : string = v7846 + v7847 
                                let v7849 : string = "true; v7845 " + v7848 + "); " + v7846 + " // rust.fix_closure'"
                                let v7850 : bool = Fable.Core.RustInterop.emitRustExpr () v7849 
                                let v7851 : string = "__future_init"
                                let v7852 : _ = Fable.Core.RustInterop.emitRustExpr () v7851 
                                let v7853 : string = "v7852"
                                let v7854 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v7853 
                                let v7855 : string = "v7854.await"
                                let v7856 : uint8 = Fable.Core.RustInterop.emitRustExpr () v7855 
                                let v7857 : US7 = method22(v7856)
                                let v7858 : string = v7846 + v7847 
                                let v7859 : string = "true; v7857 " + v7858 + "); " + v7846 + " // rust.fix_closure'"
                                let v7860 : bool = Fable.Core.RustInterop.emitRustExpr () v7859 
                                let v7861 : string = "__future_init"
                                let v7862 : _ = Fable.Core.RustInterop.emitRustExpr () v7861 
                                let v7863 : string = "v7862"
                                let v7864 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v7863 
                                v7864
                            | US4_0(v7865) -> (* Some *)
                                let v7866 : unit = ()
                                let v7867 : (unit -> unit) = closure85(v7865)
                                let v7868 : unit = (fun () -> v7867 (); v7866) ()
                                let v8696 : string = "true; let __future_init = Box::pin(async move { //"
                                let v8697 : bool = Fable.Core.RustInterop.emitRustExpr () v8696 
                                let v8698 : string = "true; let __future_init = Box::pin(async move { //"
                                let v8699 : bool = Fable.Core.RustInterop.emitRustExpr () v8698 
                                let v8700 : uint8 = method46()
                                let v8701 : string = ""
                                let v8702 : string = "}"
                                let v8703 : string = v8701 + v8702 
                                let v8704 : string = "true; v8700 " + v8703 + "); " + v8701 + " // rust.fix_closure'"
                                let v8705 : bool = Fable.Core.RustInterop.emitRustExpr () v8704 
                                let v8706 : string = "__future_init"
                                let v8707 : _ = Fable.Core.RustInterop.emitRustExpr () v8706 
                                let v8708 : string = "v8707"
                                let v8709 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v8708 
                                let v8710 : string = "v8709.await"
                                let v8711 : uint8 = Fable.Core.RustInterop.emitRustExpr () v8710 
                                let v8712 : US7 = method20(v8711)
                                let v8713 : string = v8701 + v8702 
                                let v8714 : string = "true; v8712 " + v8713 + "); " + v8701 + " // rust.fix_closure'"
                                let v8715 : bool = Fable.Core.RustInterop.emitRustExpr () v8714 
                                let v8716 : string = "__future_init"
                                let v8717 : _ = Fable.Core.RustInterop.emitRustExpr () v8716 
                                let v8718 : string = "v8717"
                                let v8719 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v8718 
                                v8719
                    | US6_0(v6092) -> (* Ok *)
                        match v6092 with
                        | US4_1 -> (* None *)
                            let v6093 : string = "true; let __future_init = Box::pin(async move { //"
                            let v6094 : bool = Fable.Core.RustInterop.emitRustExpr () v6093 
                            let v6095 : string = "true; let __future_init = Box::pin(async move { //"
                            let v6096 : bool = Fable.Core.RustInterop.emitRustExpr () v6095 
                            let v6097 : uint8 = method47()
                            let v6098 : string = ""
                            let v6099 : string = "}"
                            let v6100 : string = v6098 + v6099 
                            let v6101 : string = "true; v6097 " + v6100 + "); " + v6098 + " // rust.fix_closure'"
                            let v6102 : bool = Fable.Core.RustInterop.emitRustExpr () v6101 
                            let v6103 : string = "__future_init"
                            let v6104 : _ = Fable.Core.RustInterop.emitRustExpr () v6103 
                            let v6105 : string = "v6104"
                            let v6106 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v6105 
                            let v6107 : string = "v6106.await"
                            let v6108 : uint8 = Fable.Core.RustInterop.emitRustExpr () v6107 
                            let v6109 : US7 = method22(v6108)
                            let v6110 : string = v6098 + v6099 
                            let v6111 : string = "true; v6109 " + v6110 + "); " + v6098 + " // rust.fix_closure'"
                            let v6112 : bool = Fable.Core.RustInterop.emitRustExpr () v6111 
                            let v6113 : string = "__future_init"
                            let v6114 : _ = Fable.Core.RustInterop.emitRustExpr () v6113 
                            let v6115 : string = "v6114"
                            let v6116 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v6115 
                            v6116
                        | US4_0(v6117) -> (* Some *)
                            let v6118 : unit = ()
                            let v6119 : (unit -> unit) = closure86(v6117)
                            let v6120 : unit = (fun () -> v6119 (); v6118) ()
                            let v6948 : string = "true; let __future_init = Box::pin(async move { //"
                            let v6949 : bool = Fable.Core.RustInterop.emitRustExpr () v6948 
                            let v6950 : string = "true; let __future_init = Box::pin(async move { //"
                            let v6951 : bool = Fable.Core.RustInterop.emitRustExpr () v6950 
                            let v6952 : uint8 = method47()
                            let v6953 : string = ""
                            let v6954 : string = "}"
                            let v6955 : string = v6953 + v6954 
                            let v6956 : string = "true; v6952 " + v6955 + "); " + v6953 + " // rust.fix_closure'"
                            let v6957 : bool = Fable.Core.RustInterop.emitRustExpr () v6956 
                            let v6958 : string = "__future_init"
                            let v6959 : _ = Fable.Core.RustInterop.emitRustExpr () v6958 
                            let v6960 : string = "v6959"
                            let v6961 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v6960 
                            let v6962 : string = "v6961.await"
                            let v6963 : uint8 = Fable.Core.RustInterop.emitRustExpr () v6962 
                            let v6964 : US7 = method20(v6963)
                            let v6965 : string = v6953 + v6954 
                            let v6966 : string = "true; v6964 " + v6965 + "); " + v6953 + " // rust.fix_closure'"
                            let v6967 : bool = Fable.Core.RustInterop.emitRustExpr () v6966 
                            let v6968 : string = "__future_init"
                            let v6969 : _ = Fable.Core.RustInterop.emitRustExpr () v6968 
                            let v6970 : string = "v6969"
                            let v6971 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v6970 
                            v6971
                | US6_0(v4344) -> (* Ok *)
                    match v4344 with
                    | US4_1 -> (* None *)
                        let v4345 : string = "true; let __future_init = Box::pin(async move { //"
                        let v4346 : bool = Fable.Core.RustInterop.emitRustExpr () v4345 
                        let v4347 : string = "true; let __future_init = Box::pin(async move { //"
                        let v4348 : bool = Fable.Core.RustInterop.emitRustExpr () v4347 
                        let v4349 : uint8 = method48()
                        let v4350 : string = ""
                        let v4351 : string = "}"
                        let v4352 : string = v4350 + v4351 
                        let v4353 : string = "true; v4349 " + v4352 + "); " + v4350 + " // rust.fix_closure'"
                        let v4354 : bool = Fable.Core.RustInterop.emitRustExpr () v4353 
                        let v4355 : string = "__future_init"
                        let v4356 : _ = Fable.Core.RustInterop.emitRustExpr () v4355 
                        let v4357 : string = "v4356"
                        let v4358 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v4357 
                        let v4359 : string = "v4358.await"
                        let v4360 : uint8 = Fable.Core.RustInterop.emitRustExpr () v4359 
                        let v4361 : US7 = method22(v4360)
                        let v4362 : string = v4350 + v4351 
                        let v4363 : string = "true; v4361 " + v4362 + "); " + v4350 + " // rust.fix_closure'"
                        let v4364 : bool = Fable.Core.RustInterop.emitRustExpr () v4363 
                        let v4365 : string = "__future_init"
                        let v4366 : _ = Fable.Core.RustInterop.emitRustExpr () v4365 
                        let v4367 : string = "v4366"
                        let v4368 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v4367 
                        v4368
                    | US4_0(v4369) -> (* Some *)
                        let v4370 : unit = ()
                        let v4371 : (unit -> unit) = closure87(v4369)
                        let v4372 : unit = (fun () -> v4371 (); v4370) ()
                        let v5200 : string = "true; let __future_init = Box::pin(async move { //"
                        let v5201 : bool = Fable.Core.RustInterop.emitRustExpr () v5200 
                        let v5202 : string = "true; let __future_init = Box::pin(async move { //"
                        let v5203 : bool = Fable.Core.RustInterop.emitRustExpr () v5202 
                        let v5204 : uint8 = method48()
                        let v5205 : string = ""
                        let v5206 : string = "}"
                        let v5207 : string = v5205 + v5206 
                        let v5208 : string = "true; v5204 " + v5207 + "); " + v5205 + " // rust.fix_closure'"
                        let v5209 : bool = Fable.Core.RustInterop.emitRustExpr () v5208 
                        let v5210 : string = "__future_init"
                        let v5211 : _ = Fable.Core.RustInterop.emitRustExpr () v5210 
                        let v5212 : string = "v5211"
                        let v5213 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v5212 
                        let v5214 : string = "v5213.await"
                        let v5215 : uint8 = Fable.Core.RustInterop.emitRustExpr () v5214 
                        let v5216 : US7 = method20(v5215)
                        let v5217 : string = v5205 + v5206 
                        let v5218 : string = "true; v5216 " + v5217 + "); " + v5205 + " // rust.fix_closure'"
                        let v5219 : bool = Fable.Core.RustInterop.emitRustExpr () v5218 
                        let v5220 : string = "__future_init"
                        let v5221 : _ = Fable.Core.RustInterop.emitRustExpr () v5220 
                        let v5222 : string = "v5221"
                        let v5223 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v5222 
                        v5223
            | US6_0(v2596) -> (* Ok *)
                match v2596 with
                | US4_1 -> (* None *)
                    let v2597 : string = "true; let __future_init = Box::pin(async move { //"
                    let v2598 : bool = Fable.Core.RustInterop.emitRustExpr () v2597 
                    let v2599 : string = "true; let __future_init = Box::pin(async move { //"
                    let v2600 : bool = Fable.Core.RustInterop.emitRustExpr () v2599 
                    let v2601 : uint8 = method49()
                    let v2602 : string = ""
                    let v2603 : string = "}"
                    let v2604 : string = v2602 + v2603 
                    let v2605 : string = "true; v2601 " + v2604 + "); " + v2602 + " // rust.fix_closure'"
                    let v2606 : bool = Fable.Core.RustInterop.emitRustExpr () v2605 
                    let v2607 : string = "__future_init"
                    let v2608 : _ = Fable.Core.RustInterop.emitRustExpr () v2607 
                    let v2609 : string = "v2608"
                    let v2610 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v2609 
                    let v2611 : string = "v2610.await"
                    let v2612 : uint8 = Fable.Core.RustInterop.emitRustExpr () v2611 
                    let v2613 : US7 = method22(v2612)
                    let v2614 : string = v2602 + v2603 
                    let v2615 : string = "true; v2613 " + v2614 + "); " + v2602 + " // rust.fix_closure'"
                    let v2616 : bool = Fable.Core.RustInterop.emitRustExpr () v2615 
                    let v2617 : string = "__future_init"
                    let v2618 : _ = Fable.Core.RustInterop.emitRustExpr () v2617 
                    let v2619 : string = "v2618"
                    let v2620 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v2619 
                    v2620
                | US4_0(v2621) -> (* Some *)
                    let v2622 : unit = ()
                    let v2623 : (unit -> unit) = closure88(v2621)
                    let v2624 : unit = (fun () -> v2623 (); v2622) ()
                    let v3452 : string = "true; let __future_init = Box::pin(async move { //"
                    let v3453 : bool = Fable.Core.RustInterop.emitRustExpr () v3452 
                    let v3454 : string = "true; let __future_init = Box::pin(async move { //"
                    let v3455 : bool = Fable.Core.RustInterop.emitRustExpr () v3454 
                    let v3456 : uint8 = method49()
                    let v3457 : string = ""
                    let v3458 : string = "}"
                    let v3459 : string = v3457 + v3458 
                    let v3460 : string = "true; v3456 " + v3459 + "); " + v3457 + " // rust.fix_closure'"
                    let v3461 : bool = Fable.Core.RustInterop.emitRustExpr () v3460 
                    let v3462 : string = "__future_init"
                    let v3463 : _ = Fable.Core.RustInterop.emitRustExpr () v3462 
                    let v3464 : string = "v3463"
                    let v3465 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v3464 
                    let v3466 : string = "v3465.await"
                    let v3467 : uint8 = Fable.Core.RustInterop.emitRustExpr () v3466 
                    let v3468 : US7 = method20(v3467)
                    let v3469 : string = v3457 + v3458 
                    let v3470 : string = "true; v3468 " + v3469 + "); " + v3457 + " // rust.fix_closure'"
                    let v3471 : bool = Fable.Core.RustInterop.emitRustExpr () v3470 
                    let v3472 : string = "__future_init"
                    let v3473 : _ = Fable.Core.RustInterop.emitRustExpr () v3472 
                    let v3474 : string = "v3473"
                    let v3475 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v3474 
                    v3475
        | US6_0(v848) -> (* Ok *)
            match v848 with
            | US4_1 -> (* None *)
                let v849 : string = "true; let __future_init = Box::pin(async move { //"
                let v850 : bool = Fable.Core.RustInterop.emitRustExpr () v849 
                let v851 : string = "true; let __future_init = Box::pin(async move { //"
                let v852 : bool = Fable.Core.RustInterop.emitRustExpr () v851 
                let v853 : uint8 = method50()
                let v854 : string = ""
                let v855 : string = "}"
                let v856 : string = v854 + v855 
                let v857 : string = "true; v853 " + v856 + "); " + v854 + " // rust.fix_closure'"
                let v858 : bool = Fable.Core.RustInterop.emitRustExpr () v857 
                let v859 : string = "__future_init"
                let v860 : _ = Fable.Core.RustInterop.emitRustExpr () v859 
                let v861 : string = "v860"
                let v862 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v861 
                let v863 : string = "v862.await"
                let v864 : uint8 = Fable.Core.RustInterop.emitRustExpr () v863 
                let v865 : US7 = method22(v864)
                let v866 : string = v854 + v855 
                let v867 : string = "true; v865 " + v866 + "); " + v854 + " // rust.fix_closure'"
                let v868 : bool = Fable.Core.RustInterop.emitRustExpr () v867 
                let v869 : string = "__future_init"
                let v870 : _ = Fable.Core.RustInterop.emitRustExpr () v869 
                let v871 : string = "v870"
                let v872 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v871 
                v872
            | US4_0(v873) -> (* Some *)
                let v874 : unit = ()
                let v875 : (unit -> unit) = closure89(v873)
                let v876 : unit = (fun () -> v875 (); v874) ()
                let v1704 : string = "true; let __future_init = Box::pin(async move { //"
                let v1705 : bool = Fable.Core.RustInterop.emitRustExpr () v1704 
                let v1706 : string = "true; let __future_init = Box::pin(async move { //"
                let v1707 : bool = Fable.Core.RustInterop.emitRustExpr () v1706 
                let v1708 : uint8 = method50()
                let v1709 : string = ""
                let v1710 : string = "}"
                let v1711 : string = v1709 + v1710 
                let v1712 : string = "true; v1708 " + v1711 + "); " + v1709 + " // rust.fix_closure'"
                let v1713 : bool = Fable.Core.RustInterop.emitRustExpr () v1712 
                let v1714 : string = "__future_init"
                let v1715 : _ = Fable.Core.RustInterop.emitRustExpr () v1714 
                let v1716 : string = "v1715"
                let v1717 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v1716 
                let v1718 : string = "v1717.await"
                let v1719 : uint8 = Fable.Core.RustInterop.emitRustExpr () v1718 
                let v1720 : US7 = method20(v1719)
                let v1721 : string = v1709 + v1710 
                let v1722 : string = "true; v1720 " + v1721 + "); " + v1709 + " // rust.fix_closure'"
                let v1723 : bool = Fable.Core.RustInterop.emitRustExpr () v1722 
                let v1724 : string = "__future_init"
                let v1725 : _ = Fable.Core.RustInterop.emitRustExpr () v1724 
                let v1726 : string = "v1725"
                let v1727 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v1726 
                v1727
    let v51614 : string = "v51613.await"
    let v51615 : US7 = Fable.Core.RustInterop.emitRustExpr () v51614 
    let v51616 : unit = ()
    let v51617 : (unit -> unit) = closure90(v51615)
    let v51618 : unit = (fun () -> v51617 (); v51616) ()
    let v52470 : Result<uint8, anyhow_Error> =
        match v51615 with
        | US7_1(v52417) -> (* Error *)
            let v52418 : string = method10()
            let v52419 : Mut3 = {l0 = v52418} : Mut3
            let v52420 : string = "{ "
            let v52421 : string = $"{v52420}"
            let v52424 : unit = ()
            let v52425 : (unit -> unit) = closure12(v52419, v52421)
            let v52426 : unit = (fun () -> v52425 (); v52424) ()
            let v52429 : string = "retries"
            let v52430 : string = $"{v52429}"
            let v52433 : unit = ()
            let v52434 : (unit -> unit) = closure12(v52419, v52430)
            let v52435 : unit = (fun () -> v52434 (); v52433) ()
            let v52438 : string = " = "
            let v52439 : string = $"{v52438}"
            let v52442 : unit = ()
            let v52443 : (unit -> unit) = closure12(v52419, v52439)
            let v52444 : unit = (fun () -> v52443 (); v52442) ()
            let v52447 : string = $"{v52417}"
            let v52450 : unit = ()
            let v52451 : (unit -> unit) = closure12(v52419, v52447)
            let v52452 : unit = (fun () -> v52451 (); v52450) ()
            let v52455 : string = " }"
            let v52456 : string = $"{v52455}"
            let v52459 : unit = ()
            let v52460 : (unit -> unit) = closure12(v52419, v52456)
            let v52461 : unit = (fun () -> v52460 (); v52459) ()
            let v52464 : string = v52419.l0
            let v52465 : string = "anyhow::anyhow!($0)"
            let v52466 : anyhow_Error = Fable.Core.RustInterop.emitRustExpr v52464 v52465 
            let v52467 : string = "Err($0)"
            let v52468 : Result<uint8, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr v52466 v52467 
            v52468
        | US7_0(v52415) -> (* Ok *)
            let v52416 : Result<uint8, anyhow_Error> = Ok v52415 
            v52416
    let v52471 : Result<uint8, anyhow_Error> = method51(v52470)
    let v52472 : string = ""
    let v52473 : string = "}"
    let v52474 : string = v52472 + v52473 
    let v52475 : string = "true; v52471 " + v52474 + "); " + v52472 + " // rust.fix_closure'"
    let v52476 : bool = Fable.Core.RustInterop.emitRustExpr () v52475 
    let v52477 : string = "__future_init"
    let v52478 : _ = Fable.Core.RustInterop.emitRustExpr () v52477 
    let v52479 : string = "v52478"
    let v52480 : std_pin_Pin<Box<Dyn<std_future_Future<Result<uint8, anyhow_Error>>>>> = Fable.Core.RustInterop.emitRustExpr () v52479 
    v52480
and closure91 (v0 : US8 option ref) (v1 : US8 option) : US8 option ref =
    v0.Value <- v1 
    v0
and closure92 (v0 : uint8 option, v1 : (US8 option -> US8 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : uint8 = x
    let v3 : US8 = US8_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and closure0 () (v0 : (string [])) : int32 =
    let v1 : clap_Command = method0()
    let v2 : string = "clap::Command::get_matches($0)"
    let v3 : clap_ArgMatches = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : string = method1()
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "clap::ArgMatches::get_one(&$0, v6).cloned()"
    let v8 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v3 v7 
    let v9 : US0 option = None
    let _v9 = ref v9 
    let v10 : US0 option ref = _v9 
    let v11 : (US0 option -> US0 option ref) = closure1(v10)
    let v12 : unit = ()
    let v13 : (unit -> unit) = closure2(v8, v11)
    let v14 : unit = (fun () -> v13 (); v12) ()
    let v17 : US0 option = _v9.Value 
    let v28 : US0 = US0_1
    let v29 : US0 = v17 |> Option.defaultValue v28 
    let v85 : US1 =
        match v29 with
        | US0_1 -> (* None *)
            US1_1
        | US0_0(v33) -> (* Some *)
            let v34 : string = "fable_library_rust::String_::fromString($0)"
            let v35 : string = Fable.Core.RustInterop.emitRustExpr v33 v34 
            
            
            
            
            
            let v36 : bool = "Verbose" = v35
            let v40 : US2 =
                if v36 then
                    let v37 : US3 = US3_0
                    US2_0(v37)
                else
                    US2_1
            let v81 : US2 =
                match v40 with
                | US2_1 -> (* None *)
                    let v43 : bool = "Debug" = v35
                    let v47 : US2 =
                        if v43 then
                            let v44 : US3 = US3_1
                            US2_0(v44)
                        else
                            US2_1
                    match v47 with
                    | US2_1 -> (* None *)
                        let v50 : bool = "Info" = v35
                        let v54 : US2 =
                            if v50 then
                                let v51 : US3 = US3_2
                                US2_0(v51)
                            else
                                US2_1
                        match v54 with
                        | US2_1 -> (* None *)
                            let v57 : bool = "Warning" = v35
                            let v61 : US2 =
                                if v57 then
                                    let v58 : US3 = US3_3
                                    US2_0(v58)
                                else
                                    US2_1
                            match v61 with
                            | US2_1 -> (* None *)
                                let v64 : bool = "Critical" = v35
                                let v68 : US2 =
                                    if v64 then
                                        let v65 : US3 = US3_4
                                        US2_0(v65)
                                    else
                                        US2_1
                                match v68 with
                                | US2_1 -> (* None *)
                                    US2_1
                                | US2_0(v69) -> (* Some *)
                                    US2_0(v69)
                            | US2_0(v62) -> (* Some *)
                                US2_0(v62)
                        | US2_0(v55) -> (* Some *)
                            US2_0(v55)
                    | US2_0(v48) -> (* Some *)
                        US2_0(v48)
                | US2_0(v41) -> (* Some *)
                    US2_0(v41)
            US1_0(v81)
    let v92 : US2 =
        match v85 with
        | US1_0(v86) -> (* Some *)
            match v86 with
            | US2_0(v87) -> (* Some *)
                US2_0(v87)
            | _ ->
                US2_1
        | _ ->
            US2_1
    let v96 : US3 =
        match v92 with
        | US2_1 -> (* None *)
            US3_0
        | US2_0(v93) -> (* Some *)
            v93
    let v97 : unit = ()
    let v98 : (unit -> unit) = closure3(v96)
    let v99 : unit = (fun () -> v98 (); v97) ()
    let struct (v111 : Mut0, v112 : Mut1, v113 : Mut2, v114 : Mut3, v115 : Mut4, v116 : int64 option) = TraceState.trace_state.Value
    let v129 : unit = ()
    let v130 : (unit -> unit) = closure7(v0)
    let v131 : unit = (fun () -> v130 (); v129) ()
    let v931 : string = method11()
    let v932 : string = "&*$0"
    let v933 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v931 v932 
    let v934 : string = "clap::ArgMatches::get_flag(&v3, v933)"
    let v935 : bool = Fable.Core.RustInterop.emitRustExpr () v934 
    let v936 : std_pin_Pin<Box<Dyn<std_future_Future<Result<uint8, anyhow_Error>>>>> = method12(v3)
    let v937 : string = $"tokio::runtime::Builder::new_multi_thread().enable_all().build().unwrap()"
    let v938 : _ = Fable.Core.RustInterop.emitRustExpr () v937 
    let v939 : string = "v938.handle().block_on($0)"
    let v940 : Result<uint8, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr v936 v939 
    let v941 : (anyhow_Error -> std_string_String) = method18()
    let v942 : string = "$0.map_err(|x| $1(x))"
    let v943 : Result<uint8, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v940, v941) v942 
    let v944 : string = "$0.ok()"
    let v945 : uint8 option = Fable.Core.RustInterop.emitRustExpr v943 v944 
    let v946 : US8 option = None
    let _v946 = ref v946 
    let v947 : US8 option ref = _v946 
    let v948 : (US8 option -> US8 option ref) = closure91(v947)
    let v949 : unit = ()
    let v950 : (unit -> unit) = closure92(v945, v948)
    let v951 : unit = (fun () -> v950 (); v949) ()
    let v954 : US8 option = _v946.Value 
    let v965 : US8 = US8_1
    let v966 : US8 = v954 |> Option.defaultValue v965 
    match v966 with
    | US8_1 -> (* None *)
        if v935 then
            ()
        else
            let v975 : string = "$0.unwrap()"
            let v976 : uint8 = Fable.Core.RustInterop.emitRustExpr v943 v975 
            ()
    | US8_0(v970) -> (* Some *)
        if v935 then
            let v971 : string = "Err($0)"
            let v972 : string = "spiral_wasm.main / exception=true"
            let v973 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v972 v971 
            let v974 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v973 v974 
            ()
    0
let v0 : ((string []) -> int32) = closure0()
let main args = v0 args
()
