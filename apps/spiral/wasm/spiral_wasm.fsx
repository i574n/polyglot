#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("&$0")>]
#endif
type Ref<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Command")>]
#endif
type clap_Command = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Arg")>]
#endif
type clap_Arg = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Vec<$0>")>]
#endif
type Vec<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::String")>]
#endif
type std_string_String = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Box<$0>")>]
#endif
type Box<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::PossibleValue")>]
#endif
type clap_builder_PossibleValue = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::ValueParser")>]
#endif
type clap_builder_ValueParser = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::ArgMatches")>]
#endif
type clap_ArgMatches = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("near_workspaces::Worker<$0>")>]
#endif
type near_workspaces_Worker<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::pin::Pin<$0>")>]
#endif
type std_pin_Pin<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("near_workspaces::Contract")>]
#endif
type near_workspaces_Contract = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("near_workspaces::operations::CallTransaction")>]
#endif
type near_workspaces_operations_CallTransaction = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("near_workspaces::result::ExecutionFinalResult")>]
#endif
type near_workspaces_result_ExecutionFinalResult = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("near_workspaces::types::Gas")>]
#endif
type near_workspaces_types_Gas = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("near_workspaces::result::ExecutionOutcome")>]
#endif
type near_workspaces_result_ExecutionOutcome = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("near_workspaces::types::NearToken")>]
#endif
type near_token_NearToken = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("u128")>]
#endif
type u128 = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("anyhow::Error")>]
#endif
type anyhow_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 $1")>]
#endif
type Lifetime<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("'static")>]
#endif
type StaticLifetime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("str")>]
#endif
type Str = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("mut $0")>]
#endif
type Mut<'T> = class end
module State = let mutable trace_state = None
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::env::VarError")>]
#endif
type std_env_VarError = class end
type IOsEnviron = abstract environ: x: unit -> obj
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("dyn $0")>]
#endif
type Dyn<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::future::Future<Output = $0>")>]
#endif
type std_future_Future<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Error")>]
#endif
type std_io_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("near_workspaces::network::Sandbox")>]
#endif
type near_workspaces_network_Sandbox = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("near_workspaces::error::Error")>]
#endif
type near_workspaces_error_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("near_workspaces::result::ExecutionSuccess")>]
#endif
type near_workspaces_result_ExecutionSuccess = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("near_workspaces::result::ExecutionFailure")>]
#endif
type near_workspaces_result_ExecutionFailure = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("[$0]")>]
#endif
type Slice<'T> = class end
type [<Struct>] US0 =
    | US0_0 of f0_0 : std_string_String
    | US0_1
and [<Struct>] US3 =
    | US3_0
    | US3_1
    | US3_2
    | US3_3
    | US3_4
and [<Struct>] US2 =
    | US2_0 of f0_0 : US3
    | US2_1
and [<Struct>] US1 =
    | US1_0 of f0_0 : US2
    | US1_1
and Mut0 = {mutable l0 : int64}
and Mut1 = {mutable l0 : (string -> unit)}
and Mut2 = {mutable l0 : bool}
and Mut3 = {mutable l0 : US3}
and [<Struct>] US4 =
    | US4_0 of f0_0 : string
    | US4_1
and [<Struct>] US5 =
    | US5_0 of f0_0 : int64
    | US5_1
and Mut4 = {mutable l0 : string}
and [<Struct>] US6 =
    | US6_0 of f0_0 : US4
    | US6_1 of f1_0 : std_string_String
and [<Struct>] US7 =
    | US7_0 of f0_0 : uint8
    | US7_1 of f1_0 : uint8
let rec method0 () : clap_Command =
    let v0 : string = "command"
    let v1 : string = "r#\"" + v0 + "\"#"
    let v2 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : string = "clap::Command::new($0)"
    let v4 : clap_Command = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "clap::Command::args_override_self($0, true)"
    let v6 : clap_Command = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "trace_level"
    let v8 : string = "r#\"" + v7 + "\"#"
    let v9 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "clap::Arg::new($0)"
    let v11 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "$0.short($1)"
    let v13 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v11, 't') v12 
    let v14 : string = "r#\"" + v7 + "\"#"
    let v15 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v14 
    let v16 : string = "$0.long($1)"
    let v17 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v13, v15) v16 
    
    
    
    
    
    let v18 : string list = []
    let v19 : string = "Critical"
    let v20 : string list = v19 :: v18 
    let v23 : string = "Warning"
    let v24 : string list = v23 :: v20 
    let v27 : string = "Info"
    let v28 : string list = v27 :: v24 
    let v31 : string = "Debug"
    let v32 : string list = v31 :: v28 
    let v35 : string = "Verbose"
    let v36 : string list = v35 :: v32 
    let v39 : (string list -> (string [])) = List.toArray
    let v40 : (string []) = v39 v36
    let v43 : string = "$0.to_vec()"
    let v44 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v40 v43 
    let v45 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v46 : bool = Fable.Core.RustInterop.emitRustExpr v44 v45 
    let v47 : string = "x"
    let v48 : string = Fable.Core.RustInterop.emitRustExpr () v47 
    let v49 : string = "&*$0"
    let v50 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v48 v49 
    let v51 : string = "String::from($0)"
    let v52 : std_string_String = Fable.Core.RustInterop.emitRustExpr v50 v51 
    let v53 : string = "Box::new($0)"
    let v54 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v52 v53 
    let v55 : string = "Box::leak($0)"
    let v56 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v54 v55 
    let v57 : string = "clap::builder::PossibleValue::new(&**$0)"
    let v58 : clap_builder_PossibleValue = Fable.Core.RustInterop.emitRustExpr v56 v57 
    let v59 : string = "true; $0 }).collect::<Vec<_>>()"
    let v60 : bool = Fable.Core.RustInterop.emitRustExpr v58 v59 
    let v61 : string = "_vec_map"
    let v62 : Vec<clap_builder_PossibleValue> = Fable.Core.RustInterop.emitRustExpr () v61 
    let v63 : string = "Into::<clap::builder::ValueParser>::into(clap::builder::PossibleValuesParser::new($0))"
    let v64 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr v62 v63 
    let v65 : string = "$0.value_parser($1)"
    let v66 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v17, v64) v65 
    let v67 : string = "clap::Command::arg($0, $1)"
    let v68 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v6, v66) v67 
    let v69 : string = "wasm"
    let v70 : string = "r#\"" + v69 + "\"#"
    let v71 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v70 
    let v72 : string = "clap::Arg::new($0)"
    let v73 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v71 v72 
    let v74 : string = "$0.short($1)"
    let v75 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v73, 'w') v74 
    let v76 : string = "r#\"" + v69 + "\"#"
    let v77 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v76 
    let v78 : string = "$0.long($1)"
    let v79 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v75, v77) v78 
    let v80 : string = "$0.required($1)"
    let v81 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v79, true) v80 
    let v82 : string = "clap::Command::arg($0, $1)"
    let v83 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v68, v81) v82 
    v83
and method1 () : string =
    let v0 : string = "trace_level"
    v0
and closure1 (v0 : US0 option ref) (v1 : US0 option) : US0 option ref =
    v0.Value <- v1 
    v0
and closure2 (v0 : std_string_String option, v1 : (US0 option -> US0 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : std_string_String = x
    let v3 : US0 = US0_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and method3 () : string =
    let v0 : string = "TRACE_LEVEL"
    v0
and method5 () : string =
    let v0 : string = ""
    v0
and closure4 (v0 : US4 option ref) (v1 : US4 option) : US4 option ref =
    v0.Value <- v1 
    v0
and closure5 (v0 : string option, v1 : (US4 option -> US4 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : string = x
    let v3 : US4 = US4_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and method4 (v0 : string) : string =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "std::env::var(&*$0)"
    let v3 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "x"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : string = "fable_library_rust::String_::fromString($0)"
    let v9 : string = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "true; $0 })"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "_result_map_"
    let v13 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = method5()
    let v15 : string = "$0.unwrap_or($1)"
    let v16 : string = Fable.Core.RustInterop.emitRustExpr struct (v13, v14) v15 
    let _v1 = v16 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : string = "std::env::var(&*$0)"
    let v18 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v0 v17 
    let v19 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v20 : bool = Fable.Core.RustInterop.emitRustExpr v18 v19 
    let v21 : string = "x"
    let v22 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v21 
    let v23 : string = "fable_library_rust::String_::fromString($0)"
    let v24 : string = Fable.Core.RustInterop.emitRustExpr v22 v23 
    let v25 : string = "true; $0 })"
    let v26 : bool = Fable.Core.RustInterop.emitRustExpr v24 v25 
    let v27 : string = "_result_map_"
    let v28 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v27 
    let v29 : string = method5()
    let v30 : string = "$0.unwrap_or($1)"
    let v31 : string = Fable.Core.RustInterop.emitRustExpr struct (v28, v29) v30 
    let _v1 = v31 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v32 : string = "std::env::var(&*$0)"
    let v33 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v0 v32 
    let v34 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v35 : bool = Fable.Core.RustInterop.emitRustExpr v33 v34 
    let v36 : string = "x"
    let v37 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v36 
    let v38 : string = "fable_library_rust::String_::fromString($0)"
    let v39 : string = Fable.Core.RustInterop.emitRustExpr v37 v38 
    let v40 : string = "true; $0 })"
    let v41 : bool = Fable.Core.RustInterop.emitRustExpr v39 v40 
    let v42 : string = "_result_map_"
    let v43 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v42 
    let v44 : string = method5()
    let v45 : string = "$0.unwrap_or($1)"
    let v46 : string = Fable.Core.RustInterop.emitRustExpr struct (v43, v44) v45 
    let _v1 = v46 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v47 : string = "process.env[$0] ?? \"\""
    let v48 : string = Fable.Core.JsInterop.emitJsExpr v0 v47 
    let _v1 = v48 
    #endif
#if FABLE_COMPILER_PYTHON
    let v49 : string = "os"
    let v50 : IOsEnviron = Fable.Core.PyInterop.importAll v49 
    let v51 : string = "v50.environ"
    let v52 : obj = Fable.Core.PyInterop.emitPyExpr () v51 
    let v55 : string = "v52.get($0)"
    let v56 : string = Fable.Core.PyInterop.emitPyExpr v0 v55 
    let mutable _v56 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v59 : (string -> string option) = Option.ofObj
    let v60 : string option = v59 v56
    v60 
    #else
    Some v56 
    #endif
    |> fun x -> _v56 <- Some x
    let v61 : string option = match _v56 with Some x -> x | None -> failwith "optionm'.of_obj / _v56=None"
    let v64 : US4 option = None
    let _v64 = ref v64 
    let v65 : US4 option ref = _v64 
    let v66 : (US4 option -> US4 option ref) = closure4(v65)
    let v67 : unit = ()
    let v68 : (unit -> unit) = closure5(v61, v66)
    let v69 : unit = (fun () -> v68 (); v67) ()
    let v72 : US4 option = _v64.Value 
    let v83 : US4 = US4_1
    let v84 : US4 = v72 |> Option.defaultValue v83 
    let v91 : string =
        match v84 with
        | US4_1 -> (* None *)
            let v89 : string = ""
            v89
        | US4_0(v88) -> (* Some *)
            v88
    let _v1 = v91 
    #endif
#else
    let v92 : (string -> string) = System.Environment.GetEnvironmentVariable
    let v93 : string = v92 v0
    let mutable _v93 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v94 : (string -> string option) = Option.ofObj
    let v95 : string option = v94 v93
    v95 
    #else
    Some v93 
    #endif
    |> fun x -> _v93 <- Some x
    let v96 : string option = match _v93 with Some x -> x | None -> failwith "optionm'.of_obj / _v93=None"
    let v99 : US4 option = None
    let _v99 = ref v99 
    let v100 : US4 option ref = _v99 
    let v101 : (US4 option -> US4 option ref) = closure4(v100)
    let v102 : unit = ()
    let v103 : (unit -> unit) = closure5(v96, v101)
    let v104 : unit = (fun () -> v103 (); v102) ()
    let v107 : US4 option = _v99.Value 
    let v118 : US4 = US4_1
    let v119 : US4 = v107 |> Option.defaultValue v118 
    let v126 : string =
        match v119 with
        | US4_1 -> (* None *)
            let v124 : string = ""
            v124
        | US4_0(v123) -> (* Some *)
            v123
    let _v1 = v126 
    #endif
    let v127 : string = _v1 
    v127
and method6 () : string =
    let v0 : string = "AUTOMATION"
    v0
and closure6 () (v0 : string) : unit =
    ()
and method2 (v0 : US3) : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = method3()
    let v3 : string = method4(v2)
    
    
    
    
    
    let v4 : bool = "Verbose" = v3
    let v8 : US2 =
        if v4 then
            let v5 : US3 = US3_0
            US2_0(v5)
        else
            US2_1
    let v49 : US2 =
        match v8 with
        | US2_1 -> (* None *)
            let v11 : bool = "Debug" = v3
            let v15 : US2 =
                if v11 then
                    let v12 : US3 = US3_1
                    US2_0(v12)
                else
                    US2_1
            match v15 with
            | US2_1 -> (* None *)
                let v18 : bool = "Info" = v3
                let v22 : US2 =
                    if v18 then
                        let v19 : US3 = US3_2
                        US2_0(v19)
                    else
                        US2_1
                match v22 with
                | US2_1 -> (* None *)
                    let v25 : bool = "Warning" = v3
                    let v29 : US2 =
                        if v25 then
                            let v26 : US3 = US3_3
                            US2_0(v26)
                        else
                            US2_1
                    match v29 with
                    | US2_1 -> (* None *)
                        let v32 : bool = "Critical" = v3
                        let v36 : US2 =
                            if v32 then
                                let v33 : US3 = US3_4
                                US2_0(v33)
                            else
                                US2_1
                        match v36 with
                        | US2_1 -> (* None *)
                            US2_1
                        | US2_0(v37) -> (* Some *)
                            US2_0(v37)
                    | US2_0(v30) -> (* Some *)
                        US2_0(v30)
                | US2_0(v23) -> (* Some *)
                    US2_0(v23)
            | US2_0(v16) -> (* Some *)
                US2_0(v16)
        | US2_0(v9) -> (* Some *)
            US2_0(v9)
    let v50 : string = method6()
    let v51 : string = method4(v50)
    let v52 : bool = v51 = "True"
    let v62 : US5 =
        if v52 then
            let v53 : System.DateTime = System.DateTime.Now
            let v56 : (System.DateTime -> int64) = _.Ticks
            let v57 : int64 = v56 v53
            US5_0(v57)
        else
            US5_1
    let _v1 = struct (v49, v62) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v63 : US2 = US2_1
    let v64 : US5 = US5_1
    let _v1 = struct (v63, v64) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v65 : string = "AUTOMATION"
    let v66 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v67 : string = "env!(\"" + v65 + "\")"
    let v68 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v67 
    let v69 : string = "String::from($0)"
    let v70 : std_string_String = Fable.Core.RustInterop.emitRustExpr v68 v69 
    let v71 : string = "fable_library_rust::String_::fromString($0)"
    let v72 : string = Fable.Core.RustInterop.emitRustExpr v70 v71 
    let _v66 = v72 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v73 : string = "env!(\"" + v65 + "\")"
    let v74 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v73 
    let v75 : string = "String::from($0)"
    let v76 : std_string_String = Fable.Core.RustInterop.emitRustExpr v74 v75 
    let v77 : string = "fable_library_rust::String_::fromString($0)"
    let v78 : string = Fable.Core.RustInterop.emitRustExpr v76 v77 
    let _v66 = v78 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v79 : string = "env!(\"" + v65 + "\")"
    let v80 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v79 
    let v81 : string = "String::from($0)"
    let v82 : std_string_String = Fable.Core.RustInterop.emitRustExpr v80 v81 
    let v83 : string = "fable_library_rust::String_::fromString($0)"
    let v84 : string = Fable.Core.RustInterop.emitRustExpr v82 v83 
    let _v66 = v84 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v85 : string = null |> unbox<string>
    let _v66 = v85 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : string = null |> unbox<string>
    let _v66 = v88 
    #endif
#else
    let v91 : string = null |> unbox<string>
    let _v66 = v91 
    #endif
    let v94 : string = _v66 
    let v99 : string = "True"
    let v100 : bool = v94 <> v99 
    let v109 : US5 =
        if v100 then
            US5_1
        else
            let v104 : string = $"near_sdk::env::block_timestamp()"
            let v105 : uint64 = Fable.Core.RustInterop.emitRustExpr () v104 
            let v106 : (uint64 -> int64) = int64
            let v107 : int64 = v106 v105
            US5_0(v107)
    let v110 : US2 = US2_1
    let _v1 = struct (v110, v109) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v111 : string = method3()
    let v112 : string = method4(v111)
    
    
    
    
    
    let v113 : bool = "Verbose" = v112
    let v117 : US2 =
        if v113 then
            let v114 : US3 = US3_0
            US2_0(v114)
        else
            US2_1
    let v158 : US2 =
        match v117 with
        | US2_1 -> (* None *)
            let v120 : bool = "Debug" = v112
            let v124 : US2 =
                if v120 then
                    let v121 : US3 = US3_1
                    US2_0(v121)
                else
                    US2_1
            match v124 with
            | US2_1 -> (* None *)
                let v127 : bool = "Info" = v112
                let v131 : US2 =
                    if v127 then
                        let v128 : US3 = US3_2
                        US2_0(v128)
                    else
                        US2_1
                match v131 with
                | US2_1 -> (* None *)
                    let v134 : bool = "Warning" = v112
                    let v138 : US2 =
                        if v134 then
                            let v135 : US3 = US3_3
                            US2_0(v135)
                        else
                            US2_1
                    match v138 with
                    | US2_1 -> (* None *)
                        let v141 : bool = "Critical" = v112
                        let v145 : US2 =
                            if v141 then
                                let v142 : US3 = US3_4
                                US2_0(v142)
                            else
                                US2_1
                        match v145 with
                        | US2_1 -> (* None *)
                            US2_1
                        | US2_0(v146) -> (* Some *)
                            US2_0(v146)
                    | US2_0(v139) -> (* Some *)
                        US2_0(v139)
                | US2_0(v132) -> (* Some *)
                    US2_0(v132)
            | US2_0(v125) -> (* Some *)
                US2_0(v125)
        | US2_0(v118) -> (* Some *)
            US2_0(v118)
    let v159 : string = method6()
    let v160 : string = method4(v159)
    let v161 : bool = v160 = "True"
    let v171 : US5 =
        if v161 then
            let v162 : System.DateTime = System.DateTime.Now
            let v165 : (System.DateTime -> int64) = _.Ticks
            let v166 : int64 = v165 v162
            US5_0(v166)
        else
            US5_1
    let _v1 = struct (v158, v171) 
    #endif
#if FABLE_COMPILER_PYTHON
    let v172 : string = method3()
    let v173 : string = method4(v172)
    
    
    
    
    
    let v174 : bool = "Verbose" = v173
    let v178 : US2 =
        if v174 then
            let v175 : US3 = US3_0
            US2_0(v175)
        else
            US2_1
    let v219 : US2 =
        match v178 with
        | US2_1 -> (* None *)
            let v181 : bool = "Debug" = v173
            let v185 : US2 =
                if v181 then
                    let v182 : US3 = US3_1
                    US2_0(v182)
                else
                    US2_1
            match v185 with
            | US2_1 -> (* None *)
                let v188 : bool = "Info" = v173
                let v192 : US2 =
                    if v188 then
                        let v189 : US3 = US3_2
                        US2_0(v189)
                    else
                        US2_1
                match v192 with
                | US2_1 -> (* None *)
                    let v195 : bool = "Warning" = v173
                    let v199 : US2 =
                        if v195 then
                            let v196 : US3 = US3_3
                            US2_0(v196)
                        else
                            US2_1
                    match v199 with
                    | US2_1 -> (* None *)
                        let v202 : bool = "Critical" = v173
                        let v206 : US2 =
                            if v202 then
                                let v203 : US3 = US3_4
                                US2_0(v203)
                            else
                                US2_1
                        match v206 with
                        | US2_1 -> (* None *)
                            US2_1
                        | US2_0(v207) -> (* Some *)
                            US2_0(v207)
                    | US2_0(v200) -> (* Some *)
                        US2_0(v200)
                | US2_0(v193) -> (* Some *)
                    US2_0(v193)
            | US2_0(v186) -> (* Some *)
                US2_0(v186)
        | US2_0(v179) -> (* Some *)
            US2_0(v179)
    let v220 : string = method6()
    let v221 : string = method4(v220)
    let v222 : bool = v221 = "True"
    let v232 : US5 =
        if v222 then
            let v223 : System.DateTime = System.DateTime.Now
            let v226 : (System.DateTime -> int64) = _.Ticks
            let v227 : int64 = v226 v223
            US5_0(v227)
        else
            US5_1
    let _v1 = struct (v219, v232) 
    #endif
#else
    let v233 : string = method3()
    let v234 : string = method4(v233)
    
    
    
    
    
    let v235 : bool = "Verbose" = v234
    let v239 : US2 =
        if v235 then
            let v236 : US3 = US3_0
            US2_0(v236)
        else
            US2_1
    let v280 : US2 =
        match v239 with
        | US2_1 -> (* None *)
            let v242 : bool = "Debug" = v234
            let v246 : US2 =
                if v242 then
                    let v243 : US3 = US3_1
                    US2_0(v243)
                else
                    US2_1
            match v246 with
            | US2_1 -> (* None *)
                let v249 : bool = "Info" = v234
                let v253 : US2 =
                    if v249 then
                        let v250 : US3 = US3_2
                        US2_0(v250)
                    else
                        US2_1
                match v253 with
                | US2_1 -> (* None *)
                    let v256 : bool = "Warning" = v234
                    let v260 : US2 =
                        if v256 then
                            let v257 : US3 = US3_3
                            US2_0(v257)
                        else
                            US2_1
                    match v260 with
                    | US2_1 -> (* None *)
                        let v263 : bool = "Critical" = v234
                        let v267 : US2 =
                            if v263 then
                                let v264 : US3 = US3_4
                                US2_0(v264)
                            else
                                US2_1
                        match v267 with
                        | US2_1 -> (* None *)
                            US2_1
                        | US2_0(v268) -> (* Some *)
                            US2_0(v268)
                    | US2_0(v261) -> (* Some *)
                        US2_0(v261)
                | US2_0(v254) -> (* Some *)
                    US2_0(v254)
            | US2_0(v247) -> (* Some *)
                US2_0(v247)
        | US2_0(v240) -> (* Some *)
            US2_0(v240)
    let v281 : string = method6()
    let v282 : string = method4(v281)
    let v283 : bool = v282 = "True"
    let v293 : US5 =
        if v283 then
            let v284 : System.DateTime = System.DateTime.Now
            let v287 : (System.DateTime -> int64) = _.Ticks
            let v288 : int64 = v287 v284
            US5_0(v288)
        else
            US5_1
    let _v1 = struct (v280, v293) 
    #endif
    let struct (v294 : US2, v295 : US5) = _v1 
    let v359 : Mut2 = {l0 = true} : Mut2
    let v360 : Mut0 = {l0 = 0L} : Mut0
    let v363 : US3 =
        match v294 with
        | US2_1 -> (* None *)
            v0
        | US2_0(v361) -> (* Some *)
            v361
    let v364 : Mut3 = {l0 = v363} : Mut3
    let v365 : (string -> unit) = closure6()
    let v366 : Mut1 = {l0 = v365} : Mut1
    let v373 : int64 option =
        match v295 with
        | US5_1 -> (* None *)
            let v371 : int64 option = None
            v371
        | US5_0(v367) -> (* Some *)
            let v368 : int64 option = Some v367 
            v368
    struct (v360, v366, v359, v364, v373)
and closure3 (v0 : US3) () : unit =
    let v1 : bool = State.trace_state.IsNone
    if v1 then
        let struct (v2 : Mut0, v3 : Mut1, v4 : Mut2, v5 : Mut3, v6 : int64 option) = method2(v0)
        let v7 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v2, v3, v4, v5, v6) 
        State.trace_state <- v7 
        ()
and closure8 () () : unit =
    let v0 : bool = State.trace_state.IsNone
    if v0 then
        let v1 : US3 = US3_0
        let struct (v2 : Mut0, v3 : Mut1, v4 : Mut2, v5 : Mut3, v6 : int64 option) = method2(v1)
        let v7 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v2, v3, v4, v5, v6) 
        State.trace_state <- v7 
        ()
and closure9 (v0 : Mut0) () : unit =
    let v1 : int64 = v0.l0
    let v2 : int64 = v1 + 1L
    v0.l0 <- v2
    ()
and closure10 (v0 : US5 option ref) (v1 : US5 option) : US5 option ref =
    v0.Value <- v1 
    v0
and closure11 (v0 : int64 option, v1 : (US5 option -> US5 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : int64 = x
    let v3 : US5 = US5_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and method7 () : string =
    let v0 : string = "hh:mm:ss"
    v0
and method8 () : string =
    let v0 : string = "HH:mm:ss"
    v0
and method9 () : string =
    let v0 : string = "\u001b[0m"
    v0
and method10 () : string =
    let v0 : string = ""
    v0
and closure12 (v0 : Mut4, v1 : string) () : unit =
    let v2 : string = v0.l0
    let v3 : string = v2 + v1 
    v0.l0 <- v3
    ()
and closure13 () () : string =
    let v0 : string = $"spiral_wasm.main"
    v0
and closure15 (v0 : string) () : unit =
    let v1 : (string -> unit) = System.Console.WriteLine
    v1 v0
and closure14 () (v0 : string) : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure15(v0)
    let v3 : unit = (fun () -> v2 (); v1) ()
    ()
and closure7 (v0 : (string [])) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 0 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : string = "Verbose"
        let v554 : (unit -> string) = v553.ToLower
        let v555 : string = v554 ()
        let v558 : string = v555.PadLeft (7, ' ')
        let v572 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v573 : string = "inline_colorization::color_bright_black"
        let v574 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v573 
        let v575 : string = "&*$0"
        let v576 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v575 
        let v577 : string = "inline_colorization::color_reset"
        let v578 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v577 
        let v579 : string = "\"{v574}{v576}{v578}\""
        let v580 : string = @$"format!(" + v579 + ")"
        let v581 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v580 
        let v582 : string = "fable_library_rust::String_::fromString($0)"
        let v583 : string = Fable.Core.RustInterop.emitRustExpr v581 v582 
        let _v572 = v583 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v584 : string = "inline_colorization::color_bright_black"
        let v585 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v584 
        let v586 : string = "&*$0"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v586 
        let v588 : string = "inline_colorization::color_reset"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "\"{v585}{v587}{v589}\""
        let v591 : string = @$"format!(" + v590 + ")"
        let v592 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "fable_library_rust::String_::fromString($0)"
        let v594 : string = Fable.Core.RustInterop.emitRustExpr v592 v593 
        let _v572 = v594 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v595 : string = "inline_colorization::color_bright_black"
        let v596 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "&*$0"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v597 
        let v599 : string = "inline_colorization::color_reset"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "\"{v596}{v598}{v600}\""
        let v602 : string = @$"format!(" + v601 + ")"
        let v603 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "fable_library_rust::String_::fromString($0)"
        let v605 : string = Fable.Core.RustInterop.emitRustExpr v603 v604 
        let _v572 = v605 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v606 : string = "\u001b[90m"
        let v607 : string = method9()
        let v608 : string = v606 + v558 
        let v609 : string = v608 + v607 
        let _v572 = v609 
        #endif
#if FABLE_COMPILER_PYTHON
        let v610 : string = "\u001b[90m"
        let v611 : string = method9()
        let v612 : string = v610 + v558 
        let v613 : string = v612 + v611 
        let _v572 = v613 
        #endif
#else
        let v614 : string = "\u001b[90m"
        let v615 : string = method9()
        let v616 : string = v614 + v558 
        let v617 : string = v616 + v615 
        let _v572 = v617 
        #endif
        let v618 : string = _v572 
        let v624 : int64 = v85.l0
        let v625 : string = method10()
        let v626 : Mut4 = {l0 = v625} : Mut4
        let v627 : string = "{ "
        let v628 : string = $"{v627}"
        let v631 : unit = ()
        let v632 : (unit -> unit) = closure12(v626, v628)
        let v633 : unit = (fun () -> v632 (); v631) ()
        let v636 : string = "args"
        let v637 : string = $"{v636}"
        let v640 : unit = ()
        let v641 : (unit -> unit) = closure12(v626, v637)
        let v642 : unit = (fun () -> v641 (); v640) ()
        let v645 : string = " = "
        let v646 : string = $"{v645}"
        let v649 : unit = ()
        let v650 : (unit -> unit) = closure12(v626, v646)
        let v651 : unit = (fun () -> v650 (); v649) ()
        let v654 : string = $"%A{v0}"
        let v657 : string = $"{v654}"
        let v660 : unit = ()
        let v661 : (unit -> unit) = closure12(v626, v657)
        let v662 : unit = (fun () -> v661 (); v660) ()
        let v665 : string = " }"
        let v666 : string = $"{v665}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v626, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = v626.l0
        let v675 : (unit -> string) = closure13()
        let v676 : string = $"{v483} {v618} #{v624} %s{v675 ()} / {v674}"
        let v679 : char list = []
        let v680 : (char list -> (char [])) = List.toArray
        let v681 : (char []) = v680 v679
        let v684 : string = v676.TrimStart v681 
        let v702 : char list = []
        let v703 : char list = '/' :: v702 
        let v706 : char list = ' ' :: v703 
        let v709 : (char list -> (char [])) = List.toArray
        let v710 : (char []) = v709 v706
        let v713 : string = v684.TrimEnd v710 
        let v731 : (string -> unit) = closure14()
        let v732 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v733 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v713 v733 
        let _v732 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v734 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v713 v734 
        let _v732 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v735 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v713 v735 
        let _v732 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v731 v713
        let _v732 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v731 v713
        let _v732 = () 
        #endif
#else
        v731 v713
        let _v732 = () 
        #endif
        _v732 
        let v736 : (string -> unit) = v17.l0
        v736 v713
and method12 () : string =
    let v0 : string = "wasm"
    v0
and closure17 () () : string =
    let v0 : string = "spiral_wasm.run"
    v0
and closure16 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 0 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : string = "Verbose"
        let v554 : (unit -> string) = v553.ToLower
        let v555 : string = v554 ()
        let v558 : string = v555.PadLeft (7, ' ')
        let v572 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v573 : string = "inline_colorization::color_bright_black"
        let v574 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v573 
        let v575 : string = "&*$0"
        let v576 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v575 
        let v577 : string = "inline_colorization::color_reset"
        let v578 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v577 
        let v579 : string = "\"{v574}{v576}{v578}\""
        let v580 : string = @$"format!(" + v579 + ")"
        let v581 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v580 
        let v582 : string = "fable_library_rust::String_::fromString($0)"
        let v583 : string = Fable.Core.RustInterop.emitRustExpr v581 v582 
        let _v572 = v583 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v584 : string = "inline_colorization::color_bright_black"
        let v585 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v584 
        let v586 : string = "&*$0"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v586 
        let v588 : string = "inline_colorization::color_reset"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "\"{v585}{v587}{v589}\""
        let v591 : string = @$"format!(" + v590 + ")"
        let v592 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "fable_library_rust::String_::fromString($0)"
        let v594 : string = Fable.Core.RustInterop.emitRustExpr v592 v593 
        let _v572 = v594 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v595 : string = "inline_colorization::color_bright_black"
        let v596 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "&*$0"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v597 
        let v599 : string = "inline_colorization::color_reset"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "\"{v596}{v598}{v600}\""
        let v602 : string = @$"format!(" + v601 + ")"
        let v603 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "fable_library_rust::String_::fromString($0)"
        let v605 : string = Fable.Core.RustInterop.emitRustExpr v603 v604 
        let _v572 = v605 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v606 : string = "\u001b[90m"
        let v607 : string = method9()
        let v608 : string = v606 + v558 
        let v609 : string = v608 + v607 
        let _v572 = v609 
        #endif
#if FABLE_COMPILER_PYTHON
        let v610 : string = "\u001b[90m"
        let v611 : string = method9()
        let v612 : string = v610 + v558 
        let v613 : string = v612 + v611 
        let _v572 = v613 
        #endif
#else
        let v614 : string = "\u001b[90m"
        let v615 : string = method9()
        let v616 : string = v614 + v558 
        let v617 : string = v616 + v615 
        let _v572 = v617 
        #endif
        let v618 : string = _v572 
        let v624 : int64 = v85.l0
        let v625 : string = method10()
        let v626 : Mut4 = {l0 = v625} : Mut4
        let v627 : string = "{ "
        let v628 : string = $"{v627}"
        let v631 : unit = ()
        let v632 : (unit -> unit) = closure12(v626, v628)
        let v633 : unit = (fun () -> v632 (); v631) ()
        let v636 : string = "wasm_path"
        let v637 : string = $"{v636}"
        let v640 : unit = ()
        let v641 : (unit -> unit) = closure12(v626, v637)
        let v642 : unit = (fun () -> v641 (); v640) ()
        let v645 : string = " = "
        let v646 : string = $"{v645}"
        let v649 : unit = ()
        let v650 : (unit -> unit) = closure12(v626, v646)
        let v651 : unit = (fun () -> v650 (); v649) ()
        let v654 : string = $"{v0}"
        let v657 : unit = ()
        let v658 : (unit -> unit) = closure12(v626, v654)
        let v659 : unit = (fun () -> v658 (); v657) ()
        let v662 : string = " }"
        let v663 : string = $"{v662}"
        let v666 : unit = ()
        let v667 : (unit -> unit) = closure12(v626, v663)
        let v668 : unit = (fun () -> v667 (); v666) ()
        let v671 : string = v626.l0
        let v672 : (unit -> string) = closure17()
        let v673 : string = $"{v483} {v618} #{v624} %s{v672 ()} / {v671}"
        let v676 : char list = []
        let v677 : (char list -> (char [])) = List.toArray
        let v678 : (char []) = v677 v676
        let v681 : string = v673.TrimStart v678 
        let v699 : char list = []
        let v700 : char list = '/' :: v699 
        let v703 : char list = ' ' :: v700 
        let v706 : (char list -> (char [])) = List.toArray
        let v707 : (char []) = v706 v703
        let v710 : string = v681.TrimEnd v707 
        let v728 : (string -> unit) = closure14()
        let v729 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v730 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v710 v730 
        let _v729 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v731 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v710 v731 
        let _v729 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v732 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v710 v732 
        let _v729 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v728 v710
        let _v729 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v728 v710
        let _v729 = () 
        #endif
#else
        v728 v710
        let _v729 = () 
        #endif
        _v729 
        let v733 : (string -> unit) = v17.l0
        v733 v710
and closure19 () () : string =
    let v0 : string = "spiral_wasm.run"
    v0
and closure18 (v0 : uint8, v1 : near_workspaces_Worker<near_workspaces_network_Sandbox>) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure8()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : int64 option) = State.trace_state.Value
    let v32 : unit = ()
    let v33 : unit = (fun () -> v3 (); v32) ()
    let struct (v46 : Mut0, v47 : Mut1, v48 : Mut2, v49 : Mut3, v50 : int64 option) = State.trace_state.Value
    let v61 : US3 = v49.l0
    let v62 : bool = v48.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 0 >= v64
            v65
    if v66 then
        let v67 : unit = ()
        let v68 : (unit -> unit) = closure9(v17)
        let v69 : unit = (fun () -> v68 (); v67) ()
        let v72 : unit = ()
        let v73 : unit = (fun () -> v3 (); v72) ()
        let struct (v86 : Mut0, v87 : Mut1, v88 : Mut2, v89 : Mut3, v90 : int64 option) = State.trace_state.Value
        let v101 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v102 : US5 option = None
        let _v102 = ref v102 
        let v103 : US5 option ref = _v102 
        let v104 : (US5 option -> US5 option ref) = closure10(v103)
        let v105 : unit = ()
        let v106 : (unit -> unit) = closure11(v90, v104)
        let v107 : unit = (fun () -> v106 (); v105) ()
        let v110 : US5 option = _v102.Value 
        let v121 : US5 = US5_1
        let v122 : US5 = v110 |> Option.defaultValue v121 
        let v162 : System.DateTime =
            match v122 with
            | US5_1 -> (* None *)
                let v158 : System.DateTime = System.DateTime.Now
                v158
            | US5_0(v126) -> (* Some *)
                let v127 : System.DateTime = System.DateTime.Now
                let v130 : (System.DateTime -> int64) = _.Ticks
                let v131 : int64 = v130 v127
                let v134 : int64 = v131 - v126
                let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v136 : System.TimeSpan = v135 v134
                let v139 : (System.TimeSpan -> int32) = _.Hours
                let v140 : int32 = v139 v136
                let v143 : (System.TimeSpan -> int32) = _.Minutes
                let v144 : int32 = v143 v136
                let v147 : (System.TimeSpan -> int32) = _.Seconds
                let v148 : int32 = v147 v136
                let v151 : (System.TimeSpan -> int32) = _.Milliseconds
                let v152 : int32 = v151 v136
                let v155 : System.DateTime = System.DateTime (1, 1, 1, v140, v144, v148, v152)
                v155
        let v163 : string = method7()
        let v166 : (string -> string) = v162.ToString
        let v167 : string = v166 v163
        let _v101 = v167 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v170 : US5 option = None
        let _v170 = ref v170 
        let v171 : US5 option ref = _v170 
        let v172 : (US5 option -> US5 option ref) = closure10(v171)
        let v173 : unit = ()
        let v174 : (unit -> unit) = closure11(v90, v172)
        let v175 : unit = (fun () -> v174 (); v173) ()
        let v178 : US5 option = _v170.Value 
        let v189 : US5 = US5_1
        let v190 : US5 = v178 |> Option.defaultValue v189 
        let v230 : System.DateTime =
            match v190 with
            | US5_1 -> (* None *)
                let v226 : System.DateTime = System.DateTime.Now
                v226
            | US5_0(v194) -> (* Some *)
                let v195 : System.DateTime = System.DateTime.Now
                let v198 : (System.DateTime -> int64) = _.Ticks
                let v199 : int64 = v198 v195
                let v202 : int64 = v199 - v194
                let v203 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v204 : System.TimeSpan = v203 v202
                let v207 : (System.TimeSpan -> int32) = _.Hours
                let v208 : int32 = v207 v204
                let v211 : (System.TimeSpan -> int32) = _.Minutes
                let v212 : int32 = v211 v204
                let v215 : (System.TimeSpan -> int32) = _.Seconds
                let v216 : int32 = v215 v204
                let v219 : (System.TimeSpan -> int32) = _.Milliseconds
                let v220 : int32 = v219 v204
                let v223 : System.DateTime = System.DateTime (1, 1, 1, v208, v212, v216, v220)
                v223
        let v231 : string = method7()
        let v234 : (string -> string) = v230.ToString
        let v235 : string = v234 v231
        let _v101 = v235 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v238 : string = $"near_sdk::env::block_timestamp()"
        let v239 : uint64 = Fable.Core.RustInterop.emitRustExpr () v238 
        let v240 : US5 option = None
        let _v240 = ref v240 
        let v241 : US5 option ref = _v240 
        let v242 : (US5 option -> US5 option ref) = closure10(v241)
        let v243 : unit = ()
        let v244 : (unit -> unit) = closure11(v90, v242)
        let v245 : unit = (fun () -> v244 (); v243) ()
        let v248 : US5 option = _v240.Value 
        let v259 : US5 = US5_1
        let v260 : US5 = v248 |> Option.defaultValue v259 
        let v269 : uint64 =
            match v260 with
            | US5_1 -> (* None *)
                v239
            | US5_0(v264) -> (* Some *)
                let v265 : (int64 -> uint64) = uint64
                let v266 : uint64 = v265 v264
                let v267 : uint64 = v239 - v266
                v267
        let v270 : uint64 = v269 / 1000000000UL
        let v271 : uint64 = v270 % 60UL
        let v272 : uint64 = v270 / 60UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v270 / 3600UL
        let v275 : uint64 = v274 % 24UL
        let v276 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v277 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v275, v273, v271) v276 
        let v278 : string = "fable_library_rust::String_::fromString($0)"
        let v279 : string = Fable.Core.RustInterop.emitRustExpr v277 v278 
        let _v101 = v279 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v280 : US5 option = None
        let _v280 = ref v280 
        let v281 : US5 option ref = _v280 
        let v282 : (US5 option -> US5 option ref) = closure10(v281)
        let v283 : unit = ()
        let v284 : (unit -> unit) = closure11(v90, v282)
        let v285 : unit = (fun () -> v284 (); v283) ()
        let v288 : US5 option = _v280.Value 
        let v299 : US5 = US5_1
        let v300 : US5 = v288 |> Option.defaultValue v299 
        let v340 : System.DateTime =
            match v300 with
            | US5_1 -> (* None *)
                let v336 : System.DateTime = System.DateTime.Now
                v336
            | US5_0(v304) -> (* Some *)
                let v305 : System.DateTime = System.DateTime.Now
                let v308 : (System.DateTime -> int64) = _.Ticks
                let v309 : int64 = v308 v305
                let v312 : int64 = v309 - v304
                let v313 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v314 : System.TimeSpan = v313 v312
                let v317 : (System.TimeSpan -> int32) = _.Hours
                let v318 : int32 = v317 v314
                let v321 : (System.TimeSpan -> int32) = _.Minutes
                let v322 : int32 = v321 v314
                let v325 : (System.TimeSpan -> int32) = _.Seconds
                let v326 : int32 = v325 v314
                let v329 : (System.TimeSpan -> int32) = _.Milliseconds
                let v330 : int32 = v329 v314
                let v333 : System.DateTime = System.DateTime (1, 1, 1, v318, v322, v326, v330)
                v333
        let v341 : string = method8()
        let v344 : (string -> string) = v340.ToString
        let v345 : string = v344 v341
        let _v101 = v345 
        #endif
#if FABLE_COMPILER_PYTHON
        let v348 : US5 option = None
        let _v348 = ref v348 
        let v349 : US5 option ref = _v348 
        let v350 : (US5 option -> US5 option ref) = closure10(v349)
        let v351 : unit = ()
        let v352 : (unit -> unit) = closure11(v90, v350)
        let v353 : unit = (fun () -> v352 (); v351) ()
        let v356 : US5 option = _v348.Value 
        let v367 : US5 = US5_1
        let v368 : US5 = v356 |> Option.defaultValue v367 
        let v408 : System.DateTime =
            match v368 with
            | US5_1 -> (* None *)
                let v404 : System.DateTime = System.DateTime.Now
                v404
            | US5_0(v372) -> (* Some *)
                let v373 : System.DateTime = System.DateTime.Now
                let v376 : (System.DateTime -> int64) = _.Ticks
                let v377 : int64 = v376 v373
                let v380 : int64 = v377 - v372
                let v381 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v382 : System.TimeSpan = v381 v380
                let v385 : (System.TimeSpan -> int32) = _.Hours
                let v386 : int32 = v385 v382
                let v389 : (System.TimeSpan -> int32) = _.Minutes
                let v390 : int32 = v389 v382
                let v393 : (System.TimeSpan -> int32) = _.Seconds
                let v394 : int32 = v393 v382
                let v397 : (System.TimeSpan -> int32) = _.Milliseconds
                let v398 : int32 = v397 v382
                let v401 : System.DateTime = System.DateTime (1, 1, 1, v386, v390, v394, v398)
                v401
        let v409 : string = method8()
        let v412 : (string -> string) = v408.ToString
        let v413 : string = v412 v409
        let _v101 = v413 
        #endif
#else
        let v416 : US5 option = None
        let _v416 = ref v416 
        let v417 : US5 option ref = _v416 
        let v418 : (US5 option -> US5 option ref) = closure10(v417)
        let v419 : unit = ()
        let v420 : (unit -> unit) = closure11(v90, v418)
        let v421 : unit = (fun () -> v420 (); v419) ()
        let v424 : US5 option = _v416.Value 
        let v435 : US5 = US5_1
        let v436 : US5 = v424 |> Option.defaultValue v435 
        let v476 : System.DateTime =
            match v436 with
            | US5_1 -> (* None *)
                let v472 : System.DateTime = System.DateTime.Now
                v472
            | US5_0(v440) -> (* Some *)
                let v441 : System.DateTime = System.DateTime.Now
                let v444 : (System.DateTime -> int64) = _.Ticks
                let v445 : int64 = v444 v441
                let v448 : int64 = v445 - v440
                let v449 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v450 : System.TimeSpan = v449 v448
                let v453 : (System.TimeSpan -> int32) = _.Hours
                let v454 : int32 = v453 v450
                let v457 : (System.TimeSpan -> int32) = _.Minutes
                let v458 : int32 = v457 v450
                let v461 : (System.TimeSpan -> int32) = _.Seconds
                let v462 : int32 = v461 v450
                let v465 : (System.TimeSpan -> int32) = _.Milliseconds
                let v466 : int32 = v465 v450
                let v469 : System.DateTime = System.DateTime (1, 1, 1, v454, v458, v462, v466)
                v469
        let v477 : string = method8()
        let v480 : (string -> string) = v476.ToString
        let v481 : string = v480 v477
        let _v101 = v481 
        #endif
        let v484 : string = _v101 
        
        
        
        
        
        let v554 : string = "Verbose"
        let v555 : (unit -> string) = v554.ToLower
        let v556 : string = v555 ()
        let v559 : string = v556.PadLeft (7, ' ')
        let v573 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v574 : string = "inline_colorization::color_bright_black"
        let v575 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v574 
        let v576 : string = "&*$0"
        let v577 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v576 
        let v578 : string = "inline_colorization::color_reset"
        let v579 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v578 
        let v580 : string = "\"{v575}{v577}{v579}\""
        let v581 : string = @$"format!(" + v580 + ")"
        let v582 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v581 
        let v583 : string = "fable_library_rust::String_::fromString($0)"
        let v584 : string = Fable.Core.RustInterop.emitRustExpr v582 v583 
        let _v573 = v584 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v585 : string = "inline_colorization::color_bright_black"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v573 = v595 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v596 : string = "inline_colorization::color_bright_black"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v573 = v606 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v607 : string = "\u001b[90m"
        let v608 : string = method9()
        let v609 : string = v607 + v559 
        let v610 : string = v609 + v608 
        let _v573 = v610 
        #endif
#if FABLE_COMPILER_PYTHON
        let v611 : string = "\u001b[90m"
        let v612 : string = method9()
        let v613 : string = v611 + v559 
        let v614 : string = v613 + v612 
        let _v573 = v614 
        #endif
#else
        let v615 : string = "\u001b[90m"
        let v616 : string = method9()
        let v617 : string = v615 + v559 
        let v618 : string = v617 + v616 
        let _v573 = v618 
        #endif
        let v619 : string = _v573 
        let v625 : int64 = v86.l0
        let v626 : string = method10()
        let v627 : Mut4 = {l0 = v626} : Mut4
        let v628 : string = "{ "
        let v629 : string = $"{v628}"
        let v632 : unit = ()
        let v633 : (unit -> unit) = closure12(v627, v629)
        let v634 : unit = (fun () -> v633 (); v632) ()
        let v637 : string = "retry"
        let v638 : string = $"{v637}"
        let v641 : unit = ()
        let v642 : (unit -> unit) = closure12(v627, v638)
        let v643 : unit = (fun () -> v642 (); v641) ()
        let v646 : string = " = "
        let v647 : string = $"{v646}"
        let v650 : unit = ()
        let v651 : (unit -> unit) = closure12(v627, v647)
        let v652 : unit = (fun () -> v651 (); v650) ()
        let v655 : string = $"{v0}"
        let v658 : unit = ()
        let v659 : (unit -> unit) = closure12(v627, v655)
        let v660 : unit = (fun () -> v659 (); v658) ()
        let v663 : string = "; "
        let v664 : string = $"{v663}"
        let v667 : unit = ()
        let v668 : (unit -> unit) = closure12(v627, v664)
        let v669 : unit = (fun () -> v668 (); v667) ()
        let v672 : string = "worker"
        let v673 : string = $"{v672}"
        let v676 : unit = ()
        let v677 : (unit -> unit) = closure12(v627, v673)
        let v678 : unit = (fun () -> v677 (); v676) ()
        let v681 : string = $"{v646}"
        let v684 : unit = ()
        let v685 : (unit -> unit) = closure12(v627, v681)
        let v686 : unit = (fun () -> v685 (); v684) ()
        let v689 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v690 : string = "format!(\"{:#?}\", $0)"
        let v691 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v690 
        let v692 : string = "fable_library_rust::String_::fromString($0)"
        let v693 : string = Fable.Core.RustInterop.emitRustExpr v691 v692 
        let _v689 = v693 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v694 : string = "format!(\"{:#?}\", $0)"
        let v695 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v694 
        let v696 : string = "fable_library_rust::String_::fromString($0)"
        let v697 : string = Fable.Core.RustInterop.emitRustExpr v695 v696 
        let _v689 = v697 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v698 : string = "format!(\"{:#?}\", $0)"
        let v699 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v698 
        let v700 : string = "fable_library_rust::String_::fromString($0)"
        let v701 : string = Fable.Core.RustInterop.emitRustExpr v699 v700 
        let _v689 = v701 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v702 : string = $"%A{v1}"
        let _v689 = v702 
        #endif
#if FABLE_COMPILER_PYTHON
        let v705 : string = $"%A{v1}"
        let _v689 = v705 
        #endif
#else
        let v708 : string = $"%A{v1}"
        let _v689 = v708 
        #endif
        let v711 : string = _v689 
        let v716 : string = $"{v711}"
        let v719 : unit = ()
        let v720 : (unit -> unit) = closure12(v627, v716)
        let v721 : unit = (fun () -> v720 (); v719) ()
        let v724 : string = " }"
        let v725 : string = $"{v724}"
        let v728 : unit = ()
        let v729 : (unit -> unit) = closure12(v627, v725)
        let v730 : unit = (fun () -> v729 (); v728) ()
        let v733 : string = v627.l0
        let v734 : (unit -> string) = closure19()
        let v735 : string = $"{v484} {v619} #{v625} %s{v734 ()} / {v733}"
        let v738 : char list = []
        let v739 : (char list -> (char [])) = List.toArray
        let v740 : (char []) = v739 v738
        let v743 : string = v735.TrimStart v740 
        let v761 : char list = []
        let v762 : char list = '/' :: v761 
        let v765 : char list = ' ' :: v762 
        let v768 : (char list -> (char [])) = List.toArray
        let v769 : (char []) = v768 v765
        let v772 : string = v743.TrimEnd v769 
        let v790 : (string -> unit) = closure14()
        let v791 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v792 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v772 v792 
        let _v791 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v793 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v772 v793 
        let _v791 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v794 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v772 v794 
        let _v791 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v790 v772
        let _v791 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v790 v772
        let _v791 = () 
        #endif
#else
        v790 v772
        let _v791 = () 
        #endif
        _v791 
        let v795 : (string -> unit) = v18.l0
        v795 v772
and closure21 () () : string =
    let v0 : string = "spiral_wasm.run"
    v0
and closure20 (v0 : uint8, v1 : near_workspaces_Contract) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure8()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : int64 option) = State.trace_state.Value
    let v32 : unit = ()
    let v33 : unit = (fun () -> v3 (); v32) ()
    let struct (v46 : Mut0, v47 : Mut1, v48 : Mut2, v49 : Mut3, v50 : int64 option) = State.trace_state.Value
    let v61 : US3 = v49.l0
    let v62 : bool = v48.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 0 >= v64
            v65
    if v66 then
        let v67 : unit = ()
        let v68 : (unit -> unit) = closure9(v17)
        let v69 : unit = (fun () -> v68 (); v67) ()
        let v72 : unit = ()
        let v73 : unit = (fun () -> v3 (); v72) ()
        let struct (v86 : Mut0, v87 : Mut1, v88 : Mut2, v89 : Mut3, v90 : int64 option) = State.trace_state.Value
        let v101 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v102 : US5 option = None
        let _v102 = ref v102 
        let v103 : US5 option ref = _v102 
        let v104 : (US5 option -> US5 option ref) = closure10(v103)
        let v105 : unit = ()
        let v106 : (unit -> unit) = closure11(v90, v104)
        let v107 : unit = (fun () -> v106 (); v105) ()
        let v110 : US5 option = _v102.Value 
        let v121 : US5 = US5_1
        let v122 : US5 = v110 |> Option.defaultValue v121 
        let v162 : System.DateTime =
            match v122 with
            | US5_1 -> (* None *)
                let v158 : System.DateTime = System.DateTime.Now
                v158
            | US5_0(v126) -> (* Some *)
                let v127 : System.DateTime = System.DateTime.Now
                let v130 : (System.DateTime -> int64) = _.Ticks
                let v131 : int64 = v130 v127
                let v134 : int64 = v131 - v126
                let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v136 : System.TimeSpan = v135 v134
                let v139 : (System.TimeSpan -> int32) = _.Hours
                let v140 : int32 = v139 v136
                let v143 : (System.TimeSpan -> int32) = _.Minutes
                let v144 : int32 = v143 v136
                let v147 : (System.TimeSpan -> int32) = _.Seconds
                let v148 : int32 = v147 v136
                let v151 : (System.TimeSpan -> int32) = _.Milliseconds
                let v152 : int32 = v151 v136
                let v155 : System.DateTime = System.DateTime (1, 1, 1, v140, v144, v148, v152)
                v155
        let v163 : string = method7()
        let v166 : (string -> string) = v162.ToString
        let v167 : string = v166 v163
        let _v101 = v167 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v170 : US5 option = None
        let _v170 = ref v170 
        let v171 : US5 option ref = _v170 
        let v172 : (US5 option -> US5 option ref) = closure10(v171)
        let v173 : unit = ()
        let v174 : (unit -> unit) = closure11(v90, v172)
        let v175 : unit = (fun () -> v174 (); v173) ()
        let v178 : US5 option = _v170.Value 
        let v189 : US5 = US5_1
        let v190 : US5 = v178 |> Option.defaultValue v189 
        let v230 : System.DateTime =
            match v190 with
            | US5_1 -> (* None *)
                let v226 : System.DateTime = System.DateTime.Now
                v226
            | US5_0(v194) -> (* Some *)
                let v195 : System.DateTime = System.DateTime.Now
                let v198 : (System.DateTime -> int64) = _.Ticks
                let v199 : int64 = v198 v195
                let v202 : int64 = v199 - v194
                let v203 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v204 : System.TimeSpan = v203 v202
                let v207 : (System.TimeSpan -> int32) = _.Hours
                let v208 : int32 = v207 v204
                let v211 : (System.TimeSpan -> int32) = _.Minutes
                let v212 : int32 = v211 v204
                let v215 : (System.TimeSpan -> int32) = _.Seconds
                let v216 : int32 = v215 v204
                let v219 : (System.TimeSpan -> int32) = _.Milliseconds
                let v220 : int32 = v219 v204
                let v223 : System.DateTime = System.DateTime (1, 1, 1, v208, v212, v216, v220)
                v223
        let v231 : string = method7()
        let v234 : (string -> string) = v230.ToString
        let v235 : string = v234 v231
        let _v101 = v235 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v238 : string = $"near_sdk::env::block_timestamp()"
        let v239 : uint64 = Fable.Core.RustInterop.emitRustExpr () v238 
        let v240 : US5 option = None
        let _v240 = ref v240 
        let v241 : US5 option ref = _v240 
        let v242 : (US5 option -> US5 option ref) = closure10(v241)
        let v243 : unit = ()
        let v244 : (unit -> unit) = closure11(v90, v242)
        let v245 : unit = (fun () -> v244 (); v243) ()
        let v248 : US5 option = _v240.Value 
        let v259 : US5 = US5_1
        let v260 : US5 = v248 |> Option.defaultValue v259 
        let v269 : uint64 =
            match v260 with
            | US5_1 -> (* None *)
                v239
            | US5_0(v264) -> (* Some *)
                let v265 : (int64 -> uint64) = uint64
                let v266 : uint64 = v265 v264
                let v267 : uint64 = v239 - v266
                v267
        let v270 : uint64 = v269 / 1000000000UL
        let v271 : uint64 = v270 % 60UL
        let v272 : uint64 = v270 / 60UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v270 / 3600UL
        let v275 : uint64 = v274 % 24UL
        let v276 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v277 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v275, v273, v271) v276 
        let v278 : string = "fable_library_rust::String_::fromString($0)"
        let v279 : string = Fable.Core.RustInterop.emitRustExpr v277 v278 
        let _v101 = v279 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v280 : US5 option = None
        let _v280 = ref v280 
        let v281 : US5 option ref = _v280 
        let v282 : (US5 option -> US5 option ref) = closure10(v281)
        let v283 : unit = ()
        let v284 : (unit -> unit) = closure11(v90, v282)
        let v285 : unit = (fun () -> v284 (); v283) ()
        let v288 : US5 option = _v280.Value 
        let v299 : US5 = US5_1
        let v300 : US5 = v288 |> Option.defaultValue v299 
        let v340 : System.DateTime =
            match v300 with
            | US5_1 -> (* None *)
                let v336 : System.DateTime = System.DateTime.Now
                v336
            | US5_0(v304) -> (* Some *)
                let v305 : System.DateTime = System.DateTime.Now
                let v308 : (System.DateTime -> int64) = _.Ticks
                let v309 : int64 = v308 v305
                let v312 : int64 = v309 - v304
                let v313 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v314 : System.TimeSpan = v313 v312
                let v317 : (System.TimeSpan -> int32) = _.Hours
                let v318 : int32 = v317 v314
                let v321 : (System.TimeSpan -> int32) = _.Minutes
                let v322 : int32 = v321 v314
                let v325 : (System.TimeSpan -> int32) = _.Seconds
                let v326 : int32 = v325 v314
                let v329 : (System.TimeSpan -> int32) = _.Milliseconds
                let v330 : int32 = v329 v314
                let v333 : System.DateTime = System.DateTime (1, 1, 1, v318, v322, v326, v330)
                v333
        let v341 : string = method8()
        let v344 : (string -> string) = v340.ToString
        let v345 : string = v344 v341
        let _v101 = v345 
        #endif
#if FABLE_COMPILER_PYTHON
        let v348 : US5 option = None
        let _v348 = ref v348 
        let v349 : US5 option ref = _v348 
        let v350 : (US5 option -> US5 option ref) = closure10(v349)
        let v351 : unit = ()
        let v352 : (unit -> unit) = closure11(v90, v350)
        let v353 : unit = (fun () -> v352 (); v351) ()
        let v356 : US5 option = _v348.Value 
        let v367 : US5 = US5_1
        let v368 : US5 = v356 |> Option.defaultValue v367 
        let v408 : System.DateTime =
            match v368 with
            | US5_1 -> (* None *)
                let v404 : System.DateTime = System.DateTime.Now
                v404
            | US5_0(v372) -> (* Some *)
                let v373 : System.DateTime = System.DateTime.Now
                let v376 : (System.DateTime -> int64) = _.Ticks
                let v377 : int64 = v376 v373
                let v380 : int64 = v377 - v372
                let v381 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v382 : System.TimeSpan = v381 v380
                let v385 : (System.TimeSpan -> int32) = _.Hours
                let v386 : int32 = v385 v382
                let v389 : (System.TimeSpan -> int32) = _.Minutes
                let v390 : int32 = v389 v382
                let v393 : (System.TimeSpan -> int32) = _.Seconds
                let v394 : int32 = v393 v382
                let v397 : (System.TimeSpan -> int32) = _.Milliseconds
                let v398 : int32 = v397 v382
                let v401 : System.DateTime = System.DateTime (1, 1, 1, v386, v390, v394, v398)
                v401
        let v409 : string = method8()
        let v412 : (string -> string) = v408.ToString
        let v413 : string = v412 v409
        let _v101 = v413 
        #endif
#else
        let v416 : US5 option = None
        let _v416 = ref v416 
        let v417 : US5 option ref = _v416 
        let v418 : (US5 option -> US5 option ref) = closure10(v417)
        let v419 : unit = ()
        let v420 : (unit -> unit) = closure11(v90, v418)
        let v421 : unit = (fun () -> v420 (); v419) ()
        let v424 : US5 option = _v416.Value 
        let v435 : US5 = US5_1
        let v436 : US5 = v424 |> Option.defaultValue v435 
        let v476 : System.DateTime =
            match v436 with
            | US5_1 -> (* None *)
                let v472 : System.DateTime = System.DateTime.Now
                v472
            | US5_0(v440) -> (* Some *)
                let v441 : System.DateTime = System.DateTime.Now
                let v444 : (System.DateTime -> int64) = _.Ticks
                let v445 : int64 = v444 v441
                let v448 : int64 = v445 - v440
                let v449 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v450 : System.TimeSpan = v449 v448
                let v453 : (System.TimeSpan -> int32) = _.Hours
                let v454 : int32 = v453 v450
                let v457 : (System.TimeSpan -> int32) = _.Minutes
                let v458 : int32 = v457 v450
                let v461 : (System.TimeSpan -> int32) = _.Seconds
                let v462 : int32 = v461 v450
                let v465 : (System.TimeSpan -> int32) = _.Milliseconds
                let v466 : int32 = v465 v450
                let v469 : System.DateTime = System.DateTime (1, 1, 1, v454, v458, v462, v466)
                v469
        let v477 : string = method8()
        let v480 : (string -> string) = v476.ToString
        let v481 : string = v480 v477
        let _v101 = v481 
        #endif
        let v484 : string = _v101 
        
        
        
        
        
        let v554 : string = "Verbose"
        let v555 : (unit -> string) = v554.ToLower
        let v556 : string = v555 ()
        let v559 : string = v556.PadLeft (7, ' ')
        let v573 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v574 : string = "inline_colorization::color_bright_black"
        let v575 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v574 
        let v576 : string = "&*$0"
        let v577 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v576 
        let v578 : string = "inline_colorization::color_reset"
        let v579 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v578 
        let v580 : string = "\"{v575}{v577}{v579}\""
        let v581 : string = @$"format!(" + v580 + ")"
        let v582 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v581 
        let v583 : string = "fable_library_rust::String_::fromString($0)"
        let v584 : string = Fable.Core.RustInterop.emitRustExpr v582 v583 
        let _v573 = v584 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v585 : string = "inline_colorization::color_bright_black"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v573 = v595 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v596 : string = "inline_colorization::color_bright_black"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v573 = v606 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v607 : string = "\u001b[90m"
        let v608 : string = method9()
        let v609 : string = v607 + v559 
        let v610 : string = v609 + v608 
        let _v573 = v610 
        #endif
#if FABLE_COMPILER_PYTHON
        let v611 : string = "\u001b[90m"
        let v612 : string = method9()
        let v613 : string = v611 + v559 
        let v614 : string = v613 + v612 
        let _v573 = v614 
        #endif
#else
        let v615 : string = "\u001b[90m"
        let v616 : string = method9()
        let v617 : string = v615 + v559 
        let v618 : string = v617 + v616 
        let _v573 = v618 
        #endif
        let v619 : string = _v573 
        let v625 : int64 = v86.l0
        let v626 : string = method10()
        let v627 : Mut4 = {l0 = v626} : Mut4
        let v628 : string = "{ "
        let v629 : string = $"{v628}"
        let v632 : unit = ()
        let v633 : (unit -> unit) = closure12(v627, v629)
        let v634 : unit = (fun () -> v633 (); v632) ()
        let v637 : string = "retry"
        let v638 : string = $"{v637}"
        let v641 : unit = ()
        let v642 : (unit -> unit) = closure12(v627, v638)
        let v643 : unit = (fun () -> v642 (); v641) ()
        let v646 : string = " = "
        let v647 : string = $"{v646}"
        let v650 : unit = ()
        let v651 : (unit -> unit) = closure12(v627, v647)
        let v652 : unit = (fun () -> v651 (); v650) ()
        let v655 : string = $"{v0}"
        let v658 : unit = ()
        let v659 : (unit -> unit) = closure12(v627, v655)
        let v660 : unit = (fun () -> v659 (); v658) ()
        let v663 : string = "; "
        let v664 : string = $"{v663}"
        let v667 : unit = ()
        let v668 : (unit -> unit) = closure12(v627, v664)
        let v669 : unit = (fun () -> v668 (); v667) ()
        let v672 : string = "contract"
        let v673 : string = $"{v672}"
        let v676 : unit = ()
        let v677 : (unit -> unit) = closure12(v627, v673)
        let v678 : unit = (fun () -> v677 (); v676) ()
        let v681 : string = $"{v646}"
        let v684 : unit = ()
        let v685 : (unit -> unit) = closure12(v627, v681)
        let v686 : unit = (fun () -> v685 (); v684) ()
        let v689 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v690 : string = "format!(\"{:#?}\", $0)"
        let v691 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v690 
        let v692 : string = "fable_library_rust::String_::fromString($0)"
        let v693 : string = Fable.Core.RustInterop.emitRustExpr v691 v692 
        let _v689 = v693 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v694 : string = "format!(\"{:#?}\", $0)"
        let v695 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v694 
        let v696 : string = "fable_library_rust::String_::fromString($0)"
        let v697 : string = Fable.Core.RustInterop.emitRustExpr v695 v696 
        let _v689 = v697 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v698 : string = "format!(\"{:#?}\", $0)"
        let v699 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v698 
        let v700 : string = "fable_library_rust::String_::fromString($0)"
        let v701 : string = Fable.Core.RustInterop.emitRustExpr v699 v700 
        let _v689 = v701 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v702 : string = $"%A{v1}"
        let _v689 = v702 
        #endif
#if FABLE_COMPILER_PYTHON
        let v705 : string = $"%A{v1}"
        let _v689 = v705 
        #endif
#else
        let v708 : string = $"%A{v1}"
        let _v689 = v708 
        #endif
        let v711 : string = _v689 
        let v716 : string = $"{v711}"
        let v719 : unit = ()
        let v720 : (unit -> unit) = closure12(v627, v716)
        let v721 : unit = (fun () -> v720 (); v719) ()
        let v724 : string = " }"
        let v725 : string = $"{v724}"
        let v728 : unit = ()
        let v729 : (unit -> unit) = closure12(v627, v725)
        let v730 : unit = (fun () -> v729 (); v728) ()
        let v733 : string = v627.l0
        let v734 : (unit -> string) = closure21()
        let v735 : string = $"{v484} {v619} #{v625} %s{v734 ()} / {v733}"
        let v738 : char list = []
        let v739 : (char list -> (char [])) = List.toArray
        let v740 : (char []) = v739 v738
        let v743 : string = v735.TrimStart v740 
        let v761 : char list = []
        let v762 : char list = '/' :: v761 
        let v765 : char list = ' ' :: v762 
        let v768 : (char list -> (char [])) = List.toArray
        let v769 : (char []) = v768 v765
        let v772 : string = v743.TrimEnd v769 
        let v790 : (string -> unit) = closure14()
        let v791 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v792 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v772 v792 
        let _v791 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v793 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v772 v793 
        let _v791 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v794 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v772 v794 
        let _v791 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v790 v772
        let _v791 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v790 v772
        let _v791 = () 
        #endif
#else
        v790 v772
        let _v791 = () 
        #endif
        _v791 
        let v795 : (string -> unit) = v18.l0
        v795 v772
and closure23 () () : string =
    let v0 : string = "spiral_wasm.run"
    v0
and closure22 (v0 : uint8, v1 : near_workspaces_result_ExecutionFinalResult) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure8()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : int64 option) = State.trace_state.Value
    let v32 : unit = ()
    let v33 : unit = (fun () -> v3 (); v32) ()
    let struct (v46 : Mut0, v47 : Mut1, v48 : Mut2, v49 : Mut3, v50 : int64 option) = State.trace_state.Value
    let v61 : US3 = v49.l0
    let v62 : bool = v48.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 0 >= v64
            v65
    if v66 then
        let v67 : unit = ()
        let v68 : (unit -> unit) = closure9(v17)
        let v69 : unit = (fun () -> v68 (); v67) ()
        let v72 : unit = ()
        let v73 : unit = (fun () -> v3 (); v72) ()
        let struct (v86 : Mut0, v87 : Mut1, v88 : Mut2, v89 : Mut3, v90 : int64 option) = State.trace_state.Value
        let v101 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v102 : US5 option = None
        let _v102 = ref v102 
        let v103 : US5 option ref = _v102 
        let v104 : (US5 option -> US5 option ref) = closure10(v103)
        let v105 : unit = ()
        let v106 : (unit -> unit) = closure11(v90, v104)
        let v107 : unit = (fun () -> v106 (); v105) ()
        let v110 : US5 option = _v102.Value 
        let v121 : US5 = US5_1
        let v122 : US5 = v110 |> Option.defaultValue v121 
        let v162 : System.DateTime =
            match v122 with
            | US5_1 -> (* None *)
                let v158 : System.DateTime = System.DateTime.Now
                v158
            | US5_0(v126) -> (* Some *)
                let v127 : System.DateTime = System.DateTime.Now
                let v130 : (System.DateTime -> int64) = _.Ticks
                let v131 : int64 = v130 v127
                let v134 : int64 = v131 - v126
                let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v136 : System.TimeSpan = v135 v134
                let v139 : (System.TimeSpan -> int32) = _.Hours
                let v140 : int32 = v139 v136
                let v143 : (System.TimeSpan -> int32) = _.Minutes
                let v144 : int32 = v143 v136
                let v147 : (System.TimeSpan -> int32) = _.Seconds
                let v148 : int32 = v147 v136
                let v151 : (System.TimeSpan -> int32) = _.Milliseconds
                let v152 : int32 = v151 v136
                let v155 : System.DateTime = System.DateTime (1, 1, 1, v140, v144, v148, v152)
                v155
        let v163 : string = method7()
        let v166 : (string -> string) = v162.ToString
        let v167 : string = v166 v163
        let _v101 = v167 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v170 : US5 option = None
        let _v170 = ref v170 
        let v171 : US5 option ref = _v170 
        let v172 : (US5 option -> US5 option ref) = closure10(v171)
        let v173 : unit = ()
        let v174 : (unit -> unit) = closure11(v90, v172)
        let v175 : unit = (fun () -> v174 (); v173) ()
        let v178 : US5 option = _v170.Value 
        let v189 : US5 = US5_1
        let v190 : US5 = v178 |> Option.defaultValue v189 
        let v230 : System.DateTime =
            match v190 with
            | US5_1 -> (* None *)
                let v226 : System.DateTime = System.DateTime.Now
                v226
            | US5_0(v194) -> (* Some *)
                let v195 : System.DateTime = System.DateTime.Now
                let v198 : (System.DateTime -> int64) = _.Ticks
                let v199 : int64 = v198 v195
                let v202 : int64 = v199 - v194
                let v203 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v204 : System.TimeSpan = v203 v202
                let v207 : (System.TimeSpan -> int32) = _.Hours
                let v208 : int32 = v207 v204
                let v211 : (System.TimeSpan -> int32) = _.Minutes
                let v212 : int32 = v211 v204
                let v215 : (System.TimeSpan -> int32) = _.Seconds
                let v216 : int32 = v215 v204
                let v219 : (System.TimeSpan -> int32) = _.Milliseconds
                let v220 : int32 = v219 v204
                let v223 : System.DateTime = System.DateTime (1, 1, 1, v208, v212, v216, v220)
                v223
        let v231 : string = method7()
        let v234 : (string -> string) = v230.ToString
        let v235 : string = v234 v231
        let _v101 = v235 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v238 : string = $"near_sdk::env::block_timestamp()"
        let v239 : uint64 = Fable.Core.RustInterop.emitRustExpr () v238 
        let v240 : US5 option = None
        let _v240 = ref v240 
        let v241 : US5 option ref = _v240 
        let v242 : (US5 option -> US5 option ref) = closure10(v241)
        let v243 : unit = ()
        let v244 : (unit -> unit) = closure11(v90, v242)
        let v245 : unit = (fun () -> v244 (); v243) ()
        let v248 : US5 option = _v240.Value 
        let v259 : US5 = US5_1
        let v260 : US5 = v248 |> Option.defaultValue v259 
        let v269 : uint64 =
            match v260 with
            | US5_1 -> (* None *)
                v239
            | US5_0(v264) -> (* Some *)
                let v265 : (int64 -> uint64) = uint64
                let v266 : uint64 = v265 v264
                let v267 : uint64 = v239 - v266
                v267
        let v270 : uint64 = v269 / 1000000000UL
        let v271 : uint64 = v270 % 60UL
        let v272 : uint64 = v270 / 60UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v270 / 3600UL
        let v275 : uint64 = v274 % 24UL
        let v276 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v277 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v275, v273, v271) v276 
        let v278 : string = "fable_library_rust::String_::fromString($0)"
        let v279 : string = Fable.Core.RustInterop.emitRustExpr v277 v278 
        let _v101 = v279 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v280 : US5 option = None
        let _v280 = ref v280 
        let v281 : US5 option ref = _v280 
        let v282 : (US5 option -> US5 option ref) = closure10(v281)
        let v283 : unit = ()
        let v284 : (unit -> unit) = closure11(v90, v282)
        let v285 : unit = (fun () -> v284 (); v283) ()
        let v288 : US5 option = _v280.Value 
        let v299 : US5 = US5_1
        let v300 : US5 = v288 |> Option.defaultValue v299 
        let v340 : System.DateTime =
            match v300 with
            | US5_1 -> (* None *)
                let v336 : System.DateTime = System.DateTime.Now
                v336
            | US5_0(v304) -> (* Some *)
                let v305 : System.DateTime = System.DateTime.Now
                let v308 : (System.DateTime -> int64) = _.Ticks
                let v309 : int64 = v308 v305
                let v312 : int64 = v309 - v304
                let v313 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v314 : System.TimeSpan = v313 v312
                let v317 : (System.TimeSpan -> int32) = _.Hours
                let v318 : int32 = v317 v314
                let v321 : (System.TimeSpan -> int32) = _.Minutes
                let v322 : int32 = v321 v314
                let v325 : (System.TimeSpan -> int32) = _.Seconds
                let v326 : int32 = v325 v314
                let v329 : (System.TimeSpan -> int32) = _.Milliseconds
                let v330 : int32 = v329 v314
                let v333 : System.DateTime = System.DateTime (1, 1, 1, v318, v322, v326, v330)
                v333
        let v341 : string = method8()
        let v344 : (string -> string) = v340.ToString
        let v345 : string = v344 v341
        let _v101 = v345 
        #endif
#if FABLE_COMPILER_PYTHON
        let v348 : US5 option = None
        let _v348 = ref v348 
        let v349 : US5 option ref = _v348 
        let v350 : (US5 option -> US5 option ref) = closure10(v349)
        let v351 : unit = ()
        let v352 : (unit -> unit) = closure11(v90, v350)
        let v353 : unit = (fun () -> v352 (); v351) ()
        let v356 : US5 option = _v348.Value 
        let v367 : US5 = US5_1
        let v368 : US5 = v356 |> Option.defaultValue v367 
        let v408 : System.DateTime =
            match v368 with
            | US5_1 -> (* None *)
                let v404 : System.DateTime = System.DateTime.Now
                v404
            | US5_0(v372) -> (* Some *)
                let v373 : System.DateTime = System.DateTime.Now
                let v376 : (System.DateTime -> int64) = _.Ticks
                let v377 : int64 = v376 v373
                let v380 : int64 = v377 - v372
                let v381 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v382 : System.TimeSpan = v381 v380
                let v385 : (System.TimeSpan -> int32) = _.Hours
                let v386 : int32 = v385 v382
                let v389 : (System.TimeSpan -> int32) = _.Minutes
                let v390 : int32 = v389 v382
                let v393 : (System.TimeSpan -> int32) = _.Seconds
                let v394 : int32 = v393 v382
                let v397 : (System.TimeSpan -> int32) = _.Milliseconds
                let v398 : int32 = v397 v382
                let v401 : System.DateTime = System.DateTime (1, 1, 1, v386, v390, v394, v398)
                v401
        let v409 : string = method8()
        let v412 : (string -> string) = v408.ToString
        let v413 : string = v412 v409
        let _v101 = v413 
        #endif
#else
        let v416 : US5 option = None
        let _v416 = ref v416 
        let v417 : US5 option ref = _v416 
        let v418 : (US5 option -> US5 option ref) = closure10(v417)
        let v419 : unit = ()
        let v420 : (unit -> unit) = closure11(v90, v418)
        let v421 : unit = (fun () -> v420 (); v419) ()
        let v424 : US5 option = _v416.Value 
        let v435 : US5 = US5_1
        let v436 : US5 = v424 |> Option.defaultValue v435 
        let v476 : System.DateTime =
            match v436 with
            | US5_1 -> (* None *)
                let v472 : System.DateTime = System.DateTime.Now
                v472
            | US5_0(v440) -> (* Some *)
                let v441 : System.DateTime = System.DateTime.Now
                let v444 : (System.DateTime -> int64) = _.Ticks
                let v445 : int64 = v444 v441
                let v448 : int64 = v445 - v440
                let v449 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v450 : System.TimeSpan = v449 v448
                let v453 : (System.TimeSpan -> int32) = _.Hours
                let v454 : int32 = v453 v450
                let v457 : (System.TimeSpan -> int32) = _.Minutes
                let v458 : int32 = v457 v450
                let v461 : (System.TimeSpan -> int32) = _.Seconds
                let v462 : int32 = v461 v450
                let v465 : (System.TimeSpan -> int32) = _.Milliseconds
                let v466 : int32 = v465 v450
                let v469 : System.DateTime = System.DateTime (1, 1, 1, v454, v458, v462, v466)
                v469
        let v477 : string = method8()
        let v480 : (string -> string) = v476.ToString
        let v481 : string = v480 v477
        let _v101 = v481 
        #endif
        let v484 : string = _v101 
        
        
        
        
        
        let v554 : string = "Verbose"
        let v555 : (unit -> string) = v554.ToLower
        let v556 : string = v555 ()
        let v559 : string = v556.PadLeft (7, ' ')
        let v573 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v574 : string = "inline_colorization::color_bright_black"
        let v575 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v574 
        let v576 : string = "&*$0"
        let v577 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v576 
        let v578 : string = "inline_colorization::color_reset"
        let v579 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v578 
        let v580 : string = "\"{v575}{v577}{v579}\""
        let v581 : string = @$"format!(" + v580 + ")"
        let v582 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v581 
        let v583 : string = "fable_library_rust::String_::fromString($0)"
        let v584 : string = Fable.Core.RustInterop.emitRustExpr v582 v583 
        let _v573 = v584 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v585 : string = "inline_colorization::color_bright_black"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v573 = v595 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v596 : string = "inline_colorization::color_bright_black"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v573 = v606 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v607 : string = "\u001b[90m"
        let v608 : string = method9()
        let v609 : string = v607 + v559 
        let v610 : string = v609 + v608 
        let _v573 = v610 
        #endif
#if FABLE_COMPILER_PYTHON
        let v611 : string = "\u001b[90m"
        let v612 : string = method9()
        let v613 : string = v611 + v559 
        let v614 : string = v613 + v612 
        let _v573 = v614 
        #endif
#else
        let v615 : string = "\u001b[90m"
        let v616 : string = method9()
        let v617 : string = v615 + v559 
        let v618 : string = v617 + v616 
        let _v573 = v618 
        #endif
        let v619 : string = _v573 
        let v625 : int64 = v86.l0
        let v626 : string = method10()
        let v627 : Mut4 = {l0 = v626} : Mut4
        let v628 : string = "{ "
        let v629 : string = $"{v628}"
        let v632 : unit = ()
        let v633 : (unit -> unit) = closure12(v627, v629)
        let v634 : unit = (fun () -> v633 (); v632) ()
        let v637 : string = "retry"
        let v638 : string = $"{v637}"
        let v641 : unit = ()
        let v642 : (unit -> unit) = closure12(v627, v638)
        let v643 : unit = (fun () -> v642 (); v641) ()
        let v646 : string = " = "
        let v647 : string = $"{v646}"
        let v650 : unit = ()
        let v651 : (unit -> unit) = closure12(v627, v647)
        let v652 : unit = (fun () -> v651 (); v650) ()
        let v655 : string = $"{v0}"
        let v658 : unit = ()
        let v659 : (unit -> unit) = closure12(v627, v655)
        let v660 : unit = (fun () -> v659 (); v658) ()
        let v663 : string = "; "
        let v664 : string = $"{v663}"
        let v667 : unit = ()
        let v668 : (unit -> unit) = closure12(v627, v664)
        let v669 : unit = (fun () -> v668 (); v667) ()
        let v672 : string = "result"
        let v673 : string = $"{v672}"
        let v676 : unit = ()
        let v677 : (unit -> unit) = closure12(v627, v673)
        let v678 : unit = (fun () -> v677 (); v676) ()
        let v681 : string = $"{v646}"
        let v684 : unit = ()
        let v685 : (unit -> unit) = closure12(v627, v681)
        let v686 : unit = (fun () -> v685 (); v684) ()
        let v689 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v690 : string = "format!(\"{:#?}\", $0)"
        let v691 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v690 
        let v692 : string = "fable_library_rust::String_::fromString($0)"
        let v693 : string = Fable.Core.RustInterop.emitRustExpr v691 v692 
        let _v689 = v693 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v694 : string = "format!(\"{:#?}\", $0)"
        let v695 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v694 
        let v696 : string = "fable_library_rust::String_::fromString($0)"
        let v697 : string = Fable.Core.RustInterop.emitRustExpr v695 v696 
        let _v689 = v697 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v698 : string = "format!(\"{:#?}\", $0)"
        let v699 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v698 
        let v700 : string = "fable_library_rust::String_::fromString($0)"
        let v701 : string = Fable.Core.RustInterop.emitRustExpr v699 v700 
        let _v689 = v701 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v702 : string = $"%A{v1}"
        let _v689 = v702 
        #endif
#if FABLE_COMPILER_PYTHON
        let v705 : string = $"%A{v1}"
        let _v689 = v705 
        #endif
#else
        let v708 : string = $"%A{v1}"
        let _v689 = v708 
        #endif
        let v711 : string = _v689 
        let v716 : string = $"{v711}"
        let v719 : unit = ()
        let v720 : (unit -> unit) = closure12(v627, v716)
        let v721 : unit = (fun () -> v720 (); v719) ()
        let v724 : string = " }"
        let v725 : string = $"{v724}"
        let v728 : unit = ()
        let v729 : (unit -> unit) = closure12(v627, v725)
        let v730 : unit = (fun () -> v729 (); v728) ()
        let v733 : string = v627.l0
        let v734 : (unit -> string) = closure23()
        let v735 : string = $"{v484} {v619} #{v625} %s{v734 ()} / {v733}"
        let v738 : char list = []
        let v739 : (char list -> (char [])) = List.toArray
        let v740 : (char []) = v739 v738
        let v743 : string = v735.TrimStart v740 
        let v761 : char list = []
        let v762 : char list = '/' :: v761 
        let v765 : char list = ' ' :: v762 
        let v768 : (char list -> (char [])) = List.toArray
        let v769 : (char []) = v768 v765
        let v772 : string = v743.TrimEnd v769 
        let v790 : (string -> unit) = closure14()
        let v791 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v792 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v772 v792 
        let _v791 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v793 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v772 v793 
        let _v791 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v794 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v772 v794 
        let _v791 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v790 v772
        let _v791 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v790 v772
        let _v791 = () 
        #endif
#else
        v790 v772
        let _v791 = () 
        #endif
        _v791 
        let v795 : (string -> unit) = v18.l0
        v795 v772
and closure25 (v0 : std_string_String) () : unit =
    let v1 : (std_string_String -> unit) = System.Console.WriteLine
    v1 v0
and closure24 () (v0 : std_string_String) : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure25(v0)
    let v3 : unit = (fun () -> v2 (); v1) ()
    ()
and method14 () : string =
    let v0 : string = "("
    v0
and method15 () : string =
    let v0 : string = " "
    v0
and closure27 () () : string =
    let v0 : string = "spiral_wasm.print_usd"
    v0
and closure26 (v0 : uint8, v1 : uint64, v2 : float) () : unit =
    let v3 : unit = ()
    let v4 : (unit -> unit) = closure8()
    let v5 : unit = (fun () -> v4 (); v3) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : int64 option) = State.trace_state.Value
    let v33 : unit = ()
    let v34 : unit = (fun () -> v4 (); v33) ()
    let struct (v47 : Mut0, v48 : Mut1, v49 : Mut2, v50 : Mut3, v51 : int64 option) = State.trace_state.Value
    let v62 : US3 = v50.l0
    let v63 : bool = v49.l0
    let v64 : bool = v63 = false
    let v67 : bool =
        if v64 then
            false
        else
            let v65 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v62
            let v66 : bool = 1 >= v65
            v66
    if v67 then
        let v68 : unit = ()
        let v69 : (unit -> unit) = closure9(v18)
        let v70 : unit = (fun () -> v69 (); v68) ()
        let v73 : unit = ()
        let v74 : unit = (fun () -> v4 (); v73) ()
        let struct (v87 : Mut0, v88 : Mut1, v89 : Mut2, v90 : Mut3, v91 : int64 option) = State.trace_state.Value
        let v102 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v103 : US5 option = None
        let _v103 = ref v103 
        let v104 : US5 option ref = _v103 
        let v105 : (US5 option -> US5 option ref) = closure10(v104)
        let v106 : unit = ()
        let v107 : (unit -> unit) = closure11(v91, v105)
        let v108 : unit = (fun () -> v107 (); v106) ()
        let v111 : US5 option = _v103.Value 
        let v122 : US5 = US5_1
        let v123 : US5 = v111 |> Option.defaultValue v122 
        let v163 : System.DateTime =
            match v123 with
            | US5_1 -> (* None *)
                let v159 : System.DateTime = System.DateTime.Now
                v159
            | US5_0(v127) -> (* Some *)
                let v128 : System.DateTime = System.DateTime.Now
                let v131 : (System.DateTime -> int64) = _.Ticks
                let v132 : int64 = v131 v128
                let v135 : int64 = v132 - v127
                let v136 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v137 : System.TimeSpan = v136 v135
                let v140 : (System.TimeSpan -> int32) = _.Hours
                let v141 : int32 = v140 v137
                let v144 : (System.TimeSpan -> int32) = _.Minutes
                let v145 : int32 = v144 v137
                let v148 : (System.TimeSpan -> int32) = _.Seconds
                let v149 : int32 = v148 v137
                let v152 : (System.TimeSpan -> int32) = _.Milliseconds
                let v153 : int32 = v152 v137
                let v156 : System.DateTime = System.DateTime (1, 1, 1, v141, v145, v149, v153)
                v156
        let v164 : string = method7()
        let v167 : (string -> string) = v163.ToString
        let v168 : string = v167 v164
        let _v102 = v168 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v171 : US5 option = None
        let _v171 = ref v171 
        let v172 : US5 option ref = _v171 
        let v173 : (US5 option -> US5 option ref) = closure10(v172)
        let v174 : unit = ()
        let v175 : (unit -> unit) = closure11(v91, v173)
        let v176 : unit = (fun () -> v175 (); v174) ()
        let v179 : US5 option = _v171.Value 
        let v190 : US5 = US5_1
        let v191 : US5 = v179 |> Option.defaultValue v190 
        let v231 : System.DateTime =
            match v191 with
            | US5_1 -> (* None *)
                let v227 : System.DateTime = System.DateTime.Now
                v227
            | US5_0(v195) -> (* Some *)
                let v196 : System.DateTime = System.DateTime.Now
                let v199 : (System.DateTime -> int64) = _.Ticks
                let v200 : int64 = v199 v196
                let v203 : int64 = v200 - v195
                let v204 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v205 : System.TimeSpan = v204 v203
                let v208 : (System.TimeSpan -> int32) = _.Hours
                let v209 : int32 = v208 v205
                let v212 : (System.TimeSpan -> int32) = _.Minutes
                let v213 : int32 = v212 v205
                let v216 : (System.TimeSpan -> int32) = _.Seconds
                let v217 : int32 = v216 v205
                let v220 : (System.TimeSpan -> int32) = _.Milliseconds
                let v221 : int32 = v220 v205
                let v224 : System.DateTime = System.DateTime (1, 1, 1, v209, v213, v217, v221)
                v224
        let v232 : string = method7()
        let v235 : (string -> string) = v231.ToString
        let v236 : string = v235 v232
        let _v102 = v236 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v239 : string = $"near_sdk::env::block_timestamp()"
        let v240 : uint64 = Fable.Core.RustInterop.emitRustExpr () v239 
        let v241 : US5 option = None
        let _v241 = ref v241 
        let v242 : US5 option ref = _v241 
        let v243 : (US5 option -> US5 option ref) = closure10(v242)
        let v244 : unit = ()
        let v245 : (unit -> unit) = closure11(v91, v243)
        let v246 : unit = (fun () -> v245 (); v244) ()
        let v249 : US5 option = _v241.Value 
        let v260 : US5 = US5_1
        let v261 : US5 = v249 |> Option.defaultValue v260 
        let v270 : uint64 =
            match v261 with
            | US5_1 -> (* None *)
                v240
            | US5_0(v265) -> (* Some *)
                let v266 : (int64 -> uint64) = uint64
                let v267 : uint64 = v266 v265
                let v268 : uint64 = v240 - v267
                v268
        let v271 : uint64 = v270 / 1000000000UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v271 / 60UL
        let v274 : uint64 = v273 % 60UL
        let v275 : uint64 = v271 / 3600UL
        let v276 : uint64 = v275 % 24UL
        let v277 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v278 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v276, v274, v272) v277 
        let v279 : string = "fable_library_rust::String_::fromString($0)"
        let v280 : string = Fable.Core.RustInterop.emitRustExpr v278 v279 
        let _v102 = v280 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v281 : US5 option = None
        let _v281 = ref v281 
        let v282 : US5 option ref = _v281 
        let v283 : (US5 option -> US5 option ref) = closure10(v282)
        let v284 : unit = ()
        let v285 : (unit -> unit) = closure11(v91, v283)
        let v286 : unit = (fun () -> v285 (); v284) ()
        let v289 : US5 option = _v281.Value 
        let v300 : US5 = US5_1
        let v301 : US5 = v289 |> Option.defaultValue v300 
        let v341 : System.DateTime =
            match v301 with
            | US5_1 -> (* None *)
                let v337 : System.DateTime = System.DateTime.Now
                v337
            | US5_0(v305) -> (* Some *)
                let v306 : System.DateTime = System.DateTime.Now
                let v309 : (System.DateTime -> int64) = _.Ticks
                let v310 : int64 = v309 v306
                let v313 : int64 = v310 - v305
                let v314 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v315 : System.TimeSpan = v314 v313
                let v318 : (System.TimeSpan -> int32) = _.Hours
                let v319 : int32 = v318 v315
                let v322 : (System.TimeSpan -> int32) = _.Minutes
                let v323 : int32 = v322 v315
                let v326 : (System.TimeSpan -> int32) = _.Seconds
                let v327 : int32 = v326 v315
                let v330 : (System.TimeSpan -> int32) = _.Milliseconds
                let v331 : int32 = v330 v315
                let v334 : System.DateTime = System.DateTime (1, 1, 1, v319, v323, v327, v331)
                v334
        let v342 : string = method8()
        let v345 : (string -> string) = v341.ToString
        let v346 : string = v345 v342
        let _v102 = v346 
        #endif
#if FABLE_COMPILER_PYTHON
        let v349 : US5 option = None
        let _v349 = ref v349 
        let v350 : US5 option ref = _v349 
        let v351 : (US5 option -> US5 option ref) = closure10(v350)
        let v352 : unit = ()
        let v353 : (unit -> unit) = closure11(v91, v351)
        let v354 : unit = (fun () -> v353 (); v352) ()
        let v357 : US5 option = _v349.Value 
        let v368 : US5 = US5_1
        let v369 : US5 = v357 |> Option.defaultValue v368 
        let v409 : System.DateTime =
            match v369 with
            | US5_1 -> (* None *)
                let v405 : System.DateTime = System.DateTime.Now
                v405
            | US5_0(v373) -> (* Some *)
                let v374 : System.DateTime = System.DateTime.Now
                let v377 : (System.DateTime -> int64) = _.Ticks
                let v378 : int64 = v377 v374
                let v381 : int64 = v378 - v373
                let v382 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v383 : System.TimeSpan = v382 v381
                let v386 : (System.TimeSpan -> int32) = _.Hours
                let v387 : int32 = v386 v383
                let v390 : (System.TimeSpan -> int32) = _.Minutes
                let v391 : int32 = v390 v383
                let v394 : (System.TimeSpan -> int32) = _.Seconds
                let v395 : int32 = v394 v383
                let v398 : (System.TimeSpan -> int32) = _.Milliseconds
                let v399 : int32 = v398 v383
                let v402 : System.DateTime = System.DateTime (1, 1, 1, v387, v391, v395, v399)
                v402
        let v410 : string = method8()
        let v413 : (string -> string) = v409.ToString
        let v414 : string = v413 v410
        let _v102 = v414 
        #endif
#else
        let v417 : US5 option = None
        let _v417 = ref v417 
        let v418 : US5 option ref = _v417 
        let v419 : (US5 option -> US5 option ref) = closure10(v418)
        let v420 : unit = ()
        let v421 : (unit -> unit) = closure11(v91, v419)
        let v422 : unit = (fun () -> v421 (); v420) ()
        let v425 : US5 option = _v417.Value 
        let v436 : US5 = US5_1
        let v437 : US5 = v425 |> Option.defaultValue v436 
        let v477 : System.DateTime =
            match v437 with
            | US5_1 -> (* None *)
                let v473 : System.DateTime = System.DateTime.Now
                v473
            | US5_0(v441) -> (* Some *)
                let v442 : System.DateTime = System.DateTime.Now
                let v445 : (System.DateTime -> int64) = _.Ticks
                let v446 : int64 = v445 v442
                let v449 : int64 = v446 - v441
                let v450 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v451 : System.TimeSpan = v450 v449
                let v454 : (System.TimeSpan -> int32) = _.Hours
                let v455 : int32 = v454 v451
                let v458 : (System.TimeSpan -> int32) = _.Minutes
                let v459 : int32 = v458 v451
                let v462 : (System.TimeSpan -> int32) = _.Seconds
                let v463 : int32 = v462 v451
                let v466 : (System.TimeSpan -> int32) = _.Milliseconds
                let v467 : int32 = v466 v451
                let v470 : System.DateTime = System.DateTime (1, 1, 1, v455, v459, v463, v467)
                v470
        let v478 : string = method8()
        let v481 : (string -> string) = v477.ToString
        let v482 : string = v481 v478
        let _v102 = v482 
        #endif
        let v485 : string = _v102 
        
        
        
        
        
        let v555 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v556 : string = method14()
        let _v555 = v556 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v557 : string = method14()
        let _v555 = v557 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v558 : string = method14()
        let _v555 = v558 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v559 : string = method15()
        let _v555 = v559 
        #endif
#if FABLE_COMPILER_PYTHON
        let v560 : string = method15()
        let _v555 = v560 
        #endif
#else
        let v561 : string = method15()
        let _v555 = v561 
        #endif
        let v562 : string = _v555 
        let v567 : string = method10()
        let v568 : Mut4 = {l0 = v567} : Mut4
        let v569 : US3 = US3_0
        let v570 : string = $"%A{v569}"
        let v574 : string = $"{v570}"
        let v577 : unit = ()
        let v578 : (unit -> unit) = closure12(v568, v574)
        let v579 : unit = (fun () -> v578 (); v577) ()
        let v582 : string = v568.l0
        let v583 : (string []) = v582.Split v562 
        let v586 : string = v583.[int 0]
        let v589 : string = method10()
        let v590 : Mut4 = {l0 = v589} : Mut4
        let v591 : US3 = US3_1
        let v592 : string = $"%A{v591}"
        let v596 : string = $"{v592}"
        let v599 : unit = ()
        let v600 : (unit -> unit) = closure12(v590, v596)
        let v601 : unit = (fun () -> v600 (); v599) ()
        let v604 : string = v590.l0
        let v605 : bool = v604.StartsWith v586 
        let v611 : US4 =
            if v605 then
                let v608 : string = "Verbose"
                US4_0(v608)
            else
                US4_1
        let v617 : US4 =
            match v611 with
            | US4_1 -> (* None *)
                let v614 : string = "Debug"
                US4_0(v614)
            | US4_0(v612) -> (* Some *)
                US4_0(v612)
        let v621 : string =
            match v617 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v618) -> (* Some *)
                v618
        let v622 : (unit -> string) = v621.ToLower
        let v623 : string = v622 ()
        let v626 : string = v623.PadLeft (7, ' ')
        let v640 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v641 : string = "inline_colorization::color_bright_blue"
        let v642 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v641 
        let v643 : string = "&*$0"
        let v644 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v626 v643 
        let v645 : string = "inline_colorization::color_reset"
        let v646 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v645 
        let v647 : string = "\"{v642}{v644}{v646}\""
        let v648 : string = @$"format!(" + v647 + ")"
        let v649 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v648 
        let v650 : string = "fable_library_rust::String_::fromString($0)"
        let v651 : string = Fable.Core.RustInterop.emitRustExpr v649 v650 
        let _v640 = v651 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v652 : string = "inline_colorization::color_bright_blue"
        let v653 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v652 
        let v654 : string = "&*$0"
        let v655 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v626 v654 
        let v656 : string = "inline_colorization::color_reset"
        let v657 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v656 
        let v658 : string = "\"{v653}{v655}{v657}\""
        let v659 : string = @$"format!(" + v658 + ")"
        let v660 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v659 
        let v661 : string = "fable_library_rust::String_::fromString($0)"
        let v662 : string = Fable.Core.RustInterop.emitRustExpr v660 v661 
        let _v640 = v662 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v663 : string = "inline_colorization::color_bright_blue"
        let v664 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v663 
        let v665 : string = "&*$0"
        let v666 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v626 v665 
        let v667 : string = "inline_colorization::color_reset"
        let v668 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v667 
        let v669 : string = "\"{v664}{v666}{v668}\""
        let v670 : string = @$"format!(" + v669 + ")"
        let v671 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v670 
        let v672 : string = "fable_library_rust::String_::fromString($0)"
        let v673 : string = Fable.Core.RustInterop.emitRustExpr v671 v672 
        let _v640 = v673 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v674 : string = "\u001b[94m"
        let v675 : string = method9()
        let v676 : string = v674 + v626 
        let v677 : string = v676 + v675 
        let _v640 = v677 
        #endif
#if FABLE_COMPILER_PYTHON
        let v678 : string = "\u001b[94m"
        let v679 : string = method9()
        let v680 : string = v678 + v626 
        let v681 : string = v680 + v679 
        let _v640 = v681 
        #endif
#else
        let v682 : string = "\u001b[94m"
        let v683 : string = method9()
        let v684 : string = v682 + v626 
        let v685 : string = v684 + v683 
        let _v640 = v685 
        #endif
        let v686 : string = _v640 
        let v692 : int64 = v87.l0
        let v693 : string = method10()
        let v694 : Mut4 = {l0 = v693} : Mut4
        let v695 : string = "{ "
        let v696 : string = $"{v695}"
        let v699 : unit = ()
        let v700 : (unit -> unit) = closure12(v694, v696)
        let v701 : unit = (fun () -> v700 (); v699) ()
        let v704 : string = "retry"
        let v705 : string = $"{v704}"
        let v708 : unit = ()
        let v709 : (unit -> unit) = closure12(v694, v705)
        let v710 : unit = (fun () -> v709 (); v708) ()
        let v713 : string = " = "
        let v714 : string = $"{v713}"
        let v717 : unit = ()
        let v718 : (unit -> unit) = closure12(v694, v714)
        let v719 : unit = (fun () -> v718 (); v717) ()
        let v722 : string = $"{v0}"
        let v725 : unit = ()
        let v726 : (unit -> unit) = closure12(v694, v722)
        let v727 : unit = (fun () -> v726 (); v725) ()
        let v730 : string = "; "
        let v731 : string = $"{v730}"
        let v734 : unit = ()
        let v735 : (unit -> unit) = closure12(v694, v731)
        let v736 : unit = (fun () -> v735 (); v734) ()
        let v739 : string = "total_gas_burnt_usd"
        let v740 : string = $"{v739}"
        let v743 : unit = ()
        let v744 : (unit -> unit) = closure12(v694, v740)
        let v745 : unit = (fun () -> v744 (); v743) ()
        let v748 : string = $"{v713}"
        let v751 : unit = ()
        let v752 : (unit -> unit) = closure12(v694, v748)
        let v753 : unit = (fun () -> v752 (); v751) ()
        let v756 : string = $"%+.6f{v2}"
        let v759 : unit = ()
        let v760 : (unit -> unit) = closure12(v694, v756)
        let v761 : unit = (fun () -> v760 (); v759) ()
        let v764 : string = $"{v730}"
        let v767 : unit = ()
        let v768 : (unit -> unit) = closure12(v694, v764)
        let v769 : unit = (fun () -> v768 (); v767) ()
        let v772 : string = "total_gas_burnt"
        let v773 : string = $"{v772}"
        let v776 : unit = ()
        let v777 : (unit -> unit) = closure12(v694, v773)
        let v778 : unit = (fun () -> v777 (); v776) ()
        let v781 : string = $"{v713}"
        let v784 : unit = ()
        let v785 : (unit -> unit) = closure12(v694, v781)
        let v786 : unit = (fun () -> v785 (); v784) ()
        let v789 : string = $"{v1}"
        let v792 : unit = ()
        let v793 : (unit -> unit) = closure12(v694, v789)
        let v794 : unit = (fun () -> v793 (); v792) ()
        let v797 : string = " }"
        let v798 : string = $"{v797}"
        let v801 : unit = ()
        let v802 : (unit -> unit) = closure12(v694, v798)
        let v803 : unit = (fun () -> v802 (); v801) ()
        let v806 : string = v694.l0
        let v807 : (unit -> string) = closure27()
        let v808 : string = $"{v485} {v686} #{v692} %s{v807 ()} / {v806}"
        let v811 : char list = []
        let v812 : (char list -> (char [])) = List.toArray
        let v813 : (char []) = v812 v811
        let v816 : string = v808.TrimStart v813 
        let v834 : char list = []
        let v835 : char list = '/' :: v834 
        let v838 : char list = ' ' :: v835 
        let v841 : (char list -> (char [])) = List.toArray
        let v842 : (char []) = v841 v838
        let v845 : string = v816.TrimEnd v842 
        let v863 : (string -> unit) = closure14()
        let v864 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v865 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v845 v865 
        let _v864 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v866 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v845 v866 
        let _v864 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v867 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v845 v867 
        let _v864 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v863 v845
        let _v864 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v863 v845
        let _v864 = () 
        #endif
#else
        v863 v845
        let _v864 = () 
        #endif
        _v864 
        let v868 : (string -> unit) = v19.l0
        v868 v845
and closure30 () () : string =
    let v0 : string = "spiral_wasm.print_usd / outcome"
    v0
and closure29 (v0 : bool, v1 : uint64, v2 : float, v3 : u128, v4 : float) () : unit =
    let v5 : unit = ()
    let v6 : (unit -> unit) = closure8()
    let v7 : unit = (fun () -> v6 (); v5) ()
    let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : int64 option) = State.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v6 (); v35) ()
    let struct (v49 : Mut0, v50 : Mut1, v51 : Mut2, v52 : Mut3, v53 : int64 option) = State.trace_state.Value
    let v64 : US3 = v52.l0
    let v65 : bool = v51.l0
    let v66 : bool = v65 = false
    let v69 : bool =
        if v66 then
            false
        else
            let v67 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v64
            let v68 : bool = 1 >= v67
            v68
    if v69 then
        let v70 : unit = ()
        let v71 : (unit -> unit) = closure9(v20)
        let v72 : unit = (fun () -> v71 (); v70) ()
        let v75 : unit = ()
        let v76 : unit = (fun () -> v6 (); v75) ()
        let struct (v89 : Mut0, v90 : Mut1, v91 : Mut2, v92 : Mut3, v93 : int64 option) = State.trace_state.Value
        let v104 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v105 : US5 option = None
        let _v105 = ref v105 
        let v106 : US5 option ref = _v105 
        let v107 : (US5 option -> US5 option ref) = closure10(v106)
        let v108 : unit = ()
        let v109 : (unit -> unit) = closure11(v93, v107)
        let v110 : unit = (fun () -> v109 (); v108) ()
        let v113 : US5 option = _v105.Value 
        let v124 : US5 = US5_1
        let v125 : US5 = v113 |> Option.defaultValue v124 
        let v165 : System.DateTime =
            match v125 with
            | US5_1 -> (* None *)
                let v161 : System.DateTime = System.DateTime.Now
                v161
            | US5_0(v129) -> (* Some *)
                let v130 : System.DateTime = System.DateTime.Now
                let v133 : (System.DateTime -> int64) = _.Ticks
                let v134 : int64 = v133 v130
                let v137 : int64 = v134 - v129
                let v138 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v139 : System.TimeSpan = v138 v137
                let v142 : (System.TimeSpan -> int32) = _.Hours
                let v143 : int32 = v142 v139
                let v146 : (System.TimeSpan -> int32) = _.Minutes
                let v147 : int32 = v146 v139
                let v150 : (System.TimeSpan -> int32) = _.Seconds
                let v151 : int32 = v150 v139
                let v154 : (System.TimeSpan -> int32) = _.Milliseconds
                let v155 : int32 = v154 v139
                let v158 : System.DateTime = System.DateTime (1, 1, 1, v143, v147, v151, v155)
                v158
        let v166 : string = method7()
        let v169 : (string -> string) = v165.ToString
        let v170 : string = v169 v166
        let _v104 = v170 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v173 : US5 option = None
        let _v173 = ref v173 
        let v174 : US5 option ref = _v173 
        let v175 : (US5 option -> US5 option ref) = closure10(v174)
        let v176 : unit = ()
        let v177 : (unit -> unit) = closure11(v93, v175)
        let v178 : unit = (fun () -> v177 (); v176) ()
        let v181 : US5 option = _v173.Value 
        let v192 : US5 = US5_1
        let v193 : US5 = v181 |> Option.defaultValue v192 
        let v233 : System.DateTime =
            match v193 with
            | US5_1 -> (* None *)
                let v229 : System.DateTime = System.DateTime.Now
                v229
            | US5_0(v197) -> (* Some *)
                let v198 : System.DateTime = System.DateTime.Now
                let v201 : (System.DateTime -> int64) = _.Ticks
                let v202 : int64 = v201 v198
                let v205 : int64 = v202 - v197
                let v206 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v207 : System.TimeSpan = v206 v205
                let v210 : (System.TimeSpan -> int32) = _.Hours
                let v211 : int32 = v210 v207
                let v214 : (System.TimeSpan -> int32) = _.Minutes
                let v215 : int32 = v214 v207
                let v218 : (System.TimeSpan -> int32) = _.Seconds
                let v219 : int32 = v218 v207
                let v222 : (System.TimeSpan -> int32) = _.Milliseconds
                let v223 : int32 = v222 v207
                let v226 : System.DateTime = System.DateTime (1, 1, 1, v211, v215, v219, v223)
                v226
        let v234 : string = method7()
        let v237 : (string -> string) = v233.ToString
        let v238 : string = v237 v234
        let _v104 = v238 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v241 : string = $"near_sdk::env::block_timestamp()"
        let v242 : uint64 = Fable.Core.RustInterop.emitRustExpr () v241 
        let v243 : US5 option = None
        let _v243 = ref v243 
        let v244 : US5 option ref = _v243 
        let v245 : (US5 option -> US5 option ref) = closure10(v244)
        let v246 : unit = ()
        let v247 : (unit -> unit) = closure11(v93, v245)
        let v248 : unit = (fun () -> v247 (); v246) ()
        let v251 : US5 option = _v243.Value 
        let v262 : US5 = US5_1
        let v263 : US5 = v251 |> Option.defaultValue v262 
        let v272 : uint64 =
            match v263 with
            | US5_1 -> (* None *)
                v242
            | US5_0(v267) -> (* Some *)
                let v268 : (int64 -> uint64) = uint64
                let v269 : uint64 = v268 v267
                let v270 : uint64 = v242 - v269
                v270
        let v273 : uint64 = v272 / 1000000000UL
        let v274 : uint64 = v273 % 60UL
        let v275 : uint64 = v273 / 60UL
        let v276 : uint64 = v275 % 60UL
        let v277 : uint64 = v273 / 3600UL
        let v278 : uint64 = v277 % 24UL
        let v279 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v280 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v278, v276, v274) v279 
        let v281 : string = "fable_library_rust::String_::fromString($0)"
        let v282 : string = Fable.Core.RustInterop.emitRustExpr v280 v281 
        let _v104 = v282 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v283 : US5 option = None
        let _v283 = ref v283 
        let v284 : US5 option ref = _v283 
        let v285 : (US5 option -> US5 option ref) = closure10(v284)
        let v286 : unit = ()
        let v287 : (unit -> unit) = closure11(v93, v285)
        let v288 : unit = (fun () -> v287 (); v286) ()
        let v291 : US5 option = _v283.Value 
        let v302 : US5 = US5_1
        let v303 : US5 = v291 |> Option.defaultValue v302 
        let v343 : System.DateTime =
            match v303 with
            | US5_1 -> (* None *)
                let v339 : System.DateTime = System.DateTime.Now
                v339
            | US5_0(v307) -> (* Some *)
                let v308 : System.DateTime = System.DateTime.Now
                let v311 : (System.DateTime -> int64) = _.Ticks
                let v312 : int64 = v311 v308
                let v315 : int64 = v312 - v307
                let v316 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v317 : System.TimeSpan = v316 v315
                let v320 : (System.TimeSpan -> int32) = _.Hours
                let v321 : int32 = v320 v317
                let v324 : (System.TimeSpan -> int32) = _.Minutes
                let v325 : int32 = v324 v317
                let v328 : (System.TimeSpan -> int32) = _.Seconds
                let v329 : int32 = v328 v317
                let v332 : (System.TimeSpan -> int32) = _.Milliseconds
                let v333 : int32 = v332 v317
                let v336 : System.DateTime = System.DateTime (1, 1, 1, v321, v325, v329, v333)
                v336
        let v344 : string = method8()
        let v347 : (string -> string) = v343.ToString
        let v348 : string = v347 v344
        let _v104 = v348 
        #endif
#if FABLE_COMPILER_PYTHON
        let v351 : US5 option = None
        let _v351 = ref v351 
        let v352 : US5 option ref = _v351 
        let v353 : (US5 option -> US5 option ref) = closure10(v352)
        let v354 : unit = ()
        let v355 : (unit -> unit) = closure11(v93, v353)
        let v356 : unit = (fun () -> v355 (); v354) ()
        let v359 : US5 option = _v351.Value 
        let v370 : US5 = US5_1
        let v371 : US5 = v359 |> Option.defaultValue v370 
        let v411 : System.DateTime =
            match v371 with
            | US5_1 -> (* None *)
                let v407 : System.DateTime = System.DateTime.Now
                v407
            | US5_0(v375) -> (* Some *)
                let v376 : System.DateTime = System.DateTime.Now
                let v379 : (System.DateTime -> int64) = _.Ticks
                let v380 : int64 = v379 v376
                let v383 : int64 = v380 - v375
                let v384 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v385 : System.TimeSpan = v384 v383
                let v388 : (System.TimeSpan -> int32) = _.Hours
                let v389 : int32 = v388 v385
                let v392 : (System.TimeSpan -> int32) = _.Minutes
                let v393 : int32 = v392 v385
                let v396 : (System.TimeSpan -> int32) = _.Seconds
                let v397 : int32 = v396 v385
                let v400 : (System.TimeSpan -> int32) = _.Milliseconds
                let v401 : int32 = v400 v385
                let v404 : System.DateTime = System.DateTime (1, 1, 1, v389, v393, v397, v401)
                v404
        let v412 : string = method8()
        let v415 : (string -> string) = v411.ToString
        let v416 : string = v415 v412
        let _v104 = v416 
        #endif
#else
        let v419 : US5 option = None
        let _v419 = ref v419 
        let v420 : US5 option ref = _v419 
        let v421 : (US5 option -> US5 option ref) = closure10(v420)
        let v422 : unit = ()
        let v423 : (unit -> unit) = closure11(v93, v421)
        let v424 : unit = (fun () -> v423 (); v422) ()
        let v427 : US5 option = _v419.Value 
        let v438 : US5 = US5_1
        let v439 : US5 = v427 |> Option.defaultValue v438 
        let v479 : System.DateTime =
            match v439 with
            | US5_1 -> (* None *)
                let v475 : System.DateTime = System.DateTime.Now
                v475
            | US5_0(v443) -> (* Some *)
                let v444 : System.DateTime = System.DateTime.Now
                let v447 : (System.DateTime -> int64) = _.Ticks
                let v448 : int64 = v447 v444
                let v451 : int64 = v448 - v443
                let v452 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v453 : System.TimeSpan = v452 v451
                let v456 : (System.TimeSpan -> int32) = _.Hours
                let v457 : int32 = v456 v453
                let v460 : (System.TimeSpan -> int32) = _.Minutes
                let v461 : int32 = v460 v453
                let v464 : (System.TimeSpan -> int32) = _.Seconds
                let v465 : int32 = v464 v453
                let v468 : (System.TimeSpan -> int32) = _.Milliseconds
                let v469 : int32 = v468 v453
                let v472 : System.DateTime = System.DateTime (1, 1, 1, v457, v461, v465, v469)
                v472
        let v480 : string = method8()
        let v483 : (string -> string) = v479.ToString
        let v484 : string = v483 v480
        let _v104 = v484 
        #endif
        let v487 : string = _v104 
        
        
        
        
        
        let v557 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v558 : string = method14()
        let _v557 = v558 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v559 : string = method14()
        let _v557 = v559 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v560 : string = method14()
        let _v557 = v560 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v561 : string = method15()
        let _v557 = v561 
        #endif
#if FABLE_COMPILER_PYTHON
        let v562 : string = method15()
        let _v557 = v562 
        #endif
#else
        let v563 : string = method15()
        let _v557 = v563 
        #endif
        let v564 : string = _v557 
        let v569 : string = method10()
        let v570 : Mut4 = {l0 = v569} : Mut4
        let v571 : US3 = US3_0
        let v572 : string = $"%A{v571}"
        let v576 : string = $"{v572}"
        let v579 : unit = ()
        let v580 : (unit -> unit) = closure12(v570, v576)
        let v581 : unit = (fun () -> v580 (); v579) ()
        let v584 : string = v570.l0
        let v585 : (string []) = v584.Split v564 
        let v588 : string = v585.[int 0]
        let v591 : string = method10()
        let v592 : Mut4 = {l0 = v591} : Mut4
        let v593 : US3 = US3_1
        let v594 : string = $"%A{v593}"
        let v598 : string = $"{v594}"
        let v601 : unit = ()
        let v602 : (unit -> unit) = closure12(v592, v598)
        let v603 : unit = (fun () -> v602 (); v601) ()
        let v606 : string = v592.l0
        let v607 : bool = v606.StartsWith v588 
        let v613 : US4 =
            if v607 then
                let v610 : string = "Verbose"
                US4_0(v610)
            else
                US4_1
        let v619 : US4 =
            match v613 with
            | US4_1 -> (* None *)
                let v616 : string = "Debug"
                US4_0(v616)
            | US4_0(v614) -> (* Some *)
                US4_0(v614)
        let v623 : string =
            match v619 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v620) -> (* Some *)
                v620
        let v624 : (unit -> string) = v623.ToLower
        let v625 : string = v624 ()
        let v628 : string = v625.PadLeft (7, ' ')
        let v642 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v643 : string = "inline_colorization::color_bright_blue"
        let v644 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v643 
        let v645 : string = "&*$0"
        let v646 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v628 v645 
        let v647 : string = "inline_colorization::color_reset"
        let v648 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v647 
        let v649 : string = "\"{v644}{v646}{v648}\""
        let v650 : string = @$"format!(" + v649 + ")"
        let v651 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v650 
        let v652 : string = "fable_library_rust::String_::fromString($0)"
        let v653 : string = Fable.Core.RustInterop.emitRustExpr v651 v652 
        let _v642 = v653 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v654 : string = "inline_colorization::color_bright_blue"
        let v655 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v654 
        let v656 : string = "&*$0"
        let v657 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v628 v656 
        let v658 : string = "inline_colorization::color_reset"
        let v659 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v658 
        let v660 : string = "\"{v655}{v657}{v659}\""
        let v661 : string = @$"format!(" + v660 + ")"
        let v662 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v661 
        let v663 : string = "fable_library_rust::String_::fromString($0)"
        let v664 : string = Fable.Core.RustInterop.emitRustExpr v662 v663 
        let _v642 = v664 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v665 : string = "inline_colorization::color_bright_blue"
        let v666 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v665 
        let v667 : string = "&*$0"
        let v668 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v628 v667 
        let v669 : string = "inline_colorization::color_reset"
        let v670 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v669 
        let v671 : string = "\"{v666}{v668}{v670}\""
        let v672 : string = @$"format!(" + v671 + ")"
        let v673 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v672 
        let v674 : string = "fable_library_rust::String_::fromString($0)"
        let v675 : string = Fable.Core.RustInterop.emitRustExpr v673 v674 
        let _v642 = v675 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v676 : string = "\u001b[94m"
        let v677 : string = method9()
        let v678 : string = v676 + v628 
        let v679 : string = v678 + v677 
        let _v642 = v679 
        #endif
#if FABLE_COMPILER_PYTHON
        let v680 : string = "\u001b[94m"
        let v681 : string = method9()
        let v682 : string = v680 + v628 
        let v683 : string = v682 + v681 
        let _v642 = v683 
        #endif
#else
        let v684 : string = "\u001b[94m"
        let v685 : string = method9()
        let v686 : string = v684 + v628 
        let v687 : string = v686 + v685 
        let _v642 = v687 
        #endif
        let v688 : string = _v642 
        let v694 : int64 = v89.l0
        let v695 : string = method10()
        let v696 : Mut4 = {l0 = v695} : Mut4
        let v697 : string = "{ "
        let v698 : string = $"{v697}"
        let v701 : unit = ()
        let v702 : (unit -> unit) = closure12(v696, v698)
        let v703 : unit = (fun () -> v702 (); v701) ()
        let v706 : string = "is_success"
        let v707 : string = $"{v706}"
        let v710 : unit = ()
        let v711 : (unit -> unit) = closure12(v696, v707)
        let v712 : unit = (fun () -> v711 (); v710) ()
        let v715 : string = " = "
        let v716 : string = $"{v715}"
        let v719 : unit = ()
        let v720 : (unit -> unit) = closure12(v696, v716)
        let v721 : unit = (fun () -> v720 (); v719) ()
        let v726 : string =
            if v0 then
                let v724 : string = "true"
                v724
            else
                let v725 : string = "false"
                v725
        let v727 : string = $"{v726}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure12(v696, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = "; "
        let v736 : string = $"{v735}"
        let v739 : unit = ()
        let v740 : (unit -> unit) = closure12(v696, v736)
        let v741 : unit = (fun () -> v740 (); v739) ()
        let v744 : string = "gas_burnt_usd"
        let v745 : string = $"{v744}"
        let v748 : unit = ()
        let v749 : (unit -> unit) = closure12(v696, v745)
        let v750 : unit = (fun () -> v749 (); v748) ()
        let v753 : string = $"{v715}"
        let v756 : unit = ()
        let v757 : (unit -> unit) = closure12(v696, v753)
        let v758 : unit = (fun () -> v757 (); v756) ()
        let v761 : string = $"%+.6f{v2}"
        let v764 : unit = ()
        let v765 : (unit -> unit) = closure12(v696, v761)
        let v766 : unit = (fun () -> v765 (); v764) ()
        let v769 : string = $"{v735}"
        let v772 : unit = ()
        let v773 : (unit -> unit) = closure12(v696, v769)
        let v774 : unit = (fun () -> v773 (); v772) ()
        let v777 : string = "tokens_burnt_usd"
        let v778 : string = $"{v777}"
        let v781 : unit = ()
        let v782 : (unit -> unit) = closure12(v696, v778)
        let v783 : unit = (fun () -> v782 (); v781) ()
        let v786 : string = $"{v715}"
        let v789 : unit = ()
        let v790 : (unit -> unit) = closure12(v696, v786)
        let v791 : unit = (fun () -> v790 (); v789) ()
        let v794 : string = $"%+.6f{v4}"
        let v797 : unit = ()
        let v798 : (unit -> unit) = closure12(v696, v794)
        let v799 : unit = (fun () -> v798 (); v797) ()
        let v802 : string = $"{v735}"
        let v805 : unit = ()
        let v806 : (unit -> unit) = closure12(v696, v802)
        let v807 : unit = (fun () -> v806 (); v805) ()
        let v810 : string = "gas_burnt"
        let v811 : string = $"{v810}"
        let v814 : unit = ()
        let v815 : (unit -> unit) = closure12(v696, v811)
        let v816 : unit = (fun () -> v815 (); v814) ()
        let v819 : string = $"{v715}"
        let v822 : unit = ()
        let v823 : (unit -> unit) = closure12(v696, v819)
        let v824 : unit = (fun () -> v823 (); v822) ()
        let v827 : string = $"{v1}"
        let v830 : unit = ()
        let v831 : (unit -> unit) = closure12(v696, v827)
        let v832 : unit = (fun () -> v831 (); v830) ()
        let v835 : string = $"{v735}"
        let v838 : unit = ()
        let v839 : (unit -> unit) = closure12(v696, v835)
        let v840 : unit = (fun () -> v839 (); v838) ()
        let v843 : string = "tokens_burnt"
        let v844 : string = $"{v843}"
        let v847 : unit = ()
        let v848 : (unit -> unit) = closure12(v696, v844)
        let v849 : unit = (fun () -> v848 (); v847) ()
        let v852 : string = $"{v715}"
        let v855 : unit = ()
        let v856 : (unit -> unit) = closure12(v696, v852)
        let v857 : unit = (fun () -> v856 (); v855) ()
        let v860 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v861 : string = "format!(\"{:#?}\", $0)"
        let v862 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v861 
        let v863 : string = "fable_library_rust::String_::fromString($0)"
        let v864 : string = Fable.Core.RustInterop.emitRustExpr v862 v863 
        let _v860 = v864 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v865 : string = "format!(\"{:#?}\", $0)"
        let v866 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v865 
        let v867 : string = "fable_library_rust::String_::fromString($0)"
        let v868 : string = Fable.Core.RustInterop.emitRustExpr v866 v867 
        let _v860 = v868 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v869 : string = "format!(\"{:#?}\", $0)"
        let v870 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v869 
        let v871 : string = "fable_library_rust::String_::fromString($0)"
        let v872 : string = Fable.Core.RustInterop.emitRustExpr v870 v871 
        let _v860 = v872 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v873 : string = $"%A{v3}"
        let _v860 = v873 
        #endif
#if FABLE_COMPILER_PYTHON
        let v876 : string = $"%A{v3}"
        let _v860 = v876 
        #endif
#else
        let v879 : string = $"%A{v3}"
        let _v860 = v879 
        #endif
        let v882 : string = _v860 
        let v887 : string = $"{v882}"
        let v890 : unit = ()
        let v891 : (unit -> unit) = closure12(v696, v887)
        let v892 : unit = (fun () -> v891 (); v890) ()
        let v895 : string = " }"
        let v896 : string = $"{v895}"
        let v899 : unit = ()
        let v900 : (unit -> unit) = closure12(v696, v896)
        let v901 : unit = (fun () -> v900 (); v899) ()
        let v904 : string = v696.l0
        let v905 : (unit -> string) = closure30()
        let v906 : string = $"{v487} {v688} #{v694} %s{v905 ()} / {v904}"
        let v909 : char list = []
        let v910 : (char list -> (char [])) = List.toArray
        let v911 : (char []) = v910 v909
        let v914 : string = v906.TrimStart v911 
        let v932 : char list = []
        let v933 : char list = '/' :: v932 
        let v936 : char list = ' ' :: v933 
        let v939 : (char list -> (char [])) = List.toArray
        let v940 : (char []) = v939 v936
        let v943 : string = v914.TrimEnd v940 
        let v961 : (string -> unit) = closure14()
        let v962 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v963 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v943 v963 
        let _v962 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v964 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v943 v964 
        let _v962 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v965 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v943 v965 
        let _v962 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v961 v943
        let _v962 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v961 v943
        let _v962 = () 
        #endif
#else
        v961 v943
        let _v962 = () 
        #endif
        _v962 
        let v966 : (string -> unit) = v21.l0
        v966 v943
and closure28 () (v0 : near_workspaces_result_ExecutionOutcome) : unit =
    let v1 : string = "$0.is_success()"
    let v2 : bool = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "$0.gas_burnt"
    let v4 : near_workspaces_types_Gas = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let v5 : string = "$0.as_gas()"
    let v6 : uint64 = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : (uint64 -> float) = float
    let v8 : float = v7 v6
    let v9 : float = v8 / 10000000000000000.0
    let v10 : float = v9 * 6.68
    let v11 : string = "$0.tokens_burnt"
    let v12 : near_token_NearToken = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let v13 : string = "$0.as_yoctonear()"
    let v14 : u128 = Fable.Core.RustInterop.emitRustExpr v12 v13 
    let v15 : string = "$0 as f64"
    let v16 : float = Fable.Core.RustInterop.emitRustExpr v14 v15 
    let v17 : float = v16 / 1E+24
    let v18 : float = v17 * 6.68
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure29(v2, v6, v10, v14, v18)
    let v21 : unit = (fun () -> v20 (); v19) ()
    ()
and closure32 () () : string =
    let v0 : string = "spiral_wasm.run"
    v0
and closure31 (v0 : Result<near_workspaces_result_ExecutionSuccess, near_workspaces_result_ExecutionFailure>) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 0 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : string = "Verbose"
        let v554 : (unit -> string) = v553.ToLower
        let v555 : string = v554 ()
        let v558 : string = v555.PadLeft (7, ' ')
        let v572 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v573 : string = "inline_colorization::color_bright_black"
        let v574 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v573 
        let v575 : string = "&*$0"
        let v576 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v575 
        let v577 : string = "inline_colorization::color_reset"
        let v578 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v577 
        let v579 : string = "\"{v574}{v576}{v578}\""
        let v580 : string = @$"format!(" + v579 + ")"
        let v581 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v580 
        let v582 : string = "fable_library_rust::String_::fromString($0)"
        let v583 : string = Fable.Core.RustInterop.emitRustExpr v581 v582 
        let _v572 = v583 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v584 : string = "inline_colorization::color_bright_black"
        let v585 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v584 
        let v586 : string = "&*$0"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v586 
        let v588 : string = "inline_colorization::color_reset"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "\"{v585}{v587}{v589}\""
        let v591 : string = @$"format!(" + v590 + ")"
        let v592 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "fable_library_rust::String_::fromString($0)"
        let v594 : string = Fable.Core.RustInterop.emitRustExpr v592 v593 
        let _v572 = v594 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v595 : string = "inline_colorization::color_bright_black"
        let v596 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "&*$0"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v597 
        let v599 : string = "inline_colorization::color_reset"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "\"{v596}{v598}{v600}\""
        let v602 : string = @$"format!(" + v601 + ")"
        let v603 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "fable_library_rust::String_::fromString($0)"
        let v605 : string = Fable.Core.RustInterop.emitRustExpr v603 v604 
        let _v572 = v605 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v606 : string = "\u001b[90m"
        let v607 : string = method9()
        let v608 : string = v606 + v558 
        let v609 : string = v608 + v607 
        let _v572 = v609 
        #endif
#if FABLE_COMPILER_PYTHON
        let v610 : string = "\u001b[90m"
        let v611 : string = method9()
        let v612 : string = v610 + v558 
        let v613 : string = v612 + v611 
        let _v572 = v613 
        #endif
#else
        let v614 : string = "\u001b[90m"
        let v615 : string = method9()
        let v616 : string = v614 + v558 
        let v617 : string = v616 + v615 
        let _v572 = v617 
        #endif
        let v618 : string = _v572 
        let v624 : int64 = v85.l0
        let v625 : string = method10()
        let v626 : Mut4 = {l0 = v625} : Mut4
        let v627 : string = "{ "
        let v628 : string = $"{v627}"
        let v631 : unit = ()
        let v632 : (unit -> unit) = closure12(v626, v628)
        let v633 : unit = (fun () -> v632 (); v631) ()
        let v636 : string = "result2"
        let v637 : string = $"{v636}"
        let v640 : unit = ()
        let v641 : (unit -> unit) = closure12(v626, v637)
        let v642 : unit = (fun () -> v641 (); v640) ()
        let v645 : string = " = "
        let v646 : string = $"{v645}"
        let v649 : unit = ()
        let v650 : (unit -> unit) = closure12(v626, v646)
        let v651 : unit = (fun () -> v650 (); v649) ()
        let v654 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v655 : string = "format!(\"{:#?}\", $0)"
        let v656 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v655 
        let v657 : string = "fable_library_rust::String_::fromString($0)"
        let v658 : string = Fable.Core.RustInterop.emitRustExpr v656 v657 
        let _v654 = v658 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v659 : string = "format!(\"{:#?}\", $0)"
        let v660 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v659 
        let v661 : string = "fable_library_rust::String_::fromString($0)"
        let v662 : string = Fable.Core.RustInterop.emitRustExpr v660 v661 
        let _v654 = v662 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v663 : string = "format!(\"{:#?}\", $0)"
        let v664 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v663 
        let v665 : string = "fable_library_rust::String_::fromString($0)"
        let v666 : string = Fable.Core.RustInterop.emitRustExpr v664 v665 
        let _v654 = v666 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v667 : string = $"%A{v0}"
        let _v654 = v667 
        #endif
#if FABLE_COMPILER_PYTHON
        let v670 : string = $"%A{v0}"
        let _v654 = v670 
        #endif
#else
        let v673 : string = $"%A{v0}"
        let _v654 = v673 
        #endif
        let v676 : string = _v654 
        let v681 : string = $"{v676}"
        let v684 : unit = ()
        let v685 : (unit -> unit) = closure12(v626, v681)
        let v686 : unit = (fun () -> v685 (); v684) ()
        let v689 : string = " }"
        let v690 : string = $"{v689}"
        let v693 : unit = ()
        let v694 : (unit -> unit) = closure12(v626, v690)
        let v695 : unit = (fun () -> v694 (); v693) ()
        let v698 : string = v626.l0
        let v699 : (unit -> string) = closure32()
        let v700 : string = $"{v483} {v618} #{v624} %s{v699 ()} / {v698}"
        let v703 : char list = []
        let v704 : (char list -> (char [])) = List.toArray
        let v705 : (char []) = v704 v703
        let v708 : string = v700.TrimStart v705 
        let v726 : char list = []
        let v727 : char list = '/' :: v726 
        let v730 : char list = ' ' :: v727 
        let v733 : (char list -> (char [])) = List.toArray
        let v734 : (char []) = v733 v730
        let v737 : string = v708.TrimEnd v734 
        let v755 : (string -> unit) = closure14()
        let v756 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v757 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v737 v757 
        let _v756 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v758 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v737 v758 
        let _v756 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v759 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v737 v759 
        let _v756 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v755 v737
        let _v756 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v755 v737
        let _v756 = () 
        #endif
#else
        v755 v737
        let _v756 = () 
        #endif
        _v756 
        let v760 : (string -> unit) = v17.l0
        v760 v737
and method16 (v0 : near_workspaces_result_ExecutionFinalResult) : near_workspaces_result_ExecutionFinalResult =
    v0
and closure34 () () : string =
    let v0 : string = "spiral_wasm.run"
    v0
and closure33 (v0 : Vec<Ref<near_workspaces_result_ExecutionOutcome>>, v1 : int32) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure8()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : int64 option) = State.trace_state.Value
    let v32 : unit = ()
    let v33 : unit = (fun () -> v3 (); v32) ()
    let struct (v46 : Mut0, v47 : Mut1, v48 : Mut2, v49 : Mut3, v50 : int64 option) = State.trace_state.Value
    let v61 : US3 = v49.l0
    let v62 : bool = v48.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 0 >= v64
            v65
    if v66 then
        let v67 : unit = ()
        let v68 : (unit -> unit) = closure9(v17)
        let v69 : unit = (fun () -> v68 (); v67) ()
        let v72 : unit = ()
        let v73 : unit = (fun () -> v3 (); v72) ()
        let struct (v86 : Mut0, v87 : Mut1, v88 : Mut2, v89 : Mut3, v90 : int64 option) = State.trace_state.Value
        let v101 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v102 : US5 option = None
        let _v102 = ref v102 
        let v103 : US5 option ref = _v102 
        let v104 : (US5 option -> US5 option ref) = closure10(v103)
        let v105 : unit = ()
        let v106 : (unit -> unit) = closure11(v90, v104)
        let v107 : unit = (fun () -> v106 (); v105) ()
        let v110 : US5 option = _v102.Value 
        let v121 : US5 = US5_1
        let v122 : US5 = v110 |> Option.defaultValue v121 
        let v162 : System.DateTime =
            match v122 with
            | US5_1 -> (* None *)
                let v158 : System.DateTime = System.DateTime.Now
                v158
            | US5_0(v126) -> (* Some *)
                let v127 : System.DateTime = System.DateTime.Now
                let v130 : (System.DateTime -> int64) = _.Ticks
                let v131 : int64 = v130 v127
                let v134 : int64 = v131 - v126
                let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v136 : System.TimeSpan = v135 v134
                let v139 : (System.TimeSpan -> int32) = _.Hours
                let v140 : int32 = v139 v136
                let v143 : (System.TimeSpan -> int32) = _.Minutes
                let v144 : int32 = v143 v136
                let v147 : (System.TimeSpan -> int32) = _.Seconds
                let v148 : int32 = v147 v136
                let v151 : (System.TimeSpan -> int32) = _.Milliseconds
                let v152 : int32 = v151 v136
                let v155 : System.DateTime = System.DateTime (1, 1, 1, v140, v144, v148, v152)
                v155
        let v163 : string = method7()
        let v166 : (string -> string) = v162.ToString
        let v167 : string = v166 v163
        let _v101 = v167 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v170 : US5 option = None
        let _v170 = ref v170 
        let v171 : US5 option ref = _v170 
        let v172 : (US5 option -> US5 option ref) = closure10(v171)
        let v173 : unit = ()
        let v174 : (unit -> unit) = closure11(v90, v172)
        let v175 : unit = (fun () -> v174 (); v173) ()
        let v178 : US5 option = _v170.Value 
        let v189 : US5 = US5_1
        let v190 : US5 = v178 |> Option.defaultValue v189 
        let v230 : System.DateTime =
            match v190 with
            | US5_1 -> (* None *)
                let v226 : System.DateTime = System.DateTime.Now
                v226
            | US5_0(v194) -> (* Some *)
                let v195 : System.DateTime = System.DateTime.Now
                let v198 : (System.DateTime -> int64) = _.Ticks
                let v199 : int64 = v198 v195
                let v202 : int64 = v199 - v194
                let v203 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v204 : System.TimeSpan = v203 v202
                let v207 : (System.TimeSpan -> int32) = _.Hours
                let v208 : int32 = v207 v204
                let v211 : (System.TimeSpan -> int32) = _.Minutes
                let v212 : int32 = v211 v204
                let v215 : (System.TimeSpan -> int32) = _.Seconds
                let v216 : int32 = v215 v204
                let v219 : (System.TimeSpan -> int32) = _.Milliseconds
                let v220 : int32 = v219 v204
                let v223 : System.DateTime = System.DateTime (1, 1, 1, v208, v212, v216, v220)
                v223
        let v231 : string = method7()
        let v234 : (string -> string) = v230.ToString
        let v235 : string = v234 v231
        let _v101 = v235 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v238 : string = $"near_sdk::env::block_timestamp()"
        let v239 : uint64 = Fable.Core.RustInterop.emitRustExpr () v238 
        let v240 : US5 option = None
        let _v240 = ref v240 
        let v241 : US5 option ref = _v240 
        let v242 : (US5 option -> US5 option ref) = closure10(v241)
        let v243 : unit = ()
        let v244 : (unit -> unit) = closure11(v90, v242)
        let v245 : unit = (fun () -> v244 (); v243) ()
        let v248 : US5 option = _v240.Value 
        let v259 : US5 = US5_1
        let v260 : US5 = v248 |> Option.defaultValue v259 
        let v269 : uint64 =
            match v260 with
            | US5_1 -> (* None *)
                v239
            | US5_0(v264) -> (* Some *)
                let v265 : (int64 -> uint64) = uint64
                let v266 : uint64 = v265 v264
                let v267 : uint64 = v239 - v266
                v267
        let v270 : uint64 = v269 / 1000000000UL
        let v271 : uint64 = v270 % 60UL
        let v272 : uint64 = v270 / 60UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v270 / 3600UL
        let v275 : uint64 = v274 % 24UL
        let v276 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v277 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v275, v273, v271) v276 
        let v278 : string = "fable_library_rust::String_::fromString($0)"
        let v279 : string = Fable.Core.RustInterop.emitRustExpr v277 v278 
        let _v101 = v279 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v280 : US5 option = None
        let _v280 = ref v280 
        let v281 : US5 option ref = _v280 
        let v282 : (US5 option -> US5 option ref) = closure10(v281)
        let v283 : unit = ()
        let v284 : (unit -> unit) = closure11(v90, v282)
        let v285 : unit = (fun () -> v284 (); v283) ()
        let v288 : US5 option = _v280.Value 
        let v299 : US5 = US5_1
        let v300 : US5 = v288 |> Option.defaultValue v299 
        let v340 : System.DateTime =
            match v300 with
            | US5_1 -> (* None *)
                let v336 : System.DateTime = System.DateTime.Now
                v336
            | US5_0(v304) -> (* Some *)
                let v305 : System.DateTime = System.DateTime.Now
                let v308 : (System.DateTime -> int64) = _.Ticks
                let v309 : int64 = v308 v305
                let v312 : int64 = v309 - v304
                let v313 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v314 : System.TimeSpan = v313 v312
                let v317 : (System.TimeSpan -> int32) = _.Hours
                let v318 : int32 = v317 v314
                let v321 : (System.TimeSpan -> int32) = _.Minutes
                let v322 : int32 = v321 v314
                let v325 : (System.TimeSpan -> int32) = _.Seconds
                let v326 : int32 = v325 v314
                let v329 : (System.TimeSpan -> int32) = _.Milliseconds
                let v330 : int32 = v329 v314
                let v333 : System.DateTime = System.DateTime (1, 1, 1, v318, v322, v326, v330)
                v333
        let v341 : string = method8()
        let v344 : (string -> string) = v340.ToString
        let v345 : string = v344 v341
        let _v101 = v345 
        #endif
#if FABLE_COMPILER_PYTHON
        let v348 : US5 option = None
        let _v348 = ref v348 
        let v349 : US5 option ref = _v348 
        let v350 : (US5 option -> US5 option ref) = closure10(v349)
        let v351 : unit = ()
        let v352 : (unit -> unit) = closure11(v90, v350)
        let v353 : unit = (fun () -> v352 (); v351) ()
        let v356 : US5 option = _v348.Value 
        let v367 : US5 = US5_1
        let v368 : US5 = v356 |> Option.defaultValue v367 
        let v408 : System.DateTime =
            match v368 with
            | US5_1 -> (* None *)
                let v404 : System.DateTime = System.DateTime.Now
                v404
            | US5_0(v372) -> (* Some *)
                let v373 : System.DateTime = System.DateTime.Now
                let v376 : (System.DateTime -> int64) = _.Ticks
                let v377 : int64 = v376 v373
                let v380 : int64 = v377 - v372
                let v381 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v382 : System.TimeSpan = v381 v380
                let v385 : (System.TimeSpan -> int32) = _.Hours
                let v386 : int32 = v385 v382
                let v389 : (System.TimeSpan -> int32) = _.Minutes
                let v390 : int32 = v389 v382
                let v393 : (System.TimeSpan -> int32) = _.Seconds
                let v394 : int32 = v393 v382
                let v397 : (System.TimeSpan -> int32) = _.Milliseconds
                let v398 : int32 = v397 v382
                let v401 : System.DateTime = System.DateTime (1, 1, 1, v386, v390, v394, v398)
                v401
        let v409 : string = method8()
        let v412 : (string -> string) = v408.ToString
        let v413 : string = v412 v409
        let _v101 = v413 
        #endif
#else
        let v416 : US5 option = None
        let _v416 = ref v416 
        let v417 : US5 option ref = _v416 
        let v418 : (US5 option -> US5 option ref) = closure10(v417)
        let v419 : unit = ()
        let v420 : (unit -> unit) = closure11(v90, v418)
        let v421 : unit = (fun () -> v420 (); v419) ()
        let v424 : US5 option = _v416.Value 
        let v435 : US5 = US5_1
        let v436 : US5 = v424 |> Option.defaultValue v435 
        let v476 : System.DateTime =
            match v436 with
            | US5_1 -> (* None *)
                let v472 : System.DateTime = System.DateTime.Now
                v472
            | US5_0(v440) -> (* Some *)
                let v441 : System.DateTime = System.DateTime.Now
                let v444 : (System.DateTime -> int64) = _.Ticks
                let v445 : int64 = v444 v441
                let v448 : int64 = v445 - v440
                let v449 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v450 : System.TimeSpan = v449 v448
                let v453 : (System.TimeSpan -> int32) = _.Hours
                let v454 : int32 = v453 v450
                let v457 : (System.TimeSpan -> int32) = _.Minutes
                let v458 : int32 = v457 v450
                let v461 : (System.TimeSpan -> int32) = _.Seconds
                let v462 : int32 = v461 v450
                let v465 : (System.TimeSpan -> int32) = _.Milliseconds
                let v466 : int32 = v465 v450
                let v469 : System.DateTime = System.DateTime (1, 1, 1, v454, v458, v462, v466)
                v469
        let v477 : string = method8()
        let v480 : (string -> string) = v476.ToString
        let v481 : string = v480 v477
        let _v101 = v481 
        #endif
        let v484 : string = _v101 
        
        
        
        
        
        let v554 : string = "Verbose"
        let v555 : (unit -> string) = v554.ToLower
        let v556 : string = v555 ()
        let v559 : string = v556.PadLeft (7, ' ')
        let v573 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v574 : string = "inline_colorization::color_bright_black"
        let v575 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v574 
        let v576 : string = "&*$0"
        let v577 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v576 
        let v578 : string = "inline_colorization::color_reset"
        let v579 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v578 
        let v580 : string = "\"{v575}{v577}{v579}\""
        let v581 : string = @$"format!(" + v580 + ")"
        let v582 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v581 
        let v583 : string = "fable_library_rust::String_::fromString($0)"
        let v584 : string = Fable.Core.RustInterop.emitRustExpr v582 v583 
        let _v573 = v584 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v585 : string = "inline_colorization::color_bright_black"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v573 = v595 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v596 : string = "inline_colorization::color_bright_black"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v573 = v606 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v607 : string = "\u001b[90m"
        let v608 : string = method9()
        let v609 : string = v607 + v559 
        let v610 : string = v609 + v608 
        let _v573 = v610 
        #endif
#if FABLE_COMPILER_PYTHON
        let v611 : string = "\u001b[90m"
        let v612 : string = method9()
        let v613 : string = v611 + v559 
        let v614 : string = v613 + v612 
        let _v573 = v614 
        #endif
#else
        let v615 : string = "\u001b[90m"
        let v616 : string = method9()
        let v617 : string = v615 + v559 
        let v618 : string = v617 + v616 
        let _v573 = v618 
        #endif
        let v619 : string = _v573 
        let v625 : int64 = v86.l0
        let v626 : string = method10()
        let v627 : Mut4 = {l0 = v626} : Mut4
        let v628 : string = "{ "
        let v629 : string = $"{v628}"
        let v632 : unit = ()
        let v633 : (unit -> unit) = closure12(v627, v629)
        let v634 : unit = (fun () -> v633 (); v632) ()
        let v637 : string = "receipt_failures_len"
        let v638 : string = $"{v637}"
        let v641 : unit = ()
        let v642 : (unit -> unit) = closure12(v627, v638)
        let v643 : unit = (fun () -> v642 (); v641) ()
        let v646 : string = " = "
        let v647 : string = $"{v646}"
        let v650 : unit = ()
        let v651 : (unit -> unit) = closure12(v627, v647)
        let v652 : unit = (fun () -> v651 (); v650) ()
        let v655 : string = $"{v1}"
        let v658 : unit = ()
        let v659 : (unit -> unit) = closure12(v627, v655)
        let v660 : unit = (fun () -> v659 (); v658) ()
        let v663 : string = "; "
        let v664 : string = $"{v663}"
        let v667 : unit = ()
        let v668 : (unit -> unit) = closure12(v627, v664)
        let v669 : unit = (fun () -> v668 (); v667) ()
        let v672 : string = "receipt_failures"
        let v673 : string = $"{v672}"
        let v676 : unit = ()
        let v677 : (unit -> unit) = closure12(v627, v673)
        let v678 : unit = (fun () -> v677 (); v676) ()
        let v681 : string = $"{v646}"
        let v684 : unit = ()
        let v685 : (unit -> unit) = closure12(v627, v681)
        let v686 : unit = (fun () -> v685 (); v684) ()
        let v689 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v690 : string = "format!(\"{:#?}\", $0)"
        let v691 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v690 
        let v692 : string = "fable_library_rust::String_::fromString($0)"
        let v693 : string = Fable.Core.RustInterop.emitRustExpr v691 v692 
        let _v689 = v693 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v694 : string = "format!(\"{:#?}\", $0)"
        let v695 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v694 
        let v696 : string = "fable_library_rust::String_::fromString($0)"
        let v697 : string = Fable.Core.RustInterop.emitRustExpr v695 v696 
        let _v689 = v697 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v698 : string = "format!(\"{:#?}\", $0)"
        let v699 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v698 
        let v700 : string = "fable_library_rust::String_::fromString($0)"
        let v701 : string = Fable.Core.RustInterop.emitRustExpr v699 v700 
        let _v689 = v701 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v702 : string = $"%A{v0}"
        let _v689 = v702 
        #endif
#if FABLE_COMPILER_PYTHON
        let v705 : string = $"%A{v0}"
        let _v689 = v705 
        #endif
#else
        let v708 : string = $"%A{v0}"
        let _v689 = v708 
        #endif
        let v711 : string = _v689 
        let v716 : string = $"{v711}"
        let v719 : unit = ()
        let v720 : (unit -> unit) = closure12(v627, v716)
        let v721 : unit = (fun () -> v720 (); v719) ()
        let v724 : string = " }"
        let v725 : string = $"{v724}"
        let v728 : unit = ()
        let v729 : (unit -> unit) = closure12(v627, v725)
        let v730 : unit = (fun () -> v729 (); v728) ()
        let v733 : string = v627.l0
        let v734 : (unit -> string) = closure34()
        let v735 : string = $"{v484} {v619} #{v625} %s{v734 ()} / {v733}"
        let v738 : char list = []
        let v739 : (char list -> (char [])) = List.toArray
        let v740 : (char []) = v739 v738
        let v743 : string = v735.TrimStart v740 
        let v761 : char list = []
        let v762 : char list = '/' :: v761 
        let v765 : char list = ' ' :: v762 
        let v768 : (char list -> (char [])) = List.toArray
        let v769 : (char []) = v768 v765
        let v772 : string = v743.TrimEnd v769 
        let v790 : (string -> unit) = closure14()
        let v791 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v792 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v772 v792 
        let _v791 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v793 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v772 v793 
        let _v791 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v794 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v772 v794 
        let _v791 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v790 v772
        let _v791 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v790 v772
        let _v791 = () 
        #endif
#else
        v790 v772
        let _v791 = () 
        #endif
        _v791 
        let v795 : (string -> unit) = v18.l0
        v795 v772
and method17 (v0 : near_workspaces_result_ExecutionFinalResult) : near_workspaces_result_ExecutionFinalResult =
    v0
and closure36 () () : string =
    let v0 : string = "spiral_wasm.run"
    v0
and closure35 (v0 : Vec<near_workspaces_result_ExecutionOutcome>, v1 : int32) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure8()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : int64 option) = State.trace_state.Value
    let v32 : unit = ()
    let v33 : unit = (fun () -> v3 (); v32) ()
    let struct (v46 : Mut0, v47 : Mut1, v48 : Mut2, v49 : Mut3, v50 : int64 option) = State.trace_state.Value
    let v61 : US3 = v49.l0
    let v62 : bool = v48.l0
    let v63 : bool = v62 = false
    let v66 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v61
            let v65 : bool = 0 >= v64
            v65
    if v66 then
        let v67 : unit = ()
        let v68 : (unit -> unit) = closure9(v17)
        let v69 : unit = (fun () -> v68 (); v67) ()
        let v72 : unit = ()
        let v73 : unit = (fun () -> v3 (); v72) ()
        let struct (v86 : Mut0, v87 : Mut1, v88 : Mut2, v89 : Mut3, v90 : int64 option) = State.trace_state.Value
        let v101 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v102 : US5 option = None
        let _v102 = ref v102 
        let v103 : US5 option ref = _v102 
        let v104 : (US5 option -> US5 option ref) = closure10(v103)
        let v105 : unit = ()
        let v106 : (unit -> unit) = closure11(v90, v104)
        let v107 : unit = (fun () -> v106 (); v105) ()
        let v110 : US5 option = _v102.Value 
        let v121 : US5 = US5_1
        let v122 : US5 = v110 |> Option.defaultValue v121 
        let v162 : System.DateTime =
            match v122 with
            | US5_1 -> (* None *)
                let v158 : System.DateTime = System.DateTime.Now
                v158
            | US5_0(v126) -> (* Some *)
                let v127 : System.DateTime = System.DateTime.Now
                let v130 : (System.DateTime -> int64) = _.Ticks
                let v131 : int64 = v130 v127
                let v134 : int64 = v131 - v126
                let v135 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v136 : System.TimeSpan = v135 v134
                let v139 : (System.TimeSpan -> int32) = _.Hours
                let v140 : int32 = v139 v136
                let v143 : (System.TimeSpan -> int32) = _.Minutes
                let v144 : int32 = v143 v136
                let v147 : (System.TimeSpan -> int32) = _.Seconds
                let v148 : int32 = v147 v136
                let v151 : (System.TimeSpan -> int32) = _.Milliseconds
                let v152 : int32 = v151 v136
                let v155 : System.DateTime = System.DateTime (1, 1, 1, v140, v144, v148, v152)
                v155
        let v163 : string = method7()
        let v166 : (string -> string) = v162.ToString
        let v167 : string = v166 v163
        let _v101 = v167 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v170 : US5 option = None
        let _v170 = ref v170 
        let v171 : US5 option ref = _v170 
        let v172 : (US5 option -> US5 option ref) = closure10(v171)
        let v173 : unit = ()
        let v174 : (unit -> unit) = closure11(v90, v172)
        let v175 : unit = (fun () -> v174 (); v173) ()
        let v178 : US5 option = _v170.Value 
        let v189 : US5 = US5_1
        let v190 : US5 = v178 |> Option.defaultValue v189 
        let v230 : System.DateTime =
            match v190 with
            | US5_1 -> (* None *)
                let v226 : System.DateTime = System.DateTime.Now
                v226
            | US5_0(v194) -> (* Some *)
                let v195 : System.DateTime = System.DateTime.Now
                let v198 : (System.DateTime -> int64) = _.Ticks
                let v199 : int64 = v198 v195
                let v202 : int64 = v199 - v194
                let v203 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v204 : System.TimeSpan = v203 v202
                let v207 : (System.TimeSpan -> int32) = _.Hours
                let v208 : int32 = v207 v204
                let v211 : (System.TimeSpan -> int32) = _.Minutes
                let v212 : int32 = v211 v204
                let v215 : (System.TimeSpan -> int32) = _.Seconds
                let v216 : int32 = v215 v204
                let v219 : (System.TimeSpan -> int32) = _.Milliseconds
                let v220 : int32 = v219 v204
                let v223 : System.DateTime = System.DateTime (1, 1, 1, v208, v212, v216, v220)
                v223
        let v231 : string = method7()
        let v234 : (string -> string) = v230.ToString
        let v235 : string = v234 v231
        let _v101 = v235 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v238 : string = $"near_sdk::env::block_timestamp()"
        let v239 : uint64 = Fable.Core.RustInterop.emitRustExpr () v238 
        let v240 : US5 option = None
        let _v240 = ref v240 
        let v241 : US5 option ref = _v240 
        let v242 : (US5 option -> US5 option ref) = closure10(v241)
        let v243 : unit = ()
        let v244 : (unit -> unit) = closure11(v90, v242)
        let v245 : unit = (fun () -> v244 (); v243) ()
        let v248 : US5 option = _v240.Value 
        let v259 : US5 = US5_1
        let v260 : US5 = v248 |> Option.defaultValue v259 
        let v269 : uint64 =
            match v260 with
            | US5_1 -> (* None *)
                v239
            | US5_0(v264) -> (* Some *)
                let v265 : (int64 -> uint64) = uint64
                let v266 : uint64 = v265 v264
                let v267 : uint64 = v239 - v266
                v267
        let v270 : uint64 = v269 / 1000000000UL
        let v271 : uint64 = v270 % 60UL
        let v272 : uint64 = v270 / 60UL
        let v273 : uint64 = v272 % 60UL
        let v274 : uint64 = v270 / 3600UL
        let v275 : uint64 = v274 % 24UL
        let v276 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v277 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v275, v273, v271) v276 
        let v278 : string = "fable_library_rust::String_::fromString($0)"
        let v279 : string = Fable.Core.RustInterop.emitRustExpr v277 v278 
        let _v101 = v279 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v280 : US5 option = None
        let _v280 = ref v280 
        let v281 : US5 option ref = _v280 
        let v282 : (US5 option -> US5 option ref) = closure10(v281)
        let v283 : unit = ()
        let v284 : (unit -> unit) = closure11(v90, v282)
        let v285 : unit = (fun () -> v284 (); v283) ()
        let v288 : US5 option = _v280.Value 
        let v299 : US5 = US5_1
        let v300 : US5 = v288 |> Option.defaultValue v299 
        let v340 : System.DateTime =
            match v300 with
            | US5_1 -> (* None *)
                let v336 : System.DateTime = System.DateTime.Now
                v336
            | US5_0(v304) -> (* Some *)
                let v305 : System.DateTime = System.DateTime.Now
                let v308 : (System.DateTime -> int64) = _.Ticks
                let v309 : int64 = v308 v305
                let v312 : int64 = v309 - v304
                let v313 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v314 : System.TimeSpan = v313 v312
                let v317 : (System.TimeSpan -> int32) = _.Hours
                let v318 : int32 = v317 v314
                let v321 : (System.TimeSpan -> int32) = _.Minutes
                let v322 : int32 = v321 v314
                let v325 : (System.TimeSpan -> int32) = _.Seconds
                let v326 : int32 = v325 v314
                let v329 : (System.TimeSpan -> int32) = _.Milliseconds
                let v330 : int32 = v329 v314
                let v333 : System.DateTime = System.DateTime (1, 1, 1, v318, v322, v326, v330)
                v333
        let v341 : string = method8()
        let v344 : (string -> string) = v340.ToString
        let v345 : string = v344 v341
        let _v101 = v345 
        #endif
#if FABLE_COMPILER_PYTHON
        let v348 : US5 option = None
        let _v348 = ref v348 
        let v349 : US5 option ref = _v348 
        let v350 : (US5 option -> US5 option ref) = closure10(v349)
        let v351 : unit = ()
        let v352 : (unit -> unit) = closure11(v90, v350)
        let v353 : unit = (fun () -> v352 (); v351) ()
        let v356 : US5 option = _v348.Value 
        let v367 : US5 = US5_1
        let v368 : US5 = v356 |> Option.defaultValue v367 
        let v408 : System.DateTime =
            match v368 with
            | US5_1 -> (* None *)
                let v404 : System.DateTime = System.DateTime.Now
                v404
            | US5_0(v372) -> (* Some *)
                let v373 : System.DateTime = System.DateTime.Now
                let v376 : (System.DateTime -> int64) = _.Ticks
                let v377 : int64 = v376 v373
                let v380 : int64 = v377 - v372
                let v381 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v382 : System.TimeSpan = v381 v380
                let v385 : (System.TimeSpan -> int32) = _.Hours
                let v386 : int32 = v385 v382
                let v389 : (System.TimeSpan -> int32) = _.Minutes
                let v390 : int32 = v389 v382
                let v393 : (System.TimeSpan -> int32) = _.Seconds
                let v394 : int32 = v393 v382
                let v397 : (System.TimeSpan -> int32) = _.Milliseconds
                let v398 : int32 = v397 v382
                let v401 : System.DateTime = System.DateTime (1, 1, 1, v386, v390, v394, v398)
                v401
        let v409 : string = method8()
        let v412 : (string -> string) = v408.ToString
        let v413 : string = v412 v409
        let _v101 = v413 
        #endif
#else
        let v416 : US5 option = None
        let _v416 = ref v416 
        let v417 : US5 option ref = _v416 
        let v418 : (US5 option -> US5 option ref) = closure10(v417)
        let v419 : unit = ()
        let v420 : (unit -> unit) = closure11(v90, v418)
        let v421 : unit = (fun () -> v420 (); v419) ()
        let v424 : US5 option = _v416.Value 
        let v435 : US5 = US5_1
        let v436 : US5 = v424 |> Option.defaultValue v435 
        let v476 : System.DateTime =
            match v436 with
            | US5_1 -> (* None *)
                let v472 : System.DateTime = System.DateTime.Now
                v472
            | US5_0(v440) -> (* Some *)
                let v441 : System.DateTime = System.DateTime.Now
                let v444 : (System.DateTime -> int64) = _.Ticks
                let v445 : int64 = v444 v441
                let v448 : int64 = v445 - v440
                let v449 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v450 : System.TimeSpan = v449 v448
                let v453 : (System.TimeSpan -> int32) = _.Hours
                let v454 : int32 = v453 v450
                let v457 : (System.TimeSpan -> int32) = _.Minutes
                let v458 : int32 = v457 v450
                let v461 : (System.TimeSpan -> int32) = _.Seconds
                let v462 : int32 = v461 v450
                let v465 : (System.TimeSpan -> int32) = _.Milliseconds
                let v466 : int32 = v465 v450
                let v469 : System.DateTime = System.DateTime (1, 1, 1, v454, v458, v462, v466)
                v469
        let v477 : string = method8()
        let v480 : (string -> string) = v476.ToString
        let v481 : string = v480 v477
        let _v101 = v481 
        #endif
        let v484 : string = _v101 
        
        
        
        
        
        let v554 : string = "Verbose"
        let v555 : (unit -> string) = v554.ToLower
        let v556 : string = v555 ()
        let v559 : string = v556.PadLeft (7, ' ')
        let v573 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v574 : string = "inline_colorization::color_bright_black"
        let v575 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v574 
        let v576 : string = "&*$0"
        let v577 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v576 
        let v578 : string = "inline_colorization::color_reset"
        let v579 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v578 
        let v580 : string = "\"{v575}{v577}{v579}\""
        let v581 : string = @$"format!(" + v580 + ")"
        let v582 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v581 
        let v583 : string = "fable_library_rust::String_::fromString($0)"
        let v584 : string = Fable.Core.RustInterop.emitRustExpr v582 v583 
        let _v573 = v584 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v585 : string = "inline_colorization::color_bright_black"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v573 = v595 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v596 : string = "inline_colorization::color_bright_black"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v559 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v573 = v606 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v607 : string = "\u001b[90m"
        let v608 : string = method9()
        let v609 : string = v607 + v559 
        let v610 : string = v609 + v608 
        let _v573 = v610 
        #endif
#if FABLE_COMPILER_PYTHON
        let v611 : string = "\u001b[90m"
        let v612 : string = method9()
        let v613 : string = v611 + v559 
        let v614 : string = v613 + v612 
        let _v573 = v614 
        #endif
#else
        let v615 : string = "\u001b[90m"
        let v616 : string = method9()
        let v617 : string = v615 + v559 
        let v618 : string = v617 + v616 
        let _v573 = v618 
        #endif
        let v619 : string = _v573 
        let v625 : int64 = v86.l0
        let v626 : string = method10()
        let v627 : Mut4 = {l0 = v626} : Mut4
        let v628 : string = "{ "
        let v629 : string = $"{v628}"
        let v632 : unit = ()
        let v633 : (unit -> unit) = closure12(v627, v629)
        let v634 : unit = (fun () -> v633 (); v632) ()
        let v637 : string = "receipt_outcomes_len"
        let v638 : string = $"{v637}"
        let v641 : unit = ()
        let v642 : (unit -> unit) = closure12(v627, v638)
        let v643 : unit = (fun () -> v642 (); v641) ()
        let v646 : string = " = "
        let v647 : string = $"{v646}"
        let v650 : unit = ()
        let v651 : (unit -> unit) = closure12(v627, v647)
        let v652 : unit = (fun () -> v651 (); v650) ()
        let v655 : string = $"{v1}"
        let v658 : unit = ()
        let v659 : (unit -> unit) = closure12(v627, v655)
        let v660 : unit = (fun () -> v659 (); v658) ()
        let v663 : string = "; "
        let v664 : string = $"{v663}"
        let v667 : unit = ()
        let v668 : (unit -> unit) = closure12(v627, v664)
        let v669 : unit = (fun () -> v668 (); v667) ()
        let v672 : string = "receipt_outcomes"
        let v673 : string = $"{v672}"
        let v676 : unit = ()
        let v677 : (unit -> unit) = closure12(v627, v673)
        let v678 : unit = (fun () -> v677 (); v676) ()
        let v681 : string = $"{v646}"
        let v684 : unit = ()
        let v685 : (unit -> unit) = closure12(v627, v681)
        let v686 : unit = (fun () -> v685 (); v684) ()
        let v689 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v690 : string = "format!(\"{:#?}\", $0)"
        let v691 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v690 
        let v692 : string = "fable_library_rust::String_::fromString($0)"
        let v693 : string = Fable.Core.RustInterop.emitRustExpr v691 v692 
        let _v689 = v693 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v694 : string = "format!(\"{:#?}\", $0)"
        let v695 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v694 
        let v696 : string = "fable_library_rust::String_::fromString($0)"
        let v697 : string = Fable.Core.RustInterop.emitRustExpr v695 v696 
        let _v689 = v697 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v698 : string = "format!(\"{:#?}\", $0)"
        let v699 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v698 
        let v700 : string = "fable_library_rust::String_::fromString($0)"
        let v701 : string = Fable.Core.RustInterop.emitRustExpr v699 v700 
        let _v689 = v701 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v702 : string = $"%A{v0}"
        let _v689 = v702 
        #endif
#if FABLE_COMPILER_PYTHON
        let v705 : string = $"%A{v0}"
        let _v689 = v705 
        #endif
#else
        let v708 : string = $"%A{v0}"
        let _v689 = v708 
        #endif
        let v711 : string = _v689 
        let v716 : string = $"{v711}"
        let v719 : unit = ()
        let v720 : (unit -> unit) = closure12(v627, v716)
        let v721 : unit = (fun () -> v720 (); v719) ()
        let v724 : string = " }"
        let v725 : string = $"{v724}"
        let v728 : unit = ()
        let v729 : (unit -> unit) = closure12(v627, v725)
        let v730 : unit = (fun () -> v729 (); v728) ()
        let v733 : string = v627.l0
        let v734 : (unit -> string) = closure36()
        let v735 : string = $"{v484} {v619} #{v625} %s{v734 ()} / {v733}"
        let v738 : char list = []
        let v739 : (char list -> (char [])) = List.toArray
        let v740 : (char []) = v739 v738
        let v743 : string = v735.TrimStart v740 
        let v761 : char list = []
        let v762 : char list = '/' :: v761 
        let v765 : char list = ' ' :: v762 
        let v768 : (char list -> (char [])) = List.toArray
        let v769 : (char []) = v768 v765
        let v772 : string = v743.TrimEnd v769 
        let v790 : (string -> unit) = closure14()
        let v791 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v792 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v772 v792 
        let _v791 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v793 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v772 v793 
        let _v791 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v794 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v772 v794 
        let _v791 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v790 v772
        let _v791 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v790 v772
        let _v791 = () 
        #endif
#else
        v790 v772
        let _v791 = () 
        #endif
        _v791 
        let v795 : (string -> unit) = v18.l0
        v795 v772
and closure38 () () : string =
    let v0 : string = "spiral_wasm.run"
    v0
and closure37 (v0 : Result<std_string_String, near_workspaces_error_Error>) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 0 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : string = "Verbose"
        let v554 : (unit -> string) = v553.ToLower
        let v555 : string = v554 ()
        let v558 : string = v555.PadLeft (7, ' ')
        let v572 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v573 : string = "inline_colorization::color_bright_black"
        let v574 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v573 
        let v575 : string = "&*$0"
        let v576 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v575 
        let v577 : string = "inline_colorization::color_reset"
        let v578 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v577 
        let v579 : string = "\"{v574}{v576}{v578}\""
        let v580 : string = @$"format!(" + v579 + ")"
        let v581 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v580 
        let v582 : string = "fable_library_rust::String_::fromString($0)"
        let v583 : string = Fable.Core.RustInterop.emitRustExpr v581 v582 
        let _v572 = v583 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v584 : string = "inline_colorization::color_bright_black"
        let v585 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v584 
        let v586 : string = "&*$0"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v586 
        let v588 : string = "inline_colorization::color_reset"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "\"{v585}{v587}{v589}\""
        let v591 : string = @$"format!(" + v590 + ")"
        let v592 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "fable_library_rust::String_::fromString($0)"
        let v594 : string = Fable.Core.RustInterop.emitRustExpr v592 v593 
        let _v572 = v594 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v595 : string = "inline_colorization::color_bright_black"
        let v596 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "&*$0"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v597 
        let v599 : string = "inline_colorization::color_reset"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "\"{v596}{v598}{v600}\""
        let v602 : string = @$"format!(" + v601 + ")"
        let v603 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "fable_library_rust::String_::fromString($0)"
        let v605 : string = Fable.Core.RustInterop.emitRustExpr v603 v604 
        let _v572 = v605 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v606 : string = "\u001b[90m"
        let v607 : string = method9()
        let v608 : string = v606 + v558 
        let v609 : string = v608 + v607 
        let _v572 = v609 
        #endif
#if FABLE_COMPILER_PYTHON
        let v610 : string = "\u001b[90m"
        let v611 : string = method9()
        let v612 : string = v610 + v558 
        let v613 : string = v612 + v611 
        let _v572 = v613 
        #endif
#else
        let v614 : string = "\u001b[90m"
        let v615 : string = method9()
        let v616 : string = v614 + v558 
        let v617 : string = v616 + v615 
        let _v572 = v617 
        #endif
        let v618 : string = _v572 
        let v624 : int64 = v85.l0
        let v625 : string = method10()
        let v626 : Mut4 = {l0 = v625} : Mut4
        let v627 : string = "{ "
        let v628 : string = $"{v627}"
        let v631 : unit = ()
        let v632 : (unit -> unit) = closure12(v626, v628)
        let v633 : unit = (fun () -> v632 (); v631) ()
        let v636 : string = "json"
        let v637 : string = $"{v636}"
        let v640 : unit = ()
        let v641 : (unit -> unit) = closure12(v626, v637)
        let v642 : unit = (fun () -> v641 (); v640) ()
        let v645 : string = " = "
        let v646 : string = $"{v645}"
        let v649 : unit = ()
        let v650 : (unit -> unit) = closure12(v626, v646)
        let v651 : unit = (fun () -> v650 (); v649) ()
        let v654 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v655 : string = "format!(\"{:#?}\", $0)"
        let v656 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v655 
        let v657 : string = "fable_library_rust::String_::fromString($0)"
        let v658 : string = Fable.Core.RustInterop.emitRustExpr v656 v657 
        let _v654 = v658 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v659 : string = "format!(\"{:#?}\", $0)"
        let v660 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v659 
        let v661 : string = "fable_library_rust::String_::fromString($0)"
        let v662 : string = Fable.Core.RustInterop.emitRustExpr v660 v661 
        let _v654 = v662 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v663 : string = "format!(\"{:#?}\", $0)"
        let v664 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v663 
        let v665 : string = "fable_library_rust::String_::fromString($0)"
        let v666 : string = Fable.Core.RustInterop.emitRustExpr v664 v665 
        let _v654 = v666 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v667 : string = $"%A{v0}"
        let _v654 = v667 
        #endif
#if FABLE_COMPILER_PYTHON
        let v670 : string = $"%A{v0}"
        let _v654 = v670 
        #endif
#else
        let v673 : string = $"%A{v0}"
        let _v654 = v673 
        #endif
        let v676 : string = _v654 
        let v681 : string = $"{v676}"
        let v684 : unit = ()
        let v685 : (unit -> unit) = closure12(v626, v681)
        let v686 : unit = (fun () -> v685 (); v684) ()
        let v689 : string = " }"
        let v690 : string = $"{v689}"
        let v693 : unit = ()
        let v694 : (unit -> unit) = closure12(v626, v690)
        let v695 : unit = (fun () -> v694 (); v693) ()
        let v698 : string = v626.l0
        let v699 : (unit -> string) = closure38()
        let v700 : string = $"{v483} {v618} #{v624} %s{v699 ()} / {v698}"
        let v703 : char list = []
        let v704 : (char list -> (char [])) = List.toArray
        let v705 : (char []) = v704 v703
        let v708 : string = v700.TrimStart v705 
        let v726 : char list = []
        let v727 : char list = '/' :: v726 
        let v730 : char list = ' ' :: v727 
        let v733 : (char list -> (char [])) = List.toArray
        let v734 : (char []) = v733 v730
        let v737 : string = v708.TrimEnd v734 
        let v755 : (string -> unit) = closure14()
        let v756 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v757 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v737 v757 
        let _v756 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v758 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v737 v758 
        let _v756 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v759 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v737 v759 
        let _v756 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v755 v737
        let _v756 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v755 v737
        let _v756 = () 
        #endif
#else
        v755 v737
        let _v756 = () 
        #endif
        _v756 
        let v760 : (string -> unit) = v17.l0
        v760 v737
and closure40 () () : string =
    let v0 : string = "spiral_wasm.run"
    v0
and closure39 (v0 : Result<std_string_String, near_workspaces_error_Error>) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 0 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : string = "Verbose"
        let v554 : (unit -> string) = v553.ToLower
        let v555 : string = v554 ()
        let v558 : string = v555.PadLeft (7, ' ')
        let v572 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v573 : string = "inline_colorization::color_bright_black"
        let v574 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v573 
        let v575 : string = "&*$0"
        let v576 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v575 
        let v577 : string = "inline_colorization::color_reset"
        let v578 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v577 
        let v579 : string = "\"{v574}{v576}{v578}\""
        let v580 : string = @$"format!(" + v579 + ")"
        let v581 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v580 
        let v582 : string = "fable_library_rust::String_::fromString($0)"
        let v583 : string = Fable.Core.RustInterop.emitRustExpr v581 v582 
        let _v572 = v583 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v584 : string = "inline_colorization::color_bright_black"
        let v585 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v584 
        let v586 : string = "&*$0"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v586 
        let v588 : string = "inline_colorization::color_reset"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "\"{v585}{v587}{v589}\""
        let v591 : string = @$"format!(" + v590 + ")"
        let v592 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "fable_library_rust::String_::fromString($0)"
        let v594 : string = Fable.Core.RustInterop.emitRustExpr v592 v593 
        let _v572 = v594 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v595 : string = "inline_colorization::color_bright_black"
        let v596 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "&*$0"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v597 
        let v599 : string = "inline_colorization::color_reset"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "\"{v596}{v598}{v600}\""
        let v602 : string = @$"format!(" + v601 + ")"
        let v603 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "fable_library_rust::String_::fromString($0)"
        let v605 : string = Fable.Core.RustInterop.emitRustExpr v603 v604 
        let _v572 = v605 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v606 : string = "\u001b[90m"
        let v607 : string = method9()
        let v608 : string = v606 + v558 
        let v609 : string = v608 + v607 
        let _v572 = v609 
        #endif
#if FABLE_COMPILER_PYTHON
        let v610 : string = "\u001b[90m"
        let v611 : string = method9()
        let v612 : string = v610 + v558 
        let v613 : string = v612 + v611 
        let _v572 = v613 
        #endif
#else
        let v614 : string = "\u001b[90m"
        let v615 : string = method9()
        let v616 : string = v614 + v558 
        let v617 : string = v616 + v615 
        let _v572 = v617 
        #endif
        let v618 : string = _v572 
        let v624 : int64 = v85.l0
        let v625 : string = method10()
        let v626 : Mut4 = {l0 = v625} : Mut4
        let v627 : string = "{ "
        let v628 : string = $"{v627}"
        let v631 : unit = ()
        let v632 : (unit -> unit) = closure12(v626, v628)
        let v633 : unit = (fun () -> v632 (); v631) ()
        let v636 : string = "borsh"
        let v637 : string = $"{v636}"
        let v640 : unit = ()
        let v641 : (unit -> unit) = closure12(v626, v637)
        let v642 : unit = (fun () -> v641 (); v640) ()
        let v645 : string = " = "
        let v646 : string = $"{v645}"
        let v649 : unit = ()
        let v650 : (unit -> unit) = closure12(v626, v646)
        let v651 : unit = (fun () -> v650 (); v649) ()
        let v654 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v655 : string = "format!(\"{:#?}\", $0)"
        let v656 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v655 
        let v657 : string = "fable_library_rust::String_::fromString($0)"
        let v658 : string = Fable.Core.RustInterop.emitRustExpr v656 v657 
        let _v654 = v658 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v659 : string = "format!(\"{:#?}\", $0)"
        let v660 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v659 
        let v661 : string = "fable_library_rust::String_::fromString($0)"
        let v662 : string = Fable.Core.RustInterop.emitRustExpr v660 v661 
        let _v654 = v662 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v663 : string = "format!(\"{:#?}\", $0)"
        let v664 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v663 
        let v665 : string = "fable_library_rust::String_::fromString($0)"
        let v666 : string = Fable.Core.RustInterop.emitRustExpr v664 v665 
        let _v654 = v666 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v667 : string = $"%A{v0}"
        let _v654 = v667 
        #endif
#if FABLE_COMPILER_PYTHON
        let v670 : string = $"%A{v0}"
        let _v654 = v670 
        #endif
#else
        let v673 : string = $"%A{v0}"
        let _v654 = v673 
        #endif
        let v676 : string = _v654 
        let v681 : string = $"{v676}"
        let v684 : unit = ()
        let v685 : (unit -> unit) = closure12(v626, v681)
        let v686 : unit = (fun () -> v685 (); v684) ()
        let v689 : string = " }"
        let v690 : string = $"{v689}"
        let v693 : unit = ()
        let v694 : (unit -> unit) = closure12(v626, v690)
        let v695 : unit = (fun () -> v694 (); v693) ()
        let v698 : string = v626.l0
        let v699 : (unit -> string) = closure40()
        let v700 : string = $"{v483} {v618} #{v624} %s{v699 ()} / {v698}"
        let v703 : char list = []
        let v704 : (char list -> (char [])) = List.toArray
        let v705 : (char []) = v704 v703
        let v708 : string = v700.TrimStart v705 
        let v726 : char list = []
        let v727 : char list = '/' :: v726 
        let v730 : char list = ' ' :: v727 
        let v733 : (char list -> (char [])) = List.toArray
        let v734 : (char []) = v733 v730
        let v737 : string = v708.TrimEnd v734 
        let v755 : (string -> unit) = closure14()
        let v756 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v757 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v737 v757 
        let _v756 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v758 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v737 v758 
        let _v756 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v759 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v737 v759 
        let _v756 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v755 v737
        let _v756 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v755 v737
        let _v756 = () 
        #endif
#else
        v755 v737
        let _v756 = () 
        #endif
        _v756 
        let v760 : (string -> unit) = v17.l0
        v760 v737
and method18 (v0 : Result<US4, anyhow_Error>) : Result<US4, anyhow_Error> =
    v0
and method13 (v0 : Vec<uint8>, v1 : uint8) : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> =
    let v2 : string = "true; let __future_init = Box::pin(async move { //"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr () v2 
    let v4 : string = "near_workspaces::sandbox().await"
    let v5 : Result<near_workspaces_Worker<near_workspaces_network_Sandbox>, near_workspaces_error_Error> = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : string = "$0?"
    let v7 : near_workspaces_Worker<near_workspaces_network_Sandbox> = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure18(v1, v7)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v805 : string = "Box::pin($0.dev_deploy(&$1))"
    let v806 : std_pin_Pin<Box<Dyn<std_future_Future<Result<near_workspaces_Contract, near_workspaces_error_Error>>>>> = Fable.Core.RustInterop.emitRustExpr struct (v7, v0) v805 
    let v807 : string = "v806.await"
    let v808 : Result<near_workspaces_Contract, near_workspaces_error_Error> = Fable.Core.RustInterop.emitRustExpr () v807 
    let v809 : string = "$0?"
    let v810 : near_workspaces_Contract = Fable.Core.RustInterop.emitRustExpr v808 v809 
    let v811 : unit = ()
    let v812 : (unit -> unit) = closure20(v1, v810)
    let v813 : unit = (fun () -> v812 (); v811) ()
    let v1608 : string = "$0.call(&*$1)"
    let v1609 : string = "state_main"
    let v1610 : near_workspaces_operations_CallTransaction = Fable.Core.RustInterop.emitRustExpr struct (v810, v1609) v1608 
    let v1611 : string = "Box::pin(v1610.transact())"
    let v1612 : std_pin_Pin<Box<Dyn<std_future_Future<Result<near_workspaces_result_ExecutionFinalResult, near_workspaces_error_Error>>>>> = Fable.Core.RustInterop.emitRustExpr () v1611 
    let v1613 : string = "v1612.await"
    let v1614 : Result<near_workspaces_result_ExecutionFinalResult, near_workspaces_error_Error> = Fable.Core.RustInterop.emitRustExpr () v1613 
    let v1615 : string = "$0?"
    let v1616 : near_workspaces_result_ExecutionFinalResult = Fable.Core.RustInterop.emitRustExpr v1614 v1615 
    let v1617 : unit = ()
    let v1618 : (unit -> unit) = closure22(v1, v1616)
    let v1619 : unit = (fun () -> v1618 (); v1617) ()
    let v2414 : string = "v1616.logs()"
    let v2415 : Vec<Ref<Str>> = Fable.Core.RustInterop.emitRustExpr () v2414 
    let v2416 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v2417 : bool = Fable.Core.RustInterop.emitRustExpr v2415 v2416 
    let v2418 : string = "x"
    let v2419 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v2418 
    let v2420 : string = "String::from($0)"
    let v2421 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2419 v2420 
    let v2422 : string = "true; $0 }).collect::<Vec<_>>()"
    let v2423 : bool = Fable.Core.RustInterop.emitRustExpr v2421 v2422 
    let v2424 : string = "_vec_map"
    let v2425 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v2424 
    let v2426 : string = "true; $0.iter().for_each(|x| { $1(x.clone()); }); //"
    let v2427 : (std_string_String -> unit) = closure24()
    let v2428 : bool = Fable.Core.RustInterop.emitRustExpr struct (v2425, v2427) v2426 
    let v2429 : string = "$0.total_gas_burnt"
    let v2430 : near_workspaces_types_Gas = Fable.Core.RustInterop.emitRustExpr v1616 v2429 
    let v2431 : string = "$0.as_gas()"
    let v2432 : uint64 = Fable.Core.RustInterop.emitRustExpr v2430 v2431 
    let v2433 : (uint64 -> float) = float
    let v2434 : float = v2433 v2432
    let v2435 : float = v2434 / 10000000000000000.0
    let v2436 : float = v2435 * 6.68
    let v2437 : unit = ()
    let v2438 : (unit -> unit) = closure26(v1, v2432, v2436)
    let v2439 : unit = (fun () -> v2438 (); v2437) ()
    let v3306 : string = "$0"
    let v3307 : near_workspaces_result_ExecutionFinalResult = Fable.Core.RustInterop.emitRustExpr v1616 v3306 
    let v3308 : string = "v3307.outcomes()"
    let v3309 : Vec<Ref<near_workspaces_result_ExecutionOutcome>> = Fable.Core.RustInterop.emitRustExpr () v3308 
    let v3310 : string = "v3309.into_iter()"
    let v3311 : _ = Fable.Core.RustInterop.emitRustExpr () v3310 
    let v3312 : string = "v3311.cloned()"
    let v3313 : _ = Fable.Core.RustInterop.emitRustExpr () v3312 
    let v3314 : string = "true; v3313.for_each(|x| $0(x))"
    let v3315 : (near_workspaces_result_ExecutionOutcome -> unit) = closure28()
    let v3316 : bool = Fable.Core.RustInterop.emitRustExpr v3315 v3314 
    let v3317 : string = "$0.into_result()"
    let v3318 : Result<near_workspaces_result_ExecutionSuccess, near_workspaces_result_ExecutionFailure> = Fable.Core.RustInterop.emitRustExpr v1616 v3317 
    let v3319 : unit = ()
    let v3320 : (unit -> unit) = closure31(v3318)
    let v3321 : unit = (fun () -> v3320 (); v3319) ()
    let v4082 : near_workspaces_result_ExecutionFinalResult = method16(v1616)
    let v4083 : string = "v4082.receipt_failures()"
    let v4084 : Vec<Ref<near_workspaces_result_ExecutionOutcome>> = Fable.Core.RustInterop.emitRustExpr () v4083 
    let v4085 : string = "$0.len()"
    let v4086 : unativeint = Fable.Core.RustInterop.emitRustExpr v4084 v4085 
    let v4087 : (unativeint -> int32) = int32
    let v4088 : int32 = v4087 v4086
    let v4089 : unit = ()
    let v4090 : (unit -> unit) = closure33(v4084, v4088)
    let v4091 : unit = (fun () -> v4090 (); v4089) ()
    let v4886 : near_workspaces_result_ExecutionFinalResult = method17(v1616)
    let v4887 : string = "v4886.receipt_outcomes()"
    let v4888 : Ref<Slice<near_workspaces_result_ExecutionOutcome>> = Fable.Core.RustInterop.emitRustExpr () v4887 
    let v4889 : string = "v4888.into()"
    let v4890 : Vec<near_workspaces_result_ExecutionOutcome> = Fable.Core.RustInterop.emitRustExpr () v4889 
    let v4891 : string = "$0.len()"
    let v4892 : unativeint = Fable.Core.RustInterop.emitRustExpr v4890 v4891 
    let v4893 : (unativeint -> int32) = int32
    let v4894 : int32 = v4893 v4892
    let v4895 : unit = ()
    let v4896 : (unit -> unit) = closure35(v4890, v4894)
    let v4897 : unit = (fun () -> v4896 (); v4895) ()
    let v5692 : string = "$0.json()"
    let v5693 : Result<std_string_String, near_workspaces_error_Error> = Fable.Core.RustInterop.emitRustExpr v1616 v5692 
    let v5694 : unit = ()
    let v5695 : (unit -> unit) = closure37(v5693)
    let v5696 : unit = (fun () -> v5695 (); v5694) ()
    let v6457 : string = "$0.borsh()"
    let v6458 : Result<std_string_String, near_workspaces_error_Error> = Fable.Core.RustInterop.emitRustExpr v1616 v6457 
    let v6459 : unit = ()
    let v6460 : (unit -> unit) = closure39(v6458)
    let v6461 : unit = (fun () -> v6460 (); v6459) ()
    let v7222 : string = method10()
    let v7223 : Mut4 = {l0 = v7222} : Mut4
    let v7224 : string = "{ "
    let v7225 : string = $"{v7224}"
    let v7228 : unit = ()
    let v7229 : (unit -> unit) = closure12(v7223, v7225)
    let v7230 : unit = (fun () -> v7229 (); v7228) ()
    let v7233 : string = "receipt_failures"
    let v7234 : string = $"{v7233}"
    let v7237 : unit = ()
    let v7238 : (unit -> unit) = closure12(v7223, v7234)
    let v7239 : unit = (fun () -> v7238 (); v7237) ()
    let v7242 : string = " = "
    let v7243 : string = $"{v7242}"
    let v7246 : unit = ()
    let v7247 : (unit -> unit) = closure12(v7223, v7243)
    let v7248 : unit = (fun () -> v7247 (); v7246) ()
    let v7251 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7252 : string = "format!(\"{:#?}\", $0)"
    let v7253 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4084 v7252 
    let v7254 : string = "fable_library_rust::String_::fromString($0)"
    let v7255 : string = Fable.Core.RustInterop.emitRustExpr v7253 v7254 
    let _v7251 = v7255 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v7256 : string = "format!(\"{:#?}\", $0)"
    let v7257 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4084 v7256 
    let v7258 : string = "fable_library_rust::String_::fromString($0)"
    let v7259 : string = Fable.Core.RustInterop.emitRustExpr v7257 v7258 
    let _v7251 = v7259 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7260 : string = "format!(\"{:#?}\", $0)"
    let v7261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4084 v7260 
    let v7262 : string = "fable_library_rust::String_::fromString($0)"
    let v7263 : string = Fable.Core.RustInterop.emitRustExpr v7261 v7262 
    let _v7251 = v7263 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v7264 : string = $"%A{v4084}"
    let _v7251 = v7264 
    #endif
#if FABLE_COMPILER_PYTHON
    let v7267 : string = $"%A{v4084}"
    let _v7251 = v7267 
    #endif
#else
    let v7270 : string = $"%A{v4084}"
    let _v7251 = v7270 
    #endif
    let v7273 : string = _v7251 
    let v7278 : string = $"{v7273}"
    let v7281 : unit = ()
    let v7282 : (unit -> unit) = closure12(v7223, v7278)
    let v7283 : unit = (fun () -> v7282 (); v7281) ()
    let v7286 : string = "; "
    let v7287 : string = $"{v7286}"
    let v7290 : unit = ()
    let v7291 : (unit -> unit) = closure12(v7223, v7287)
    let v7292 : unit = (fun () -> v7291 (); v7290) ()
    let v7295 : string = "receipt_outcomes_len"
    let v7296 : string = $"{v7295}"
    let v7299 : unit = ()
    let v7300 : (unit -> unit) = closure12(v7223, v7296)
    let v7301 : unit = (fun () -> v7300 (); v7299) ()
    let v7304 : string = $"{v7242}"
    let v7307 : unit = ()
    let v7308 : (unit -> unit) = closure12(v7223, v7304)
    let v7309 : unit = (fun () -> v7308 (); v7307) ()
    let v7312 : string = $"{v4894}"
    let v7315 : unit = ()
    let v7316 : (unit -> unit) = closure12(v7223, v7312)
    let v7317 : unit = (fun () -> v7316 (); v7315) ()
    let v7320 : string = $"{v7286}"
    let v7323 : unit = ()
    let v7324 : (unit -> unit) = closure12(v7223, v7320)
    let v7325 : unit = (fun () -> v7324 (); v7323) ()
    let v7328 : string = "retry"
    let v7329 : string = $"{v7328}"
    let v7332 : unit = ()
    let v7333 : (unit -> unit) = closure12(v7223, v7329)
    let v7334 : unit = (fun () -> v7333 (); v7332) ()
    let v7337 : string = $"{v7242}"
    let v7340 : unit = ()
    let v7341 : (unit -> unit) = closure12(v7223, v7337)
    let v7342 : unit = (fun () -> v7341 (); v7340) ()
    let v7345 : string = $"{v1}"
    let v7348 : unit = ()
    let v7349 : (unit -> unit) = closure12(v7223, v7345)
    let v7350 : unit = (fun () -> v7349 (); v7348) ()
    let v7353 : string = " }"
    let v7354 : string = $"{v7353}"
    let v7357 : unit = ()
    let v7358 : (unit -> unit) = closure12(v7223, v7354)
    let v7359 : unit = (fun () -> v7358 (); v7357) ()
    let v7362 : string = v7223.l0
    let v7363 : bool = v4088 > 0
    let v7374 : Result<US4, anyhow_Error> =
        if v7363 then
            let v7364 : US4 = US4_0(v7362)
            let v7365 : Result<US4, anyhow_Error> = Ok v7364 
            v7365
        else
            let v7366 : bool = v4894 > 1
            if v7366 then
                let v7367 : US4 = US4_1
                let v7368 : Result<US4, anyhow_Error> = Ok v7367 
                v7368
            else
                let v7369 : string = "anyhow::anyhow!($0)"
                let v7370 : anyhow_Error = Fable.Core.RustInterop.emitRustExpr v7362 v7369 
                let v7371 : string = "Err(v7370)"
                let v7372 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v7371 
                v7372
    let v7375 : Result<US4, anyhow_Error> = method18(v7374)
    let v7376 : string = ""
    let v7377 : string = "}"
    let v7378 : string = v7376 + v7377 
    let v7379 : string = "true; v7375 " + v7378 + "); " + v7376 + " // rust.fix_closure'"
    let v7380 : bool = Fable.Core.RustInterop.emitRustExpr () v7379 
    let v7381 : string = "__future_init"
    let v7382 : _ = Fable.Core.RustInterop.emitRustExpr () v7381 
    let v7383 : string = "v7382"
    let v7384 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = Fable.Core.RustInterop.emitRustExpr () v7383 
    v7384
and closure41 () (v0 : anyhow_Error) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#else
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
    let v17 : std_string_String = _v1 
    v17
and method19 () : (anyhow_Error -> std_string_String) =
    closure41()
and closure42 () (v0 : US4) : US6 =
    US6_0(v0)
and closure43 () (v0 : std_string_String) : US6 =
    US6_1(v0)
and closure45 () () : string =
    let v0 : string = "spiral_wasm.run / Error error"
    v0
and closure44 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 3 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_3
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v737 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_3
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_3
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : string = "Warning"
                        US4_0(v730)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v741 : string =
            match v737 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v738) -> (* Some *)
                v738
        let v742 : (unit -> string) = v741.ToLower
        let v743 : string = v742 ()
        let v746 : string = v743.PadLeft (7, ' ')
        let v760 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v761 : string = "inline_colorization::color_yellow"
        let v762 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v761 
        let v763 : string = "&*$0"
        let v764 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v763 
        let v765 : string = "inline_colorization::color_reset"
        let v766 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v765 
        let v767 : string = "\"{v762}{v764}{v766}\""
        let v768 : string = @$"format!(" + v767 + ")"
        let v769 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v768 
        let v770 : string = "fable_library_rust::String_::fromString($0)"
        let v771 : string = Fable.Core.RustInterop.emitRustExpr v769 v770 
        let _v760 = v771 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v772 : string = "inline_colorization::color_yellow"
        let v773 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v772 
        let v774 : string = "&*$0"
        let v775 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v774 
        let v776 : string = "inline_colorization::color_reset"
        let v777 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v776 
        let v778 : string = "\"{v773}{v775}{v777}\""
        let v779 : string = @$"format!(" + v778 + ")"
        let v780 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v779 
        let v781 : string = "fable_library_rust::String_::fromString($0)"
        let v782 : string = Fable.Core.RustInterop.emitRustExpr v780 v781 
        let _v760 = v782 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v783 : string = "inline_colorization::color_yellow"
        let v784 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v783 
        let v785 : string = "&*$0"
        let v786 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v785 
        let v787 : string = "inline_colorization::color_reset"
        let v788 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v787 
        let v789 : string = "\"{v784}{v786}{v788}\""
        let v790 : string = @$"format!(" + v789 + ")"
        let v791 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v790 
        let v792 : string = "fable_library_rust::String_::fromString($0)"
        let v793 : string = Fable.Core.RustInterop.emitRustExpr v791 v792 
        let _v760 = v793 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v794 : string = "\u001b[93m"
        let v795 : string = method9()
        let v796 : string = v794 + v746 
        let v797 : string = v796 + v795 
        let _v760 = v797 
        #endif
#if FABLE_COMPILER_PYTHON
        let v798 : string = "\u001b[93m"
        let v799 : string = method9()
        let v800 : string = v798 + v746 
        let v801 : string = v800 + v799 
        let _v760 = v801 
        #endif
#else
        let v802 : string = "\u001b[93m"
        let v803 : string = method9()
        let v804 : string = v802 + v746 
        let v805 : string = v804 + v803 
        let _v760 = v805 
        #endif
        let v806 : string = _v760 
        let v812 : int64 = v85.l0
        let v813 : string = method10()
        let v814 : Mut4 = {l0 = v813} : Mut4
        let v815 : string = "{ "
        let v816 : string = $"{v815}"
        let v819 : unit = ()
        let v820 : (unit -> unit) = closure12(v814, v816)
        let v821 : unit = (fun () -> v820 (); v819) ()
        let v824 : string = "retry"
        let v825 : string = $"{v824}"
        let v828 : unit = ()
        let v829 : (unit -> unit) = closure12(v814, v825)
        let v830 : unit = (fun () -> v829 (); v828) ()
        let v833 : string = " = "
        let v834 : string = $"{v833}"
        let v837 : unit = ()
        let v838 : (unit -> unit) = closure12(v814, v834)
        let v839 : unit = (fun () -> v838 (); v837) ()
        let v842 : string = $"{1uy}"
        let v845 : unit = ()
        let v846 : (unit -> unit) = closure12(v814, v842)
        let v847 : unit = (fun () -> v846 (); v845) ()
        let v850 : string = "; "
        let v851 : string = $"{v850}"
        let v854 : unit = ()
        let v855 : (unit -> unit) = closure12(v814, v851)
        let v856 : unit = (fun () -> v855 (); v854) ()
        let v859 : string = "error"
        let v860 : string = $"{v859}"
        let v863 : unit = ()
        let v864 : (unit -> unit) = closure12(v814, v860)
        let v865 : unit = (fun () -> v864 (); v863) ()
        let v868 : string = $"{v833}"
        let v871 : unit = ()
        let v872 : (unit -> unit) = closure12(v814, v868)
        let v873 : unit = (fun () -> v872 (); v871) ()
        let v876 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v877 : string = "format!(\"{:#?}\", $0)"
        let v878 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v877 
        let v879 : string = "fable_library_rust::String_::fromString($0)"
        let v880 : string = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let _v876 = v880 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v881 : string = "format!(\"{:#?}\", $0)"
        let v882 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v881 
        let v883 : string = "fable_library_rust::String_::fromString($0)"
        let v884 : string = Fable.Core.RustInterop.emitRustExpr v882 v883 
        let _v876 = v884 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v885 : string = "format!(\"{:#?}\", $0)"
        let v886 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v885 
        let v887 : string = "fable_library_rust::String_::fromString($0)"
        let v888 : string = Fable.Core.RustInterop.emitRustExpr v886 v887 
        let _v876 = v888 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v889 : string = $"%A{v0}"
        let _v876 = v889 
        #endif
#if FABLE_COMPILER_PYTHON
        let v892 : string = $"%A{v0}"
        let _v876 = v892 
        #endif
#else
        let v895 : string = $"%A{v0}"
        let _v876 = v895 
        #endif
        let v898 : string = _v876 
        let v903 : string = $"{v898}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v814, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = " }"
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v814, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = v814.l0
        let v921 : (unit -> string) = closure45()
        let v922 : string = $"{v483} {v806} #{v812} %s{v921 ()} / {v920}"
        let v925 : char list = []
        let v926 : (char list -> (char [])) = List.toArray
        let v927 : (char []) = v926 v925
        let v930 : string = v922.TrimStart v927 
        let v948 : char list = []
        let v949 : char list = '/' :: v948 
        let v952 : char list = ' ' :: v949 
        let v955 : (char list -> (char [])) = List.toArray
        let v956 : (char []) = v955 v952
        let v959 : string = v930.TrimEnd v956 
        let v977 : (string -> unit) = closure14()
        let v978 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v979 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v979 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v980 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v980 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v981 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v981 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v977 v959
        let _v978 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v977 v959
        let _v978 = () 
        #endif
#else
        v977 v959
        let _v978 = () 
        #endif
        _v978 
        let v982 : (string -> unit) = v17.l0
        v982 v959
and closure46 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 3 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_3
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v737 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_3
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_3
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : string = "Warning"
                        US4_0(v730)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v741 : string =
            match v737 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v738) -> (* Some *)
                v738
        let v742 : (unit -> string) = v741.ToLower
        let v743 : string = v742 ()
        let v746 : string = v743.PadLeft (7, ' ')
        let v760 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v761 : string = "inline_colorization::color_yellow"
        let v762 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v761 
        let v763 : string = "&*$0"
        let v764 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v763 
        let v765 : string = "inline_colorization::color_reset"
        let v766 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v765 
        let v767 : string = "\"{v762}{v764}{v766}\""
        let v768 : string = @$"format!(" + v767 + ")"
        let v769 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v768 
        let v770 : string = "fable_library_rust::String_::fromString($0)"
        let v771 : string = Fable.Core.RustInterop.emitRustExpr v769 v770 
        let _v760 = v771 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v772 : string = "inline_colorization::color_yellow"
        let v773 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v772 
        let v774 : string = "&*$0"
        let v775 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v774 
        let v776 : string = "inline_colorization::color_reset"
        let v777 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v776 
        let v778 : string = "\"{v773}{v775}{v777}\""
        let v779 : string = @$"format!(" + v778 + ")"
        let v780 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v779 
        let v781 : string = "fable_library_rust::String_::fromString($0)"
        let v782 : string = Fable.Core.RustInterop.emitRustExpr v780 v781 
        let _v760 = v782 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v783 : string = "inline_colorization::color_yellow"
        let v784 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v783 
        let v785 : string = "&*$0"
        let v786 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v785 
        let v787 : string = "inline_colorization::color_reset"
        let v788 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v787 
        let v789 : string = "\"{v784}{v786}{v788}\""
        let v790 : string = @$"format!(" + v789 + ")"
        let v791 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v790 
        let v792 : string = "fable_library_rust::String_::fromString($0)"
        let v793 : string = Fable.Core.RustInterop.emitRustExpr v791 v792 
        let _v760 = v793 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v794 : string = "\u001b[93m"
        let v795 : string = method9()
        let v796 : string = v794 + v746 
        let v797 : string = v796 + v795 
        let _v760 = v797 
        #endif
#if FABLE_COMPILER_PYTHON
        let v798 : string = "\u001b[93m"
        let v799 : string = method9()
        let v800 : string = v798 + v746 
        let v801 : string = v800 + v799 
        let _v760 = v801 
        #endif
#else
        let v802 : string = "\u001b[93m"
        let v803 : string = method9()
        let v804 : string = v802 + v746 
        let v805 : string = v804 + v803 
        let _v760 = v805 
        #endif
        let v806 : string = _v760 
        let v812 : int64 = v85.l0
        let v813 : string = method10()
        let v814 : Mut4 = {l0 = v813} : Mut4
        let v815 : string = "{ "
        let v816 : string = $"{v815}"
        let v819 : unit = ()
        let v820 : (unit -> unit) = closure12(v814, v816)
        let v821 : unit = (fun () -> v820 (); v819) ()
        let v824 : string = "retry"
        let v825 : string = $"{v824}"
        let v828 : unit = ()
        let v829 : (unit -> unit) = closure12(v814, v825)
        let v830 : unit = (fun () -> v829 (); v828) ()
        let v833 : string = " = "
        let v834 : string = $"{v833}"
        let v837 : unit = ()
        let v838 : (unit -> unit) = closure12(v814, v834)
        let v839 : unit = (fun () -> v838 (); v837) ()
        let v842 : string = $"{2uy}"
        let v845 : unit = ()
        let v846 : (unit -> unit) = closure12(v814, v842)
        let v847 : unit = (fun () -> v846 (); v845) ()
        let v850 : string = "; "
        let v851 : string = $"{v850}"
        let v854 : unit = ()
        let v855 : (unit -> unit) = closure12(v814, v851)
        let v856 : unit = (fun () -> v855 (); v854) ()
        let v859 : string = "error"
        let v860 : string = $"{v859}"
        let v863 : unit = ()
        let v864 : (unit -> unit) = closure12(v814, v860)
        let v865 : unit = (fun () -> v864 (); v863) ()
        let v868 : string = $"{v833}"
        let v871 : unit = ()
        let v872 : (unit -> unit) = closure12(v814, v868)
        let v873 : unit = (fun () -> v872 (); v871) ()
        let v876 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v877 : string = "format!(\"{:#?}\", $0)"
        let v878 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v877 
        let v879 : string = "fable_library_rust::String_::fromString($0)"
        let v880 : string = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let _v876 = v880 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v881 : string = "format!(\"{:#?}\", $0)"
        let v882 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v881 
        let v883 : string = "fable_library_rust::String_::fromString($0)"
        let v884 : string = Fable.Core.RustInterop.emitRustExpr v882 v883 
        let _v876 = v884 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v885 : string = "format!(\"{:#?}\", $0)"
        let v886 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v885 
        let v887 : string = "fable_library_rust::String_::fromString($0)"
        let v888 : string = Fable.Core.RustInterop.emitRustExpr v886 v887 
        let _v876 = v888 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v889 : string = $"%A{v0}"
        let _v876 = v889 
        #endif
#if FABLE_COMPILER_PYTHON
        let v892 : string = $"%A{v0}"
        let _v876 = v892 
        #endif
#else
        let v895 : string = $"%A{v0}"
        let _v876 = v895 
        #endif
        let v898 : string = _v876 
        let v903 : string = $"{v898}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v814, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = " }"
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v814, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = v814.l0
        let v921 : (unit -> string) = closure45()
        let v922 : string = $"{v483} {v806} #{v812} %s{v921 ()} / {v920}"
        let v925 : char list = []
        let v926 : (char list -> (char [])) = List.toArray
        let v927 : (char []) = v926 v925
        let v930 : string = v922.TrimStart v927 
        let v948 : char list = []
        let v949 : char list = '/' :: v948 
        let v952 : char list = ' ' :: v949 
        let v955 : (char list -> (char [])) = List.toArray
        let v956 : (char []) = v955 v952
        let v959 : string = v930.TrimEnd v956 
        let v977 : (string -> unit) = closure14()
        let v978 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v979 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v979 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v980 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v980 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v981 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v981 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v977 v959
        let _v978 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v977 v959
        let _v978 = () 
        #endif
#else
        v977 v959
        let _v978 = () 
        #endif
        _v978 
        let v982 : (string -> unit) = v17.l0
        v982 v959
and closure47 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 3 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_3
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v737 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_3
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_3
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : string = "Warning"
                        US4_0(v730)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v741 : string =
            match v737 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v738) -> (* Some *)
                v738
        let v742 : (unit -> string) = v741.ToLower
        let v743 : string = v742 ()
        let v746 : string = v743.PadLeft (7, ' ')
        let v760 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v761 : string = "inline_colorization::color_yellow"
        let v762 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v761 
        let v763 : string = "&*$0"
        let v764 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v763 
        let v765 : string = "inline_colorization::color_reset"
        let v766 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v765 
        let v767 : string = "\"{v762}{v764}{v766}\""
        let v768 : string = @$"format!(" + v767 + ")"
        let v769 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v768 
        let v770 : string = "fable_library_rust::String_::fromString($0)"
        let v771 : string = Fable.Core.RustInterop.emitRustExpr v769 v770 
        let _v760 = v771 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v772 : string = "inline_colorization::color_yellow"
        let v773 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v772 
        let v774 : string = "&*$0"
        let v775 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v774 
        let v776 : string = "inline_colorization::color_reset"
        let v777 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v776 
        let v778 : string = "\"{v773}{v775}{v777}\""
        let v779 : string = @$"format!(" + v778 + ")"
        let v780 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v779 
        let v781 : string = "fable_library_rust::String_::fromString($0)"
        let v782 : string = Fable.Core.RustInterop.emitRustExpr v780 v781 
        let _v760 = v782 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v783 : string = "inline_colorization::color_yellow"
        let v784 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v783 
        let v785 : string = "&*$0"
        let v786 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v785 
        let v787 : string = "inline_colorization::color_reset"
        let v788 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v787 
        let v789 : string = "\"{v784}{v786}{v788}\""
        let v790 : string = @$"format!(" + v789 + ")"
        let v791 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v790 
        let v792 : string = "fable_library_rust::String_::fromString($0)"
        let v793 : string = Fable.Core.RustInterop.emitRustExpr v791 v792 
        let _v760 = v793 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v794 : string = "\u001b[93m"
        let v795 : string = method9()
        let v796 : string = v794 + v746 
        let v797 : string = v796 + v795 
        let _v760 = v797 
        #endif
#if FABLE_COMPILER_PYTHON
        let v798 : string = "\u001b[93m"
        let v799 : string = method9()
        let v800 : string = v798 + v746 
        let v801 : string = v800 + v799 
        let _v760 = v801 
        #endif
#else
        let v802 : string = "\u001b[93m"
        let v803 : string = method9()
        let v804 : string = v802 + v746 
        let v805 : string = v804 + v803 
        let _v760 = v805 
        #endif
        let v806 : string = _v760 
        let v812 : int64 = v85.l0
        let v813 : string = method10()
        let v814 : Mut4 = {l0 = v813} : Mut4
        let v815 : string = "{ "
        let v816 : string = $"{v815}"
        let v819 : unit = ()
        let v820 : (unit -> unit) = closure12(v814, v816)
        let v821 : unit = (fun () -> v820 (); v819) ()
        let v824 : string = "retry"
        let v825 : string = $"{v824}"
        let v828 : unit = ()
        let v829 : (unit -> unit) = closure12(v814, v825)
        let v830 : unit = (fun () -> v829 (); v828) ()
        let v833 : string = " = "
        let v834 : string = $"{v833}"
        let v837 : unit = ()
        let v838 : (unit -> unit) = closure12(v814, v834)
        let v839 : unit = (fun () -> v838 (); v837) ()
        let v842 : string = $"{3uy}"
        let v845 : unit = ()
        let v846 : (unit -> unit) = closure12(v814, v842)
        let v847 : unit = (fun () -> v846 (); v845) ()
        let v850 : string = "; "
        let v851 : string = $"{v850}"
        let v854 : unit = ()
        let v855 : (unit -> unit) = closure12(v814, v851)
        let v856 : unit = (fun () -> v855 (); v854) ()
        let v859 : string = "error"
        let v860 : string = $"{v859}"
        let v863 : unit = ()
        let v864 : (unit -> unit) = closure12(v814, v860)
        let v865 : unit = (fun () -> v864 (); v863) ()
        let v868 : string = $"{v833}"
        let v871 : unit = ()
        let v872 : (unit -> unit) = closure12(v814, v868)
        let v873 : unit = (fun () -> v872 (); v871) ()
        let v876 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v877 : string = "format!(\"{:#?}\", $0)"
        let v878 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v877 
        let v879 : string = "fable_library_rust::String_::fromString($0)"
        let v880 : string = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let _v876 = v880 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v881 : string = "format!(\"{:#?}\", $0)"
        let v882 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v881 
        let v883 : string = "fable_library_rust::String_::fromString($0)"
        let v884 : string = Fable.Core.RustInterop.emitRustExpr v882 v883 
        let _v876 = v884 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v885 : string = "format!(\"{:#?}\", $0)"
        let v886 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v885 
        let v887 : string = "fable_library_rust::String_::fromString($0)"
        let v888 : string = Fable.Core.RustInterop.emitRustExpr v886 v887 
        let _v876 = v888 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v889 : string = $"%A{v0}"
        let _v876 = v889 
        #endif
#if FABLE_COMPILER_PYTHON
        let v892 : string = $"%A{v0}"
        let _v876 = v892 
        #endif
#else
        let v895 : string = $"%A{v0}"
        let _v876 = v895 
        #endif
        let v898 : string = _v876 
        let v903 : string = $"{v898}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v814, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = " }"
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v814, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = v814.l0
        let v921 : (unit -> string) = closure45()
        let v922 : string = $"{v483} {v806} #{v812} %s{v921 ()} / {v920}"
        let v925 : char list = []
        let v926 : (char list -> (char [])) = List.toArray
        let v927 : (char []) = v926 v925
        let v930 : string = v922.TrimStart v927 
        let v948 : char list = []
        let v949 : char list = '/' :: v948 
        let v952 : char list = ' ' :: v949 
        let v955 : (char list -> (char [])) = List.toArray
        let v956 : (char []) = v955 v952
        let v959 : string = v930.TrimEnd v956 
        let v977 : (string -> unit) = closure14()
        let v978 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v979 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v979 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v980 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v980 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v981 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v981 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v977 v959
        let _v978 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v977 v959
        let _v978 = () 
        #endif
#else
        v977 v959
        let _v978 = () 
        #endif
        _v978 
        let v982 : (string -> unit) = v17.l0
        v982 v959
and closure48 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 3 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_3
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v737 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_3
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_3
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : string = "Warning"
                        US4_0(v730)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v741 : string =
            match v737 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v738) -> (* Some *)
                v738
        let v742 : (unit -> string) = v741.ToLower
        let v743 : string = v742 ()
        let v746 : string = v743.PadLeft (7, ' ')
        let v760 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v761 : string = "inline_colorization::color_yellow"
        let v762 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v761 
        let v763 : string = "&*$0"
        let v764 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v763 
        let v765 : string = "inline_colorization::color_reset"
        let v766 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v765 
        let v767 : string = "\"{v762}{v764}{v766}\""
        let v768 : string = @$"format!(" + v767 + ")"
        let v769 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v768 
        let v770 : string = "fable_library_rust::String_::fromString($0)"
        let v771 : string = Fable.Core.RustInterop.emitRustExpr v769 v770 
        let _v760 = v771 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v772 : string = "inline_colorization::color_yellow"
        let v773 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v772 
        let v774 : string = "&*$0"
        let v775 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v774 
        let v776 : string = "inline_colorization::color_reset"
        let v777 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v776 
        let v778 : string = "\"{v773}{v775}{v777}\""
        let v779 : string = @$"format!(" + v778 + ")"
        let v780 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v779 
        let v781 : string = "fable_library_rust::String_::fromString($0)"
        let v782 : string = Fable.Core.RustInterop.emitRustExpr v780 v781 
        let _v760 = v782 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v783 : string = "inline_colorization::color_yellow"
        let v784 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v783 
        let v785 : string = "&*$0"
        let v786 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v785 
        let v787 : string = "inline_colorization::color_reset"
        let v788 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v787 
        let v789 : string = "\"{v784}{v786}{v788}\""
        let v790 : string = @$"format!(" + v789 + ")"
        let v791 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v790 
        let v792 : string = "fable_library_rust::String_::fromString($0)"
        let v793 : string = Fable.Core.RustInterop.emitRustExpr v791 v792 
        let _v760 = v793 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v794 : string = "\u001b[93m"
        let v795 : string = method9()
        let v796 : string = v794 + v746 
        let v797 : string = v796 + v795 
        let _v760 = v797 
        #endif
#if FABLE_COMPILER_PYTHON
        let v798 : string = "\u001b[93m"
        let v799 : string = method9()
        let v800 : string = v798 + v746 
        let v801 : string = v800 + v799 
        let _v760 = v801 
        #endif
#else
        let v802 : string = "\u001b[93m"
        let v803 : string = method9()
        let v804 : string = v802 + v746 
        let v805 : string = v804 + v803 
        let _v760 = v805 
        #endif
        let v806 : string = _v760 
        let v812 : int64 = v85.l0
        let v813 : string = method10()
        let v814 : Mut4 = {l0 = v813} : Mut4
        let v815 : string = "{ "
        let v816 : string = $"{v815}"
        let v819 : unit = ()
        let v820 : (unit -> unit) = closure12(v814, v816)
        let v821 : unit = (fun () -> v820 (); v819) ()
        let v824 : string = "retry"
        let v825 : string = $"{v824}"
        let v828 : unit = ()
        let v829 : (unit -> unit) = closure12(v814, v825)
        let v830 : unit = (fun () -> v829 (); v828) ()
        let v833 : string = " = "
        let v834 : string = $"{v833}"
        let v837 : unit = ()
        let v838 : (unit -> unit) = closure12(v814, v834)
        let v839 : unit = (fun () -> v838 (); v837) ()
        let v842 : string = $"{4uy}"
        let v845 : unit = ()
        let v846 : (unit -> unit) = closure12(v814, v842)
        let v847 : unit = (fun () -> v846 (); v845) ()
        let v850 : string = "; "
        let v851 : string = $"{v850}"
        let v854 : unit = ()
        let v855 : (unit -> unit) = closure12(v814, v851)
        let v856 : unit = (fun () -> v855 (); v854) ()
        let v859 : string = "error"
        let v860 : string = $"{v859}"
        let v863 : unit = ()
        let v864 : (unit -> unit) = closure12(v814, v860)
        let v865 : unit = (fun () -> v864 (); v863) ()
        let v868 : string = $"{v833}"
        let v871 : unit = ()
        let v872 : (unit -> unit) = closure12(v814, v868)
        let v873 : unit = (fun () -> v872 (); v871) ()
        let v876 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v877 : string = "format!(\"{:#?}\", $0)"
        let v878 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v877 
        let v879 : string = "fable_library_rust::String_::fromString($0)"
        let v880 : string = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let _v876 = v880 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v881 : string = "format!(\"{:#?}\", $0)"
        let v882 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v881 
        let v883 : string = "fable_library_rust::String_::fromString($0)"
        let v884 : string = Fable.Core.RustInterop.emitRustExpr v882 v883 
        let _v876 = v884 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v885 : string = "format!(\"{:#?}\", $0)"
        let v886 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v885 
        let v887 : string = "fable_library_rust::String_::fromString($0)"
        let v888 : string = Fable.Core.RustInterop.emitRustExpr v886 v887 
        let _v876 = v888 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v889 : string = $"%A{v0}"
        let _v876 = v889 
        #endif
#if FABLE_COMPILER_PYTHON
        let v892 : string = $"%A{v0}"
        let _v876 = v892 
        #endif
#else
        let v895 : string = $"%A{v0}"
        let _v876 = v895 
        #endif
        let v898 : string = _v876 
        let v903 : string = $"{v898}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v814, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = " }"
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v814, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = v814.l0
        let v921 : (unit -> string) = closure45()
        let v922 : string = $"{v483} {v806} #{v812} %s{v921 ()} / {v920}"
        let v925 : char list = []
        let v926 : (char list -> (char [])) = List.toArray
        let v927 : (char []) = v926 v925
        let v930 : string = v922.TrimStart v927 
        let v948 : char list = []
        let v949 : char list = '/' :: v948 
        let v952 : char list = ' ' :: v949 
        let v955 : (char list -> (char [])) = List.toArray
        let v956 : (char []) = v955 v952
        let v959 : string = v930.TrimEnd v956 
        let v977 : (string -> unit) = closure14()
        let v978 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v979 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v979 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v980 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v980 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v981 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v981 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v977 v959
        let _v978 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v977 v959
        let _v978 = () 
        #endif
#else
        v977 v959
        let _v978 = () 
        #endif
        _v978 
        let v982 : (string -> unit) = v17.l0
        v982 v959
and closure49 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 3 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_3
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v737 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_3
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_3
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : string = "Warning"
                        US4_0(v730)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v741 : string =
            match v737 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v738) -> (* Some *)
                v738
        let v742 : (unit -> string) = v741.ToLower
        let v743 : string = v742 ()
        let v746 : string = v743.PadLeft (7, ' ')
        let v760 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v761 : string = "inline_colorization::color_yellow"
        let v762 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v761 
        let v763 : string = "&*$0"
        let v764 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v763 
        let v765 : string = "inline_colorization::color_reset"
        let v766 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v765 
        let v767 : string = "\"{v762}{v764}{v766}\""
        let v768 : string = @$"format!(" + v767 + ")"
        let v769 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v768 
        let v770 : string = "fable_library_rust::String_::fromString($0)"
        let v771 : string = Fable.Core.RustInterop.emitRustExpr v769 v770 
        let _v760 = v771 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v772 : string = "inline_colorization::color_yellow"
        let v773 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v772 
        let v774 : string = "&*$0"
        let v775 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v774 
        let v776 : string = "inline_colorization::color_reset"
        let v777 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v776 
        let v778 : string = "\"{v773}{v775}{v777}\""
        let v779 : string = @$"format!(" + v778 + ")"
        let v780 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v779 
        let v781 : string = "fable_library_rust::String_::fromString($0)"
        let v782 : string = Fable.Core.RustInterop.emitRustExpr v780 v781 
        let _v760 = v782 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v783 : string = "inline_colorization::color_yellow"
        let v784 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v783 
        let v785 : string = "&*$0"
        let v786 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v785 
        let v787 : string = "inline_colorization::color_reset"
        let v788 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v787 
        let v789 : string = "\"{v784}{v786}{v788}\""
        let v790 : string = @$"format!(" + v789 + ")"
        let v791 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v790 
        let v792 : string = "fable_library_rust::String_::fromString($0)"
        let v793 : string = Fable.Core.RustInterop.emitRustExpr v791 v792 
        let _v760 = v793 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v794 : string = "\u001b[93m"
        let v795 : string = method9()
        let v796 : string = v794 + v746 
        let v797 : string = v796 + v795 
        let _v760 = v797 
        #endif
#if FABLE_COMPILER_PYTHON
        let v798 : string = "\u001b[93m"
        let v799 : string = method9()
        let v800 : string = v798 + v746 
        let v801 : string = v800 + v799 
        let _v760 = v801 
        #endif
#else
        let v802 : string = "\u001b[93m"
        let v803 : string = method9()
        let v804 : string = v802 + v746 
        let v805 : string = v804 + v803 
        let _v760 = v805 
        #endif
        let v806 : string = _v760 
        let v812 : int64 = v85.l0
        let v813 : string = method10()
        let v814 : Mut4 = {l0 = v813} : Mut4
        let v815 : string = "{ "
        let v816 : string = $"{v815}"
        let v819 : unit = ()
        let v820 : (unit -> unit) = closure12(v814, v816)
        let v821 : unit = (fun () -> v820 (); v819) ()
        let v824 : string = "retry"
        let v825 : string = $"{v824}"
        let v828 : unit = ()
        let v829 : (unit -> unit) = closure12(v814, v825)
        let v830 : unit = (fun () -> v829 (); v828) ()
        let v833 : string = " = "
        let v834 : string = $"{v833}"
        let v837 : unit = ()
        let v838 : (unit -> unit) = closure12(v814, v834)
        let v839 : unit = (fun () -> v838 (); v837) ()
        let v842 : string = $"{5uy}"
        let v845 : unit = ()
        let v846 : (unit -> unit) = closure12(v814, v842)
        let v847 : unit = (fun () -> v846 (); v845) ()
        let v850 : string = "; "
        let v851 : string = $"{v850}"
        let v854 : unit = ()
        let v855 : (unit -> unit) = closure12(v814, v851)
        let v856 : unit = (fun () -> v855 (); v854) ()
        let v859 : string = "error"
        let v860 : string = $"{v859}"
        let v863 : unit = ()
        let v864 : (unit -> unit) = closure12(v814, v860)
        let v865 : unit = (fun () -> v864 (); v863) ()
        let v868 : string = $"{v833}"
        let v871 : unit = ()
        let v872 : (unit -> unit) = closure12(v814, v868)
        let v873 : unit = (fun () -> v872 (); v871) ()
        let v876 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v877 : string = "format!(\"{:#?}\", $0)"
        let v878 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v877 
        let v879 : string = "fable_library_rust::String_::fromString($0)"
        let v880 : string = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let _v876 = v880 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v881 : string = "format!(\"{:#?}\", $0)"
        let v882 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v881 
        let v883 : string = "fable_library_rust::String_::fromString($0)"
        let v884 : string = Fable.Core.RustInterop.emitRustExpr v882 v883 
        let _v876 = v884 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v885 : string = "format!(\"{:#?}\", $0)"
        let v886 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v885 
        let v887 : string = "fable_library_rust::String_::fromString($0)"
        let v888 : string = Fable.Core.RustInterop.emitRustExpr v886 v887 
        let _v876 = v888 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v889 : string = $"%A{v0}"
        let _v876 = v889 
        #endif
#if FABLE_COMPILER_PYTHON
        let v892 : string = $"%A{v0}"
        let _v876 = v892 
        #endif
#else
        let v895 : string = $"%A{v0}"
        let _v876 = v895 
        #endif
        let v898 : string = _v876 
        let v903 : string = $"{v898}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v814, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = " }"
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v814, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = v814.l0
        let v921 : (unit -> string) = closure45()
        let v922 : string = $"{v483} {v806} #{v812} %s{v921 ()} / {v920}"
        let v925 : char list = []
        let v926 : (char list -> (char [])) = List.toArray
        let v927 : (char []) = v926 v925
        let v930 : string = v922.TrimStart v927 
        let v948 : char list = []
        let v949 : char list = '/' :: v948 
        let v952 : char list = ' ' :: v949 
        let v955 : (char list -> (char [])) = List.toArray
        let v956 : (char []) = v955 v952
        let v959 : string = v930.TrimEnd v956 
        let v977 : (string -> unit) = closure14()
        let v978 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v979 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v979 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v980 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v980 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v981 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v981 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v977 v959
        let _v978 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v977 v959
        let _v978 = () 
        #endif
#else
        v977 v959
        let _v978 = () 
        #endif
        _v978 
        let v982 : (string -> unit) = v17.l0
        v982 v959
and closure50 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 3 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_3
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v737 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_3
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_3
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : string = "Warning"
                        US4_0(v730)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v741 : string =
            match v737 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v738) -> (* Some *)
                v738
        let v742 : (unit -> string) = v741.ToLower
        let v743 : string = v742 ()
        let v746 : string = v743.PadLeft (7, ' ')
        let v760 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v761 : string = "inline_colorization::color_yellow"
        let v762 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v761 
        let v763 : string = "&*$0"
        let v764 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v763 
        let v765 : string = "inline_colorization::color_reset"
        let v766 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v765 
        let v767 : string = "\"{v762}{v764}{v766}\""
        let v768 : string = @$"format!(" + v767 + ")"
        let v769 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v768 
        let v770 : string = "fable_library_rust::String_::fromString($0)"
        let v771 : string = Fable.Core.RustInterop.emitRustExpr v769 v770 
        let _v760 = v771 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v772 : string = "inline_colorization::color_yellow"
        let v773 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v772 
        let v774 : string = "&*$0"
        let v775 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v774 
        let v776 : string = "inline_colorization::color_reset"
        let v777 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v776 
        let v778 : string = "\"{v773}{v775}{v777}\""
        let v779 : string = @$"format!(" + v778 + ")"
        let v780 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v779 
        let v781 : string = "fable_library_rust::String_::fromString($0)"
        let v782 : string = Fable.Core.RustInterop.emitRustExpr v780 v781 
        let _v760 = v782 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v783 : string = "inline_colorization::color_yellow"
        let v784 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v783 
        let v785 : string = "&*$0"
        let v786 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v785 
        let v787 : string = "inline_colorization::color_reset"
        let v788 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v787 
        let v789 : string = "\"{v784}{v786}{v788}\""
        let v790 : string = @$"format!(" + v789 + ")"
        let v791 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v790 
        let v792 : string = "fable_library_rust::String_::fromString($0)"
        let v793 : string = Fable.Core.RustInterop.emitRustExpr v791 v792 
        let _v760 = v793 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v794 : string = "\u001b[93m"
        let v795 : string = method9()
        let v796 : string = v794 + v746 
        let v797 : string = v796 + v795 
        let _v760 = v797 
        #endif
#if FABLE_COMPILER_PYTHON
        let v798 : string = "\u001b[93m"
        let v799 : string = method9()
        let v800 : string = v798 + v746 
        let v801 : string = v800 + v799 
        let _v760 = v801 
        #endif
#else
        let v802 : string = "\u001b[93m"
        let v803 : string = method9()
        let v804 : string = v802 + v746 
        let v805 : string = v804 + v803 
        let _v760 = v805 
        #endif
        let v806 : string = _v760 
        let v812 : int64 = v85.l0
        let v813 : string = method10()
        let v814 : Mut4 = {l0 = v813} : Mut4
        let v815 : string = "{ "
        let v816 : string = $"{v815}"
        let v819 : unit = ()
        let v820 : (unit -> unit) = closure12(v814, v816)
        let v821 : unit = (fun () -> v820 (); v819) ()
        let v824 : string = "retry"
        let v825 : string = $"{v824}"
        let v828 : unit = ()
        let v829 : (unit -> unit) = closure12(v814, v825)
        let v830 : unit = (fun () -> v829 (); v828) ()
        let v833 : string = " = "
        let v834 : string = $"{v833}"
        let v837 : unit = ()
        let v838 : (unit -> unit) = closure12(v814, v834)
        let v839 : unit = (fun () -> v838 (); v837) ()
        let v842 : string = $"{6uy}"
        let v845 : unit = ()
        let v846 : (unit -> unit) = closure12(v814, v842)
        let v847 : unit = (fun () -> v846 (); v845) ()
        let v850 : string = "; "
        let v851 : string = $"{v850}"
        let v854 : unit = ()
        let v855 : (unit -> unit) = closure12(v814, v851)
        let v856 : unit = (fun () -> v855 (); v854) ()
        let v859 : string = "error"
        let v860 : string = $"{v859}"
        let v863 : unit = ()
        let v864 : (unit -> unit) = closure12(v814, v860)
        let v865 : unit = (fun () -> v864 (); v863) ()
        let v868 : string = $"{v833}"
        let v871 : unit = ()
        let v872 : (unit -> unit) = closure12(v814, v868)
        let v873 : unit = (fun () -> v872 (); v871) ()
        let v876 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v877 : string = "format!(\"{:#?}\", $0)"
        let v878 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v877 
        let v879 : string = "fable_library_rust::String_::fromString($0)"
        let v880 : string = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let _v876 = v880 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v881 : string = "format!(\"{:#?}\", $0)"
        let v882 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v881 
        let v883 : string = "fable_library_rust::String_::fromString($0)"
        let v884 : string = Fable.Core.RustInterop.emitRustExpr v882 v883 
        let _v876 = v884 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v885 : string = "format!(\"{:#?}\", $0)"
        let v886 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v885 
        let v887 : string = "fable_library_rust::String_::fromString($0)"
        let v888 : string = Fable.Core.RustInterop.emitRustExpr v886 v887 
        let _v876 = v888 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v889 : string = $"%A{v0}"
        let _v876 = v889 
        #endif
#if FABLE_COMPILER_PYTHON
        let v892 : string = $"%A{v0}"
        let _v876 = v892 
        #endif
#else
        let v895 : string = $"%A{v0}"
        let _v876 = v895 
        #endif
        let v898 : string = _v876 
        let v903 : string = $"{v898}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v814, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = " }"
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v814, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = v814.l0
        let v921 : (unit -> string) = closure45()
        let v922 : string = $"{v483} {v806} #{v812} %s{v921 ()} / {v920}"
        let v925 : char list = []
        let v926 : (char list -> (char [])) = List.toArray
        let v927 : (char []) = v926 v925
        let v930 : string = v922.TrimStart v927 
        let v948 : char list = []
        let v949 : char list = '/' :: v948 
        let v952 : char list = ' ' :: v949 
        let v955 : (char list -> (char [])) = List.toArray
        let v956 : (char []) = v955 v952
        let v959 : string = v930.TrimEnd v956 
        let v977 : (string -> unit) = closure14()
        let v978 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v979 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v979 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v980 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v980 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v981 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v981 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v977 v959
        let _v978 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v977 v959
        let _v978 = () 
        #endif
#else
        v977 v959
        let _v978 = () 
        #endif
        _v978 
        let v982 : (string -> unit) = v17.l0
        v982 v959
and closure51 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 3 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_3
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v737 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_3
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_3
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : string = "Warning"
                        US4_0(v730)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v741 : string =
            match v737 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v738) -> (* Some *)
                v738
        let v742 : (unit -> string) = v741.ToLower
        let v743 : string = v742 ()
        let v746 : string = v743.PadLeft (7, ' ')
        let v760 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v761 : string = "inline_colorization::color_yellow"
        let v762 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v761 
        let v763 : string = "&*$0"
        let v764 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v763 
        let v765 : string = "inline_colorization::color_reset"
        let v766 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v765 
        let v767 : string = "\"{v762}{v764}{v766}\""
        let v768 : string = @$"format!(" + v767 + ")"
        let v769 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v768 
        let v770 : string = "fable_library_rust::String_::fromString($0)"
        let v771 : string = Fable.Core.RustInterop.emitRustExpr v769 v770 
        let _v760 = v771 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v772 : string = "inline_colorization::color_yellow"
        let v773 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v772 
        let v774 : string = "&*$0"
        let v775 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v774 
        let v776 : string = "inline_colorization::color_reset"
        let v777 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v776 
        let v778 : string = "\"{v773}{v775}{v777}\""
        let v779 : string = @$"format!(" + v778 + ")"
        let v780 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v779 
        let v781 : string = "fable_library_rust::String_::fromString($0)"
        let v782 : string = Fable.Core.RustInterop.emitRustExpr v780 v781 
        let _v760 = v782 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v783 : string = "inline_colorization::color_yellow"
        let v784 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v783 
        let v785 : string = "&*$0"
        let v786 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v785 
        let v787 : string = "inline_colorization::color_reset"
        let v788 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v787 
        let v789 : string = "\"{v784}{v786}{v788}\""
        let v790 : string = @$"format!(" + v789 + ")"
        let v791 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v790 
        let v792 : string = "fable_library_rust::String_::fromString($0)"
        let v793 : string = Fable.Core.RustInterop.emitRustExpr v791 v792 
        let _v760 = v793 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v794 : string = "\u001b[93m"
        let v795 : string = method9()
        let v796 : string = v794 + v746 
        let v797 : string = v796 + v795 
        let _v760 = v797 
        #endif
#if FABLE_COMPILER_PYTHON
        let v798 : string = "\u001b[93m"
        let v799 : string = method9()
        let v800 : string = v798 + v746 
        let v801 : string = v800 + v799 
        let _v760 = v801 
        #endif
#else
        let v802 : string = "\u001b[93m"
        let v803 : string = method9()
        let v804 : string = v802 + v746 
        let v805 : string = v804 + v803 
        let _v760 = v805 
        #endif
        let v806 : string = _v760 
        let v812 : int64 = v85.l0
        let v813 : string = method10()
        let v814 : Mut4 = {l0 = v813} : Mut4
        let v815 : string = "{ "
        let v816 : string = $"{v815}"
        let v819 : unit = ()
        let v820 : (unit -> unit) = closure12(v814, v816)
        let v821 : unit = (fun () -> v820 (); v819) ()
        let v824 : string = "retry"
        let v825 : string = $"{v824}"
        let v828 : unit = ()
        let v829 : (unit -> unit) = closure12(v814, v825)
        let v830 : unit = (fun () -> v829 (); v828) ()
        let v833 : string = " = "
        let v834 : string = $"{v833}"
        let v837 : unit = ()
        let v838 : (unit -> unit) = closure12(v814, v834)
        let v839 : unit = (fun () -> v838 (); v837) ()
        let v842 : string = $"{7uy}"
        let v845 : unit = ()
        let v846 : (unit -> unit) = closure12(v814, v842)
        let v847 : unit = (fun () -> v846 (); v845) ()
        let v850 : string = "; "
        let v851 : string = $"{v850}"
        let v854 : unit = ()
        let v855 : (unit -> unit) = closure12(v814, v851)
        let v856 : unit = (fun () -> v855 (); v854) ()
        let v859 : string = "error"
        let v860 : string = $"{v859}"
        let v863 : unit = ()
        let v864 : (unit -> unit) = closure12(v814, v860)
        let v865 : unit = (fun () -> v864 (); v863) ()
        let v868 : string = $"{v833}"
        let v871 : unit = ()
        let v872 : (unit -> unit) = closure12(v814, v868)
        let v873 : unit = (fun () -> v872 (); v871) ()
        let v876 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v877 : string = "format!(\"{:#?}\", $0)"
        let v878 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v877 
        let v879 : string = "fable_library_rust::String_::fromString($0)"
        let v880 : string = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let _v876 = v880 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v881 : string = "format!(\"{:#?}\", $0)"
        let v882 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v881 
        let v883 : string = "fable_library_rust::String_::fromString($0)"
        let v884 : string = Fable.Core.RustInterop.emitRustExpr v882 v883 
        let _v876 = v884 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v885 : string = "format!(\"{:#?}\", $0)"
        let v886 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v885 
        let v887 : string = "fable_library_rust::String_::fromString($0)"
        let v888 : string = Fable.Core.RustInterop.emitRustExpr v886 v887 
        let _v876 = v888 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v889 : string = $"%A{v0}"
        let _v876 = v889 
        #endif
#if FABLE_COMPILER_PYTHON
        let v892 : string = $"%A{v0}"
        let _v876 = v892 
        #endif
#else
        let v895 : string = $"%A{v0}"
        let _v876 = v895 
        #endif
        let v898 : string = _v876 
        let v903 : string = $"{v898}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v814, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = " }"
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v814, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = v814.l0
        let v921 : (unit -> string) = closure45()
        let v922 : string = $"{v483} {v806} #{v812} %s{v921 ()} / {v920}"
        let v925 : char list = []
        let v926 : (char list -> (char [])) = List.toArray
        let v927 : (char []) = v926 v925
        let v930 : string = v922.TrimStart v927 
        let v948 : char list = []
        let v949 : char list = '/' :: v948 
        let v952 : char list = ' ' :: v949 
        let v955 : (char list -> (char [])) = List.toArray
        let v956 : (char []) = v955 v952
        let v959 : string = v930.TrimEnd v956 
        let v977 : (string -> unit) = closure14()
        let v978 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v979 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v979 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v980 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v980 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v981 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v981 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v977 v959
        let _v978 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v977 v959
        let _v978 = () 
        #endif
#else
        v977 v959
        let _v978 = () 
        #endif
        _v978 
        let v982 : (string -> unit) = v17.l0
        v982 v959
and closure52 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 3 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_3
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v737 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_3
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_3
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : string = "Warning"
                        US4_0(v730)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v741 : string =
            match v737 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v738) -> (* Some *)
                v738
        let v742 : (unit -> string) = v741.ToLower
        let v743 : string = v742 ()
        let v746 : string = v743.PadLeft (7, ' ')
        let v760 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v761 : string = "inline_colorization::color_yellow"
        let v762 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v761 
        let v763 : string = "&*$0"
        let v764 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v763 
        let v765 : string = "inline_colorization::color_reset"
        let v766 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v765 
        let v767 : string = "\"{v762}{v764}{v766}\""
        let v768 : string = @$"format!(" + v767 + ")"
        let v769 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v768 
        let v770 : string = "fable_library_rust::String_::fromString($0)"
        let v771 : string = Fable.Core.RustInterop.emitRustExpr v769 v770 
        let _v760 = v771 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v772 : string = "inline_colorization::color_yellow"
        let v773 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v772 
        let v774 : string = "&*$0"
        let v775 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v774 
        let v776 : string = "inline_colorization::color_reset"
        let v777 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v776 
        let v778 : string = "\"{v773}{v775}{v777}\""
        let v779 : string = @$"format!(" + v778 + ")"
        let v780 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v779 
        let v781 : string = "fable_library_rust::String_::fromString($0)"
        let v782 : string = Fable.Core.RustInterop.emitRustExpr v780 v781 
        let _v760 = v782 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v783 : string = "inline_colorization::color_yellow"
        let v784 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v783 
        let v785 : string = "&*$0"
        let v786 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v785 
        let v787 : string = "inline_colorization::color_reset"
        let v788 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v787 
        let v789 : string = "\"{v784}{v786}{v788}\""
        let v790 : string = @$"format!(" + v789 + ")"
        let v791 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v790 
        let v792 : string = "fable_library_rust::String_::fromString($0)"
        let v793 : string = Fable.Core.RustInterop.emitRustExpr v791 v792 
        let _v760 = v793 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v794 : string = "\u001b[93m"
        let v795 : string = method9()
        let v796 : string = v794 + v746 
        let v797 : string = v796 + v795 
        let _v760 = v797 
        #endif
#if FABLE_COMPILER_PYTHON
        let v798 : string = "\u001b[93m"
        let v799 : string = method9()
        let v800 : string = v798 + v746 
        let v801 : string = v800 + v799 
        let _v760 = v801 
        #endif
#else
        let v802 : string = "\u001b[93m"
        let v803 : string = method9()
        let v804 : string = v802 + v746 
        let v805 : string = v804 + v803 
        let _v760 = v805 
        #endif
        let v806 : string = _v760 
        let v812 : int64 = v85.l0
        let v813 : string = method10()
        let v814 : Mut4 = {l0 = v813} : Mut4
        let v815 : string = "{ "
        let v816 : string = $"{v815}"
        let v819 : unit = ()
        let v820 : (unit -> unit) = closure12(v814, v816)
        let v821 : unit = (fun () -> v820 (); v819) ()
        let v824 : string = "retry"
        let v825 : string = $"{v824}"
        let v828 : unit = ()
        let v829 : (unit -> unit) = closure12(v814, v825)
        let v830 : unit = (fun () -> v829 (); v828) ()
        let v833 : string = " = "
        let v834 : string = $"{v833}"
        let v837 : unit = ()
        let v838 : (unit -> unit) = closure12(v814, v834)
        let v839 : unit = (fun () -> v838 (); v837) ()
        let v842 : string = $"{8uy}"
        let v845 : unit = ()
        let v846 : (unit -> unit) = closure12(v814, v842)
        let v847 : unit = (fun () -> v846 (); v845) ()
        let v850 : string = "; "
        let v851 : string = $"{v850}"
        let v854 : unit = ()
        let v855 : (unit -> unit) = closure12(v814, v851)
        let v856 : unit = (fun () -> v855 (); v854) ()
        let v859 : string = "error"
        let v860 : string = $"{v859}"
        let v863 : unit = ()
        let v864 : (unit -> unit) = closure12(v814, v860)
        let v865 : unit = (fun () -> v864 (); v863) ()
        let v868 : string = $"{v833}"
        let v871 : unit = ()
        let v872 : (unit -> unit) = closure12(v814, v868)
        let v873 : unit = (fun () -> v872 (); v871) ()
        let v876 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v877 : string = "format!(\"{:#?}\", $0)"
        let v878 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v877 
        let v879 : string = "fable_library_rust::String_::fromString($0)"
        let v880 : string = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let _v876 = v880 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v881 : string = "format!(\"{:#?}\", $0)"
        let v882 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v881 
        let v883 : string = "fable_library_rust::String_::fromString($0)"
        let v884 : string = Fable.Core.RustInterop.emitRustExpr v882 v883 
        let _v876 = v884 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v885 : string = "format!(\"{:#?}\", $0)"
        let v886 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v885 
        let v887 : string = "fable_library_rust::String_::fromString($0)"
        let v888 : string = Fable.Core.RustInterop.emitRustExpr v886 v887 
        let _v876 = v888 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v889 : string = $"%A{v0}"
        let _v876 = v889 
        #endif
#if FABLE_COMPILER_PYTHON
        let v892 : string = $"%A{v0}"
        let _v876 = v892 
        #endif
#else
        let v895 : string = $"%A{v0}"
        let _v876 = v895 
        #endif
        let v898 : string = _v876 
        let v903 : string = $"{v898}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v814, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = " }"
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v814, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = v814.l0
        let v921 : (unit -> string) = closure45()
        let v922 : string = $"{v483} {v806} #{v812} %s{v921 ()} / {v920}"
        let v925 : char list = []
        let v926 : (char list -> (char [])) = List.toArray
        let v927 : (char []) = v926 v925
        let v930 : string = v922.TrimStart v927 
        let v948 : char list = []
        let v949 : char list = '/' :: v948 
        let v952 : char list = ' ' :: v949 
        let v955 : (char list -> (char [])) = List.toArray
        let v956 : (char []) = v955 v952
        let v959 : string = v930.TrimEnd v956 
        let v977 : (string -> unit) = closure14()
        let v978 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v979 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v979 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v980 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v980 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v981 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v981 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v977 v959
        let _v978 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v977 v959
        let _v978 = () 
        #endif
#else
        v977 v959
        let _v978 = () 
        #endif
        _v978 
        let v982 : (string -> unit) = v17.l0
        v982 v959
and closure53 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 3 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_3
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v737 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_3
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_3
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : string = "Warning"
                        US4_0(v730)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v741 : string =
            match v737 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v738) -> (* Some *)
                v738
        let v742 : (unit -> string) = v741.ToLower
        let v743 : string = v742 ()
        let v746 : string = v743.PadLeft (7, ' ')
        let v760 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v761 : string = "inline_colorization::color_yellow"
        let v762 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v761 
        let v763 : string = "&*$0"
        let v764 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v763 
        let v765 : string = "inline_colorization::color_reset"
        let v766 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v765 
        let v767 : string = "\"{v762}{v764}{v766}\""
        let v768 : string = @$"format!(" + v767 + ")"
        let v769 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v768 
        let v770 : string = "fable_library_rust::String_::fromString($0)"
        let v771 : string = Fable.Core.RustInterop.emitRustExpr v769 v770 
        let _v760 = v771 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v772 : string = "inline_colorization::color_yellow"
        let v773 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v772 
        let v774 : string = "&*$0"
        let v775 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v774 
        let v776 : string = "inline_colorization::color_reset"
        let v777 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v776 
        let v778 : string = "\"{v773}{v775}{v777}\""
        let v779 : string = @$"format!(" + v778 + ")"
        let v780 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v779 
        let v781 : string = "fable_library_rust::String_::fromString($0)"
        let v782 : string = Fable.Core.RustInterop.emitRustExpr v780 v781 
        let _v760 = v782 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v783 : string = "inline_colorization::color_yellow"
        let v784 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v783 
        let v785 : string = "&*$0"
        let v786 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v785 
        let v787 : string = "inline_colorization::color_reset"
        let v788 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v787 
        let v789 : string = "\"{v784}{v786}{v788}\""
        let v790 : string = @$"format!(" + v789 + ")"
        let v791 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v790 
        let v792 : string = "fable_library_rust::String_::fromString($0)"
        let v793 : string = Fable.Core.RustInterop.emitRustExpr v791 v792 
        let _v760 = v793 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v794 : string = "\u001b[93m"
        let v795 : string = method9()
        let v796 : string = v794 + v746 
        let v797 : string = v796 + v795 
        let _v760 = v797 
        #endif
#if FABLE_COMPILER_PYTHON
        let v798 : string = "\u001b[93m"
        let v799 : string = method9()
        let v800 : string = v798 + v746 
        let v801 : string = v800 + v799 
        let _v760 = v801 
        #endif
#else
        let v802 : string = "\u001b[93m"
        let v803 : string = method9()
        let v804 : string = v802 + v746 
        let v805 : string = v804 + v803 
        let _v760 = v805 
        #endif
        let v806 : string = _v760 
        let v812 : int64 = v85.l0
        let v813 : string = method10()
        let v814 : Mut4 = {l0 = v813} : Mut4
        let v815 : string = "{ "
        let v816 : string = $"{v815}"
        let v819 : unit = ()
        let v820 : (unit -> unit) = closure12(v814, v816)
        let v821 : unit = (fun () -> v820 (); v819) ()
        let v824 : string = "retry"
        let v825 : string = $"{v824}"
        let v828 : unit = ()
        let v829 : (unit -> unit) = closure12(v814, v825)
        let v830 : unit = (fun () -> v829 (); v828) ()
        let v833 : string = " = "
        let v834 : string = $"{v833}"
        let v837 : unit = ()
        let v838 : (unit -> unit) = closure12(v814, v834)
        let v839 : unit = (fun () -> v838 (); v837) ()
        let v842 : string = $"{9uy}"
        let v845 : unit = ()
        let v846 : (unit -> unit) = closure12(v814, v842)
        let v847 : unit = (fun () -> v846 (); v845) ()
        let v850 : string = "; "
        let v851 : string = $"{v850}"
        let v854 : unit = ()
        let v855 : (unit -> unit) = closure12(v814, v851)
        let v856 : unit = (fun () -> v855 (); v854) ()
        let v859 : string = "error"
        let v860 : string = $"{v859}"
        let v863 : unit = ()
        let v864 : (unit -> unit) = closure12(v814, v860)
        let v865 : unit = (fun () -> v864 (); v863) ()
        let v868 : string = $"{v833}"
        let v871 : unit = ()
        let v872 : (unit -> unit) = closure12(v814, v868)
        let v873 : unit = (fun () -> v872 (); v871) ()
        let v876 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v877 : string = "format!(\"{:#?}\", $0)"
        let v878 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v877 
        let v879 : string = "fable_library_rust::String_::fromString($0)"
        let v880 : string = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let _v876 = v880 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v881 : string = "format!(\"{:#?}\", $0)"
        let v882 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v881 
        let v883 : string = "fable_library_rust::String_::fromString($0)"
        let v884 : string = Fable.Core.RustInterop.emitRustExpr v882 v883 
        let _v876 = v884 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v885 : string = "format!(\"{:#?}\", $0)"
        let v886 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v885 
        let v887 : string = "fable_library_rust::String_::fromString($0)"
        let v888 : string = Fable.Core.RustInterop.emitRustExpr v886 v887 
        let _v876 = v888 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v889 : string = $"%A{v0}"
        let _v876 = v889 
        #endif
#if FABLE_COMPILER_PYTHON
        let v892 : string = $"%A{v0}"
        let _v876 = v892 
        #endif
#else
        let v895 : string = $"%A{v0}"
        let _v876 = v895 
        #endif
        let v898 : string = _v876 
        let v903 : string = $"{v898}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v814, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = " }"
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v814, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = v814.l0
        let v921 : (unit -> string) = closure45()
        let v922 : string = $"{v483} {v806} #{v812} %s{v921 ()} / {v920}"
        let v925 : char list = []
        let v926 : (char list -> (char [])) = List.toArray
        let v927 : (char []) = v926 v925
        let v930 : string = v922.TrimStart v927 
        let v948 : char list = []
        let v949 : char list = '/' :: v948 
        let v952 : char list = ' ' :: v949 
        let v955 : (char list -> (char [])) = List.toArray
        let v956 : (char []) = v955 v952
        let v959 : string = v930.TrimEnd v956 
        let v977 : (string -> unit) = closure14()
        let v978 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v979 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v979 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v980 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v980 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v981 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v981 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v977 v959
        let _v978 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v977 v959
        let _v978 = () 
        #endif
#else
        v977 v959
        let _v978 = () 
        #endif
        _v978 
        let v982 : (string -> unit) = v17.l0
        v982 v959
and closure54 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 3 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_3
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v737 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_3
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_3
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : string = "Warning"
                        US4_0(v730)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v741 : string =
            match v737 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v738) -> (* Some *)
                v738
        let v742 : (unit -> string) = v741.ToLower
        let v743 : string = v742 ()
        let v746 : string = v743.PadLeft (7, ' ')
        let v760 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v761 : string = "inline_colorization::color_yellow"
        let v762 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v761 
        let v763 : string = "&*$0"
        let v764 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v763 
        let v765 : string = "inline_colorization::color_reset"
        let v766 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v765 
        let v767 : string = "\"{v762}{v764}{v766}\""
        let v768 : string = @$"format!(" + v767 + ")"
        let v769 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v768 
        let v770 : string = "fable_library_rust::String_::fromString($0)"
        let v771 : string = Fable.Core.RustInterop.emitRustExpr v769 v770 
        let _v760 = v771 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v772 : string = "inline_colorization::color_yellow"
        let v773 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v772 
        let v774 : string = "&*$0"
        let v775 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v774 
        let v776 : string = "inline_colorization::color_reset"
        let v777 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v776 
        let v778 : string = "\"{v773}{v775}{v777}\""
        let v779 : string = @$"format!(" + v778 + ")"
        let v780 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v779 
        let v781 : string = "fable_library_rust::String_::fromString($0)"
        let v782 : string = Fable.Core.RustInterop.emitRustExpr v780 v781 
        let _v760 = v782 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v783 : string = "inline_colorization::color_yellow"
        let v784 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v783 
        let v785 : string = "&*$0"
        let v786 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v785 
        let v787 : string = "inline_colorization::color_reset"
        let v788 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v787 
        let v789 : string = "\"{v784}{v786}{v788}\""
        let v790 : string = @$"format!(" + v789 + ")"
        let v791 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v790 
        let v792 : string = "fable_library_rust::String_::fromString($0)"
        let v793 : string = Fable.Core.RustInterop.emitRustExpr v791 v792 
        let _v760 = v793 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v794 : string = "\u001b[93m"
        let v795 : string = method9()
        let v796 : string = v794 + v746 
        let v797 : string = v796 + v795 
        let _v760 = v797 
        #endif
#if FABLE_COMPILER_PYTHON
        let v798 : string = "\u001b[93m"
        let v799 : string = method9()
        let v800 : string = v798 + v746 
        let v801 : string = v800 + v799 
        let _v760 = v801 
        #endif
#else
        let v802 : string = "\u001b[93m"
        let v803 : string = method9()
        let v804 : string = v802 + v746 
        let v805 : string = v804 + v803 
        let _v760 = v805 
        #endif
        let v806 : string = _v760 
        let v812 : int64 = v85.l0
        let v813 : string = method10()
        let v814 : Mut4 = {l0 = v813} : Mut4
        let v815 : string = "{ "
        let v816 : string = $"{v815}"
        let v819 : unit = ()
        let v820 : (unit -> unit) = closure12(v814, v816)
        let v821 : unit = (fun () -> v820 (); v819) ()
        let v824 : string = "retry"
        let v825 : string = $"{v824}"
        let v828 : unit = ()
        let v829 : (unit -> unit) = closure12(v814, v825)
        let v830 : unit = (fun () -> v829 (); v828) ()
        let v833 : string = " = "
        let v834 : string = $"{v833}"
        let v837 : unit = ()
        let v838 : (unit -> unit) = closure12(v814, v834)
        let v839 : unit = (fun () -> v838 (); v837) ()
        let v842 : string = $"{10uy}"
        let v845 : unit = ()
        let v846 : (unit -> unit) = closure12(v814, v842)
        let v847 : unit = (fun () -> v846 (); v845) ()
        let v850 : string = "; "
        let v851 : string = $"{v850}"
        let v854 : unit = ()
        let v855 : (unit -> unit) = closure12(v814, v851)
        let v856 : unit = (fun () -> v855 (); v854) ()
        let v859 : string = "error"
        let v860 : string = $"{v859}"
        let v863 : unit = ()
        let v864 : (unit -> unit) = closure12(v814, v860)
        let v865 : unit = (fun () -> v864 (); v863) ()
        let v868 : string = $"{v833}"
        let v871 : unit = ()
        let v872 : (unit -> unit) = closure12(v814, v868)
        let v873 : unit = (fun () -> v872 (); v871) ()
        let v876 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v877 : string = "format!(\"{:#?}\", $0)"
        let v878 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v877 
        let v879 : string = "fable_library_rust::String_::fromString($0)"
        let v880 : string = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let _v876 = v880 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v881 : string = "format!(\"{:#?}\", $0)"
        let v882 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v881 
        let v883 : string = "fable_library_rust::String_::fromString($0)"
        let v884 : string = Fable.Core.RustInterop.emitRustExpr v882 v883 
        let _v876 = v884 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v885 : string = "format!(\"{:#?}\", $0)"
        let v886 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v885 
        let v887 : string = "fable_library_rust::String_::fromString($0)"
        let v888 : string = Fable.Core.RustInterop.emitRustExpr v886 v887 
        let _v876 = v888 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v889 : string = $"%A{v0}"
        let _v876 = v889 
        #endif
#if FABLE_COMPILER_PYTHON
        let v892 : string = $"%A{v0}"
        let _v876 = v892 
        #endif
#else
        let v895 : string = $"%A{v0}"
        let _v876 = v895 
        #endif
        let v898 : string = _v876 
        let v903 : string = $"{v898}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v814, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = " }"
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v814, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = v814.l0
        let v921 : (unit -> string) = closure45()
        let v922 : string = $"{v483} {v806} #{v812} %s{v921 ()} / {v920}"
        let v925 : char list = []
        let v926 : (char list -> (char [])) = List.toArray
        let v927 : (char []) = v926 v925
        let v930 : string = v922.TrimStart v927 
        let v948 : char list = []
        let v949 : char list = '/' :: v948 
        let v952 : char list = ' ' :: v949 
        let v955 : (char list -> (char [])) = List.toArray
        let v956 : (char []) = v955 v952
        let v959 : string = v930.TrimEnd v956 
        let v977 : (string -> unit) = closure14()
        let v978 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v979 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v979 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v980 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v980 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v981 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v981 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v977 v959
        let _v978 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v977 v959
        let _v978 = () 
        #endif
#else
        v977 v959
        let _v978 = () 
        #endif
        _v978 
        let v982 : (string -> unit) = v17.l0
        v982 v959
and closure55 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 3 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_3
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v737 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_3
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_3
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : string = "Warning"
                        US4_0(v730)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v741 : string =
            match v737 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v738) -> (* Some *)
                v738
        let v742 : (unit -> string) = v741.ToLower
        let v743 : string = v742 ()
        let v746 : string = v743.PadLeft (7, ' ')
        let v760 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v761 : string = "inline_colorization::color_yellow"
        let v762 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v761 
        let v763 : string = "&*$0"
        let v764 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v763 
        let v765 : string = "inline_colorization::color_reset"
        let v766 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v765 
        let v767 : string = "\"{v762}{v764}{v766}\""
        let v768 : string = @$"format!(" + v767 + ")"
        let v769 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v768 
        let v770 : string = "fable_library_rust::String_::fromString($0)"
        let v771 : string = Fable.Core.RustInterop.emitRustExpr v769 v770 
        let _v760 = v771 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v772 : string = "inline_colorization::color_yellow"
        let v773 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v772 
        let v774 : string = "&*$0"
        let v775 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v774 
        let v776 : string = "inline_colorization::color_reset"
        let v777 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v776 
        let v778 : string = "\"{v773}{v775}{v777}\""
        let v779 : string = @$"format!(" + v778 + ")"
        let v780 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v779 
        let v781 : string = "fable_library_rust::String_::fromString($0)"
        let v782 : string = Fable.Core.RustInterop.emitRustExpr v780 v781 
        let _v760 = v782 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v783 : string = "inline_colorization::color_yellow"
        let v784 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v783 
        let v785 : string = "&*$0"
        let v786 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v785 
        let v787 : string = "inline_colorization::color_reset"
        let v788 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v787 
        let v789 : string = "\"{v784}{v786}{v788}\""
        let v790 : string = @$"format!(" + v789 + ")"
        let v791 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v790 
        let v792 : string = "fable_library_rust::String_::fromString($0)"
        let v793 : string = Fable.Core.RustInterop.emitRustExpr v791 v792 
        let _v760 = v793 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v794 : string = "\u001b[93m"
        let v795 : string = method9()
        let v796 : string = v794 + v746 
        let v797 : string = v796 + v795 
        let _v760 = v797 
        #endif
#if FABLE_COMPILER_PYTHON
        let v798 : string = "\u001b[93m"
        let v799 : string = method9()
        let v800 : string = v798 + v746 
        let v801 : string = v800 + v799 
        let _v760 = v801 
        #endif
#else
        let v802 : string = "\u001b[93m"
        let v803 : string = method9()
        let v804 : string = v802 + v746 
        let v805 : string = v804 + v803 
        let _v760 = v805 
        #endif
        let v806 : string = _v760 
        let v812 : int64 = v85.l0
        let v813 : string = method10()
        let v814 : Mut4 = {l0 = v813} : Mut4
        let v815 : string = "{ "
        let v816 : string = $"{v815}"
        let v819 : unit = ()
        let v820 : (unit -> unit) = closure12(v814, v816)
        let v821 : unit = (fun () -> v820 (); v819) ()
        let v824 : string = "retry"
        let v825 : string = $"{v824}"
        let v828 : unit = ()
        let v829 : (unit -> unit) = closure12(v814, v825)
        let v830 : unit = (fun () -> v829 (); v828) ()
        let v833 : string = " = "
        let v834 : string = $"{v833}"
        let v837 : unit = ()
        let v838 : (unit -> unit) = closure12(v814, v834)
        let v839 : unit = (fun () -> v838 (); v837) ()
        let v842 : string = $"{11uy}"
        let v845 : unit = ()
        let v846 : (unit -> unit) = closure12(v814, v842)
        let v847 : unit = (fun () -> v846 (); v845) ()
        let v850 : string = "; "
        let v851 : string = $"{v850}"
        let v854 : unit = ()
        let v855 : (unit -> unit) = closure12(v814, v851)
        let v856 : unit = (fun () -> v855 (); v854) ()
        let v859 : string = "error"
        let v860 : string = $"{v859}"
        let v863 : unit = ()
        let v864 : (unit -> unit) = closure12(v814, v860)
        let v865 : unit = (fun () -> v864 (); v863) ()
        let v868 : string = $"{v833}"
        let v871 : unit = ()
        let v872 : (unit -> unit) = closure12(v814, v868)
        let v873 : unit = (fun () -> v872 (); v871) ()
        let v876 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v877 : string = "format!(\"{:#?}\", $0)"
        let v878 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v877 
        let v879 : string = "fable_library_rust::String_::fromString($0)"
        let v880 : string = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let _v876 = v880 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v881 : string = "format!(\"{:#?}\", $0)"
        let v882 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v881 
        let v883 : string = "fable_library_rust::String_::fromString($0)"
        let v884 : string = Fable.Core.RustInterop.emitRustExpr v882 v883 
        let _v876 = v884 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v885 : string = "format!(\"{:#?}\", $0)"
        let v886 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v885 
        let v887 : string = "fable_library_rust::String_::fromString($0)"
        let v888 : string = Fable.Core.RustInterop.emitRustExpr v886 v887 
        let _v876 = v888 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v889 : string = $"%A{v0}"
        let _v876 = v889 
        #endif
#if FABLE_COMPILER_PYTHON
        let v892 : string = $"%A{v0}"
        let _v876 = v892 
        #endif
#else
        let v895 : string = $"%A{v0}"
        let _v876 = v895 
        #endif
        let v898 : string = _v876 
        let v903 : string = $"{v898}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v814, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = " }"
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v814, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = v814.l0
        let v921 : (unit -> string) = closure45()
        let v922 : string = $"{v483} {v806} #{v812} %s{v921 ()} / {v920}"
        let v925 : char list = []
        let v926 : (char list -> (char [])) = List.toArray
        let v927 : (char []) = v926 v925
        let v930 : string = v922.TrimStart v927 
        let v948 : char list = []
        let v949 : char list = '/' :: v948 
        let v952 : char list = ' ' :: v949 
        let v955 : (char list -> (char [])) = List.toArray
        let v956 : (char []) = v955 v952
        let v959 : string = v930.TrimEnd v956 
        let v977 : (string -> unit) = closure14()
        let v978 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v979 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v979 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v980 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v980 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v981 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v981 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v977 v959
        let _v978 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v977 v959
        let _v978 = () 
        #endif
#else
        v977 v959
        let _v978 = () 
        #endif
        _v978 
        let v982 : (string -> unit) = v17.l0
        v982 v959
and closure56 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 3 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_3
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v737 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_3
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_3
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : string = "Warning"
                        US4_0(v730)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v741 : string =
            match v737 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v738) -> (* Some *)
                v738
        let v742 : (unit -> string) = v741.ToLower
        let v743 : string = v742 ()
        let v746 : string = v743.PadLeft (7, ' ')
        let v760 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v761 : string = "inline_colorization::color_yellow"
        let v762 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v761 
        let v763 : string = "&*$0"
        let v764 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v763 
        let v765 : string = "inline_colorization::color_reset"
        let v766 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v765 
        let v767 : string = "\"{v762}{v764}{v766}\""
        let v768 : string = @$"format!(" + v767 + ")"
        let v769 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v768 
        let v770 : string = "fable_library_rust::String_::fromString($0)"
        let v771 : string = Fable.Core.RustInterop.emitRustExpr v769 v770 
        let _v760 = v771 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v772 : string = "inline_colorization::color_yellow"
        let v773 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v772 
        let v774 : string = "&*$0"
        let v775 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v774 
        let v776 : string = "inline_colorization::color_reset"
        let v777 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v776 
        let v778 : string = "\"{v773}{v775}{v777}\""
        let v779 : string = @$"format!(" + v778 + ")"
        let v780 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v779 
        let v781 : string = "fable_library_rust::String_::fromString($0)"
        let v782 : string = Fable.Core.RustInterop.emitRustExpr v780 v781 
        let _v760 = v782 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v783 : string = "inline_colorization::color_yellow"
        let v784 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v783 
        let v785 : string = "&*$0"
        let v786 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v785 
        let v787 : string = "inline_colorization::color_reset"
        let v788 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v787 
        let v789 : string = "\"{v784}{v786}{v788}\""
        let v790 : string = @$"format!(" + v789 + ")"
        let v791 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v790 
        let v792 : string = "fable_library_rust::String_::fromString($0)"
        let v793 : string = Fable.Core.RustInterop.emitRustExpr v791 v792 
        let _v760 = v793 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v794 : string = "\u001b[93m"
        let v795 : string = method9()
        let v796 : string = v794 + v746 
        let v797 : string = v796 + v795 
        let _v760 = v797 
        #endif
#if FABLE_COMPILER_PYTHON
        let v798 : string = "\u001b[93m"
        let v799 : string = method9()
        let v800 : string = v798 + v746 
        let v801 : string = v800 + v799 
        let _v760 = v801 
        #endif
#else
        let v802 : string = "\u001b[93m"
        let v803 : string = method9()
        let v804 : string = v802 + v746 
        let v805 : string = v804 + v803 
        let _v760 = v805 
        #endif
        let v806 : string = _v760 
        let v812 : int64 = v85.l0
        let v813 : string = method10()
        let v814 : Mut4 = {l0 = v813} : Mut4
        let v815 : string = "{ "
        let v816 : string = $"{v815}"
        let v819 : unit = ()
        let v820 : (unit -> unit) = closure12(v814, v816)
        let v821 : unit = (fun () -> v820 (); v819) ()
        let v824 : string = "retry"
        let v825 : string = $"{v824}"
        let v828 : unit = ()
        let v829 : (unit -> unit) = closure12(v814, v825)
        let v830 : unit = (fun () -> v829 (); v828) ()
        let v833 : string = " = "
        let v834 : string = $"{v833}"
        let v837 : unit = ()
        let v838 : (unit -> unit) = closure12(v814, v834)
        let v839 : unit = (fun () -> v838 (); v837) ()
        let v842 : string = $"{12uy}"
        let v845 : unit = ()
        let v846 : (unit -> unit) = closure12(v814, v842)
        let v847 : unit = (fun () -> v846 (); v845) ()
        let v850 : string = "; "
        let v851 : string = $"{v850}"
        let v854 : unit = ()
        let v855 : (unit -> unit) = closure12(v814, v851)
        let v856 : unit = (fun () -> v855 (); v854) ()
        let v859 : string = "error"
        let v860 : string = $"{v859}"
        let v863 : unit = ()
        let v864 : (unit -> unit) = closure12(v814, v860)
        let v865 : unit = (fun () -> v864 (); v863) ()
        let v868 : string = $"{v833}"
        let v871 : unit = ()
        let v872 : (unit -> unit) = closure12(v814, v868)
        let v873 : unit = (fun () -> v872 (); v871) ()
        let v876 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v877 : string = "format!(\"{:#?}\", $0)"
        let v878 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v877 
        let v879 : string = "fable_library_rust::String_::fromString($0)"
        let v880 : string = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let _v876 = v880 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v881 : string = "format!(\"{:#?}\", $0)"
        let v882 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v881 
        let v883 : string = "fable_library_rust::String_::fromString($0)"
        let v884 : string = Fable.Core.RustInterop.emitRustExpr v882 v883 
        let _v876 = v884 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v885 : string = "format!(\"{:#?}\", $0)"
        let v886 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v885 
        let v887 : string = "fable_library_rust::String_::fromString($0)"
        let v888 : string = Fable.Core.RustInterop.emitRustExpr v886 v887 
        let _v876 = v888 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v889 : string = $"%A{v0}"
        let _v876 = v889 
        #endif
#if FABLE_COMPILER_PYTHON
        let v892 : string = $"%A{v0}"
        let _v876 = v892 
        #endif
#else
        let v895 : string = $"%A{v0}"
        let _v876 = v895 
        #endif
        let v898 : string = _v876 
        let v903 : string = $"{v898}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v814, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = " }"
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v814, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = v814.l0
        let v921 : (unit -> string) = closure45()
        let v922 : string = $"{v483} {v806} #{v812} %s{v921 ()} / {v920}"
        let v925 : char list = []
        let v926 : (char list -> (char [])) = List.toArray
        let v927 : (char []) = v926 v925
        let v930 : string = v922.TrimStart v927 
        let v948 : char list = []
        let v949 : char list = '/' :: v948 
        let v952 : char list = ' ' :: v949 
        let v955 : (char list -> (char [])) = List.toArray
        let v956 : (char []) = v955 v952
        let v959 : string = v930.TrimEnd v956 
        let v977 : (string -> unit) = closure14()
        let v978 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v979 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v979 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v980 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v980 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v981 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v981 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v977 v959
        let _v978 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v977 v959
        let _v978 = () 
        #endif
#else
        v977 v959
        let _v978 = () 
        #endif
        _v978 
        let v982 : (string -> unit) = v17.l0
        v982 v959
and closure57 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 3 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_3
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v737 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_3
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_3
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : string = "Warning"
                        US4_0(v730)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v741 : string =
            match v737 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v738) -> (* Some *)
                v738
        let v742 : (unit -> string) = v741.ToLower
        let v743 : string = v742 ()
        let v746 : string = v743.PadLeft (7, ' ')
        let v760 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v761 : string = "inline_colorization::color_yellow"
        let v762 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v761 
        let v763 : string = "&*$0"
        let v764 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v763 
        let v765 : string = "inline_colorization::color_reset"
        let v766 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v765 
        let v767 : string = "\"{v762}{v764}{v766}\""
        let v768 : string = @$"format!(" + v767 + ")"
        let v769 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v768 
        let v770 : string = "fable_library_rust::String_::fromString($0)"
        let v771 : string = Fable.Core.RustInterop.emitRustExpr v769 v770 
        let _v760 = v771 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v772 : string = "inline_colorization::color_yellow"
        let v773 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v772 
        let v774 : string = "&*$0"
        let v775 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v774 
        let v776 : string = "inline_colorization::color_reset"
        let v777 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v776 
        let v778 : string = "\"{v773}{v775}{v777}\""
        let v779 : string = @$"format!(" + v778 + ")"
        let v780 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v779 
        let v781 : string = "fable_library_rust::String_::fromString($0)"
        let v782 : string = Fable.Core.RustInterop.emitRustExpr v780 v781 
        let _v760 = v782 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v783 : string = "inline_colorization::color_yellow"
        let v784 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v783 
        let v785 : string = "&*$0"
        let v786 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v785 
        let v787 : string = "inline_colorization::color_reset"
        let v788 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v787 
        let v789 : string = "\"{v784}{v786}{v788}\""
        let v790 : string = @$"format!(" + v789 + ")"
        let v791 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v790 
        let v792 : string = "fable_library_rust::String_::fromString($0)"
        let v793 : string = Fable.Core.RustInterop.emitRustExpr v791 v792 
        let _v760 = v793 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v794 : string = "\u001b[93m"
        let v795 : string = method9()
        let v796 : string = v794 + v746 
        let v797 : string = v796 + v795 
        let _v760 = v797 
        #endif
#if FABLE_COMPILER_PYTHON
        let v798 : string = "\u001b[93m"
        let v799 : string = method9()
        let v800 : string = v798 + v746 
        let v801 : string = v800 + v799 
        let _v760 = v801 
        #endif
#else
        let v802 : string = "\u001b[93m"
        let v803 : string = method9()
        let v804 : string = v802 + v746 
        let v805 : string = v804 + v803 
        let _v760 = v805 
        #endif
        let v806 : string = _v760 
        let v812 : int64 = v85.l0
        let v813 : string = method10()
        let v814 : Mut4 = {l0 = v813} : Mut4
        let v815 : string = "{ "
        let v816 : string = $"{v815}"
        let v819 : unit = ()
        let v820 : (unit -> unit) = closure12(v814, v816)
        let v821 : unit = (fun () -> v820 (); v819) ()
        let v824 : string = "retry"
        let v825 : string = $"{v824}"
        let v828 : unit = ()
        let v829 : (unit -> unit) = closure12(v814, v825)
        let v830 : unit = (fun () -> v829 (); v828) ()
        let v833 : string = " = "
        let v834 : string = $"{v833}"
        let v837 : unit = ()
        let v838 : (unit -> unit) = closure12(v814, v834)
        let v839 : unit = (fun () -> v838 (); v837) ()
        let v842 : string = $"{13uy}"
        let v845 : unit = ()
        let v846 : (unit -> unit) = closure12(v814, v842)
        let v847 : unit = (fun () -> v846 (); v845) ()
        let v850 : string = "; "
        let v851 : string = $"{v850}"
        let v854 : unit = ()
        let v855 : (unit -> unit) = closure12(v814, v851)
        let v856 : unit = (fun () -> v855 (); v854) ()
        let v859 : string = "error"
        let v860 : string = $"{v859}"
        let v863 : unit = ()
        let v864 : (unit -> unit) = closure12(v814, v860)
        let v865 : unit = (fun () -> v864 (); v863) ()
        let v868 : string = $"{v833}"
        let v871 : unit = ()
        let v872 : (unit -> unit) = closure12(v814, v868)
        let v873 : unit = (fun () -> v872 (); v871) ()
        let v876 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v877 : string = "format!(\"{:#?}\", $0)"
        let v878 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v877 
        let v879 : string = "fable_library_rust::String_::fromString($0)"
        let v880 : string = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let _v876 = v880 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v881 : string = "format!(\"{:#?}\", $0)"
        let v882 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v881 
        let v883 : string = "fable_library_rust::String_::fromString($0)"
        let v884 : string = Fable.Core.RustInterop.emitRustExpr v882 v883 
        let _v876 = v884 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v885 : string = "format!(\"{:#?}\", $0)"
        let v886 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v885 
        let v887 : string = "fable_library_rust::String_::fromString($0)"
        let v888 : string = Fable.Core.RustInterop.emitRustExpr v886 v887 
        let _v876 = v888 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v889 : string = $"%A{v0}"
        let _v876 = v889 
        #endif
#if FABLE_COMPILER_PYTHON
        let v892 : string = $"%A{v0}"
        let _v876 = v892 
        #endif
#else
        let v895 : string = $"%A{v0}"
        let _v876 = v895 
        #endif
        let v898 : string = _v876 
        let v903 : string = $"{v898}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v814, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = " }"
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v814, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = v814.l0
        let v921 : (unit -> string) = closure45()
        let v922 : string = $"{v483} {v806} #{v812} %s{v921 ()} / {v920}"
        let v925 : char list = []
        let v926 : (char list -> (char [])) = List.toArray
        let v927 : (char []) = v926 v925
        let v930 : string = v922.TrimStart v927 
        let v948 : char list = []
        let v949 : char list = '/' :: v948 
        let v952 : char list = ' ' :: v949 
        let v955 : (char list -> (char [])) = List.toArray
        let v956 : (char []) = v955 v952
        let v959 : string = v930.TrimEnd v956 
        let v977 : (string -> unit) = closure14()
        let v978 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v979 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v979 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v980 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v980 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v981 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v981 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v977 v959
        let _v978 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v977 v959
        let _v978 = () 
        #endif
#else
        v977 v959
        let _v978 = () 
        #endif
        _v978 
        let v982 : (string -> unit) = v17.l0
        v982 v959
and closure58 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 3 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_3
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v737 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_3
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_3
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : string = "Warning"
                        US4_0(v730)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v741 : string =
            match v737 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v738) -> (* Some *)
                v738
        let v742 : (unit -> string) = v741.ToLower
        let v743 : string = v742 ()
        let v746 : string = v743.PadLeft (7, ' ')
        let v760 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v761 : string = "inline_colorization::color_yellow"
        let v762 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v761 
        let v763 : string = "&*$0"
        let v764 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v763 
        let v765 : string = "inline_colorization::color_reset"
        let v766 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v765 
        let v767 : string = "\"{v762}{v764}{v766}\""
        let v768 : string = @$"format!(" + v767 + ")"
        let v769 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v768 
        let v770 : string = "fable_library_rust::String_::fromString($0)"
        let v771 : string = Fable.Core.RustInterop.emitRustExpr v769 v770 
        let _v760 = v771 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v772 : string = "inline_colorization::color_yellow"
        let v773 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v772 
        let v774 : string = "&*$0"
        let v775 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v774 
        let v776 : string = "inline_colorization::color_reset"
        let v777 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v776 
        let v778 : string = "\"{v773}{v775}{v777}\""
        let v779 : string = @$"format!(" + v778 + ")"
        let v780 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v779 
        let v781 : string = "fable_library_rust::String_::fromString($0)"
        let v782 : string = Fable.Core.RustInterop.emitRustExpr v780 v781 
        let _v760 = v782 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v783 : string = "inline_colorization::color_yellow"
        let v784 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v783 
        let v785 : string = "&*$0"
        let v786 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v785 
        let v787 : string = "inline_colorization::color_reset"
        let v788 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v787 
        let v789 : string = "\"{v784}{v786}{v788}\""
        let v790 : string = @$"format!(" + v789 + ")"
        let v791 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v790 
        let v792 : string = "fable_library_rust::String_::fromString($0)"
        let v793 : string = Fable.Core.RustInterop.emitRustExpr v791 v792 
        let _v760 = v793 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v794 : string = "\u001b[93m"
        let v795 : string = method9()
        let v796 : string = v794 + v746 
        let v797 : string = v796 + v795 
        let _v760 = v797 
        #endif
#if FABLE_COMPILER_PYTHON
        let v798 : string = "\u001b[93m"
        let v799 : string = method9()
        let v800 : string = v798 + v746 
        let v801 : string = v800 + v799 
        let _v760 = v801 
        #endif
#else
        let v802 : string = "\u001b[93m"
        let v803 : string = method9()
        let v804 : string = v802 + v746 
        let v805 : string = v804 + v803 
        let _v760 = v805 
        #endif
        let v806 : string = _v760 
        let v812 : int64 = v85.l0
        let v813 : string = method10()
        let v814 : Mut4 = {l0 = v813} : Mut4
        let v815 : string = "{ "
        let v816 : string = $"{v815}"
        let v819 : unit = ()
        let v820 : (unit -> unit) = closure12(v814, v816)
        let v821 : unit = (fun () -> v820 (); v819) ()
        let v824 : string = "retry"
        let v825 : string = $"{v824}"
        let v828 : unit = ()
        let v829 : (unit -> unit) = closure12(v814, v825)
        let v830 : unit = (fun () -> v829 (); v828) ()
        let v833 : string = " = "
        let v834 : string = $"{v833}"
        let v837 : unit = ()
        let v838 : (unit -> unit) = closure12(v814, v834)
        let v839 : unit = (fun () -> v838 (); v837) ()
        let v842 : string = $"{14uy}"
        let v845 : unit = ()
        let v846 : (unit -> unit) = closure12(v814, v842)
        let v847 : unit = (fun () -> v846 (); v845) ()
        let v850 : string = "; "
        let v851 : string = $"{v850}"
        let v854 : unit = ()
        let v855 : (unit -> unit) = closure12(v814, v851)
        let v856 : unit = (fun () -> v855 (); v854) ()
        let v859 : string = "error"
        let v860 : string = $"{v859}"
        let v863 : unit = ()
        let v864 : (unit -> unit) = closure12(v814, v860)
        let v865 : unit = (fun () -> v864 (); v863) ()
        let v868 : string = $"{v833}"
        let v871 : unit = ()
        let v872 : (unit -> unit) = closure12(v814, v868)
        let v873 : unit = (fun () -> v872 (); v871) ()
        let v876 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v877 : string = "format!(\"{:#?}\", $0)"
        let v878 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v877 
        let v879 : string = "fable_library_rust::String_::fromString($0)"
        let v880 : string = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let _v876 = v880 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v881 : string = "format!(\"{:#?}\", $0)"
        let v882 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v881 
        let v883 : string = "fable_library_rust::String_::fromString($0)"
        let v884 : string = Fable.Core.RustInterop.emitRustExpr v882 v883 
        let _v876 = v884 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v885 : string = "format!(\"{:#?}\", $0)"
        let v886 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v885 
        let v887 : string = "fable_library_rust::String_::fromString($0)"
        let v888 : string = Fable.Core.RustInterop.emitRustExpr v886 v887 
        let _v876 = v888 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v889 : string = $"%A{v0}"
        let _v876 = v889 
        #endif
#if FABLE_COMPILER_PYTHON
        let v892 : string = $"%A{v0}"
        let _v876 = v892 
        #endif
#else
        let v895 : string = $"%A{v0}"
        let _v876 = v895 
        #endif
        let v898 : string = _v876 
        let v903 : string = $"{v898}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v814, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = " }"
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v814, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = v814.l0
        let v921 : (unit -> string) = closure45()
        let v922 : string = $"{v483} {v806} #{v812} %s{v921 ()} / {v920}"
        let v925 : char list = []
        let v926 : (char list -> (char [])) = List.toArray
        let v927 : (char []) = v926 v925
        let v930 : string = v922.TrimStart v927 
        let v948 : char list = []
        let v949 : char list = '/' :: v948 
        let v952 : char list = ' ' :: v949 
        let v955 : (char list -> (char [])) = List.toArray
        let v956 : (char []) = v955 v952
        let v959 : string = v930.TrimEnd v956 
        let v977 : (string -> unit) = closure14()
        let v978 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v979 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v979 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v980 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v980 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v981 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v981 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v977 v959
        let _v978 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v977 v959
        let _v978 = () 
        #endif
#else
        v977 v959
        let _v978 = () 
        #endif
        _v978 
        let v982 : (string -> unit) = v17.l0
        v982 v959
and closure59 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 3 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_3
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v737 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_3
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_3
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : string = "Warning"
                        US4_0(v730)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v741 : string =
            match v737 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v738) -> (* Some *)
                v738
        let v742 : (unit -> string) = v741.ToLower
        let v743 : string = v742 ()
        let v746 : string = v743.PadLeft (7, ' ')
        let v760 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v761 : string = "inline_colorization::color_yellow"
        let v762 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v761 
        let v763 : string = "&*$0"
        let v764 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v763 
        let v765 : string = "inline_colorization::color_reset"
        let v766 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v765 
        let v767 : string = "\"{v762}{v764}{v766}\""
        let v768 : string = @$"format!(" + v767 + ")"
        let v769 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v768 
        let v770 : string = "fable_library_rust::String_::fromString($0)"
        let v771 : string = Fable.Core.RustInterop.emitRustExpr v769 v770 
        let _v760 = v771 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v772 : string = "inline_colorization::color_yellow"
        let v773 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v772 
        let v774 : string = "&*$0"
        let v775 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v774 
        let v776 : string = "inline_colorization::color_reset"
        let v777 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v776 
        let v778 : string = "\"{v773}{v775}{v777}\""
        let v779 : string = @$"format!(" + v778 + ")"
        let v780 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v779 
        let v781 : string = "fable_library_rust::String_::fromString($0)"
        let v782 : string = Fable.Core.RustInterop.emitRustExpr v780 v781 
        let _v760 = v782 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v783 : string = "inline_colorization::color_yellow"
        let v784 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v783 
        let v785 : string = "&*$0"
        let v786 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v785 
        let v787 : string = "inline_colorization::color_reset"
        let v788 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v787 
        let v789 : string = "\"{v784}{v786}{v788}\""
        let v790 : string = @$"format!(" + v789 + ")"
        let v791 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v790 
        let v792 : string = "fable_library_rust::String_::fromString($0)"
        let v793 : string = Fable.Core.RustInterop.emitRustExpr v791 v792 
        let _v760 = v793 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v794 : string = "\u001b[93m"
        let v795 : string = method9()
        let v796 : string = v794 + v746 
        let v797 : string = v796 + v795 
        let _v760 = v797 
        #endif
#if FABLE_COMPILER_PYTHON
        let v798 : string = "\u001b[93m"
        let v799 : string = method9()
        let v800 : string = v798 + v746 
        let v801 : string = v800 + v799 
        let _v760 = v801 
        #endif
#else
        let v802 : string = "\u001b[93m"
        let v803 : string = method9()
        let v804 : string = v802 + v746 
        let v805 : string = v804 + v803 
        let _v760 = v805 
        #endif
        let v806 : string = _v760 
        let v812 : int64 = v85.l0
        let v813 : string = method10()
        let v814 : Mut4 = {l0 = v813} : Mut4
        let v815 : string = "{ "
        let v816 : string = $"{v815}"
        let v819 : unit = ()
        let v820 : (unit -> unit) = closure12(v814, v816)
        let v821 : unit = (fun () -> v820 (); v819) ()
        let v824 : string = "retry"
        let v825 : string = $"{v824}"
        let v828 : unit = ()
        let v829 : (unit -> unit) = closure12(v814, v825)
        let v830 : unit = (fun () -> v829 (); v828) ()
        let v833 : string = " = "
        let v834 : string = $"{v833}"
        let v837 : unit = ()
        let v838 : (unit -> unit) = closure12(v814, v834)
        let v839 : unit = (fun () -> v838 (); v837) ()
        let v842 : string = $"{15uy}"
        let v845 : unit = ()
        let v846 : (unit -> unit) = closure12(v814, v842)
        let v847 : unit = (fun () -> v846 (); v845) ()
        let v850 : string = "; "
        let v851 : string = $"{v850}"
        let v854 : unit = ()
        let v855 : (unit -> unit) = closure12(v814, v851)
        let v856 : unit = (fun () -> v855 (); v854) ()
        let v859 : string = "error"
        let v860 : string = $"{v859}"
        let v863 : unit = ()
        let v864 : (unit -> unit) = closure12(v814, v860)
        let v865 : unit = (fun () -> v864 (); v863) ()
        let v868 : string = $"{v833}"
        let v871 : unit = ()
        let v872 : (unit -> unit) = closure12(v814, v868)
        let v873 : unit = (fun () -> v872 (); v871) ()
        let v876 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v877 : string = "format!(\"{:#?}\", $0)"
        let v878 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v877 
        let v879 : string = "fable_library_rust::String_::fromString($0)"
        let v880 : string = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let _v876 = v880 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v881 : string = "format!(\"{:#?}\", $0)"
        let v882 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v881 
        let v883 : string = "fable_library_rust::String_::fromString($0)"
        let v884 : string = Fable.Core.RustInterop.emitRustExpr v882 v883 
        let _v876 = v884 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v885 : string = "format!(\"{:#?}\", $0)"
        let v886 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v885 
        let v887 : string = "fable_library_rust::String_::fromString($0)"
        let v888 : string = Fable.Core.RustInterop.emitRustExpr v886 v887 
        let _v876 = v888 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v889 : string = $"%A{v0}"
        let _v876 = v889 
        #endif
#if FABLE_COMPILER_PYTHON
        let v892 : string = $"%A{v0}"
        let _v876 = v892 
        #endif
#else
        let v895 : string = $"%A{v0}"
        let _v876 = v895 
        #endif
        let v898 : string = _v876 
        let v903 : string = $"{v898}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v814, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = " }"
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v814, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = v814.l0
        let v921 : (unit -> string) = closure45()
        let v922 : string = $"{v483} {v806} #{v812} %s{v921 ()} / {v920}"
        let v925 : char list = []
        let v926 : (char list -> (char [])) = List.toArray
        let v927 : (char []) = v926 v925
        let v930 : string = v922.TrimStart v927 
        let v948 : char list = []
        let v949 : char list = '/' :: v948 
        let v952 : char list = ' ' :: v949 
        let v955 : (char list -> (char [])) = List.toArray
        let v956 : (char []) = v955 v952
        let v959 : string = v930.TrimEnd v956 
        let v977 : (string -> unit) = closure14()
        let v978 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v979 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v979 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v980 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v980 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v981 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v981 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v977 v959
        let _v978 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v977 v959
        let _v978 = () 
        #endif
#else
        v977 v959
        let _v978 = () 
        #endif
        _v978 
        let v982 : (string -> unit) = v17.l0
        v982 v959
and closure60 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 3 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_3
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v737 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_3
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_3
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : string = "Warning"
                        US4_0(v730)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v741 : string =
            match v737 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v738) -> (* Some *)
                v738
        let v742 : (unit -> string) = v741.ToLower
        let v743 : string = v742 ()
        let v746 : string = v743.PadLeft (7, ' ')
        let v760 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v761 : string = "inline_colorization::color_yellow"
        let v762 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v761 
        let v763 : string = "&*$0"
        let v764 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v763 
        let v765 : string = "inline_colorization::color_reset"
        let v766 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v765 
        let v767 : string = "\"{v762}{v764}{v766}\""
        let v768 : string = @$"format!(" + v767 + ")"
        let v769 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v768 
        let v770 : string = "fable_library_rust::String_::fromString($0)"
        let v771 : string = Fable.Core.RustInterop.emitRustExpr v769 v770 
        let _v760 = v771 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v772 : string = "inline_colorization::color_yellow"
        let v773 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v772 
        let v774 : string = "&*$0"
        let v775 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v774 
        let v776 : string = "inline_colorization::color_reset"
        let v777 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v776 
        let v778 : string = "\"{v773}{v775}{v777}\""
        let v779 : string = @$"format!(" + v778 + ")"
        let v780 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v779 
        let v781 : string = "fable_library_rust::String_::fromString($0)"
        let v782 : string = Fable.Core.RustInterop.emitRustExpr v780 v781 
        let _v760 = v782 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v783 : string = "inline_colorization::color_yellow"
        let v784 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v783 
        let v785 : string = "&*$0"
        let v786 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v785 
        let v787 : string = "inline_colorization::color_reset"
        let v788 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v787 
        let v789 : string = "\"{v784}{v786}{v788}\""
        let v790 : string = @$"format!(" + v789 + ")"
        let v791 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v790 
        let v792 : string = "fable_library_rust::String_::fromString($0)"
        let v793 : string = Fable.Core.RustInterop.emitRustExpr v791 v792 
        let _v760 = v793 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v794 : string = "\u001b[93m"
        let v795 : string = method9()
        let v796 : string = v794 + v746 
        let v797 : string = v796 + v795 
        let _v760 = v797 
        #endif
#if FABLE_COMPILER_PYTHON
        let v798 : string = "\u001b[93m"
        let v799 : string = method9()
        let v800 : string = v798 + v746 
        let v801 : string = v800 + v799 
        let _v760 = v801 
        #endif
#else
        let v802 : string = "\u001b[93m"
        let v803 : string = method9()
        let v804 : string = v802 + v746 
        let v805 : string = v804 + v803 
        let _v760 = v805 
        #endif
        let v806 : string = _v760 
        let v812 : int64 = v85.l0
        let v813 : string = method10()
        let v814 : Mut4 = {l0 = v813} : Mut4
        let v815 : string = "{ "
        let v816 : string = $"{v815}"
        let v819 : unit = ()
        let v820 : (unit -> unit) = closure12(v814, v816)
        let v821 : unit = (fun () -> v820 (); v819) ()
        let v824 : string = "retry"
        let v825 : string = $"{v824}"
        let v828 : unit = ()
        let v829 : (unit -> unit) = closure12(v814, v825)
        let v830 : unit = (fun () -> v829 (); v828) ()
        let v833 : string = " = "
        let v834 : string = $"{v833}"
        let v837 : unit = ()
        let v838 : (unit -> unit) = closure12(v814, v834)
        let v839 : unit = (fun () -> v838 (); v837) ()
        let v842 : string = $"{16uy}"
        let v845 : unit = ()
        let v846 : (unit -> unit) = closure12(v814, v842)
        let v847 : unit = (fun () -> v846 (); v845) ()
        let v850 : string = "; "
        let v851 : string = $"{v850}"
        let v854 : unit = ()
        let v855 : (unit -> unit) = closure12(v814, v851)
        let v856 : unit = (fun () -> v855 (); v854) ()
        let v859 : string = "error"
        let v860 : string = $"{v859}"
        let v863 : unit = ()
        let v864 : (unit -> unit) = closure12(v814, v860)
        let v865 : unit = (fun () -> v864 (); v863) ()
        let v868 : string = $"{v833}"
        let v871 : unit = ()
        let v872 : (unit -> unit) = closure12(v814, v868)
        let v873 : unit = (fun () -> v872 (); v871) ()
        let v876 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v877 : string = "format!(\"{:#?}\", $0)"
        let v878 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v877 
        let v879 : string = "fable_library_rust::String_::fromString($0)"
        let v880 : string = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let _v876 = v880 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v881 : string = "format!(\"{:#?}\", $0)"
        let v882 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v881 
        let v883 : string = "fable_library_rust::String_::fromString($0)"
        let v884 : string = Fable.Core.RustInterop.emitRustExpr v882 v883 
        let _v876 = v884 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v885 : string = "format!(\"{:#?}\", $0)"
        let v886 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v885 
        let v887 : string = "fable_library_rust::String_::fromString($0)"
        let v888 : string = Fable.Core.RustInterop.emitRustExpr v886 v887 
        let _v876 = v888 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v889 : string = $"%A{v0}"
        let _v876 = v889 
        #endif
#if FABLE_COMPILER_PYTHON
        let v892 : string = $"%A{v0}"
        let _v876 = v892 
        #endif
#else
        let v895 : string = $"%A{v0}"
        let _v876 = v895 
        #endif
        let v898 : string = _v876 
        let v903 : string = $"{v898}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v814, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = " }"
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v814, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = v814.l0
        let v921 : (unit -> string) = closure45()
        let v922 : string = $"{v483} {v806} #{v812} %s{v921 ()} / {v920}"
        let v925 : char list = []
        let v926 : (char list -> (char [])) = List.toArray
        let v927 : (char []) = v926 v925
        let v930 : string = v922.TrimStart v927 
        let v948 : char list = []
        let v949 : char list = '/' :: v948 
        let v952 : char list = ' ' :: v949 
        let v955 : (char list -> (char [])) = List.toArray
        let v956 : (char []) = v955 v952
        let v959 : string = v930.TrimEnd v956 
        let v977 : (string -> unit) = closure14()
        let v978 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v979 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v979 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v980 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v980 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v981 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v981 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v977 v959
        let _v978 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v977 v959
        let _v978 = () 
        #endif
#else
        v977 v959
        let _v978 = () 
        #endif
        _v978 
        let v982 : (string -> unit) = v17.l0
        v982 v959
and closure61 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 3 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_3
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v737 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_3
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_3
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : string = "Warning"
                        US4_0(v730)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v741 : string =
            match v737 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v738) -> (* Some *)
                v738
        let v742 : (unit -> string) = v741.ToLower
        let v743 : string = v742 ()
        let v746 : string = v743.PadLeft (7, ' ')
        let v760 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v761 : string = "inline_colorization::color_yellow"
        let v762 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v761 
        let v763 : string = "&*$0"
        let v764 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v763 
        let v765 : string = "inline_colorization::color_reset"
        let v766 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v765 
        let v767 : string = "\"{v762}{v764}{v766}\""
        let v768 : string = @$"format!(" + v767 + ")"
        let v769 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v768 
        let v770 : string = "fable_library_rust::String_::fromString($0)"
        let v771 : string = Fable.Core.RustInterop.emitRustExpr v769 v770 
        let _v760 = v771 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v772 : string = "inline_colorization::color_yellow"
        let v773 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v772 
        let v774 : string = "&*$0"
        let v775 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v774 
        let v776 : string = "inline_colorization::color_reset"
        let v777 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v776 
        let v778 : string = "\"{v773}{v775}{v777}\""
        let v779 : string = @$"format!(" + v778 + ")"
        let v780 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v779 
        let v781 : string = "fable_library_rust::String_::fromString($0)"
        let v782 : string = Fable.Core.RustInterop.emitRustExpr v780 v781 
        let _v760 = v782 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v783 : string = "inline_colorization::color_yellow"
        let v784 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v783 
        let v785 : string = "&*$0"
        let v786 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v785 
        let v787 : string = "inline_colorization::color_reset"
        let v788 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v787 
        let v789 : string = "\"{v784}{v786}{v788}\""
        let v790 : string = @$"format!(" + v789 + ")"
        let v791 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v790 
        let v792 : string = "fable_library_rust::String_::fromString($0)"
        let v793 : string = Fable.Core.RustInterop.emitRustExpr v791 v792 
        let _v760 = v793 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v794 : string = "\u001b[93m"
        let v795 : string = method9()
        let v796 : string = v794 + v746 
        let v797 : string = v796 + v795 
        let _v760 = v797 
        #endif
#if FABLE_COMPILER_PYTHON
        let v798 : string = "\u001b[93m"
        let v799 : string = method9()
        let v800 : string = v798 + v746 
        let v801 : string = v800 + v799 
        let _v760 = v801 
        #endif
#else
        let v802 : string = "\u001b[93m"
        let v803 : string = method9()
        let v804 : string = v802 + v746 
        let v805 : string = v804 + v803 
        let _v760 = v805 
        #endif
        let v806 : string = _v760 
        let v812 : int64 = v85.l0
        let v813 : string = method10()
        let v814 : Mut4 = {l0 = v813} : Mut4
        let v815 : string = "{ "
        let v816 : string = $"{v815}"
        let v819 : unit = ()
        let v820 : (unit -> unit) = closure12(v814, v816)
        let v821 : unit = (fun () -> v820 (); v819) ()
        let v824 : string = "retry"
        let v825 : string = $"{v824}"
        let v828 : unit = ()
        let v829 : (unit -> unit) = closure12(v814, v825)
        let v830 : unit = (fun () -> v829 (); v828) ()
        let v833 : string = " = "
        let v834 : string = $"{v833}"
        let v837 : unit = ()
        let v838 : (unit -> unit) = closure12(v814, v834)
        let v839 : unit = (fun () -> v838 (); v837) ()
        let v842 : string = $"{17uy}"
        let v845 : unit = ()
        let v846 : (unit -> unit) = closure12(v814, v842)
        let v847 : unit = (fun () -> v846 (); v845) ()
        let v850 : string = "; "
        let v851 : string = $"{v850}"
        let v854 : unit = ()
        let v855 : (unit -> unit) = closure12(v814, v851)
        let v856 : unit = (fun () -> v855 (); v854) ()
        let v859 : string = "error"
        let v860 : string = $"{v859}"
        let v863 : unit = ()
        let v864 : (unit -> unit) = closure12(v814, v860)
        let v865 : unit = (fun () -> v864 (); v863) ()
        let v868 : string = $"{v833}"
        let v871 : unit = ()
        let v872 : (unit -> unit) = closure12(v814, v868)
        let v873 : unit = (fun () -> v872 (); v871) ()
        let v876 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v877 : string = "format!(\"{:#?}\", $0)"
        let v878 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v877 
        let v879 : string = "fable_library_rust::String_::fromString($0)"
        let v880 : string = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let _v876 = v880 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v881 : string = "format!(\"{:#?}\", $0)"
        let v882 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v881 
        let v883 : string = "fable_library_rust::String_::fromString($0)"
        let v884 : string = Fable.Core.RustInterop.emitRustExpr v882 v883 
        let _v876 = v884 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v885 : string = "format!(\"{:#?}\", $0)"
        let v886 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v885 
        let v887 : string = "fable_library_rust::String_::fromString($0)"
        let v888 : string = Fable.Core.RustInterop.emitRustExpr v886 v887 
        let _v876 = v888 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v889 : string = $"%A{v0}"
        let _v876 = v889 
        #endif
#if FABLE_COMPILER_PYTHON
        let v892 : string = $"%A{v0}"
        let _v876 = v892 
        #endif
#else
        let v895 : string = $"%A{v0}"
        let _v876 = v895 
        #endif
        let v898 : string = _v876 
        let v903 : string = $"{v898}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v814, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = " }"
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v814, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = v814.l0
        let v921 : (unit -> string) = closure45()
        let v922 : string = $"{v483} {v806} #{v812} %s{v921 ()} / {v920}"
        let v925 : char list = []
        let v926 : (char list -> (char [])) = List.toArray
        let v927 : (char []) = v926 v925
        let v930 : string = v922.TrimStart v927 
        let v948 : char list = []
        let v949 : char list = '/' :: v948 
        let v952 : char list = ' ' :: v949 
        let v955 : (char list -> (char [])) = List.toArray
        let v956 : (char []) = v955 v952
        let v959 : string = v930.TrimEnd v956 
        let v977 : (string -> unit) = closure14()
        let v978 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v979 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v979 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v980 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v980 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v981 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v981 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v977 v959
        let _v978 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v977 v959
        let _v978 = () 
        #endif
#else
        v977 v959
        let _v978 = () 
        #endif
        _v978 
        let v982 : (string -> unit) = v17.l0
        v982 v959
and closure62 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 3 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_3
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v737 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_3
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_3
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : string = "Warning"
                        US4_0(v730)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v741 : string =
            match v737 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v738) -> (* Some *)
                v738
        let v742 : (unit -> string) = v741.ToLower
        let v743 : string = v742 ()
        let v746 : string = v743.PadLeft (7, ' ')
        let v760 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v761 : string = "inline_colorization::color_yellow"
        let v762 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v761 
        let v763 : string = "&*$0"
        let v764 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v763 
        let v765 : string = "inline_colorization::color_reset"
        let v766 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v765 
        let v767 : string = "\"{v762}{v764}{v766}\""
        let v768 : string = @$"format!(" + v767 + ")"
        let v769 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v768 
        let v770 : string = "fable_library_rust::String_::fromString($0)"
        let v771 : string = Fable.Core.RustInterop.emitRustExpr v769 v770 
        let _v760 = v771 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v772 : string = "inline_colorization::color_yellow"
        let v773 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v772 
        let v774 : string = "&*$0"
        let v775 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v774 
        let v776 : string = "inline_colorization::color_reset"
        let v777 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v776 
        let v778 : string = "\"{v773}{v775}{v777}\""
        let v779 : string = @$"format!(" + v778 + ")"
        let v780 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v779 
        let v781 : string = "fable_library_rust::String_::fromString($0)"
        let v782 : string = Fable.Core.RustInterop.emitRustExpr v780 v781 
        let _v760 = v782 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v783 : string = "inline_colorization::color_yellow"
        let v784 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v783 
        let v785 : string = "&*$0"
        let v786 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v785 
        let v787 : string = "inline_colorization::color_reset"
        let v788 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v787 
        let v789 : string = "\"{v784}{v786}{v788}\""
        let v790 : string = @$"format!(" + v789 + ")"
        let v791 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v790 
        let v792 : string = "fable_library_rust::String_::fromString($0)"
        let v793 : string = Fable.Core.RustInterop.emitRustExpr v791 v792 
        let _v760 = v793 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v794 : string = "\u001b[93m"
        let v795 : string = method9()
        let v796 : string = v794 + v746 
        let v797 : string = v796 + v795 
        let _v760 = v797 
        #endif
#if FABLE_COMPILER_PYTHON
        let v798 : string = "\u001b[93m"
        let v799 : string = method9()
        let v800 : string = v798 + v746 
        let v801 : string = v800 + v799 
        let _v760 = v801 
        #endif
#else
        let v802 : string = "\u001b[93m"
        let v803 : string = method9()
        let v804 : string = v802 + v746 
        let v805 : string = v804 + v803 
        let _v760 = v805 
        #endif
        let v806 : string = _v760 
        let v812 : int64 = v85.l0
        let v813 : string = method10()
        let v814 : Mut4 = {l0 = v813} : Mut4
        let v815 : string = "{ "
        let v816 : string = $"{v815}"
        let v819 : unit = ()
        let v820 : (unit -> unit) = closure12(v814, v816)
        let v821 : unit = (fun () -> v820 (); v819) ()
        let v824 : string = "retry"
        let v825 : string = $"{v824}"
        let v828 : unit = ()
        let v829 : (unit -> unit) = closure12(v814, v825)
        let v830 : unit = (fun () -> v829 (); v828) ()
        let v833 : string = " = "
        let v834 : string = $"{v833}"
        let v837 : unit = ()
        let v838 : (unit -> unit) = closure12(v814, v834)
        let v839 : unit = (fun () -> v838 (); v837) ()
        let v842 : string = $"{18uy}"
        let v845 : unit = ()
        let v846 : (unit -> unit) = closure12(v814, v842)
        let v847 : unit = (fun () -> v846 (); v845) ()
        let v850 : string = "; "
        let v851 : string = $"{v850}"
        let v854 : unit = ()
        let v855 : (unit -> unit) = closure12(v814, v851)
        let v856 : unit = (fun () -> v855 (); v854) ()
        let v859 : string = "error"
        let v860 : string = $"{v859}"
        let v863 : unit = ()
        let v864 : (unit -> unit) = closure12(v814, v860)
        let v865 : unit = (fun () -> v864 (); v863) ()
        let v868 : string = $"{v833}"
        let v871 : unit = ()
        let v872 : (unit -> unit) = closure12(v814, v868)
        let v873 : unit = (fun () -> v872 (); v871) ()
        let v876 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v877 : string = "format!(\"{:#?}\", $0)"
        let v878 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v877 
        let v879 : string = "fable_library_rust::String_::fromString($0)"
        let v880 : string = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let _v876 = v880 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v881 : string = "format!(\"{:#?}\", $0)"
        let v882 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v881 
        let v883 : string = "fable_library_rust::String_::fromString($0)"
        let v884 : string = Fable.Core.RustInterop.emitRustExpr v882 v883 
        let _v876 = v884 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v885 : string = "format!(\"{:#?}\", $0)"
        let v886 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v885 
        let v887 : string = "fable_library_rust::String_::fromString($0)"
        let v888 : string = Fable.Core.RustInterop.emitRustExpr v886 v887 
        let _v876 = v888 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v889 : string = $"%A{v0}"
        let _v876 = v889 
        #endif
#if FABLE_COMPILER_PYTHON
        let v892 : string = $"%A{v0}"
        let _v876 = v892 
        #endif
#else
        let v895 : string = $"%A{v0}"
        let _v876 = v895 
        #endif
        let v898 : string = _v876 
        let v903 : string = $"{v898}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v814, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = " }"
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v814, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = v814.l0
        let v921 : (unit -> string) = closure45()
        let v922 : string = $"{v483} {v806} #{v812} %s{v921 ()} / {v920}"
        let v925 : char list = []
        let v926 : (char list -> (char [])) = List.toArray
        let v927 : (char []) = v926 v925
        let v930 : string = v922.TrimStart v927 
        let v948 : char list = []
        let v949 : char list = '/' :: v948 
        let v952 : char list = ' ' :: v949 
        let v955 : (char list -> (char [])) = List.toArray
        let v956 : (char []) = v955 v952
        let v959 : string = v930.TrimEnd v956 
        let v977 : (string -> unit) = closure14()
        let v978 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v979 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v979 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v980 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v980 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v981 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v981 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v977 v959
        let _v978 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v977 v959
        let _v978 = () 
        #endif
#else
        v977 v959
        let _v978 = () 
        #endif
        _v978 
        let v982 : (string -> unit) = v17.l0
        v982 v959
and closure63 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 3 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_3
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v737 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_3
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_3
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : string = "Warning"
                        US4_0(v730)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v741 : string =
            match v737 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v738) -> (* Some *)
                v738
        let v742 : (unit -> string) = v741.ToLower
        let v743 : string = v742 ()
        let v746 : string = v743.PadLeft (7, ' ')
        let v760 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v761 : string = "inline_colorization::color_yellow"
        let v762 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v761 
        let v763 : string = "&*$0"
        let v764 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v763 
        let v765 : string = "inline_colorization::color_reset"
        let v766 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v765 
        let v767 : string = "\"{v762}{v764}{v766}\""
        let v768 : string = @$"format!(" + v767 + ")"
        let v769 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v768 
        let v770 : string = "fable_library_rust::String_::fromString($0)"
        let v771 : string = Fable.Core.RustInterop.emitRustExpr v769 v770 
        let _v760 = v771 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v772 : string = "inline_colorization::color_yellow"
        let v773 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v772 
        let v774 : string = "&*$0"
        let v775 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v774 
        let v776 : string = "inline_colorization::color_reset"
        let v777 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v776 
        let v778 : string = "\"{v773}{v775}{v777}\""
        let v779 : string = @$"format!(" + v778 + ")"
        let v780 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v779 
        let v781 : string = "fable_library_rust::String_::fromString($0)"
        let v782 : string = Fable.Core.RustInterop.emitRustExpr v780 v781 
        let _v760 = v782 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v783 : string = "inline_colorization::color_yellow"
        let v784 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v783 
        let v785 : string = "&*$0"
        let v786 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v785 
        let v787 : string = "inline_colorization::color_reset"
        let v788 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v787 
        let v789 : string = "\"{v784}{v786}{v788}\""
        let v790 : string = @$"format!(" + v789 + ")"
        let v791 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v790 
        let v792 : string = "fable_library_rust::String_::fromString($0)"
        let v793 : string = Fable.Core.RustInterop.emitRustExpr v791 v792 
        let _v760 = v793 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v794 : string = "\u001b[93m"
        let v795 : string = method9()
        let v796 : string = v794 + v746 
        let v797 : string = v796 + v795 
        let _v760 = v797 
        #endif
#if FABLE_COMPILER_PYTHON
        let v798 : string = "\u001b[93m"
        let v799 : string = method9()
        let v800 : string = v798 + v746 
        let v801 : string = v800 + v799 
        let _v760 = v801 
        #endif
#else
        let v802 : string = "\u001b[93m"
        let v803 : string = method9()
        let v804 : string = v802 + v746 
        let v805 : string = v804 + v803 
        let _v760 = v805 
        #endif
        let v806 : string = _v760 
        let v812 : int64 = v85.l0
        let v813 : string = method10()
        let v814 : Mut4 = {l0 = v813} : Mut4
        let v815 : string = "{ "
        let v816 : string = $"{v815}"
        let v819 : unit = ()
        let v820 : (unit -> unit) = closure12(v814, v816)
        let v821 : unit = (fun () -> v820 (); v819) ()
        let v824 : string = "retry"
        let v825 : string = $"{v824}"
        let v828 : unit = ()
        let v829 : (unit -> unit) = closure12(v814, v825)
        let v830 : unit = (fun () -> v829 (); v828) ()
        let v833 : string = " = "
        let v834 : string = $"{v833}"
        let v837 : unit = ()
        let v838 : (unit -> unit) = closure12(v814, v834)
        let v839 : unit = (fun () -> v838 (); v837) ()
        let v842 : string = $"{19uy}"
        let v845 : unit = ()
        let v846 : (unit -> unit) = closure12(v814, v842)
        let v847 : unit = (fun () -> v846 (); v845) ()
        let v850 : string = "; "
        let v851 : string = $"{v850}"
        let v854 : unit = ()
        let v855 : (unit -> unit) = closure12(v814, v851)
        let v856 : unit = (fun () -> v855 (); v854) ()
        let v859 : string = "error"
        let v860 : string = $"{v859}"
        let v863 : unit = ()
        let v864 : (unit -> unit) = closure12(v814, v860)
        let v865 : unit = (fun () -> v864 (); v863) ()
        let v868 : string = $"{v833}"
        let v871 : unit = ()
        let v872 : (unit -> unit) = closure12(v814, v868)
        let v873 : unit = (fun () -> v872 (); v871) ()
        let v876 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v877 : string = "format!(\"{:#?}\", $0)"
        let v878 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v877 
        let v879 : string = "fable_library_rust::String_::fromString($0)"
        let v880 : string = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let _v876 = v880 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v881 : string = "format!(\"{:#?}\", $0)"
        let v882 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v881 
        let v883 : string = "fable_library_rust::String_::fromString($0)"
        let v884 : string = Fable.Core.RustInterop.emitRustExpr v882 v883 
        let _v876 = v884 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v885 : string = "format!(\"{:#?}\", $0)"
        let v886 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v885 
        let v887 : string = "fable_library_rust::String_::fromString($0)"
        let v888 : string = Fable.Core.RustInterop.emitRustExpr v886 v887 
        let _v876 = v888 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v889 : string = $"%A{v0}"
        let _v876 = v889 
        #endif
#if FABLE_COMPILER_PYTHON
        let v892 : string = $"%A{v0}"
        let _v876 = v892 
        #endif
#else
        let v895 : string = $"%A{v0}"
        let _v876 = v895 
        #endif
        let v898 : string = _v876 
        let v903 : string = $"{v898}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v814, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = " }"
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v814, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = v814.l0
        let v921 : (unit -> string) = closure45()
        let v922 : string = $"{v483} {v806} #{v812} %s{v921 ()} / {v920}"
        let v925 : char list = []
        let v926 : (char list -> (char [])) = List.toArray
        let v927 : (char []) = v926 v925
        let v930 : string = v922.TrimStart v927 
        let v948 : char list = []
        let v949 : char list = '/' :: v948 
        let v952 : char list = ' ' :: v949 
        let v955 : (char list -> (char [])) = List.toArray
        let v956 : (char []) = v955 v952
        let v959 : string = v930.TrimEnd v956 
        let v977 : (string -> unit) = closure14()
        let v978 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v979 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v979 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v980 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v980 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v981 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v981 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v977 v959
        let _v978 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v977 v959
        let _v978 = () 
        #endif
#else
        v977 v959
        let _v978 = () 
        #endif
        _v978 
        let v982 : (string -> unit) = v17.l0
        v982 v959
and closure64 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 3 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_3
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v737 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_3
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_3
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : string = "Warning"
                        US4_0(v730)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v741 : string =
            match v737 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v738) -> (* Some *)
                v738
        let v742 : (unit -> string) = v741.ToLower
        let v743 : string = v742 ()
        let v746 : string = v743.PadLeft (7, ' ')
        let v760 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v761 : string = "inline_colorization::color_yellow"
        let v762 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v761 
        let v763 : string = "&*$0"
        let v764 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v763 
        let v765 : string = "inline_colorization::color_reset"
        let v766 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v765 
        let v767 : string = "\"{v762}{v764}{v766}\""
        let v768 : string = @$"format!(" + v767 + ")"
        let v769 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v768 
        let v770 : string = "fable_library_rust::String_::fromString($0)"
        let v771 : string = Fable.Core.RustInterop.emitRustExpr v769 v770 
        let _v760 = v771 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v772 : string = "inline_colorization::color_yellow"
        let v773 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v772 
        let v774 : string = "&*$0"
        let v775 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v774 
        let v776 : string = "inline_colorization::color_reset"
        let v777 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v776 
        let v778 : string = "\"{v773}{v775}{v777}\""
        let v779 : string = @$"format!(" + v778 + ")"
        let v780 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v779 
        let v781 : string = "fable_library_rust::String_::fromString($0)"
        let v782 : string = Fable.Core.RustInterop.emitRustExpr v780 v781 
        let _v760 = v782 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v783 : string = "inline_colorization::color_yellow"
        let v784 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v783 
        let v785 : string = "&*$0"
        let v786 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v785 
        let v787 : string = "inline_colorization::color_reset"
        let v788 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v787 
        let v789 : string = "\"{v784}{v786}{v788}\""
        let v790 : string = @$"format!(" + v789 + ")"
        let v791 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v790 
        let v792 : string = "fable_library_rust::String_::fromString($0)"
        let v793 : string = Fable.Core.RustInterop.emitRustExpr v791 v792 
        let _v760 = v793 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v794 : string = "\u001b[93m"
        let v795 : string = method9()
        let v796 : string = v794 + v746 
        let v797 : string = v796 + v795 
        let _v760 = v797 
        #endif
#if FABLE_COMPILER_PYTHON
        let v798 : string = "\u001b[93m"
        let v799 : string = method9()
        let v800 : string = v798 + v746 
        let v801 : string = v800 + v799 
        let _v760 = v801 
        #endif
#else
        let v802 : string = "\u001b[93m"
        let v803 : string = method9()
        let v804 : string = v802 + v746 
        let v805 : string = v804 + v803 
        let _v760 = v805 
        #endif
        let v806 : string = _v760 
        let v812 : int64 = v85.l0
        let v813 : string = method10()
        let v814 : Mut4 = {l0 = v813} : Mut4
        let v815 : string = "{ "
        let v816 : string = $"{v815}"
        let v819 : unit = ()
        let v820 : (unit -> unit) = closure12(v814, v816)
        let v821 : unit = (fun () -> v820 (); v819) ()
        let v824 : string = "retry"
        let v825 : string = $"{v824}"
        let v828 : unit = ()
        let v829 : (unit -> unit) = closure12(v814, v825)
        let v830 : unit = (fun () -> v829 (); v828) ()
        let v833 : string = " = "
        let v834 : string = $"{v833}"
        let v837 : unit = ()
        let v838 : (unit -> unit) = closure12(v814, v834)
        let v839 : unit = (fun () -> v838 (); v837) ()
        let v842 : string = $"{20uy}"
        let v845 : unit = ()
        let v846 : (unit -> unit) = closure12(v814, v842)
        let v847 : unit = (fun () -> v846 (); v845) ()
        let v850 : string = "; "
        let v851 : string = $"{v850}"
        let v854 : unit = ()
        let v855 : (unit -> unit) = closure12(v814, v851)
        let v856 : unit = (fun () -> v855 (); v854) ()
        let v859 : string = "error"
        let v860 : string = $"{v859}"
        let v863 : unit = ()
        let v864 : (unit -> unit) = closure12(v814, v860)
        let v865 : unit = (fun () -> v864 (); v863) ()
        let v868 : string = $"{v833}"
        let v871 : unit = ()
        let v872 : (unit -> unit) = closure12(v814, v868)
        let v873 : unit = (fun () -> v872 (); v871) ()
        let v876 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v877 : string = "format!(\"{:#?}\", $0)"
        let v878 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v877 
        let v879 : string = "fable_library_rust::String_::fromString($0)"
        let v880 : string = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let _v876 = v880 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v881 : string = "format!(\"{:#?}\", $0)"
        let v882 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v881 
        let v883 : string = "fable_library_rust::String_::fromString($0)"
        let v884 : string = Fable.Core.RustInterop.emitRustExpr v882 v883 
        let _v876 = v884 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v885 : string = "format!(\"{:#?}\", $0)"
        let v886 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v885 
        let v887 : string = "fable_library_rust::String_::fromString($0)"
        let v888 : string = Fable.Core.RustInterop.emitRustExpr v886 v887 
        let _v876 = v888 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v889 : string = $"%A{v0}"
        let _v876 = v889 
        #endif
#if FABLE_COMPILER_PYTHON
        let v892 : string = $"%A{v0}"
        let _v876 = v892 
        #endif
#else
        let v895 : string = $"%A{v0}"
        let _v876 = v895 
        #endif
        let v898 : string = _v876 
        let v903 : string = $"{v898}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v814, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = " }"
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v814, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = v814.l0
        let v921 : (unit -> string) = closure45()
        let v922 : string = $"{v483} {v806} #{v812} %s{v921 ()} / {v920}"
        let v925 : char list = []
        let v926 : (char list -> (char [])) = List.toArray
        let v927 : (char []) = v926 v925
        let v930 : string = v922.TrimStart v927 
        let v948 : char list = []
        let v949 : char list = '/' :: v948 
        let v952 : char list = ' ' :: v949 
        let v955 : (char list -> (char [])) = List.toArray
        let v956 : (char []) = v955 v952
        let v959 : string = v930.TrimEnd v956 
        let v977 : (string -> unit) = closure14()
        let v978 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v979 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v979 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v980 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v980 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v981 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v981 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v977 v959
        let _v978 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v977 v959
        let _v978 = () 
        #endif
#else
        v977 v959
        let _v978 = () 
        #endif
        _v978 
        let v982 : (string -> unit) = v17.l0
        v982 v959
and closure65 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 3 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_3
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v737 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_3
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_3
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : string = "Warning"
                        US4_0(v730)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v741 : string =
            match v737 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v738) -> (* Some *)
                v738
        let v742 : (unit -> string) = v741.ToLower
        let v743 : string = v742 ()
        let v746 : string = v743.PadLeft (7, ' ')
        let v760 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v761 : string = "inline_colorization::color_yellow"
        let v762 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v761 
        let v763 : string = "&*$0"
        let v764 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v763 
        let v765 : string = "inline_colorization::color_reset"
        let v766 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v765 
        let v767 : string = "\"{v762}{v764}{v766}\""
        let v768 : string = @$"format!(" + v767 + ")"
        let v769 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v768 
        let v770 : string = "fable_library_rust::String_::fromString($0)"
        let v771 : string = Fable.Core.RustInterop.emitRustExpr v769 v770 
        let _v760 = v771 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v772 : string = "inline_colorization::color_yellow"
        let v773 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v772 
        let v774 : string = "&*$0"
        let v775 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v774 
        let v776 : string = "inline_colorization::color_reset"
        let v777 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v776 
        let v778 : string = "\"{v773}{v775}{v777}\""
        let v779 : string = @$"format!(" + v778 + ")"
        let v780 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v779 
        let v781 : string = "fable_library_rust::String_::fromString($0)"
        let v782 : string = Fable.Core.RustInterop.emitRustExpr v780 v781 
        let _v760 = v782 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v783 : string = "inline_colorization::color_yellow"
        let v784 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v783 
        let v785 : string = "&*$0"
        let v786 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v785 
        let v787 : string = "inline_colorization::color_reset"
        let v788 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v787 
        let v789 : string = "\"{v784}{v786}{v788}\""
        let v790 : string = @$"format!(" + v789 + ")"
        let v791 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v790 
        let v792 : string = "fable_library_rust::String_::fromString($0)"
        let v793 : string = Fable.Core.RustInterop.emitRustExpr v791 v792 
        let _v760 = v793 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v794 : string = "\u001b[93m"
        let v795 : string = method9()
        let v796 : string = v794 + v746 
        let v797 : string = v796 + v795 
        let _v760 = v797 
        #endif
#if FABLE_COMPILER_PYTHON
        let v798 : string = "\u001b[93m"
        let v799 : string = method9()
        let v800 : string = v798 + v746 
        let v801 : string = v800 + v799 
        let _v760 = v801 
        #endif
#else
        let v802 : string = "\u001b[93m"
        let v803 : string = method9()
        let v804 : string = v802 + v746 
        let v805 : string = v804 + v803 
        let _v760 = v805 
        #endif
        let v806 : string = _v760 
        let v812 : int64 = v85.l0
        let v813 : string = method10()
        let v814 : Mut4 = {l0 = v813} : Mut4
        let v815 : string = "{ "
        let v816 : string = $"{v815}"
        let v819 : unit = ()
        let v820 : (unit -> unit) = closure12(v814, v816)
        let v821 : unit = (fun () -> v820 (); v819) ()
        let v824 : string = "retry"
        let v825 : string = $"{v824}"
        let v828 : unit = ()
        let v829 : (unit -> unit) = closure12(v814, v825)
        let v830 : unit = (fun () -> v829 (); v828) ()
        let v833 : string = " = "
        let v834 : string = $"{v833}"
        let v837 : unit = ()
        let v838 : (unit -> unit) = closure12(v814, v834)
        let v839 : unit = (fun () -> v838 (); v837) ()
        let v842 : string = $"{21uy}"
        let v845 : unit = ()
        let v846 : (unit -> unit) = closure12(v814, v842)
        let v847 : unit = (fun () -> v846 (); v845) ()
        let v850 : string = "; "
        let v851 : string = $"{v850}"
        let v854 : unit = ()
        let v855 : (unit -> unit) = closure12(v814, v851)
        let v856 : unit = (fun () -> v855 (); v854) ()
        let v859 : string = "error"
        let v860 : string = $"{v859}"
        let v863 : unit = ()
        let v864 : (unit -> unit) = closure12(v814, v860)
        let v865 : unit = (fun () -> v864 (); v863) ()
        let v868 : string = $"{v833}"
        let v871 : unit = ()
        let v872 : (unit -> unit) = closure12(v814, v868)
        let v873 : unit = (fun () -> v872 (); v871) ()
        let v876 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v877 : string = "format!(\"{:#?}\", $0)"
        let v878 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v877 
        let v879 : string = "fable_library_rust::String_::fromString($0)"
        let v880 : string = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let _v876 = v880 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v881 : string = "format!(\"{:#?}\", $0)"
        let v882 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v881 
        let v883 : string = "fable_library_rust::String_::fromString($0)"
        let v884 : string = Fable.Core.RustInterop.emitRustExpr v882 v883 
        let _v876 = v884 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v885 : string = "format!(\"{:#?}\", $0)"
        let v886 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v885 
        let v887 : string = "fable_library_rust::String_::fromString($0)"
        let v888 : string = Fable.Core.RustInterop.emitRustExpr v886 v887 
        let _v876 = v888 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v889 : string = $"%A{v0}"
        let _v876 = v889 
        #endif
#if FABLE_COMPILER_PYTHON
        let v892 : string = $"%A{v0}"
        let _v876 = v892 
        #endif
#else
        let v895 : string = $"%A{v0}"
        let _v876 = v895 
        #endif
        let v898 : string = _v876 
        let v903 : string = $"{v898}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v814, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = " }"
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v814, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = v814.l0
        let v921 : (unit -> string) = closure45()
        let v922 : string = $"{v483} {v806} #{v812} %s{v921 ()} / {v920}"
        let v925 : char list = []
        let v926 : (char list -> (char [])) = List.toArray
        let v927 : (char []) = v926 v925
        let v930 : string = v922.TrimStart v927 
        let v948 : char list = []
        let v949 : char list = '/' :: v948 
        let v952 : char list = ' ' :: v949 
        let v955 : (char list -> (char [])) = List.toArray
        let v956 : (char []) = v955 v952
        let v959 : string = v930.TrimEnd v956 
        let v977 : (string -> unit) = closure14()
        let v978 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v979 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v979 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v980 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v980 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v981 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v981 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v977 v959
        let _v978 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v977 v959
        let _v978 = () 
        #endif
#else
        v977 v959
        let _v978 = () 
        #endif
        _v978 
        let v982 : (string -> unit) = v17.l0
        v982 v959
and closure66 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 3 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_3
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v737 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_3
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_3
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : string = "Warning"
                        US4_0(v730)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v741 : string =
            match v737 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v738) -> (* Some *)
                v738
        let v742 : (unit -> string) = v741.ToLower
        let v743 : string = v742 ()
        let v746 : string = v743.PadLeft (7, ' ')
        let v760 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v761 : string = "inline_colorization::color_yellow"
        let v762 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v761 
        let v763 : string = "&*$0"
        let v764 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v763 
        let v765 : string = "inline_colorization::color_reset"
        let v766 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v765 
        let v767 : string = "\"{v762}{v764}{v766}\""
        let v768 : string = @$"format!(" + v767 + ")"
        let v769 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v768 
        let v770 : string = "fable_library_rust::String_::fromString($0)"
        let v771 : string = Fable.Core.RustInterop.emitRustExpr v769 v770 
        let _v760 = v771 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v772 : string = "inline_colorization::color_yellow"
        let v773 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v772 
        let v774 : string = "&*$0"
        let v775 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v774 
        let v776 : string = "inline_colorization::color_reset"
        let v777 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v776 
        let v778 : string = "\"{v773}{v775}{v777}\""
        let v779 : string = @$"format!(" + v778 + ")"
        let v780 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v779 
        let v781 : string = "fable_library_rust::String_::fromString($0)"
        let v782 : string = Fable.Core.RustInterop.emitRustExpr v780 v781 
        let _v760 = v782 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v783 : string = "inline_colorization::color_yellow"
        let v784 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v783 
        let v785 : string = "&*$0"
        let v786 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v785 
        let v787 : string = "inline_colorization::color_reset"
        let v788 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v787 
        let v789 : string = "\"{v784}{v786}{v788}\""
        let v790 : string = @$"format!(" + v789 + ")"
        let v791 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v790 
        let v792 : string = "fable_library_rust::String_::fromString($0)"
        let v793 : string = Fable.Core.RustInterop.emitRustExpr v791 v792 
        let _v760 = v793 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v794 : string = "\u001b[93m"
        let v795 : string = method9()
        let v796 : string = v794 + v746 
        let v797 : string = v796 + v795 
        let _v760 = v797 
        #endif
#if FABLE_COMPILER_PYTHON
        let v798 : string = "\u001b[93m"
        let v799 : string = method9()
        let v800 : string = v798 + v746 
        let v801 : string = v800 + v799 
        let _v760 = v801 
        #endif
#else
        let v802 : string = "\u001b[93m"
        let v803 : string = method9()
        let v804 : string = v802 + v746 
        let v805 : string = v804 + v803 
        let _v760 = v805 
        #endif
        let v806 : string = _v760 
        let v812 : int64 = v85.l0
        let v813 : string = method10()
        let v814 : Mut4 = {l0 = v813} : Mut4
        let v815 : string = "{ "
        let v816 : string = $"{v815}"
        let v819 : unit = ()
        let v820 : (unit -> unit) = closure12(v814, v816)
        let v821 : unit = (fun () -> v820 (); v819) ()
        let v824 : string = "retry"
        let v825 : string = $"{v824}"
        let v828 : unit = ()
        let v829 : (unit -> unit) = closure12(v814, v825)
        let v830 : unit = (fun () -> v829 (); v828) ()
        let v833 : string = " = "
        let v834 : string = $"{v833}"
        let v837 : unit = ()
        let v838 : (unit -> unit) = closure12(v814, v834)
        let v839 : unit = (fun () -> v838 (); v837) ()
        let v842 : string = $"{22uy}"
        let v845 : unit = ()
        let v846 : (unit -> unit) = closure12(v814, v842)
        let v847 : unit = (fun () -> v846 (); v845) ()
        let v850 : string = "; "
        let v851 : string = $"{v850}"
        let v854 : unit = ()
        let v855 : (unit -> unit) = closure12(v814, v851)
        let v856 : unit = (fun () -> v855 (); v854) ()
        let v859 : string = "error"
        let v860 : string = $"{v859}"
        let v863 : unit = ()
        let v864 : (unit -> unit) = closure12(v814, v860)
        let v865 : unit = (fun () -> v864 (); v863) ()
        let v868 : string = $"{v833}"
        let v871 : unit = ()
        let v872 : (unit -> unit) = closure12(v814, v868)
        let v873 : unit = (fun () -> v872 (); v871) ()
        let v876 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v877 : string = "format!(\"{:#?}\", $0)"
        let v878 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v877 
        let v879 : string = "fable_library_rust::String_::fromString($0)"
        let v880 : string = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let _v876 = v880 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v881 : string = "format!(\"{:#?}\", $0)"
        let v882 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v881 
        let v883 : string = "fable_library_rust::String_::fromString($0)"
        let v884 : string = Fable.Core.RustInterop.emitRustExpr v882 v883 
        let _v876 = v884 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v885 : string = "format!(\"{:#?}\", $0)"
        let v886 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v885 
        let v887 : string = "fable_library_rust::String_::fromString($0)"
        let v888 : string = Fable.Core.RustInterop.emitRustExpr v886 v887 
        let _v876 = v888 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v889 : string = $"%A{v0}"
        let _v876 = v889 
        #endif
#if FABLE_COMPILER_PYTHON
        let v892 : string = $"%A{v0}"
        let _v876 = v892 
        #endif
#else
        let v895 : string = $"%A{v0}"
        let _v876 = v895 
        #endif
        let v898 : string = _v876 
        let v903 : string = $"{v898}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v814, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = " }"
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v814, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = v814.l0
        let v921 : (unit -> string) = closure45()
        let v922 : string = $"{v483} {v806} #{v812} %s{v921 ()} / {v920}"
        let v925 : char list = []
        let v926 : (char list -> (char [])) = List.toArray
        let v927 : (char []) = v926 v925
        let v930 : string = v922.TrimStart v927 
        let v948 : char list = []
        let v949 : char list = '/' :: v948 
        let v952 : char list = ' ' :: v949 
        let v955 : (char list -> (char [])) = List.toArray
        let v956 : (char []) = v955 v952
        let v959 : string = v930.TrimEnd v956 
        let v977 : (string -> unit) = closure14()
        let v978 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v979 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v979 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v980 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v980 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v981 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v981 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v977 v959
        let _v978 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v977 v959
        let _v978 = () 
        #endif
#else
        v977 v959
        let _v978 = () 
        #endif
        _v978 
        let v982 : (string -> unit) = v17.l0
        v982 v959
and closure67 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 3 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_3
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v737 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_3
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_3
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : string = "Warning"
                        US4_0(v730)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v741 : string =
            match v737 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v738) -> (* Some *)
                v738
        let v742 : (unit -> string) = v741.ToLower
        let v743 : string = v742 ()
        let v746 : string = v743.PadLeft (7, ' ')
        let v760 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v761 : string = "inline_colorization::color_yellow"
        let v762 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v761 
        let v763 : string = "&*$0"
        let v764 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v763 
        let v765 : string = "inline_colorization::color_reset"
        let v766 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v765 
        let v767 : string = "\"{v762}{v764}{v766}\""
        let v768 : string = @$"format!(" + v767 + ")"
        let v769 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v768 
        let v770 : string = "fable_library_rust::String_::fromString($0)"
        let v771 : string = Fable.Core.RustInterop.emitRustExpr v769 v770 
        let _v760 = v771 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v772 : string = "inline_colorization::color_yellow"
        let v773 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v772 
        let v774 : string = "&*$0"
        let v775 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v774 
        let v776 : string = "inline_colorization::color_reset"
        let v777 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v776 
        let v778 : string = "\"{v773}{v775}{v777}\""
        let v779 : string = @$"format!(" + v778 + ")"
        let v780 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v779 
        let v781 : string = "fable_library_rust::String_::fromString($0)"
        let v782 : string = Fable.Core.RustInterop.emitRustExpr v780 v781 
        let _v760 = v782 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v783 : string = "inline_colorization::color_yellow"
        let v784 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v783 
        let v785 : string = "&*$0"
        let v786 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v785 
        let v787 : string = "inline_colorization::color_reset"
        let v788 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v787 
        let v789 : string = "\"{v784}{v786}{v788}\""
        let v790 : string = @$"format!(" + v789 + ")"
        let v791 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v790 
        let v792 : string = "fable_library_rust::String_::fromString($0)"
        let v793 : string = Fable.Core.RustInterop.emitRustExpr v791 v792 
        let _v760 = v793 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v794 : string = "\u001b[93m"
        let v795 : string = method9()
        let v796 : string = v794 + v746 
        let v797 : string = v796 + v795 
        let _v760 = v797 
        #endif
#if FABLE_COMPILER_PYTHON
        let v798 : string = "\u001b[93m"
        let v799 : string = method9()
        let v800 : string = v798 + v746 
        let v801 : string = v800 + v799 
        let _v760 = v801 
        #endif
#else
        let v802 : string = "\u001b[93m"
        let v803 : string = method9()
        let v804 : string = v802 + v746 
        let v805 : string = v804 + v803 
        let _v760 = v805 
        #endif
        let v806 : string = _v760 
        let v812 : int64 = v85.l0
        let v813 : string = method10()
        let v814 : Mut4 = {l0 = v813} : Mut4
        let v815 : string = "{ "
        let v816 : string = $"{v815}"
        let v819 : unit = ()
        let v820 : (unit -> unit) = closure12(v814, v816)
        let v821 : unit = (fun () -> v820 (); v819) ()
        let v824 : string = "retry"
        let v825 : string = $"{v824}"
        let v828 : unit = ()
        let v829 : (unit -> unit) = closure12(v814, v825)
        let v830 : unit = (fun () -> v829 (); v828) ()
        let v833 : string = " = "
        let v834 : string = $"{v833}"
        let v837 : unit = ()
        let v838 : (unit -> unit) = closure12(v814, v834)
        let v839 : unit = (fun () -> v838 (); v837) ()
        let v842 : string = $"{23uy}"
        let v845 : unit = ()
        let v846 : (unit -> unit) = closure12(v814, v842)
        let v847 : unit = (fun () -> v846 (); v845) ()
        let v850 : string = "; "
        let v851 : string = $"{v850}"
        let v854 : unit = ()
        let v855 : (unit -> unit) = closure12(v814, v851)
        let v856 : unit = (fun () -> v855 (); v854) ()
        let v859 : string = "error"
        let v860 : string = $"{v859}"
        let v863 : unit = ()
        let v864 : (unit -> unit) = closure12(v814, v860)
        let v865 : unit = (fun () -> v864 (); v863) ()
        let v868 : string = $"{v833}"
        let v871 : unit = ()
        let v872 : (unit -> unit) = closure12(v814, v868)
        let v873 : unit = (fun () -> v872 (); v871) ()
        let v876 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v877 : string = "format!(\"{:#?}\", $0)"
        let v878 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v877 
        let v879 : string = "fable_library_rust::String_::fromString($0)"
        let v880 : string = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let _v876 = v880 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v881 : string = "format!(\"{:#?}\", $0)"
        let v882 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v881 
        let v883 : string = "fable_library_rust::String_::fromString($0)"
        let v884 : string = Fable.Core.RustInterop.emitRustExpr v882 v883 
        let _v876 = v884 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v885 : string = "format!(\"{:#?}\", $0)"
        let v886 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v885 
        let v887 : string = "fable_library_rust::String_::fromString($0)"
        let v888 : string = Fable.Core.RustInterop.emitRustExpr v886 v887 
        let _v876 = v888 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v889 : string = $"%A{v0}"
        let _v876 = v889 
        #endif
#if FABLE_COMPILER_PYTHON
        let v892 : string = $"%A{v0}"
        let _v876 = v892 
        #endif
#else
        let v895 : string = $"%A{v0}"
        let _v876 = v895 
        #endif
        let v898 : string = _v876 
        let v903 : string = $"{v898}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v814, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = " }"
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v814, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = v814.l0
        let v921 : (unit -> string) = closure45()
        let v922 : string = $"{v483} {v806} #{v812} %s{v921 ()} / {v920}"
        let v925 : char list = []
        let v926 : (char list -> (char [])) = List.toArray
        let v927 : (char []) = v926 v925
        let v930 : string = v922.TrimStart v927 
        let v948 : char list = []
        let v949 : char list = '/' :: v948 
        let v952 : char list = ' ' :: v949 
        let v955 : (char list -> (char [])) = List.toArray
        let v956 : (char []) = v955 v952
        let v959 : string = v930.TrimEnd v956 
        let v977 : (string -> unit) = closure14()
        let v978 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v979 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v979 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v980 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v980 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v981 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v981 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v977 v959
        let _v978 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v977 v959
        let _v978 = () 
        #endif
#else
        v977 v959
        let _v978 = () 
        #endif
        _v978 
        let v982 : (string -> unit) = v17.l0
        v982 v959
and closure68 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 3 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_3
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v737 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_3
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_3
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : string = "Warning"
                        US4_0(v730)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v741 : string =
            match v737 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v738) -> (* Some *)
                v738
        let v742 : (unit -> string) = v741.ToLower
        let v743 : string = v742 ()
        let v746 : string = v743.PadLeft (7, ' ')
        let v760 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v761 : string = "inline_colorization::color_yellow"
        let v762 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v761 
        let v763 : string = "&*$0"
        let v764 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v763 
        let v765 : string = "inline_colorization::color_reset"
        let v766 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v765 
        let v767 : string = "\"{v762}{v764}{v766}\""
        let v768 : string = @$"format!(" + v767 + ")"
        let v769 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v768 
        let v770 : string = "fable_library_rust::String_::fromString($0)"
        let v771 : string = Fable.Core.RustInterop.emitRustExpr v769 v770 
        let _v760 = v771 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v772 : string = "inline_colorization::color_yellow"
        let v773 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v772 
        let v774 : string = "&*$0"
        let v775 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v774 
        let v776 : string = "inline_colorization::color_reset"
        let v777 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v776 
        let v778 : string = "\"{v773}{v775}{v777}\""
        let v779 : string = @$"format!(" + v778 + ")"
        let v780 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v779 
        let v781 : string = "fable_library_rust::String_::fromString($0)"
        let v782 : string = Fable.Core.RustInterop.emitRustExpr v780 v781 
        let _v760 = v782 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v783 : string = "inline_colorization::color_yellow"
        let v784 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v783 
        let v785 : string = "&*$0"
        let v786 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v785 
        let v787 : string = "inline_colorization::color_reset"
        let v788 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v787 
        let v789 : string = "\"{v784}{v786}{v788}\""
        let v790 : string = @$"format!(" + v789 + ")"
        let v791 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v790 
        let v792 : string = "fable_library_rust::String_::fromString($0)"
        let v793 : string = Fable.Core.RustInterop.emitRustExpr v791 v792 
        let _v760 = v793 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v794 : string = "\u001b[93m"
        let v795 : string = method9()
        let v796 : string = v794 + v746 
        let v797 : string = v796 + v795 
        let _v760 = v797 
        #endif
#if FABLE_COMPILER_PYTHON
        let v798 : string = "\u001b[93m"
        let v799 : string = method9()
        let v800 : string = v798 + v746 
        let v801 : string = v800 + v799 
        let _v760 = v801 
        #endif
#else
        let v802 : string = "\u001b[93m"
        let v803 : string = method9()
        let v804 : string = v802 + v746 
        let v805 : string = v804 + v803 
        let _v760 = v805 
        #endif
        let v806 : string = _v760 
        let v812 : int64 = v85.l0
        let v813 : string = method10()
        let v814 : Mut4 = {l0 = v813} : Mut4
        let v815 : string = "{ "
        let v816 : string = $"{v815}"
        let v819 : unit = ()
        let v820 : (unit -> unit) = closure12(v814, v816)
        let v821 : unit = (fun () -> v820 (); v819) ()
        let v824 : string = "retry"
        let v825 : string = $"{v824}"
        let v828 : unit = ()
        let v829 : (unit -> unit) = closure12(v814, v825)
        let v830 : unit = (fun () -> v829 (); v828) ()
        let v833 : string = " = "
        let v834 : string = $"{v833}"
        let v837 : unit = ()
        let v838 : (unit -> unit) = closure12(v814, v834)
        let v839 : unit = (fun () -> v838 (); v837) ()
        let v842 : string = $"{24uy}"
        let v845 : unit = ()
        let v846 : (unit -> unit) = closure12(v814, v842)
        let v847 : unit = (fun () -> v846 (); v845) ()
        let v850 : string = "; "
        let v851 : string = $"{v850}"
        let v854 : unit = ()
        let v855 : (unit -> unit) = closure12(v814, v851)
        let v856 : unit = (fun () -> v855 (); v854) ()
        let v859 : string = "error"
        let v860 : string = $"{v859}"
        let v863 : unit = ()
        let v864 : (unit -> unit) = closure12(v814, v860)
        let v865 : unit = (fun () -> v864 (); v863) ()
        let v868 : string = $"{v833}"
        let v871 : unit = ()
        let v872 : (unit -> unit) = closure12(v814, v868)
        let v873 : unit = (fun () -> v872 (); v871) ()
        let v876 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v877 : string = "format!(\"{:#?}\", $0)"
        let v878 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v877 
        let v879 : string = "fable_library_rust::String_::fromString($0)"
        let v880 : string = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let _v876 = v880 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v881 : string = "format!(\"{:#?}\", $0)"
        let v882 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v881 
        let v883 : string = "fable_library_rust::String_::fromString($0)"
        let v884 : string = Fable.Core.RustInterop.emitRustExpr v882 v883 
        let _v876 = v884 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v885 : string = "format!(\"{:#?}\", $0)"
        let v886 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v885 
        let v887 : string = "fable_library_rust::String_::fromString($0)"
        let v888 : string = Fable.Core.RustInterop.emitRustExpr v886 v887 
        let _v876 = v888 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v889 : string = $"%A{v0}"
        let _v876 = v889 
        #endif
#if FABLE_COMPILER_PYTHON
        let v892 : string = $"%A{v0}"
        let _v876 = v892 
        #endif
#else
        let v895 : string = $"%A{v0}"
        let _v876 = v895 
        #endif
        let v898 : string = _v876 
        let v903 : string = $"{v898}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v814, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = " }"
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v814, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = v814.l0
        let v921 : (unit -> string) = closure45()
        let v922 : string = $"{v483} {v806} #{v812} %s{v921 ()} / {v920}"
        let v925 : char list = []
        let v926 : (char list -> (char [])) = List.toArray
        let v927 : (char []) = v926 v925
        let v930 : string = v922.TrimStart v927 
        let v948 : char list = []
        let v949 : char list = '/' :: v948 
        let v952 : char list = ' ' :: v949 
        let v955 : (char list -> (char [])) = List.toArray
        let v956 : (char []) = v955 v952
        let v959 : string = v930.TrimEnd v956 
        let v977 : (string -> unit) = closure14()
        let v978 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v979 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v979 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v980 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v980 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v981 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v981 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v977 v959
        let _v978 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v977 v959
        let _v978 = () 
        #endif
#else
        v977 v959
        let _v978 = () 
        #endif
        _v978 
        let v982 : (string -> unit) = v17.l0
        v982 v959
and closure69 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 3 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_3
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v737 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_3
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_3
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : string = "Warning"
                        US4_0(v730)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v741 : string =
            match v737 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v738) -> (* Some *)
                v738
        let v742 : (unit -> string) = v741.ToLower
        let v743 : string = v742 ()
        let v746 : string = v743.PadLeft (7, ' ')
        let v760 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v761 : string = "inline_colorization::color_yellow"
        let v762 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v761 
        let v763 : string = "&*$0"
        let v764 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v763 
        let v765 : string = "inline_colorization::color_reset"
        let v766 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v765 
        let v767 : string = "\"{v762}{v764}{v766}\""
        let v768 : string = @$"format!(" + v767 + ")"
        let v769 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v768 
        let v770 : string = "fable_library_rust::String_::fromString($0)"
        let v771 : string = Fable.Core.RustInterop.emitRustExpr v769 v770 
        let _v760 = v771 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v772 : string = "inline_colorization::color_yellow"
        let v773 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v772 
        let v774 : string = "&*$0"
        let v775 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v774 
        let v776 : string = "inline_colorization::color_reset"
        let v777 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v776 
        let v778 : string = "\"{v773}{v775}{v777}\""
        let v779 : string = @$"format!(" + v778 + ")"
        let v780 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v779 
        let v781 : string = "fable_library_rust::String_::fromString($0)"
        let v782 : string = Fable.Core.RustInterop.emitRustExpr v780 v781 
        let _v760 = v782 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v783 : string = "inline_colorization::color_yellow"
        let v784 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v783 
        let v785 : string = "&*$0"
        let v786 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v785 
        let v787 : string = "inline_colorization::color_reset"
        let v788 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v787 
        let v789 : string = "\"{v784}{v786}{v788}\""
        let v790 : string = @$"format!(" + v789 + ")"
        let v791 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v790 
        let v792 : string = "fable_library_rust::String_::fromString($0)"
        let v793 : string = Fable.Core.RustInterop.emitRustExpr v791 v792 
        let _v760 = v793 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v794 : string = "\u001b[93m"
        let v795 : string = method9()
        let v796 : string = v794 + v746 
        let v797 : string = v796 + v795 
        let _v760 = v797 
        #endif
#if FABLE_COMPILER_PYTHON
        let v798 : string = "\u001b[93m"
        let v799 : string = method9()
        let v800 : string = v798 + v746 
        let v801 : string = v800 + v799 
        let _v760 = v801 
        #endif
#else
        let v802 : string = "\u001b[93m"
        let v803 : string = method9()
        let v804 : string = v802 + v746 
        let v805 : string = v804 + v803 
        let _v760 = v805 
        #endif
        let v806 : string = _v760 
        let v812 : int64 = v85.l0
        let v813 : string = method10()
        let v814 : Mut4 = {l0 = v813} : Mut4
        let v815 : string = "{ "
        let v816 : string = $"{v815}"
        let v819 : unit = ()
        let v820 : (unit -> unit) = closure12(v814, v816)
        let v821 : unit = (fun () -> v820 (); v819) ()
        let v824 : string = "retry"
        let v825 : string = $"{v824}"
        let v828 : unit = ()
        let v829 : (unit -> unit) = closure12(v814, v825)
        let v830 : unit = (fun () -> v829 (); v828) ()
        let v833 : string = " = "
        let v834 : string = $"{v833}"
        let v837 : unit = ()
        let v838 : (unit -> unit) = closure12(v814, v834)
        let v839 : unit = (fun () -> v838 (); v837) ()
        let v842 : string = $"{25uy}"
        let v845 : unit = ()
        let v846 : (unit -> unit) = closure12(v814, v842)
        let v847 : unit = (fun () -> v846 (); v845) ()
        let v850 : string = "; "
        let v851 : string = $"{v850}"
        let v854 : unit = ()
        let v855 : (unit -> unit) = closure12(v814, v851)
        let v856 : unit = (fun () -> v855 (); v854) ()
        let v859 : string = "error"
        let v860 : string = $"{v859}"
        let v863 : unit = ()
        let v864 : (unit -> unit) = closure12(v814, v860)
        let v865 : unit = (fun () -> v864 (); v863) ()
        let v868 : string = $"{v833}"
        let v871 : unit = ()
        let v872 : (unit -> unit) = closure12(v814, v868)
        let v873 : unit = (fun () -> v872 (); v871) ()
        let v876 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v877 : string = "format!(\"{:#?}\", $0)"
        let v878 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v877 
        let v879 : string = "fable_library_rust::String_::fromString($0)"
        let v880 : string = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let _v876 = v880 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v881 : string = "format!(\"{:#?}\", $0)"
        let v882 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v881 
        let v883 : string = "fable_library_rust::String_::fromString($0)"
        let v884 : string = Fable.Core.RustInterop.emitRustExpr v882 v883 
        let _v876 = v884 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v885 : string = "format!(\"{:#?}\", $0)"
        let v886 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v885 
        let v887 : string = "fable_library_rust::String_::fromString($0)"
        let v888 : string = Fable.Core.RustInterop.emitRustExpr v886 v887 
        let _v876 = v888 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v889 : string = $"%A{v0}"
        let _v876 = v889 
        #endif
#if FABLE_COMPILER_PYTHON
        let v892 : string = $"%A{v0}"
        let _v876 = v892 
        #endif
#else
        let v895 : string = $"%A{v0}"
        let _v876 = v895 
        #endif
        let v898 : string = _v876 
        let v903 : string = $"{v898}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v814, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = " }"
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v814, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = v814.l0
        let v921 : (unit -> string) = closure45()
        let v922 : string = $"{v483} {v806} #{v812} %s{v921 ()} / {v920}"
        let v925 : char list = []
        let v926 : (char list -> (char [])) = List.toArray
        let v927 : (char []) = v926 v925
        let v930 : string = v922.TrimStart v927 
        let v948 : char list = []
        let v949 : char list = '/' :: v948 
        let v952 : char list = ' ' :: v949 
        let v955 : (char list -> (char [])) = List.toArray
        let v956 : (char []) = v955 v952
        let v959 : string = v930.TrimEnd v956 
        let v977 : (string -> unit) = closure14()
        let v978 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v979 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v979 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v980 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v980 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v981 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v981 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v977 v959
        let _v978 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v977 v959
        let _v978 = () 
        #endif
#else
        v977 v959
        let _v978 = () 
        #endif
        _v978 
        let v982 : (string -> unit) = v17.l0
        v982 v959
and closure70 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 3 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_3
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v737 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_3
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_3
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : string = "Warning"
                        US4_0(v730)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v741 : string =
            match v737 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v738) -> (* Some *)
                v738
        let v742 : (unit -> string) = v741.ToLower
        let v743 : string = v742 ()
        let v746 : string = v743.PadLeft (7, ' ')
        let v760 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v761 : string = "inline_colorization::color_yellow"
        let v762 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v761 
        let v763 : string = "&*$0"
        let v764 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v763 
        let v765 : string = "inline_colorization::color_reset"
        let v766 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v765 
        let v767 : string = "\"{v762}{v764}{v766}\""
        let v768 : string = @$"format!(" + v767 + ")"
        let v769 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v768 
        let v770 : string = "fable_library_rust::String_::fromString($0)"
        let v771 : string = Fable.Core.RustInterop.emitRustExpr v769 v770 
        let _v760 = v771 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v772 : string = "inline_colorization::color_yellow"
        let v773 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v772 
        let v774 : string = "&*$0"
        let v775 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v774 
        let v776 : string = "inline_colorization::color_reset"
        let v777 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v776 
        let v778 : string = "\"{v773}{v775}{v777}\""
        let v779 : string = @$"format!(" + v778 + ")"
        let v780 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v779 
        let v781 : string = "fable_library_rust::String_::fromString($0)"
        let v782 : string = Fable.Core.RustInterop.emitRustExpr v780 v781 
        let _v760 = v782 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v783 : string = "inline_colorization::color_yellow"
        let v784 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v783 
        let v785 : string = "&*$0"
        let v786 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v785 
        let v787 : string = "inline_colorization::color_reset"
        let v788 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v787 
        let v789 : string = "\"{v784}{v786}{v788}\""
        let v790 : string = @$"format!(" + v789 + ")"
        let v791 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v790 
        let v792 : string = "fable_library_rust::String_::fromString($0)"
        let v793 : string = Fable.Core.RustInterop.emitRustExpr v791 v792 
        let _v760 = v793 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v794 : string = "\u001b[93m"
        let v795 : string = method9()
        let v796 : string = v794 + v746 
        let v797 : string = v796 + v795 
        let _v760 = v797 
        #endif
#if FABLE_COMPILER_PYTHON
        let v798 : string = "\u001b[93m"
        let v799 : string = method9()
        let v800 : string = v798 + v746 
        let v801 : string = v800 + v799 
        let _v760 = v801 
        #endif
#else
        let v802 : string = "\u001b[93m"
        let v803 : string = method9()
        let v804 : string = v802 + v746 
        let v805 : string = v804 + v803 
        let _v760 = v805 
        #endif
        let v806 : string = _v760 
        let v812 : int64 = v85.l0
        let v813 : string = method10()
        let v814 : Mut4 = {l0 = v813} : Mut4
        let v815 : string = "{ "
        let v816 : string = $"{v815}"
        let v819 : unit = ()
        let v820 : (unit -> unit) = closure12(v814, v816)
        let v821 : unit = (fun () -> v820 (); v819) ()
        let v824 : string = "retry"
        let v825 : string = $"{v824}"
        let v828 : unit = ()
        let v829 : (unit -> unit) = closure12(v814, v825)
        let v830 : unit = (fun () -> v829 (); v828) ()
        let v833 : string = " = "
        let v834 : string = $"{v833}"
        let v837 : unit = ()
        let v838 : (unit -> unit) = closure12(v814, v834)
        let v839 : unit = (fun () -> v838 (); v837) ()
        let v842 : string = $"{26uy}"
        let v845 : unit = ()
        let v846 : (unit -> unit) = closure12(v814, v842)
        let v847 : unit = (fun () -> v846 (); v845) ()
        let v850 : string = "; "
        let v851 : string = $"{v850}"
        let v854 : unit = ()
        let v855 : (unit -> unit) = closure12(v814, v851)
        let v856 : unit = (fun () -> v855 (); v854) ()
        let v859 : string = "error"
        let v860 : string = $"{v859}"
        let v863 : unit = ()
        let v864 : (unit -> unit) = closure12(v814, v860)
        let v865 : unit = (fun () -> v864 (); v863) ()
        let v868 : string = $"{v833}"
        let v871 : unit = ()
        let v872 : (unit -> unit) = closure12(v814, v868)
        let v873 : unit = (fun () -> v872 (); v871) ()
        let v876 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v877 : string = "format!(\"{:#?}\", $0)"
        let v878 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v877 
        let v879 : string = "fable_library_rust::String_::fromString($0)"
        let v880 : string = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let _v876 = v880 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v881 : string = "format!(\"{:#?}\", $0)"
        let v882 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v881 
        let v883 : string = "fable_library_rust::String_::fromString($0)"
        let v884 : string = Fable.Core.RustInterop.emitRustExpr v882 v883 
        let _v876 = v884 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v885 : string = "format!(\"{:#?}\", $0)"
        let v886 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v885 
        let v887 : string = "fable_library_rust::String_::fromString($0)"
        let v888 : string = Fable.Core.RustInterop.emitRustExpr v886 v887 
        let _v876 = v888 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v889 : string = $"%A{v0}"
        let _v876 = v889 
        #endif
#if FABLE_COMPILER_PYTHON
        let v892 : string = $"%A{v0}"
        let _v876 = v892 
        #endif
#else
        let v895 : string = $"%A{v0}"
        let _v876 = v895 
        #endif
        let v898 : string = _v876 
        let v903 : string = $"{v898}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v814, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = " }"
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v814, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = v814.l0
        let v921 : (unit -> string) = closure45()
        let v922 : string = $"{v483} {v806} #{v812} %s{v921 ()} / {v920}"
        let v925 : char list = []
        let v926 : (char list -> (char [])) = List.toArray
        let v927 : (char []) = v926 v925
        let v930 : string = v922.TrimStart v927 
        let v948 : char list = []
        let v949 : char list = '/' :: v948 
        let v952 : char list = ' ' :: v949 
        let v955 : (char list -> (char [])) = List.toArray
        let v956 : (char []) = v955 v952
        let v959 : string = v930.TrimEnd v956 
        let v977 : (string -> unit) = closure14()
        let v978 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v979 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v979 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v980 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v980 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v981 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v981 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v977 v959
        let _v978 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v977 v959
        let _v978 = () 
        #endif
#else
        v977 v959
        let _v978 = () 
        #endif
        _v978 
        let v982 : (string -> unit) = v17.l0
        v982 v959
and closure71 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 3 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_3
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v737 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_3
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_3
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : string = "Warning"
                        US4_0(v730)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v741 : string =
            match v737 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v738) -> (* Some *)
                v738
        let v742 : (unit -> string) = v741.ToLower
        let v743 : string = v742 ()
        let v746 : string = v743.PadLeft (7, ' ')
        let v760 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v761 : string = "inline_colorization::color_yellow"
        let v762 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v761 
        let v763 : string = "&*$0"
        let v764 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v763 
        let v765 : string = "inline_colorization::color_reset"
        let v766 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v765 
        let v767 : string = "\"{v762}{v764}{v766}\""
        let v768 : string = @$"format!(" + v767 + ")"
        let v769 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v768 
        let v770 : string = "fable_library_rust::String_::fromString($0)"
        let v771 : string = Fable.Core.RustInterop.emitRustExpr v769 v770 
        let _v760 = v771 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v772 : string = "inline_colorization::color_yellow"
        let v773 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v772 
        let v774 : string = "&*$0"
        let v775 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v774 
        let v776 : string = "inline_colorization::color_reset"
        let v777 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v776 
        let v778 : string = "\"{v773}{v775}{v777}\""
        let v779 : string = @$"format!(" + v778 + ")"
        let v780 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v779 
        let v781 : string = "fable_library_rust::String_::fromString($0)"
        let v782 : string = Fable.Core.RustInterop.emitRustExpr v780 v781 
        let _v760 = v782 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v783 : string = "inline_colorization::color_yellow"
        let v784 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v783 
        let v785 : string = "&*$0"
        let v786 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v785 
        let v787 : string = "inline_colorization::color_reset"
        let v788 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v787 
        let v789 : string = "\"{v784}{v786}{v788}\""
        let v790 : string = @$"format!(" + v789 + ")"
        let v791 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v790 
        let v792 : string = "fable_library_rust::String_::fromString($0)"
        let v793 : string = Fable.Core.RustInterop.emitRustExpr v791 v792 
        let _v760 = v793 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v794 : string = "\u001b[93m"
        let v795 : string = method9()
        let v796 : string = v794 + v746 
        let v797 : string = v796 + v795 
        let _v760 = v797 
        #endif
#if FABLE_COMPILER_PYTHON
        let v798 : string = "\u001b[93m"
        let v799 : string = method9()
        let v800 : string = v798 + v746 
        let v801 : string = v800 + v799 
        let _v760 = v801 
        #endif
#else
        let v802 : string = "\u001b[93m"
        let v803 : string = method9()
        let v804 : string = v802 + v746 
        let v805 : string = v804 + v803 
        let _v760 = v805 
        #endif
        let v806 : string = _v760 
        let v812 : int64 = v85.l0
        let v813 : string = method10()
        let v814 : Mut4 = {l0 = v813} : Mut4
        let v815 : string = "{ "
        let v816 : string = $"{v815}"
        let v819 : unit = ()
        let v820 : (unit -> unit) = closure12(v814, v816)
        let v821 : unit = (fun () -> v820 (); v819) ()
        let v824 : string = "retry"
        let v825 : string = $"{v824}"
        let v828 : unit = ()
        let v829 : (unit -> unit) = closure12(v814, v825)
        let v830 : unit = (fun () -> v829 (); v828) ()
        let v833 : string = " = "
        let v834 : string = $"{v833}"
        let v837 : unit = ()
        let v838 : (unit -> unit) = closure12(v814, v834)
        let v839 : unit = (fun () -> v838 (); v837) ()
        let v842 : string = $"{27uy}"
        let v845 : unit = ()
        let v846 : (unit -> unit) = closure12(v814, v842)
        let v847 : unit = (fun () -> v846 (); v845) ()
        let v850 : string = "; "
        let v851 : string = $"{v850}"
        let v854 : unit = ()
        let v855 : (unit -> unit) = closure12(v814, v851)
        let v856 : unit = (fun () -> v855 (); v854) ()
        let v859 : string = "error"
        let v860 : string = $"{v859}"
        let v863 : unit = ()
        let v864 : (unit -> unit) = closure12(v814, v860)
        let v865 : unit = (fun () -> v864 (); v863) ()
        let v868 : string = $"{v833}"
        let v871 : unit = ()
        let v872 : (unit -> unit) = closure12(v814, v868)
        let v873 : unit = (fun () -> v872 (); v871) ()
        let v876 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v877 : string = "format!(\"{:#?}\", $0)"
        let v878 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v877 
        let v879 : string = "fable_library_rust::String_::fromString($0)"
        let v880 : string = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let _v876 = v880 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v881 : string = "format!(\"{:#?}\", $0)"
        let v882 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v881 
        let v883 : string = "fable_library_rust::String_::fromString($0)"
        let v884 : string = Fable.Core.RustInterop.emitRustExpr v882 v883 
        let _v876 = v884 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v885 : string = "format!(\"{:#?}\", $0)"
        let v886 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v885 
        let v887 : string = "fable_library_rust::String_::fromString($0)"
        let v888 : string = Fable.Core.RustInterop.emitRustExpr v886 v887 
        let _v876 = v888 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v889 : string = $"%A{v0}"
        let _v876 = v889 
        #endif
#if FABLE_COMPILER_PYTHON
        let v892 : string = $"%A{v0}"
        let _v876 = v892 
        #endif
#else
        let v895 : string = $"%A{v0}"
        let _v876 = v895 
        #endif
        let v898 : string = _v876 
        let v903 : string = $"{v898}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v814, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = " }"
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v814, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = v814.l0
        let v921 : (unit -> string) = closure45()
        let v922 : string = $"{v483} {v806} #{v812} %s{v921 ()} / {v920}"
        let v925 : char list = []
        let v926 : (char list -> (char [])) = List.toArray
        let v927 : (char []) = v926 v925
        let v930 : string = v922.TrimStart v927 
        let v948 : char list = []
        let v949 : char list = '/' :: v948 
        let v952 : char list = ' ' :: v949 
        let v955 : (char list -> (char [])) = List.toArray
        let v956 : (char []) = v955 v952
        let v959 : string = v930.TrimEnd v956 
        let v977 : (string -> unit) = closure14()
        let v978 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v979 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v979 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v980 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v980 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v981 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v981 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v977 v959
        let _v978 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v977 v959
        let _v978 = () 
        #endif
#else
        v977 v959
        let _v978 = () 
        #endif
        _v978 
        let v982 : (string -> unit) = v17.l0
        v982 v959
and closure72 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 3 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_3
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v737 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_3
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_3
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : string = "Warning"
                        US4_0(v730)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v741 : string =
            match v737 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v738) -> (* Some *)
                v738
        let v742 : (unit -> string) = v741.ToLower
        let v743 : string = v742 ()
        let v746 : string = v743.PadLeft (7, ' ')
        let v760 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v761 : string = "inline_colorization::color_yellow"
        let v762 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v761 
        let v763 : string = "&*$0"
        let v764 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v763 
        let v765 : string = "inline_colorization::color_reset"
        let v766 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v765 
        let v767 : string = "\"{v762}{v764}{v766}\""
        let v768 : string = @$"format!(" + v767 + ")"
        let v769 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v768 
        let v770 : string = "fable_library_rust::String_::fromString($0)"
        let v771 : string = Fable.Core.RustInterop.emitRustExpr v769 v770 
        let _v760 = v771 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v772 : string = "inline_colorization::color_yellow"
        let v773 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v772 
        let v774 : string = "&*$0"
        let v775 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v774 
        let v776 : string = "inline_colorization::color_reset"
        let v777 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v776 
        let v778 : string = "\"{v773}{v775}{v777}\""
        let v779 : string = @$"format!(" + v778 + ")"
        let v780 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v779 
        let v781 : string = "fable_library_rust::String_::fromString($0)"
        let v782 : string = Fable.Core.RustInterop.emitRustExpr v780 v781 
        let _v760 = v782 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v783 : string = "inline_colorization::color_yellow"
        let v784 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v783 
        let v785 : string = "&*$0"
        let v786 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v785 
        let v787 : string = "inline_colorization::color_reset"
        let v788 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v787 
        let v789 : string = "\"{v784}{v786}{v788}\""
        let v790 : string = @$"format!(" + v789 + ")"
        let v791 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v790 
        let v792 : string = "fable_library_rust::String_::fromString($0)"
        let v793 : string = Fable.Core.RustInterop.emitRustExpr v791 v792 
        let _v760 = v793 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v794 : string = "\u001b[93m"
        let v795 : string = method9()
        let v796 : string = v794 + v746 
        let v797 : string = v796 + v795 
        let _v760 = v797 
        #endif
#if FABLE_COMPILER_PYTHON
        let v798 : string = "\u001b[93m"
        let v799 : string = method9()
        let v800 : string = v798 + v746 
        let v801 : string = v800 + v799 
        let _v760 = v801 
        #endif
#else
        let v802 : string = "\u001b[93m"
        let v803 : string = method9()
        let v804 : string = v802 + v746 
        let v805 : string = v804 + v803 
        let _v760 = v805 
        #endif
        let v806 : string = _v760 
        let v812 : int64 = v85.l0
        let v813 : string = method10()
        let v814 : Mut4 = {l0 = v813} : Mut4
        let v815 : string = "{ "
        let v816 : string = $"{v815}"
        let v819 : unit = ()
        let v820 : (unit -> unit) = closure12(v814, v816)
        let v821 : unit = (fun () -> v820 (); v819) ()
        let v824 : string = "retry"
        let v825 : string = $"{v824}"
        let v828 : unit = ()
        let v829 : (unit -> unit) = closure12(v814, v825)
        let v830 : unit = (fun () -> v829 (); v828) ()
        let v833 : string = " = "
        let v834 : string = $"{v833}"
        let v837 : unit = ()
        let v838 : (unit -> unit) = closure12(v814, v834)
        let v839 : unit = (fun () -> v838 (); v837) ()
        let v842 : string = $"{28uy}"
        let v845 : unit = ()
        let v846 : (unit -> unit) = closure12(v814, v842)
        let v847 : unit = (fun () -> v846 (); v845) ()
        let v850 : string = "; "
        let v851 : string = $"{v850}"
        let v854 : unit = ()
        let v855 : (unit -> unit) = closure12(v814, v851)
        let v856 : unit = (fun () -> v855 (); v854) ()
        let v859 : string = "error"
        let v860 : string = $"{v859}"
        let v863 : unit = ()
        let v864 : (unit -> unit) = closure12(v814, v860)
        let v865 : unit = (fun () -> v864 (); v863) ()
        let v868 : string = $"{v833}"
        let v871 : unit = ()
        let v872 : (unit -> unit) = closure12(v814, v868)
        let v873 : unit = (fun () -> v872 (); v871) ()
        let v876 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v877 : string = "format!(\"{:#?}\", $0)"
        let v878 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v877 
        let v879 : string = "fable_library_rust::String_::fromString($0)"
        let v880 : string = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let _v876 = v880 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v881 : string = "format!(\"{:#?}\", $0)"
        let v882 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v881 
        let v883 : string = "fable_library_rust::String_::fromString($0)"
        let v884 : string = Fable.Core.RustInterop.emitRustExpr v882 v883 
        let _v876 = v884 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v885 : string = "format!(\"{:#?}\", $0)"
        let v886 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v885 
        let v887 : string = "fable_library_rust::String_::fromString($0)"
        let v888 : string = Fable.Core.RustInterop.emitRustExpr v886 v887 
        let _v876 = v888 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v889 : string = $"%A{v0}"
        let _v876 = v889 
        #endif
#if FABLE_COMPILER_PYTHON
        let v892 : string = $"%A{v0}"
        let _v876 = v892 
        #endif
#else
        let v895 : string = $"%A{v0}"
        let _v876 = v895 
        #endif
        let v898 : string = _v876 
        let v903 : string = $"{v898}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v814, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = " }"
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v814, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = v814.l0
        let v921 : (unit -> string) = closure45()
        let v922 : string = $"{v483} {v806} #{v812} %s{v921 ()} / {v920}"
        let v925 : char list = []
        let v926 : (char list -> (char [])) = List.toArray
        let v927 : (char []) = v926 v925
        let v930 : string = v922.TrimStart v927 
        let v948 : char list = []
        let v949 : char list = '/' :: v948 
        let v952 : char list = ' ' :: v949 
        let v955 : (char list -> (char [])) = List.toArray
        let v956 : (char []) = v955 v952
        let v959 : string = v930.TrimEnd v956 
        let v977 : (string -> unit) = closure14()
        let v978 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v979 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v979 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v980 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v980 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v981 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v981 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v977 v959
        let _v978 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v977 v959
        let _v978 = () 
        #endif
#else
        v977 v959
        let _v978 = () 
        #endif
        _v978 
        let v982 : (string -> unit) = v17.l0
        v982 v959
and closure73 (v0 : std_string_String) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 3 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_3
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v737 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_3
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_3
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : string = "Warning"
                        US4_0(v730)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v741 : string =
            match v737 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v738) -> (* Some *)
                v738
        let v742 : (unit -> string) = v741.ToLower
        let v743 : string = v742 ()
        let v746 : string = v743.PadLeft (7, ' ')
        let v760 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v761 : string = "inline_colorization::color_yellow"
        let v762 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v761 
        let v763 : string = "&*$0"
        let v764 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v763 
        let v765 : string = "inline_colorization::color_reset"
        let v766 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v765 
        let v767 : string = "\"{v762}{v764}{v766}\""
        let v768 : string = @$"format!(" + v767 + ")"
        let v769 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v768 
        let v770 : string = "fable_library_rust::String_::fromString($0)"
        let v771 : string = Fable.Core.RustInterop.emitRustExpr v769 v770 
        let _v760 = v771 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v772 : string = "inline_colorization::color_yellow"
        let v773 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v772 
        let v774 : string = "&*$0"
        let v775 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v774 
        let v776 : string = "inline_colorization::color_reset"
        let v777 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v776 
        let v778 : string = "\"{v773}{v775}{v777}\""
        let v779 : string = @$"format!(" + v778 + ")"
        let v780 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v779 
        let v781 : string = "fable_library_rust::String_::fromString($0)"
        let v782 : string = Fable.Core.RustInterop.emitRustExpr v780 v781 
        let _v760 = v782 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v783 : string = "inline_colorization::color_yellow"
        let v784 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v783 
        let v785 : string = "&*$0"
        let v786 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v785 
        let v787 : string = "inline_colorization::color_reset"
        let v788 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v787 
        let v789 : string = "\"{v784}{v786}{v788}\""
        let v790 : string = @$"format!(" + v789 + ")"
        let v791 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v790 
        let v792 : string = "fable_library_rust::String_::fromString($0)"
        let v793 : string = Fable.Core.RustInterop.emitRustExpr v791 v792 
        let _v760 = v793 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v794 : string = "\u001b[93m"
        let v795 : string = method9()
        let v796 : string = v794 + v746 
        let v797 : string = v796 + v795 
        let _v760 = v797 
        #endif
#if FABLE_COMPILER_PYTHON
        let v798 : string = "\u001b[93m"
        let v799 : string = method9()
        let v800 : string = v798 + v746 
        let v801 : string = v800 + v799 
        let _v760 = v801 
        #endif
#else
        let v802 : string = "\u001b[93m"
        let v803 : string = method9()
        let v804 : string = v802 + v746 
        let v805 : string = v804 + v803 
        let _v760 = v805 
        #endif
        let v806 : string = _v760 
        let v812 : int64 = v85.l0
        let v813 : string = method10()
        let v814 : Mut4 = {l0 = v813} : Mut4
        let v815 : string = "{ "
        let v816 : string = $"{v815}"
        let v819 : unit = ()
        let v820 : (unit -> unit) = closure12(v814, v816)
        let v821 : unit = (fun () -> v820 (); v819) ()
        let v824 : string = "retry"
        let v825 : string = $"{v824}"
        let v828 : unit = ()
        let v829 : (unit -> unit) = closure12(v814, v825)
        let v830 : unit = (fun () -> v829 (); v828) ()
        let v833 : string = " = "
        let v834 : string = $"{v833}"
        let v837 : unit = ()
        let v838 : (unit -> unit) = closure12(v814, v834)
        let v839 : unit = (fun () -> v838 (); v837) ()
        let v842 : string = $"{29uy}"
        let v845 : unit = ()
        let v846 : (unit -> unit) = closure12(v814, v842)
        let v847 : unit = (fun () -> v846 (); v845) ()
        let v850 : string = "; "
        let v851 : string = $"{v850}"
        let v854 : unit = ()
        let v855 : (unit -> unit) = closure12(v814, v851)
        let v856 : unit = (fun () -> v855 (); v854) ()
        let v859 : string = "error"
        let v860 : string = $"{v859}"
        let v863 : unit = ()
        let v864 : (unit -> unit) = closure12(v814, v860)
        let v865 : unit = (fun () -> v864 (); v863) ()
        let v868 : string = $"{v833}"
        let v871 : unit = ()
        let v872 : (unit -> unit) = closure12(v814, v868)
        let v873 : unit = (fun () -> v872 (); v871) ()
        let v876 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v877 : string = "format!(\"{:#?}\", $0)"
        let v878 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v877 
        let v879 : string = "fable_library_rust::String_::fromString($0)"
        let v880 : string = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let _v876 = v880 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v881 : string = "format!(\"{:#?}\", $0)"
        let v882 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v881 
        let v883 : string = "fable_library_rust::String_::fromString($0)"
        let v884 : string = Fable.Core.RustInterop.emitRustExpr v882 v883 
        let _v876 = v884 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v885 : string = "format!(\"{:#?}\", $0)"
        let v886 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v885 
        let v887 : string = "fable_library_rust::String_::fromString($0)"
        let v888 : string = Fable.Core.RustInterop.emitRustExpr v886 v887 
        let _v876 = v888 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v889 : string = $"%A{v0}"
        let _v876 = v889 
        #endif
#if FABLE_COMPILER_PYTHON
        let v892 : string = $"%A{v0}"
        let _v876 = v892 
        #endif
#else
        let v895 : string = $"%A{v0}"
        let _v876 = v895 
        #endif
        let v898 : string = _v876 
        let v903 : string = $"{v898}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v814, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = " }"
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v814, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = v814.l0
        let v921 : (unit -> string) = closure45()
        let v922 : string = $"{v483} {v806} #{v812} %s{v921 ()} / {v920}"
        let v925 : char list = []
        let v926 : (char list -> (char [])) = List.toArray
        let v927 : (char []) = v926 v925
        let v930 : string = v922.TrimStart v927 
        let v948 : char list = []
        let v949 : char list = '/' :: v948 
        let v952 : char list = ' ' :: v949 
        let v955 : (char list -> (char [])) = List.toArray
        let v956 : (char []) = v955 v952
        let v959 : string = v930.TrimEnd v956 
        let v977 : (string -> unit) = closure14()
        let v978 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v979 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v979 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v980 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v980 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v981 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v959 v981 
        let _v978 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v977 v959
        let _v978 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v977 v959
        let _v978 = () 
        #endif
#else
        v977 v959
        let _v978 = () 
        #endif
        _v978 
        let v982 : (string -> unit) = v17.l0
        v982 v959
and method20 () : uint8 =
    30uy
and method21 (v0 : uint8) : US7 =
    US7_1(v0)
and method22 () : uint8 =
    29uy
and method23 (v0 : uint8) : US7 =
    US7_0(v0)
and closure75 () () : string =
    let v0 : string = "spiral_wasm.run / Ok (Some error)"
    v0
and closure74 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_4
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v798 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_4
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_4
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v731 : string = method14()
                        let _v730 = v731 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v732 : string = method14()
                        let _v730 = v732 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v733 : string = method14()
                        let _v730 = v733 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v734 : string = method15()
                        let _v730 = v734 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v735 : string = method15()
                        let _v730 = v735 
                        #endif
#else
                        let v736 : string = method15()
                        let _v730 = v736 
                        #endif
                        let v737 : string = _v730 
                        let v742 : string = method10()
                        let v743 : Mut4 = {l0 = v742} : Mut4
                        let v744 : US3 = US3_3
                        let v745 : string = $"%A{v744}"
                        let v749 : string = $"{v745}"
                        let v752 : unit = ()
                        let v753 : (unit -> unit) = closure12(v743, v749)
                        let v754 : unit = (fun () -> v753 (); v752) ()
                        let v757 : string = v743.l0
                        let v758 : (string []) = v757.Split v737 
                        let v761 : string = v758.[int 0]
                        let v764 : string = method10()
                        let v765 : Mut4 = {l0 = v764} : Mut4
                        let v766 : US3 = US3_4
                        let v767 : string = $"%A{v766}"
                        let v771 : string = $"{v767}"
                        let v774 : unit = ()
                        let v775 : (unit -> unit) = closure12(v765, v771)
                        let v776 : unit = (fun () -> v775 (); v774) ()
                        let v779 : string = v765.l0
                        let v780 : bool = v779.StartsWith v761 
                        let v786 : US4 =
                            if v780 then
                                let v783 : string = "Warning"
                                US4_0(v783)
                            else
                                US4_1
                        match v786 with
                        | US4_1 -> (* None *)
                            let v789 : string = "Critical"
                            US4_0(v789)
                        | US4_0(v787) -> (* Some *)
                            US4_0(v787)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v802 : string =
            match v798 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v799) -> (* Some *)
                v799
        let v803 : (unit -> string) = v802.ToLower
        let v804 : string = v803 ()
        let v807 : string = v804.PadLeft (7, ' ')
        let v821 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v822 : string = "inline_colorization::color_bright_red"
        let v823 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v822 
        let v824 : string = "&*$0"
        let v825 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v824 
        let v826 : string = "inline_colorization::color_reset"
        let v827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v826 
        let v828 : string = "\"{v823}{v825}{v827}\""
        let v829 : string = @$"format!(" + v828 + ")"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "fable_library_rust::String_::fromString($0)"
        let v832 : string = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let _v821 = v832 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v833 : string = "inline_colorization::color_bright_red"
        let v834 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "&*$0"
        let v836 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v835 
        let v837 : string = "inline_colorization::color_reset"
        let v838 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "\"{v834}{v836}{v838}\""
        let v840 : string = @$"format!(" + v839 + ")"
        let v841 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "fable_library_rust::String_::fromString($0)"
        let v843 : string = Fable.Core.RustInterop.emitRustExpr v841 v842 
        let _v821 = v843 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v844 : string = "inline_colorization::color_bright_red"
        let v845 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v844 
        let v846 : string = "&*$0"
        let v847 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v846 
        let v848 : string = "inline_colorization::color_reset"
        let v849 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v848 
        let v850 : string = "\"{v845}{v847}{v849}\""
        let v851 : string = @$"format!(" + v850 + ")"
        let v852 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "fable_library_rust::String_::fromString($0)"
        let v854 : string = Fable.Core.RustInterop.emitRustExpr v852 v853 
        let _v821 = v854 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v855 : string = "\u001b[91m"
        let v856 : string = method9()
        let v857 : string = v855 + v807 
        let v858 : string = v857 + v856 
        let _v821 = v858 
        #endif
#if FABLE_COMPILER_PYTHON
        let v859 : string = "\u001b[91m"
        let v860 : string = method9()
        let v861 : string = v859 + v807 
        let v862 : string = v861 + v860 
        let _v821 = v862 
        #endif
#else
        let v863 : string = "\u001b[91m"
        let v864 : string = method9()
        let v865 : string = v863 + v807 
        let v866 : string = v865 + v864 
        let _v821 = v866 
        #endif
        let v867 : string = _v821 
        let v873 : int64 = v85.l0
        let v874 : string = method10()
        let v875 : Mut4 = {l0 = v874} : Mut4
        let v876 : string = "{ "
        let v877 : string = $"{v876}"
        let v880 : unit = ()
        let v881 : (unit -> unit) = closure12(v875, v877)
        let v882 : unit = (fun () -> v881 (); v880) ()
        let v885 : string = "retry"
        let v886 : string = $"{v885}"
        let v889 : unit = ()
        let v890 : (unit -> unit) = closure12(v875, v886)
        let v891 : unit = (fun () -> v890 (); v889) ()
        let v894 : string = " = "
        let v895 : string = $"{v894}"
        let v898 : unit = ()
        let v899 : (unit -> unit) = closure12(v875, v895)
        let v900 : unit = (fun () -> v899 (); v898) ()
        let v903 : string = $"{29uy}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v875, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = "; "
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v875, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = "error"
        let v921 : string = $"{v920}"
        let v924 : unit = ()
        let v925 : (unit -> unit) = closure12(v875, v921)
        let v926 : unit = (fun () -> v925 (); v924) ()
        let v929 : string = $"{v894}"
        let v932 : unit = ()
        let v933 : (unit -> unit) = closure12(v875, v929)
        let v934 : unit = (fun () -> v933 (); v932) ()
        let v937 : string = $"{v0}"
        let v940 : unit = ()
        let v941 : (unit -> unit) = closure12(v875, v937)
        let v942 : unit = (fun () -> v941 (); v940) ()
        let v945 : string = " }"
        let v946 : string = $"{v945}"
        let v949 : unit = ()
        let v950 : (unit -> unit) = closure12(v875, v946)
        let v951 : unit = (fun () -> v950 (); v949) ()
        let v954 : string = v875.l0
        let v955 : (unit -> string) = closure75()
        let v956 : string = $"{v483} {v867} #{v873} %s{v955 ()} / {v954}"
        let v959 : char list = []
        let v960 : (char list -> (char [])) = List.toArray
        let v961 : (char []) = v960 v959
        let v964 : string = v956.TrimStart v961 
        let v982 : char list = []
        let v983 : char list = '/' :: v982 
        let v986 : char list = ' ' :: v983 
        let v989 : (char list -> (char [])) = List.toArray
        let v990 : (char []) = v989 v986
        let v993 : string = v964.TrimEnd v990 
        let v1011 : (string -> unit) = closure14()
        let v1012 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1013 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1013 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1014 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1014 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1015 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1015 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1011 v993
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1011 v993
        let _v1012 = () 
        #endif
#else
        v1011 v993
        let _v1012 = () 
        #endif
        _v1012 
        let v1016 : (string -> unit) = v17.l0
        v1016 v993
and method24 () : uint8 =
    28uy
and closure76 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_4
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v798 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_4
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_4
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v731 : string = method14()
                        let _v730 = v731 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v732 : string = method14()
                        let _v730 = v732 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v733 : string = method14()
                        let _v730 = v733 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v734 : string = method15()
                        let _v730 = v734 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v735 : string = method15()
                        let _v730 = v735 
                        #endif
#else
                        let v736 : string = method15()
                        let _v730 = v736 
                        #endif
                        let v737 : string = _v730 
                        let v742 : string = method10()
                        let v743 : Mut4 = {l0 = v742} : Mut4
                        let v744 : US3 = US3_3
                        let v745 : string = $"%A{v744}"
                        let v749 : string = $"{v745}"
                        let v752 : unit = ()
                        let v753 : (unit -> unit) = closure12(v743, v749)
                        let v754 : unit = (fun () -> v753 (); v752) ()
                        let v757 : string = v743.l0
                        let v758 : (string []) = v757.Split v737 
                        let v761 : string = v758.[int 0]
                        let v764 : string = method10()
                        let v765 : Mut4 = {l0 = v764} : Mut4
                        let v766 : US3 = US3_4
                        let v767 : string = $"%A{v766}"
                        let v771 : string = $"{v767}"
                        let v774 : unit = ()
                        let v775 : (unit -> unit) = closure12(v765, v771)
                        let v776 : unit = (fun () -> v775 (); v774) ()
                        let v779 : string = v765.l0
                        let v780 : bool = v779.StartsWith v761 
                        let v786 : US4 =
                            if v780 then
                                let v783 : string = "Warning"
                                US4_0(v783)
                            else
                                US4_1
                        match v786 with
                        | US4_1 -> (* None *)
                            let v789 : string = "Critical"
                            US4_0(v789)
                        | US4_0(v787) -> (* Some *)
                            US4_0(v787)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v802 : string =
            match v798 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v799) -> (* Some *)
                v799
        let v803 : (unit -> string) = v802.ToLower
        let v804 : string = v803 ()
        let v807 : string = v804.PadLeft (7, ' ')
        let v821 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v822 : string = "inline_colorization::color_bright_red"
        let v823 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v822 
        let v824 : string = "&*$0"
        let v825 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v824 
        let v826 : string = "inline_colorization::color_reset"
        let v827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v826 
        let v828 : string = "\"{v823}{v825}{v827}\""
        let v829 : string = @$"format!(" + v828 + ")"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "fable_library_rust::String_::fromString($0)"
        let v832 : string = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let _v821 = v832 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v833 : string = "inline_colorization::color_bright_red"
        let v834 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "&*$0"
        let v836 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v835 
        let v837 : string = "inline_colorization::color_reset"
        let v838 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "\"{v834}{v836}{v838}\""
        let v840 : string = @$"format!(" + v839 + ")"
        let v841 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "fable_library_rust::String_::fromString($0)"
        let v843 : string = Fable.Core.RustInterop.emitRustExpr v841 v842 
        let _v821 = v843 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v844 : string = "inline_colorization::color_bright_red"
        let v845 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v844 
        let v846 : string = "&*$0"
        let v847 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v846 
        let v848 : string = "inline_colorization::color_reset"
        let v849 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v848 
        let v850 : string = "\"{v845}{v847}{v849}\""
        let v851 : string = @$"format!(" + v850 + ")"
        let v852 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "fable_library_rust::String_::fromString($0)"
        let v854 : string = Fable.Core.RustInterop.emitRustExpr v852 v853 
        let _v821 = v854 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v855 : string = "\u001b[91m"
        let v856 : string = method9()
        let v857 : string = v855 + v807 
        let v858 : string = v857 + v856 
        let _v821 = v858 
        #endif
#if FABLE_COMPILER_PYTHON
        let v859 : string = "\u001b[91m"
        let v860 : string = method9()
        let v861 : string = v859 + v807 
        let v862 : string = v861 + v860 
        let _v821 = v862 
        #endif
#else
        let v863 : string = "\u001b[91m"
        let v864 : string = method9()
        let v865 : string = v863 + v807 
        let v866 : string = v865 + v864 
        let _v821 = v866 
        #endif
        let v867 : string = _v821 
        let v873 : int64 = v85.l0
        let v874 : string = method10()
        let v875 : Mut4 = {l0 = v874} : Mut4
        let v876 : string = "{ "
        let v877 : string = $"{v876}"
        let v880 : unit = ()
        let v881 : (unit -> unit) = closure12(v875, v877)
        let v882 : unit = (fun () -> v881 (); v880) ()
        let v885 : string = "retry"
        let v886 : string = $"{v885}"
        let v889 : unit = ()
        let v890 : (unit -> unit) = closure12(v875, v886)
        let v891 : unit = (fun () -> v890 (); v889) ()
        let v894 : string = " = "
        let v895 : string = $"{v894}"
        let v898 : unit = ()
        let v899 : (unit -> unit) = closure12(v875, v895)
        let v900 : unit = (fun () -> v899 (); v898) ()
        let v903 : string = $"{28uy}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v875, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = "; "
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v875, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = "error"
        let v921 : string = $"{v920}"
        let v924 : unit = ()
        let v925 : (unit -> unit) = closure12(v875, v921)
        let v926 : unit = (fun () -> v925 (); v924) ()
        let v929 : string = $"{v894}"
        let v932 : unit = ()
        let v933 : (unit -> unit) = closure12(v875, v929)
        let v934 : unit = (fun () -> v933 (); v932) ()
        let v937 : string = $"{v0}"
        let v940 : unit = ()
        let v941 : (unit -> unit) = closure12(v875, v937)
        let v942 : unit = (fun () -> v941 (); v940) ()
        let v945 : string = " }"
        let v946 : string = $"{v945}"
        let v949 : unit = ()
        let v950 : (unit -> unit) = closure12(v875, v946)
        let v951 : unit = (fun () -> v950 (); v949) ()
        let v954 : string = v875.l0
        let v955 : (unit -> string) = closure75()
        let v956 : string = $"{v483} {v867} #{v873} %s{v955 ()} / {v954}"
        let v959 : char list = []
        let v960 : (char list -> (char [])) = List.toArray
        let v961 : (char []) = v960 v959
        let v964 : string = v956.TrimStart v961 
        let v982 : char list = []
        let v983 : char list = '/' :: v982 
        let v986 : char list = ' ' :: v983 
        let v989 : (char list -> (char [])) = List.toArray
        let v990 : (char []) = v989 v986
        let v993 : string = v964.TrimEnd v990 
        let v1011 : (string -> unit) = closure14()
        let v1012 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1013 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1013 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1014 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1014 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1015 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1015 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1011 v993
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1011 v993
        let _v1012 = () 
        #endif
#else
        v1011 v993
        let _v1012 = () 
        #endif
        _v1012 
        let v1016 : (string -> unit) = v17.l0
        v1016 v993
and method25 () : uint8 =
    27uy
and closure77 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_4
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v798 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_4
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_4
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v731 : string = method14()
                        let _v730 = v731 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v732 : string = method14()
                        let _v730 = v732 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v733 : string = method14()
                        let _v730 = v733 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v734 : string = method15()
                        let _v730 = v734 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v735 : string = method15()
                        let _v730 = v735 
                        #endif
#else
                        let v736 : string = method15()
                        let _v730 = v736 
                        #endif
                        let v737 : string = _v730 
                        let v742 : string = method10()
                        let v743 : Mut4 = {l0 = v742} : Mut4
                        let v744 : US3 = US3_3
                        let v745 : string = $"%A{v744}"
                        let v749 : string = $"{v745}"
                        let v752 : unit = ()
                        let v753 : (unit -> unit) = closure12(v743, v749)
                        let v754 : unit = (fun () -> v753 (); v752) ()
                        let v757 : string = v743.l0
                        let v758 : (string []) = v757.Split v737 
                        let v761 : string = v758.[int 0]
                        let v764 : string = method10()
                        let v765 : Mut4 = {l0 = v764} : Mut4
                        let v766 : US3 = US3_4
                        let v767 : string = $"%A{v766}"
                        let v771 : string = $"{v767}"
                        let v774 : unit = ()
                        let v775 : (unit -> unit) = closure12(v765, v771)
                        let v776 : unit = (fun () -> v775 (); v774) ()
                        let v779 : string = v765.l0
                        let v780 : bool = v779.StartsWith v761 
                        let v786 : US4 =
                            if v780 then
                                let v783 : string = "Warning"
                                US4_0(v783)
                            else
                                US4_1
                        match v786 with
                        | US4_1 -> (* None *)
                            let v789 : string = "Critical"
                            US4_0(v789)
                        | US4_0(v787) -> (* Some *)
                            US4_0(v787)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v802 : string =
            match v798 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v799) -> (* Some *)
                v799
        let v803 : (unit -> string) = v802.ToLower
        let v804 : string = v803 ()
        let v807 : string = v804.PadLeft (7, ' ')
        let v821 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v822 : string = "inline_colorization::color_bright_red"
        let v823 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v822 
        let v824 : string = "&*$0"
        let v825 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v824 
        let v826 : string = "inline_colorization::color_reset"
        let v827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v826 
        let v828 : string = "\"{v823}{v825}{v827}\""
        let v829 : string = @$"format!(" + v828 + ")"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "fable_library_rust::String_::fromString($0)"
        let v832 : string = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let _v821 = v832 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v833 : string = "inline_colorization::color_bright_red"
        let v834 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "&*$0"
        let v836 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v835 
        let v837 : string = "inline_colorization::color_reset"
        let v838 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "\"{v834}{v836}{v838}\""
        let v840 : string = @$"format!(" + v839 + ")"
        let v841 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "fable_library_rust::String_::fromString($0)"
        let v843 : string = Fable.Core.RustInterop.emitRustExpr v841 v842 
        let _v821 = v843 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v844 : string = "inline_colorization::color_bright_red"
        let v845 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v844 
        let v846 : string = "&*$0"
        let v847 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v846 
        let v848 : string = "inline_colorization::color_reset"
        let v849 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v848 
        let v850 : string = "\"{v845}{v847}{v849}\""
        let v851 : string = @$"format!(" + v850 + ")"
        let v852 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "fable_library_rust::String_::fromString($0)"
        let v854 : string = Fable.Core.RustInterop.emitRustExpr v852 v853 
        let _v821 = v854 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v855 : string = "\u001b[91m"
        let v856 : string = method9()
        let v857 : string = v855 + v807 
        let v858 : string = v857 + v856 
        let _v821 = v858 
        #endif
#if FABLE_COMPILER_PYTHON
        let v859 : string = "\u001b[91m"
        let v860 : string = method9()
        let v861 : string = v859 + v807 
        let v862 : string = v861 + v860 
        let _v821 = v862 
        #endif
#else
        let v863 : string = "\u001b[91m"
        let v864 : string = method9()
        let v865 : string = v863 + v807 
        let v866 : string = v865 + v864 
        let _v821 = v866 
        #endif
        let v867 : string = _v821 
        let v873 : int64 = v85.l0
        let v874 : string = method10()
        let v875 : Mut4 = {l0 = v874} : Mut4
        let v876 : string = "{ "
        let v877 : string = $"{v876}"
        let v880 : unit = ()
        let v881 : (unit -> unit) = closure12(v875, v877)
        let v882 : unit = (fun () -> v881 (); v880) ()
        let v885 : string = "retry"
        let v886 : string = $"{v885}"
        let v889 : unit = ()
        let v890 : (unit -> unit) = closure12(v875, v886)
        let v891 : unit = (fun () -> v890 (); v889) ()
        let v894 : string = " = "
        let v895 : string = $"{v894}"
        let v898 : unit = ()
        let v899 : (unit -> unit) = closure12(v875, v895)
        let v900 : unit = (fun () -> v899 (); v898) ()
        let v903 : string = $"{27uy}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v875, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = "; "
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v875, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = "error"
        let v921 : string = $"{v920}"
        let v924 : unit = ()
        let v925 : (unit -> unit) = closure12(v875, v921)
        let v926 : unit = (fun () -> v925 (); v924) ()
        let v929 : string = $"{v894}"
        let v932 : unit = ()
        let v933 : (unit -> unit) = closure12(v875, v929)
        let v934 : unit = (fun () -> v933 (); v932) ()
        let v937 : string = $"{v0}"
        let v940 : unit = ()
        let v941 : (unit -> unit) = closure12(v875, v937)
        let v942 : unit = (fun () -> v941 (); v940) ()
        let v945 : string = " }"
        let v946 : string = $"{v945}"
        let v949 : unit = ()
        let v950 : (unit -> unit) = closure12(v875, v946)
        let v951 : unit = (fun () -> v950 (); v949) ()
        let v954 : string = v875.l0
        let v955 : (unit -> string) = closure75()
        let v956 : string = $"{v483} {v867} #{v873} %s{v955 ()} / {v954}"
        let v959 : char list = []
        let v960 : (char list -> (char [])) = List.toArray
        let v961 : (char []) = v960 v959
        let v964 : string = v956.TrimStart v961 
        let v982 : char list = []
        let v983 : char list = '/' :: v982 
        let v986 : char list = ' ' :: v983 
        let v989 : (char list -> (char [])) = List.toArray
        let v990 : (char []) = v989 v986
        let v993 : string = v964.TrimEnd v990 
        let v1011 : (string -> unit) = closure14()
        let v1012 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1013 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1013 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1014 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1014 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1015 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1015 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1011 v993
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1011 v993
        let _v1012 = () 
        #endif
#else
        v1011 v993
        let _v1012 = () 
        #endif
        _v1012 
        let v1016 : (string -> unit) = v17.l0
        v1016 v993
and method26 () : uint8 =
    26uy
and closure78 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_4
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v798 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_4
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_4
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v731 : string = method14()
                        let _v730 = v731 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v732 : string = method14()
                        let _v730 = v732 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v733 : string = method14()
                        let _v730 = v733 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v734 : string = method15()
                        let _v730 = v734 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v735 : string = method15()
                        let _v730 = v735 
                        #endif
#else
                        let v736 : string = method15()
                        let _v730 = v736 
                        #endif
                        let v737 : string = _v730 
                        let v742 : string = method10()
                        let v743 : Mut4 = {l0 = v742} : Mut4
                        let v744 : US3 = US3_3
                        let v745 : string = $"%A{v744}"
                        let v749 : string = $"{v745}"
                        let v752 : unit = ()
                        let v753 : (unit -> unit) = closure12(v743, v749)
                        let v754 : unit = (fun () -> v753 (); v752) ()
                        let v757 : string = v743.l0
                        let v758 : (string []) = v757.Split v737 
                        let v761 : string = v758.[int 0]
                        let v764 : string = method10()
                        let v765 : Mut4 = {l0 = v764} : Mut4
                        let v766 : US3 = US3_4
                        let v767 : string = $"%A{v766}"
                        let v771 : string = $"{v767}"
                        let v774 : unit = ()
                        let v775 : (unit -> unit) = closure12(v765, v771)
                        let v776 : unit = (fun () -> v775 (); v774) ()
                        let v779 : string = v765.l0
                        let v780 : bool = v779.StartsWith v761 
                        let v786 : US4 =
                            if v780 then
                                let v783 : string = "Warning"
                                US4_0(v783)
                            else
                                US4_1
                        match v786 with
                        | US4_1 -> (* None *)
                            let v789 : string = "Critical"
                            US4_0(v789)
                        | US4_0(v787) -> (* Some *)
                            US4_0(v787)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v802 : string =
            match v798 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v799) -> (* Some *)
                v799
        let v803 : (unit -> string) = v802.ToLower
        let v804 : string = v803 ()
        let v807 : string = v804.PadLeft (7, ' ')
        let v821 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v822 : string = "inline_colorization::color_bright_red"
        let v823 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v822 
        let v824 : string = "&*$0"
        let v825 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v824 
        let v826 : string = "inline_colorization::color_reset"
        let v827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v826 
        let v828 : string = "\"{v823}{v825}{v827}\""
        let v829 : string = @$"format!(" + v828 + ")"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "fable_library_rust::String_::fromString($0)"
        let v832 : string = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let _v821 = v832 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v833 : string = "inline_colorization::color_bright_red"
        let v834 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "&*$0"
        let v836 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v835 
        let v837 : string = "inline_colorization::color_reset"
        let v838 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "\"{v834}{v836}{v838}\""
        let v840 : string = @$"format!(" + v839 + ")"
        let v841 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "fable_library_rust::String_::fromString($0)"
        let v843 : string = Fable.Core.RustInterop.emitRustExpr v841 v842 
        let _v821 = v843 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v844 : string = "inline_colorization::color_bright_red"
        let v845 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v844 
        let v846 : string = "&*$0"
        let v847 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v846 
        let v848 : string = "inline_colorization::color_reset"
        let v849 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v848 
        let v850 : string = "\"{v845}{v847}{v849}\""
        let v851 : string = @$"format!(" + v850 + ")"
        let v852 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "fable_library_rust::String_::fromString($0)"
        let v854 : string = Fable.Core.RustInterop.emitRustExpr v852 v853 
        let _v821 = v854 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v855 : string = "\u001b[91m"
        let v856 : string = method9()
        let v857 : string = v855 + v807 
        let v858 : string = v857 + v856 
        let _v821 = v858 
        #endif
#if FABLE_COMPILER_PYTHON
        let v859 : string = "\u001b[91m"
        let v860 : string = method9()
        let v861 : string = v859 + v807 
        let v862 : string = v861 + v860 
        let _v821 = v862 
        #endif
#else
        let v863 : string = "\u001b[91m"
        let v864 : string = method9()
        let v865 : string = v863 + v807 
        let v866 : string = v865 + v864 
        let _v821 = v866 
        #endif
        let v867 : string = _v821 
        let v873 : int64 = v85.l0
        let v874 : string = method10()
        let v875 : Mut4 = {l0 = v874} : Mut4
        let v876 : string = "{ "
        let v877 : string = $"{v876}"
        let v880 : unit = ()
        let v881 : (unit -> unit) = closure12(v875, v877)
        let v882 : unit = (fun () -> v881 (); v880) ()
        let v885 : string = "retry"
        let v886 : string = $"{v885}"
        let v889 : unit = ()
        let v890 : (unit -> unit) = closure12(v875, v886)
        let v891 : unit = (fun () -> v890 (); v889) ()
        let v894 : string = " = "
        let v895 : string = $"{v894}"
        let v898 : unit = ()
        let v899 : (unit -> unit) = closure12(v875, v895)
        let v900 : unit = (fun () -> v899 (); v898) ()
        let v903 : string = $"{26uy}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v875, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = "; "
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v875, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = "error"
        let v921 : string = $"{v920}"
        let v924 : unit = ()
        let v925 : (unit -> unit) = closure12(v875, v921)
        let v926 : unit = (fun () -> v925 (); v924) ()
        let v929 : string = $"{v894}"
        let v932 : unit = ()
        let v933 : (unit -> unit) = closure12(v875, v929)
        let v934 : unit = (fun () -> v933 (); v932) ()
        let v937 : string = $"{v0}"
        let v940 : unit = ()
        let v941 : (unit -> unit) = closure12(v875, v937)
        let v942 : unit = (fun () -> v941 (); v940) ()
        let v945 : string = " }"
        let v946 : string = $"{v945}"
        let v949 : unit = ()
        let v950 : (unit -> unit) = closure12(v875, v946)
        let v951 : unit = (fun () -> v950 (); v949) ()
        let v954 : string = v875.l0
        let v955 : (unit -> string) = closure75()
        let v956 : string = $"{v483} {v867} #{v873} %s{v955 ()} / {v954}"
        let v959 : char list = []
        let v960 : (char list -> (char [])) = List.toArray
        let v961 : (char []) = v960 v959
        let v964 : string = v956.TrimStart v961 
        let v982 : char list = []
        let v983 : char list = '/' :: v982 
        let v986 : char list = ' ' :: v983 
        let v989 : (char list -> (char [])) = List.toArray
        let v990 : (char []) = v989 v986
        let v993 : string = v964.TrimEnd v990 
        let v1011 : (string -> unit) = closure14()
        let v1012 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1013 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1013 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1014 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1014 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1015 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1015 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1011 v993
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1011 v993
        let _v1012 = () 
        #endif
#else
        v1011 v993
        let _v1012 = () 
        #endif
        _v1012 
        let v1016 : (string -> unit) = v17.l0
        v1016 v993
and method27 () : uint8 =
    25uy
and closure79 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_4
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v798 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_4
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_4
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v731 : string = method14()
                        let _v730 = v731 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v732 : string = method14()
                        let _v730 = v732 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v733 : string = method14()
                        let _v730 = v733 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v734 : string = method15()
                        let _v730 = v734 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v735 : string = method15()
                        let _v730 = v735 
                        #endif
#else
                        let v736 : string = method15()
                        let _v730 = v736 
                        #endif
                        let v737 : string = _v730 
                        let v742 : string = method10()
                        let v743 : Mut4 = {l0 = v742} : Mut4
                        let v744 : US3 = US3_3
                        let v745 : string = $"%A{v744}"
                        let v749 : string = $"{v745}"
                        let v752 : unit = ()
                        let v753 : (unit -> unit) = closure12(v743, v749)
                        let v754 : unit = (fun () -> v753 (); v752) ()
                        let v757 : string = v743.l0
                        let v758 : (string []) = v757.Split v737 
                        let v761 : string = v758.[int 0]
                        let v764 : string = method10()
                        let v765 : Mut4 = {l0 = v764} : Mut4
                        let v766 : US3 = US3_4
                        let v767 : string = $"%A{v766}"
                        let v771 : string = $"{v767}"
                        let v774 : unit = ()
                        let v775 : (unit -> unit) = closure12(v765, v771)
                        let v776 : unit = (fun () -> v775 (); v774) ()
                        let v779 : string = v765.l0
                        let v780 : bool = v779.StartsWith v761 
                        let v786 : US4 =
                            if v780 then
                                let v783 : string = "Warning"
                                US4_0(v783)
                            else
                                US4_1
                        match v786 with
                        | US4_1 -> (* None *)
                            let v789 : string = "Critical"
                            US4_0(v789)
                        | US4_0(v787) -> (* Some *)
                            US4_0(v787)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v802 : string =
            match v798 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v799) -> (* Some *)
                v799
        let v803 : (unit -> string) = v802.ToLower
        let v804 : string = v803 ()
        let v807 : string = v804.PadLeft (7, ' ')
        let v821 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v822 : string = "inline_colorization::color_bright_red"
        let v823 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v822 
        let v824 : string = "&*$0"
        let v825 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v824 
        let v826 : string = "inline_colorization::color_reset"
        let v827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v826 
        let v828 : string = "\"{v823}{v825}{v827}\""
        let v829 : string = @$"format!(" + v828 + ")"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "fable_library_rust::String_::fromString($0)"
        let v832 : string = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let _v821 = v832 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v833 : string = "inline_colorization::color_bright_red"
        let v834 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "&*$0"
        let v836 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v835 
        let v837 : string = "inline_colorization::color_reset"
        let v838 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "\"{v834}{v836}{v838}\""
        let v840 : string = @$"format!(" + v839 + ")"
        let v841 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "fable_library_rust::String_::fromString($0)"
        let v843 : string = Fable.Core.RustInterop.emitRustExpr v841 v842 
        let _v821 = v843 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v844 : string = "inline_colorization::color_bright_red"
        let v845 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v844 
        let v846 : string = "&*$0"
        let v847 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v846 
        let v848 : string = "inline_colorization::color_reset"
        let v849 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v848 
        let v850 : string = "\"{v845}{v847}{v849}\""
        let v851 : string = @$"format!(" + v850 + ")"
        let v852 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "fable_library_rust::String_::fromString($0)"
        let v854 : string = Fable.Core.RustInterop.emitRustExpr v852 v853 
        let _v821 = v854 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v855 : string = "\u001b[91m"
        let v856 : string = method9()
        let v857 : string = v855 + v807 
        let v858 : string = v857 + v856 
        let _v821 = v858 
        #endif
#if FABLE_COMPILER_PYTHON
        let v859 : string = "\u001b[91m"
        let v860 : string = method9()
        let v861 : string = v859 + v807 
        let v862 : string = v861 + v860 
        let _v821 = v862 
        #endif
#else
        let v863 : string = "\u001b[91m"
        let v864 : string = method9()
        let v865 : string = v863 + v807 
        let v866 : string = v865 + v864 
        let _v821 = v866 
        #endif
        let v867 : string = _v821 
        let v873 : int64 = v85.l0
        let v874 : string = method10()
        let v875 : Mut4 = {l0 = v874} : Mut4
        let v876 : string = "{ "
        let v877 : string = $"{v876}"
        let v880 : unit = ()
        let v881 : (unit -> unit) = closure12(v875, v877)
        let v882 : unit = (fun () -> v881 (); v880) ()
        let v885 : string = "retry"
        let v886 : string = $"{v885}"
        let v889 : unit = ()
        let v890 : (unit -> unit) = closure12(v875, v886)
        let v891 : unit = (fun () -> v890 (); v889) ()
        let v894 : string = " = "
        let v895 : string = $"{v894}"
        let v898 : unit = ()
        let v899 : (unit -> unit) = closure12(v875, v895)
        let v900 : unit = (fun () -> v899 (); v898) ()
        let v903 : string = $"{25uy}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v875, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = "; "
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v875, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = "error"
        let v921 : string = $"{v920}"
        let v924 : unit = ()
        let v925 : (unit -> unit) = closure12(v875, v921)
        let v926 : unit = (fun () -> v925 (); v924) ()
        let v929 : string = $"{v894}"
        let v932 : unit = ()
        let v933 : (unit -> unit) = closure12(v875, v929)
        let v934 : unit = (fun () -> v933 (); v932) ()
        let v937 : string = $"{v0}"
        let v940 : unit = ()
        let v941 : (unit -> unit) = closure12(v875, v937)
        let v942 : unit = (fun () -> v941 (); v940) ()
        let v945 : string = " }"
        let v946 : string = $"{v945}"
        let v949 : unit = ()
        let v950 : (unit -> unit) = closure12(v875, v946)
        let v951 : unit = (fun () -> v950 (); v949) ()
        let v954 : string = v875.l0
        let v955 : (unit -> string) = closure75()
        let v956 : string = $"{v483} {v867} #{v873} %s{v955 ()} / {v954}"
        let v959 : char list = []
        let v960 : (char list -> (char [])) = List.toArray
        let v961 : (char []) = v960 v959
        let v964 : string = v956.TrimStart v961 
        let v982 : char list = []
        let v983 : char list = '/' :: v982 
        let v986 : char list = ' ' :: v983 
        let v989 : (char list -> (char [])) = List.toArray
        let v990 : (char []) = v989 v986
        let v993 : string = v964.TrimEnd v990 
        let v1011 : (string -> unit) = closure14()
        let v1012 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1013 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1013 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1014 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1014 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1015 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1015 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1011 v993
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1011 v993
        let _v1012 = () 
        #endif
#else
        v1011 v993
        let _v1012 = () 
        #endif
        _v1012 
        let v1016 : (string -> unit) = v17.l0
        v1016 v993
and method28 () : uint8 =
    24uy
and closure80 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_4
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v798 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_4
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_4
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v731 : string = method14()
                        let _v730 = v731 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v732 : string = method14()
                        let _v730 = v732 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v733 : string = method14()
                        let _v730 = v733 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v734 : string = method15()
                        let _v730 = v734 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v735 : string = method15()
                        let _v730 = v735 
                        #endif
#else
                        let v736 : string = method15()
                        let _v730 = v736 
                        #endif
                        let v737 : string = _v730 
                        let v742 : string = method10()
                        let v743 : Mut4 = {l0 = v742} : Mut4
                        let v744 : US3 = US3_3
                        let v745 : string = $"%A{v744}"
                        let v749 : string = $"{v745}"
                        let v752 : unit = ()
                        let v753 : (unit -> unit) = closure12(v743, v749)
                        let v754 : unit = (fun () -> v753 (); v752) ()
                        let v757 : string = v743.l0
                        let v758 : (string []) = v757.Split v737 
                        let v761 : string = v758.[int 0]
                        let v764 : string = method10()
                        let v765 : Mut4 = {l0 = v764} : Mut4
                        let v766 : US3 = US3_4
                        let v767 : string = $"%A{v766}"
                        let v771 : string = $"{v767}"
                        let v774 : unit = ()
                        let v775 : (unit -> unit) = closure12(v765, v771)
                        let v776 : unit = (fun () -> v775 (); v774) ()
                        let v779 : string = v765.l0
                        let v780 : bool = v779.StartsWith v761 
                        let v786 : US4 =
                            if v780 then
                                let v783 : string = "Warning"
                                US4_0(v783)
                            else
                                US4_1
                        match v786 with
                        | US4_1 -> (* None *)
                            let v789 : string = "Critical"
                            US4_0(v789)
                        | US4_0(v787) -> (* Some *)
                            US4_0(v787)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v802 : string =
            match v798 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v799) -> (* Some *)
                v799
        let v803 : (unit -> string) = v802.ToLower
        let v804 : string = v803 ()
        let v807 : string = v804.PadLeft (7, ' ')
        let v821 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v822 : string = "inline_colorization::color_bright_red"
        let v823 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v822 
        let v824 : string = "&*$0"
        let v825 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v824 
        let v826 : string = "inline_colorization::color_reset"
        let v827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v826 
        let v828 : string = "\"{v823}{v825}{v827}\""
        let v829 : string = @$"format!(" + v828 + ")"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "fable_library_rust::String_::fromString($0)"
        let v832 : string = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let _v821 = v832 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v833 : string = "inline_colorization::color_bright_red"
        let v834 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "&*$0"
        let v836 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v835 
        let v837 : string = "inline_colorization::color_reset"
        let v838 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "\"{v834}{v836}{v838}\""
        let v840 : string = @$"format!(" + v839 + ")"
        let v841 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "fable_library_rust::String_::fromString($0)"
        let v843 : string = Fable.Core.RustInterop.emitRustExpr v841 v842 
        let _v821 = v843 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v844 : string = "inline_colorization::color_bright_red"
        let v845 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v844 
        let v846 : string = "&*$0"
        let v847 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v846 
        let v848 : string = "inline_colorization::color_reset"
        let v849 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v848 
        let v850 : string = "\"{v845}{v847}{v849}\""
        let v851 : string = @$"format!(" + v850 + ")"
        let v852 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "fable_library_rust::String_::fromString($0)"
        let v854 : string = Fable.Core.RustInterop.emitRustExpr v852 v853 
        let _v821 = v854 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v855 : string = "\u001b[91m"
        let v856 : string = method9()
        let v857 : string = v855 + v807 
        let v858 : string = v857 + v856 
        let _v821 = v858 
        #endif
#if FABLE_COMPILER_PYTHON
        let v859 : string = "\u001b[91m"
        let v860 : string = method9()
        let v861 : string = v859 + v807 
        let v862 : string = v861 + v860 
        let _v821 = v862 
        #endif
#else
        let v863 : string = "\u001b[91m"
        let v864 : string = method9()
        let v865 : string = v863 + v807 
        let v866 : string = v865 + v864 
        let _v821 = v866 
        #endif
        let v867 : string = _v821 
        let v873 : int64 = v85.l0
        let v874 : string = method10()
        let v875 : Mut4 = {l0 = v874} : Mut4
        let v876 : string = "{ "
        let v877 : string = $"{v876}"
        let v880 : unit = ()
        let v881 : (unit -> unit) = closure12(v875, v877)
        let v882 : unit = (fun () -> v881 (); v880) ()
        let v885 : string = "retry"
        let v886 : string = $"{v885}"
        let v889 : unit = ()
        let v890 : (unit -> unit) = closure12(v875, v886)
        let v891 : unit = (fun () -> v890 (); v889) ()
        let v894 : string = " = "
        let v895 : string = $"{v894}"
        let v898 : unit = ()
        let v899 : (unit -> unit) = closure12(v875, v895)
        let v900 : unit = (fun () -> v899 (); v898) ()
        let v903 : string = $"{24uy}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v875, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = "; "
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v875, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = "error"
        let v921 : string = $"{v920}"
        let v924 : unit = ()
        let v925 : (unit -> unit) = closure12(v875, v921)
        let v926 : unit = (fun () -> v925 (); v924) ()
        let v929 : string = $"{v894}"
        let v932 : unit = ()
        let v933 : (unit -> unit) = closure12(v875, v929)
        let v934 : unit = (fun () -> v933 (); v932) ()
        let v937 : string = $"{v0}"
        let v940 : unit = ()
        let v941 : (unit -> unit) = closure12(v875, v937)
        let v942 : unit = (fun () -> v941 (); v940) ()
        let v945 : string = " }"
        let v946 : string = $"{v945}"
        let v949 : unit = ()
        let v950 : (unit -> unit) = closure12(v875, v946)
        let v951 : unit = (fun () -> v950 (); v949) ()
        let v954 : string = v875.l0
        let v955 : (unit -> string) = closure75()
        let v956 : string = $"{v483} {v867} #{v873} %s{v955 ()} / {v954}"
        let v959 : char list = []
        let v960 : (char list -> (char [])) = List.toArray
        let v961 : (char []) = v960 v959
        let v964 : string = v956.TrimStart v961 
        let v982 : char list = []
        let v983 : char list = '/' :: v982 
        let v986 : char list = ' ' :: v983 
        let v989 : (char list -> (char [])) = List.toArray
        let v990 : (char []) = v989 v986
        let v993 : string = v964.TrimEnd v990 
        let v1011 : (string -> unit) = closure14()
        let v1012 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1013 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1013 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1014 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1014 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1015 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1015 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1011 v993
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1011 v993
        let _v1012 = () 
        #endif
#else
        v1011 v993
        let _v1012 = () 
        #endif
        _v1012 
        let v1016 : (string -> unit) = v17.l0
        v1016 v993
and method29 () : uint8 =
    23uy
and closure81 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_4
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v798 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_4
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_4
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v731 : string = method14()
                        let _v730 = v731 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v732 : string = method14()
                        let _v730 = v732 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v733 : string = method14()
                        let _v730 = v733 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v734 : string = method15()
                        let _v730 = v734 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v735 : string = method15()
                        let _v730 = v735 
                        #endif
#else
                        let v736 : string = method15()
                        let _v730 = v736 
                        #endif
                        let v737 : string = _v730 
                        let v742 : string = method10()
                        let v743 : Mut4 = {l0 = v742} : Mut4
                        let v744 : US3 = US3_3
                        let v745 : string = $"%A{v744}"
                        let v749 : string = $"{v745}"
                        let v752 : unit = ()
                        let v753 : (unit -> unit) = closure12(v743, v749)
                        let v754 : unit = (fun () -> v753 (); v752) ()
                        let v757 : string = v743.l0
                        let v758 : (string []) = v757.Split v737 
                        let v761 : string = v758.[int 0]
                        let v764 : string = method10()
                        let v765 : Mut4 = {l0 = v764} : Mut4
                        let v766 : US3 = US3_4
                        let v767 : string = $"%A{v766}"
                        let v771 : string = $"{v767}"
                        let v774 : unit = ()
                        let v775 : (unit -> unit) = closure12(v765, v771)
                        let v776 : unit = (fun () -> v775 (); v774) ()
                        let v779 : string = v765.l0
                        let v780 : bool = v779.StartsWith v761 
                        let v786 : US4 =
                            if v780 then
                                let v783 : string = "Warning"
                                US4_0(v783)
                            else
                                US4_1
                        match v786 with
                        | US4_1 -> (* None *)
                            let v789 : string = "Critical"
                            US4_0(v789)
                        | US4_0(v787) -> (* Some *)
                            US4_0(v787)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v802 : string =
            match v798 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v799) -> (* Some *)
                v799
        let v803 : (unit -> string) = v802.ToLower
        let v804 : string = v803 ()
        let v807 : string = v804.PadLeft (7, ' ')
        let v821 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v822 : string = "inline_colorization::color_bright_red"
        let v823 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v822 
        let v824 : string = "&*$0"
        let v825 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v824 
        let v826 : string = "inline_colorization::color_reset"
        let v827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v826 
        let v828 : string = "\"{v823}{v825}{v827}\""
        let v829 : string = @$"format!(" + v828 + ")"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "fable_library_rust::String_::fromString($0)"
        let v832 : string = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let _v821 = v832 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v833 : string = "inline_colorization::color_bright_red"
        let v834 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "&*$0"
        let v836 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v835 
        let v837 : string = "inline_colorization::color_reset"
        let v838 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "\"{v834}{v836}{v838}\""
        let v840 : string = @$"format!(" + v839 + ")"
        let v841 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "fable_library_rust::String_::fromString($0)"
        let v843 : string = Fable.Core.RustInterop.emitRustExpr v841 v842 
        let _v821 = v843 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v844 : string = "inline_colorization::color_bright_red"
        let v845 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v844 
        let v846 : string = "&*$0"
        let v847 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v846 
        let v848 : string = "inline_colorization::color_reset"
        let v849 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v848 
        let v850 : string = "\"{v845}{v847}{v849}\""
        let v851 : string = @$"format!(" + v850 + ")"
        let v852 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "fable_library_rust::String_::fromString($0)"
        let v854 : string = Fable.Core.RustInterop.emitRustExpr v852 v853 
        let _v821 = v854 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v855 : string = "\u001b[91m"
        let v856 : string = method9()
        let v857 : string = v855 + v807 
        let v858 : string = v857 + v856 
        let _v821 = v858 
        #endif
#if FABLE_COMPILER_PYTHON
        let v859 : string = "\u001b[91m"
        let v860 : string = method9()
        let v861 : string = v859 + v807 
        let v862 : string = v861 + v860 
        let _v821 = v862 
        #endif
#else
        let v863 : string = "\u001b[91m"
        let v864 : string = method9()
        let v865 : string = v863 + v807 
        let v866 : string = v865 + v864 
        let _v821 = v866 
        #endif
        let v867 : string = _v821 
        let v873 : int64 = v85.l0
        let v874 : string = method10()
        let v875 : Mut4 = {l0 = v874} : Mut4
        let v876 : string = "{ "
        let v877 : string = $"{v876}"
        let v880 : unit = ()
        let v881 : (unit -> unit) = closure12(v875, v877)
        let v882 : unit = (fun () -> v881 (); v880) ()
        let v885 : string = "retry"
        let v886 : string = $"{v885}"
        let v889 : unit = ()
        let v890 : (unit -> unit) = closure12(v875, v886)
        let v891 : unit = (fun () -> v890 (); v889) ()
        let v894 : string = " = "
        let v895 : string = $"{v894}"
        let v898 : unit = ()
        let v899 : (unit -> unit) = closure12(v875, v895)
        let v900 : unit = (fun () -> v899 (); v898) ()
        let v903 : string = $"{23uy}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v875, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = "; "
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v875, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = "error"
        let v921 : string = $"{v920}"
        let v924 : unit = ()
        let v925 : (unit -> unit) = closure12(v875, v921)
        let v926 : unit = (fun () -> v925 (); v924) ()
        let v929 : string = $"{v894}"
        let v932 : unit = ()
        let v933 : (unit -> unit) = closure12(v875, v929)
        let v934 : unit = (fun () -> v933 (); v932) ()
        let v937 : string = $"{v0}"
        let v940 : unit = ()
        let v941 : (unit -> unit) = closure12(v875, v937)
        let v942 : unit = (fun () -> v941 (); v940) ()
        let v945 : string = " }"
        let v946 : string = $"{v945}"
        let v949 : unit = ()
        let v950 : (unit -> unit) = closure12(v875, v946)
        let v951 : unit = (fun () -> v950 (); v949) ()
        let v954 : string = v875.l0
        let v955 : (unit -> string) = closure75()
        let v956 : string = $"{v483} {v867} #{v873} %s{v955 ()} / {v954}"
        let v959 : char list = []
        let v960 : (char list -> (char [])) = List.toArray
        let v961 : (char []) = v960 v959
        let v964 : string = v956.TrimStart v961 
        let v982 : char list = []
        let v983 : char list = '/' :: v982 
        let v986 : char list = ' ' :: v983 
        let v989 : (char list -> (char [])) = List.toArray
        let v990 : (char []) = v989 v986
        let v993 : string = v964.TrimEnd v990 
        let v1011 : (string -> unit) = closure14()
        let v1012 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1013 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1013 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1014 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1014 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1015 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1015 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1011 v993
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1011 v993
        let _v1012 = () 
        #endif
#else
        v1011 v993
        let _v1012 = () 
        #endif
        _v1012 
        let v1016 : (string -> unit) = v17.l0
        v1016 v993
and method30 () : uint8 =
    22uy
and closure82 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_4
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v798 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_4
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_4
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v731 : string = method14()
                        let _v730 = v731 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v732 : string = method14()
                        let _v730 = v732 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v733 : string = method14()
                        let _v730 = v733 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v734 : string = method15()
                        let _v730 = v734 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v735 : string = method15()
                        let _v730 = v735 
                        #endif
#else
                        let v736 : string = method15()
                        let _v730 = v736 
                        #endif
                        let v737 : string = _v730 
                        let v742 : string = method10()
                        let v743 : Mut4 = {l0 = v742} : Mut4
                        let v744 : US3 = US3_3
                        let v745 : string = $"%A{v744}"
                        let v749 : string = $"{v745}"
                        let v752 : unit = ()
                        let v753 : (unit -> unit) = closure12(v743, v749)
                        let v754 : unit = (fun () -> v753 (); v752) ()
                        let v757 : string = v743.l0
                        let v758 : (string []) = v757.Split v737 
                        let v761 : string = v758.[int 0]
                        let v764 : string = method10()
                        let v765 : Mut4 = {l0 = v764} : Mut4
                        let v766 : US3 = US3_4
                        let v767 : string = $"%A{v766}"
                        let v771 : string = $"{v767}"
                        let v774 : unit = ()
                        let v775 : (unit -> unit) = closure12(v765, v771)
                        let v776 : unit = (fun () -> v775 (); v774) ()
                        let v779 : string = v765.l0
                        let v780 : bool = v779.StartsWith v761 
                        let v786 : US4 =
                            if v780 then
                                let v783 : string = "Warning"
                                US4_0(v783)
                            else
                                US4_1
                        match v786 with
                        | US4_1 -> (* None *)
                            let v789 : string = "Critical"
                            US4_0(v789)
                        | US4_0(v787) -> (* Some *)
                            US4_0(v787)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v802 : string =
            match v798 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v799) -> (* Some *)
                v799
        let v803 : (unit -> string) = v802.ToLower
        let v804 : string = v803 ()
        let v807 : string = v804.PadLeft (7, ' ')
        let v821 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v822 : string = "inline_colorization::color_bright_red"
        let v823 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v822 
        let v824 : string = "&*$0"
        let v825 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v824 
        let v826 : string = "inline_colorization::color_reset"
        let v827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v826 
        let v828 : string = "\"{v823}{v825}{v827}\""
        let v829 : string = @$"format!(" + v828 + ")"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "fable_library_rust::String_::fromString($0)"
        let v832 : string = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let _v821 = v832 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v833 : string = "inline_colorization::color_bright_red"
        let v834 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "&*$0"
        let v836 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v835 
        let v837 : string = "inline_colorization::color_reset"
        let v838 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "\"{v834}{v836}{v838}\""
        let v840 : string = @$"format!(" + v839 + ")"
        let v841 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "fable_library_rust::String_::fromString($0)"
        let v843 : string = Fable.Core.RustInterop.emitRustExpr v841 v842 
        let _v821 = v843 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v844 : string = "inline_colorization::color_bright_red"
        let v845 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v844 
        let v846 : string = "&*$0"
        let v847 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v846 
        let v848 : string = "inline_colorization::color_reset"
        let v849 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v848 
        let v850 : string = "\"{v845}{v847}{v849}\""
        let v851 : string = @$"format!(" + v850 + ")"
        let v852 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "fable_library_rust::String_::fromString($0)"
        let v854 : string = Fable.Core.RustInterop.emitRustExpr v852 v853 
        let _v821 = v854 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v855 : string = "\u001b[91m"
        let v856 : string = method9()
        let v857 : string = v855 + v807 
        let v858 : string = v857 + v856 
        let _v821 = v858 
        #endif
#if FABLE_COMPILER_PYTHON
        let v859 : string = "\u001b[91m"
        let v860 : string = method9()
        let v861 : string = v859 + v807 
        let v862 : string = v861 + v860 
        let _v821 = v862 
        #endif
#else
        let v863 : string = "\u001b[91m"
        let v864 : string = method9()
        let v865 : string = v863 + v807 
        let v866 : string = v865 + v864 
        let _v821 = v866 
        #endif
        let v867 : string = _v821 
        let v873 : int64 = v85.l0
        let v874 : string = method10()
        let v875 : Mut4 = {l0 = v874} : Mut4
        let v876 : string = "{ "
        let v877 : string = $"{v876}"
        let v880 : unit = ()
        let v881 : (unit -> unit) = closure12(v875, v877)
        let v882 : unit = (fun () -> v881 (); v880) ()
        let v885 : string = "retry"
        let v886 : string = $"{v885}"
        let v889 : unit = ()
        let v890 : (unit -> unit) = closure12(v875, v886)
        let v891 : unit = (fun () -> v890 (); v889) ()
        let v894 : string = " = "
        let v895 : string = $"{v894}"
        let v898 : unit = ()
        let v899 : (unit -> unit) = closure12(v875, v895)
        let v900 : unit = (fun () -> v899 (); v898) ()
        let v903 : string = $"{22uy}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v875, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = "; "
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v875, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = "error"
        let v921 : string = $"{v920}"
        let v924 : unit = ()
        let v925 : (unit -> unit) = closure12(v875, v921)
        let v926 : unit = (fun () -> v925 (); v924) ()
        let v929 : string = $"{v894}"
        let v932 : unit = ()
        let v933 : (unit -> unit) = closure12(v875, v929)
        let v934 : unit = (fun () -> v933 (); v932) ()
        let v937 : string = $"{v0}"
        let v940 : unit = ()
        let v941 : (unit -> unit) = closure12(v875, v937)
        let v942 : unit = (fun () -> v941 (); v940) ()
        let v945 : string = " }"
        let v946 : string = $"{v945}"
        let v949 : unit = ()
        let v950 : (unit -> unit) = closure12(v875, v946)
        let v951 : unit = (fun () -> v950 (); v949) ()
        let v954 : string = v875.l0
        let v955 : (unit -> string) = closure75()
        let v956 : string = $"{v483} {v867} #{v873} %s{v955 ()} / {v954}"
        let v959 : char list = []
        let v960 : (char list -> (char [])) = List.toArray
        let v961 : (char []) = v960 v959
        let v964 : string = v956.TrimStart v961 
        let v982 : char list = []
        let v983 : char list = '/' :: v982 
        let v986 : char list = ' ' :: v983 
        let v989 : (char list -> (char [])) = List.toArray
        let v990 : (char []) = v989 v986
        let v993 : string = v964.TrimEnd v990 
        let v1011 : (string -> unit) = closure14()
        let v1012 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1013 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1013 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1014 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1014 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1015 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1015 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1011 v993
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1011 v993
        let _v1012 = () 
        #endif
#else
        v1011 v993
        let _v1012 = () 
        #endif
        _v1012 
        let v1016 : (string -> unit) = v17.l0
        v1016 v993
and method31 () : uint8 =
    21uy
and closure83 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_4
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v798 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_4
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_4
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v731 : string = method14()
                        let _v730 = v731 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v732 : string = method14()
                        let _v730 = v732 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v733 : string = method14()
                        let _v730 = v733 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v734 : string = method15()
                        let _v730 = v734 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v735 : string = method15()
                        let _v730 = v735 
                        #endif
#else
                        let v736 : string = method15()
                        let _v730 = v736 
                        #endif
                        let v737 : string = _v730 
                        let v742 : string = method10()
                        let v743 : Mut4 = {l0 = v742} : Mut4
                        let v744 : US3 = US3_3
                        let v745 : string = $"%A{v744}"
                        let v749 : string = $"{v745}"
                        let v752 : unit = ()
                        let v753 : (unit -> unit) = closure12(v743, v749)
                        let v754 : unit = (fun () -> v753 (); v752) ()
                        let v757 : string = v743.l0
                        let v758 : (string []) = v757.Split v737 
                        let v761 : string = v758.[int 0]
                        let v764 : string = method10()
                        let v765 : Mut4 = {l0 = v764} : Mut4
                        let v766 : US3 = US3_4
                        let v767 : string = $"%A{v766}"
                        let v771 : string = $"{v767}"
                        let v774 : unit = ()
                        let v775 : (unit -> unit) = closure12(v765, v771)
                        let v776 : unit = (fun () -> v775 (); v774) ()
                        let v779 : string = v765.l0
                        let v780 : bool = v779.StartsWith v761 
                        let v786 : US4 =
                            if v780 then
                                let v783 : string = "Warning"
                                US4_0(v783)
                            else
                                US4_1
                        match v786 with
                        | US4_1 -> (* None *)
                            let v789 : string = "Critical"
                            US4_0(v789)
                        | US4_0(v787) -> (* Some *)
                            US4_0(v787)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v802 : string =
            match v798 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v799) -> (* Some *)
                v799
        let v803 : (unit -> string) = v802.ToLower
        let v804 : string = v803 ()
        let v807 : string = v804.PadLeft (7, ' ')
        let v821 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v822 : string = "inline_colorization::color_bright_red"
        let v823 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v822 
        let v824 : string = "&*$0"
        let v825 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v824 
        let v826 : string = "inline_colorization::color_reset"
        let v827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v826 
        let v828 : string = "\"{v823}{v825}{v827}\""
        let v829 : string = @$"format!(" + v828 + ")"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "fable_library_rust::String_::fromString($0)"
        let v832 : string = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let _v821 = v832 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v833 : string = "inline_colorization::color_bright_red"
        let v834 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "&*$0"
        let v836 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v835 
        let v837 : string = "inline_colorization::color_reset"
        let v838 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "\"{v834}{v836}{v838}\""
        let v840 : string = @$"format!(" + v839 + ")"
        let v841 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "fable_library_rust::String_::fromString($0)"
        let v843 : string = Fable.Core.RustInterop.emitRustExpr v841 v842 
        let _v821 = v843 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v844 : string = "inline_colorization::color_bright_red"
        let v845 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v844 
        let v846 : string = "&*$0"
        let v847 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v846 
        let v848 : string = "inline_colorization::color_reset"
        let v849 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v848 
        let v850 : string = "\"{v845}{v847}{v849}\""
        let v851 : string = @$"format!(" + v850 + ")"
        let v852 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "fable_library_rust::String_::fromString($0)"
        let v854 : string = Fable.Core.RustInterop.emitRustExpr v852 v853 
        let _v821 = v854 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v855 : string = "\u001b[91m"
        let v856 : string = method9()
        let v857 : string = v855 + v807 
        let v858 : string = v857 + v856 
        let _v821 = v858 
        #endif
#if FABLE_COMPILER_PYTHON
        let v859 : string = "\u001b[91m"
        let v860 : string = method9()
        let v861 : string = v859 + v807 
        let v862 : string = v861 + v860 
        let _v821 = v862 
        #endif
#else
        let v863 : string = "\u001b[91m"
        let v864 : string = method9()
        let v865 : string = v863 + v807 
        let v866 : string = v865 + v864 
        let _v821 = v866 
        #endif
        let v867 : string = _v821 
        let v873 : int64 = v85.l0
        let v874 : string = method10()
        let v875 : Mut4 = {l0 = v874} : Mut4
        let v876 : string = "{ "
        let v877 : string = $"{v876}"
        let v880 : unit = ()
        let v881 : (unit -> unit) = closure12(v875, v877)
        let v882 : unit = (fun () -> v881 (); v880) ()
        let v885 : string = "retry"
        let v886 : string = $"{v885}"
        let v889 : unit = ()
        let v890 : (unit -> unit) = closure12(v875, v886)
        let v891 : unit = (fun () -> v890 (); v889) ()
        let v894 : string = " = "
        let v895 : string = $"{v894}"
        let v898 : unit = ()
        let v899 : (unit -> unit) = closure12(v875, v895)
        let v900 : unit = (fun () -> v899 (); v898) ()
        let v903 : string = $"{21uy}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v875, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = "; "
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v875, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = "error"
        let v921 : string = $"{v920}"
        let v924 : unit = ()
        let v925 : (unit -> unit) = closure12(v875, v921)
        let v926 : unit = (fun () -> v925 (); v924) ()
        let v929 : string = $"{v894}"
        let v932 : unit = ()
        let v933 : (unit -> unit) = closure12(v875, v929)
        let v934 : unit = (fun () -> v933 (); v932) ()
        let v937 : string = $"{v0}"
        let v940 : unit = ()
        let v941 : (unit -> unit) = closure12(v875, v937)
        let v942 : unit = (fun () -> v941 (); v940) ()
        let v945 : string = " }"
        let v946 : string = $"{v945}"
        let v949 : unit = ()
        let v950 : (unit -> unit) = closure12(v875, v946)
        let v951 : unit = (fun () -> v950 (); v949) ()
        let v954 : string = v875.l0
        let v955 : (unit -> string) = closure75()
        let v956 : string = $"{v483} {v867} #{v873} %s{v955 ()} / {v954}"
        let v959 : char list = []
        let v960 : (char list -> (char [])) = List.toArray
        let v961 : (char []) = v960 v959
        let v964 : string = v956.TrimStart v961 
        let v982 : char list = []
        let v983 : char list = '/' :: v982 
        let v986 : char list = ' ' :: v983 
        let v989 : (char list -> (char [])) = List.toArray
        let v990 : (char []) = v989 v986
        let v993 : string = v964.TrimEnd v990 
        let v1011 : (string -> unit) = closure14()
        let v1012 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1013 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1013 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1014 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1014 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1015 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1015 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1011 v993
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1011 v993
        let _v1012 = () 
        #endif
#else
        v1011 v993
        let _v1012 = () 
        #endif
        _v1012 
        let v1016 : (string -> unit) = v17.l0
        v1016 v993
and method32 () : uint8 =
    20uy
and closure84 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_4
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v798 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_4
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_4
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v731 : string = method14()
                        let _v730 = v731 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v732 : string = method14()
                        let _v730 = v732 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v733 : string = method14()
                        let _v730 = v733 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v734 : string = method15()
                        let _v730 = v734 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v735 : string = method15()
                        let _v730 = v735 
                        #endif
#else
                        let v736 : string = method15()
                        let _v730 = v736 
                        #endif
                        let v737 : string = _v730 
                        let v742 : string = method10()
                        let v743 : Mut4 = {l0 = v742} : Mut4
                        let v744 : US3 = US3_3
                        let v745 : string = $"%A{v744}"
                        let v749 : string = $"{v745}"
                        let v752 : unit = ()
                        let v753 : (unit -> unit) = closure12(v743, v749)
                        let v754 : unit = (fun () -> v753 (); v752) ()
                        let v757 : string = v743.l0
                        let v758 : (string []) = v757.Split v737 
                        let v761 : string = v758.[int 0]
                        let v764 : string = method10()
                        let v765 : Mut4 = {l0 = v764} : Mut4
                        let v766 : US3 = US3_4
                        let v767 : string = $"%A{v766}"
                        let v771 : string = $"{v767}"
                        let v774 : unit = ()
                        let v775 : (unit -> unit) = closure12(v765, v771)
                        let v776 : unit = (fun () -> v775 (); v774) ()
                        let v779 : string = v765.l0
                        let v780 : bool = v779.StartsWith v761 
                        let v786 : US4 =
                            if v780 then
                                let v783 : string = "Warning"
                                US4_0(v783)
                            else
                                US4_1
                        match v786 with
                        | US4_1 -> (* None *)
                            let v789 : string = "Critical"
                            US4_0(v789)
                        | US4_0(v787) -> (* Some *)
                            US4_0(v787)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v802 : string =
            match v798 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v799) -> (* Some *)
                v799
        let v803 : (unit -> string) = v802.ToLower
        let v804 : string = v803 ()
        let v807 : string = v804.PadLeft (7, ' ')
        let v821 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v822 : string = "inline_colorization::color_bright_red"
        let v823 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v822 
        let v824 : string = "&*$0"
        let v825 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v824 
        let v826 : string = "inline_colorization::color_reset"
        let v827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v826 
        let v828 : string = "\"{v823}{v825}{v827}\""
        let v829 : string = @$"format!(" + v828 + ")"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "fable_library_rust::String_::fromString($0)"
        let v832 : string = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let _v821 = v832 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v833 : string = "inline_colorization::color_bright_red"
        let v834 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "&*$0"
        let v836 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v835 
        let v837 : string = "inline_colorization::color_reset"
        let v838 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "\"{v834}{v836}{v838}\""
        let v840 : string = @$"format!(" + v839 + ")"
        let v841 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "fable_library_rust::String_::fromString($0)"
        let v843 : string = Fable.Core.RustInterop.emitRustExpr v841 v842 
        let _v821 = v843 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v844 : string = "inline_colorization::color_bright_red"
        let v845 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v844 
        let v846 : string = "&*$0"
        let v847 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v846 
        let v848 : string = "inline_colorization::color_reset"
        let v849 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v848 
        let v850 : string = "\"{v845}{v847}{v849}\""
        let v851 : string = @$"format!(" + v850 + ")"
        let v852 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "fable_library_rust::String_::fromString($0)"
        let v854 : string = Fable.Core.RustInterop.emitRustExpr v852 v853 
        let _v821 = v854 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v855 : string = "\u001b[91m"
        let v856 : string = method9()
        let v857 : string = v855 + v807 
        let v858 : string = v857 + v856 
        let _v821 = v858 
        #endif
#if FABLE_COMPILER_PYTHON
        let v859 : string = "\u001b[91m"
        let v860 : string = method9()
        let v861 : string = v859 + v807 
        let v862 : string = v861 + v860 
        let _v821 = v862 
        #endif
#else
        let v863 : string = "\u001b[91m"
        let v864 : string = method9()
        let v865 : string = v863 + v807 
        let v866 : string = v865 + v864 
        let _v821 = v866 
        #endif
        let v867 : string = _v821 
        let v873 : int64 = v85.l0
        let v874 : string = method10()
        let v875 : Mut4 = {l0 = v874} : Mut4
        let v876 : string = "{ "
        let v877 : string = $"{v876}"
        let v880 : unit = ()
        let v881 : (unit -> unit) = closure12(v875, v877)
        let v882 : unit = (fun () -> v881 (); v880) ()
        let v885 : string = "retry"
        let v886 : string = $"{v885}"
        let v889 : unit = ()
        let v890 : (unit -> unit) = closure12(v875, v886)
        let v891 : unit = (fun () -> v890 (); v889) ()
        let v894 : string = " = "
        let v895 : string = $"{v894}"
        let v898 : unit = ()
        let v899 : (unit -> unit) = closure12(v875, v895)
        let v900 : unit = (fun () -> v899 (); v898) ()
        let v903 : string = $"{20uy}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v875, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = "; "
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v875, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = "error"
        let v921 : string = $"{v920}"
        let v924 : unit = ()
        let v925 : (unit -> unit) = closure12(v875, v921)
        let v926 : unit = (fun () -> v925 (); v924) ()
        let v929 : string = $"{v894}"
        let v932 : unit = ()
        let v933 : (unit -> unit) = closure12(v875, v929)
        let v934 : unit = (fun () -> v933 (); v932) ()
        let v937 : string = $"{v0}"
        let v940 : unit = ()
        let v941 : (unit -> unit) = closure12(v875, v937)
        let v942 : unit = (fun () -> v941 (); v940) ()
        let v945 : string = " }"
        let v946 : string = $"{v945}"
        let v949 : unit = ()
        let v950 : (unit -> unit) = closure12(v875, v946)
        let v951 : unit = (fun () -> v950 (); v949) ()
        let v954 : string = v875.l0
        let v955 : (unit -> string) = closure75()
        let v956 : string = $"{v483} {v867} #{v873} %s{v955 ()} / {v954}"
        let v959 : char list = []
        let v960 : (char list -> (char [])) = List.toArray
        let v961 : (char []) = v960 v959
        let v964 : string = v956.TrimStart v961 
        let v982 : char list = []
        let v983 : char list = '/' :: v982 
        let v986 : char list = ' ' :: v983 
        let v989 : (char list -> (char [])) = List.toArray
        let v990 : (char []) = v989 v986
        let v993 : string = v964.TrimEnd v990 
        let v1011 : (string -> unit) = closure14()
        let v1012 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1013 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1013 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1014 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1014 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1015 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1015 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1011 v993
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1011 v993
        let _v1012 = () 
        #endif
#else
        v1011 v993
        let _v1012 = () 
        #endif
        _v1012 
        let v1016 : (string -> unit) = v17.l0
        v1016 v993
and method33 () : uint8 =
    19uy
and closure85 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_4
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v798 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_4
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_4
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v731 : string = method14()
                        let _v730 = v731 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v732 : string = method14()
                        let _v730 = v732 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v733 : string = method14()
                        let _v730 = v733 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v734 : string = method15()
                        let _v730 = v734 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v735 : string = method15()
                        let _v730 = v735 
                        #endif
#else
                        let v736 : string = method15()
                        let _v730 = v736 
                        #endif
                        let v737 : string = _v730 
                        let v742 : string = method10()
                        let v743 : Mut4 = {l0 = v742} : Mut4
                        let v744 : US3 = US3_3
                        let v745 : string = $"%A{v744}"
                        let v749 : string = $"{v745}"
                        let v752 : unit = ()
                        let v753 : (unit -> unit) = closure12(v743, v749)
                        let v754 : unit = (fun () -> v753 (); v752) ()
                        let v757 : string = v743.l0
                        let v758 : (string []) = v757.Split v737 
                        let v761 : string = v758.[int 0]
                        let v764 : string = method10()
                        let v765 : Mut4 = {l0 = v764} : Mut4
                        let v766 : US3 = US3_4
                        let v767 : string = $"%A{v766}"
                        let v771 : string = $"{v767}"
                        let v774 : unit = ()
                        let v775 : (unit -> unit) = closure12(v765, v771)
                        let v776 : unit = (fun () -> v775 (); v774) ()
                        let v779 : string = v765.l0
                        let v780 : bool = v779.StartsWith v761 
                        let v786 : US4 =
                            if v780 then
                                let v783 : string = "Warning"
                                US4_0(v783)
                            else
                                US4_1
                        match v786 with
                        | US4_1 -> (* None *)
                            let v789 : string = "Critical"
                            US4_0(v789)
                        | US4_0(v787) -> (* Some *)
                            US4_0(v787)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v802 : string =
            match v798 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v799) -> (* Some *)
                v799
        let v803 : (unit -> string) = v802.ToLower
        let v804 : string = v803 ()
        let v807 : string = v804.PadLeft (7, ' ')
        let v821 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v822 : string = "inline_colorization::color_bright_red"
        let v823 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v822 
        let v824 : string = "&*$0"
        let v825 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v824 
        let v826 : string = "inline_colorization::color_reset"
        let v827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v826 
        let v828 : string = "\"{v823}{v825}{v827}\""
        let v829 : string = @$"format!(" + v828 + ")"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "fable_library_rust::String_::fromString($0)"
        let v832 : string = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let _v821 = v832 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v833 : string = "inline_colorization::color_bright_red"
        let v834 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "&*$0"
        let v836 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v835 
        let v837 : string = "inline_colorization::color_reset"
        let v838 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "\"{v834}{v836}{v838}\""
        let v840 : string = @$"format!(" + v839 + ")"
        let v841 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "fable_library_rust::String_::fromString($0)"
        let v843 : string = Fable.Core.RustInterop.emitRustExpr v841 v842 
        let _v821 = v843 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v844 : string = "inline_colorization::color_bright_red"
        let v845 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v844 
        let v846 : string = "&*$0"
        let v847 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v846 
        let v848 : string = "inline_colorization::color_reset"
        let v849 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v848 
        let v850 : string = "\"{v845}{v847}{v849}\""
        let v851 : string = @$"format!(" + v850 + ")"
        let v852 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "fable_library_rust::String_::fromString($0)"
        let v854 : string = Fable.Core.RustInterop.emitRustExpr v852 v853 
        let _v821 = v854 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v855 : string = "\u001b[91m"
        let v856 : string = method9()
        let v857 : string = v855 + v807 
        let v858 : string = v857 + v856 
        let _v821 = v858 
        #endif
#if FABLE_COMPILER_PYTHON
        let v859 : string = "\u001b[91m"
        let v860 : string = method9()
        let v861 : string = v859 + v807 
        let v862 : string = v861 + v860 
        let _v821 = v862 
        #endif
#else
        let v863 : string = "\u001b[91m"
        let v864 : string = method9()
        let v865 : string = v863 + v807 
        let v866 : string = v865 + v864 
        let _v821 = v866 
        #endif
        let v867 : string = _v821 
        let v873 : int64 = v85.l0
        let v874 : string = method10()
        let v875 : Mut4 = {l0 = v874} : Mut4
        let v876 : string = "{ "
        let v877 : string = $"{v876}"
        let v880 : unit = ()
        let v881 : (unit -> unit) = closure12(v875, v877)
        let v882 : unit = (fun () -> v881 (); v880) ()
        let v885 : string = "retry"
        let v886 : string = $"{v885}"
        let v889 : unit = ()
        let v890 : (unit -> unit) = closure12(v875, v886)
        let v891 : unit = (fun () -> v890 (); v889) ()
        let v894 : string = " = "
        let v895 : string = $"{v894}"
        let v898 : unit = ()
        let v899 : (unit -> unit) = closure12(v875, v895)
        let v900 : unit = (fun () -> v899 (); v898) ()
        let v903 : string = $"{19uy}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v875, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = "; "
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v875, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = "error"
        let v921 : string = $"{v920}"
        let v924 : unit = ()
        let v925 : (unit -> unit) = closure12(v875, v921)
        let v926 : unit = (fun () -> v925 (); v924) ()
        let v929 : string = $"{v894}"
        let v932 : unit = ()
        let v933 : (unit -> unit) = closure12(v875, v929)
        let v934 : unit = (fun () -> v933 (); v932) ()
        let v937 : string = $"{v0}"
        let v940 : unit = ()
        let v941 : (unit -> unit) = closure12(v875, v937)
        let v942 : unit = (fun () -> v941 (); v940) ()
        let v945 : string = " }"
        let v946 : string = $"{v945}"
        let v949 : unit = ()
        let v950 : (unit -> unit) = closure12(v875, v946)
        let v951 : unit = (fun () -> v950 (); v949) ()
        let v954 : string = v875.l0
        let v955 : (unit -> string) = closure75()
        let v956 : string = $"{v483} {v867} #{v873} %s{v955 ()} / {v954}"
        let v959 : char list = []
        let v960 : (char list -> (char [])) = List.toArray
        let v961 : (char []) = v960 v959
        let v964 : string = v956.TrimStart v961 
        let v982 : char list = []
        let v983 : char list = '/' :: v982 
        let v986 : char list = ' ' :: v983 
        let v989 : (char list -> (char [])) = List.toArray
        let v990 : (char []) = v989 v986
        let v993 : string = v964.TrimEnd v990 
        let v1011 : (string -> unit) = closure14()
        let v1012 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1013 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1013 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1014 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1014 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1015 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1015 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1011 v993
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1011 v993
        let _v1012 = () 
        #endif
#else
        v1011 v993
        let _v1012 = () 
        #endif
        _v1012 
        let v1016 : (string -> unit) = v17.l0
        v1016 v993
and method34 () : uint8 =
    18uy
and closure86 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_4
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v798 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_4
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_4
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v731 : string = method14()
                        let _v730 = v731 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v732 : string = method14()
                        let _v730 = v732 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v733 : string = method14()
                        let _v730 = v733 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v734 : string = method15()
                        let _v730 = v734 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v735 : string = method15()
                        let _v730 = v735 
                        #endif
#else
                        let v736 : string = method15()
                        let _v730 = v736 
                        #endif
                        let v737 : string = _v730 
                        let v742 : string = method10()
                        let v743 : Mut4 = {l0 = v742} : Mut4
                        let v744 : US3 = US3_3
                        let v745 : string = $"%A{v744}"
                        let v749 : string = $"{v745}"
                        let v752 : unit = ()
                        let v753 : (unit -> unit) = closure12(v743, v749)
                        let v754 : unit = (fun () -> v753 (); v752) ()
                        let v757 : string = v743.l0
                        let v758 : (string []) = v757.Split v737 
                        let v761 : string = v758.[int 0]
                        let v764 : string = method10()
                        let v765 : Mut4 = {l0 = v764} : Mut4
                        let v766 : US3 = US3_4
                        let v767 : string = $"%A{v766}"
                        let v771 : string = $"{v767}"
                        let v774 : unit = ()
                        let v775 : (unit -> unit) = closure12(v765, v771)
                        let v776 : unit = (fun () -> v775 (); v774) ()
                        let v779 : string = v765.l0
                        let v780 : bool = v779.StartsWith v761 
                        let v786 : US4 =
                            if v780 then
                                let v783 : string = "Warning"
                                US4_0(v783)
                            else
                                US4_1
                        match v786 with
                        | US4_1 -> (* None *)
                            let v789 : string = "Critical"
                            US4_0(v789)
                        | US4_0(v787) -> (* Some *)
                            US4_0(v787)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v802 : string =
            match v798 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v799) -> (* Some *)
                v799
        let v803 : (unit -> string) = v802.ToLower
        let v804 : string = v803 ()
        let v807 : string = v804.PadLeft (7, ' ')
        let v821 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v822 : string = "inline_colorization::color_bright_red"
        let v823 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v822 
        let v824 : string = "&*$0"
        let v825 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v824 
        let v826 : string = "inline_colorization::color_reset"
        let v827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v826 
        let v828 : string = "\"{v823}{v825}{v827}\""
        let v829 : string = @$"format!(" + v828 + ")"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "fable_library_rust::String_::fromString($0)"
        let v832 : string = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let _v821 = v832 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v833 : string = "inline_colorization::color_bright_red"
        let v834 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "&*$0"
        let v836 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v835 
        let v837 : string = "inline_colorization::color_reset"
        let v838 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "\"{v834}{v836}{v838}\""
        let v840 : string = @$"format!(" + v839 + ")"
        let v841 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "fable_library_rust::String_::fromString($0)"
        let v843 : string = Fable.Core.RustInterop.emitRustExpr v841 v842 
        let _v821 = v843 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v844 : string = "inline_colorization::color_bright_red"
        let v845 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v844 
        let v846 : string = "&*$0"
        let v847 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v846 
        let v848 : string = "inline_colorization::color_reset"
        let v849 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v848 
        let v850 : string = "\"{v845}{v847}{v849}\""
        let v851 : string = @$"format!(" + v850 + ")"
        let v852 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "fable_library_rust::String_::fromString($0)"
        let v854 : string = Fable.Core.RustInterop.emitRustExpr v852 v853 
        let _v821 = v854 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v855 : string = "\u001b[91m"
        let v856 : string = method9()
        let v857 : string = v855 + v807 
        let v858 : string = v857 + v856 
        let _v821 = v858 
        #endif
#if FABLE_COMPILER_PYTHON
        let v859 : string = "\u001b[91m"
        let v860 : string = method9()
        let v861 : string = v859 + v807 
        let v862 : string = v861 + v860 
        let _v821 = v862 
        #endif
#else
        let v863 : string = "\u001b[91m"
        let v864 : string = method9()
        let v865 : string = v863 + v807 
        let v866 : string = v865 + v864 
        let _v821 = v866 
        #endif
        let v867 : string = _v821 
        let v873 : int64 = v85.l0
        let v874 : string = method10()
        let v875 : Mut4 = {l0 = v874} : Mut4
        let v876 : string = "{ "
        let v877 : string = $"{v876}"
        let v880 : unit = ()
        let v881 : (unit -> unit) = closure12(v875, v877)
        let v882 : unit = (fun () -> v881 (); v880) ()
        let v885 : string = "retry"
        let v886 : string = $"{v885}"
        let v889 : unit = ()
        let v890 : (unit -> unit) = closure12(v875, v886)
        let v891 : unit = (fun () -> v890 (); v889) ()
        let v894 : string = " = "
        let v895 : string = $"{v894}"
        let v898 : unit = ()
        let v899 : (unit -> unit) = closure12(v875, v895)
        let v900 : unit = (fun () -> v899 (); v898) ()
        let v903 : string = $"{18uy}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v875, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = "; "
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v875, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = "error"
        let v921 : string = $"{v920}"
        let v924 : unit = ()
        let v925 : (unit -> unit) = closure12(v875, v921)
        let v926 : unit = (fun () -> v925 (); v924) ()
        let v929 : string = $"{v894}"
        let v932 : unit = ()
        let v933 : (unit -> unit) = closure12(v875, v929)
        let v934 : unit = (fun () -> v933 (); v932) ()
        let v937 : string = $"{v0}"
        let v940 : unit = ()
        let v941 : (unit -> unit) = closure12(v875, v937)
        let v942 : unit = (fun () -> v941 (); v940) ()
        let v945 : string = " }"
        let v946 : string = $"{v945}"
        let v949 : unit = ()
        let v950 : (unit -> unit) = closure12(v875, v946)
        let v951 : unit = (fun () -> v950 (); v949) ()
        let v954 : string = v875.l0
        let v955 : (unit -> string) = closure75()
        let v956 : string = $"{v483} {v867} #{v873} %s{v955 ()} / {v954}"
        let v959 : char list = []
        let v960 : (char list -> (char [])) = List.toArray
        let v961 : (char []) = v960 v959
        let v964 : string = v956.TrimStart v961 
        let v982 : char list = []
        let v983 : char list = '/' :: v982 
        let v986 : char list = ' ' :: v983 
        let v989 : (char list -> (char [])) = List.toArray
        let v990 : (char []) = v989 v986
        let v993 : string = v964.TrimEnd v990 
        let v1011 : (string -> unit) = closure14()
        let v1012 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1013 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1013 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1014 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1014 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1015 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1015 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1011 v993
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1011 v993
        let _v1012 = () 
        #endif
#else
        v1011 v993
        let _v1012 = () 
        #endif
        _v1012 
        let v1016 : (string -> unit) = v17.l0
        v1016 v993
and method35 () : uint8 =
    17uy
and closure87 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_4
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v798 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_4
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_4
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v731 : string = method14()
                        let _v730 = v731 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v732 : string = method14()
                        let _v730 = v732 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v733 : string = method14()
                        let _v730 = v733 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v734 : string = method15()
                        let _v730 = v734 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v735 : string = method15()
                        let _v730 = v735 
                        #endif
#else
                        let v736 : string = method15()
                        let _v730 = v736 
                        #endif
                        let v737 : string = _v730 
                        let v742 : string = method10()
                        let v743 : Mut4 = {l0 = v742} : Mut4
                        let v744 : US3 = US3_3
                        let v745 : string = $"%A{v744}"
                        let v749 : string = $"{v745}"
                        let v752 : unit = ()
                        let v753 : (unit -> unit) = closure12(v743, v749)
                        let v754 : unit = (fun () -> v753 (); v752) ()
                        let v757 : string = v743.l0
                        let v758 : (string []) = v757.Split v737 
                        let v761 : string = v758.[int 0]
                        let v764 : string = method10()
                        let v765 : Mut4 = {l0 = v764} : Mut4
                        let v766 : US3 = US3_4
                        let v767 : string = $"%A{v766}"
                        let v771 : string = $"{v767}"
                        let v774 : unit = ()
                        let v775 : (unit -> unit) = closure12(v765, v771)
                        let v776 : unit = (fun () -> v775 (); v774) ()
                        let v779 : string = v765.l0
                        let v780 : bool = v779.StartsWith v761 
                        let v786 : US4 =
                            if v780 then
                                let v783 : string = "Warning"
                                US4_0(v783)
                            else
                                US4_1
                        match v786 with
                        | US4_1 -> (* None *)
                            let v789 : string = "Critical"
                            US4_0(v789)
                        | US4_0(v787) -> (* Some *)
                            US4_0(v787)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v802 : string =
            match v798 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v799) -> (* Some *)
                v799
        let v803 : (unit -> string) = v802.ToLower
        let v804 : string = v803 ()
        let v807 : string = v804.PadLeft (7, ' ')
        let v821 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v822 : string = "inline_colorization::color_bright_red"
        let v823 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v822 
        let v824 : string = "&*$0"
        let v825 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v824 
        let v826 : string = "inline_colorization::color_reset"
        let v827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v826 
        let v828 : string = "\"{v823}{v825}{v827}\""
        let v829 : string = @$"format!(" + v828 + ")"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "fable_library_rust::String_::fromString($0)"
        let v832 : string = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let _v821 = v832 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v833 : string = "inline_colorization::color_bright_red"
        let v834 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "&*$0"
        let v836 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v835 
        let v837 : string = "inline_colorization::color_reset"
        let v838 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "\"{v834}{v836}{v838}\""
        let v840 : string = @$"format!(" + v839 + ")"
        let v841 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "fable_library_rust::String_::fromString($0)"
        let v843 : string = Fable.Core.RustInterop.emitRustExpr v841 v842 
        let _v821 = v843 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v844 : string = "inline_colorization::color_bright_red"
        let v845 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v844 
        let v846 : string = "&*$0"
        let v847 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v846 
        let v848 : string = "inline_colorization::color_reset"
        let v849 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v848 
        let v850 : string = "\"{v845}{v847}{v849}\""
        let v851 : string = @$"format!(" + v850 + ")"
        let v852 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "fable_library_rust::String_::fromString($0)"
        let v854 : string = Fable.Core.RustInterop.emitRustExpr v852 v853 
        let _v821 = v854 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v855 : string = "\u001b[91m"
        let v856 : string = method9()
        let v857 : string = v855 + v807 
        let v858 : string = v857 + v856 
        let _v821 = v858 
        #endif
#if FABLE_COMPILER_PYTHON
        let v859 : string = "\u001b[91m"
        let v860 : string = method9()
        let v861 : string = v859 + v807 
        let v862 : string = v861 + v860 
        let _v821 = v862 
        #endif
#else
        let v863 : string = "\u001b[91m"
        let v864 : string = method9()
        let v865 : string = v863 + v807 
        let v866 : string = v865 + v864 
        let _v821 = v866 
        #endif
        let v867 : string = _v821 
        let v873 : int64 = v85.l0
        let v874 : string = method10()
        let v875 : Mut4 = {l0 = v874} : Mut4
        let v876 : string = "{ "
        let v877 : string = $"{v876}"
        let v880 : unit = ()
        let v881 : (unit -> unit) = closure12(v875, v877)
        let v882 : unit = (fun () -> v881 (); v880) ()
        let v885 : string = "retry"
        let v886 : string = $"{v885}"
        let v889 : unit = ()
        let v890 : (unit -> unit) = closure12(v875, v886)
        let v891 : unit = (fun () -> v890 (); v889) ()
        let v894 : string = " = "
        let v895 : string = $"{v894}"
        let v898 : unit = ()
        let v899 : (unit -> unit) = closure12(v875, v895)
        let v900 : unit = (fun () -> v899 (); v898) ()
        let v903 : string = $"{17uy}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v875, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = "; "
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v875, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = "error"
        let v921 : string = $"{v920}"
        let v924 : unit = ()
        let v925 : (unit -> unit) = closure12(v875, v921)
        let v926 : unit = (fun () -> v925 (); v924) ()
        let v929 : string = $"{v894}"
        let v932 : unit = ()
        let v933 : (unit -> unit) = closure12(v875, v929)
        let v934 : unit = (fun () -> v933 (); v932) ()
        let v937 : string = $"{v0}"
        let v940 : unit = ()
        let v941 : (unit -> unit) = closure12(v875, v937)
        let v942 : unit = (fun () -> v941 (); v940) ()
        let v945 : string = " }"
        let v946 : string = $"{v945}"
        let v949 : unit = ()
        let v950 : (unit -> unit) = closure12(v875, v946)
        let v951 : unit = (fun () -> v950 (); v949) ()
        let v954 : string = v875.l0
        let v955 : (unit -> string) = closure75()
        let v956 : string = $"{v483} {v867} #{v873} %s{v955 ()} / {v954}"
        let v959 : char list = []
        let v960 : (char list -> (char [])) = List.toArray
        let v961 : (char []) = v960 v959
        let v964 : string = v956.TrimStart v961 
        let v982 : char list = []
        let v983 : char list = '/' :: v982 
        let v986 : char list = ' ' :: v983 
        let v989 : (char list -> (char [])) = List.toArray
        let v990 : (char []) = v989 v986
        let v993 : string = v964.TrimEnd v990 
        let v1011 : (string -> unit) = closure14()
        let v1012 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1013 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1013 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1014 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1014 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1015 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1015 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1011 v993
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1011 v993
        let _v1012 = () 
        #endif
#else
        v1011 v993
        let _v1012 = () 
        #endif
        _v1012 
        let v1016 : (string -> unit) = v17.l0
        v1016 v993
and method36 () : uint8 =
    16uy
and closure88 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_4
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v798 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_4
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_4
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v731 : string = method14()
                        let _v730 = v731 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v732 : string = method14()
                        let _v730 = v732 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v733 : string = method14()
                        let _v730 = v733 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v734 : string = method15()
                        let _v730 = v734 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v735 : string = method15()
                        let _v730 = v735 
                        #endif
#else
                        let v736 : string = method15()
                        let _v730 = v736 
                        #endif
                        let v737 : string = _v730 
                        let v742 : string = method10()
                        let v743 : Mut4 = {l0 = v742} : Mut4
                        let v744 : US3 = US3_3
                        let v745 : string = $"%A{v744}"
                        let v749 : string = $"{v745}"
                        let v752 : unit = ()
                        let v753 : (unit -> unit) = closure12(v743, v749)
                        let v754 : unit = (fun () -> v753 (); v752) ()
                        let v757 : string = v743.l0
                        let v758 : (string []) = v757.Split v737 
                        let v761 : string = v758.[int 0]
                        let v764 : string = method10()
                        let v765 : Mut4 = {l0 = v764} : Mut4
                        let v766 : US3 = US3_4
                        let v767 : string = $"%A{v766}"
                        let v771 : string = $"{v767}"
                        let v774 : unit = ()
                        let v775 : (unit -> unit) = closure12(v765, v771)
                        let v776 : unit = (fun () -> v775 (); v774) ()
                        let v779 : string = v765.l0
                        let v780 : bool = v779.StartsWith v761 
                        let v786 : US4 =
                            if v780 then
                                let v783 : string = "Warning"
                                US4_0(v783)
                            else
                                US4_1
                        match v786 with
                        | US4_1 -> (* None *)
                            let v789 : string = "Critical"
                            US4_0(v789)
                        | US4_0(v787) -> (* Some *)
                            US4_0(v787)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v802 : string =
            match v798 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v799) -> (* Some *)
                v799
        let v803 : (unit -> string) = v802.ToLower
        let v804 : string = v803 ()
        let v807 : string = v804.PadLeft (7, ' ')
        let v821 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v822 : string = "inline_colorization::color_bright_red"
        let v823 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v822 
        let v824 : string = "&*$0"
        let v825 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v824 
        let v826 : string = "inline_colorization::color_reset"
        let v827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v826 
        let v828 : string = "\"{v823}{v825}{v827}\""
        let v829 : string = @$"format!(" + v828 + ")"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "fable_library_rust::String_::fromString($0)"
        let v832 : string = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let _v821 = v832 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v833 : string = "inline_colorization::color_bright_red"
        let v834 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "&*$0"
        let v836 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v835 
        let v837 : string = "inline_colorization::color_reset"
        let v838 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "\"{v834}{v836}{v838}\""
        let v840 : string = @$"format!(" + v839 + ")"
        let v841 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "fable_library_rust::String_::fromString($0)"
        let v843 : string = Fable.Core.RustInterop.emitRustExpr v841 v842 
        let _v821 = v843 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v844 : string = "inline_colorization::color_bright_red"
        let v845 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v844 
        let v846 : string = "&*$0"
        let v847 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v846 
        let v848 : string = "inline_colorization::color_reset"
        let v849 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v848 
        let v850 : string = "\"{v845}{v847}{v849}\""
        let v851 : string = @$"format!(" + v850 + ")"
        let v852 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "fable_library_rust::String_::fromString($0)"
        let v854 : string = Fable.Core.RustInterop.emitRustExpr v852 v853 
        let _v821 = v854 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v855 : string = "\u001b[91m"
        let v856 : string = method9()
        let v857 : string = v855 + v807 
        let v858 : string = v857 + v856 
        let _v821 = v858 
        #endif
#if FABLE_COMPILER_PYTHON
        let v859 : string = "\u001b[91m"
        let v860 : string = method9()
        let v861 : string = v859 + v807 
        let v862 : string = v861 + v860 
        let _v821 = v862 
        #endif
#else
        let v863 : string = "\u001b[91m"
        let v864 : string = method9()
        let v865 : string = v863 + v807 
        let v866 : string = v865 + v864 
        let _v821 = v866 
        #endif
        let v867 : string = _v821 
        let v873 : int64 = v85.l0
        let v874 : string = method10()
        let v875 : Mut4 = {l0 = v874} : Mut4
        let v876 : string = "{ "
        let v877 : string = $"{v876}"
        let v880 : unit = ()
        let v881 : (unit -> unit) = closure12(v875, v877)
        let v882 : unit = (fun () -> v881 (); v880) ()
        let v885 : string = "retry"
        let v886 : string = $"{v885}"
        let v889 : unit = ()
        let v890 : (unit -> unit) = closure12(v875, v886)
        let v891 : unit = (fun () -> v890 (); v889) ()
        let v894 : string = " = "
        let v895 : string = $"{v894}"
        let v898 : unit = ()
        let v899 : (unit -> unit) = closure12(v875, v895)
        let v900 : unit = (fun () -> v899 (); v898) ()
        let v903 : string = $"{16uy}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v875, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = "; "
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v875, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = "error"
        let v921 : string = $"{v920}"
        let v924 : unit = ()
        let v925 : (unit -> unit) = closure12(v875, v921)
        let v926 : unit = (fun () -> v925 (); v924) ()
        let v929 : string = $"{v894}"
        let v932 : unit = ()
        let v933 : (unit -> unit) = closure12(v875, v929)
        let v934 : unit = (fun () -> v933 (); v932) ()
        let v937 : string = $"{v0}"
        let v940 : unit = ()
        let v941 : (unit -> unit) = closure12(v875, v937)
        let v942 : unit = (fun () -> v941 (); v940) ()
        let v945 : string = " }"
        let v946 : string = $"{v945}"
        let v949 : unit = ()
        let v950 : (unit -> unit) = closure12(v875, v946)
        let v951 : unit = (fun () -> v950 (); v949) ()
        let v954 : string = v875.l0
        let v955 : (unit -> string) = closure75()
        let v956 : string = $"{v483} {v867} #{v873} %s{v955 ()} / {v954}"
        let v959 : char list = []
        let v960 : (char list -> (char [])) = List.toArray
        let v961 : (char []) = v960 v959
        let v964 : string = v956.TrimStart v961 
        let v982 : char list = []
        let v983 : char list = '/' :: v982 
        let v986 : char list = ' ' :: v983 
        let v989 : (char list -> (char [])) = List.toArray
        let v990 : (char []) = v989 v986
        let v993 : string = v964.TrimEnd v990 
        let v1011 : (string -> unit) = closure14()
        let v1012 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1013 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1013 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1014 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1014 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1015 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1015 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1011 v993
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1011 v993
        let _v1012 = () 
        #endif
#else
        v1011 v993
        let _v1012 = () 
        #endif
        _v1012 
        let v1016 : (string -> unit) = v17.l0
        v1016 v993
and method37 () : uint8 =
    15uy
and closure89 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_4
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v798 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_4
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_4
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v731 : string = method14()
                        let _v730 = v731 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v732 : string = method14()
                        let _v730 = v732 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v733 : string = method14()
                        let _v730 = v733 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v734 : string = method15()
                        let _v730 = v734 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v735 : string = method15()
                        let _v730 = v735 
                        #endif
#else
                        let v736 : string = method15()
                        let _v730 = v736 
                        #endif
                        let v737 : string = _v730 
                        let v742 : string = method10()
                        let v743 : Mut4 = {l0 = v742} : Mut4
                        let v744 : US3 = US3_3
                        let v745 : string = $"%A{v744}"
                        let v749 : string = $"{v745}"
                        let v752 : unit = ()
                        let v753 : (unit -> unit) = closure12(v743, v749)
                        let v754 : unit = (fun () -> v753 (); v752) ()
                        let v757 : string = v743.l0
                        let v758 : (string []) = v757.Split v737 
                        let v761 : string = v758.[int 0]
                        let v764 : string = method10()
                        let v765 : Mut4 = {l0 = v764} : Mut4
                        let v766 : US3 = US3_4
                        let v767 : string = $"%A{v766}"
                        let v771 : string = $"{v767}"
                        let v774 : unit = ()
                        let v775 : (unit -> unit) = closure12(v765, v771)
                        let v776 : unit = (fun () -> v775 (); v774) ()
                        let v779 : string = v765.l0
                        let v780 : bool = v779.StartsWith v761 
                        let v786 : US4 =
                            if v780 then
                                let v783 : string = "Warning"
                                US4_0(v783)
                            else
                                US4_1
                        match v786 with
                        | US4_1 -> (* None *)
                            let v789 : string = "Critical"
                            US4_0(v789)
                        | US4_0(v787) -> (* Some *)
                            US4_0(v787)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v802 : string =
            match v798 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v799) -> (* Some *)
                v799
        let v803 : (unit -> string) = v802.ToLower
        let v804 : string = v803 ()
        let v807 : string = v804.PadLeft (7, ' ')
        let v821 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v822 : string = "inline_colorization::color_bright_red"
        let v823 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v822 
        let v824 : string = "&*$0"
        let v825 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v824 
        let v826 : string = "inline_colorization::color_reset"
        let v827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v826 
        let v828 : string = "\"{v823}{v825}{v827}\""
        let v829 : string = @$"format!(" + v828 + ")"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "fable_library_rust::String_::fromString($0)"
        let v832 : string = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let _v821 = v832 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v833 : string = "inline_colorization::color_bright_red"
        let v834 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "&*$0"
        let v836 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v835 
        let v837 : string = "inline_colorization::color_reset"
        let v838 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "\"{v834}{v836}{v838}\""
        let v840 : string = @$"format!(" + v839 + ")"
        let v841 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "fable_library_rust::String_::fromString($0)"
        let v843 : string = Fable.Core.RustInterop.emitRustExpr v841 v842 
        let _v821 = v843 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v844 : string = "inline_colorization::color_bright_red"
        let v845 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v844 
        let v846 : string = "&*$0"
        let v847 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v846 
        let v848 : string = "inline_colorization::color_reset"
        let v849 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v848 
        let v850 : string = "\"{v845}{v847}{v849}\""
        let v851 : string = @$"format!(" + v850 + ")"
        let v852 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "fable_library_rust::String_::fromString($0)"
        let v854 : string = Fable.Core.RustInterop.emitRustExpr v852 v853 
        let _v821 = v854 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v855 : string = "\u001b[91m"
        let v856 : string = method9()
        let v857 : string = v855 + v807 
        let v858 : string = v857 + v856 
        let _v821 = v858 
        #endif
#if FABLE_COMPILER_PYTHON
        let v859 : string = "\u001b[91m"
        let v860 : string = method9()
        let v861 : string = v859 + v807 
        let v862 : string = v861 + v860 
        let _v821 = v862 
        #endif
#else
        let v863 : string = "\u001b[91m"
        let v864 : string = method9()
        let v865 : string = v863 + v807 
        let v866 : string = v865 + v864 
        let _v821 = v866 
        #endif
        let v867 : string = _v821 
        let v873 : int64 = v85.l0
        let v874 : string = method10()
        let v875 : Mut4 = {l0 = v874} : Mut4
        let v876 : string = "{ "
        let v877 : string = $"{v876}"
        let v880 : unit = ()
        let v881 : (unit -> unit) = closure12(v875, v877)
        let v882 : unit = (fun () -> v881 (); v880) ()
        let v885 : string = "retry"
        let v886 : string = $"{v885}"
        let v889 : unit = ()
        let v890 : (unit -> unit) = closure12(v875, v886)
        let v891 : unit = (fun () -> v890 (); v889) ()
        let v894 : string = " = "
        let v895 : string = $"{v894}"
        let v898 : unit = ()
        let v899 : (unit -> unit) = closure12(v875, v895)
        let v900 : unit = (fun () -> v899 (); v898) ()
        let v903 : string = $"{15uy}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v875, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = "; "
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v875, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = "error"
        let v921 : string = $"{v920}"
        let v924 : unit = ()
        let v925 : (unit -> unit) = closure12(v875, v921)
        let v926 : unit = (fun () -> v925 (); v924) ()
        let v929 : string = $"{v894}"
        let v932 : unit = ()
        let v933 : (unit -> unit) = closure12(v875, v929)
        let v934 : unit = (fun () -> v933 (); v932) ()
        let v937 : string = $"{v0}"
        let v940 : unit = ()
        let v941 : (unit -> unit) = closure12(v875, v937)
        let v942 : unit = (fun () -> v941 (); v940) ()
        let v945 : string = " }"
        let v946 : string = $"{v945}"
        let v949 : unit = ()
        let v950 : (unit -> unit) = closure12(v875, v946)
        let v951 : unit = (fun () -> v950 (); v949) ()
        let v954 : string = v875.l0
        let v955 : (unit -> string) = closure75()
        let v956 : string = $"{v483} {v867} #{v873} %s{v955 ()} / {v954}"
        let v959 : char list = []
        let v960 : (char list -> (char [])) = List.toArray
        let v961 : (char []) = v960 v959
        let v964 : string = v956.TrimStart v961 
        let v982 : char list = []
        let v983 : char list = '/' :: v982 
        let v986 : char list = ' ' :: v983 
        let v989 : (char list -> (char [])) = List.toArray
        let v990 : (char []) = v989 v986
        let v993 : string = v964.TrimEnd v990 
        let v1011 : (string -> unit) = closure14()
        let v1012 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1013 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1013 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1014 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1014 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1015 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1015 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1011 v993
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1011 v993
        let _v1012 = () 
        #endif
#else
        v1011 v993
        let _v1012 = () 
        #endif
        _v1012 
        let v1016 : (string -> unit) = v17.l0
        v1016 v993
and method38 () : uint8 =
    14uy
and closure90 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_4
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v798 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_4
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_4
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v731 : string = method14()
                        let _v730 = v731 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v732 : string = method14()
                        let _v730 = v732 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v733 : string = method14()
                        let _v730 = v733 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v734 : string = method15()
                        let _v730 = v734 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v735 : string = method15()
                        let _v730 = v735 
                        #endif
#else
                        let v736 : string = method15()
                        let _v730 = v736 
                        #endif
                        let v737 : string = _v730 
                        let v742 : string = method10()
                        let v743 : Mut4 = {l0 = v742} : Mut4
                        let v744 : US3 = US3_3
                        let v745 : string = $"%A{v744}"
                        let v749 : string = $"{v745}"
                        let v752 : unit = ()
                        let v753 : (unit -> unit) = closure12(v743, v749)
                        let v754 : unit = (fun () -> v753 (); v752) ()
                        let v757 : string = v743.l0
                        let v758 : (string []) = v757.Split v737 
                        let v761 : string = v758.[int 0]
                        let v764 : string = method10()
                        let v765 : Mut4 = {l0 = v764} : Mut4
                        let v766 : US3 = US3_4
                        let v767 : string = $"%A{v766}"
                        let v771 : string = $"{v767}"
                        let v774 : unit = ()
                        let v775 : (unit -> unit) = closure12(v765, v771)
                        let v776 : unit = (fun () -> v775 (); v774) ()
                        let v779 : string = v765.l0
                        let v780 : bool = v779.StartsWith v761 
                        let v786 : US4 =
                            if v780 then
                                let v783 : string = "Warning"
                                US4_0(v783)
                            else
                                US4_1
                        match v786 with
                        | US4_1 -> (* None *)
                            let v789 : string = "Critical"
                            US4_0(v789)
                        | US4_0(v787) -> (* Some *)
                            US4_0(v787)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v802 : string =
            match v798 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v799) -> (* Some *)
                v799
        let v803 : (unit -> string) = v802.ToLower
        let v804 : string = v803 ()
        let v807 : string = v804.PadLeft (7, ' ')
        let v821 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v822 : string = "inline_colorization::color_bright_red"
        let v823 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v822 
        let v824 : string = "&*$0"
        let v825 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v824 
        let v826 : string = "inline_colorization::color_reset"
        let v827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v826 
        let v828 : string = "\"{v823}{v825}{v827}\""
        let v829 : string = @$"format!(" + v828 + ")"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "fable_library_rust::String_::fromString($0)"
        let v832 : string = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let _v821 = v832 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v833 : string = "inline_colorization::color_bright_red"
        let v834 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "&*$0"
        let v836 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v835 
        let v837 : string = "inline_colorization::color_reset"
        let v838 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "\"{v834}{v836}{v838}\""
        let v840 : string = @$"format!(" + v839 + ")"
        let v841 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "fable_library_rust::String_::fromString($0)"
        let v843 : string = Fable.Core.RustInterop.emitRustExpr v841 v842 
        let _v821 = v843 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v844 : string = "inline_colorization::color_bright_red"
        let v845 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v844 
        let v846 : string = "&*$0"
        let v847 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v846 
        let v848 : string = "inline_colorization::color_reset"
        let v849 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v848 
        let v850 : string = "\"{v845}{v847}{v849}\""
        let v851 : string = @$"format!(" + v850 + ")"
        let v852 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "fable_library_rust::String_::fromString($0)"
        let v854 : string = Fable.Core.RustInterop.emitRustExpr v852 v853 
        let _v821 = v854 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v855 : string = "\u001b[91m"
        let v856 : string = method9()
        let v857 : string = v855 + v807 
        let v858 : string = v857 + v856 
        let _v821 = v858 
        #endif
#if FABLE_COMPILER_PYTHON
        let v859 : string = "\u001b[91m"
        let v860 : string = method9()
        let v861 : string = v859 + v807 
        let v862 : string = v861 + v860 
        let _v821 = v862 
        #endif
#else
        let v863 : string = "\u001b[91m"
        let v864 : string = method9()
        let v865 : string = v863 + v807 
        let v866 : string = v865 + v864 
        let _v821 = v866 
        #endif
        let v867 : string = _v821 
        let v873 : int64 = v85.l0
        let v874 : string = method10()
        let v875 : Mut4 = {l0 = v874} : Mut4
        let v876 : string = "{ "
        let v877 : string = $"{v876}"
        let v880 : unit = ()
        let v881 : (unit -> unit) = closure12(v875, v877)
        let v882 : unit = (fun () -> v881 (); v880) ()
        let v885 : string = "retry"
        let v886 : string = $"{v885}"
        let v889 : unit = ()
        let v890 : (unit -> unit) = closure12(v875, v886)
        let v891 : unit = (fun () -> v890 (); v889) ()
        let v894 : string = " = "
        let v895 : string = $"{v894}"
        let v898 : unit = ()
        let v899 : (unit -> unit) = closure12(v875, v895)
        let v900 : unit = (fun () -> v899 (); v898) ()
        let v903 : string = $"{14uy}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v875, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = "; "
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v875, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = "error"
        let v921 : string = $"{v920}"
        let v924 : unit = ()
        let v925 : (unit -> unit) = closure12(v875, v921)
        let v926 : unit = (fun () -> v925 (); v924) ()
        let v929 : string = $"{v894}"
        let v932 : unit = ()
        let v933 : (unit -> unit) = closure12(v875, v929)
        let v934 : unit = (fun () -> v933 (); v932) ()
        let v937 : string = $"{v0}"
        let v940 : unit = ()
        let v941 : (unit -> unit) = closure12(v875, v937)
        let v942 : unit = (fun () -> v941 (); v940) ()
        let v945 : string = " }"
        let v946 : string = $"{v945}"
        let v949 : unit = ()
        let v950 : (unit -> unit) = closure12(v875, v946)
        let v951 : unit = (fun () -> v950 (); v949) ()
        let v954 : string = v875.l0
        let v955 : (unit -> string) = closure75()
        let v956 : string = $"{v483} {v867} #{v873} %s{v955 ()} / {v954}"
        let v959 : char list = []
        let v960 : (char list -> (char [])) = List.toArray
        let v961 : (char []) = v960 v959
        let v964 : string = v956.TrimStart v961 
        let v982 : char list = []
        let v983 : char list = '/' :: v982 
        let v986 : char list = ' ' :: v983 
        let v989 : (char list -> (char [])) = List.toArray
        let v990 : (char []) = v989 v986
        let v993 : string = v964.TrimEnd v990 
        let v1011 : (string -> unit) = closure14()
        let v1012 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1013 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1013 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1014 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1014 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1015 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1015 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1011 v993
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1011 v993
        let _v1012 = () 
        #endif
#else
        v1011 v993
        let _v1012 = () 
        #endif
        _v1012 
        let v1016 : (string -> unit) = v17.l0
        v1016 v993
and method39 () : uint8 =
    13uy
and closure91 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_4
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v798 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_4
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_4
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v731 : string = method14()
                        let _v730 = v731 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v732 : string = method14()
                        let _v730 = v732 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v733 : string = method14()
                        let _v730 = v733 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v734 : string = method15()
                        let _v730 = v734 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v735 : string = method15()
                        let _v730 = v735 
                        #endif
#else
                        let v736 : string = method15()
                        let _v730 = v736 
                        #endif
                        let v737 : string = _v730 
                        let v742 : string = method10()
                        let v743 : Mut4 = {l0 = v742} : Mut4
                        let v744 : US3 = US3_3
                        let v745 : string = $"%A{v744}"
                        let v749 : string = $"{v745}"
                        let v752 : unit = ()
                        let v753 : (unit -> unit) = closure12(v743, v749)
                        let v754 : unit = (fun () -> v753 (); v752) ()
                        let v757 : string = v743.l0
                        let v758 : (string []) = v757.Split v737 
                        let v761 : string = v758.[int 0]
                        let v764 : string = method10()
                        let v765 : Mut4 = {l0 = v764} : Mut4
                        let v766 : US3 = US3_4
                        let v767 : string = $"%A{v766}"
                        let v771 : string = $"{v767}"
                        let v774 : unit = ()
                        let v775 : (unit -> unit) = closure12(v765, v771)
                        let v776 : unit = (fun () -> v775 (); v774) ()
                        let v779 : string = v765.l0
                        let v780 : bool = v779.StartsWith v761 
                        let v786 : US4 =
                            if v780 then
                                let v783 : string = "Warning"
                                US4_0(v783)
                            else
                                US4_1
                        match v786 with
                        | US4_1 -> (* None *)
                            let v789 : string = "Critical"
                            US4_0(v789)
                        | US4_0(v787) -> (* Some *)
                            US4_0(v787)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v802 : string =
            match v798 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v799) -> (* Some *)
                v799
        let v803 : (unit -> string) = v802.ToLower
        let v804 : string = v803 ()
        let v807 : string = v804.PadLeft (7, ' ')
        let v821 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v822 : string = "inline_colorization::color_bright_red"
        let v823 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v822 
        let v824 : string = "&*$0"
        let v825 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v824 
        let v826 : string = "inline_colorization::color_reset"
        let v827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v826 
        let v828 : string = "\"{v823}{v825}{v827}\""
        let v829 : string = @$"format!(" + v828 + ")"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "fable_library_rust::String_::fromString($0)"
        let v832 : string = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let _v821 = v832 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v833 : string = "inline_colorization::color_bright_red"
        let v834 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "&*$0"
        let v836 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v835 
        let v837 : string = "inline_colorization::color_reset"
        let v838 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "\"{v834}{v836}{v838}\""
        let v840 : string = @$"format!(" + v839 + ")"
        let v841 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "fable_library_rust::String_::fromString($0)"
        let v843 : string = Fable.Core.RustInterop.emitRustExpr v841 v842 
        let _v821 = v843 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v844 : string = "inline_colorization::color_bright_red"
        let v845 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v844 
        let v846 : string = "&*$0"
        let v847 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v846 
        let v848 : string = "inline_colorization::color_reset"
        let v849 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v848 
        let v850 : string = "\"{v845}{v847}{v849}\""
        let v851 : string = @$"format!(" + v850 + ")"
        let v852 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "fable_library_rust::String_::fromString($0)"
        let v854 : string = Fable.Core.RustInterop.emitRustExpr v852 v853 
        let _v821 = v854 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v855 : string = "\u001b[91m"
        let v856 : string = method9()
        let v857 : string = v855 + v807 
        let v858 : string = v857 + v856 
        let _v821 = v858 
        #endif
#if FABLE_COMPILER_PYTHON
        let v859 : string = "\u001b[91m"
        let v860 : string = method9()
        let v861 : string = v859 + v807 
        let v862 : string = v861 + v860 
        let _v821 = v862 
        #endif
#else
        let v863 : string = "\u001b[91m"
        let v864 : string = method9()
        let v865 : string = v863 + v807 
        let v866 : string = v865 + v864 
        let _v821 = v866 
        #endif
        let v867 : string = _v821 
        let v873 : int64 = v85.l0
        let v874 : string = method10()
        let v875 : Mut4 = {l0 = v874} : Mut4
        let v876 : string = "{ "
        let v877 : string = $"{v876}"
        let v880 : unit = ()
        let v881 : (unit -> unit) = closure12(v875, v877)
        let v882 : unit = (fun () -> v881 (); v880) ()
        let v885 : string = "retry"
        let v886 : string = $"{v885}"
        let v889 : unit = ()
        let v890 : (unit -> unit) = closure12(v875, v886)
        let v891 : unit = (fun () -> v890 (); v889) ()
        let v894 : string = " = "
        let v895 : string = $"{v894}"
        let v898 : unit = ()
        let v899 : (unit -> unit) = closure12(v875, v895)
        let v900 : unit = (fun () -> v899 (); v898) ()
        let v903 : string = $"{13uy}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v875, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = "; "
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v875, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = "error"
        let v921 : string = $"{v920}"
        let v924 : unit = ()
        let v925 : (unit -> unit) = closure12(v875, v921)
        let v926 : unit = (fun () -> v925 (); v924) ()
        let v929 : string = $"{v894}"
        let v932 : unit = ()
        let v933 : (unit -> unit) = closure12(v875, v929)
        let v934 : unit = (fun () -> v933 (); v932) ()
        let v937 : string = $"{v0}"
        let v940 : unit = ()
        let v941 : (unit -> unit) = closure12(v875, v937)
        let v942 : unit = (fun () -> v941 (); v940) ()
        let v945 : string = " }"
        let v946 : string = $"{v945}"
        let v949 : unit = ()
        let v950 : (unit -> unit) = closure12(v875, v946)
        let v951 : unit = (fun () -> v950 (); v949) ()
        let v954 : string = v875.l0
        let v955 : (unit -> string) = closure75()
        let v956 : string = $"{v483} {v867} #{v873} %s{v955 ()} / {v954}"
        let v959 : char list = []
        let v960 : (char list -> (char [])) = List.toArray
        let v961 : (char []) = v960 v959
        let v964 : string = v956.TrimStart v961 
        let v982 : char list = []
        let v983 : char list = '/' :: v982 
        let v986 : char list = ' ' :: v983 
        let v989 : (char list -> (char [])) = List.toArray
        let v990 : (char []) = v989 v986
        let v993 : string = v964.TrimEnd v990 
        let v1011 : (string -> unit) = closure14()
        let v1012 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1013 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1013 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1014 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1014 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1015 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1015 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1011 v993
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1011 v993
        let _v1012 = () 
        #endif
#else
        v1011 v993
        let _v1012 = () 
        #endif
        _v1012 
        let v1016 : (string -> unit) = v17.l0
        v1016 v993
and method40 () : uint8 =
    12uy
and closure92 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_4
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v798 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_4
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_4
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v731 : string = method14()
                        let _v730 = v731 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v732 : string = method14()
                        let _v730 = v732 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v733 : string = method14()
                        let _v730 = v733 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v734 : string = method15()
                        let _v730 = v734 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v735 : string = method15()
                        let _v730 = v735 
                        #endif
#else
                        let v736 : string = method15()
                        let _v730 = v736 
                        #endif
                        let v737 : string = _v730 
                        let v742 : string = method10()
                        let v743 : Mut4 = {l0 = v742} : Mut4
                        let v744 : US3 = US3_3
                        let v745 : string = $"%A{v744}"
                        let v749 : string = $"{v745}"
                        let v752 : unit = ()
                        let v753 : (unit -> unit) = closure12(v743, v749)
                        let v754 : unit = (fun () -> v753 (); v752) ()
                        let v757 : string = v743.l0
                        let v758 : (string []) = v757.Split v737 
                        let v761 : string = v758.[int 0]
                        let v764 : string = method10()
                        let v765 : Mut4 = {l0 = v764} : Mut4
                        let v766 : US3 = US3_4
                        let v767 : string = $"%A{v766}"
                        let v771 : string = $"{v767}"
                        let v774 : unit = ()
                        let v775 : (unit -> unit) = closure12(v765, v771)
                        let v776 : unit = (fun () -> v775 (); v774) ()
                        let v779 : string = v765.l0
                        let v780 : bool = v779.StartsWith v761 
                        let v786 : US4 =
                            if v780 then
                                let v783 : string = "Warning"
                                US4_0(v783)
                            else
                                US4_1
                        match v786 with
                        | US4_1 -> (* None *)
                            let v789 : string = "Critical"
                            US4_0(v789)
                        | US4_0(v787) -> (* Some *)
                            US4_0(v787)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v802 : string =
            match v798 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v799) -> (* Some *)
                v799
        let v803 : (unit -> string) = v802.ToLower
        let v804 : string = v803 ()
        let v807 : string = v804.PadLeft (7, ' ')
        let v821 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v822 : string = "inline_colorization::color_bright_red"
        let v823 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v822 
        let v824 : string = "&*$0"
        let v825 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v824 
        let v826 : string = "inline_colorization::color_reset"
        let v827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v826 
        let v828 : string = "\"{v823}{v825}{v827}\""
        let v829 : string = @$"format!(" + v828 + ")"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "fable_library_rust::String_::fromString($0)"
        let v832 : string = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let _v821 = v832 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v833 : string = "inline_colorization::color_bright_red"
        let v834 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "&*$0"
        let v836 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v835 
        let v837 : string = "inline_colorization::color_reset"
        let v838 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "\"{v834}{v836}{v838}\""
        let v840 : string = @$"format!(" + v839 + ")"
        let v841 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "fable_library_rust::String_::fromString($0)"
        let v843 : string = Fable.Core.RustInterop.emitRustExpr v841 v842 
        let _v821 = v843 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v844 : string = "inline_colorization::color_bright_red"
        let v845 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v844 
        let v846 : string = "&*$0"
        let v847 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v846 
        let v848 : string = "inline_colorization::color_reset"
        let v849 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v848 
        let v850 : string = "\"{v845}{v847}{v849}\""
        let v851 : string = @$"format!(" + v850 + ")"
        let v852 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "fable_library_rust::String_::fromString($0)"
        let v854 : string = Fable.Core.RustInterop.emitRustExpr v852 v853 
        let _v821 = v854 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v855 : string = "\u001b[91m"
        let v856 : string = method9()
        let v857 : string = v855 + v807 
        let v858 : string = v857 + v856 
        let _v821 = v858 
        #endif
#if FABLE_COMPILER_PYTHON
        let v859 : string = "\u001b[91m"
        let v860 : string = method9()
        let v861 : string = v859 + v807 
        let v862 : string = v861 + v860 
        let _v821 = v862 
        #endif
#else
        let v863 : string = "\u001b[91m"
        let v864 : string = method9()
        let v865 : string = v863 + v807 
        let v866 : string = v865 + v864 
        let _v821 = v866 
        #endif
        let v867 : string = _v821 
        let v873 : int64 = v85.l0
        let v874 : string = method10()
        let v875 : Mut4 = {l0 = v874} : Mut4
        let v876 : string = "{ "
        let v877 : string = $"{v876}"
        let v880 : unit = ()
        let v881 : (unit -> unit) = closure12(v875, v877)
        let v882 : unit = (fun () -> v881 (); v880) ()
        let v885 : string = "retry"
        let v886 : string = $"{v885}"
        let v889 : unit = ()
        let v890 : (unit -> unit) = closure12(v875, v886)
        let v891 : unit = (fun () -> v890 (); v889) ()
        let v894 : string = " = "
        let v895 : string = $"{v894}"
        let v898 : unit = ()
        let v899 : (unit -> unit) = closure12(v875, v895)
        let v900 : unit = (fun () -> v899 (); v898) ()
        let v903 : string = $"{12uy}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v875, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = "; "
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v875, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = "error"
        let v921 : string = $"{v920}"
        let v924 : unit = ()
        let v925 : (unit -> unit) = closure12(v875, v921)
        let v926 : unit = (fun () -> v925 (); v924) ()
        let v929 : string = $"{v894}"
        let v932 : unit = ()
        let v933 : (unit -> unit) = closure12(v875, v929)
        let v934 : unit = (fun () -> v933 (); v932) ()
        let v937 : string = $"{v0}"
        let v940 : unit = ()
        let v941 : (unit -> unit) = closure12(v875, v937)
        let v942 : unit = (fun () -> v941 (); v940) ()
        let v945 : string = " }"
        let v946 : string = $"{v945}"
        let v949 : unit = ()
        let v950 : (unit -> unit) = closure12(v875, v946)
        let v951 : unit = (fun () -> v950 (); v949) ()
        let v954 : string = v875.l0
        let v955 : (unit -> string) = closure75()
        let v956 : string = $"{v483} {v867} #{v873} %s{v955 ()} / {v954}"
        let v959 : char list = []
        let v960 : (char list -> (char [])) = List.toArray
        let v961 : (char []) = v960 v959
        let v964 : string = v956.TrimStart v961 
        let v982 : char list = []
        let v983 : char list = '/' :: v982 
        let v986 : char list = ' ' :: v983 
        let v989 : (char list -> (char [])) = List.toArray
        let v990 : (char []) = v989 v986
        let v993 : string = v964.TrimEnd v990 
        let v1011 : (string -> unit) = closure14()
        let v1012 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1013 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1013 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1014 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1014 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1015 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1015 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1011 v993
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1011 v993
        let _v1012 = () 
        #endif
#else
        v1011 v993
        let _v1012 = () 
        #endif
        _v1012 
        let v1016 : (string -> unit) = v17.l0
        v1016 v993
and method41 () : uint8 =
    11uy
and closure93 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_4
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v798 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_4
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_4
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v731 : string = method14()
                        let _v730 = v731 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v732 : string = method14()
                        let _v730 = v732 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v733 : string = method14()
                        let _v730 = v733 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v734 : string = method15()
                        let _v730 = v734 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v735 : string = method15()
                        let _v730 = v735 
                        #endif
#else
                        let v736 : string = method15()
                        let _v730 = v736 
                        #endif
                        let v737 : string = _v730 
                        let v742 : string = method10()
                        let v743 : Mut4 = {l0 = v742} : Mut4
                        let v744 : US3 = US3_3
                        let v745 : string = $"%A{v744}"
                        let v749 : string = $"{v745}"
                        let v752 : unit = ()
                        let v753 : (unit -> unit) = closure12(v743, v749)
                        let v754 : unit = (fun () -> v753 (); v752) ()
                        let v757 : string = v743.l0
                        let v758 : (string []) = v757.Split v737 
                        let v761 : string = v758.[int 0]
                        let v764 : string = method10()
                        let v765 : Mut4 = {l0 = v764} : Mut4
                        let v766 : US3 = US3_4
                        let v767 : string = $"%A{v766}"
                        let v771 : string = $"{v767}"
                        let v774 : unit = ()
                        let v775 : (unit -> unit) = closure12(v765, v771)
                        let v776 : unit = (fun () -> v775 (); v774) ()
                        let v779 : string = v765.l0
                        let v780 : bool = v779.StartsWith v761 
                        let v786 : US4 =
                            if v780 then
                                let v783 : string = "Warning"
                                US4_0(v783)
                            else
                                US4_1
                        match v786 with
                        | US4_1 -> (* None *)
                            let v789 : string = "Critical"
                            US4_0(v789)
                        | US4_0(v787) -> (* Some *)
                            US4_0(v787)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v802 : string =
            match v798 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v799) -> (* Some *)
                v799
        let v803 : (unit -> string) = v802.ToLower
        let v804 : string = v803 ()
        let v807 : string = v804.PadLeft (7, ' ')
        let v821 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v822 : string = "inline_colorization::color_bright_red"
        let v823 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v822 
        let v824 : string = "&*$0"
        let v825 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v824 
        let v826 : string = "inline_colorization::color_reset"
        let v827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v826 
        let v828 : string = "\"{v823}{v825}{v827}\""
        let v829 : string = @$"format!(" + v828 + ")"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "fable_library_rust::String_::fromString($0)"
        let v832 : string = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let _v821 = v832 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v833 : string = "inline_colorization::color_bright_red"
        let v834 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "&*$0"
        let v836 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v835 
        let v837 : string = "inline_colorization::color_reset"
        let v838 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "\"{v834}{v836}{v838}\""
        let v840 : string = @$"format!(" + v839 + ")"
        let v841 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "fable_library_rust::String_::fromString($0)"
        let v843 : string = Fable.Core.RustInterop.emitRustExpr v841 v842 
        let _v821 = v843 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v844 : string = "inline_colorization::color_bright_red"
        let v845 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v844 
        let v846 : string = "&*$0"
        let v847 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v846 
        let v848 : string = "inline_colorization::color_reset"
        let v849 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v848 
        let v850 : string = "\"{v845}{v847}{v849}\""
        let v851 : string = @$"format!(" + v850 + ")"
        let v852 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "fable_library_rust::String_::fromString($0)"
        let v854 : string = Fable.Core.RustInterop.emitRustExpr v852 v853 
        let _v821 = v854 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v855 : string = "\u001b[91m"
        let v856 : string = method9()
        let v857 : string = v855 + v807 
        let v858 : string = v857 + v856 
        let _v821 = v858 
        #endif
#if FABLE_COMPILER_PYTHON
        let v859 : string = "\u001b[91m"
        let v860 : string = method9()
        let v861 : string = v859 + v807 
        let v862 : string = v861 + v860 
        let _v821 = v862 
        #endif
#else
        let v863 : string = "\u001b[91m"
        let v864 : string = method9()
        let v865 : string = v863 + v807 
        let v866 : string = v865 + v864 
        let _v821 = v866 
        #endif
        let v867 : string = _v821 
        let v873 : int64 = v85.l0
        let v874 : string = method10()
        let v875 : Mut4 = {l0 = v874} : Mut4
        let v876 : string = "{ "
        let v877 : string = $"{v876}"
        let v880 : unit = ()
        let v881 : (unit -> unit) = closure12(v875, v877)
        let v882 : unit = (fun () -> v881 (); v880) ()
        let v885 : string = "retry"
        let v886 : string = $"{v885}"
        let v889 : unit = ()
        let v890 : (unit -> unit) = closure12(v875, v886)
        let v891 : unit = (fun () -> v890 (); v889) ()
        let v894 : string = " = "
        let v895 : string = $"{v894}"
        let v898 : unit = ()
        let v899 : (unit -> unit) = closure12(v875, v895)
        let v900 : unit = (fun () -> v899 (); v898) ()
        let v903 : string = $"{11uy}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v875, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = "; "
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v875, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = "error"
        let v921 : string = $"{v920}"
        let v924 : unit = ()
        let v925 : (unit -> unit) = closure12(v875, v921)
        let v926 : unit = (fun () -> v925 (); v924) ()
        let v929 : string = $"{v894}"
        let v932 : unit = ()
        let v933 : (unit -> unit) = closure12(v875, v929)
        let v934 : unit = (fun () -> v933 (); v932) ()
        let v937 : string = $"{v0}"
        let v940 : unit = ()
        let v941 : (unit -> unit) = closure12(v875, v937)
        let v942 : unit = (fun () -> v941 (); v940) ()
        let v945 : string = " }"
        let v946 : string = $"{v945}"
        let v949 : unit = ()
        let v950 : (unit -> unit) = closure12(v875, v946)
        let v951 : unit = (fun () -> v950 (); v949) ()
        let v954 : string = v875.l0
        let v955 : (unit -> string) = closure75()
        let v956 : string = $"{v483} {v867} #{v873} %s{v955 ()} / {v954}"
        let v959 : char list = []
        let v960 : (char list -> (char [])) = List.toArray
        let v961 : (char []) = v960 v959
        let v964 : string = v956.TrimStart v961 
        let v982 : char list = []
        let v983 : char list = '/' :: v982 
        let v986 : char list = ' ' :: v983 
        let v989 : (char list -> (char [])) = List.toArray
        let v990 : (char []) = v989 v986
        let v993 : string = v964.TrimEnd v990 
        let v1011 : (string -> unit) = closure14()
        let v1012 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1013 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1013 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1014 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1014 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1015 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1015 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1011 v993
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1011 v993
        let _v1012 = () 
        #endif
#else
        v1011 v993
        let _v1012 = () 
        #endif
        _v1012 
        let v1016 : (string -> unit) = v17.l0
        v1016 v993
and method42 () : uint8 =
    10uy
and closure94 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_4
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v798 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_4
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_4
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v731 : string = method14()
                        let _v730 = v731 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v732 : string = method14()
                        let _v730 = v732 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v733 : string = method14()
                        let _v730 = v733 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v734 : string = method15()
                        let _v730 = v734 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v735 : string = method15()
                        let _v730 = v735 
                        #endif
#else
                        let v736 : string = method15()
                        let _v730 = v736 
                        #endif
                        let v737 : string = _v730 
                        let v742 : string = method10()
                        let v743 : Mut4 = {l0 = v742} : Mut4
                        let v744 : US3 = US3_3
                        let v745 : string = $"%A{v744}"
                        let v749 : string = $"{v745}"
                        let v752 : unit = ()
                        let v753 : (unit -> unit) = closure12(v743, v749)
                        let v754 : unit = (fun () -> v753 (); v752) ()
                        let v757 : string = v743.l0
                        let v758 : (string []) = v757.Split v737 
                        let v761 : string = v758.[int 0]
                        let v764 : string = method10()
                        let v765 : Mut4 = {l0 = v764} : Mut4
                        let v766 : US3 = US3_4
                        let v767 : string = $"%A{v766}"
                        let v771 : string = $"{v767}"
                        let v774 : unit = ()
                        let v775 : (unit -> unit) = closure12(v765, v771)
                        let v776 : unit = (fun () -> v775 (); v774) ()
                        let v779 : string = v765.l0
                        let v780 : bool = v779.StartsWith v761 
                        let v786 : US4 =
                            if v780 then
                                let v783 : string = "Warning"
                                US4_0(v783)
                            else
                                US4_1
                        match v786 with
                        | US4_1 -> (* None *)
                            let v789 : string = "Critical"
                            US4_0(v789)
                        | US4_0(v787) -> (* Some *)
                            US4_0(v787)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v802 : string =
            match v798 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v799) -> (* Some *)
                v799
        let v803 : (unit -> string) = v802.ToLower
        let v804 : string = v803 ()
        let v807 : string = v804.PadLeft (7, ' ')
        let v821 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v822 : string = "inline_colorization::color_bright_red"
        let v823 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v822 
        let v824 : string = "&*$0"
        let v825 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v824 
        let v826 : string = "inline_colorization::color_reset"
        let v827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v826 
        let v828 : string = "\"{v823}{v825}{v827}\""
        let v829 : string = @$"format!(" + v828 + ")"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "fable_library_rust::String_::fromString($0)"
        let v832 : string = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let _v821 = v832 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v833 : string = "inline_colorization::color_bright_red"
        let v834 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "&*$0"
        let v836 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v835 
        let v837 : string = "inline_colorization::color_reset"
        let v838 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "\"{v834}{v836}{v838}\""
        let v840 : string = @$"format!(" + v839 + ")"
        let v841 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "fable_library_rust::String_::fromString($0)"
        let v843 : string = Fable.Core.RustInterop.emitRustExpr v841 v842 
        let _v821 = v843 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v844 : string = "inline_colorization::color_bright_red"
        let v845 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v844 
        let v846 : string = "&*$0"
        let v847 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v846 
        let v848 : string = "inline_colorization::color_reset"
        let v849 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v848 
        let v850 : string = "\"{v845}{v847}{v849}\""
        let v851 : string = @$"format!(" + v850 + ")"
        let v852 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "fable_library_rust::String_::fromString($0)"
        let v854 : string = Fable.Core.RustInterop.emitRustExpr v852 v853 
        let _v821 = v854 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v855 : string = "\u001b[91m"
        let v856 : string = method9()
        let v857 : string = v855 + v807 
        let v858 : string = v857 + v856 
        let _v821 = v858 
        #endif
#if FABLE_COMPILER_PYTHON
        let v859 : string = "\u001b[91m"
        let v860 : string = method9()
        let v861 : string = v859 + v807 
        let v862 : string = v861 + v860 
        let _v821 = v862 
        #endif
#else
        let v863 : string = "\u001b[91m"
        let v864 : string = method9()
        let v865 : string = v863 + v807 
        let v866 : string = v865 + v864 
        let _v821 = v866 
        #endif
        let v867 : string = _v821 
        let v873 : int64 = v85.l0
        let v874 : string = method10()
        let v875 : Mut4 = {l0 = v874} : Mut4
        let v876 : string = "{ "
        let v877 : string = $"{v876}"
        let v880 : unit = ()
        let v881 : (unit -> unit) = closure12(v875, v877)
        let v882 : unit = (fun () -> v881 (); v880) ()
        let v885 : string = "retry"
        let v886 : string = $"{v885}"
        let v889 : unit = ()
        let v890 : (unit -> unit) = closure12(v875, v886)
        let v891 : unit = (fun () -> v890 (); v889) ()
        let v894 : string = " = "
        let v895 : string = $"{v894}"
        let v898 : unit = ()
        let v899 : (unit -> unit) = closure12(v875, v895)
        let v900 : unit = (fun () -> v899 (); v898) ()
        let v903 : string = $"{10uy}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v875, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = "; "
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v875, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = "error"
        let v921 : string = $"{v920}"
        let v924 : unit = ()
        let v925 : (unit -> unit) = closure12(v875, v921)
        let v926 : unit = (fun () -> v925 (); v924) ()
        let v929 : string = $"{v894}"
        let v932 : unit = ()
        let v933 : (unit -> unit) = closure12(v875, v929)
        let v934 : unit = (fun () -> v933 (); v932) ()
        let v937 : string = $"{v0}"
        let v940 : unit = ()
        let v941 : (unit -> unit) = closure12(v875, v937)
        let v942 : unit = (fun () -> v941 (); v940) ()
        let v945 : string = " }"
        let v946 : string = $"{v945}"
        let v949 : unit = ()
        let v950 : (unit -> unit) = closure12(v875, v946)
        let v951 : unit = (fun () -> v950 (); v949) ()
        let v954 : string = v875.l0
        let v955 : (unit -> string) = closure75()
        let v956 : string = $"{v483} {v867} #{v873} %s{v955 ()} / {v954}"
        let v959 : char list = []
        let v960 : (char list -> (char [])) = List.toArray
        let v961 : (char []) = v960 v959
        let v964 : string = v956.TrimStart v961 
        let v982 : char list = []
        let v983 : char list = '/' :: v982 
        let v986 : char list = ' ' :: v983 
        let v989 : (char list -> (char [])) = List.toArray
        let v990 : (char []) = v989 v986
        let v993 : string = v964.TrimEnd v990 
        let v1011 : (string -> unit) = closure14()
        let v1012 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1013 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1013 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1014 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1014 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1015 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1015 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1011 v993
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1011 v993
        let _v1012 = () 
        #endif
#else
        v1011 v993
        let _v1012 = () 
        #endif
        _v1012 
        let v1016 : (string -> unit) = v17.l0
        v1016 v993
and method43 () : uint8 =
    9uy
and closure95 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_4
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v798 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_4
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_4
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v731 : string = method14()
                        let _v730 = v731 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v732 : string = method14()
                        let _v730 = v732 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v733 : string = method14()
                        let _v730 = v733 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v734 : string = method15()
                        let _v730 = v734 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v735 : string = method15()
                        let _v730 = v735 
                        #endif
#else
                        let v736 : string = method15()
                        let _v730 = v736 
                        #endif
                        let v737 : string = _v730 
                        let v742 : string = method10()
                        let v743 : Mut4 = {l0 = v742} : Mut4
                        let v744 : US3 = US3_3
                        let v745 : string = $"%A{v744}"
                        let v749 : string = $"{v745}"
                        let v752 : unit = ()
                        let v753 : (unit -> unit) = closure12(v743, v749)
                        let v754 : unit = (fun () -> v753 (); v752) ()
                        let v757 : string = v743.l0
                        let v758 : (string []) = v757.Split v737 
                        let v761 : string = v758.[int 0]
                        let v764 : string = method10()
                        let v765 : Mut4 = {l0 = v764} : Mut4
                        let v766 : US3 = US3_4
                        let v767 : string = $"%A{v766}"
                        let v771 : string = $"{v767}"
                        let v774 : unit = ()
                        let v775 : (unit -> unit) = closure12(v765, v771)
                        let v776 : unit = (fun () -> v775 (); v774) ()
                        let v779 : string = v765.l0
                        let v780 : bool = v779.StartsWith v761 
                        let v786 : US4 =
                            if v780 then
                                let v783 : string = "Warning"
                                US4_0(v783)
                            else
                                US4_1
                        match v786 with
                        | US4_1 -> (* None *)
                            let v789 : string = "Critical"
                            US4_0(v789)
                        | US4_0(v787) -> (* Some *)
                            US4_0(v787)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v802 : string =
            match v798 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v799) -> (* Some *)
                v799
        let v803 : (unit -> string) = v802.ToLower
        let v804 : string = v803 ()
        let v807 : string = v804.PadLeft (7, ' ')
        let v821 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v822 : string = "inline_colorization::color_bright_red"
        let v823 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v822 
        let v824 : string = "&*$0"
        let v825 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v824 
        let v826 : string = "inline_colorization::color_reset"
        let v827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v826 
        let v828 : string = "\"{v823}{v825}{v827}\""
        let v829 : string = @$"format!(" + v828 + ")"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "fable_library_rust::String_::fromString($0)"
        let v832 : string = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let _v821 = v832 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v833 : string = "inline_colorization::color_bright_red"
        let v834 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "&*$0"
        let v836 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v835 
        let v837 : string = "inline_colorization::color_reset"
        let v838 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "\"{v834}{v836}{v838}\""
        let v840 : string = @$"format!(" + v839 + ")"
        let v841 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "fable_library_rust::String_::fromString($0)"
        let v843 : string = Fable.Core.RustInterop.emitRustExpr v841 v842 
        let _v821 = v843 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v844 : string = "inline_colorization::color_bright_red"
        let v845 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v844 
        let v846 : string = "&*$0"
        let v847 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v846 
        let v848 : string = "inline_colorization::color_reset"
        let v849 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v848 
        let v850 : string = "\"{v845}{v847}{v849}\""
        let v851 : string = @$"format!(" + v850 + ")"
        let v852 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "fable_library_rust::String_::fromString($0)"
        let v854 : string = Fable.Core.RustInterop.emitRustExpr v852 v853 
        let _v821 = v854 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v855 : string = "\u001b[91m"
        let v856 : string = method9()
        let v857 : string = v855 + v807 
        let v858 : string = v857 + v856 
        let _v821 = v858 
        #endif
#if FABLE_COMPILER_PYTHON
        let v859 : string = "\u001b[91m"
        let v860 : string = method9()
        let v861 : string = v859 + v807 
        let v862 : string = v861 + v860 
        let _v821 = v862 
        #endif
#else
        let v863 : string = "\u001b[91m"
        let v864 : string = method9()
        let v865 : string = v863 + v807 
        let v866 : string = v865 + v864 
        let _v821 = v866 
        #endif
        let v867 : string = _v821 
        let v873 : int64 = v85.l0
        let v874 : string = method10()
        let v875 : Mut4 = {l0 = v874} : Mut4
        let v876 : string = "{ "
        let v877 : string = $"{v876}"
        let v880 : unit = ()
        let v881 : (unit -> unit) = closure12(v875, v877)
        let v882 : unit = (fun () -> v881 (); v880) ()
        let v885 : string = "retry"
        let v886 : string = $"{v885}"
        let v889 : unit = ()
        let v890 : (unit -> unit) = closure12(v875, v886)
        let v891 : unit = (fun () -> v890 (); v889) ()
        let v894 : string = " = "
        let v895 : string = $"{v894}"
        let v898 : unit = ()
        let v899 : (unit -> unit) = closure12(v875, v895)
        let v900 : unit = (fun () -> v899 (); v898) ()
        let v903 : string = $"{9uy}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v875, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = "; "
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v875, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = "error"
        let v921 : string = $"{v920}"
        let v924 : unit = ()
        let v925 : (unit -> unit) = closure12(v875, v921)
        let v926 : unit = (fun () -> v925 (); v924) ()
        let v929 : string = $"{v894}"
        let v932 : unit = ()
        let v933 : (unit -> unit) = closure12(v875, v929)
        let v934 : unit = (fun () -> v933 (); v932) ()
        let v937 : string = $"{v0}"
        let v940 : unit = ()
        let v941 : (unit -> unit) = closure12(v875, v937)
        let v942 : unit = (fun () -> v941 (); v940) ()
        let v945 : string = " }"
        let v946 : string = $"{v945}"
        let v949 : unit = ()
        let v950 : (unit -> unit) = closure12(v875, v946)
        let v951 : unit = (fun () -> v950 (); v949) ()
        let v954 : string = v875.l0
        let v955 : (unit -> string) = closure75()
        let v956 : string = $"{v483} {v867} #{v873} %s{v955 ()} / {v954}"
        let v959 : char list = []
        let v960 : (char list -> (char [])) = List.toArray
        let v961 : (char []) = v960 v959
        let v964 : string = v956.TrimStart v961 
        let v982 : char list = []
        let v983 : char list = '/' :: v982 
        let v986 : char list = ' ' :: v983 
        let v989 : (char list -> (char [])) = List.toArray
        let v990 : (char []) = v989 v986
        let v993 : string = v964.TrimEnd v990 
        let v1011 : (string -> unit) = closure14()
        let v1012 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1013 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1013 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1014 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1014 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1015 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1015 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1011 v993
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1011 v993
        let _v1012 = () 
        #endif
#else
        v1011 v993
        let _v1012 = () 
        #endif
        _v1012 
        let v1016 : (string -> unit) = v17.l0
        v1016 v993
and method44 () : uint8 =
    8uy
and closure96 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_4
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v798 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_4
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_4
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v731 : string = method14()
                        let _v730 = v731 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v732 : string = method14()
                        let _v730 = v732 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v733 : string = method14()
                        let _v730 = v733 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v734 : string = method15()
                        let _v730 = v734 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v735 : string = method15()
                        let _v730 = v735 
                        #endif
#else
                        let v736 : string = method15()
                        let _v730 = v736 
                        #endif
                        let v737 : string = _v730 
                        let v742 : string = method10()
                        let v743 : Mut4 = {l0 = v742} : Mut4
                        let v744 : US3 = US3_3
                        let v745 : string = $"%A{v744}"
                        let v749 : string = $"{v745}"
                        let v752 : unit = ()
                        let v753 : (unit -> unit) = closure12(v743, v749)
                        let v754 : unit = (fun () -> v753 (); v752) ()
                        let v757 : string = v743.l0
                        let v758 : (string []) = v757.Split v737 
                        let v761 : string = v758.[int 0]
                        let v764 : string = method10()
                        let v765 : Mut4 = {l0 = v764} : Mut4
                        let v766 : US3 = US3_4
                        let v767 : string = $"%A{v766}"
                        let v771 : string = $"{v767}"
                        let v774 : unit = ()
                        let v775 : (unit -> unit) = closure12(v765, v771)
                        let v776 : unit = (fun () -> v775 (); v774) ()
                        let v779 : string = v765.l0
                        let v780 : bool = v779.StartsWith v761 
                        let v786 : US4 =
                            if v780 then
                                let v783 : string = "Warning"
                                US4_0(v783)
                            else
                                US4_1
                        match v786 with
                        | US4_1 -> (* None *)
                            let v789 : string = "Critical"
                            US4_0(v789)
                        | US4_0(v787) -> (* Some *)
                            US4_0(v787)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v802 : string =
            match v798 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v799) -> (* Some *)
                v799
        let v803 : (unit -> string) = v802.ToLower
        let v804 : string = v803 ()
        let v807 : string = v804.PadLeft (7, ' ')
        let v821 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v822 : string = "inline_colorization::color_bright_red"
        let v823 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v822 
        let v824 : string = "&*$0"
        let v825 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v824 
        let v826 : string = "inline_colorization::color_reset"
        let v827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v826 
        let v828 : string = "\"{v823}{v825}{v827}\""
        let v829 : string = @$"format!(" + v828 + ")"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "fable_library_rust::String_::fromString($0)"
        let v832 : string = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let _v821 = v832 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v833 : string = "inline_colorization::color_bright_red"
        let v834 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "&*$0"
        let v836 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v835 
        let v837 : string = "inline_colorization::color_reset"
        let v838 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "\"{v834}{v836}{v838}\""
        let v840 : string = @$"format!(" + v839 + ")"
        let v841 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "fable_library_rust::String_::fromString($0)"
        let v843 : string = Fable.Core.RustInterop.emitRustExpr v841 v842 
        let _v821 = v843 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v844 : string = "inline_colorization::color_bright_red"
        let v845 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v844 
        let v846 : string = "&*$0"
        let v847 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v846 
        let v848 : string = "inline_colorization::color_reset"
        let v849 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v848 
        let v850 : string = "\"{v845}{v847}{v849}\""
        let v851 : string = @$"format!(" + v850 + ")"
        let v852 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "fable_library_rust::String_::fromString($0)"
        let v854 : string = Fable.Core.RustInterop.emitRustExpr v852 v853 
        let _v821 = v854 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v855 : string = "\u001b[91m"
        let v856 : string = method9()
        let v857 : string = v855 + v807 
        let v858 : string = v857 + v856 
        let _v821 = v858 
        #endif
#if FABLE_COMPILER_PYTHON
        let v859 : string = "\u001b[91m"
        let v860 : string = method9()
        let v861 : string = v859 + v807 
        let v862 : string = v861 + v860 
        let _v821 = v862 
        #endif
#else
        let v863 : string = "\u001b[91m"
        let v864 : string = method9()
        let v865 : string = v863 + v807 
        let v866 : string = v865 + v864 
        let _v821 = v866 
        #endif
        let v867 : string = _v821 
        let v873 : int64 = v85.l0
        let v874 : string = method10()
        let v875 : Mut4 = {l0 = v874} : Mut4
        let v876 : string = "{ "
        let v877 : string = $"{v876}"
        let v880 : unit = ()
        let v881 : (unit -> unit) = closure12(v875, v877)
        let v882 : unit = (fun () -> v881 (); v880) ()
        let v885 : string = "retry"
        let v886 : string = $"{v885}"
        let v889 : unit = ()
        let v890 : (unit -> unit) = closure12(v875, v886)
        let v891 : unit = (fun () -> v890 (); v889) ()
        let v894 : string = " = "
        let v895 : string = $"{v894}"
        let v898 : unit = ()
        let v899 : (unit -> unit) = closure12(v875, v895)
        let v900 : unit = (fun () -> v899 (); v898) ()
        let v903 : string = $"{8uy}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v875, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = "; "
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v875, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = "error"
        let v921 : string = $"{v920}"
        let v924 : unit = ()
        let v925 : (unit -> unit) = closure12(v875, v921)
        let v926 : unit = (fun () -> v925 (); v924) ()
        let v929 : string = $"{v894}"
        let v932 : unit = ()
        let v933 : (unit -> unit) = closure12(v875, v929)
        let v934 : unit = (fun () -> v933 (); v932) ()
        let v937 : string = $"{v0}"
        let v940 : unit = ()
        let v941 : (unit -> unit) = closure12(v875, v937)
        let v942 : unit = (fun () -> v941 (); v940) ()
        let v945 : string = " }"
        let v946 : string = $"{v945}"
        let v949 : unit = ()
        let v950 : (unit -> unit) = closure12(v875, v946)
        let v951 : unit = (fun () -> v950 (); v949) ()
        let v954 : string = v875.l0
        let v955 : (unit -> string) = closure75()
        let v956 : string = $"{v483} {v867} #{v873} %s{v955 ()} / {v954}"
        let v959 : char list = []
        let v960 : (char list -> (char [])) = List.toArray
        let v961 : (char []) = v960 v959
        let v964 : string = v956.TrimStart v961 
        let v982 : char list = []
        let v983 : char list = '/' :: v982 
        let v986 : char list = ' ' :: v983 
        let v989 : (char list -> (char [])) = List.toArray
        let v990 : (char []) = v989 v986
        let v993 : string = v964.TrimEnd v990 
        let v1011 : (string -> unit) = closure14()
        let v1012 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1013 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1013 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1014 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1014 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1015 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1015 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1011 v993
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1011 v993
        let _v1012 = () 
        #endif
#else
        v1011 v993
        let _v1012 = () 
        #endif
        _v1012 
        let v1016 : (string -> unit) = v17.l0
        v1016 v993
and method45 () : uint8 =
    7uy
and closure97 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_4
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v798 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_4
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_4
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v731 : string = method14()
                        let _v730 = v731 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v732 : string = method14()
                        let _v730 = v732 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v733 : string = method14()
                        let _v730 = v733 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v734 : string = method15()
                        let _v730 = v734 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v735 : string = method15()
                        let _v730 = v735 
                        #endif
#else
                        let v736 : string = method15()
                        let _v730 = v736 
                        #endif
                        let v737 : string = _v730 
                        let v742 : string = method10()
                        let v743 : Mut4 = {l0 = v742} : Mut4
                        let v744 : US3 = US3_3
                        let v745 : string = $"%A{v744}"
                        let v749 : string = $"{v745}"
                        let v752 : unit = ()
                        let v753 : (unit -> unit) = closure12(v743, v749)
                        let v754 : unit = (fun () -> v753 (); v752) ()
                        let v757 : string = v743.l0
                        let v758 : (string []) = v757.Split v737 
                        let v761 : string = v758.[int 0]
                        let v764 : string = method10()
                        let v765 : Mut4 = {l0 = v764} : Mut4
                        let v766 : US3 = US3_4
                        let v767 : string = $"%A{v766}"
                        let v771 : string = $"{v767}"
                        let v774 : unit = ()
                        let v775 : (unit -> unit) = closure12(v765, v771)
                        let v776 : unit = (fun () -> v775 (); v774) ()
                        let v779 : string = v765.l0
                        let v780 : bool = v779.StartsWith v761 
                        let v786 : US4 =
                            if v780 then
                                let v783 : string = "Warning"
                                US4_0(v783)
                            else
                                US4_1
                        match v786 with
                        | US4_1 -> (* None *)
                            let v789 : string = "Critical"
                            US4_0(v789)
                        | US4_0(v787) -> (* Some *)
                            US4_0(v787)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v802 : string =
            match v798 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v799) -> (* Some *)
                v799
        let v803 : (unit -> string) = v802.ToLower
        let v804 : string = v803 ()
        let v807 : string = v804.PadLeft (7, ' ')
        let v821 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v822 : string = "inline_colorization::color_bright_red"
        let v823 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v822 
        let v824 : string = "&*$0"
        let v825 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v824 
        let v826 : string = "inline_colorization::color_reset"
        let v827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v826 
        let v828 : string = "\"{v823}{v825}{v827}\""
        let v829 : string = @$"format!(" + v828 + ")"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "fable_library_rust::String_::fromString($0)"
        let v832 : string = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let _v821 = v832 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v833 : string = "inline_colorization::color_bright_red"
        let v834 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "&*$0"
        let v836 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v835 
        let v837 : string = "inline_colorization::color_reset"
        let v838 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "\"{v834}{v836}{v838}\""
        let v840 : string = @$"format!(" + v839 + ")"
        let v841 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "fable_library_rust::String_::fromString($0)"
        let v843 : string = Fable.Core.RustInterop.emitRustExpr v841 v842 
        let _v821 = v843 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v844 : string = "inline_colorization::color_bright_red"
        let v845 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v844 
        let v846 : string = "&*$0"
        let v847 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v846 
        let v848 : string = "inline_colorization::color_reset"
        let v849 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v848 
        let v850 : string = "\"{v845}{v847}{v849}\""
        let v851 : string = @$"format!(" + v850 + ")"
        let v852 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "fable_library_rust::String_::fromString($0)"
        let v854 : string = Fable.Core.RustInterop.emitRustExpr v852 v853 
        let _v821 = v854 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v855 : string = "\u001b[91m"
        let v856 : string = method9()
        let v857 : string = v855 + v807 
        let v858 : string = v857 + v856 
        let _v821 = v858 
        #endif
#if FABLE_COMPILER_PYTHON
        let v859 : string = "\u001b[91m"
        let v860 : string = method9()
        let v861 : string = v859 + v807 
        let v862 : string = v861 + v860 
        let _v821 = v862 
        #endif
#else
        let v863 : string = "\u001b[91m"
        let v864 : string = method9()
        let v865 : string = v863 + v807 
        let v866 : string = v865 + v864 
        let _v821 = v866 
        #endif
        let v867 : string = _v821 
        let v873 : int64 = v85.l0
        let v874 : string = method10()
        let v875 : Mut4 = {l0 = v874} : Mut4
        let v876 : string = "{ "
        let v877 : string = $"{v876}"
        let v880 : unit = ()
        let v881 : (unit -> unit) = closure12(v875, v877)
        let v882 : unit = (fun () -> v881 (); v880) ()
        let v885 : string = "retry"
        let v886 : string = $"{v885}"
        let v889 : unit = ()
        let v890 : (unit -> unit) = closure12(v875, v886)
        let v891 : unit = (fun () -> v890 (); v889) ()
        let v894 : string = " = "
        let v895 : string = $"{v894}"
        let v898 : unit = ()
        let v899 : (unit -> unit) = closure12(v875, v895)
        let v900 : unit = (fun () -> v899 (); v898) ()
        let v903 : string = $"{7uy}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v875, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = "; "
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v875, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = "error"
        let v921 : string = $"{v920}"
        let v924 : unit = ()
        let v925 : (unit -> unit) = closure12(v875, v921)
        let v926 : unit = (fun () -> v925 (); v924) ()
        let v929 : string = $"{v894}"
        let v932 : unit = ()
        let v933 : (unit -> unit) = closure12(v875, v929)
        let v934 : unit = (fun () -> v933 (); v932) ()
        let v937 : string = $"{v0}"
        let v940 : unit = ()
        let v941 : (unit -> unit) = closure12(v875, v937)
        let v942 : unit = (fun () -> v941 (); v940) ()
        let v945 : string = " }"
        let v946 : string = $"{v945}"
        let v949 : unit = ()
        let v950 : (unit -> unit) = closure12(v875, v946)
        let v951 : unit = (fun () -> v950 (); v949) ()
        let v954 : string = v875.l0
        let v955 : (unit -> string) = closure75()
        let v956 : string = $"{v483} {v867} #{v873} %s{v955 ()} / {v954}"
        let v959 : char list = []
        let v960 : (char list -> (char [])) = List.toArray
        let v961 : (char []) = v960 v959
        let v964 : string = v956.TrimStart v961 
        let v982 : char list = []
        let v983 : char list = '/' :: v982 
        let v986 : char list = ' ' :: v983 
        let v989 : (char list -> (char [])) = List.toArray
        let v990 : (char []) = v989 v986
        let v993 : string = v964.TrimEnd v990 
        let v1011 : (string -> unit) = closure14()
        let v1012 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1013 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1013 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1014 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1014 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1015 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1015 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1011 v993
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1011 v993
        let _v1012 = () 
        #endif
#else
        v1011 v993
        let _v1012 = () 
        #endif
        _v1012 
        let v1016 : (string -> unit) = v17.l0
        v1016 v993
and method46 () : uint8 =
    6uy
and closure98 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_4
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v798 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_4
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_4
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v731 : string = method14()
                        let _v730 = v731 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v732 : string = method14()
                        let _v730 = v732 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v733 : string = method14()
                        let _v730 = v733 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v734 : string = method15()
                        let _v730 = v734 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v735 : string = method15()
                        let _v730 = v735 
                        #endif
#else
                        let v736 : string = method15()
                        let _v730 = v736 
                        #endif
                        let v737 : string = _v730 
                        let v742 : string = method10()
                        let v743 : Mut4 = {l0 = v742} : Mut4
                        let v744 : US3 = US3_3
                        let v745 : string = $"%A{v744}"
                        let v749 : string = $"{v745}"
                        let v752 : unit = ()
                        let v753 : (unit -> unit) = closure12(v743, v749)
                        let v754 : unit = (fun () -> v753 (); v752) ()
                        let v757 : string = v743.l0
                        let v758 : (string []) = v757.Split v737 
                        let v761 : string = v758.[int 0]
                        let v764 : string = method10()
                        let v765 : Mut4 = {l0 = v764} : Mut4
                        let v766 : US3 = US3_4
                        let v767 : string = $"%A{v766}"
                        let v771 : string = $"{v767}"
                        let v774 : unit = ()
                        let v775 : (unit -> unit) = closure12(v765, v771)
                        let v776 : unit = (fun () -> v775 (); v774) ()
                        let v779 : string = v765.l0
                        let v780 : bool = v779.StartsWith v761 
                        let v786 : US4 =
                            if v780 then
                                let v783 : string = "Warning"
                                US4_0(v783)
                            else
                                US4_1
                        match v786 with
                        | US4_1 -> (* None *)
                            let v789 : string = "Critical"
                            US4_0(v789)
                        | US4_0(v787) -> (* Some *)
                            US4_0(v787)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v802 : string =
            match v798 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v799) -> (* Some *)
                v799
        let v803 : (unit -> string) = v802.ToLower
        let v804 : string = v803 ()
        let v807 : string = v804.PadLeft (7, ' ')
        let v821 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v822 : string = "inline_colorization::color_bright_red"
        let v823 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v822 
        let v824 : string = "&*$0"
        let v825 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v824 
        let v826 : string = "inline_colorization::color_reset"
        let v827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v826 
        let v828 : string = "\"{v823}{v825}{v827}\""
        let v829 : string = @$"format!(" + v828 + ")"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "fable_library_rust::String_::fromString($0)"
        let v832 : string = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let _v821 = v832 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v833 : string = "inline_colorization::color_bright_red"
        let v834 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "&*$0"
        let v836 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v835 
        let v837 : string = "inline_colorization::color_reset"
        let v838 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "\"{v834}{v836}{v838}\""
        let v840 : string = @$"format!(" + v839 + ")"
        let v841 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "fable_library_rust::String_::fromString($0)"
        let v843 : string = Fable.Core.RustInterop.emitRustExpr v841 v842 
        let _v821 = v843 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v844 : string = "inline_colorization::color_bright_red"
        let v845 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v844 
        let v846 : string = "&*$0"
        let v847 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v846 
        let v848 : string = "inline_colorization::color_reset"
        let v849 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v848 
        let v850 : string = "\"{v845}{v847}{v849}\""
        let v851 : string = @$"format!(" + v850 + ")"
        let v852 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "fable_library_rust::String_::fromString($0)"
        let v854 : string = Fable.Core.RustInterop.emitRustExpr v852 v853 
        let _v821 = v854 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v855 : string = "\u001b[91m"
        let v856 : string = method9()
        let v857 : string = v855 + v807 
        let v858 : string = v857 + v856 
        let _v821 = v858 
        #endif
#if FABLE_COMPILER_PYTHON
        let v859 : string = "\u001b[91m"
        let v860 : string = method9()
        let v861 : string = v859 + v807 
        let v862 : string = v861 + v860 
        let _v821 = v862 
        #endif
#else
        let v863 : string = "\u001b[91m"
        let v864 : string = method9()
        let v865 : string = v863 + v807 
        let v866 : string = v865 + v864 
        let _v821 = v866 
        #endif
        let v867 : string = _v821 
        let v873 : int64 = v85.l0
        let v874 : string = method10()
        let v875 : Mut4 = {l0 = v874} : Mut4
        let v876 : string = "{ "
        let v877 : string = $"{v876}"
        let v880 : unit = ()
        let v881 : (unit -> unit) = closure12(v875, v877)
        let v882 : unit = (fun () -> v881 (); v880) ()
        let v885 : string = "retry"
        let v886 : string = $"{v885}"
        let v889 : unit = ()
        let v890 : (unit -> unit) = closure12(v875, v886)
        let v891 : unit = (fun () -> v890 (); v889) ()
        let v894 : string = " = "
        let v895 : string = $"{v894}"
        let v898 : unit = ()
        let v899 : (unit -> unit) = closure12(v875, v895)
        let v900 : unit = (fun () -> v899 (); v898) ()
        let v903 : string = $"{6uy}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v875, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = "; "
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v875, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = "error"
        let v921 : string = $"{v920}"
        let v924 : unit = ()
        let v925 : (unit -> unit) = closure12(v875, v921)
        let v926 : unit = (fun () -> v925 (); v924) ()
        let v929 : string = $"{v894}"
        let v932 : unit = ()
        let v933 : (unit -> unit) = closure12(v875, v929)
        let v934 : unit = (fun () -> v933 (); v932) ()
        let v937 : string = $"{v0}"
        let v940 : unit = ()
        let v941 : (unit -> unit) = closure12(v875, v937)
        let v942 : unit = (fun () -> v941 (); v940) ()
        let v945 : string = " }"
        let v946 : string = $"{v945}"
        let v949 : unit = ()
        let v950 : (unit -> unit) = closure12(v875, v946)
        let v951 : unit = (fun () -> v950 (); v949) ()
        let v954 : string = v875.l0
        let v955 : (unit -> string) = closure75()
        let v956 : string = $"{v483} {v867} #{v873} %s{v955 ()} / {v954}"
        let v959 : char list = []
        let v960 : (char list -> (char [])) = List.toArray
        let v961 : (char []) = v960 v959
        let v964 : string = v956.TrimStart v961 
        let v982 : char list = []
        let v983 : char list = '/' :: v982 
        let v986 : char list = ' ' :: v983 
        let v989 : (char list -> (char [])) = List.toArray
        let v990 : (char []) = v989 v986
        let v993 : string = v964.TrimEnd v990 
        let v1011 : (string -> unit) = closure14()
        let v1012 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1013 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1013 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1014 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1014 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1015 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1015 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1011 v993
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1011 v993
        let _v1012 = () 
        #endif
#else
        v1011 v993
        let _v1012 = () 
        #endif
        _v1012 
        let v1016 : (string -> unit) = v17.l0
        v1016 v993
and method47 () : uint8 =
    5uy
and closure99 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_4
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v798 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_4
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_4
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v731 : string = method14()
                        let _v730 = v731 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v732 : string = method14()
                        let _v730 = v732 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v733 : string = method14()
                        let _v730 = v733 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v734 : string = method15()
                        let _v730 = v734 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v735 : string = method15()
                        let _v730 = v735 
                        #endif
#else
                        let v736 : string = method15()
                        let _v730 = v736 
                        #endif
                        let v737 : string = _v730 
                        let v742 : string = method10()
                        let v743 : Mut4 = {l0 = v742} : Mut4
                        let v744 : US3 = US3_3
                        let v745 : string = $"%A{v744}"
                        let v749 : string = $"{v745}"
                        let v752 : unit = ()
                        let v753 : (unit -> unit) = closure12(v743, v749)
                        let v754 : unit = (fun () -> v753 (); v752) ()
                        let v757 : string = v743.l0
                        let v758 : (string []) = v757.Split v737 
                        let v761 : string = v758.[int 0]
                        let v764 : string = method10()
                        let v765 : Mut4 = {l0 = v764} : Mut4
                        let v766 : US3 = US3_4
                        let v767 : string = $"%A{v766}"
                        let v771 : string = $"{v767}"
                        let v774 : unit = ()
                        let v775 : (unit -> unit) = closure12(v765, v771)
                        let v776 : unit = (fun () -> v775 (); v774) ()
                        let v779 : string = v765.l0
                        let v780 : bool = v779.StartsWith v761 
                        let v786 : US4 =
                            if v780 then
                                let v783 : string = "Warning"
                                US4_0(v783)
                            else
                                US4_1
                        match v786 with
                        | US4_1 -> (* None *)
                            let v789 : string = "Critical"
                            US4_0(v789)
                        | US4_0(v787) -> (* Some *)
                            US4_0(v787)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v802 : string =
            match v798 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v799) -> (* Some *)
                v799
        let v803 : (unit -> string) = v802.ToLower
        let v804 : string = v803 ()
        let v807 : string = v804.PadLeft (7, ' ')
        let v821 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v822 : string = "inline_colorization::color_bright_red"
        let v823 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v822 
        let v824 : string = "&*$0"
        let v825 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v824 
        let v826 : string = "inline_colorization::color_reset"
        let v827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v826 
        let v828 : string = "\"{v823}{v825}{v827}\""
        let v829 : string = @$"format!(" + v828 + ")"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "fable_library_rust::String_::fromString($0)"
        let v832 : string = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let _v821 = v832 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v833 : string = "inline_colorization::color_bright_red"
        let v834 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "&*$0"
        let v836 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v835 
        let v837 : string = "inline_colorization::color_reset"
        let v838 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "\"{v834}{v836}{v838}\""
        let v840 : string = @$"format!(" + v839 + ")"
        let v841 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "fable_library_rust::String_::fromString($0)"
        let v843 : string = Fable.Core.RustInterop.emitRustExpr v841 v842 
        let _v821 = v843 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v844 : string = "inline_colorization::color_bright_red"
        let v845 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v844 
        let v846 : string = "&*$0"
        let v847 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v846 
        let v848 : string = "inline_colorization::color_reset"
        let v849 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v848 
        let v850 : string = "\"{v845}{v847}{v849}\""
        let v851 : string = @$"format!(" + v850 + ")"
        let v852 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "fable_library_rust::String_::fromString($0)"
        let v854 : string = Fable.Core.RustInterop.emitRustExpr v852 v853 
        let _v821 = v854 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v855 : string = "\u001b[91m"
        let v856 : string = method9()
        let v857 : string = v855 + v807 
        let v858 : string = v857 + v856 
        let _v821 = v858 
        #endif
#if FABLE_COMPILER_PYTHON
        let v859 : string = "\u001b[91m"
        let v860 : string = method9()
        let v861 : string = v859 + v807 
        let v862 : string = v861 + v860 
        let _v821 = v862 
        #endif
#else
        let v863 : string = "\u001b[91m"
        let v864 : string = method9()
        let v865 : string = v863 + v807 
        let v866 : string = v865 + v864 
        let _v821 = v866 
        #endif
        let v867 : string = _v821 
        let v873 : int64 = v85.l0
        let v874 : string = method10()
        let v875 : Mut4 = {l0 = v874} : Mut4
        let v876 : string = "{ "
        let v877 : string = $"{v876}"
        let v880 : unit = ()
        let v881 : (unit -> unit) = closure12(v875, v877)
        let v882 : unit = (fun () -> v881 (); v880) ()
        let v885 : string = "retry"
        let v886 : string = $"{v885}"
        let v889 : unit = ()
        let v890 : (unit -> unit) = closure12(v875, v886)
        let v891 : unit = (fun () -> v890 (); v889) ()
        let v894 : string = " = "
        let v895 : string = $"{v894}"
        let v898 : unit = ()
        let v899 : (unit -> unit) = closure12(v875, v895)
        let v900 : unit = (fun () -> v899 (); v898) ()
        let v903 : string = $"{5uy}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v875, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = "; "
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v875, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = "error"
        let v921 : string = $"{v920}"
        let v924 : unit = ()
        let v925 : (unit -> unit) = closure12(v875, v921)
        let v926 : unit = (fun () -> v925 (); v924) ()
        let v929 : string = $"{v894}"
        let v932 : unit = ()
        let v933 : (unit -> unit) = closure12(v875, v929)
        let v934 : unit = (fun () -> v933 (); v932) ()
        let v937 : string = $"{v0}"
        let v940 : unit = ()
        let v941 : (unit -> unit) = closure12(v875, v937)
        let v942 : unit = (fun () -> v941 (); v940) ()
        let v945 : string = " }"
        let v946 : string = $"{v945}"
        let v949 : unit = ()
        let v950 : (unit -> unit) = closure12(v875, v946)
        let v951 : unit = (fun () -> v950 (); v949) ()
        let v954 : string = v875.l0
        let v955 : (unit -> string) = closure75()
        let v956 : string = $"{v483} {v867} #{v873} %s{v955 ()} / {v954}"
        let v959 : char list = []
        let v960 : (char list -> (char [])) = List.toArray
        let v961 : (char []) = v960 v959
        let v964 : string = v956.TrimStart v961 
        let v982 : char list = []
        let v983 : char list = '/' :: v982 
        let v986 : char list = ' ' :: v983 
        let v989 : (char list -> (char [])) = List.toArray
        let v990 : (char []) = v989 v986
        let v993 : string = v964.TrimEnd v990 
        let v1011 : (string -> unit) = closure14()
        let v1012 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1013 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1013 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1014 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1014 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1015 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1015 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1011 v993
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1011 v993
        let _v1012 = () 
        #endif
#else
        v1011 v993
        let _v1012 = () 
        #endif
        _v1012 
        let v1016 : (string -> unit) = v17.l0
        v1016 v993
and method48 () : uint8 =
    4uy
and closure100 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_4
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v798 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_4
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_4
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v731 : string = method14()
                        let _v730 = v731 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v732 : string = method14()
                        let _v730 = v732 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v733 : string = method14()
                        let _v730 = v733 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v734 : string = method15()
                        let _v730 = v734 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v735 : string = method15()
                        let _v730 = v735 
                        #endif
#else
                        let v736 : string = method15()
                        let _v730 = v736 
                        #endif
                        let v737 : string = _v730 
                        let v742 : string = method10()
                        let v743 : Mut4 = {l0 = v742} : Mut4
                        let v744 : US3 = US3_3
                        let v745 : string = $"%A{v744}"
                        let v749 : string = $"{v745}"
                        let v752 : unit = ()
                        let v753 : (unit -> unit) = closure12(v743, v749)
                        let v754 : unit = (fun () -> v753 (); v752) ()
                        let v757 : string = v743.l0
                        let v758 : (string []) = v757.Split v737 
                        let v761 : string = v758.[int 0]
                        let v764 : string = method10()
                        let v765 : Mut4 = {l0 = v764} : Mut4
                        let v766 : US3 = US3_4
                        let v767 : string = $"%A{v766}"
                        let v771 : string = $"{v767}"
                        let v774 : unit = ()
                        let v775 : (unit -> unit) = closure12(v765, v771)
                        let v776 : unit = (fun () -> v775 (); v774) ()
                        let v779 : string = v765.l0
                        let v780 : bool = v779.StartsWith v761 
                        let v786 : US4 =
                            if v780 then
                                let v783 : string = "Warning"
                                US4_0(v783)
                            else
                                US4_1
                        match v786 with
                        | US4_1 -> (* None *)
                            let v789 : string = "Critical"
                            US4_0(v789)
                        | US4_0(v787) -> (* Some *)
                            US4_0(v787)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v802 : string =
            match v798 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v799) -> (* Some *)
                v799
        let v803 : (unit -> string) = v802.ToLower
        let v804 : string = v803 ()
        let v807 : string = v804.PadLeft (7, ' ')
        let v821 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v822 : string = "inline_colorization::color_bright_red"
        let v823 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v822 
        let v824 : string = "&*$0"
        let v825 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v824 
        let v826 : string = "inline_colorization::color_reset"
        let v827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v826 
        let v828 : string = "\"{v823}{v825}{v827}\""
        let v829 : string = @$"format!(" + v828 + ")"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "fable_library_rust::String_::fromString($0)"
        let v832 : string = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let _v821 = v832 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v833 : string = "inline_colorization::color_bright_red"
        let v834 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "&*$0"
        let v836 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v835 
        let v837 : string = "inline_colorization::color_reset"
        let v838 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "\"{v834}{v836}{v838}\""
        let v840 : string = @$"format!(" + v839 + ")"
        let v841 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "fable_library_rust::String_::fromString($0)"
        let v843 : string = Fable.Core.RustInterop.emitRustExpr v841 v842 
        let _v821 = v843 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v844 : string = "inline_colorization::color_bright_red"
        let v845 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v844 
        let v846 : string = "&*$0"
        let v847 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v846 
        let v848 : string = "inline_colorization::color_reset"
        let v849 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v848 
        let v850 : string = "\"{v845}{v847}{v849}\""
        let v851 : string = @$"format!(" + v850 + ")"
        let v852 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "fable_library_rust::String_::fromString($0)"
        let v854 : string = Fable.Core.RustInterop.emitRustExpr v852 v853 
        let _v821 = v854 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v855 : string = "\u001b[91m"
        let v856 : string = method9()
        let v857 : string = v855 + v807 
        let v858 : string = v857 + v856 
        let _v821 = v858 
        #endif
#if FABLE_COMPILER_PYTHON
        let v859 : string = "\u001b[91m"
        let v860 : string = method9()
        let v861 : string = v859 + v807 
        let v862 : string = v861 + v860 
        let _v821 = v862 
        #endif
#else
        let v863 : string = "\u001b[91m"
        let v864 : string = method9()
        let v865 : string = v863 + v807 
        let v866 : string = v865 + v864 
        let _v821 = v866 
        #endif
        let v867 : string = _v821 
        let v873 : int64 = v85.l0
        let v874 : string = method10()
        let v875 : Mut4 = {l0 = v874} : Mut4
        let v876 : string = "{ "
        let v877 : string = $"{v876}"
        let v880 : unit = ()
        let v881 : (unit -> unit) = closure12(v875, v877)
        let v882 : unit = (fun () -> v881 (); v880) ()
        let v885 : string = "retry"
        let v886 : string = $"{v885}"
        let v889 : unit = ()
        let v890 : (unit -> unit) = closure12(v875, v886)
        let v891 : unit = (fun () -> v890 (); v889) ()
        let v894 : string = " = "
        let v895 : string = $"{v894}"
        let v898 : unit = ()
        let v899 : (unit -> unit) = closure12(v875, v895)
        let v900 : unit = (fun () -> v899 (); v898) ()
        let v903 : string = $"{4uy}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v875, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = "; "
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v875, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = "error"
        let v921 : string = $"{v920}"
        let v924 : unit = ()
        let v925 : (unit -> unit) = closure12(v875, v921)
        let v926 : unit = (fun () -> v925 (); v924) ()
        let v929 : string = $"{v894}"
        let v932 : unit = ()
        let v933 : (unit -> unit) = closure12(v875, v929)
        let v934 : unit = (fun () -> v933 (); v932) ()
        let v937 : string = $"{v0}"
        let v940 : unit = ()
        let v941 : (unit -> unit) = closure12(v875, v937)
        let v942 : unit = (fun () -> v941 (); v940) ()
        let v945 : string = " }"
        let v946 : string = $"{v945}"
        let v949 : unit = ()
        let v950 : (unit -> unit) = closure12(v875, v946)
        let v951 : unit = (fun () -> v950 (); v949) ()
        let v954 : string = v875.l0
        let v955 : (unit -> string) = closure75()
        let v956 : string = $"{v483} {v867} #{v873} %s{v955 ()} / {v954}"
        let v959 : char list = []
        let v960 : (char list -> (char [])) = List.toArray
        let v961 : (char []) = v960 v959
        let v964 : string = v956.TrimStart v961 
        let v982 : char list = []
        let v983 : char list = '/' :: v982 
        let v986 : char list = ' ' :: v983 
        let v989 : (char list -> (char [])) = List.toArray
        let v990 : (char []) = v989 v986
        let v993 : string = v964.TrimEnd v990 
        let v1011 : (string -> unit) = closure14()
        let v1012 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1013 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1013 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1014 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1014 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1015 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1015 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1011 v993
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1011 v993
        let _v1012 = () 
        #endif
#else
        v1011 v993
        let _v1012 = () 
        #endif
        _v1012 
        let v1016 : (string -> unit) = v17.l0
        v1016 v993
and method49 () : uint8 =
    3uy
and closure101 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_4
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v798 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_4
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_4
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v731 : string = method14()
                        let _v730 = v731 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v732 : string = method14()
                        let _v730 = v732 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v733 : string = method14()
                        let _v730 = v733 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v734 : string = method15()
                        let _v730 = v734 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v735 : string = method15()
                        let _v730 = v735 
                        #endif
#else
                        let v736 : string = method15()
                        let _v730 = v736 
                        #endif
                        let v737 : string = _v730 
                        let v742 : string = method10()
                        let v743 : Mut4 = {l0 = v742} : Mut4
                        let v744 : US3 = US3_3
                        let v745 : string = $"%A{v744}"
                        let v749 : string = $"{v745}"
                        let v752 : unit = ()
                        let v753 : (unit -> unit) = closure12(v743, v749)
                        let v754 : unit = (fun () -> v753 (); v752) ()
                        let v757 : string = v743.l0
                        let v758 : (string []) = v757.Split v737 
                        let v761 : string = v758.[int 0]
                        let v764 : string = method10()
                        let v765 : Mut4 = {l0 = v764} : Mut4
                        let v766 : US3 = US3_4
                        let v767 : string = $"%A{v766}"
                        let v771 : string = $"{v767}"
                        let v774 : unit = ()
                        let v775 : (unit -> unit) = closure12(v765, v771)
                        let v776 : unit = (fun () -> v775 (); v774) ()
                        let v779 : string = v765.l0
                        let v780 : bool = v779.StartsWith v761 
                        let v786 : US4 =
                            if v780 then
                                let v783 : string = "Warning"
                                US4_0(v783)
                            else
                                US4_1
                        match v786 with
                        | US4_1 -> (* None *)
                            let v789 : string = "Critical"
                            US4_0(v789)
                        | US4_0(v787) -> (* Some *)
                            US4_0(v787)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v802 : string =
            match v798 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v799) -> (* Some *)
                v799
        let v803 : (unit -> string) = v802.ToLower
        let v804 : string = v803 ()
        let v807 : string = v804.PadLeft (7, ' ')
        let v821 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v822 : string = "inline_colorization::color_bright_red"
        let v823 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v822 
        let v824 : string = "&*$0"
        let v825 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v824 
        let v826 : string = "inline_colorization::color_reset"
        let v827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v826 
        let v828 : string = "\"{v823}{v825}{v827}\""
        let v829 : string = @$"format!(" + v828 + ")"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "fable_library_rust::String_::fromString($0)"
        let v832 : string = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let _v821 = v832 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v833 : string = "inline_colorization::color_bright_red"
        let v834 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "&*$0"
        let v836 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v835 
        let v837 : string = "inline_colorization::color_reset"
        let v838 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "\"{v834}{v836}{v838}\""
        let v840 : string = @$"format!(" + v839 + ")"
        let v841 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "fable_library_rust::String_::fromString($0)"
        let v843 : string = Fable.Core.RustInterop.emitRustExpr v841 v842 
        let _v821 = v843 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v844 : string = "inline_colorization::color_bright_red"
        let v845 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v844 
        let v846 : string = "&*$0"
        let v847 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v846 
        let v848 : string = "inline_colorization::color_reset"
        let v849 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v848 
        let v850 : string = "\"{v845}{v847}{v849}\""
        let v851 : string = @$"format!(" + v850 + ")"
        let v852 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "fable_library_rust::String_::fromString($0)"
        let v854 : string = Fable.Core.RustInterop.emitRustExpr v852 v853 
        let _v821 = v854 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v855 : string = "\u001b[91m"
        let v856 : string = method9()
        let v857 : string = v855 + v807 
        let v858 : string = v857 + v856 
        let _v821 = v858 
        #endif
#if FABLE_COMPILER_PYTHON
        let v859 : string = "\u001b[91m"
        let v860 : string = method9()
        let v861 : string = v859 + v807 
        let v862 : string = v861 + v860 
        let _v821 = v862 
        #endif
#else
        let v863 : string = "\u001b[91m"
        let v864 : string = method9()
        let v865 : string = v863 + v807 
        let v866 : string = v865 + v864 
        let _v821 = v866 
        #endif
        let v867 : string = _v821 
        let v873 : int64 = v85.l0
        let v874 : string = method10()
        let v875 : Mut4 = {l0 = v874} : Mut4
        let v876 : string = "{ "
        let v877 : string = $"{v876}"
        let v880 : unit = ()
        let v881 : (unit -> unit) = closure12(v875, v877)
        let v882 : unit = (fun () -> v881 (); v880) ()
        let v885 : string = "retry"
        let v886 : string = $"{v885}"
        let v889 : unit = ()
        let v890 : (unit -> unit) = closure12(v875, v886)
        let v891 : unit = (fun () -> v890 (); v889) ()
        let v894 : string = " = "
        let v895 : string = $"{v894}"
        let v898 : unit = ()
        let v899 : (unit -> unit) = closure12(v875, v895)
        let v900 : unit = (fun () -> v899 (); v898) ()
        let v903 : string = $"{3uy}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v875, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = "; "
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v875, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = "error"
        let v921 : string = $"{v920}"
        let v924 : unit = ()
        let v925 : (unit -> unit) = closure12(v875, v921)
        let v926 : unit = (fun () -> v925 (); v924) ()
        let v929 : string = $"{v894}"
        let v932 : unit = ()
        let v933 : (unit -> unit) = closure12(v875, v929)
        let v934 : unit = (fun () -> v933 (); v932) ()
        let v937 : string = $"{v0}"
        let v940 : unit = ()
        let v941 : (unit -> unit) = closure12(v875, v937)
        let v942 : unit = (fun () -> v941 (); v940) ()
        let v945 : string = " }"
        let v946 : string = $"{v945}"
        let v949 : unit = ()
        let v950 : (unit -> unit) = closure12(v875, v946)
        let v951 : unit = (fun () -> v950 (); v949) ()
        let v954 : string = v875.l0
        let v955 : (unit -> string) = closure75()
        let v956 : string = $"{v483} {v867} #{v873} %s{v955 ()} / {v954}"
        let v959 : char list = []
        let v960 : (char list -> (char [])) = List.toArray
        let v961 : (char []) = v960 v959
        let v964 : string = v956.TrimStart v961 
        let v982 : char list = []
        let v983 : char list = '/' :: v982 
        let v986 : char list = ' ' :: v983 
        let v989 : (char list -> (char [])) = List.toArray
        let v990 : (char []) = v989 v986
        let v993 : string = v964.TrimEnd v990 
        let v1011 : (string -> unit) = closure14()
        let v1012 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1013 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1013 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1014 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1014 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1015 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1015 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1011 v993
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1011 v993
        let _v1012 = () 
        #endif
#else
        v1011 v993
        let _v1012 = () 
        #endif
        _v1012 
        let v1016 : (string -> unit) = v17.l0
        v1016 v993
and method50 () : uint8 =
    2uy
and closure102 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_4
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v798 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_4
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_4
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v731 : string = method14()
                        let _v730 = v731 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v732 : string = method14()
                        let _v730 = v732 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v733 : string = method14()
                        let _v730 = v733 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v734 : string = method15()
                        let _v730 = v734 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v735 : string = method15()
                        let _v730 = v735 
                        #endif
#else
                        let v736 : string = method15()
                        let _v730 = v736 
                        #endif
                        let v737 : string = _v730 
                        let v742 : string = method10()
                        let v743 : Mut4 = {l0 = v742} : Mut4
                        let v744 : US3 = US3_3
                        let v745 : string = $"%A{v744}"
                        let v749 : string = $"{v745}"
                        let v752 : unit = ()
                        let v753 : (unit -> unit) = closure12(v743, v749)
                        let v754 : unit = (fun () -> v753 (); v752) ()
                        let v757 : string = v743.l0
                        let v758 : (string []) = v757.Split v737 
                        let v761 : string = v758.[int 0]
                        let v764 : string = method10()
                        let v765 : Mut4 = {l0 = v764} : Mut4
                        let v766 : US3 = US3_4
                        let v767 : string = $"%A{v766}"
                        let v771 : string = $"{v767}"
                        let v774 : unit = ()
                        let v775 : (unit -> unit) = closure12(v765, v771)
                        let v776 : unit = (fun () -> v775 (); v774) ()
                        let v779 : string = v765.l0
                        let v780 : bool = v779.StartsWith v761 
                        let v786 : US4 =
                            if v780 then
                                let v783 : string = "Warning"
                                US4_0(v783)
                            else
                                US4_1
                        match v786 with
                        | US4_1 -> (* None *)
                            let v789 : string = "Critical"
                            US4_0(v789)
                        | US4_0(v787) -> (* Some *)
                            US4_0(v787)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v802 : string =
            match v798 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v799) -> (* Some *)
                v799
        let v803 : (unit -> string) = v802.ToLower
        let v804 : string = v803 ()
        let v807 : string = v804.PadLeft (7, ' ')
        let v821 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v822 : string = "inline_colorization::color_bright_red"
        let v823 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v822 
        let v824 : string = "&*$0"
        let v825 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v824 
        let v826 : string = "inline_colorization::color_reset"
        let v827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v826 
        let v828 : string = "\"{v823}{v825}{v827}\""
        let v829 : string = @$"format!(" + v828 + ")"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "fable_library_rust::String_::fromString($0)"
        let v832 : string = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let _v821 = v832 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v833 : string = "inline_colorization::color_bright_red"
        let v834 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "&*$0"
        let v836 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v835 
        let v837 : string = "inline_colorization::color_reset"
        let v838 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "\"{v834}{v836}{v838}\""
        let v840 : string = @$"format!(" + v839 + ")"
        let v841 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "fable_library_rust::String_::fromString($0)"
        let v843 : string = Fable.Core.RustInterop.emitRustExpr v841 v842 
        let _v821 = v843 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v844 : string = "inline_colorization::color_bright_red"
        let v845 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v844 
        let v846 : string = "&*$0"
        let v847 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v846 
        let v848 : string = "inline_colorization::color_reset"
        let v849 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v848 
        let v850 : string = "\"{v845}{v847}{v849}\""
        let v851 : string = @$"format!(" + v850 + ")"
        let v852 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "fable_library_rust::String_::fromString($0)"
        let v854 : string = Fable.Core.RustInterop.emitRustExpr v852 v853 
        let _v821 = v854 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v855 : string = "\u001b[91m"
        let v856 : string = method9()
        let v857 : string = v855 + v807 
        let v858 : string = v857 + v856 
        let _v821 = v858 
        #endif
#if FABLE_COMPILER_PYTHON
        let v859 : string = "\u001b[91m"
        let v860 : string = method9()
        let v861 : string = v859 + v807 
        let v862 : string = v861 + v860 
        let _v821 = v862 
        #endif
#else
        let v863 : string = "\u001b[91m"
        let v864 : string = method9()
        let v865 : string = v863 + v807 
        let v866 : string = v865 + v864 
        let _v821 = v866 
        #endif
        let v867 : string = _v821 
        let v873 : int64 = v85.l0
        let v874 : string = method10()
        let v875 : Mut4 = {l0 = v874} : Mut4
        let v876 : string = "{ "
        let v877 : string = $"{v876}"
        let v880 : unit = ()
        let v881 : (unit -> unit) = closure12(v875, v877)
        let v882 : unit = (fun () -> v881 (); v880) ()
        let v885 : string = "retry"
        let v886 : string = $"{v885}"
        let v889 : unit = ()
        let v890 : (unit -> unit) = closure12(v875, v886)
        let v891 : unit = (fun () -> v890 (); v889) ()
        let v894 : string = " = "
        let v895 : string = $"{v894}"
        let v898 : unit = ()
        let v899 : (unit -> unit) = closure12(v875, v895)
        let v900 : unit = (fun () -> v899 (); v898) ()
        let v903 : string = $"{2uy}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v875, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = "; "
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v875, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = "error"
        let v921 : string = $"{v920}"
        let v924 : unit = ()
        let v925 : (unit -> unit) = closure12(v875, v921)
        let v926 : unit = (fun () -> v925 (); v924) ()
        let v929 : string = $"{v894}"
        let v932 : unit = ()
        let v933 : (unit -> unit) = closure12(v875, v929)
        let v934 : unit = (fun () -> v933 (); v932) ()
        let v937 : string = $"{v0}"
        let v940 : unit = ()
        let v941 : (unit -> unit) = closure12(v875, v937)
        let v942 : unit = (fun () -> v941 (); v940) ()
        let v945 : string = " }"
        let v946 : string = $"{v945}"
        let v949 : unit = ()
        let v950 : (unit -> unit) = closure12(v875, v946)
        let v951 : unit = (fun () -> v950 (); v949) ()
        let v954 : string = v875.l0
        let v955 : (unit -> string) = closure75()
        let v956 : string = $"{v483} {v867} #{v873} %s{v955 ()} / {v954}"
        let v959 : char list = []
        let v960 : (char list -> (char [])) = List.toArray
        let v961 : (char []) = v960 v959
        let v964 : string = v956.TrimStart v961 
        let v982 : char list = []
        let v983 : char list = '/' :: v982 
        let v986 : char list = ' ' :: v983 
        let v989 : (char list -> (char [])) = List.toArray
        let v990 : (char []) = v989 v986
        let v993 : string = v964.TrimEnd v990 
        let v1011 : (string -> unit) = closure14()
        let v1012 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1013 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1013 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1014 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1014 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1015 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1015 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1011 v993
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1011 v993
        let _v1012 = () 
        #endif
#else
        v1011 v993
        let _v1012 = () 
        #endif
        _v1012 
        let v1016 : (string -> unit) = v17.l0
        v1016 v993
and method51 () : uint8 =
    1uy
and closure103 (v0 : string) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 4 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v554 : string = method14()
        let _v553 = v554 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v555 : string = method14()
        let _v553 = v555 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v556 : string = method14()
        let _v553 = v556 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v557 : string = method15()
        let _v553 = v557 
        #endif
#if FABLE_COMPILER_PYTHON
        let v558 : string = method15()
        let _v553 = v558 
        #endif
#else
        let v559 : string = method15()
        let _v553 = v559 
        #endif
        let v560 : string = _v553 
        let v565 : string = method10()
        let v566 : Mut4 = {l0 = v565} : Mut4
        let v567 : US3 = US3_0
        let v568 : string = $"%A{v567}"
        let v572 : string = $"{v568}"
        let v575 : unit = ()
        let v576 : (unit -> unit) = closure12(v566, v572)
        let v577 : unit = (fun () -> v576 (); v575) ()
        let v580 : string = v566.l0
        let v581 : (string []) = v580.Split v560 
        let v584 : string = v581.[int 0]
        let v587 : string = method10()
        let v588 : Mut4 = {l0 = v587} : Mut4
        let v589 : US3 = US3_4
        let v590 : string = $"%A{v589}"
        let v594 : string = $"{v590}"
        let v597 : unit = ()
        let v598 : (unit -> unit) = closure12(v588, v594)
        let v599 : unit = (fun () -> v598 (); v597) ()
        let v602 : string = v588.l0
        let v603 : bool = v602.StartsWith v584 
        let v609 : US4 =
            if v603 then
                let v606 : string = "Verbose"
                US4_0(v606)
            else
                US4_1
        let v798 : US4 =
            match v609 with
            | US4_1 -> (* None *)
                let v612 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v613 : string = method14()
                let _v612 = v613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v614 : string = method14()
                let _v612 = v614 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v615 : string = method14()
                let _v612 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = method15()
                let _v612 = v616 
                #endif
#if FABLE_COMPILER_PYTHON
                let v617 : string = method15()
                let _v612 = v617 
                #endif
#else
                let v618 : string = method15()
                let _v612 = v618 
                #endif
                let v619 : string = _v612 
                let v624 : string = method10()
                let v625 : Mut4 = {l0 = v624} : Mut4
                let v626 : US3 = US3_1
                let v627 : string = $"%A{v626}"
                let v631 : string = $"{v627}"
                let v634 : unit = ()
                let v635 : (unit -> unit) = closure12(v625, v631)
                let v636 : unit = (fun () -> v635 (); v634) ()
                let v639 : string = v625.l0
                let v640 : (string []) = v639.Split v619 
                let v643 : string = v640.[int 0]
                let v646 : string = method10()
                let v647 : Mut4 = {l0 = v646} : Mut4
                let v648 : US3 = US3_4
                let v649 : string = $"%A{v648}"
                let v653 : string = $"{v649}"
                let v656 : unit = ()
                let v657 : (unit -> unit) = closure12(v647, v653)
                let v658 : unit = (fun () -> v657 (); v656) ()
                let v661 : string = v647.l0
                let v662 : bool = v661.StartsWith v643 
                let v668 : US4 =
                    if v662 then
                        let v665 : string = "Debug"
                        US4_0(v665)
                    else
                        US4_1
                match v668 with
                | US4_1 -> (* None *)
                    let v671 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v672 : string = method14()
                    let _v671 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = method14()
                    let _v671 = v673 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v674 : string = method14()
                    let _v671 = v674 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v675 : string = method15()
                    let _v671 = v675 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v676 : string = method15()
                    let _v671 = v676 
                    #endif
#else
                    let v677 : string = method15()
                    let _v671 = v677 
                    #endif
                    let v678 : string = _v671 
                    let v683 : string = method10()
                    let v684 : Mut4 = {l0 = v683} : Mut4
                    let v685 : US3 = US3_2
                    let v686 : string = $"%A{v685}"
                    let v690 : string = $"{v686}"
                    let v693 : unit = ()
                    let v694 : (unit -> unit) = closure12(v684, v690)
                    let v695 : unit = (fun () -> v694 (); v693) ()
                    let v698 : string = v684.l0
                    let v699 : (string []) = v698.Split v678 
                    let v702 : string = v699.[int 0]
                    let v705 : string = method10()
                    let v706 : Mut4 = {l0 = v705} : Mut4
                    let v707 : US3 = US3_4
                    let v708 : string = $"%A{v707}"
                    let v712 : string = $"{v708}"
                    let v715 : unit = ()
                    let v716 : (unit -> unit) = closure12(v706, v712)
                    let v717 : unit = (fun () -> v716 (); v715) ()
                    let v720 : string = v706.l0
                    let v721 : bool = v720.StartsWith v702 
                    let v727 : US4 =
                        if v721 then
                            let v724 : string = "Info"
                            US4_0(v724)
                        else
                            US4_1
                    match v727 with
                    | US4_1 -> (* None *)
                        let v730 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v731 : string = method14()
                        let _v730 = v731 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v732 : string = method14()
                        let _v730 = v732 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v733 : string = method14()
                        let _v730 = v733 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v734 : string = method15()
                        let _v730 = v734 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v735 : string = method15()
                        let _v730 = v735 
                        #endif
#else
                        let v736 : string = method15()
                        let _v730 = v736 
                        #endif
                        let v737 : string = _v730 
                        let v742 : string = method10()
                        let v743 : Mut4 = {l0 = v742} : Mut4
                        let v744 : US3 = US3_3
                        let v745 : string = $"%A{v744}"
                        let v749 : string = $"{v745}"
                        let v752 : unit = ()
                        let v753 : (unit -> unit) = closure12(v743, v749)
                        let v754 : unit = (fun () -> v753 (); v752) ()
                        let v757 : string = v743.l0
                        let v758 : (string []) = v757.Split v737 
                        let v761 : string = v758.[int 0]
                        let v764 : string = method10()
                        let v765 : Mut4 = {l0 = v764} : Mut4
                        let v766 : US3 = US3_4
                        let v767 : string = $"%A{v766}"
                        let v771 : string = $"{v767}"
                        let v774 : unit = ()
                        let v775 : (unit -> unit) = closure12(v765, v771)
                        let v776 : unit = (fun () -> v775 (); v774) ()
                        let v779 : string = v765.l0
                        let v780 : bool = v779.StartsWith v761 
                        let v786 : US4 =
                            if v780 then
                                let v783 : string = "Warning"
                                US4_0(v783)
                            else
                                US4_1
                        match v786 with
                        | US4_1 -> (* None *)
                            let v789 : string = "Critical"
                            US4_0(v789)
                        | US4_0(v787) -> (* Some *)
                            US4_0(v787)
                    | US4_0(v728) -> (* Some *)
                        US4_0(v728)
                | US4_0(v669) -> (* Some *)
                    US4_0(v669)
            | US4_0(v610) -> (* Some *)
                US4_0(v610)
        let v802 : string =
            match v798 with
            | US4_1 -> (* None *)
                failwith<string> "Option does not have a value."
            | US4_0(v799) -> (* Some *)
                v799
        let v803 : (unit -> string) = v802.ToLower
        let v804 : string = v803 ()
        let v807 : string = v804.PadLeft (7, ' ')
        let v821 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v822 : string = "inline_colorization::color_bright_red"
        let v823 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v822 
        let v824 : string = "&*$0"
        let v825 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v824 
        let v826 : string = "inline_colorization::color_reset"
        let v827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v826 
        let v828 : string = "\"{v823}{v825}{v827}\""
        let v829 : string = @$"format!(" + v828 + ")"
        let v830 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "fable_library_rust::String_::fromString($0)"
        let v832 : string = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let _v821 = v832 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v833 : string = "inline_colorization::color_bright_red"
        let v834 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v833 
        let v835 : string = "&*$0"
        let v836 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v835 
        let v837 : string = "inline_colorization::color_reset"
        let v838 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "\"{v834}{v836}{v838}\""
        let v840 : string = @$"format!(" + v839 + ")"
        let v841 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v840 
        let v842 : string = "fable_library_rust::String_::fromString($0)"
        let v843 : string = Fable.Core.RustInterop.emitRustExpr v841 v842 
        let _v821 = v843 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v844 : string = "inline_colorization::color_bright_red"
        let v845 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v844 
        let v846 : string = "&*$0"
        let v847 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v846 
        let v848 : string = "inline_colorization::color_reset"
        let v849 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v848 
        let v850 : string = "\"{v845}{v847}{v849}\""
        let v851 : string = @$"format!(" + v850 + ")"
        let v852 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v851 
        let v853 : string = "fable_library_rust::String_::fromString($0)"
        let v854 : string = Fable.Core.RustInterop.emitRustExpr v852 v853 
        let _v821 = v854 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v855 : string = "\u001b[91m"
        let v856 : string = method9()
        let v857 : string = v855 + v807 
        let v858 : string = v857 + v856 
        let _v821 = v858 
        #endif
#if FABLE_COMPILER_PYTHON
        let v859 : string = "\u001b[91m"
        let v860 : string = method9()
        let v861 : string = v859 + v807 
        let v862 : string = v861 + v860 
        let _v821 = v862 
        #endif
#else
        let v863 : string = "\u001b[91m"
        let v864 : string = method9()
        let v865 : string = v863 + v807 
        let v866 : string = v865 + v864 
        let _v821 = v866 
        #endif
        let v867 : string = _v821 
        let v873 : int64 = v85.l0
        let v874 : string = method10()
        let v875 : Mut4 = {l0 = v874} : Mut4
        let v876 : string = "{ "
        let v877 : string = $"{v876}"
        let v880 : unit = ()
        let v881 : (unit -> unit) = closure12(v875, v877)
        let v882 : unit = (fun () -> v881 (); v880) ()
        let v885 : string = "retry"
        let v886 : string = $"{v885}"
        let v889 : unit = ()
        let v890 : (unit -> unit) = closure12(v875, v886)
        let v891 : unit = (fun () -> v890 (); v889) ()
        let v894 : string = " = "
        let v895 : string = $"{v894}"
        let v898 : unit = ()
        let v899 : (unit -> unit) = closure12(v875, v895)
        let v900 : unit = (fun () -> v899 (); v898) ()
        let v903 : string = $"{1uy}"
        let v906 : unit = ()
        let v907 : (unit -> unit) = closure12(v875, v903)
        let v908 : unit = (fun () -> v907 (); v906) ()
        let v911 : string = "; "
        let v912 : string = $"{v911}"
        let v915 : unit = ()
        let v916 : (unit -> unit) = closure12(v875, v912)
        let v917 : unit = (fun () -> v916 (); v915) ()
        let v920 : string = "error"
        let v921 : string = $"{v920}"
        let v924 : unit = ()
        let v925 : (unit -> unit) = closure12(v875, v921)
        let v926 : unit = (fun () -> v925 (); v924) ()
        let v929 : string = $"{v894}"
        let v932 : unit = ()
        let v933 : (unit -> unit) = closure12(v875, v929)
        let v934 : unit = (fun () -> v933 (); v932) ()
        let v937 : string = $"{v0}"
        let v940 : unit = ()
        let v941 : (unit -> unit) = closure12(v875, v937)
        let v942 : unit = (fun () -> v941 (); v940) ()
        let v945 : string = " }"
        let v946 : string = $"{v945}"
        let v949 : unit = ()
        let v950 : (unit -> unit) = closure12(v875, v946)
        let v951 : unit = (fun () -> v950 (); v949) ()
        let v954 : string = v875.l0
        let v955 : (unit -> string) = closure75()
        let v956 : string = $"{v483} {v867} #{v873} %s{v955 ()} / {v954}"
        let v959 : char list = []
        let v960 : (char list -> (char [])) = List.toArray
        let v961 : (char []) = v960 v959
        let v964 : string = v956.TrimStart v961 
        let v982 : char list = []
        let v983 : char list = '/' :: v982 
        let v986 : char list = ' ' :: v983 
        let v989 : (char list -> (char [])) = List.toArray
        let v990 : (char []) = v989 v986
        let v993 : string = v964.TrimEnd v990 
        let v1011 : (string -> unit) = closure14()
        let v1012 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1013 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1013 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1014 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1014 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1015 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v993 v1015 
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v1011 v993
        let _v1012 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v1011 v993
        let _v1012 = () 
        #endif
#else
        v1011 v993
        let _v1012 = () 
        #endif
        _v1012 
        let v1016 : (string -> unit) = v17.l0
        v1016 v993
and closure105 () () : string =
    let v0 : string = "spiral_wasm.run"
    v0
and closure104 (v0 : US7) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure8()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : unit = ()
    let v32 : unit = (fun () -> v2 (); v31) ()
    let struct (v45 : Mut0, v46 : Mut1, v47 : Mut2, v48 : Mut3, v49 : int64 option) = State.trace_state.Value
    let v60 : US3 = v48.l0
    let v61 : bool = v47.l0
    let v62 : bool = v61 = false
    let v65 : bool =
        if v62 then
            false
        else
            let v63 : int32 = [ US3_0, 0; US3_1, 1; US3_2, 2; US3_3, 3; US3_4, 4 ] |> Map |> Map.find v60
            let v64 : bool = 0 >= v63
            v64
    if v65 then
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure9(v16)
        let v68 : unit = (fun () -> v67 (); v66) ()
        let v71 : unit = ()
        let v72 : unit = (fun () -> v2 (); v71) ()
        let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
        let v100 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v101 : US5 option = None
        let _v101 = ref v101 
        let v102 : US5 option ref = _v101 
        let v103 : (US5 option -> US5 option ref) = closure10(v102)
        let v104 : unit = ()
        let v105 : (unit -> unit) = closure11(v89, v103)
        let v106 : unit = (fun () -> v105 (); v104) ()
        let v109 : US5 option = _v101.Value 
        let v120 : US5 = US5_1
        let v121 : US5 = v109 |> Option.defaultValue v120 
        let v161 : System.DateTime =
            match v121 with
            | US5_1 -> (* None *)
                let v157 : System.DateTime = System.DateTime.Now
                v157
            | US5_0(v125) -> (* Some *)
                let v126 : System.DateTime = System.DateTime.Now
                let v129 : (System.DateTime -> int64) = _.Ticks
                let v130 : int64 = v129 v126
                let v133 : int64 = v130 - v125
                let v134 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v135 : System.TimeSpan = v134 v133
                let v138 : (System.TimeSpan -> int32) = _.Hours
                let v139 : int32 = v138 v135
                let v142 : (System.TimeSpan -> int32) = _.Minutes
                let v143 : int32 = v142 v135
                let v146 : (System.TimeSpan -> int32) = _.Seconds
                let v147 : int32 = v146 v135
                let v150 : (System.TimeSpan -> int32) = _.Milliseconds
                let v151 : int32 = v150 v135
                let v154 : System.DateTime = System.DateTime (1, 1, 1, v139, v143, v147, v151)
                v154
        let v162 : string = method7()
        let v165 : (string -> string) = v161.ToString
        let v166 : string = v165 v162
        let _v100 = v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v169 : US5 option = None
        let _v169 = ref v169 
        let v170 : US5 option ref = _v169 
        let v171 : (US5 option -> US5 option ref) = closure10(v170)
        let v172 : unit = ()
        let v173 : (unit -> unit) = closure11(v89, v171)
        let v174 : unit = (fun () -> v173 (); v172) ()
        let v177 : US5 option = _v169.Value 
        let v188 : US5 = US5_1
        let v189 : US5 = v177 |> Option.defaultValue v188 
        let v229 : System.DateTime =
            match v189 with
            | US5_1 -> (* None *)
                let v225 : System.DateTime = System.DateTime.Now
                v225
            | US5_0(v193) -> (* Some *)
                let v194 : System.DateTime = System.DateTime.Now
                let v197 : (System.DateTime -> int64) = _.Ticks
                let v198 : int64 = v197 v194
                let v201 : int64 = v198 - v193
                let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v203 : System.TimeSpan = v202 v201
                let v206 : (System.TimeSpan -> int32) = _.Hours
                let v207 : int32 = v206 v203
                let v210 : (System.TimeSpan -> int32) = _.Minutes
                let v211 : int32 = v210 v203
                let v214 : (System.TimeSpan -> int32) = _.Seconds
                let v215 : int32 = v214 v203
                let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                let v219 : int32 = v218 v203
                let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                v222
        let v230 : string = method7()
        let v233 : (string -> string) = v229.ToString
        let v234 : string = v233 v230
        let _v100 = v234 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v237 : string = $"near_sdk::env::block_timestamp()"
        let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
        let v239 : US5 option = None
        let _v239 = ref v239 
        let v240 : US5 option ref = _v239 
        let v241 : (US5 option -> US5 option ref) = closure10(v240)
        let v242 : unit = ()
        let v243 : (unit -> unit) = closure11(v89, v241)
        let v244 : unit = (fun () -> v243 (); v242) ()
        let v247 : US5 option = _v239.Value 
        let v258 : US5 = US5_1
        let v259 : US5 = v247 |> Option.defaultValue v258 
        let v268 : uint64 =
            match v259 with
            | US5_1 -> (* None *)
                v238
            | US5_0(v263) -> (* Some *)
                let v264 : (int64 -> uint64) = uint64
                let v265 : uint64 = v264 v263
                let v266 : uint64 = v238 - v265
                v266
        let v269 : uint64 = v268 / 1000000000UL
        let v270 : uint64 = v269 % 60UL
        let v271 : uint64 = v269 / 60UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v269 / 3600UL
        let v274 : uint64 = v273 % 24UL
        let v275 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v276 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v274, v272, v270) v275 
        let v277 : string = "fable_library_rust::String_::fromString($0)"
        let v278 : string = Fable.Core.RustInterop.emitRustExpr v276 v277 
        let _v100 = v278 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v279 : US5 option = None
        let _v279 = ref v279 
        let v280 : US5 option ref = _v279 
        let v281 : (US5 option -> US5 option ref) = closure10(v280)
        let v282 : unit = ()
        let v283 : (unit -> unit) = closure11(v89, v281)
        let v284 : unit = (fun () -> v283 (); v282) ()
        let v287 : US5 option = _v279.Value 
        let v298 : US5 = US5_1
        let v299 : US5 = v287 |> Option.defaultValue v298 
        let v339 : System.DateTime =
            match v299 with
            | US5_1 -> (* None *)
                let v335 : System.DateTime = System.DateTime.Now
                v335
            | US5_0(v303) -> (* Some *)
                let v304 : System.DateTime = System.DateTime.Now
                let v307 : (System.DateTime -> int64) = _.Ticks
                let v308 : int64 = v307 v304
                let v311 : int64 = v308 - v303
                let v312 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v313 : System.TimeSpan = v312 v311
                let v316 : (System.TimeSpan -> int32) = _.Hours
                let v317 : int32 = v316 v313
                let v320 : (System.TimeSpan -> int32) = _.Minutes
                let v321 : int32 = v320 v313
                let v324 : (System.TimeSpan -> int32) = _.Seconds
                let v325 : int32 = v324 v313
                let v328 : (System.TimeSpan -> int32) = _.Milliseconds
                let v329 : int32 = v328 v313
                let v332 : System.DateTime = System.DateTime (1, 1, 1, v317, v321, v325, v329)
                v332
        let v340 : string = method8()
        let v343 : (string -> string) = v339.ToString
        let v344 : string = v343 v340
        let _v100 = v344 
        #endif
#if FABLE_COMPILER_PYTHON
        let v347 : US5 option = None
        let _v347 = ref v347 
        let v348 : US5 option ref = _v347 
        let v349 : (US5 option -> US5 option ref) = closure10(v348)
        let v350 : unit = ()
        let v351 : (unit -> unit) = closure11(v89, v349)
        let v352 : unit = (fun () -> v351 (); v350) ()
        let v355 : US5 option = _v347.Value 
        let v366 : US5 = US5_1
        let v367 : US5 = v355 |> Option.defaultValue v366 
        let v407 : System.DateTime =
            match v367 with
            | US5_1 -> (* None *)
                let v403 : System.DateTime = System.DateTime.Now
                v403
            | US5_0(v371) -> (* Some *)
                let v372 : System.DateTime = System.DateTime.Now
                let v375 : (System.DateTime -> int64) = _.Ticks
                let v376 : int64 = v375 v372
                let v379 : int64 = v376 - v371
                let v380 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v381 : System.TimeSpan = v380 v379
                let v384 : (System.TimeSpan -> int32) = _.Hours
                let v385 : int32 = v384 v381
                let v388 : (System.TimeSpan -> int32) = _.Minutes
                let v389 : int32 = v388 v381
                let v392 : (System.TimeSpan -> int32) = _.Seconds
                let v393 : int32 = v392 v381
                let v396 : (System.TimeSpan -> int32) = _.Milliseconds
                let v397 : int32 = v396 v381
                let v400 : System.DateTime = System.DateTime (1, 1, 1, v385, v389, v393, v397)
                v400
        let v408 : string = method8()
        let v411 : (string -> string) = v407.ToString
        let v412 : string = v411 v408
        let _v100 = v412 
        #endif
#else
        let v415 : US5 option = None
        let _v415 = ref v415 
        let v416 : US5 option ref = _v415 
        let v417 : (US5 option -> US5 option ref) = closure10(v416)
        let v418 : unit = ()
        let v419 : (unit -> unit) = closure11(v89, v417)
        let v420 : unit = (fun () -> v419 (); v418) ()
        let v423 : US5 option = _v415.Value 
        let v434 : US5 = US5_1
        let v435 : US5 = v423 |> Option.defaultValue v434 
        let v475 : System.DateTime =
            match v435 with
            | US5_1 -> (* None *)
                let v471 : System.DateTime = System.DateTime.Now
                v471
            | US5_0(v439) -> (* Some *)
                let v440 : System.DateTime = System.DateTime.Now
                let v443 : (System.DateTime -> int64) = _.Ticks
                let v444 : int64 = v443 v440
                let v447 : int64 = v444 - v439
                let v448 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v449 : System.TimeSpan = v448 v447
                let v452 : (System.TimeSpan -> int32) = _.Hours
                let v453 : int32 = v452 v449
                let v456 : (System.TimeSpan -> int32) = _.Minutes
                let v457 : int32 = v456 v449
                let v460 : (System.TimeSpan -> int32) = _.Seconds
                let v461 : int32 = v460 v449
                let v464 : (System.TimeSpan -> int32) = _.Milliseconds
                let v465 : int32 = v464 v449
                let v468 : System.DateTime = System.DateTime (1, 1, 1, v453, v457, v461, v465)
                v468
        let v476 : string = method8()
        let v479 : (string -> string) = v475.ToString
        let v480 : string = v479 v476
        let _v100 = v480 
        #endif
        let v483 : string = _v100 
        
        
        
        
        
        let v553 : string = "Verbose"
        let v554 : (unit -> string) = v553.ToLower
        let v555 : string = v554 ()
        let v558 : string = v555.PadLeft (7, ' ')
        let v572 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v573 : string = "inline_colorization::color_bright_black"
        let v574 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v573 
        let v575 : string = "&*$0"
        let v576 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v575 
        let v577 : string = "inline_colorization::color_reset"
        let v578 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v577 
        let v579 : string = "\"{v574}{v576}{v578}\""
        let v580 : string = @$"format!(" + v579 + ")"
        let v581 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v580 
        let v582 : string = "fable_library_rust::String_::fromString($0)"
        let v583 : string = Fable.Core.RustInterop.emitRustExpr v581 v582 
        let _v572 = v583 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v584 : string = "inline_colorization::color_bright_black"
        let v585 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v584 
        let v586 : string = "&*$0"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v586 
        let v588 : string = "inline_colorization::color_reset"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "\"{v585}{v587}{v589}\""
        let v591 : string = @$"format!(" + v590 + ")"
        let v592 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "fable_library_rust::String_::fromString($0)"
        let v594 : string = Fable.Core.RustInterop.emitRustExpr v592 v593 
        let _v572 = v594 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v595 : string = "inline_colorization::color_bright_black"
        let v596 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "&*$0"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v558 v597 
        let v599 : string = "inline_colorization::color_reset"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "\"{v596}{v598}{v600}\""
        let v602 : string = @$"format!(" + v601 + ")"
        let v603 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "fable_library_rust::String_::fromString($0)"
        let v605 : string = Fable.Core.RustInterop.emitRustExpr v603 v604 
        let _v572 = v605 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v606 : string = "\u001b[90m"
        let v607 : string = method9()
        let v608 : string = v606 + v558 
        let v609 : string = v608 + v607 
        let _v572 = v609 
        #endif
#if FABLE_COMPILER_PYTHON
        let v610 : string = "\u001b[90m"
        let v611 : string = method9()
        let v612 : string = v610 + v558 
        let v613 : string = v612 + v611 
        let _v572 = v613 
        #endif
#else
        let v614 : string = "\u001b[90m"
        let v615 : string = method9()
        let v616 : string = v614 + v558 
        let v617 : string = v616 + v615 
        let _v572 = v617 
        #endif
        let v618 : string = _v572 
        let v624 : int64 = v85.l0
        let v625 : string = method10()
        let v626 : Mut4 = {l0 = v625} : Mut4
        let v627 : string = "{ "
        let v628 : string = $"{v627}"
        let v631 : unit = ()
        let v632 : (unit -> unit) = closure12(v626, v628)
        let v633 : unit = (fun () -> v632 (); v631) ()
        let v636 : string = "retries"
        let v637 : string = $"{v636}"
        let v640 : unit = ()
        let v641 : (unit -> unit) = closure12(v626, v637)
        let v642 : unit = (fun () -> v641 (); v640) ()
        let v645 : string = " = "
        let v646 : string = $"{v645}"
        let v649 : unit = ()
        let v650 : (unit -> unit) = closure12(v626, v646)
        let v651 : unit = (fun () -> v650 (); v649) ()
        let v654 : string = $"%A{v0}"
        let v657 : string = $"{v654}"
        let v660 : unit = ()
        let v661 : (unit -> unit) = closure12(v626, v657)
        let v662 : unit = (fun () -> v661 (); v660) ()
        let v665 : string = " }"
        let v666 : string = $"{v665}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure12(v626, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = v626.l0
        let v675 : (unit -> string) = closure105()
        let v676 : string = $"{v483} {v618} #{v624} %s{v675 ()} / {v674}"
        let v679 : char list = []
        let v680 : (char list -> (char [])) = List.toArray
        let v681 : (char []) = v680 v679
        let v684 : string = v676.TrimStart v681 
        let v702 : char list = []
        let v703 : char list = '/' :: v702 
        let v706 : char list = ' ' :: v703 
        let v709 : (char list -> (char [])) = List.toArray
        let v710 : (char []) = v709 v706
        let v713 : string = v684.TrimEnd v710 
        let v731 : (string -> unit) = closure14()
        let v732 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v733 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v713 v733 
        let _v732 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v734 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v713 v734 
        let _v732 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v735 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v713 v735 
        let _v732 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v731 v713
        let _v732 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v731 v713
        let _v732 = () 
        #endif
#else
        v731 v713
        let _v732 = () 
        #endif
        _v732 
        let v736 : (string -> unit) = v17.l0
        v736 v713
and method52 (v0 : Result<unit, anyhow_Error>) : Result<unit, anyhow_Error> =
    v0
and method11 (v0 : clap_ArgMatches) : std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, anyhow_Error>>>>> =
    let v1 : string = "true; let __future_init = Box::pin(async move { //"
    let v2 : bool = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : string = method12()
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "clap::ArgMatches::get_one(&$0, v5).cloned()"
    let v7 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let v8 : US0 option = None
    let _v8 = ref v8 
    let v9 : US0 option ref = _v8 
    let v10 : (US0 option -> US0 option ref) = closure1(v9)
    let v11 : unit = ()
    let v12 : (unit -> unit) = closure2(v7, v10)
    let v13 : unit = (fun () -> v12 (); v11) ()
    let v16 : US0 option = _v8.Value 
    let v27 : US0 = US0_1
    let v28 : US0 = v16 |> Option.defaultValue v27 
    let v35 : std_string_String =
        match v28 with
        | US0_1 -> (* None *)
            failwith<std_string_String> "Option does not have a value."
        | US0_0(v32) -> (* Some *)
            v32
    let v36 : string = "fable_library_rust::String_::fromString($0)"
    let v37 : string = Fable.Core.RustInterop.emitRustExpr v35 v36 
    let v38 : unit = ()
    let v39 : (unit -> unit) = closure16(v37)
    let v40 : unit = (fun () -> v39 (); v38) ()
    let v774 : string = "std::fs::read(&*$0)"
    let v775 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v37 v774 
    let v776 : string = "$0?"
    let v777 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v775 v776 
    let v778 : uint8 = 1uy
    let v779 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method13(v777, v778)
    let v780 : string = "v779.await"
    let v781 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v780 
    let v782 : (anyhow_Error -> std_string_String) = method19()
    let v783 : string = "$0.map_err(|x| $1(x))"
    let v784 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v781, v782) v783 
    let v785 : (US4 -> US6) = closure42()
    let v786 : (std_string_String -> US6) = closure43()
    let v787 : US6 = match v784 with Ok x -> v785 x | Error x -> v786 x
    let v60746 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> =
        match v787 with
        | US6_1(v1859) -> (* Error *)
            let v1860 : unit = ()
            let v1861 : (unit -> unit) = closure44(v1859)
            let v1862 : unit = (fun () -> v1861 (); v1860) ()
            let v2845 : uint8 = 2uy
            let v2846 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method13(v777, v2845)
            let v2847 : string = "v2846.await"
            let v2848 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v2847 
            let v2849 : (anyhow_Error -> std_string_String) = method19()
            let v2850 : string = "$0.map_err(|x| $1(x))"
            let v2851 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v2848, v2849) v2850 
            let v2852 : US6 = match v2851 with Ok x -> v785 x | Error x -> v786 x
            match v2852 with
            | US6_1(v3924) -> (* Error *)
                let v3925 : unit = ()
                let v3926 : (unit -> unit) = closure46(v3924)
                let v3927 : unit = (fun () -> v3926 (); v3925) ()
                let v4910 : uint8 = 3uy
                let v4911 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method13(v777, v4910)
                let v4912 : string = "v4911.await"
                let v4913 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v4912 
                let v4914 : (anyhow_Error -> std_string_String) = method19()
                let v4915 : string = "$0.map_err(|x| $1(x))"
                let v4916 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v4913, v4914) v4915 
                let v4917 : US6 = match v4916 with Ok x -> v785 x | Error x -> v786 x
                match v4917 with
                | US6_1(v5989) -> (* Error *)
                    let v5990 : unit = ()
                    let v5991 : (unit -> unit) = closure47(v5989)
                    let v5992 : unit = (fun () -> v5991 (); v5990) ()
                    let v6975 : uint8 = 4uy
                    let v6976 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method13(v777, v6975)
                    let v6977 : string = "v6976.await"
                    let v6978 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v6977 
                    let v6979 : (anyhow_Error -> std_string_String) = method19()
                    let v6980 : string = "$0.map_err(|x| $1(x))"
                    let v6981 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v6978, v6979) v6980 
                    let v6982 : US6 = match v6981 with Ok x -> v785 x | Error x -> v786 x
                    match v6982 with
                    | US6_1(v8054) -> (* Error *)
                        let v8055 : unit = ()
                        let v8056 : (unit -> unit) = closure48(v8054)
                        let v8057 : unit = (fun () -> v8056 (); v8055) ()
                        let v9040 : uint8 = 5uy
                        let v9041 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method13(v777, v9040)
                        let v9042 : string = "v9041.await"
                        let v9043 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v9042 
                        let v9044 : (anyhow_Error -> std_string_String) = method19()
                        let v9045 : string = "$0.map_err(|x| $1(x))"
                        let v9046 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v9043, v9044) v9045 
                        let v9047 : US6 = match v9046 with Ok x -> v785 x | Error x -> v786 x
                        match v9047 with
                        | US6_1(v10119) -> (* Error *)
                            let v10120 : unit = ()
                            let v10121 : (unit -> unit) = closure49(v10119)
                            let v10122 : unit = (fun () -> v10121 (); v10120) ()
                            let v11105 : uint8 = 6uy
                            let v11106 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method13(v777, v11105)
                            let v11107 : string = "v11106.await"
                            let v11108 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v11107 
                            let v11109 : (anyhow_Error -> std_string_String) = method19()
                            let v11110 : string = "$0.map_err(|x| $1(x))"
                            let v11111 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v11108, v11109) v11110 
                            let v11112 : US6 = match v11111 with Ok x -> v785 x | Error x -> v786 x
                            match v11112 with
                            | US6_1(v12184) -> (* Error *)
                                let v12185 : unit = ()
                                let v12186 : (unit -> unit) = closure50(v12184)
                                let v12187 : unit = (fun () -> v12186 (); v12185) ()
                                let v13170 : uint8 = 7uy
                                let v13171 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method13(v777, v13170)
                                let v13172 : string = "v13171.await"
                                let v13173 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v13172 
                                let v13174 : (anyhow_Error -> std_string_String) = method19()
                                let v13175 : string = "$0.map_err(|x| $1(x))"
                                let v13176 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v13173, v13174) v13175 
                                let v13177 : US6 = match v13176 with Ok x -> v785 x | Error x -> v786 x
                                match v13177 with
                                | US6_1(v14249) -> (* Error *)
                                    let v14250 : unit = ()
                                    let v14251 : (unit -> unit) = closure51(v14249)
                                    let v14252 : unit = (fun () -> v14251 (); v14250) ()
                                    let v15235 : uint8 = 8uy
                                    let v15236 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method13(v777, v15235)
                                    let v15237 : string = "v15236.await"
                                    let v15238 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v15237 
                                    let v15239 : (anyhow_Error -> std_string_String) = method19()
                                    let v15240 : string = "$0.map_err(|x| $1(x))"
                                    let v15241 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v15238, v15239) v15240 
                                    let v15242 : US6 = match v15241 with Ok x -> v785 x | Error x -> v786 x
                                    match v15242 with
                                    | US6_1(v16314) -> (* Error *)
                                        let v16315 : unit = ()
                                        let v16316 : (unit -> unit) = closure52(v16314)
                                        let v16317 : unit = (fun () -> v16316 (); v16315) ()
                                        let v17300 : uint8 = 9uy
                                        let v17301 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method13(v777, v17300)
                                        let v17302 : string = "v17301.await"
                                        let v17303 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v17302 
                                        let v17304 : (anyhow_Error -> std_string_String) = method19()
                                        let v17305 : string = "$0.map_err(|x| $1(x))"
                                        let v17306 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v17303, v17304) v17305 
                                        let v17307 : US6 = match v17306 with Ok x -> v785 x | Error x -> v786 x
                                        match v17307 with
                                        | US6_1(v18379) -> (* Error *)
                                            let v18380 : unit = ()
                                            let v18381 : (unit -> unit) = closure53(v18379)
                                            let v18382 : unit = (fun () -> v18381 (); v18380) ()
                                            let v19365 : uint8 = 10uy
                                            let v19366 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method13(v777, v19365)
                                            let v19367 : string = "v19366.await"
                                            let v19368 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v19367 
                                            let v19369 : (anyhow_Error -> std_string_String) = method19()
                                            let v19370 : string = "$0.map_err(|x| $1(x))"
                                            let v19371 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v19368, v19369) v19370 
                                            let v19372 : US6 = match v19371 with Ok x -> v785 x | Error x -> v786 x
                                            match v19372 with
                                            | US6_1(v20444) -> (* Error *)
                                                let v20445 : unit = ()
                                                let v20446 : (unit -> unit) = closure54(v20444)
                                                let v20447 : unit = (fun () -> v20446 (); v20445) ()
                                                let v21430 : uint8 = 11uy
                                                let v21431 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method13(v777, v21430)
                                                let v21432 : string = "v21431.await"
                                                let v21433 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v21432 
                                                let v21434 : (anyhow_Error -> std_string_String) = method19()
                                                let v21435 : string = "$0.map_err(|x| $1(x))"
                                                let v21436 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v21433, v21434) v21435 
                                                let v21437 : US6 = match v21436 with Ok x -> v785 x | Error x -> v786 x
                                                match v21437 with
                                                | US6_1(v22509) -> (* Error *)
                                                    let v22510 : unit = ()
                                                    let v22511 : (unit -> unit) = closure55(v22509)
                                                    let v22512 : unit = (fun () -> v22511 (); v22510) ()
                                                    let v23495 : uint8 = 12uy
                                                    let v23496 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method13(v777, v23495)
                                                    let v23497 : string = "v23496.await"
                                                    let v23498 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v23497 
                                                    let v23499 : (anyhow_Error -> std_string_String) = method19()
                                                    let v23500 : string = "$0.map_err(|x| $1(x))"
                                                    let v23501 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v23498, v23499) v23500 
                                                    let v23502 : US6 = match v23501 with Ok x -> v785 x | Error x -> v786 x
                                                    match v23502 with
                                                    | US6_1(v24574) -> (* Error *)
                                                        let v24575 : unit = ()
                                                        let v24576 : (unit -> unit) = closure56(v24574)
                                                        let v24577 : unit = (fun () -> v24576 (); v24575) ()
                                                        let v25560 : uint8 = 13uy
                                                        let v25561 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method13(v777, v25560)
                                                        let v25562 : string = "v25561.await"
                                                        let v25563 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v25562 
                                                        let v25564 : (anyhow_Error -> std_string_String) = method19()
                                                        let v25565 : string = "$0.map_err(|x| $1(x))"
                                                        let v25566 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v25563, v25564) v25565 
                                                        let v25567 : US6 = match v25566 with Ok x -> v785 x | Error x -> v786 x
                                                        match v25567 with
                                                        | US6_1(v26639) -> (* Error *)
                                                            let v26640 : unit = ()
                                                            let v26641 : (unit -> unit) = closure57(v26639)
                                                            let v26642 : unit = (fun () -> v26641 (); v26640) ()
                                                            let v27625 : uint8 = 14uy
                                                            let v27626 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method13(v777, v27625)
                                                            let v27627 : string = "v27626.await"
                                                            let v27628 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v27627 
                                                            let v27629 : (anyhow_Error -> std_string_String) = method19()
                                                            let v27630 : string = "$0.map_err(|x| $1(x))"
                                                            let v27631 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v27628, v27629) v27630 
                                                            let v27632 : US6 = match v27631 with Ok x -> v785 x | Error x -> v786 x
                                                            match v27632 with
                                                            | US6_1(v28704) -> (* Error *)
                                                                let v28705 : unit = ()
                                                                let v28706 : (unit -> unit) = closure58(v28704)
                                                                let v28707 : unit = (fun () -> v28706 (); v28705) ()
                                                                let v29690 : uint8 = 15uy
                                                                let v29691 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method13(v777, v29690)
                                                                let v29692 : string = "v29691.await"
                                                                let v29693 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v29692 
                                                                let v29694 : (anyhow_Error -> std_string_String) = method19()
                                                                let v29695 : string = "$0.map_err(|x| $1(x))"
                                                                let v29696 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v29693, v29694) v29695 
                                                                let v29697 : US6 = match v29696 with Ok x -> v785 x | Error x -> v786 x
                                                                match v29697 with
                                                                | US6_1(v30769) -> (* Error *)
                                                                    let v30770 : unit = ()
                                                                    let v30771 : (unit -> unit) = closure59(v30769)
                                                                    let v30772 : unit = (fun () -> v30771 (); v30770) ()
                                                                    let v31755 : uint8 = 16uy
                                                                    let v31756 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method13(v777, v31755)
                                                                    let v31757 : string = "v31756.await"
                                                                    let v31758 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v31757 
                                                                    let v31759 : (anyhow_Error -> std_string_String) = method19()
                                                                    let v31760 : string = "$0.map_err(|x| $1(x))"
                                                                    let v31761 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v31758, v31759) v31760 
                                                                    let v31762 : US6 = match v31761 with Ok x -> v785 x | Error x -> v786 x
                                                                    match v31762 with
                                                                    | US6_1(v32834) -> (* Error *)
                                                                        let v32835 : unit = ()
                                                                        let v32836 : (unit -> unit) = closure60(v32834)
                                                                        let v32837 : unit = (fun () -> v32836 (); v32835) ()
                                                                        let v33820 : uint8 = 17uy
                                                                        let v33821 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method13(v777, v33820)
                                                                        let v33822 : string = "v33821.await"
                                                                        let v33823 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v33822 
                                                                        let v33824 : (anyhow_Error -> std_string_String) = method19()
                                                                        let v33825 : string = "$0.map_err(|x| $1(x))"
                                                                        let v33826 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v33823, v33824) v33825 
                                                                        let v33827 : US6 = match v33826 with Ok x -> v785 x | Error x -> v786 x
                                                                        match v33827 with
                                                                        | US6_1(v34899) -> (* Error *)
                                                                            let v34900 : unit = ()
                                                                            let v34901 : (unit -> unit) = closure61(v34899)
                                                                            let v34902 : unit = (fun () -> v34901 (); v34900) ()
                                                                            let v35885 : uint8 = 18uy
                                                                            let v35886 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method13(v777, v35885)
                                                                            let v35887 : string = "v35886.await"
                                                                            let v35888 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v35887 
                                                                            let v35889 : (anyhow_Error -> std_string_String) = method19()
                                                                            let v35890 : string = "$0.map_err(|x| $1(x))"
                                                                            let v35891 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v35888, v35889) v35890 
                                                                            let v35892 : US6 = match v35891 with Ok x -> v785 x | Error x -> v786 x
                                                                            match v35892 with
                                                                            | US6_1(v36964) -> (* Error *)
                                                                                let v36965 : unit = ()
                                                                                let v36966 : (unit -> unit) = closure62(v36964)
                                                                                let v36967 : unit = (fun () -> v36966 (); v36965) ()
                                                                                let v37950 : uint8 = 19uy
                                                                                let v37951 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method13(v777, v37950)
                                                                                let v37952 : string = "v37951.await"
                                                                                let v37953 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v37952 
                                                                                let v37954 : (anyhow_Error -> std_string_String) = method19()
                                                                                let v37955 : string = "$0.map_err(|x| $1(x))"
                                                                                let v37956 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v37953, v37954) v37955 
                                                                                let v37957 : US6 = match v37956 with Ok x -> v785 x | Error x -> v786 x
                                                                                match v37957 with
                                                                                | US6_1(v39029) -> (* Error *)
                                                                                    let v39030 : unit = ()
                                                                                    let v39031 : (unit -> unit) = closure63(v39029)
                                                                                    let v39032 : unit = (fun () -> v39031 (); v39030) ()
                                                                                    let v40015 : uint8 = 20uy
                                                                                    let v40016 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method13(v777, v40015)
                                                                                    let v40017 : string = "v40016.await"
                                                                                    let v40018 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v40017 
                                                                                    let v40019 : (anyhow_Error -> std_string_String) = method19()
                                                                                    let v40020 : string = "$0.map_err(|x| $1(x))"
                                                                                    let v40021 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v40018, v40019) v40020 
                                                                                    let v40022 : US6 = match v40021 with Ok x -> v785 x | Error x -> v786 x
                                                                                    match v40022 with
                                                                                    | US6_1(v41094) -> (* Error *)
                                                                                        let v41095 : unit = ()
                                                                                        let v41096 : (unit -> unit) = closure64(v41094)
                                                                                        let v41097 : unit = (fun () -> v41096 (); v41095) ()
                                                                                        let v42080 : uint8 = 21uy
                                                                                        let v42081 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method13(v777, v42080)
                                                                                        let v42082 : string = "v42081.await"
                                                                                        let v42083 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v42082 
                                                                                        let v42084 : (anyhow_Error -> std_string_String) = method19()
                                                                                        let v42085 : string = "$0.map_err(|x| $1(x))"
                                                                                        let v42086 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v42083, v42084) v42085 
                                                                                        let v42087 : US6 = match v42086 with Ok x -> v785 x | Error x -> v786 x
                                                                                        match v42087 with
                                                                                        | US6_1(v43159) -> (* Error *)
                                                                                            let v43160 : unit = ()
                                                                                            let v43161 : (unit -> unit) = closure65(v43159)
                                                                                            let v43162 : unit = (fun () -> v43161 (); v43160) ()
                                                                                            let v44145 : uint8 = 22uy
                                                                                            let v44146 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method13(v777, v44145)
                                                                                            let v44147 : string = "v44146.await"
                                                                                            let v44148 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v44147 
                                                                                            let v44149 : (anyhow_Error -> std_string_String) = method19()
                                                                                            let v44150 : string = "$0.map_err(|x| $1(x))"
                                                                                            let v44151 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v44148, v44149) v44150 
                                                                                            let v44152 : US6 = match v44151 with Ok x -> v785 x | Error x -> v786 x
                                                                                            match v44152 with
                                                                                            | US6_1(v45224) -> (* Error *)
                                                                                                let v45225 : unit = ()
                                                                                                let v45226 : (unit -> unit) = closure66(v45224)
                                                                                                let v45227 : unit = (fun () -> v45226 (); v45225) ()
                                                                                                let v46210 : uint8 = 23uy
                                                                                                let v46211 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method13(v777, v46210)
                                                                                                let v46212 : string = "v46211.await"
                                                                                                let v46213 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v46212 
                                                                                                let v46214 : (anyhow_Error -> std_string_String) = method19()
                                                                                                let v46215 : string = "$0.map_err(|x| $1(x))"
                                                                                                let v46216 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v46213, v46214) v46215 
                                                                                                let v46217 : US6 = match v46216 with Ok x -> v785 x | Error x -> v786 x
                                                                                                match v46217 with
                                                                                                | US6_1(v47289) -> (* Error *)
                                                                                                    let v47290 : unit = ()
                                                                                                    let v47291 : (unit -> unit) = closure67(v47289)
                                                                                                    let v47292 : unit = (fun () -> v47291 (); v47290) ()
                                                                                                    let v48275 : uint8 = 24uy
                                                                                                    let v48276 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method13(v777, v48275)
                                                                                                    let v48277 : string = "v48276.await"
                                                                                                    let v48278 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v48277 
                                                                                                    let v48279 : (anyhow_Error -> std_string_String) = method19()
                                                                                                    let v48280 : string = "$0.map_err(|x| $1(x))"
                                                                                                    let v48281 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v48278, v48279) v48280 
                                                                                                    let v48282 : US6 = match v48281 with Ok x -> v785 x | Error x -> v786 x
                                                                                                    match v48282 with
                                                                                                    | US6_1(v49354) -> (* Error *)
                                                                                                        let v49355 : unit = ()
                                                                                                        let v49356 : (unit -> unit) = closure68(v49354)
                                                                                                        let v49357 : unit = (fun () -> v49356 (); v49355) ()
                                                                                                        let v50340 : uint8 = 25uy
                                                                                                        let v50341 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method13(v777, v50340)
                                                                                                        let v50342 : string = "v50341.await"
                                                                                                        let v50343 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v50342 
                                                                                                        let v50344 : (anyhow_Error -> std_string_String) = method19()
                                                                                                        let v50345 : string = "$0.map_err(|x| $1(x))"
                                                                                                        let v50346 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v50343, v50344) v50345 
                                                                                                        let v50347 : US6 = match v50346 with Ok x -> v785 x | Error x -> v786 x
                                                                                                        match v50347 with
                                                                                                        | US6_1(v51419) -> (* Error *)
                                                                                                            let v51420 : unit = ()
                                                                                                            let v51421 : (unit -> unit) = closure69(v51419)
                                                                                                            let v51422 : unit = (fun () -> v51421 (); v51420) ()
                                                                                                            let v52405 : uint8 = 26uy
                                                                                                            let v52406 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method13(v777, v52405)
                                                                                                            let v52407 : string = "v52406.await"
                                                                                                            let v52408 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v52407 
                                                                                                            let v52409 : (anyhow_Error -> std_string_String) = method19()
                                                                                                            let v52410 : string = "$0.map_err(|x| $1(x))"
                                                                                                            let v52411 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v52408, v52409) v52410 
                                                                                                            let v52412 : US6 = match v52411 with Ok x -> v785 x | Error x -> v786 x
                                                                                                            match v52412 with
                                                                                                            | US6_1(v53484) -> (* Error *)
                                                                                                                let v53485 : unit = ()
                                                                                                                let v53486 : (unit -> unit) = closure70(v53484)
                                                                                                                let v53487 : unit = (fun () -> v53486 (); v53485) ()
                                                                                                                let v54470 : uint8 = 27uy
                                                                                                                let v54471 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method13(v777, v54470)
                                                                                                                let v54472 : string = "v54471.await"
                                                                                                                let v54473 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v54472 
                                                                                                                let v54474 : (anyhow_Error -> std_string_String) = method19()
                                                                                                                let v54475 : string = "$0.map_err(|x| $1(x))"
                                                                                                                let v54476 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v54473, v54474) v54475 
                                                                                                                let v54477 : US6 = match v54476 with Ok x -> v785 x | Error x -> v786 x
                                                                                                                match v54477 with
                                                                                                                | US6_1(v55549) -> (* Error *)
                                                                                                                    let v55550 : unit = ()
                                                                                                                    let v55551 : (unit -> unit) = closure71(v55549)
                                                                                                                    let v55552 : unit = (fun () -> v55551 (); v55550) ()
                                                                                                                    let v56535 : uint8 = 28uy
                                                                                                                    let v56536 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method13(v777, v56535)
                                                                                                                    let v56537 : string = "v56536.await"
                                                                                                                    let v56538 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v56537 
                                                                                                                    let v56539 : (anyhow_Error -> std_string_String) = method19()
                                                                                                                    let v56540 : string = "$0.map_err(|x| $1(x))"
                                                                                                                    let v56541 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v56538, v56539) v56540 
                                                                                                                    let v56542 : US6 = match v56541 with Ok x -> v785 x | Error x -> v786 x
                                                                                                                    match v56542 with
                                                                                                                    | US6_1(v57614) -> (* Error *)
                                                                                                                        let v57615 : unit = ()
                                                                                                                        let v57616 : (unit -> unit) = closure72(v57614)
                                                                                                                        let v57617 : unit = (fun () -> v57616 (); v57615) ()
                                                                                                                        let v58600 : uint8 = 29uy
                                                                                                                        let v58601 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US4, anyhow_Error>>>>> = method13(v777, v58600)
                                                                                                                        let v58602 : string = "v58601.await"
                                                                                                                        let v58603 : Result<US4, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v58602 
                                                                                                                        let v58604 : (anyhow_Error -> std_string_String) = method19()
                                                                                                                        let v58605 : string = "$0.map_err(|x| $1(x))"
                                                                                                                        let v58606 : Result<US4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v58603, v58604) v58605 
                                                                                                                        let v58607 : US6 = match v58606 with Ok x -> v785 x | Error x -> v786 x
                                                                                                                        match v58607 with
                                                                                                                        | US6_1(v59679) -> (* Error *)
                                                                                                                            let v59680 : unit = ()
                                                                                                                            let v59681 : (unit -> unit) = closure73(v59679)
                                                                                                                            let v59682 : unit = (fun () -> v59681 (); v59680) ()
                                                                                                                            let v60665 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                            let v60666 : bool = Fable.Core.RustInterop.emitRustExpr () v60665 
                                                                                                                            let v60667 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                            let v60668 : bool = Fable.Core.RustInterop.emitRustExpr () v60667 
                                                                                                                            let v60669 : uint8 = method20()
                                                                                                                            let v60670 : string = ""
                                                                                                                            let v60671 : string = "}"
                                                                                                                            let v60672 : string = v60670 + v60671 
                                                                                                                            let v60673 : string = "true; v60669 " + v60672 + "); " + v60670 + " // rust.fix_closure'"
                                                                                                                            let v60674 : bool = Fable.Core.RustInterop.emitRustExpr () v60673 
                                                                                                                            let v60675 : string = "__future_init"
                                                                                                                            let v60676 : _ = Fable.Core.RustInterop.emitRustExpr () v60675 
                                                                                                                            let v60677 : string = "v60676"
                                                                                                                            let v60678 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v60677 
                                                                                                                            let v60679 : string = "v60678.await"
                                                                                                                            let v60680 : uint8 = Fable.Core.RustInterop.emitRustExpr () v60679 
                                                                                                                            let v60681 : US7 = method21(v60680)
                                                                                                                            let v60682 : string = v60670 + v60671 
                                                                                                                            let v60683 : string = "true; v60681 " + v60682 + "); " + v60670 + " // rust.fix_closure'"
                                                                                                                            let v60684 : bool = Fable.Core.RustInterop.emitRustExpr () v60683 
                                                                                                                            let v60685 : string = "__future_init"
                                                                                                                            let v60686 : _ = Fable.Core.RustInterop.emitRustExpr () v60685 
                                                                                                                            let v60687 : string = "v60686"
                                                                                                                            let v60688 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v60687 
                                                                                                                            v60688
                                                                                                                        | US6_0(v58608) -> (* Ok *)
                                                                                                                            match v58608 with
                                                                                                                            | US4_1 -> (* None *)
                                                                                                                                let v58609 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                                let v58610 : bool = Fable.Core.RustInterop.emitRustExpr () v58609 
                                                                                                                                let v58611 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                                let v58612 : bool = Fable.Core.RustInterop.emitRustExpr () v58611 
                                                                                                                                let v58613 : uint8 = method22()
                                                                                                                                let v58614 : string = ""
                                                                                                                                let v58615 : string = "}"
                                                                                                                                let v58616 : string = v58614 + v58615 
                                                                                                                                let v58617 : string = "true; v58613 " + v58616 + "); " + v58614 + " // rust.fix_closure'"
                                                                                                                                let v58618 : bool = Fable.Core.RustInterop.emitRustExpr () v58617 
                                                                                                                                let v58619 : string = "__future_init"
                                                                                                                                let v58620 : _ = Fable.Core.RustInterop.emitRustExpr () v58619 
                                                                                                                                let v58621 : string = "v58620"
                                                                                                                                let v58622 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v58621 
                                                                                                                                let v58623 : string = "v58622.await"
                                                                                                                                let v58624 : uint8 = Fable.Core.RustInterop.emitRustExpr () v58623 
                                                                                                                                let v58625 : US7 = method23(v58624)
                                                                                                                                let v58626 : string = v58614 + v58615 
                                                                                                                                let v58627 : string = "true; v58625 " + v58626 + "); " + v58614 + " // rust.fix_closure'"
                                                                                                                                let v58628 : bool = Fable.Core.RustInterop.emitRustExpr () v58627 
                                                                                                                                let v58629 : string = "__future_init"
                                                                                                                                let v58630 : _ = Fable.Core.RustInterop.emitRustExpr () v58629 
                                                                                                                                let v58631 : string = "v58630"
                                                                                                                                let v58632 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v58631 
                                                                                                                                v58632
                                                                                                                            | US4_0(v58633) -> (* Some *)
                                                                                                                                let v58634 : unit = ()
                                                                                                                                let v58635 : (unit -> unit) = closure74(v58633)
                                                                                                                                let v58636 : unit = (fun () -> v58635 (); v58634) ()
                                                                                                                                let v59653 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                                let v59654 : bool = Fable.Core.RustInterop.emitRustExpr () v59653 
                                                                                                                                let v59655 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                                let v59656 : bool = Fable.Core.RustInterop.emitRustExpr () v59655 
                                                                                                                                let v59657 : uint8 = method22()
                                                                                                                                let v59658 : string = ""
                                                                                                                                let v59659 : string = "}"
                                                                                                                                let v59660 : string = v59658 + v59659 
                                                                                                                                let v59661 : string = "true; v59657 " + v59660 + "); " + v59658 + " // rust.fix_closure'"
                                                                                                                                let v59662 : bool = Fable.Core.RustInterop.emitRustExpr () v59661 
                                                                                                                                let v59663 : string = "__future_init"
                                                                                                                                let v59664 : _ = Fable.Core.RustInterop.emitRustExpr () v59663 
                                                                                                                                let v59665 : string = "v59664"
                                                                                                                                let v59666 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v59665 
                                                                                                                                let v59667 : string = "v59666.await"
                                                                                                                                let v59668 : uint8 = Fable.Core.RustInterop.emitRustExpr () v59667 
                                                                                                                                let v59669 : US7 = method21(v59668)
                                                                                                                                let v59670 : string = v59658 + v59659 
                                                                                                                                let v59671 : string = "true; v59669 " + v59670 + "); " + v59658 + " // rust.fix_closure'"
                                                                                                                                let v59672 : bool = Fable.Core.RustInterop.emitRustExpr () v59671 
                                                                                                                                let v59673 : string = "__future_init"
                                                                                                                                let v59674 : _ = Fable.Core.RustInterop.emitRustExpr () v59673 
                                                                                                                                let v59675 : string = "v59674"
                                                                                                                                let v59676 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v59675 
                                                                                                                                v59676
                                                                                                                    | US6_0(v56543) -> (* Ok *)
                                                                                                                        match v56543 with
                                                                                                                        | US4_1 -> (* None *)
                                                                                                                            let v56544 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                            let v56545 : bool = Fable.Core.RustInterop.emitRustExpr () v56544 
                                                                                                                            let v56546 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                            let v56547 : bool = Fable.Core.RustInterop.emitRustExpr () v56546 
                                                                                                                            let v56548 : uint8 = method24()
                                                                                                                            let v56549 : string = ""
                                                                                                                            let v56550 : string = "}"
                                                                                                                            let v56551 : string = v56549 + v56550 
                                                                                                                            let v56552 : string = "true; v56548 " + v56551 + "); " + v56549 + " // rust.fix_closure'"
                                                                                                                            let v56553 : bool = Fable.Core.RustInterop.emitRustExpr () v56552 
                                                                                                                            let v56554 : string = "__future_init"
                                                                                                                            let v56555 : _ = Fable.Core.RustInterop.emitRustExpr () v56554 
                                                                                                                            let v56556 : string = "v56555"
                                                                                                                            let v56557 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v56556 
                                                                                                                            let v56558 : string = "v56557.await"
                                                                                                                            let v56559 : uint8 = Fable.Core.RustInterop.emitRustExpr () v56558 
                                                                                                                            let v56560 : US7 = method23(v56559)
                                                                                                                            let v56561 : string = v56549 + v56550 
                                                                                                                            let v56562 : string = "true; v56560 " + v56561 + "); " + v56549 + " // rust.fix_closure'"
                                                                                                                            let v56563 : bool = Fable.Core.RustInterop.emitRustExpr () v56562 
                                                                                                                            let v56564 : string = "__future_init"
                                                                                                                            let v56565 : _ = Fable.Core.RustInterop.emitRustExpr () v56564 
                                                                                                                            let v56566 : string = "v56565"
                                                                                                                            let v56567 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v56566 
                                                                                                                            v56567
                                                                                                                        | US4_0(v56568) -> (* Some *)
                                                                                                                            let v56569 : unit = ()
                                                                                                                            let v56570 : (unit -> unit) = closure76(v56568)
                                                                                                                            let v56571 : unit = (fun () -> v56570 (); v56569) ()
                                                                                                                            let v57588 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                            let v57589 : bool = Fable.Core.RustInterop.emitRustExpr () v57588 
                                                                                                                            let v57590 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                            let v57591 : bool = Fable.Core.RustInterop.emitRustExpr () v57590 
                                                                                                                            let v57592 : uint8 = method24()
                                                                                                                            let v57593 : string = ""
                                                                                                                            let v57594 : string = "}"
                                                                                                                            let v57595 : string = v57593 + v57594 
                                                                                                                            let v57596 : string = "true; v57592 " + v57595 + "); " + v57593 + " // rust.fix_closure'"
                                                                                                                            let v57597 : bool = Fable.Core.RustInterop.emitRustExpr () v57596 
                                                                                                                            let v57598 : string = "__future_init"
                                                                                                                            let v57599 : _ = Fable.Core.RustInterop.emitRustExpr () v57598 
                                                                                                                            let v57600 : string = "v57599"
                                                                                                                            let v57601 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v57600 
                                                                                                                            let v57602 : string = "v57601.await"
                                                                                                                            let v57603 : uint8 = Fable.Core.RustInterop.emitRustExpr () v57602 
                                                                                                                            let v57604 : US7 = method21(v57603)
                                                                                                                            let v57605 : string = v57593 + v57594 
                                                                                                                            let v57606 : string = "true; v57604 " + v57605 + "); " + v57593 + " // rust.fix_closure'"
                                                                                                                            let v57607 : bool = Fable.Core.RustInterop.emitRustExpr () v57606 
                                                                                                                            let v57608 : string = "__future_init"
                                                                                                                            let v57609 : _ = Fable.Core.RustInterop.emitRustExpr () v57608 
                                                                                                                            let v57610 : string = "v57609"
                                                                                                                            let v57611 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v57610 
                                                                                                                            v57611
                                                                                                                | US6_0(v54478) -> (* Ok *)
                                                                                                                    match v54478 with
                                                                                                                    | US4_1 -> (* None *)
                                                                                                                        let v54479 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                        let v54480 : bool = Fable.Core.RustInterop.emitRustExpr () v54479 
                                                                                                                        let v54481 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                        let v54482 : bool = Fable.Core.RustInterop.emitRustExpr () v54481 
                                                                                                                        let v54483 : uint8 = method25()
                                                                                                                        let v54484 : string = ""
                                                                                                                        let v54485 : string = "}"
                                                                                                                        let v54486 : string = v54484 + v54485 
                                                                                                                        let v54487 : string = "true; v54483 " + v54486 + "); " + v54484 + " // rust.fix_closure'"
                                                                                                                        let v54488 : bool = Fable.Core.RustInterop.emitRustExpr () v54487 
                                                                                                                        let v54489 : string = "__future_init"
                                                                                                                        let v54490 : _ = Fable.Core.RustInterop.emitRustExpr () v54489 
                                                                                                                        let v54491 : string = "v54490"
                                                                                                                        let v54492 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v54491 
                                                                                                                        let v54493 : string = "v54492.await"
                                                                                                                        let v54494 : uint8 = Fable.Core.RustInterop.emitRustExpr () v54493 
                                                                                                                        let v54495 : US7 = method23(v54494)
                                                                                                                        let v54496 : string = v54484 + v54485 
                                                                                                                        let v54497 : string = "true; v54495 " + v54496 + "); " + v54484 + " // rust.fix_closure'"
                                                                                                                        let v54498 : bool = Fable.Core.RustInterop.emitRustExpr () v54497 
                                                                                                                        let v54499 : string = "__future_init"
                                                                                                                        let v54500 : _ = Fable.Core.RustInterop.emitRustExpr () v54499 
                                                                                                                        let v54501 : string = "v54500"
                                                                                                                        let v54502 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v54501 
                                                                                                                        v54502
                                                                                                                    | US4_0(v54503) -> (* Some *)
                                                                                                                        let v54504 : unit = ()
                                                                                                                        let v54505 : (unit -> unit) = closure77(v54503)
                                                                                                                        let v54506 : unit = (fun () -> v54505 (); v54504) ()
                                                                                                                        let v55523 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                        let v55524 : bool = Fable.Core.RustInterop.emitRustExpr () v55523 
                                                                                                                        let v55525 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                        let v55526 : bool = Fable.Core.RustInterop.emitRustExpr () v55525 
                                                                                                                        let v55527 : uint8 = method25()
                                                                                                                        let v55528 : string = ""
                                                                                                                        let v55529 : string = "}"
                                                                                                                        let v55530 : string = v55528 + v55529 
                                                                                                                        let v55531 : string = "true; v55527 " + v55530 + "); " + v55528 + " // rust.fix_closure'"
                                                                                                                        let v55532 : bool = Fable.Core.RustInterop.emitRustExpr () v55531 
                                                                                                                        let v55533 : string = "__future_init"
                                                                                                                        let v55534 : _ = Fable.Core.RustInterop.emitRustExpr () v55533 
                                                                                                                        let v55535 : string = "v55534"
                                                                                                                        let v55536 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v55535 
                                                                                                                        let v55537 : string = "v55536.await"
                                                                                                                        let v55538 : uint8 = Fable.Core.RustInterop.emitRustExpr () v55537 
                                                                                                                        let v55539 : US7 = method21(v55538)
                                                                                                                        let v55540 : string = v55528 + v55529 
                                                                                                                        let v55541 : string = "true; v55539 " + v55540 + "); " + v55528 + " // rust.fix_closure'"
                                                                                                                        let v55542 : bool = Fable.Core.RustInterop.emitRustExpr () v55541 
                                                                                                                        let v55543 : string = "__future_init"
                                                                                                                        let v55544 : _ = Fable.Core.RustInterop.emitRustExpr () v55543 
                                                                                                                        let v55545 : string = "v55544"
                                                                                                                        let v55546 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v55545 
                                                                                                                        v55546
                                                                                                            | US6_0(v52413) -> (* Ok *)
                                                                                                                match v52413 with
                                                                                                                | US4_1 -> (* None *)
                                                                                                                    let v52414 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                    let v52415 : bool = Fable.Core.RustInterop.emitRustExpr () v52414 
                                                                                                                    let v52416 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                    let v52417 : bool = Fable.Core.RustInterop.emitRustExpr () v52416 
                                                                                                                    let v52418 : uint8 = method26()
                                                                                                                    let v52419 : string = ""
                                                                                                                    let v52420 : string = "}"
                                                                                                                    let v52421 : string = v52419 + v52420 
                                                                                                                    let v52422 : string = "true; v52418 " + v52421 + "); " + v52419 + " // rust.fix_closure'"
                                                                                                                    let v52423 : bool = Fable.Core.RustInterop.emitRustExpr () v52422 
                                                                                                                    let v52424 : string = "__future_init"
                                                                                                                    let v52425 : _ = Fable.Core.RustInterop.emitRustExpr () v52424 
                                                                                                                    let v52426 : string = "v52425"
                                                                                                                    let v52427 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v52426 
                                                                                                                    let v52428 : string = "v52427.await"
                                                                                                                    let v52429 : uint8 = Fable.Core.RustInterop.emitRustExpr () v52428 
                                                                                                                    let v52430 : US7 = method23(v52429)
                                                                                                                    let v52431 : string = v52419 + v52420 
                                                                                                                    let v52432 : string = "true; v52430 " + v52431 + "); " + v52419 + " // rust.fix_closure'"
                                                                                                                    let v52433 : bool = Fable.Core.RustInterop.emitRustExpr () v52432 
                                                                                                                    let v52434 : string = "__future_init"
                                                                                                                    let v52435 : _ = Fable.Core.RustInterop.emitRustExpr () v52434 
                                                                                                                    let v52436 : string = "v52435"
                                                                                                                    let v52437 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v52436 
                                                                                                                    v52437
                                                                                                                | US4_0(v52438) -> (* Some *)
                                                                                                                    let v52439 : unit = ()
                                                                                                                    let v52440 : (unit -> unit) = closure78(v52438)
                                                                                                                    let v52441 : unit = (fun () -> v52440 (); v52439) ()
                                                                                                                    let v53458 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                    let v53459 : bool = Fable.Core.RustInterop.emitRustExpr () v53458 
                                                                                                                    let v53460 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                    let v53461 : bool = Fable.Core.RustInterop.emitRustExpr () v53460 
                                                                                                                    let v53462 : uint8 = method26()
                                                                                                                    let v53463 : string = ""
                                                                                                                    let v53464 : string = "}"
                                                                                                                    let v53465 : string = v53463 + v53464 
                                                                                                                    let v53466 : string = "true; v53462 " + v53465 + "); " + v53463 + " // rust.fix_closure'"
                                                                                                                    let v53467 : bool = Fable.Core.RustInterop.emitRustExpr () v53466 
                                                                                                                    let v53468 : string = "__future_init"
                                                                                                                    let v53469 : _ = Fable.Core.RustInterop.emitRustExpr () v53468 
                                                                                                                    let v53470 : string = "v53469"
                                                                                                                    let v53471 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v53470 
                                                                                                                    let v53472 : string = "v53471.await"
                                                                                                                    let v53473 : uint8 = Fable.Core.RustInterop.emitRustExpr () v53472 
                                                                                                                    let v53474 : US7 = method21(v53473)
                                                                                                                    let v53475 : string = v53463 + v53464 
                                                                                                                    let v53476 : string = "true; v53474 " + v53475 + "); " + v53463 + " // rust.fix_closure'"
                                                                                                                    let v53477 : bool = Fable.Core.RustInterop.emitRustExpr () v53476 
                                                                                                                    let v53478 : string = "__future_init"
                                                                                                                    let v53479 : _ = Fable.Core.RustInterop.emitRustExpr () v53478 
                                                                                                                    let v53480 : string = "v53479"
                                                                                                                    let v53481 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v53480 
                                                                                                                    v53481
                                                                                                        | US6_0(v50348) -> (* Ok *)
                                                                                                            match v50348 with
                                                                                                            | US4_1 -> (* None *)
                                                                                                                let v50349 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                let v50350 : bool = Fable.Core.RustInterop.emitRustExpr () v50349 
                                                                                                                let v50351 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                let v50352 : bool = Fable.Core.RustInterop.emitRustExpr () v50351 
                                                                                                                let v50353 : uint8 = method27()
                                                                                                                let v50354 : string = ""
                                                                                                                let v50355 : string = "}"
                                                                                                                let v50356 : string = v50354 + v50355 
                                                                                                                let v50357 : string = "true; v50353 " + v50356 + "); " + v50354 + " // rust.fix_closure'"
                                                                                                                let v50358 : bool = Fable.Core.RustInterop.emitRustExpr () v50357 
                                                                                                                let v50359 : string = "__future_init"
                                                                                                                let v50360 : _ = Fable.Core.RustInterop.emitRustExpr () v50359 
                                                                                                                let v50361 : string = "v50360"
                                                                                                                let v50362 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v50361 
                                                                                                                let v50363 : string = "v50362.await"
                                                                                                                let v50364 : uint8 = Fable.Core.RustInterop.emitRustExpr () v50363 
                                                                                                                let v50365 : US7 = method23(v50364)
                                                                                                                let v50366 : string = v50354 + v50355 
                                                                                                                let v50367 : string = "true; v50365 " + v50366 + "); " + v50354 + " // rust.fix_closure'"
                                                                                                                let v50368 : bool = Fable.Core.RustInterop.emitRustExpr () v50367 
                                                                                                                let v50369 : string = "__future_init"
                                                                                                                let v50370 : _ = Fable.Core.RustInterop.emitRustExpr () v50369 
                                                                                                                let v50371 : string = "v50370"
                                                                                                                let v50372 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v50371 
                                                                                                                v50372
                                                                                                            | US4_0(v50373) -> (* Some *)
                                                                                                                let v50374 : unit = ()
                                                                                                                let v50375 : (unit -> unit) = closure79(v50373)
                                                                                                                let v50376 : unit = (fun () -> v50375 (); v50374) ()
                                                                                                                let v51393 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                let v51394 : bool = Fable.Core.RustInterop.emitRustExpr () v51393 
                                                                                                                let v51395 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                                let v51396 : bool = Fable.Core.RustInterop.emitRustExpr () v51395 
                                                                                                                let v51397 : uint8 = method27()
                                                                                                                let v51398 : string = ""
                                                                                                                let v51399 : string = "}"
                                                                                                                let v51400 : string = v51398 + v51399 
                                                                                                                let v51401 : string = "true; v51397 " + v51400 + "); " + v51398 + " // rust.fix_closure'"
                                                                                                                let v51402 : bool = Fable.Core.RustInterop.emitRustExpr () v51401 
                                                                                                                let v51403 : string = "__future_init"
                                                                                                                let v51404 : _ = Fable.Core.RustInterop.emitRustExpr () v51403 
                                                                                                                let v51405 : string = "v51404"
                                                                                                                let v51406 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v51405 
                                                                                                                let v51407 : string = "v51406.await"
                                                                                                                let v51408 : uint8 = Fable.Core.RustInterop.emitRustExpr () v51407 
                                                                                                                let v51409 : US7 = method21(v51408)
                                                                                                                let v51410 : string = v51398 + v51399 
                                                                                                                let v51411 : string = "true; v51409 " + v51410 + "); " + v51398 + " // rust.fix_closure'"
                                                                                                                let v51412 : bool = Fable.Core.RustInterop.emitRustExpr () v51411 
                                                                                                                let v51413 : string = "__future_init"
                                                                                                                let v51414 : _ = Fable.Core.RustInterop.emitRustExpr () v51413 
                                                                                                                let v51415 : string = "v51414"
                                                                                                                let v51416 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v51415 
                                                                                                                v51416
                                                                                                    | US6_0(v48283) -> (* Ok *)
                                                                                                        match v48283 with
                                                                                                        | US4_1 -> (* None *)
                                                                                                            let v48284 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                            let v48285 : bool = Fable.Core.RustInterop.emitRustExpr () v48284 
                                                                                                            let v48286 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                            let v48287 : bool = Fable.Core.RustInterop.emitRustExpr () v48286 
                                                                                                            let v48288 : uint8 = method28()
                                                                                                            let v48289 : string = ""
                                                                                                            let v48290 : string = "}"
                                                                                                            let v48291 : string = v48289 + v48290 
                                                                                                            let v48292 : string = "true; v48288 " + v48291 + "); " + v48289 + " // rust.fix_closure'"
                                                                                                            let v48293 : bool = Fable.Core.RustInterop.emitRustExpr () v48292 
                                                                                                            let v48294 : string = "__future_init"
                                                                                                            let v48295 : _ = Fable.Core.RustInterop.emitRustExpr () v48294 
                                                                                                            let v48296 : string = "v48295"
                                                                                                            let v48297 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v48296 
                                                                                                            let v48298 : string = "v48297.await"
                                                                                                            let v48299 : uint8 = Fable.Core.RustInterop.emitRustExpr () v48298 
                                                                                                            let v48300 : US7 = method23(v48299)
                                                                                                            let v48301 : string = v48289 + v48290 
                                                                                                            let v48302 : string = "true; v48300 " + v48301 + "); " + v48289 + " // rust.fix_closure'"
                                                                                                            let v48303 : bool = Fable.Core.RustInterop.emitRustExpr () v48302 
                                                                                                            let v48304 : string = "__future_init"
                                                                                                            let v48305 : _ = Fable.Core.RustInterop.emitRustExpr () v48304 
                                                                                                            let v48306 : string = "v48305"
                                                                                                            let v48307 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v48306 
                                                                                                            v48307
                                                                                                        | US4_0(v48308) -> (* Some *)
                                                                                                            let v48309 : unit = ()
                                                                                                            let v48310 : (unit -> unit) = closure80(v48308)
                                                                                                            let v48311 : unit = (fun () -> v48310 (); v48309) ()
                                                                                                            let v49328 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                            let v49329 : bool = Fable.Core.RustInterop.emitRustExpr () v49328 
                                                                                                            let v49330 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                            let v49331 : bool = Fable.Core.RustInterop.emitRustExpr () v49330 
                                                                                                            let v49332 : uint8 = method28()
                                                                                                            let v49333 : string = ""
                                                                                                            let v49334 : string = "}"
                                                                                                            let v49335 : string = v49333 + v49334 
                                                                                                            let v49336 : string = "true; v49332 " + v49335 + "); " + v49333 + " // rust.fix_closure'"
                                                                                                            let v49337 : bool = Fable.Core.RustInterop.emitRustExpr () v49336 
                                                                                                            let v49338 : string = "__future_init"
                                                                                                            let v49339 : _ = Fable.Core.RustInterop.emitRustExpr () v49338 
                                                                                                            let v49340 : string = "v49339"
                                                                                                            let v49341 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v49340 
                                                                                                            let v49342 : string = "v49341.await"
                                                                                                            let v49343 : uint8 = Fable.Core.RustInterop.emitRustExpr () v49342 
                                                                                                            let v49344 : US7 = method21(v49343)
                                                                                                            let v49345 : string = v49333 + v49334 
                                                                                                            let v49346 : string = "true; v49344 " + v49345 + "); " + v49333 + " // rust.fix_closure'"
                                                                                                            let v49347 : bool = Fable.Core.RustInterop.emitRustExpr () v49346 
                                                                                                            let v49348 : string = "__future_init"
                                                                                                            let v49349 : _ = Fable.Core.RustInterop.emitRustExpr () v49348 
                                                                                                            let v49350 : string = "v49349"
                                                                                                            let v49351 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v49350 
                                                                                                            v49351
                                                                                                | US6_0(v46218) -> (* Ok *)
                                                                                                    match v46218 with
                                                                                                    | US4_1 -> (* None *)
                                                                                                        let v46219 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                        let v46220 : bool = Fable.Core.RustInterop.emitRustExpr () v46219 
                                                                                                        let v46221 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                        let v46222 : bool = Fable.Core.RustInterop.emitRustExpr () v46221 
                                                                                                        let v46223 : uint8 = method29()
                                                                                                        let v46224 : string = ""
                                                                                                        let v46225 : string = "}"
                                                                                                        let v46226 : string = v46224 + v46225 
                                                                                                        let v46227 : string = "true; v46223 " + v46226 + "); " + v46224 + " // rust.fix_closure'"
                                                                                                        let v46228 : bool = Fable.Core.RustInterop.emitRustExpr () v46227 
                                                                                                        let v46229 : string = "__future_init"
                                                                                                        let v46230 : _ = Fable.Core.RustInterop.emitRustExpr () v46229 
                                                                                                        let v46231 : string = "v46230"
                                                                                                        let v46232 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v46231 
                                                                                                        let v46233 : string = "v46232.await"
                                                                                                        let v46234 : uint8 = Fable.Core.RustInterop.emitRustExpr () v46233 
                                                                                                        let v46235 : US7 = method23(v46234)
                                                                                                        let v46236 : string = v46224 + v46225 
                                                                                                        let v46237 : string = "true; v46235 " + v46236 + "); " + v46224 + " // rust.fix_closure'"
                                                                                                        let v46238 : bool = Fable.Core.RustInterop.emitRustExpr () v46237 
                                                                                                        let v46239 : string = "__future_init"
                                                                                                        let v46240 : _ = Fable.Core.RustInterop.emitRustExpr () v46239 
                                                                                                        let v46241 : string = "v46240"
                                                                                                        let v46242 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v46241 
                                                                                                        v46242
                                                                                                    | US4_0(v46243) -> (* Some *)
                                                                                                        let v46244 : unit = ()
                                                                                                        let v46245 : (unit -> unit) = closure81(v46243)
                                                                                                        let v46246 : unit = (fun () -> v46245 (); v46244) ()
                                                                                                        let v47263 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                        let v47264 : bool = Fable.Core.RustInterop.emitRustExpr () v47263 
                                                                                                        let v47265 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                        let v47266 : bool = Fable.Core.RustInterop.emitRustExpr () v47265 
                                                                                                        let v47267 : uint8 = method29()
                                                                                                        let v47268 : string = ""
                                                                                                        let v47269 : string = "}"
                                                                                                        let v47270 : string = v47268 + v47269 
                                                                                                        let v47271 : string = "true; v47267 " + v47270 + "); " + v47268 + " // rust.fix_closure'"
                                                                                                        let v47272 : bool = Fable.Core.RustInterop.emitRustExpr () v47271 
                                                                                                        let v47273 : string = "__future_init"
                                                                                                        let v47274 : _ = Fable.Core.RustInterop.emitRustExpr () v47273 
                                                                                                        let v47275 : string = "v47274"
                                                                                                        let v47276 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v47275 
                                                                                                        let v47277 : string = "v47276.await"
                                                                                                        let v47278 : uint8 = Fable.Core.RustInterop.emitRustExpr () v47277 
                                                                                                        let v47279 : US7 = method21(v47278)
                                                                                                        let v47280 : string = v47268 + v47269 
                                                                                                        let v47281 : string = "true; v47279 " + v47280 + "); " + v47268 + " // rust.fix_closure'"
                                                                                                        let v47282 : bool = Fable.Core.RustInterop.emitRustExpr () v47281 
                                                                                                        let v47283 : string = "__future_init"
                                                                                                        let v47284 : _ = Fable.Core.RustInterop.emitRustExpr () v47283 
                                                                                                        let v47285 : string = "v47284"
                                                                                                        let v47286 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v47285 
                                                                                                        v47286
                                                                                            | US6_0(v44153) -> (* Ok *)
                                                                                                match v44153 with
                                                                                                | US4_1 -> (* None *)
                                                                                                    let v44154 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                    let v44155 : bool = Fable.Core.RustInterop.emitRustExpr () v44154 
                                                                                                    let v44156 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                    let v44157 : bool = Fable.Core.RustInterop.emitRustExpr () v44156 
                                                                                                    let v44158 : uint8 = method30()
                                                                                                    let v44159 : string = ""
                                                                                                    let v44160 : string = "}"
                                                                                                    let v44161 : string = v44159 + v44160 
                                                                                                    let v44162 : string = "true; v44158 " + v44161 + "); " + v44159 + " // rust.fix_closure'"
                                                                                                    let v44163 : bool = Fable.Core.RustInterop.emitRustExpr () v44162 
                                                                                                    let v44164 : string = "__future_init"
                                                                                                    let v44165 : _ = Fable.Core.RustInterop.emitRustExpr () v44164 
                                                                                                    let v44166 : string = "v44165"
                                                                                                    let v44167 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v44166 
                                                                                                    let v44168 : string = "v44167.await"
                                                                                                    let v44169 : uint8 = Fable.Core.RustInterop.emitRustExpr () v44168 
                                                                                                    let v44170 : US7 = method23(v44169)
                                                                                                    let v44171 : string = v44159 + v44160 
                                                                                                    let v44172 : string = "true; v44170 " + v44171 + "); " + v44159 + " // rust.fix_closure'"
                                                                                                    let v44173 : bool = Fable.Core.RustInterop.emitRustExpr () v44172 
                                                                                                    let v44174 : string = "__future_init"
                                                                                                    let v44175 : _ = Fable.Core.RustInterop.emitRustExpr () v44174 
                                                                                                    let v44176 : string = "v44175"
                                                                                                    let v44177 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v44176 
                                                                                                    v44177
                                                                                                | US4_0(v44178) -> (* Some *)
                                                                                                    let v44179 : unit = ()
                                                                                                    let v44180 : (unit -> unit) = closure82(v44178)
                                                                                                    let v44181 : unit = (fun () -> v44180 (); v44179) ()
                                                                                                    let v45198 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                    let v45199 : bool = Fable.Core.RustInterop.emitRustExpr () v45198 
                                                                                                    let v45200 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                    let v45201 : bool = Fable.Core.RustInterop.emitRustExpr () v45200 
                                                                                                    let v45202 : uint8 = method30()
                                                                                                    let v45203 : string = ""
                                                                                                    let v45204 : string = "}"
                                                                                                    let v45205 : string = v45203 + v45204 
                                                                                                    let v45206 : string = "true; v45202 " + v45205 + "); " + v45203 + " // rust.fix_closure'"
                                                                                                    let v45207 : bool = Fable.Core.RustInterop.emitRustExpr () v45206 
                                                                                                    let v45208 : string = "__future_init"
                                                                                                    let v45209 : _ = Fable.Core.RustInterop.emitRustExpr () v45208 
                                                                                                    let v45210 : string = "v45209"
                                                                                                    let v45211 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v45210 
                                                                                                    let v45212 : string = "v45211.await"
                                                                                                    let v45213 : uint8 = Fable.Core.RustInterop.emitRustExpr () v45212 
                                                                                                    let v45214 : US7 = method21(v45213)
                                                                                                    let v45215 : string = v45203 + v45204 
                                                                                                    let v45216 : string = "true; v45214 " + v45215 + "); " + v45203 + " // rust.fix_closure'"
                                                                                                    let v45217 : bool = Fable.Core.RustInterop.emitRustExpr () v45216 
                                                                                                    let v45218 : string = "__future_init"
                                                                                                    let v45219 : _ = Fable.Core.RustInterop.emitRustExpr () v45218 
                                                                                                    let v45220 : string = "v45219"
                                                                                                    let v45221 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v45220 
                                                                                                    v45221
                                                                                        | US6_0(v42088) -> (* Ok *)
                                                                                            match v42088 with
                                                                                            | US4_1 -> (* None *)
                                                                                                let v42089 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                let v42090 : bool = Fable.Core.RustInterop.emitRustExpr () v42089 
                                                                                                let v42091 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                let v42092 : bool = Fable.Core.RustInterop.emitRustExpr () v42091 
                                                                                                let v42093 : uint8 = method31()
                                                                                                let v42094 : string = ""
                                                                                                let v42095 : string = "}"
                                                                                                let v42096 : string = v42094 + v42095 
                                                                                                let v42097 : string = "true; v42093 " + v42096 + "); " + v42094 + " // rust.fix_closure'"
                                                                                                let v42098 : bool = Fable.Core.RustInterop.emitRustExpr () v42097 
                                                                                                let v42099 : string = "__future_init"
                                                                                                let v42100 : _ = Fable.Core.RustInterop.emitRustExpr () v42099 
                                                                                                let v42101 : string = "v42100"
                                                                                                let v42102 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v42101 
                                                                                                let v42103 : string = "v42102.await"
                                                                                                let v42104 : uint8 = Fable.Core.RustInterop.emitRustExpr () v42103 
                                                                                                let v42105 : US7 = method23(v42104)
                                                                                                let v42106 : string = v42094 + v42095 
                                                                                                let v42107 : string = "true; v42105 " + v42106 + "); " + v42094 + " // rust.fix_closure'"
                                                                                                let v42108 : bool = Fable.Core.RustInterop.emitRustExpr () v42107 
                                                                                                let v42109 : string = "__future_init"
                                                                                                let v42110 : _ = Fable.Core.RustInterop.emitRustExpr () v42109 
                                                                                                let v42111 : string = "v42110"
                                                                                                let v42112 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v42111 
                                                                                                v42112
                                                                                            | US4_0(v42113) -> (* Some *)
                                                                                                let v42114 : unit = ()
                                                                                                let v42115 : (unit -> unit) = closure83(v42113)
                                                                                                let v42116 : unit = (fun () -> v42115 (); v42114) ()
                                                                                                let v43133 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                let v43134 : bool = Fable.Core.RustInterop.emitRustExpr () v43133 
                                                                                                let v43135 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                                let v43136 : bool = Fable.Core.RustInterop.emitRustExpr () v43135 
                                                                                                let v43137 : uint8 = method31()
                                                                                                let v43138 : string = ""
                                                                                                let v43139 : string = "}"
                                                                                                let v43140 : string = v43138 + v43139 
                                                                                                let v43141 : string = "true; v43137 " + v43140 + "); " + v43138 + " // rust.fix_closure'"
                                                                                                let v43142 : bool = Fable.Core.RustInterop.emitRustExpr () v43141 
                                                                                                let v43143 : string = "__future_init"
                                                                                                let v43144 : _ = Fable.Core.RustInterop.emitRustExpr () v43143 
                                                                                                let v43145 : string = "v43144"
                                                                                                let v43146 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v43145 
                                                                                                let v43147 : string = "v43146.await"
                                                                                                let v43148 : uint8 = Fable.Core.RustInterop.emitRustExpr () v43147 
                                                                                                let v43149 : US7 = method21(v43148)
                                                                                                let v43150 : string = v43138 + v43139 
                                                                                                let v43151 : string = "true; v43149 " + v43150 + "); " + v43138 + " // rust.fix_closure'"
                                                                                                let v43152 : bool = Fable.Core.RustInterop.emitRustExpr () v43151 
                                                                                                let v43153 : string = "__future_init"
                                                                                                let v43154 : _ = Fable.Core.RustInterop.emitRustExpr () v43153 
                                                                                                let v43155 : string = "v43154"
                                                                                                let v43156 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v43155 
                                                                                                v43156
                                                                                    | US6_0(v40023) -> (* Ok *)
                                                                                        match v40023 with
                                                                                        | US4_1 -> (* None *)
                                                                                            let v40024 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                            let v40025 : bool = Fable.Core.RustInterop.emitRustExpr () v40024 
                                                                                            let v40026 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                            let v40027 : bool = Fable.Core.RustInterop.emitRustExpr () v40026 
                                                                                            let v40028 : uint8 = method32()
                                                                                            let v40029 : string = ""
                                                                                            let v40030 : string = "}"
                                                                                            let v40031 : string = v40029 + v40030 
                                                                                            let v40032 : string = "true; v40028 " + v40031 + "); " + v40029 + " // rust.fix_closure'"
                                                                                            let v40033 : bool = Fable.Core.RustInterop.emitRustExpr () v40032 
                                                                                            let v40034 : string = "__future_init"
                                                                                            let v40035 : _ = Fable.Core.RustInterop.emitRustExpr () v40034 
                                                                                            let v40036 : string = "v40035"
                                                                                            let v40037 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v40036 
                                                                                            let v40038 : string = "v40037.await"
                                                                                            let v40039 : uint8 = Fable.Core.RustInterop.emitRustExpr () v40038 
                                                                                            let v40040 : US7 = method23(v40039)
                                                                                            let v40041 : string = v40029 + v40030 
                                                                                            let v40042 : string = "true; v40040 " + v40041 + "); " + v40029 + " // rust.fix_closure'"
                                                                                            let v40043 : bool = Fable.Core.RustInterop.emitRustExpr () v40042 
                                                                                            let v40044 : string = "__future_init"
                                                                                            let v40045 : _ = Fable.Core.RustInterop.emitRustExpr () v40044 
                                                                                            let v40046 : string = "v40045"
                                                                                            let v40047 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v40046 
                                                                                            v40047
                                                                                        | US4_0(v40048) -> (* Some *)
                                                                                            let v40049 : unit = ()
                                                                                            let v40050 : (unit -> unit) = closure84(v40048)
                                                                                            let v40051 : unit = (fun () -> v40050 (); v40049) ()
                                                                                            let v41068 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                            let v41069 : bool = Fable.Core.RustInterop.emitRustExpr () v41068 
                                                                                            let v41070 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                            let v41071 : bool = Fable.Core.RustInterop.emitRustExpr () v41070 
                                                                                            let v41072 : uint8 = method32()
                                                                                            let v41073 : string = ""
                                                                                            let v41074 : string = "}"
                                                                                            let v41075 : string = v41073 + v41074 
                                                                                            let v41076 : string = "true; v41072 " + v41075 + "); " + v41073 + " // rust.fix_closure'"
                                                                                            let v41077 : bool = Fable.Core.RustInterop.emitRustExpr () v41076 
                                                                                            let v41078 : string = "__future_init"
                                                                                            let v41079 : _ = Fable.Core.RustInterop.emitRustExpr () v41078 
                                                                                            let v41080 : string = "v41079"
                                                                                            let v41081 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v41080 
                                                                                            let v41082 : string = "v41081.await"
                                                                                            let v41083 : uint8 = Fable.Core.RustInterop.emitRustExpr () v41082 
                                                                                            let v41084 : US7 = method21(v41083)
                                                                                            let v41085 : string = v41073 + v41074 
                                                                                            let v41086 : string = "true; v41084 " + v41085 + "); " + v41073 + " // rust.fix_closure'"
                                                                                            let v41087 : bool = Fable.Core.RustInterop.emitRustExpr () v41086 
                                                                                            let v41088 : string = "__future_init"
                                                                                            let v41089 : _ = Fable.Core.RustInterop.emitRustExpr () v41088 
                                                                                            let v41090 : string = "v41089"
                                                                                            let v41091 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v41090 
                                                                                            v41091
                                                                                | US6_0(v37958) -> (* Ok *)
                                                                                    match v37958 with
                                                                                    | US4_1 -> (* None *)
                                                                                        let v37959 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                        let v37960 : bool = Fable.Core.RustInterop.emitRustExpr () v37959 
                                                                                        let v37961 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                        let v37962 : bool = Fable.Core.RustInterop.emitRustExpr () v37961 
                                                                                        let v37963 : uint8 = method33()
                                                                                        let v37964 : string = ""
                                                                                        let v37965 : string = "}"
                                                                                        let v37966 : string = v37964 + v37965 
                                                                                        let v37967 : string = "true; v37963 " + v37966 + "); " + v37964 + " // rust.fix_closure'"
                                                                                        let v37968 : bool = Fable.Core.RustInterop.emitRustExpr () v37967 
                                                                                        let v37969 : string = "__future_init"
                                                                                        let v37970 : _ = Fable.Core.RustInterop.emitRustExpr () v37969 
                                                                                        let v37971 : string = "v37970"
                                                                                        let v37972 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v37971 
                                                                                        let v37973 : string = "v37972.await"
                                                                                        let v37974 : uint8 = Fable.Core.RustInterop.emitRustExpr () v37973 
                                                                                        let v37975 : US7 = method23(v37974)
                                                                                        let v37976 : string = v37964 + v37965 
                                                                                        let v37977 : string = "true; v37975 " + v37976 + "); " + v37964 + " // rust.fix_closure'"
                                                                                        let v37978 : bool = Fable.Core.RustInterop.emitRustExpr () v37977 
                                                                                        let v37979 : string = "__future_init"
                                                                                        let v37980 : _ = Fable.Core.RustInterop.emitRustExpr () v37979 
                                                                                        let v37981 : string = "v37980"
                                                                                        let v37982 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v37981 
                                                                                        v37982
                                                                                    | US4_0(v37983) -> (* Some *)
                                                                                        let v37984 : unit = ()
                                                                                        let v37985 : (unit -> unit) = closure85(v37983)
                                                                                        let v37986 : unit = (fun () -> v37985 (); v37984) ()
                                                                                        let v39003 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                        let v39004 : bool = Fable.Core.RustInterop.emitRustExpr () v39003 
                                                                                        let v39005 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                        let v39006 : bool = Fable.Core.RustInterop.emitRustExpr () v39005 
                                                                                        let v39007 : uint8 = method33()
                                                                                        let v39008 : string = ""
                                                                                        let v39009 : string = "}"
                                                                                        let v39010 : string = v39008 + v39009 
                                                                                        let v39011 : string = "true; v39007 " + v39010 + "); " + v39008 + " // rust.fix_closure'"
                                                                                        let v39012 : bool = Fable.Core.RustInterop.emitRustExpr () v39011 
                                                                                        let v39013 : string = "__future_init"
                                                                                        let v39014 : _ = Fable.Core.RustInterop.emitRustExpr () v39013 
                                                                                        let v39015 : string = "v39014"
                                                                                        let v39016 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v39015 
                                                                                        let v39017 : string = "v39016.await"
                                                                                        let v39018 : uint8 = Fable.Core.RustInterop.emitRustExpr () v39017 
                                                                                        let v39019 : US7 = method21(v39018)
                                                                                        let v39020 : string = v39008 + v39009 
                                                                                        let v39021 : string = "true; v39019 " + v39020 + "); " + v39008 + " // rust.fix_closure'"
                                                                                        let v39022 : bool = Fable.Core.RustInterop.emitRustExpr () v39021 
                                                                                        let v39023 : string = "__future_init"
                                                                                        let v39024 : _ = Fable.Core.RustInterop.emitRustExpr () v39023 
                                                                                        let v39025 : string = "v39024"
                                                                                        let v39026 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v39025 
                                                                                        v39026
                                                                            | US6_0(v35893) -> (* Ok *)
                                                                                match v35893 with
                                                                                | US4_1 -> (* None *)
                                                                                    let v35894 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                    let v35895 : bool = Fable.Core.RustInterop.emitRustExpr () v35894 
                                                                                    let v35896 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                    let v35897 : bool = Fable.Core.RustInterop.emitRustExpr () v35896 
                                                                                    let v35898 : uint8 = method34()
                                                                                    let v35899 : string = ""
                                                                                    let v35900 : string = "}"
                                                                                    let v35901 : string = v35899 + v35900 
                                                                                    let v35902 : string = "true; v35898 " + v35901 + "); " + v35899 + " // rust.fix_closure'"
                                                                                    let v35903 : bool = Fable.Core.RustInterop.emitRustExpr () v35902 
                                                                                    let v35904 : string = "__future_init"
                                                                                    let v35905 : _ = Fable.Core.RustInterop.emitRustExpr () v35904 
                                                                                    let v35906 : string = "v35905"
                                                                                    let v35907 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v35906 
                                                                                    let v35908 : string = "v35907.await"
                                                                                    let v35909 : uint8 = Fable.Core.RustInterop.emitRustExpr () v35908 
                                                                                    let v35910 : US7 = method23(v35909)
                                                                                    let v35911 : string = v35899 + v35900 
                                                                                    let v35912 : string = "true; v35910 " + v35911 + "); " + v35899 + " // rust.fix_closure'"
                                                                                    let v35913 : bool = Fable.Core.RustInterop.emitRustExpr () v35912 
                                                                                    let v35914 : string = "__future_init"
                                                                                    let v35915 : _ = Fable.Core.RustInterop.emitRustExpr () v35914 
                                                                                    let v35916 : string = "v35915"
                                                                                    let v35917 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v35916 
                                                                                    v35917
                                                                                | US4_0(v35918) -> (* Some *)
                                                                                    let v35919 : unit = ()
                                                                                    let v35920 : (unit -> unit) = closure86(v35918)
                                                                                    let v35921 : unit = (fun () -> v35920 (); v35919) ()
                                                                                    let v36938 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                    let v36939 : bool = Fable.Core.RustInterop.emitRustExpr () v36938 
                                                                                    let v36940 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                    let v36941 : bool = Fable.Core.RustInterop.emitRustExpr () v36940 
                                                                                    let v36942 : uint8 = method34()
                                                                                    let v36943 : string = ""
                                                                                    let v36944 : string = "}"
                                                                                    let v36945 : string = v36943 + v36944 
                                                                                    let v36946 : string = "true; v36942 " + v36945 + "); " + v36943 + " // rust.fix_closure'"
                                                                                    let v36947 : bool = Fable.Core.RustInterop.emitRustExpr () v36946 
                                                                                    let v36948 : string = "__future_init"
                                                                                    let v36949 : _ = Fable.Core.RustInterop.emitRustExpr () v36948 
                                                                                    let v36950 : string = "v36949"
                                                                                    let v36951 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v36950 
                                                                                    let v36952 : string = "v36951.await"
                                                                                    let v36953 : uint8 = Fable.Core.RustInterop.emitRustExpr () v36952 
                                                                                    let v36954 : US7 = method21(v36953)
                                                                                    let v36955 : string = v36943 + v36944 
                                                                                    let v36956 : string = "true; v36954 " + v36955 + "); " + v36943 + " // rust.fix_closure'"
                                                                                    let v36957 : bool = Fable.Core.RustInterop.emitRustExpr () v36956 
                                                                                    let v36958 : string = "__future_init"
                                                                                    let v36959 : _ = Fable.Core.RustInterop.emitRustExpr () v36958 
                                                                                    let v36960 : string = "v36959"
                                                                                    let v36961 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v36960 
                                                                                    v36961
                                                                        | US6_0(v33828) -> (* Ok *)
                                                                            match v33828 with
                                                                            | US4_1 -> (* None *)
                                                                                let v33829 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                let v33830 : bool = Fable.Core.RustInterop.emitRustExpr () v33829 
                                                                                let v33831 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                let v33832 : bool = Fable.Core.RustInterop.emitRustExpr () v33831 
                                                                                let v33833 : uint8 = method35()
                                                                                let v33834 : string = ""
                                                                                let v33835 : string = "}"
                                                                                let v33836 : string = v33834 + v33835 
                                                                                let v33837 : string = "true; v33833 " + v33836 + "); " + v33834 + " // rust.fix_closure'"
                                                                                let v33838 : bool = Fable.Core.RustInterop.emitRustExpr () v33837 
                                                                                let v33839 : string = "__future_init"
                                                                                let v33840 : _ = Fable.Core.RustInterop.emitRustExpr () v33839 
                                                                                let v33841 : string = "v33840"
                                                                                let v33842 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v33841 
                                                                                let v33843 : string = "v33842.await"
                                                                                let v33844 : uint8 = Fable.Core.RustInterop.emitRustExpr () v33843 
                                                                                let v33845 : US7 = method23(v33844)
                                                                                let v33846 : string = v33834 + v33835 
                                                                                let v33847 : string = "true; v33845 " + v33846 + "); " + v33834 + " // rust.fix_closure'"
                                                                                let v33848 : bool = Fable.Core.RustInterop.emitRustExpr () v33847 
                                                                                let v33849 : string = "__future_init"
                                                                                let v33850 : _ = Fable.Core.RustInterop.emitRustExpr () v33849 
                                                                                let v33851 : string = "v33850"
                                                                                let v33852 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v33851 
                                                                                v33852
                                                                            | US4_0(v33853) -> (* Some *)
                                                                                let v33854 : unit = ()
                                                                                let v33855 : (unit -> unit) = closure87(v33853)
                                                                                let v33856 : unit = (fun () -> v33855 (); v33854) ()
                                                                                let v34873 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                let v34874 : bool = Fable.Core.RustInterop.emitRustExpr () v34873 
                                                                                let v34875 : string = "true; let __future_init = Box::pin(async move { //"
                                                                                let v34876 : bool = Fable.Core.RustInterop.emitRustExpr () v34875 
                                                                                let v34877 : uint8 = method35()
                                                                                let v34878 : string = ""
                                                                                let v34879 : string = "}"
                                                                                let v34880 : string = v34878 + v34879 
                                                                                let v34881 : string = "true; v34877 " + v34880 + "); " + v34878 + " // rust.fix_closure'"
                                                                                let v34882 : bool = Fable.Core.RustInterop.emitRustExpr () v34881 
                                                                                let v34883 : string = "__future_init"
                                                                                let v34884 : _ = Fable.Core.RustInterop.emitRustExpr () v34883 
                                                                                let v34885 : string = "v34884"
                                                                                let v34886 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v34885 
                                                                                let v34887 : string = "v34886.await"
                                                                                let v34888 : uint8 = Fable.Core.RustInterop.emitRustExpr () v34887 
                                                                                let v34889 : US7 = method21(v34888)
                                                                                let v34890 : string = v34878 + v34879 
                                                                                let v34891 : string = "true; v34889 " + v34890 + "); " + v34878 + " // rust.fix_closure'"
                                                                                let v34892 : bool = Fable.Core.RustInterop.emitRustExpr () v34891 
                                                                                let v34893 : string = "__future_init"
                                                                                let v34894 : _ = Fable.Core.RustInterop.emitRustExpr () v34893 
                                                                                let v34895 : string = "v34894"
                                                                                let v34896 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v34895 
                                                                                v34896
                                                                    | US6_0(v31763) -> (* Ok *)
                                                                        match v31763 with
                                                                        | US4_1 -> (* None *)
                                                                            let v31764 : string = "true; let __future_init = Box::pin(async move { //"
                                                                            let v31765 : bool = Fable.Core.RustInterop.emitRustExpr () v31764 
                                                                            let v31766 : string = "true; let __future_init = Box::pin(async move { //"
                                                                            let v31767 : bool = Fable.Core.RustInterop.emitRustExpr () v31766 
                                                                            let v31768 : uint8 = method36()
                                                                            let v31769 : string = ""
                                                                            let v31770 : string = "}"
                                                                            let v31771 : string = v31769 + v31770 
                                                                            let v31772 : string = "true; v31768 " + v31771 + "); " + v31769 + " // rust.fix_closure'"
                                                                            let v31773 : bool = Fable.Core.RustInterop.emitRustExpr () v31772 
                                                                            let v31774 : string = "__future_init"
                                                                            let v31775 : _ = Fable.Core.RustInterop.emitRustExpr () v31774 
                                                                            let v31776 : string = "v31775"
                                                                            let v31777 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v31776 
                                                                            let v31778 : string = "v31777.await"
                                                                            let v31779 : uint8 = Fable.Core.RustInterop.emitRustExpr () v31778 
                                                                            let v31780 : US7 = method23(v31779)
                                                                            let v31781 : string = v31769 + v31770 
                                                                            let v31782 : string = "true; v31780 " + v31781 + "); " + v31769 + " // rust.fix_closure'"
                                                                            let v31783 : bool = Fable.Core.RustInterop.emitRustExpr () v31782 
                                                                            let v31784 : string = "__future_init"
                                                                            let v31785 : _ = Fable.Core.RustInterop.emitRustExpr () v31784 
                                                                            let v31786 : string = "v31785"
                                                                            let v31787 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v31786 
                                                                            v31787
                                                                        | US4_0(v31788) -> (* Some *)
                                                                            let v31789 : unit = ()
                                                                            let v31790 : (unit -> unit) = closure88(v31788)
                                                                            let v31791 : unit = (fun () -> v31790 (); v31789) ()
                                                                            let v32808 : string = "true; let __future_init = Box::pin(async move { //"
                                                                            let v32809 : bool = Fable.Core.RustInterop.emitRustExpr () v32808 
                                                                            let v32810 : string = "true; let __future_init = Box::pin(async move { //"
                                                                            let v32811 : bool = Fable.Core.RustInterop.emitRustExpr () v32810 
                                                                            let v32812 : uint8 = method36()
                                                                            let v32813 : string = ""
                                                                            let v32814 : string = "}"
                                                                            let v32815 : string = v32813 + v32814 
                                                                            let v32816 : string = "true; v32812 " + v32815 + "); " + v32813 + " // rust.fix_closure'"
                                                                            let v32817 : bool = Fable.Core.RustInterop.emitRustExpr () v32816 
                                                                            let v32818 : string = "__future_init"
                                                                            let v32819 : _ = Fable.Core.RustInterop.emitRustExpr () v32818 
                                                                            let v32820 : string = "v32819"
                                                                            let v32821 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v32820 
                                                                            let v32822 : string = "v32821.await"
                                                                            let v32823 : uint8 = Fable.Core.RustInterop.emitRustExpr () v32822 
                                                                            let v32824 : US7 = method21(v32823)
                                                                            let v32825 : string = v32813 + v32814 
                                                                            let v32826 : string = "true; v32824 " + v32825 + "); " + v32813 + " // rust.fix_closure'"
                                                                            let v32827 : bool = Fable.Core.RustInterop.emitRustExpr () v32826 
                                                                            let v32828 : string = "__future_init"
                                                                            let v32829 : _ = Fable.Core.RustInterop.emitRustExpr () v32828 
                                                                            let v32830 : string = "v32829"
                                                                            let v32831 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v32830 
                                                                            v32831
                                                                | US6_0(v29698) -> (* Ok *)
                                                                    match v29698 with
                                                                    | US4_1 -> (* None *)
                                                                        let v29699 : string = "true; let __future_init = Box::pin(async move { //"
                                                                        let v29700 : bool = Fable.Core.RustInterop.emitRustExpr () v29699 
                                                                        let v29701 : string = "true; let __future_init = Box::pin(async move { //"
                                                                        let v29702 : bool = Fable.Core.RustInterop.emitRustExpr () v29701 
                                                                        let v29703 : uint8 = method37()
                                                                        let v29704 : string = ""
                                                                        let v29705 : string = "}"
                                                                        let v29706 : string = v29704 + v29705 
                                                                        let v29707 : string = "true; v29703 " + v29706 + "); " + v29704 + " // rust.fix_closure'"
                                                                        let v29708 : bool = Fable.Core.RustInterop.emitRustExpr () v29707 
                                                                        let v29709 : string = "__future_init"
                                                                        let v29710 : _ = Fable.Core.RustInterop.emitRustExpr () v29709 
                                                                        let v29711 : string = "v29710"
                                                                        let v29712 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v29711 
                                                                        let v29713 : string = "v29712.await"
                                                                        let v29714 : uint8 = Fable.Core.RustInterop.emitRustExpr () v29713 
                                                                        let v29715 : US7 = method23(v29714)
                                                                        let v29716 : string = v29704 + v29705 
                                                                        let v29717 : string = "true; v29715 " + v29716 + "); " + v29704 + " // rust.fix_closure'"
                                                                        let v29718 : bool = Fable.Core.RustInterop.emitRustExpr () v29717 
                                                                        let v29719 : string = "__future_init"
                                                                        let v29720 : _ = Fable.Core.RustInterop.emitRustExpr () v29719 
                                                                        let v29721 : string = "v29720"
                                                                        let v29722 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v29721 
                                                                        v29722
                                                                    | US4_0(v29723) -> (* Some *)
                                                                        let v29724 : unit = ()
                                                                        let v29725 : (unit -> unit) = closure89(v29723)
                                                                        let v29726 : unit = (fun () -> v29725 (); v29724) ()
                                                                        let v30743 : string = "true; let __future_init = Box::pin(async move { //"
                                                                        let v30744 : bool = Fable.Core.RustInterop.emitRustExpr () v30743 
                                                                        let v30745 : string = "true; let __future_init = Box::pin(async move { //"
                                                                        let v30746 : bool = Fable.Core.RustInterop.emitRustExpr () v30745 
                                                                        let v30747 : uint8 = method37()
                                                                        let v30748 : string = ""
                                                                        let v30749 : string = "}"
                                                                        let v30750 : string = v30748 + v30749 
                                                                        let v30751 : string = "true; v30747 " + v30750 + "); " + v30748 + " // rust.fix_closure'"
                                                                        let v30752 : bool = Fable.Core.RustInterop.emitRustExpr () v30751 
                                                                        let v30753 : string = "__future_init"
                                                                        let v30754 : _ = Fable.Core.RustInterop.emitRustExpr () v30753 
                                                                        let v30755 : string = "v30754"
                                                                        let v30756 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v30755 
                                                                        let v30757 : string = "v30756.await"
                                                                        let v30758 : uint8 = Fable.Core.RustInterop.emitRustExpr () v30757 
                                                                        let v30759 : US7 = method21(v30758)
                                                                        let v30760 : string = v30748 + v30749 
                                                                        let v30761 : string = "true; v30759 " + v30760 + "); " + v30748 + " // rust.fix_closure'"
                                                                        let v30762 : bool = Fable.Core.RustInterop.emitRustExpr () v30761 
                                                                        let v30763 : string = "__future_init"
                                                                        let v30764 : _ = Fable.Core.RustInterop.emitRustExpr () v30763 
                                                                        let v30765 : string = "v30764"
                                                                        let v30766 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v30765 
                                                                        v30766
                                                            | US6_0(v27633) -> (* Ok *)
                                                                match v27633 with
                                                                | US4_1 -> (* None *)
                                                                    let v27634 : string = "true; let __future_init = Box::pin(async move { //"
                                                                    let v27635 : bool = Fable.Core.RustInterop.emitRustExpr () v27634 
                                                                    let v27636 : string = "true; let __future_init = Box::pin(async move { //"
                                                                    let v27637 : bool = Fable.Core.RustInterop.emitRustExpr () v27636 
                                                                    let v27638 : uint8 = method38()
                                                                    let v27639 : string = ""
                                                                    let v27640 : string = "}"
                                                                    let v27641 : string = v27639 + v27640 
                                                                    let v27642 : string = "true; v27638 " + v27641 + "); " + v27639 + " // rust.fix_closure'"
                                                                    let v27643 : bool = Fable.Core.RustInterop.emitRustExpr () v27642 
                                                                    let v27644 : string = "__future_init"
                                                                    let v27645 : _ = Fable.Core.RustInterop.emitRustExpr () v27644 
                                                                    let v27646 : string = "v27645"
                                                                    let v27647 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v27646 
                                                                    let v27648 : string = "v27647.await"
                                                                    let v27649 : uint8 = Fable.Core.RustInterop.emitRustExpr () v27648 
                                                                    let v27650 : US7 = method23(v27649)
                                                                    let v27651 : string = v27639 + v27640 
                                                                    let v27652 : string = "true; v27650 " + v27651 + "); " + v27639 + " // rust.fix_closure'"
                                                                    let v27653 : bool = Fable.Core.RustInterop.emitRustExpr () v27652 
                                                                    let v27654 : string = "__future_init"
                                                                    let v27655 : _ = Fable.Core.RustInterop.emitRustExpr () v27654 
                                                                    let v27656 : string = "v27655"
                                                                    let v27657 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v27656 
                                                                    v27657
                                                                | US4_0(v27658) -> (* Some *)
                                                                    let v27659 : unit = ()
                                                                    let v27660 : (unit -> unit) = closure90(v27658)
                                                                    let v27661 : unit = (fun () -> v27660 (); v27659) ()
                                                                    let v28678 : string = "true; let __future_init = Box::pin(async move { //"
                                                                    let v28679 : bool = Fable.Core.RustInterop.emitRustExpr () v28678 
                                                                    let v28680 : string = "true; let __future_init = Box::pin(async move { //"
                                                                    let v28681 : bool = Fable.Core.RustInterop.emitRustExpr () v28680 
                                                                    let v28682 : uint8 = method38()
                                                                    let v28683 : string = ""
                                                                    let v28684 : string = "}"
                                                                    let v28685 : string = v28683 + v28684 
                                                                    let v28686 : string = "true; v28682 " + v28685 + "); " + v28683 + " // rust.fix_closure'"
                                                                    let v28687 : bool = Fable.Core.RustInterop.emitRustExpr () v28686 
                                                                    let v28688 : string = "__future_init"
                                                                    let v28689 : _ = Fable.Core.RustInterop.emitRustExpr () v28688 
                                                                    let v28690 : string = "v28689"
                                                                    let v28691 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v28690 
                                                                    let v28692 : string = "v28691.await"
                                                                    let v28693 : uint8 = Fable.Core.RustInterop.emitRustExpr () v28692 
                                                                    let v28694 : US7 = method21(v28693)
                                                                    let v28695 : string = v28683 + v28684 
                                                                    let v28696 : string = "true; v28694 " + v28695 + "); " + v28683 + " // rust.fix_closure'"
                                                                    let v28697 : bool = Fable.Core.RustInterop.emitRustExpr () v28696 
                                                                    let v28698 : string = "__future_init"
                                                                    let v28699 : _ = Fable.Core.RustInterop.emitRustExpr () v28698 
                                                                    let v28700 : string = "v28699"
                                                                    let v28701 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v28700 
                                                                    v28701
                                                        | US6_0(v25568) -> (* Ok *)
                                                            match v25568 with
                                                            | US4_1 -> (* None *)
                                                                let v25569 : string = "true; let __future_init = Box::pin(async move { //"
                                                                let v25570 : bool = Fable.Core.RustInterop.emitRustExpr () v25569 
                                                                let v25571 : string = "true; let __future_init = Box::pin(async move { //"
                                                                let v25572 : bool = Fable.Core.RustInterop.emitRustExpr () v25571 
                                                                let v25573 : uint8 = method39()
                                                                let v25574 : string = ""
                                                                let v25575 : string = "}"
                                                                let v25576 : string = v25574 + v25575 
                                                                let v25577 : string = "true; v25573 " + v25576 + "); " + v25574 + " // rust.fix_closure'"
                                                                let v25578 : bool = Fable.Core.RustInterop.emitRustExpr () v25577 
                                                                let v25579 : string = "__future_init"
                                                                let v25580 : _ = Fable.Core.RustInterop.emitRustExpr () v25579 
                                                                let v25581 : string = "v25580"
                                                                let v25582 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v25581 
                                                                let v25583 : string = "v25582.await"
                                                                let v25584 : uint8 = Fable.Core.RustInterop.emitRustExpr () v25583 
                                                                let v25585 : US7 = method23(v25584)
                                                                let v25586 : string = v25574 + v25575 
                                                                let v25587 : string = "true; v25585 " + v25586 + "); " + v25574 + " // rust.fix_closure'"
                                                                let v25588 : bool = Fable.Core.RustInterop.emitRustExpr () v25587 
                                                                let v25589 : string = "__future_init"
                                                                let v25590 : _ = Fable.Core.RustInterop.emitRustExpr () v25589 
                                                                let v25591 : string = "v25590"
                                                                let v25592 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v25591 
                                                                v25592
                                                            | US4_0(v25593) -> (* Some *)
                                                                let v25594 : unit = ()
                                                                let v25595 : (unit -> unit) = closure91(v25593)
                                                                let v25596 : unit = (fun () -> v25595 (); v25594) ()
                                                                let v26613 : string = "true; let __future_init = Box::pin(async move { //"
                                                                let v26614 : bool = Fable.Core.RustInterop.emitRustExpr () v26613 
                                                                let v26615 : string = "true; let __future_init = Box::pin(async move { //"
                                                                let v26616 : bool = Fable.Core.RustInterop.emitRustExpr () v26615 
                                                                let v26617 : uint8 = method39()
                                                                let v26618 : string = ""
                                                                let v26619 : string = "}"
                                                                let v26620 : string = v26618 + v26619 
                                                                let v26621 : string = "true; v26617 " + v26620 + "); " + v26618 + " // rust.fix_closure'"
                                                                let v26622 : bool = Fable.Core.RustInterop.emitRustExpr () v26621 
                                                                let v26623 : string = "__future_init"
                                                                let v26624 : _ = Fable.Core.RustInterop.emitRustExpr () v26623 
                                                                let v26625 : string = "v26624"
                                                                let v26626 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v26625 
                                                                let v26627 : string = "v26626.await"
                                                                let v26628 : uint8 = Fable.Core.RustInterop.emitRustExpr () v26627 
                                                                let v26629 : US7 = method21(v26628)
                                                                let v26630 : string = v26618 + v26619 
                                                                let v26631 : string = "true; v26629 " + v26630 + "); " + v26618 + " // rust.fix_closure'"
                                                                let v26632 : bool = Fable.Core.RustInterop.emitRustExpr () v26631 
                                                                let v26633 : string = "__future_init"
                                                                let v26634 : _ = Fable.Core.RustInterop.emitRustExpr () v26633 
                                                                let v26635 : string = "v26634"
                                                                let v26636 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v26635 
                                                                v26636
                                                    | US6_0(v23503) -> (* Ok *)
                                                        match v23503 with
                                                        | US4_1 -> (* None *)
                                                            let v23504 : string = "true; let __future_init = Box::pin(async move { //"
                                                            let v23505 : bool = Fable.Core.RustInterop.emitRustExpr () v23504 
                                                            let v23506 : string = "true; let __future_init = Box::pin(async move { //"
                                                            let v23507 : bool = Fable.Core.RustInterop.emitRustExpr () v23506 
                                                            let v23508 : uint8 = method40()
                                                            let v23509 : string = ""
                                                            let v23510 : string = "}"
                                                            let v23511 : string = v23509 + v23510 
                                                            let v23512 : string = "true; v23508 " + v23511 + "); " + v23509 + " // rust.fix_closure'"
                                                            let v23513 : bool = Fable.Core.RustInterop.emitRustExpr () v23512 
                                                            let v23514 : string = "__future_init"
                                                            let v23515 : _ = Fable.Core.RustInterop.emitRustExpr () v23514 
                                                            let v23516 : string = "v23515"
                                                            let v23517 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v23516 
                                                            let v23518 : string = "v23517.await"
                                                            let v23519 : uint8 = Fable.Core.RustInterop.emitRustExpr () v23518 
                                                            let v23520 : US7 = method23(v23519)
                                                            let v23521 : string = v23509 + v23510 
                                                            let v23522 : string = "true; v23520 " + v23521 + "); " + v23509 + " // rust.fix_closure'"
                                                            let v23523 : bool = Fable.Core.RustInterop.emitRustExpr () v23522 
                                                            let v23524 : string = "__future_init"
                                                            let v23525 : _ = Fable.Core.RustInterop.emitRustExpr () v23524 
                                                            let v23526 : string = "v23525"
                                                            let v23527 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v23526 
                                                            v23527
                                                        | US4_0(v23528) -> (* Some *)
                                                            let v23529 : unit = ()
                                                            let v23530 : (unit -> unit) = closure92(v23528)
                                                            let v23531 : unit = (fun () -> v23530 (); v23529) ()
                                                            let v24548 : string = "true; let __future_init = Box::pin(async move { //"
                                                            let v24549 : bool = Fable.Core.RustInterop.emitRustExpr () v24548 
                                                            let v24550 : string = "true; let __future_init = Box::pin(async move { //"
                                                            let v24551 : bool = Fable.Core.RustInterop.emitRustExpr () v24550 
                                                            let v24552 : uint8 = method40()
                                                            let v24553 : string = ""
                                                            let v24554 : string = "}"
                                                            let v24555 : string = v24553 + v24554 
                                                            let v24556 : string = "true; v24552 " + v24555 + "); " + v24553 + " // rust.fix_closure'"
                                                            let v24557 : bool = Fable.Core.RustInterop.emitRustExpr () v24556 
                                                            let v24558 : string = "__future_init"
                                                            let v24559 : _ = Fable.Core.RustInterop.emitRustExpr () v24558 
                                                            let v24560 : string = "v24559"
                                                            let v24561 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v24560 
                                                            let v24562 : string = "v24561.await"
                                                            let v24563 : uint8 = Fable.Core.RustInterop.emitRustExpr () v24562 
                                                            let v24564 : US7 = method21(v24563)
                                                            let v24565 : string = v24553 + v24554 
                                                            let v24566 : string = "true; v24564 " + v24565 + "); " + v24553 + " // rust.fix_closure'"
                                                            let v24567 : bool = Fable.Core.RustInterop.emitRustExpr () v24566 
                                                            let v24568 : string = "__future_init"
                                                            let v24569 : _ = Fable.Core.RustInterop.emitRustExpr () v24568 
                                                            let v24570 : string = "v24569"
                                                            let v24571 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v24570 
                                                            v24571
                                                | US6_0(v21438) -> (* Ok *)
                                                    match v21438 with
                                                    | US4_1 -> (* None *)
                                                        let v21439 : string = "true; let __future_init = Box::pin(async move { //"
                                                        let v21440 : bool = Fable.Core.RustInterop.emitRustExpr () v21439 
                                                        let v21441 : string = "true; let __future_init = Box::pin(async move { //"
                                                        let v21442 : bool = Fable.Core.RustInterop.emitRustExpr () v21441 
                                                        let v21443 : uint8 = method41()
                                                        let v21444 : string = ""
                                                        let v21445 : string = "}"
                                                        let v21446 : string = v21444 + v21445 
                                                        let v21447 : string = "true; v21443 " + v21446 + "); " + v21444 + " // rust.fix_closure'"
                                                        let v21448 : bool = Fable.Core.RustInterop.emitRustExpr () v21447 
                                                        let v21449 : string = "__future_init"
                                                        let v21450 : _ = Fable.Core.RustInterop.emitRustExpr () v21449 
                                                        let v21451 : string = "v21450"
                                                        let v21452 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v21451 
                                                        let v21453 : string = "v21452.await"
                                                        let v21454 : uint8 = Fable.Core.RustInterop.emitRustExpr () v21453 
                                                        let v21455 : US7 = method23(v21454)
                                                        let v21456 : string = v21444 + v21445 
                                                        let v21457 : string = "true; v21455 " + v21456 + "); " + v21444 + " // rust.fix_closure'"
                                                        let v21458 : bool = Fable.Core.RustInterop.emitRustExpr () v21457 
                                                        let v21459 : string = "__future_init"
                                                        let v21460 : _ = Fable.Core.RustInterop.emitRustExpr () v21459 
                                                        let v21461 : string = "v21460"
                                                        let v21462 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v21461 
                                                        v21462
                                                    | US4_0(v21463) -> (* Some *)
                                                        let v21464 : unit = ()
                                                        let v21465 : (unit -> unit) = closure93(v21463)
                                                        let v21466 : unit = (fun () -> v21465 (); v21464) ()
                                                        let v22483 : string = "true; let __future_init = Box::pin(async move { //"
                                                        let v22484 : bool = Fable.Core.RustInterop.emitRustExpr () v22483 
                                                        let v22485 : string = "true; let __future_init = Box::pin(async move { //"
                                                        let v22486 : bool = Fable.Core.RustInterop.emitRustExpr () v22485 
                                                        let v22487 : uint8 = method41()
                                                        let v22488 : string = ""
                                                        let v22489 : string = "}"
                                                        let v22490 : string = v22488 + v22489 
                                                        let v22491 : string = "true; v22487 " + v22490 + "); " + v22488 + " // rust.fix_closure'"
                                                        let v22492 : bool = Fable.Core.RustInterop.emitRustExpr () v22491 
                                                        let v22493 : string = "__future_init"
                                                        let v22494 : _ = Fable.Core.RustInterop.emitRustExpr () v22493 
                                                        let v22495 : string = "v22494"
                                                        let v22496 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v22495 
                                                        let v22497 : string = "v22496.await"
                                                        let v22498 : uint8 = Fable.Core.RustInterop.emitRustExpr () v22497 
                                                        let v22499 : US7 = method21(v22498)
                                                        let v22500 : string = v22488 + v22489 
                                                        let v22501 : string = "true; v22499 " + v22500 + "); " + v22488 + " // rust.fix_closure'"
                                                        let v22502 : bool = Fable.Core.RustInterop.emitRustExpr () v22501 
                                                        let v22503 : string = "__future_init"
                                                        let v22504 : _ = Fable.Core.RustInterop.emitRustExpr () v22503 
                                                        let v22505 : string = "v22504"
                                                        let v22506 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v22505 
                                                        v22506
                                            | US6_0(v19373) -> (* Ok *)
                                                match v19373 with
                                                | US4_1 -> (* None *)
                                                    let v19374 : string = "true; let __future_init = Box::pin(async move { //"
                                                    let v19375 : bool = Fable.Core.RustInterop.emitRustExpr () v19374 
                                                    let v19376 : string = "true; let __future_init = Box::pin(async move { //"
                                                    let v19377 : bool = Fable.Core.RustInterop.emitRustExpr () v19376 
                                                    let v19378 : uint8 = method42()
                                                    let v19379 : string = ""
                                                    let v19380 : string = "}"
                                                    let v19381 : string = v19379 + v19380 
                                                    let v19382 : string = "true; v19378 " + v19381 + "); " + v19379 + " // rust.fix_closure'"
                                                    let v19383 : bool = Fable.Core.RustInterop.emitRustExpr () v19382 
                                                    let v19384 : string = "__future_init"
                                                    let v19385 : _ = Fable.Core.RustInterop.emitRustExpr () v19384 
                                                    let v19386 : string = "v19385"
                                                    let v19387 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v19386 
                                                    let v19388 : string = "v19387.await"
                                                    let v19389 : uint8 = Fable.Core.RustInterop.emitRustExpr () v19388 
                                                    let v19390 : US7 = method23(v19389)
                                                    let v19391 : string = v19379 + v19380 
                                                    let v19392 : string = "true; v19390 " + v19391 + "); " + v19379 + " // rust.fix_closure'"
                                                    let v19393 : bool = Fable.Core.RustInterop.emitRustExpr () v19392 
                                                    let v19394 : string = "__future_init"
                                                    let v19395 : _ = Fable.Core.RustInterop.emitRustExpr () v19394 
                                                    let v19396 : string = "v19395"
                                                    let v19397 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v19396 
                                                    v19397
                                                | US4_0(v19398) -> (* Some *)
                                                    let v19399 : unit = ()
                                                    let v19400 : (unit -> unit) = closure94(v19398)
                                                    let v19401 : unit = (fun () -> v19400 (); v19399) ()
                                                    let v20418 : string = "true; let __future_init = Box::pin(async move { //"
                                                    let v20419 : bool = Fable.Core.RustInterop.emitRustExpr () v20418 
                                                    let v20420 : string = "true; let __future_init = Box::pin(async move { //"
                                                    let v20421 : bool = Fable.Core.RustInterop.emitRustExpr () v20420 
                                                    let v20422 : uint8 = method42()
                                                    let v20423 : string = ""
                                                    let v20424 : string = "}"
                                                    let v20425 : string = v20423 + v20424 
                                                    let v20426 : string = "true; v20422 " + v20425 + "); " + v20423 + " // rust.fix_closure'"
                                                    let v20427 : bool = Fable.Core.RustInterop.emitRustExpr () v20426 
                                                    let v20428 : string = "__future_init"
                                                    let v20429 : _ = Fable.Core.RustInterop.emitRustExpr () v20428 
                                                    let v20430 : string = "v20429"
                                                    let v20431 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v20430 
                                                    let v20432 : string = "v20431.await"
                                                    let v20433 : uint8 = Fable.Core.RustInterop.emitRustExpr () v20432 
                                                    let v20434 : US7 = method21(v20433)
                                                    let v20435 : string = v20423 + v20424 
                                                    let v20436 : string = "true; v20434 " + v20435 + "); " + v20423 + " // rust.fix_closure'"
                                                    let v20437 : bool = Fable.Core.RustInterop.emitRustExpr () v20436 
                                                    let v20438 : string = "__future_init"
                                                    let v20439 : _ = Fable.Core.RustInterop.emitRustExpr () v20438 
                                                    let v20440 : string = "v20439"
                                                    let v20441 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v20440 
                                                    v20441
                                        | US6_0(v17308) -> (* Ok *)
                                            match v17308 with
                                            | US4_1 -> (* None *)
                                                let v17309 : string = "true; let __future_init = Box::pin(async move { //"
                                                let v17310 : bool = Fable.Core.RustInterop.emitRustExpr () v17309 
                                                let v17311 : string = "true; let __future_init = Box::pin(async move { //"
                                                let v17312 : bool = Fable.Core.RustInterop.emitRustExpr () v17311 
                                                let v17313 : uint8 = method43()
                                                let v17314 : string = ""
                                                let v17315 : string = "}"
                                                let v17316 : string = v17314 + v17315 
                                                let v17317 : string = "true; v17313 " + v17316 + "); " + v17314 + " // rust.fix_closure'"
                                                let v17318 : bool = Fable.Core.RustInterop.emitRustExpr () v17317 
                                                let v17319 : string = "__future_init"
                                                let v17320 : _ = Fable.Core.RustInterop.emitRustExpr () v17319 
                                                let v17321 : string = "v17320"
                                                let v17322 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v17321 
                                                let v17323 : string = "v17322.await"
                                                let v17324 : uint8 = Fable.Core.RustInterop.emitRustExpr () v17323 
                                                let v17325 : US7 = method23(v17324)
                                                let v17326 : string = v17314 + v17315 
                                                let v17327 : string = "true; v17325 " + v17326 + "); " + v17314 + " // rust.fix_closure'"
                                                let v17328 : bool = Fable.Core.RustInterop.emitRustExpr () v17327 
                                                let v17329 : string = "__future_init"
                                                let v17330 : _ = Fable.Core.RustInterop.emitRustExpr () v17329 
                                                let v17331 : string = "v17330"
                                                let v17332 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v17331 
                                                v17332
                                            | US4_0(v17333) -> (* Some *)
                                                let v17334 : unit = ()
                                                let v17335 : (unit -> unit) = closure95(v17333)
                                                let v17336 : unit = (fun () -> v17335 (); v17334) ()
                                                let v18353 : string = "true; let __future_init = Box::pin(async move { //"
                                                let v18354 : bool = Fable.Core.RustInterop.emitRustExpr () v18353 
                                                let v18355 : string = "true; let __future_init = Box::pin(async move { //"
                                                let v18356 : bool = Fable.Core.RustInterop.emitRustExpr () v18355 
                                                let v18357 : uint8 = method43()
                                                let v18358 : string = ""
                                                let v18359 : string = "}"
                                                let v18360 : string = v18358 + v18359 
                                                let v18361 : string = "true; v18357 " + v18360 + "); " + v18358 + " // rust.fix_closure'"
                                                let v18362 : bool = Fable.Core.RustInterop.emitRustExpr () v18361 
                                                let v18363 : string = "__future_init"
                                                let v18364 : _ = Fable.Core.RustInterop.emitRustExpr () v18363 
                                                let v18365 : string = "v18364"
                                                let v18366 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v18365 
                                                let v18367 : string = "v18366.await"
                                                let v18368 : uint8 = Fable.Core.RustInterop.emitRustExpr () v18367 
                                                let v18369 : US7 = method21(v18368)
                                                let v18370 : string = v18358 + v18359 
                                                let v18371 : string = "true; v18369 " + v18370 + "); " + v18358 + " // rust.fix_closure'"
                                                let v18372 : bool = Fable.Core.RustInterop.emitRustExpr () v18371 
                                                let v18373 : string = "__future_init"
                                                let v18374 : _ = Fable.Core.RustInterop.emitRustExpr () v18373 
                                                let v18375 : string = "v18374"
                                                let v18376 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v18375 
                                                v18376
                                    | US6_0(v15243) -> (* Ok *)
                                        match v15243 with
                                        | US4_1 -> (* None *)
                                            let v15244 : string = "true; let __future_init = Box::pin(async move { //"
                                            let v15245 : bool = Fable.Core.RustInterop.emitRustExpr () v15244 
                                            let v15246 : string = "true; let __future_init = Box::pin(async move { //"
                                            let v15247 : bool = Fable.Core.RustInterop.emitRustExpr () v15246 
                                            let v15248 : uint8 = method44()
                                            let v15249 : string = ""
                                            let v15250 : string = "}"
                                            let v15251 : string = v15249 + v15250 
                                            let v15252 : string = "true; v15248 " + v15251 + "); " + v15249 + " // rust.fix_closure'"
                                            let v15253 : bool = Fable.Core.RustInterop.emitRustExpr () v15252 
                                            let v15254 : string = "__future_init"
                                            let v15255 : _ = Fable.Core.RustInterop.emitRustExpr () v15254 
                                            let v15256 : string = "v15255"
                                            let v15257 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v15256 
                                            let v15258 : string = "v15257.await"
                                            let v15259 : uint8 = Fable.Core.RustInterop.emitRustExpr () v15258 
                                            let v15260 : US7 = method23(v15259)
                                            let v15261 : string = v15249 + v15250 
                                            let v15262 : string = "true; v15260 " + v15261 + "); " + v15249 + " // rust.fix_closure'"
                                            let v15263 : bool = Fable.Core.RustInterop.emitRustExpr () v15262 
                                            let v15264 : string = "__future_init"
                                            let v15265 : _ = Fable.Core.RustInterop.emitRustExpr () v15264 
                                            let v15266 : string = "v15265"
                                            let v15267 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v15266 
                                            v15267
                                        | US4_0(v15268) -> (* Some *)
                                            let v15269 : unit = ()
                                            let v15270 : (unit -> unit) = closure96(v15268)
                                            let v15271 : unit = (fun () -> v15270 (); v15269) ()
                                            let v16288 : string = "true; let __future_init = Box::pin(async move { //"
                                            let v16289 : bool = Fable.Core.RustInterop.emitRustExpr () v16288 
                                            let v16290 : string = "true; let __future_init = Box::pin(async move { //"
                                            let v16291 : bool = Fable.Core.RustInterop.emitRustExpr () v16290 
                                            let v16292 : uint8 = method44()
                                            let v16293 : string = ""
                                            let v16294 : string = "}"
                                            let v16295 : string = v16293 + v16294 
                                            let v16296 : string = "true; v16292 " + v16295 + "); " + v16293 + " // rust.fix_closure'"
                                            let v16297 : bool = Fable.Core.RustInterop.emitRustExpr () v16296 
                                            let v16298 : string = "__future_init"
                                            let v16299 : _ = Fable.Core.RustInterop.emitRustExpr () v16298 
                                            let v16300 : string = "v16299"
                                            let v16301 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v16300 
                                            let v16302 : string = "v16301.await"
                                            let v16303 : uint8 = Fable.Core.RustInterop.emitRustExpr () v16302 
                                            let v16304 : US7 = method21(v16303)
                                            let v16305 : string = v16293 + v16294 
                                            let v16306 : string = "true; v16304 " + v16305 + "); " + v16293 + " // rust.fix_closure'"
                                            let v16307 : bool = Fable.Core.RustInterop.emitRustExpr () v16306 
                                            let v16308 : string = "__future_init"
                                            let v16309 : _ = Fable.Core.RustInterop.emitRustExpr () v16308 
                                            let v16310 : string = "v16309"
                                            let v16311 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v16310 
                                            v16311
                                | US6_0(v13178) -> (* Ok *)
                                    match v13178 with
                                    | US4_1 -> (* None *)
                                        let v13179 : string = "true; let __future_init = Box::pin(async move { //"
                                        let v13180 : bool = Fable.Core.RustInterop.emitRustExpr () v13179 
                                        let v13181 : string = "true; let __future_init = Box::pin(async move { //"
                                        let v13182 : bool = Fable.Core.RustInterop.emitRustExpr () v13181 
                                        let v13183 : uint8 = method45()
                                        let v13184 : string = ""
                                        let v13185 : string = "}"
                                        let v13186 : string = v13184 + v13185 
                                        let v13187 : string = "true; v13183 " + v13186 + "); " + v13184 + " // rust.fix_closure'"
                                        let v13188 : bool = Fable.Core.RustInterop.emitRustExpr () v13187 
                                        let v13189 : string = "__future_init"
                                        let v13190 : _ = Fable.Core.RustInterop.emitRustExpr () v13189 
                                        let v13191 : string = "v13190"
                                        let v13192 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v13191 
                                        let v13193 : string = "v13192.await"
                                        let v13194 : uint8 = Fable.Core.RustInterop.emitRustExpr () v13193 
                                        let v13195 : US7 = method23(v13194)
                                        let v13196 : string = v13184 + v13185 
                                        let v13197 : string = "true; v13195 " + v13196 + "); " + v13184 + " // rust.fix_closure'"
                                        let v13198 : bool = Fable.Core.RustInterop.emitRustExpr () v13197 
                                        let v13199 : string = "__future_init"
                                        let v13200 : _ = Fable.Core.RustInterop.emitRustExpr () v13199 
                                        let v13201 : string = "v13200"
                                        let v13202 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v13201 
                                        v13202
                                    | US4_0(v13203) -> (* Some *)
                                        let v13204 : unit = ()
                                        let v13205 : (unit -> unit) = closure97(v13203)
                                        let v13206 : unit = (fun () -> v13205 (); v13204) ()
                                        let v14223 : string = "true; let __future_init = Box::pin(async move { //"
                                        let v14224 : bool = Fable.Core.RustInterop.emitRustExpr () v14223 
                                        let v14225 : string = "true; let __future_init = Box::pin(async move { //"
                                        let v14226 : bool = Fable.Core.RustInterop.emitRustExpr () v14225 
                                        let v14227 : uint8 = method45()
                                        let v14228 : string = ""
                                        let v14229 : string = "}"
                                        let v14230 : string = v14228 + v14229 
                                        let v14231 : string = "true; v14227 " + v14230 + "); " + v14228 + " // rust.fix_closure'"
                                        let v14232 : bool = Fable.Core.RustInterop.emitRustExpr () v14231 
                                        let v14233 : string = "__future_init"
                                        let v14234 : _ = Fable.Core.RustInterop.emitRustExpr () v14233 
                                        let v14235 : string = "v14234"
                                        let v14236 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v14235 
                                        let v14237 : string = "v14236.await"
                                        let v14238 : uint8 = Fable.Core.RustInterop.emitRustExpr () v14237 
                                        let v14239 : US7 = method21(v14238)
                                        let v14240 : string = v14228 + v14229 
                                        let v14241 : string = "true; v14239 " + v14240 + "); " + v14228 + " // rust.fix_closure'"
                                        let v14242 : bool = Fable.Core.RustInterop.emitRustExpr () v14241 
                                        let v14243 : string = "__future_init"
                                        let v14244 : _ = Fable.Core.RustInterop.emitRustExpr () v14243 
                                        let v14245 : string = "v14244"
                                        let v14246 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v14245 
                                        v14246
                            | US6_0(v11113) -> (* Ok *)
                                match v11113 with
                                | US4_1 -> (* None *)
                                    let v11114 : string = "true; let __future_init = Box::pin(async move { //"
                                    let v11115 : bool = Fable.Core.RustInterop.emitRustExpr () v11114 
                                    let v11116 : string = "true; let __future_init = Box::pin(async move { //"
                                    let v11117 : bool = Fable.Core.RustInterop.emitRustExpr () v11116 
                                    let v11118 : uint8 = method46()
                                    let v11119 : string = ""
                                    let v11120 : string = "}"
                                    let v11121 : string = v11119 + v11120 
                                    let v11122 : string = "true; v11118 " + v11121 + "); " + v11119 + " // rust.fix_closure'"
                                    let v11123 : bool = Fable.Core.RustInterop.emitRustExpr () v11122 
                                    let v11124 : string = "__future_init"
                                    let v11125 : _ = Fable.Core.RustInterop.emitRustExpr () v11124 
                                    let v11126 : string = "v11125"
                                    let v11127 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v11126 
                                    let v11128 : string = "v11127.await"
                                    let v11129 : uint8 = Fable.Core.RustInterop.emitRustExpr () v11128 
                                    let v11130 : US7 = method23(v11129)
                                    let v11131 : string = v11119 + v11120 
                                    let v11132 : string = "true; v11130 " + v11131 + "); " + v11119 + " // rust.fix_closure'"
                                    let v11133 : bool = Fable.Core.RustInterop.emitRustExpr () v11132 
                                    let v11134 : string = "__future_init"
                                    let v11135 : _ = Fable.Core.RustInterop.emitRustExpr () v11134 
                                    let v11136 : string = "v11135"
                                    let v11137 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v11136 
                                    v11137
                                | US4_0(v11138) -> (* Some *)
                                    let v11139 : unit = ()
                                    let v11140 : (unit -> unit) = closure98(v11138)
                                    let v11141 : unit = (fun () -> v11140 (); v11139) ()
                                    let v12158 : string = "true; let __future_init = Box::pin(async move { //"
                                    let v12159 : bool = Fable.Core.RustInterop.emitRustExpr () v12158 
                                    let v12160 : string = "true; let __future_init = Box::pin(async move { //"
                                    let v12161 : bool = Fable.Core.RustInterop.emitRustExpr () v12160 
                                    let v12162 : uint8 = method46()
                                    let v12163 : string = ""
                                    let v12164 : string = "}"
                                    let v12165 : string = v12163 + v12164 
                                    let v12166 : string = "true; v12162 " + v12165 + "); " + v12163 + " // rust.fix_closure'"
                                    let v12167 : bool = Fable.Core.RustInterop.emitRustExpr () v12166 
                                    let v12168 : string = "__future_init"
                                    let v12169 : _ = Fable.Core.RustInterop.emitRustExpr () v12168 
                                    let v12170 : string = "v12169"
                                    let v12171 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v12170 
                                    let v12172 : string = "v12171.await"
                                    let v12173 : uint8 = Fable.Core.RustInterop.emitRustExpr () v12172 
                                    let v12174 : US7 = method21(v12173)
                                    let v12175 : string = v12163 + v12164 
                                    let v12176 : string = "true; v12174 " + v12175 + "); " + v12163 + " // rust.fix_closure'"
                                    let v12177 : bool = Fable.Core.RustInterop.emitRustExpr () v12176 
                                    let v12178 : string = "__future_init"
                                    let v12179 : _ = Fable.Core.RustInterop.emitRustExpr () v12178 
                                    let v12180 : string = "v12179"
                                    let v12181 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v12180 
                                    v12181
                        | US6_0(v9048) -> (* Ok *)
                            match v9048 with
                            | US4_1 -> (* None *)
                                let v9049 : string = "true; let __future_init = Box::pin(async move { //"
                                let v9050 : bool = Fable.Core.RustInterop.emitRustExpr () v9049 
                                let v9051 : string = "true; let __future_init = Box::pin(async move { //"
                                let v9052 : bool = Fable.Core.RustInterop.emitRustExpr () v9051 
                                let v9053 : uint8 = method47()
                                let v9054 : string = ""
                                let v9055 : string = "}"
                                let v9056 : string = v9054 + v9055 
                                let v9057 : string = "true; v9053 " + v9056 + "); " + v9054 + " // rust.fix_closure'"
                                let v9058 : bool = Fable.Core.RustInterop.emitRustExpr () v9057 
                                let v9059 : string = "__future_init"
                                let v9060 : _ = Fable.Core.RustInterop.emitRustExpr () v9059 
                                let v9061 : string = "v9060"
                                let v9062 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v9061 
                                let v9063 : string = "v9062.await"
                                let v9064 : uint8 = Fable.Core.RustInterop.emitRustExpr () v9063 
                                let v9065 : US7 = method23(v9064)
                                let v9066 : string = v9054 + v9055 
                                let v9067 : string = "true; v9065 " + v9066 + "); " + v9054 + " // rust.fix_closure'"
                                let v9068 : bool = Fable.Core.RustInterop.emitRustExpr () v9067 
                                let v9069 : string = "__future_init"
                                let v9070 : _ = Fable.Core.RustInterop.emitRustExpr () v9069 
                                let v9071 : string = "v9070"
                                let v9072 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v9071 
                                v9072
                            | US4_0(v9073) -> (* Some *)
                                let v9074 : unit = ()
                                let v9075 : (unit -> unit) = closure99(v9073)
                                let v9076 : unit = (fun () -> v9075 (); v9074) ()
                                let v10093 : string = "true; let __future_init = Box::pin(async move { //"
                                let v10094 : bool = Fable.Core.RustInterop.emitRustExpr () v10093 
                                let v10095 : string = "true; let __future_init = Box::pin(async move { //"
                                let v10096 : bool = Fable.Core.RustInterop.emitRustExpr () v10095 
                                let v10097 : uint8 = method47()
                                let v10098 : string = ""
                                let v10099 : string = "}"
                                let v10100 : string = v10098 + v10099 
                                let v10101 : string = "true; v10097 " + v10100 + "); " + v10098 + " // rust.fix_closure'"
                                let v10102 : bool = Fable.Core.RustInterop.emitRustExpr () v10101 
                                let v10103 : string = "__future_init"
                                let v10104 : _ = Fable.Core.RustInterop.emitRustExpr () v10103 
                                let v10105 : string = "v10104"
                                let v10106 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v10105 
                                let v10107 : string = "v10106.await"
                                let v10108 : uint8 = Fable.Core.RustInterop.emitRustExpr () v10107 
                                let v10109 : US7 = method21(v10108)
                                let v10110 : string = v10098 + v10099 
                                let v10111 : string = "true; v10109 " + v10110 + "); " + v10098 + " // rust.fix_closure'"
                                let v10112 : bool = Fable.Core.RustInterop.emitRustExpr () v10111 
                                let v10113 : string = "__future_init"
                                let v10114 : _ = Fable.Core.RustInterop.emitRustExpr () v10113 
                                let v10115 : string = "v10114"
                                let v10116 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v10115 
                                v10116
                    | US6_0(v6983) -> (* Ok *)
                        match v6983 with
                        | US4_1 -> (* None *)
                            let v6984 : string = "true; let __future_init = Box::pin(async move { //"
                            let v6985 : bool = Fable.Core.RustInterop.emitRustExpr () v6984 
                            let v6986 : string = "true; let __future_init = Box::pin(async move { //"
                            let v6987 : bool = Fable.Core.RustInterop.emitRustExpr () v6986 
                            let v6988 : uint8 = method48()
                            let v6989 : string = ""
                            let v6990 : string = "}"
                            let v6991 : string = v6989 + v6990 
                            let v6992 : string = "true; v6988 " + v6991 + "); " + v6989 + " // rust.fix_closure'"
                            let v6993 : bool = Fable.Core.RustInterop.emitRustExpr () v6992 
                            let v6994 : string = "__future_init"
                            let v6995 : _ = Fable.Core.RustInterop.emitRustExpr () v6994 
                            let v6996 : string = "v6995"
                            let v6997 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v6996 
                            let v6998 : string = "v6997.await"
                            let v6999 : uint8 = Fable.Core.RustInterop.emitRustExpr () v6998 
                            let v7000 : US7 = method23(v6999)
                            let v7001 : string = v6989 + v6990 
                            let v7002 : string = "true; v7000 " + v7001 + "); " + v6989 + " // rust.fix_closure'"
                            let v7003 : bool = Fable.Core.RustInterop.emitRustExpr () v7002 
                            let v7004 : string = "__future_init"
                            let v7005 : _ = Fable.Core.RustInterop.emitRustExpr () v7004 
                            let v7006 : string = "v7005"
                            let v7007 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v7006 
                            v7007
                        | US4_0(v7008) -> (* Some *)
                            let v7009 : unit = ()
                            let v7010 : (unit -> unit) = closure100(v7008)
                            let v7011 : unit = (fun () -> v7010 (); v7009) ()
                            let v8028 : string = "true; let __future_init = Box::pin(async move { //"
                            let v8029 : bool = Fable.Core.RustInterop.emitRustExpr () v8028 
                            let v8030 : string = "true; let __future_init = Box::pin(async move { //"
                            let v8031 : bool = Fable.Core.RustInterop.emitRustExpr () v8030 
                            let v8032 : uint8 = method48()
                            let v8033 : string = ""
                            let v8034 : string = "}"
                            let v8035 : string = v8033 + v8034 
                            let v8036 : string = "true; v8032 " + v8035 + "); " + v8033 + " // rust.fix_closure'"
                            let v8037 : bool = Fable.Core.RustInterop.emitRustExpr () v8036 
                            let v8038 : string = "__future_init"
                            let v8039 : _ = Fable.Core.RustInterop.emitRustExpr () v8038 
                            let v8040 : string = "v8039"
                            let v8041 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v8040 
                            let v8042 : string = "v8041.await"
                            let v8043 : uint8 = Fable.Core.RustInterop.emitRustExpr () v8042 
                            let v8044 : US7 = method21(v8043)
                            let v8045 : string = v8033 + v8034 
                            let v8046 : string = "true; v8044 " + v8045 + "); " + v8033 + " // rust.fix_closure'"
                            let v8047 : bool = Fable.Core.RustInterop.emitRustExpr () v8046 
                            let v8048 : string = "__future_init"
                            let v8049 : _ = Fable.Core.RustInterop.emitRustExpr () v8048 
                            let v8050 : string = "v8049"
                            let v8051 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v8050 
                            v8051
                | US6_0(v4918) -> (* Ok *)
                    match v4918 with
                    | US4_1 -> (* None *)
                        let v4919 : string = "true; let __future_init = Box::pin(async move { //"
                        let v4920 : bool = Fable.Core.RustInterop.emitRustExpr () v4919 
                        let v4921 : string = "true; let __future_init = Box::pin(async move { //"
                        let v4922 : bool = Fable.Core.RustInterop.emitRustExpr () v4921 
                        let v4923 : uint8 = method49()
                        let v4924 : string = ""
                        let v4925 : string = "}"
                        let v4926 : string = v4924 + v4925 
                        let v4927 : string = "true; v4923 " + v4926 + "); " + v4924 + " // rust.fix_closure'"
                        let v4928 : bool = Fable.Core.RustInterop.emitRustExpr () v4927 
                        let v4929 : string = "__future_init"
                        let v4930 : _ = Fable.Core.RustInterop.emitRustExpr () v4929 
                        let v4931 : string = "v4930"
                        let v4932 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v4931 
                        let v4933 : string = "v4932.await"
                        let v4934 : uint8 = Fable.Core.RustInterop.emitRustExpr () v4933 
                        let v4935 : US7 = method23(v4934)
                        let v4936 : string = v4924 + v4925 
                        let v4937 : string = "true; v4935 " + v4936 + "); " + v4924 + " // rust.fix_closure'"
                        let v4938 : bool = Fable.Core.RustInterop.emitRustExpr () v4937 
                        let v4939 : string = "__future_init"
                        let v4940 : _ = Fable.Core.RustInterop.emitRustExpr () v4939 
                        let v4941 : string = "v4940"
                        let v4942 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v4941 
                        v4942
                    | US4_0(v4943) -> (* Some *)
                        let v4944 : unit = ()
                        let v4945 : (unit -> unit) = closure101(v4943)
                        let v4946 : unit = (fun () -> v4945 (); v4944) ()
                        let v5963 : string = "true; let __future_init = Box::pin(async move { //"
                        let v5964 : bool = Fable.Core.RustInterop.emitRustExpr () v5963 
                        let v5965 : string = "true; let __future_init = Box::pin(async move { //"
                        let v5966 : bool = Fable.Core.RustInterop.emitRustExpr () v5965 
                        let v5967 : uint8 = method49()
                        let v5968 : string = ""
                        let v5969 : string = "}"
                        let v5970 : string = v5968 + v5969 
                        let v5971 : string = "true; v5967 " + v5970 + "); " + v5968 + " // rust.fix_closure'"
                        let v5972 : bool = Fable.Core.RustInterop.emitRustExpr () v5971 
                        let v5973 : string = "__future_init"
                        let v5974 : _ = Fable.Core.RustInterop.emitRustExpr () v5973 
                        let v5975 : string = "v5974"
                        let v5976 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v5975 
                        let v5977 : string = "v5976.await"
                        let v5978 : uint8 = Fable.Core.RustInterop.emitRustExpr () v5977 
                        let v5979 : US7 = method21(v5978)
                        let v5980 : string = v5968 + v5969 
                        let v5981 : string = "true; v5979 " + v5980 + "); " + v5968 + " // rust.fix_closure'"
                        let v5982 : bool = Fable.Core.RustInterop.emitRustExpr () v5981 
                        let v5983 : string = "__future_init"
                        let v5984 : _ = Fable.Core.RustInterop.emitRustExpr () v5983 
                        let v5985 : string = "v5984"
                        let v5986 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v5985 
                        v5986
            | US6_0(v2853) -> (* Ok *)
                match v2853 with
                | US4_1 -> (* None *)
                    let v2854 : string = "true; let __future_init = Box::pin(async move { //"
                    let v2855 : bool = Fable.Core.RustInterop.emitRustExpr () v2854 
                    let v2856 : string = "true; let __future_init = Box::pin(async move { //"
                    let v2857 : bool = Fable.Core.RustInterop.emitRustExpr () v2856 
                    let v2858 : uint8 = method50()
                    let v2859 : string = ""
                    let v2860 : string = "}"
                    let v2861 : string = v2859 + v2860 
                    let v2862 : string = "true; v2858 " + v2861 + "); " + v2859 + " // rust.fix_closure'"
                    let v2863 : bool = Fable.Core.RustInterop.emitRustExpr () v2862 
                    let v2864 : string = "__future_init"
                    let v2865 : _ = Fable.Core.RustInterop.emitRustExpr () v2864 
                    let v2866 : string = "v2865"
                    let v2867 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v2866 
                    let v2868 : string = "v2867.await"
                    let v2869 : uint8 = Fable.Core.RustInterop.emitRustExpr () v2868 
                    let v2870 : US7 = method23(v2869)
                    let v2871 : string = v2859 + v2860 
                    let v2872 : string = "true; v2870 " + v2871 + "); " + v2859 + " // rust.fix_closure'"
                    let v2873 : bool = Fable.Core.RustInterop.emitRustExpr () v2872 
                    let v2874 : string = "__future_init"
                    let v2875 : _ = Fable.Core.RustInterop.emitRustExpr () v2874 
                    let v2876 : string = "v2875"
                    let v2877 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v2876 
                    v2877
                | US4_0(v2878) -> (* Some *)
                    let v2879 : unit = ()
                    let v2880 : (unit -> unit) = closure102(v2878)
                    let v2881 : unit = (fun () -> v2880 (); v2879) ()
                    let v3898 : string = "true; let __future_init = Box::pin(async move { //"
                    let v3899 : bool = Fable.Core.RustInterop.emitRustExpr () v3898 
                    let v3900 : string = "true; let __future_init = Box::pin(async move { //"
                    let v3901 : bool = Fable.Core.RustInterop.emitRustExpr () v3900 
                    let v3902 : uint8 = method50()
                    let v3903 : string = ""
                    let v3904 : string = "}"
                    let v3905 : string = v3903 + v3904 
                    let v3906 : string = "true; v3902 " + v3905 + "); " + v3903 + " // rust.fix_closure'"
                    let v3907 : bool = Fable.Core.RustInterop.emitRustExpr () v3906 
                    let v3908 : string = "__future_init"
                    let v3909 : _ = Fable.Core.RustInterop.emitRustExpr () v3908 
                    let v3910 : string = "v3909"
                    let v3911 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v3910 
                    let v3912 : string = "v3911.await"
                    let v3913 : uint8 = Fable.Core.RustInterop.emitRustExpr () v3912 
                    let v3914 : US7 = method21(v3913)
                    let v3915 : string = v3903 + v3904 
                    let v3916 : string = "true; v3914 " + v3915 + "); " + v3903 + " // rust.fix_closure'"
                    let v3917 : bool = Fable.Core.RustInterop.emitRustExpr () v3916 
                    let v3918 : string = "__future_init"
                    let v3919 : _ = Fable.Core.RustInterop.emitRustExpr () v3918 
                    let v3920 : string = "v3919"
                    let v3921 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v3920 
                    v3921
        | US6_0(v788) -> (* Ok *)
            match v788 with
            | US4_1 -> (* None *)
                let v789 : string = "true; let __future_init = Box::pin(async move { //"
                let v790 : bool = Fable.Core.RustInterop.emitRustExpr () v789 
                let v791 : string = "true; let __future_init = Box::pin(async move { //"
                let v792 : bool = Fable.Core.RustInterop.emitRustExpr () v791 
                let v793 : uint8 = method51()
                let v794 : string = ""
                let v795 : string = "}"
                let v796 : string = v794 + v795 
                let v797 : string = "true; v793 " + v796 + "); " + v794 + " // rust.fix_closure'"
                let v798 : bool = Fable.Core.RustInterop.emitRustExpr () v797 
                let v799 : string = "__future_init"
                let v800 : _ = Fable.Core.RustInterop.emitRustExpr () v799 
                let v801 : string = "v800"
                let v802 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v801 
                let v803 : string = "v802.await"
                let v804 : uint8 = Fable.Core.RustInterop.emitRustExpr () v803 
                let v805 : US7 = method23(v804)
                let v806 : string = v794 + v795 
                let v807 : string = "true; v805 " + v806 + "); " + v794 + " // rust.fix_closure'"
                let v808 : bool = Fable.Core.RustInterop.emitRustExpr () v807 
                let v809 : string = "__future_init"
                let v810 : _ = Fable.Core.RustInterop.emitRustExpr () v809 
                let v811 : string = "v810"
                let v812 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v811 
                v812
            | US4_0(v813) -> (* Some *)
                let v814 : unit = ()
                let v815 : (unit -> unit) = closure103(v813)
                let v816 : unit = (fun () -> v815 (); v814) ()
                let v1833 : string = "true; let __future_init = Box::pin(async move { //"
                let v1834 : bool = Fable.Core.RustInterop.emitRustExpr () v1833 
                let v1835 : string = "true; let __future_init = Box::pin(async move { //"
                let v1836 : bool = Fable.Core.RustInterop.emitRustExpr () v1835 
                let v1837 : uint8 = method51()
                let v1838 : string = ""
                let v1839 : string = "}"
                let v1840 : string = v1838 + v1839 
                let v1841 : string = "true; v1837 " + v1840 + "); " + v1838 + " // rust.fix_closure'"
                let v1842 : bool = Fable.Core.RustInterop.emitRustExpr () v1841 
                let v1843 : string = "__future_init"
                let v1844 : _ = Fable.Core.RustInterop.emitRustExpr () v1843 
                let v1845 : string = "v1844"
                let v1846 : std_pin_Pin<Box<Dyn<std_future_Future<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v1845 
                let v1847 : string = "v1846.await"
                let v1848 : uint8 = Fable.Core.RustInterop.emitRustExpr () v1847 
                let v1849 : US7 = method21(v1848)
                let v1850 : string = v1838 + v1839 
                let v1851 : string = "true; v1849 " + v1850 + "); " + v1838 + " // rust.fix_closure'"
                let v1852 : bool = Fable.Core.RustInterop.emitRustExpr () v1851 
                let v1853 : string = "__future_init"
                let v1854 : _ = Fable.Core.RustInterop.emitRustExpr () v1853 
                let v1855 : string = "v1854"
                let v1856 : std_pin_Pin<Box<Dyn<std_future_Future<US7>>>> = Fable.Core.RustInterop.emitRustExpr () v1855 
                v1856
    let v60747 : string = "v60746.await"
    let v60748 : US7 = Fable.Core.RustInterop.emitRustExpr () v60747 
    let v60749 : unit = ()
    let v60750 : (unit -> unit) = closure104(v60748)
    let v60751 : unit = (fun () -> v60750 (); v60749) ()
    let v61543 : Result<unit, anyhow_Error> =
        match v60748 with
        | US7_1(v61490) -> (* Error *)
            let v61491 : string = method10()
            let v61492 : Mut4 = {l0 = v61491} : Mut4
            let v61493 : string = "{ "
            let v61494 : string = $"{v61493}"
            let v61497 : unit = ()
            let v61498 : (unit -> unit) = closure12(v61492, v61494)
            let v61499 : unit = (fun () -> v61498 (); v61497) ()
            let v61502 : string = "retries"
            let v61503 : string = $"{v61502}"
            let v61506 : unit = ()
            let v61507 : (unit -> unit) = closure12(v61492, v61503)
            let v61508 : unit = (fun () -> v61507 (); v61506) ()
            let v61511 : string = " = "
            let v61512 : string = $"{v61511}"
            let v61515 : unit = ()
            let v61516 : (unit -> unit) = closure12(v61492, v61512)
            let v61517 : unit = (fun () -> v61516 (); v61515) ()
            let v61520 : string = $"{v61490}"
            let v61523 : unit = ()
            let v61524 : (unit -> unit) = closure12(v61492, v61520)
            let v61525 : unit = (fun () -> v61524 (); v61523) ()
            let v61528 : string = " }"
            let v61529 : string = $"{v61528}"
            let v61532 : unit = ()
            let v61533 : (unit -> unit) = closure12(v61492, v61529)
            let v61534 : unit = (fun () -> v61533 (); v61532) ()
            let v61537 : string = v61492.l0
            let v61538 : string = "anyhow::anyhow!($0)"
            let v61539 : anyhow_Error = Fable.Core.RustInterop.emitRustExpr v61537 v61538 
            let v61540 : string = "Err(v61539)"
            let v61541 : Result<unit, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr () v61540 
            v61541
        | US7_0(v61488) -> (* Ok *)
            let v61489 : Result<unit, anyhow_Error> = Ok () 
            v61489
    let v61544 : Result<unit, anyhow_Error> = method52(v61543)
    let v61545 : string = ""
    let v61546 : string = "}"
    let v61547 : string = v61545 + v61546 
    let v61548 : string = "true; v61544 " + v61547 + "); " + v61545 + " // rust.fix_closure'"
    let v61549 : bool = Fable.Core.RustInterop.emitRustExpr () v61548 
    let v61550 : string = "__future_init"
    let v61551 : _ = Fable.Core.RustInterop.emitRustExpr () v61550 
    let v61552 : string = "v61551"
    let v61553 : std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, anyhow_Error>>>>> = Fable.Core.RustInterop.emitRustExpr () v61552 
    v61553
and closure0 () (v0 : (string [])) : int32 =
    let v1 : clap_Command = method0()
    let v2 : string = "clap::Command::get_matches($0)"
    let v3 : clap_ArgMatches = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : string = method1()
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "clap::ArgMatches::get_one(&$0, v6).cloned()"
    let v8 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v3 v7 
    let v9 : US0 option = None
    let _v9 = ref v9 
    let v10 : US0 option ref = _v9 
    let v11 : (US0 option -> US0 option ref) = closure1(v10)
    let v12 : unit = ()
    let v13 : (unit -> unit) = closure2(v8, v11)
    let v14 : unit = (fun () -> v13 (); v12) ()
    let v17 : US0 option = _v9.Value 
    let v28 : US0 = US0_1
    let v29 : US0 = v17 |> Option.defaultValue v28 
    let v85 : US1 =
        match v29 with
        | US0_1 -> (* None *)
            US1_1
        | US0_0(v33) -> (* Some *)
            let v34 : string = "fable_library_rust::String_::fromString($0)"
            let v35 : string = Fable.Core.RustInterop.emitRustExpr v33 v34 
            
            
            
            
            
            let v36 : bool = "Verbose" = v35
            let v40 : US2 =
                if v36 then
                    let v37 : US3 = US3_0
                    US2_0(v37)
                else
                    US2_1
            let v81 : US2 =
                match v40 with
                | US2_1 -> (* None *)
                    let v43 : bool = "Debug" = v35
                    let v47 : US2 =
                        if v43 then
                            let v44 : US3 = US3_1
                            US2_0(v44)
                        else
                            US2_1
                    match v47 with
                    | US2_1 -> (* None *)
                        let v50 : bool = "Info" = v35
                        let v54 : US2 =
                            if v50 then
                                let v51 : US3 = US3_2
                                US2_0(v51)
                            else
                                US2_1
                        match v54 with
                        | US2_1 -> (* None *)
                            let v57 : bool = "Warning" = v35
                            let v61 : US2 =
                                if v57 then
                                    let v58 : US3 = US3_3
                                    US2_0(v58)
                                else
                                    US2_1
                            match v61 with
                            | US2_1 -> (* None *)
                                let v64 : bool = "Critical" = v35
                                let v68 : US2 =
                                    if v64 then
                                        let v65 : US3 = US3_4
                                        US2_0(v65)
                                    else
                                        US2_1
                                match v68 with
                                | US2_1 -> (* None *)
                                    US2_1
                                | US2_0(v69) -> (* Some *)
                                    US2_0(v69)
                            | US2_0(v62) -> (* Some *)
                                US2_0(v62)
                        | US2_0(v55) -> (* Some *)
                            US2_0(v55)
                    | US2_0(v48) -> (* Some *)
                        US2_0(v48)
                | US2_0(v41) -> (* Some *)
                    US2_0(v41)
            US1_0(v81)
    let v92 : US2 =
        match v85 with
        | US1_0(v86) -> (* Some *)
            match v86 with
            | US2_0(v87) -> (* Some *)
                US2_0(v87)
            | _ ->
                US2_1
        | _ ->
            US2_1
    let v96 : US3 =
        match v92 with
        | US2_1 -> (* None *)
            US3_0
        | US2_0(v93) -> (* Some *)
            v93
    let v97 : unit = ()
    let v98 : (unit -> unit) = closure3(v96)
    let v99 : unit = (fun () -> v98 (); v97) ()
    let struct (v110 : Mut0, v111 : Mut1, v112 : Mut2, v113 : Mut3, v114 : int64 option) = State.trace_state.Value
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v0)
    let v127 : unit = (fun () -> v126 (); v125) ()
    let v864 : std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, anyhow_Error>>>>> = method11(v3)
    let v865 : string = $"tokio::runtime::Builder::new_multi_thread().enable_all().build().unwrap()"
    let v866 : _ = Fable.Core.RustInterop.emitRustExpr () v865 
    let v867 : string = "v866.handle().block_on($0)"
    let v868 : Result<unit, anyhow_Error> = Fable.Core.RustInterop.emitRustExpr v864 v867 
    let v869 : string = "$0.unwrap()"
    Fable.Core.RustInterop.emitRustExpr v868 v869 
    0
let v0 : ((string []) -> int32) = closure0()
let main args = v0 args
()
