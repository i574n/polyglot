#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unreachable_code)]
#![allow(unused_attributes)]
#![allow(unused_imports)]
#![allow(unused_macros)]
#![allow(unused_parens)]
#![allow(unused_variables)]
use fable_library_rust::NativeArray_::array_from;
use fable_library_rust::String_::fromString;
mod module_fb49c4a9 {
    pub mod Spiral_wasm {
        use super::*;
        use fable_library_rust::DateTime_::DateTime;
        use fable_library_rust::Interfaces_::System::Collections::Generic::IEnumerable_1;
        use fable_library_rust::List_::empty;
        use fable_library_rust::List_::ofArray;
        use fable_library_rust::List_::toArray;
        use fable_library_rust::Map_::find;
        use fable_library_rust::Map_::ofSeq;
        use fable_library_rust::NativeArray_::new_array;
        use fable_library_rust::NativeArray_::Array;
        use fable_library_rust::Native_::refCell;
        use fable_library_rust::Native_::Any;
        use fable_library_rust::Native_::Func0;
        use fable_library_rust::Native_::Func1;
        use fable_library_rust::Native_::LrcPtr;
        use fable_library_rust::Native_::MutCell;
        use fable_library_rust::Native_::OnceInit;
        use fable_library_rust::Option_::defaultValue;
        use fable_library_rust::Option_::getValue;
        use fable_library_rust::Seq_::ofList;
        use fable_library_rust::String_::append;
        use fable_library_rust::String_::padLeft;
        use fable_library_rust::String_::printfn;
        use fable_library_rust::String_::sprintf;
        use fable_library_rust::String_::string;
        use fable_library_rust::String_::toLower;
        use fable_library_rust::String_::trimEndChars;
        use fable_library_rust::String_::trimStartChars;
        use fable_library_rust::TimeSpan_::TimeSpan;
        pub mod TraceState {
            use super::*;
            pub fn trace_state() -> LrcPtr<
                MutCell<
                    Option<(
                        LrcPtr<Spiral_wasm::Mut0>,
                        LrcPtr<Spiral_wasm::Mut1>,
                        LrcPtr<Spiral_wasm::Mut2>,
                        LrcPtr<Spiral_wasm::Mut3>,
                        LrcPtr<Spiral_wasm::Mut4>,
                        Option<i64>,
                    )>,
                >,
            > {
                static trace_state: OnceInit<
                    LrcPtr<
                        MutCell<
                            Option<(
                                LrcPtr<Spiral_wasm::Mut0>,
                                LrcPtr<Spiral_wasm::Mut1>,
                                LrcPtr<Spiral_wasm::Mut2>,
                                LrcPtr<Spiral_wasm::Mut3>,
                                LrcPtr<Spiral_wasm::Mut4>,
                                Option<i64>,
                            )>,
                        >,
                    >,
                > = OnceInit::new();
                trace_state
                    .get_or_init(|| {
                        LrcPtr::new(MutCell::new(
                            None::<(
                                LrcPtr<Spiral_wasm::Mut0>,
                                LrcPtr<Spiral_wasm::Mut1>,
                                LrcPtr<Spiral_wasm::Mut2>,
                                LrcPtr<Spiral_wasm::Mut3>,
                                LrcPtr<Spiral_wasm::Mut4>,
                                Option<i64>,
                            )>,
                        ))
                    })
                    .clone()
            }
        }
        pub trait IOsEnviron {
            fn environ(&self) -> LrcPtr<dyn Any>;
        }
        impl<V: IOsEnviron + Clone + 'static> IOsEnviron for LrcPtr<V> {
            #[inline]
            fn environ(&self) -> LrcPtr<dyn Any> {
                (**self).environ()
            }
        }
        #[derive(Clone, Debug)]
        pub enum US0 {
            US0_0(std::string::String),
            US0_1,
        }
        impl core::fmt::Display for Spiral_wasm::US0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US3 {
            US3_0,
            US3_1,
            US3_2,
            US3_3,
            US3_4,
        }
        impl core::fmt::Display for Spiral_wasm::US3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US2 {
            US2_0(Spiral_wasm::US3),
            US2_1,
        }
        impl core::fmt::Display for Spiral_wasm::US2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US1 {
            US1_0(Spiral_wasm::US2),
            US1_1,
        }
        impl core::fmt::Display for Spiral_wasm::US1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut0 {
            pub l0: MutCell<i64>,
        }
        impl core::fmt::Display for Spiral_wasm::Mut0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Mut1 {
            pub l0: MutCell<Func1<string, ()>>,
        }
        impl core::fmt::Display for Spiral_wasm::Mut1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut2 {
            pub l0: MutCell<bool>,
        }
        impl core::fmt::Display for Spiral_wasm::Mut2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut3 {
            pub l0: MutCell<string>,
        }
        impl core::fmt::Display for Spiral_wasm::Mut3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut4 {
            pub l0: MutCell<Spiral_wasm::US3>,
        }
        impl core::fmt::Display for Spiral_wasm::Mut4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US4 {
            US4_0(string),
            US4_1,
        }
        impl core::fmt::Display for Spiral_wasm::US4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US5 {
            US5_0(i64),
            US5_1,
        }
        impl core::fmt::Display for Spiral_wasm::US5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US6 {
            US6_0(Spiral_wasm::US4),
            US6_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_wasm::US6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US7 {
            US7_0(u8),
            US7_1(u8),
        }
        impl core::fmt::Display for Spiral_wasm::US7 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US8 {
            US8_0(u8),
            US8_1,
        }
        impl core::fmt::Display for Spiral_wasm::US8 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        pub fn method0() -> clap::Command {
            let v1: string = string("r#\"command\"#");
            let v2: &'static str = r#"command"#;
            let v4: clap::Command = clap::Command::new(v2);
            let v6: clap::Command = clap::Command::args_override_self(v4, true);
            let v8: string = string("r#\"exception\"#");
            let v9: &'static str = r#"exception"#;
            let v11: clap::Arg = clap::Arg::new(v9);
            let v13: clap::Arg = v11.short('e');
            let v14: string = string("r#\"exception\"#");
            let v15: &'static str = r#"exception"#;
            let v17: clap::Arg = v13.long(v15);
            let v19: clap::ArgAction = clap::ArgAction::SetTrue;
            let v21: clap::Arg = v17.action(v19);
            let v23: clap::Command = clap::Command::arg(v6, v21);
            let v25: string = string("r#\"trace_level\"#");
            let v26: &'static str = r#"trace_level"#;
            let v28: clap::Arg = clap::Arg::new(v26);
            let v30: clap::Arg = v28.short('t');
            let v31: string = string("r#\"trace_level\"#");
            let v32: &'static str = r#"trace_level"#;
            let v34: clap::Arg = v30.long(v32);
            let v57: Array<string> = toArray(ofArray(new_array(&[
                string("Verbose"),
                string("Debug"),
                string("Info"),
                string("Warning"),
                string("Critical"),
            ])));
            let v61: Vec<string> = v57.to_vec();
            let v63: bool = true;
            let _vec_map: Vec<_> = v61
                .into_iter()
                .map(|x| {
                    //;
                    let v65: string = x;
                    let v67: &str = &*v65;
                    let v69: std::string::String = String::from(v67);
                    let v71: Box<std::string::String> = Box::new(v69);
                    let v73: &'static mut std::string::String = Box::leak(v71);
                    let v75: clap::builder::PossibleValue =
                        clap::builder::PossibleValue::new(&**v73);
                    let v77: bool = true;
                    v75
                })
                .collect::<Vec<_>>();
            let v79: Vec<clap::builder::PossibleValue> = _vec_map;
            let v81: clap::builder::ValueParser = Into::<clap::builder::ValueParser>::into(
                clap::builder::PossibleValuesParser::new(v79),
            );
            let v83: clap::Arg = v34.value_parser(v81);
            let v85: clap::Command = clap::Command::arg(v23, v83);
            let v87: string = string("r#\"wasm\"#");
            let v88: &'static str = r#"wasm"#;
            let v90: clap::Arg = clap::Arg::new(v88);
            let v92: clap::Arg = v90.short('w');
            let v93: string = string("r#\"wasm\"#");
            let v94: &'static str = r#"wasm"#;
            let v96: clap::Arg = v92.long(v94);
            let v98: clap::Arg = v96.required(true);
            clap::Command::arg(v85, v98)
        }
        pub fn method1() -> string {
            string("trace_level")
        }
        pub fn closure1(
            v0_1: LrcPtr<MutCell<Option<Spiral_wasm::US0>>>,
            v1: Option<Spiral_wasm::US0>,
        ) -> LrcPtr<MutCell<Option<Spiral_wasm::US0>>> {
            v0_1.set(v1);
            v0_1
        }
        pub fn closure2(
            v0_1: Option<std::string::String>,
            v1: Func1<Option<Spiral_wasm::US0>, LrcPtr<MutCell<Option<Spiral_wasm::US0>>>>,
            unitVar: (),
        ) {
            {
                let value: LrcPtr<MutCell<Option<Spiral_wasm::US0>>> = v1(match &v0_1 {
                    None => None::<Spiral_wasm::US0>,
                    Some(v0_1_0_0) => {
                        let x: std::string::String = v0_1_0_0.clone();
                        Some((Func0::new({
                            let x = x.clone();
                            move || Spiral_wasm::US0::US0_0(x.clone())
                        }))())
                    }
                });
                ()
            }
            ()
        }
        pub fn method3() -> string {
            string("TRACE_LEVEL")
        }
        pub fn method5() -> string {
            string("")
        }
        pub fn closure4(
            v0_1: LrcPtr<MutCell<Option<Spiral_wasm::US4>>>,
            v1: Option<Spiral_wasm::US4>,
        ) -> LrcPtr<MutCell<Option<Spiral_wasm::US4>>> {
            v0_1.set(v1);
            v0_1
        }
        pub fn closure5(
            v0_1: Option<string>,
            v1: Func1<Option<Spiral_wasm::US4>, LrcPtr<MutCell<Option<Spiral_wasm::US4>>>>,
            unitVar: (),
        ) {
            {
                let value: LrcPtr<MutCell<Option<Spiral_wasm::US4>>> = v1(match &v0_1 {
                    None => None::<Spiral_wasm::US4>,
                    Some(v0_1_0_0) => {
                        let x: string = v0_1_0_0.clone();
                        Some((Func0::new({
                            let x = x.clone();
                            move || Spiral_wasm::US4::US4_0(x.clone())
                        }))())
                    }
                });
                ()
            }
            ()
        }
        pub fn method4(v0_1: string) -> string {
            let v3: Result<std::string::String, std::env::VarError> = std::env::var(&*v0_1);
            let v5: bool = true;
            let _result_map_ = v3.map(|x| {
                //;
                let v7: std::string::String = x;
                let v9: string = fable_library_rust::String_::fromString(v7);
                let v11: bool = true;
                v9
            });
            let v13: Result<string, std::env::VarError> = _result_map_;
            let v14: string = Spiral_wasm::method5();
            v13.unwrap_or(v14)
        }
        pub fn method6() -> string {
            string("AUTOMATION")
        }
        pub fn closure6(unitVar: (), v0_1: string) {
            ();
        }
        pub fn method2(
            v0_1: Spiral_wasm::US3,
        ) -> (
            LrcPtr<Spiral_wasm::Mut0>,
            LrcPtr<Spiral_wasm::Mut1>,
            LrcPtr<Spiral_wasm::Mut2>,
            LrcPtr<Spiral_wasm::Mut3>,
            LrcPtr<Spiral_wasm::Mut4>,
            Option<i64>,
        ) {
            let v3: string = Spiral_wasm::method4(Spiral_wasm::method3());
            let v8: Spiral_wasm::US2 = if string("Verbose") == v3.clone() {
                Spiral_wasm::US2::US2_0(Spiral_wasm::US3::US3_0)
            } else {
                Spiral_wasm::US2::US2_1
            };
            let _v1: (Spiral_wasm::US2, Spiral_wasm::US5) = (
                match &v8 {
                    Spiral_wasm::US2::US2_0(v8_0_0) => Spiral_wasm::US2::US2_0(match &v8 {
                        Spiral_wasm::US2::US2_0(x) => x.clone(),
                        _ => unreachable!(),
                    }),
                    _ => {
                        let v15: Spiral_wasm::US2 = if string("Debug") == v3.clone() {
                            Spiral_wasm::US2::US2_0(Spiral_wasm::US3::US3_1)
                        } else {
                            Spiral_wasm::US2::US2_1
                        };
                        match &v15 {
                            Spiral_wasm::US2::US2_0(v15_0_0) => {
                                Spiral_wasm::US2::US2_0(match &v15 {
                                    Spiral_wasm::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v22: Spiral_wasm::US2 = if string("Info") == v3.clone() {
                                    Spiral_wasm::US2::US2_0(Spiral_wasm::US3::US3_2)
                                } else {
                                    Spiral_wasm::US2::US2_1
                                };
                                match &v22 {
                                    Spiral_wasm::US2::US2_0(v22_0_0) => {
                                        Spiral_wasm::US2::US2_0(match &v22 {
                                            Spiral_wasm::US2::US2_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v29: Spiral_wasm::US2 =
                                            if string("Warning") == v3.clone() {
                                                Spiral_wasm::US2::US2_0(Spiral_wasm::US3::US3_3)
                                            } else {
                                                Spiral_wasm::US2::US2_1
                                            };
                                        match &v29 {
                                            Spiral_wasm::US2::US2_0(v29_0_0) => {
                                                Spiral_wasm::US2::US2_0(match &v29 {
                                                    Spiral_wasm::US2::US2_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v36: Spiral_wasm::US2 = if string("Critical")
                                                    == v3.clone()
                                                {
                                                    Spiral_wasm::US2::US2_0(Spiral_wasm::US3::US3_4)
                                                } else {
                                                    Spiral_wasm::US2::US2_1
                                                };
                                                match &v36 {
                                                    Spiral_wasm::US2::US2_0(v36_0_0) => {
                                                        Spiral_wasm::US2::US2_0(match &v36 {
                                                            Spiral_wasm::US2::US2_0(x) => x.clone(),
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => Spiral_wasm::US2::US2_1,
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                if Spiral_wasm::method4(Spiral_wasm::method6()) == string("True") {
                    Spiral_wasm::US5::US5_0({
                        let _arg: DateTime = DateTime::now();
                        _arg.ticks()
                    })
                } else {
                    Spiral_wasm::US5::US5_1
                },
            );
            let v295: Spiral_wasm::US5 = _v1.1.clone();
            let v294: Spiral_wasm::US2 = _v1.0.clone();
            (
                LrcPtr::new(Spiral_wasm::Mut0 {
                    l0: MutCell::new(0_i64),
                }),
                LrcPtr::new(Spiral_wasm::Mut1 {
                    l0: MutCell::new(Func1::new(move |v: string| Spiral_wasm::closure6((), v))),
                }),
                LrcPtr::new(Spiral_wasm::Mut2 {
                    l0: MutCell::new(true),
                }),
                LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(string("")),
                }),
                LrcPtr::new(Spiral_wasm::Mut4 {
                    l0: MutCell::new(match &v294 {
                        Spiral_wasm::US2::US2_0(v294_0_0) => match &v294 {
                            Spiral_wasm::US2::US2_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => v0_1,
                    }),
                }),
                match &v295 {
                    Spiral_wasm::US5::US5_0(v295_0_0) => Some(match &v295 {
                        Spiral_wasm::US5::US5_0(x) => x.clone(),
                        _ => unreachable!(),
                    }),
                    _ => None::<i64>,
                },
            )
        }
        pub fn closure3(v0_1: Spiral_wasm::US3, unitVar: ()) {
            if Spiral_wasm::TraceState::trace_state()
                .get()
                .clone()
                .is_none()
            {
                let patternInput: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = Spiral_wasm::method2(v0_1);
                Spiral_wasm::TraceState::trace_state().set(Some((
                    patternInput.0.clone(),
                    patternInput.1.clone(),
                    patternInput.2.clone(),
                    patternInput.3.clone(),
                    patternInput.4.clone(),
                    patternInput.5.clone(),
                )));
                ()
            };
        }
        pub fn closure8(unitVar: (), unitVar_1: ()) {
            if Spiral_wasm::TraceState::trace_state()
                .get()
                .clone()
                .is_none()
            {
                let patternInput: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = Spiral_wasm::method2(Spiral_wasm::US3::US3_0);
                Spiral_wasm::TraceState::trace_state().set(Some((
                    patternInput.0.clone(),
                    patternInput.1.clone(),
                    patternInput.2.clone(),
                    patternInput.3.clone(),
                    patternInput.4.clone(),
                    patternInput.5.clone(),
                )));
                ()
            };
        }
        pub fn closure9(v0_1: LrcPtr<Spiral_wasm::Mut0>, unitVar: ()) {
            let v2: i64 = v0_1.l0.get().clone() + 1_i64;
            v0_1.l0.set(v2);
            ()
        }
        pub fn closure10(
            v0_1: LrcPtr<MutCell<Option<Spiral_wasm::US5>>>,
            v1: Option<Spiral_wasm::US5>,
        ) -> LrcPtr<MutCell<Option<Spiral_wasm::US5>>> {
            v0_1.set(v1);
            v0_1
        }
        pub fn closure11(
            v0_1: Option<i64>,
            v1: Func1<Option<Spiral_wasm::US5>, LrcPtr<MutCell<Option<Spiral_wasm::US5>>>>,
            unitVar: (),
        ) {
            {
                let value: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> = v1(match &v0_1 {
                    None => None::<Spiral_wasm::US5>,
                    Some(v0_1_0_0) => {
                        let x: i64 = v0_1_0_0.clone();
                        Some((Func0::new({
                            let x = x.clone();
                            move || Spiral_wasm::US5::US5_0(x)
                        }))())
                    }
                });
                ()
            }
            ()
        }
        pub fn method7() -> string {
            string("hh:mm:ss")
        }
        pub fn method8() -> string {
            string("HH:mm:ss")
        }
        pub fn method9() -> string {
            string("\u{001b}[0m")
        }
        pub fn method10() -> string {
            string("")
        }
        pub fn closure12(v0_1: LrcPtr<Spiral_wasm::Mut3>, v1: string, unitVar: ()) {
            let v3: string = append(v0_1.l0.get().clone(), v1);
            v0_1.l0.set(v3);
            ()
        }
        pub fn closure14(v0_1: string, unitVar: ()) {
            printfn!("{0}", v0_1);
        }
        pub fn closure13(unitVar: (), v0_1: string) {
            let v3: () = {
                Spiral_wasm::closure14(v0_1, ());
                ()
            };
            ()
        }
        pub fn closure7(v0_1: Array<string>, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                0_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Verbose")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_bright_black;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("args")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v674: () = {
                    Spiral_wasm::closure12(
                        v638.clone(),
                        sprintf!("{}", sprintf!("{:?}", v0_1)),
                        (),
                    );
                    ()
                };
                let v683: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v745: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.main"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v745.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v745)
            }
        }
        pub fn method11() -> string {
            string("exception")
        }
        pub fn method13() -> string {
            string("wasm")
        }
        pub fn closure15(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                0_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Verbose")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_bright_black;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("wasm_path")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v722: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v722.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v722)
            }
        }
        pub fn closure16(
            v0_1: u8,
            v1: near_workspaces::Worker<near_workspaces::network::Sandbox>,
            unitVar: (),
        ) {
            fn v3() {
                Spiral_wasm::closure8((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v37: () = {
                v3();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v69: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                0_i32
                    >= find(
                        v69,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v77: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v81: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v114: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v119: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v114 = _v114.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v114.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v134: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v114.get().clone());
                let v174: DateTime = match &v134 {
                    Spiral_wasm::US5::US5_0(v134_0_0) => {
                        let v148: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v134 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v148.hours(),
                            v148.minutes(),
                            v148.seconds(),
                            v148.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v179: string = {
                    let provider: string = Spiral_wasm::method7();
                    v174.toString(provider)
                };
                let v571: string = padLeft(toLower(string("Verbose")), 7_i32, ' ');
                let v587: &str = inline_colorization::color_bright_black;
                let v589: &str = &*v571;
                let v591: &str = inline_colorization::color_reset;
                let v593: string = string("format!(\"{v587}{v589}{v591}\")");
                let v594: std::string::String = format!("{v587}{v589}{v591}");
                let v596: string = fable_library_rust::String_::fromString(v594);
                let v637: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v639: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v646: () = {
                    Spiral_wasm::closure12(v639.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v655: () = {
                    Spiral_wasm::closure12(v639.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v664: () = {
                    Spiral_wasm::closure12(v639.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v672: () = {
                    Spiral_wasm::closure12(v639.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v681: () = {
                    Spiral_wasm::closure12(v639.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v690: () = {
                    Spiral_wasm::closure12(v639.clone(), sprintf!("{}", string("worker")), ());
                    ()
                };
                let v698: () = {
                    Spiral_wasm::closure12(v639.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v703: std::string::String = format!("{:#?}", v1);
                let v733: () = {
                    Spiral_wasm::closure12(
                        v639.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v703)),
                        (),
                    );
                    ()
                };
                let v742: () = {
                    Spiral_wasm::closure12(v639.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v784: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v179,
                            v596,
                            v637,
                            string("spiral_wasm.run"),
                            v639.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v784.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v784)
            }
        }
        pub fn closure17(v0_1: u8, v1: near_workspaces::Contract, unitVar: ()) {
            fn v3() {
                Spiral_wasm::closure8((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v37: () = {
                v3();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v69: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                0_i32
                    >= find(
                        v69,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v77: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v81: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v114: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v119: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v114 = _v114.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v114.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v134: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v114.get().clone());
                let v174: DateTime = match &v134 {
                    Spiral_wasm::US5::US5_0(v134_0_0) => {
                        let v148: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v134 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v148.hours(),
                            v148.minutes(),
                            v148.seconds(),
                            v148.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v179: string = {
                    let provider: string = Spiral_wasm::method7();
                    v174.toString(provider)
                };
                let v571: string = padLeft(toLower(string("Verbose")), 7_i32, ' ');
                let v587: &str = inline_colorization::color_bright_black;
                let v589: &str = &*v571;
                let v591: &str = inline_colorization::color_reset;
                let v593: string = string("format!(\"{v587}{v589}{v591}\")");
                let v594: std::string::String = format!("{v587}{v589}{v591}");
                let v596: string = fable_library_rust::String_::fromString(v594);
                let v637: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v639: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v646: () = {
                    Spiral_wasm::closure12(v639.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v655: () = {
                    Spiral_wasm::closure12(v639.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v664: () = {
                    Spiral_wasm::closure12(v639.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v672: () = {
                    Spiral_wasm::closure12(v639.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v681: () = {
                    Spiral_wasm::closure12(v639.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v690: () = {
                    Spiral_wasm::closure12(v639.clone(), sprintf!("{}", string("contract")), ());
                    ()
                };
                let v698: () = {
                    Spiral_wasm::closure12(v639.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v703: std::string::String = format!("{:#?}", v1);
                let v733: () = {
                    Spiral_wasm::closure12(
                        v639.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v703)),
                        (),
                    );
                    ()
                };
                let v742: () = {
                    Spiral_wasm::closure12(v639.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v784: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v179,
                            v596,
                            v637,
                            string("spiral_wasm.run"),
                            v639.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v784.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v784)
            }
        }
        pub fn closure18(v0_1: u8, v1: near_workspaces::result::ExecutionFinalResult, unitVar: ()) {
            fn v3() {
                Spiral_wasm::closure8((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v37: () = {
                v3();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v69: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                0_i32
                    >= find(
                        v69,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v77: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v81: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v114: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v119: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v114 = _v114.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v114.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v134: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v114.get().clone());
                let v174: DateTime = match &v134 {
                    Spiral_wasm::US5::US5_0(v134_0_0) => {
                        let v148: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v134 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v148.hours(),
                            v148.minutes(),
                            v148.seconds(),
                            v148.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v179: string = {
                    let provider: string = Spiral_wasm::method7();
                    v174.toString(provider)
                };
                let v571: string = padLeft(toLower(string("Verbose")), 7_i32, ' ');
                let v587: &str = inline_colorization::color_bright_black;
                let v589: &str = &*v571;
                let v591: &str = inline_colorization::color_reset;
                let v593: string = string("format!(\"{v587}{v589}{v591}\")");
                let v594: std::string::String = format!("{v587}{v589}{v591}");
                let v596: string = fable_library_rust::String_::fromString(v594);
                let v637: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v639: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v646: () = {
                    Spiral_wasm::closure12(v639.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v655: () = {
                    Spiral_wasm::closure12(v639.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v664: () = {
                    Spiral_wasm::closure12(v639.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v672: () = {
                    Spiral_wasm::closure12(v639.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v681: () = {
                    Spiral_wasm::closure12(v639.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v690: () = {
                    Spiral_wasm::closure12(v639.clone(), sprintf!("{}", string("result")), ());
                    ()
                };
                let v698: () = {
                    Spiral_wasm::closure12(v639.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v703: std::string::String = format!("{:#?}", v1);
                let v733: () = {
                    Spiral_wasm::closure12(
                        v639.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v703)),
                        (),
                    );
                    ()
                };
                let v742: () = {
                    Spiral_wasm::closure12(v639.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v784: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v179,
                            v596,
                            v637,
                            string("spiral_wasm.run"),
                            v639.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v784.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v784)
            }
        }
        pub fn closure20(v0_1: std::string::String, unitVar: ()) {
            printfn!("{0}", v0_1);
        }
        pub fn closure19(unitVar: (), v0_1: std::string::String) {
            let v3: () = {
                Spiral_wasm::closure20(v0_1, ());
                ()
            };
            ()
        }
        pub fn closure21(v0_1: u8, v1: u64, v2: f64, unitVar: ()) {
            fn v4() {
                Spiral_wasm::closure8((), ());
            }
            let v5: () = {
                v4();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v38: () = {
                v4();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v70: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v70,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v78: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v82: () = {
                    v4();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v115: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v120: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v115 = _v115.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v115.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v135: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v115.get().clone());
                let v175: DateTime = match &v135 {
                    Spiral_wasm::US5::US5_0(v135_0_0) => {
                        let v149: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v135 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v149.hours(),
                            v149.minutes(),
                            v149.seconds(),
                            v149.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v180: string = {
                    let provider: string = Spiral_wasm::method7();
                    v175.toString(provider)
                };
                let v572: string = padLeft(toLower(string("Debug")), 7_i32, ' ');
                let v588: &str = inline_colorization::color_bright_blue;
                let v590: &str = &*v572;
                let v592: &str = inline_colorization::color_reset;
                let v594: string = string("format!(\"{v588}{v590}{v592}\")");
                let v595: std::string::String = format!("{v588}{v590}{v592}");
                let v597: string = fable_library_rust::String_::fromString(v595);
                let v638: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v640: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v647: () = {
                    Spiral_wasm::closure12(v640.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v656: () = {
                    Spiral_wasm::closure12(v640.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v665: () = {
                    Spiral_wasm::closure12(v640.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v673: () = {
                    Spiral_wasm::closure12(v640.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v682: () = {
                    Spiral_wasm::closure12(v640.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v691: () = {
                    Spiral_wasm::closure12(
                        v640.clone(),
                        sprintf!("{}", string("total_gas_burnt_usd")),
                        (),
                    );
                    ()
                };
                let v699: () = {
                    Spiral_wasm::closure12(v640.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v707: () = {
                    Spiral_wasm::closure12(v640.clone(), sprintf!("{:+.6}", v2), ());
                    ()
                };
                let v715: () = {
                    Spiral_wasm::closure12(v640.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v724: () = {
                    Spiral_wasm::closure12(
                        v640.clone(),
                        sprintf!("{}", string("total_gas_burnt")),
                        (),
                    );
                    ()
                };
                let v732: () = {
                    Spiral_wasm::closure12(v640.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v740: () = {
                    Spiral_wasm::closure12(v640.clone(), sprintf!("{}", v1), ());
                    ()
                };
                let v749: () = {
                    Spiral_wasm::closure12(v640.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v791: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v180,
                            v597,
                            v638,
                            string("near_workspaces.print_usd"),
                            v640.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v791.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v791)
            }
        }
        pub fn closure23(v0_1: bool, v1: u64, v2: f64, v3: u128, v4: f64, unitVar: ()) {
            fn v6() {
                Spiral_wasm::closure8((), ());
            }
            let v7: () = {
                v6();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v40: () = {
                v6();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v72: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v72,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v80: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v84: () = {
                    v6();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v117: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v122: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v117 = _v117.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v117.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v137: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v117.get().clone());
                let v177: DateTime = match &v137 {
                    Spiral_wasm::US5::US5_0(v137_0_0) => {
                        let v151: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v137 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v151.hours(),
                            v151.minutes(),
                            v151.seconds(),
                            v151.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v182: string = {
                    let provider: string = Spiral_wasm::method7();
                    v177.toString(provider)
                };
                let v574: string = padLeft(toLower(string("Debug")), 7_i32, ' ');
                let v590: &str = inline_colorization::color_bright_blue;
                let v592: &str = &*v574;
                let v594: &str = inline_colorization::color_reset;
                let v596: string = string("format!(\"{v590}{v592}{v594}\")");
                let v597: std::string::String = format!("{v590}{v592}{v594}");
                let v599: string = fable_library_rust::String_::fromString(v597);
                let v640: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v642: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v649: () = {
                    Spiral_wasm::closure12(v642.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v658: () = {
                    Spiral_wasm::closure12(v642.clone(), sprintf!("{}", string("is_success")), ());
                    ()
                };
                let v667: () = {
                    Spiral_wasm::closure12(v642.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v678: () = {
                    Spiral_wasm::closure12(
                        v642.clone(),
                        sprintf!(
                            "{}",
                            if v0_1 {
                                string("true")
                            } else {
                                string("false")
                            }
                        ),
                        (),
                    );
                    ()
                };
                let v687: () = {
                    Spiral_wasm::closure12(v642.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v696: () = {
                    Spiral_wasm::closure12(
                        v642.clone(),
                        sprintf!("{}", string("gas_burnt_usd")),
                        (),
                    );
                    ()
                };
                let v704: () = {
                    Spiral_wasm::closure12(v642.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v712: () = {
                    Spiral_wasm::closure12(v642.clone(), sprintf!("{:+.6}", v2), ());
                    ()
                };
                let v720: () = {
                    Spiral_wasm::closure12(v642.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v729: () = {
                    Spiral_wasm::closure12(
                        v642.clone(),
                        sprintf!("{}", string("tokens_burnt_usd")),
                        (),
                    );
                    ()
                };
                let v737: () = {
                    Spiral_wasm::closure12(v642.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v745: () = {
                    Spiral_wasm::closure12(v642.clone(), sprintf!("{:+.6}", v4), ());
                    ()
                };
                let v753: () = {
                    Spiral_wasm::closure12(v642.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v762: () = {
                    Spiral_wasm::closure12(v642.clone(), sprintf!("{}", string("gas_burnt")), ());
                    ()
                };
                let v770: () = {
                    Spiral_wasm::closure12(v642.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v778: () = {
                    Spiral_wasm::closure12(v642.clone(), sprintf!("{}", v1), ());
                    ()
                };
                let v786: () = {
                    Spiral_wasm::closure12(v642.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v795: () = {
                    Spiral_wasm::closure12(
                        v642.clone(),
                        sprintf!("{}", string("tokens_burnt")),
                        (),
                    );
                    ()
                };
                let v803: () = {
                    Spiral_wasm::closure12(v642.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v808: std::string::String = format!("{:#?}", v3);
                let v838: () = {
                    Spiral_wasm::closure12(
                        v642.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v808)),
                        (),
                    );
                    ()
                };
                let v847: () = {
                    Spiral_wasm::closure12(v642.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v889: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v182,
                            v599,
                            v640,
                            string("near_workspaces.print_usd / outcome"),
                            v642.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v889.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v889)
            }
        }
        pub fn closure22(unitVar: (), v0_1: near_workspaces::result::ExecutionOutcome) {
            let v2: bool = v0_1.clone().is_success();
            let v4: near_workspaces::types::Gas = v0_1.clone().gas_burnt;
            let v6: u64 = v4.as_gas();
            let v10: f64 = v6 as f64 / 10000000000000000.0_f64 * 6.68_f64;
            let v12: near_workspaces::types::NearToken = v0_1.tokens_burnt;
            let v14: u128 = v12.as_yoctonear();
            let v21: () = {
                Spiral_wasm::closure23(
                    v2,
                    v6,
                    v10,
                    v14.clone(),
                    v14 as f64 / 1E+24_f64 * 6.68_f64,
                    (),
                );
                ()
            };
            ()
        }
        pub fn closure24(
            v0_1: Result<
                near_workspaces::result::ExecutionSuccess,
                near_workspaces::result::ExecutionFailure,
            >,
            unitVar: (),
        ) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                0_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Verbose")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_bright_black;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("result2")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v668: std::string::String = format!("{:#?}", v0_1);
                let v698: () = {
                    Spiral_wasm::closure12(
                        v638.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v668)),
                        (),
                    );
                    ()
                };
                let v707: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v749: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v749.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v749)
            }
        }
        pub fn method15(
            v0_1: near_workspaces::result::ExecutionFinalResult,
        ) -> near_workspaces::result::ExecutionFinalResult {
            v0_1
        }
        pub fn closure25(
            v0_1: Vec<&near_workspaces::result::ExecutionOutcome>,
            v1: i32,
            unitVar: (),
        ) {
            fn v3() {
                Spiral_wasm::closure8((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v37: () = {
                v3();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v69: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                0_i32
                    >= find(
                        v69,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v77: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v81: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v114: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v119: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v114 = _v114.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v114.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v134: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v114.get().clone());
                let v174: DateTime = match &v134 {
                    Spiral_wasm::US5::US5_0(v134_0_0) => {
                        let v148: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v134 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v148.hours(),
                            v148.minutes(),
                            v148.seconds(),
                            v148.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v179: string = {
                    let provider: string = Spiral_wasm::method7();
                    v174.toString(provider)
                };
                let v571: string = padLeft(toLower(string("Verbose")), 7_i32, ' ');
                let v587: &str = inline_colorization::color_bright_black;
                let v589: &str = &*v571;
                let v591: &str = inline_colorization::color_reset;
                let v593: string = string("format!(\"{v587}{v589}{v591}\")");
                let v594: std::string::String = format!("{v587}{v589}{v591}");
                let v596: string = fable_library_rust::String_::fromString(v594);
                let v637: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v639: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v646: () = {
                    Spiral_wasm::closure12(v639.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v655: () = {
                    Spiral_wasm::closure12(
                        v639.clone(),
                        sprintf!("{}", string("receipt_failures_len")),
                        (),
                    );
                    ()
                };
                let v664: () = {
                    Spiral_wasm::closure12(v639.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v672: () = {
                    Spiral_wasm::closure12(v639.clone(), sprintf!("{}", v1), ());
                    ()
                };
                let v681: () = {
                    Spiral_wasm::closure12(v639.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v690: () = {
                    Spiral_wasm::closure12(
                        v639.clone(),
                        sprintf!("{}", string("receipt_failures")),
                        (),
                    );
                    ()
                };
                let v698: () = {
                    Spiral_wasm::closure12(v639.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v703: std::string::String = format!("{:#?}", v0_1);
                let v733: () = {
                    Spiral_wasm::closure12(
                        v639.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v703)),
                        (),
                    );
                    ()
                };
                let v742: () = {
                    Spiral_wasm::closure12(v639.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v784: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v179,
                            v596,
                            v637,
                            string("spiral_wasm.run"),
                            v639.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v784.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v784)
            }
        }
        pub fn method16(
            v0_1: near_workspaces::result::ExecutionFinalResult,
        ) -> near_workspaces::result::ExecutionFinalResult {
            v0_1
        }
        pub fn closure26(
            v0_1: Vec<near_workspaces::result::ExecutionOutcome>,
            v1: i32,
            unitVar: (),
        ) {
            fn v3() {
                Spiral_wasm::closure8((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v37: () = {
                v3();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v69: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                0_i32
                    >= find(
                        v69,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v77: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v81: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v114: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v119: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v114 = _v114.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v114.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v134: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v114.get().clone());
                let v174: DateTime = match &v134 {
                    Spiral_wasm::US5::US5_0(v134_0_0) => {
                        let v148: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v134 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v148.hours(),
                            v148.minutes(),
                            v148.seconds(),
                            v148.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v179: string = {
                    let provider: string = Spiral_wasm::method7();
                    v174.toString(provider)
                };
                let v571: string = padLeft(toLower(string("Verbose")), 7_i32, ' ');
                let v587: &str = inline_colorization::color_bright_black;
                let v589: &str = &*v571;
                let v591: &str = inline_colorization::color_reset;
                let v593: string = string("format!(\"{v587}{v589}{v591}\")");
                let v594: std::string::String = format!("{v587}{v589}{v591}");
                let v596: string = fable_library_rust::String_::fromString(v594);
                let v637: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v639: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v646: () = {
                    Spiral_wasm::closure12(v639.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v655: () = {
                    Spiral_wasm::closure12(
                        v639.clone(),
                        sprintf!("{}", string("receipt_outcomes_len")),
                        (),
                    );
                    ()
                };
                let v664: () = {
                    Spiral_wasm::closure12(v639.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v672: () = {
                    Spiral_wasm::closure12(v639.clone(), sprintf!("{}", v1), ());
                    ()
                };
                let v681: () = {
                    Spiral_wasm::closure12(v639.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v690: () = {
                    Spiral_wasm::closure12(
                        v639.clone(),
                        sprintf!("{}", string("receipt_outcomes")),
                        (),
                    );
                    ()
                };
                let v698: () = {
                    Spiral_wasm::closure12(v639.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v703: std::string::String = format!("{:#?}", v0_1);
                let v733: () = {
                    Spiral_wasm::closure12(
                        v639.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v703)),
                        (),
                    );
                    ()
                };
                let v742: () = {
                    Spiral_wasm::closure12(v639.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v784: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v179,
                            v596,
                            v637,
                            string("spiral_wasm.run"),
                            v639.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v784.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v784)
            }
        }
        pub fn closure27(
            v0_1: Result<std::string::String, near_workspaces::error::Error>,
            unitVar: (),
        ) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                0_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Verbose")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_bright_black;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("json")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v668: std::string::String = format!("{:#?}", v0_1);
                let v698: () = {
                    Spiral_wasm::closure12(
                        v638.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v668)),
                        (),
                    );
                    ()
                };
                let v707: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v749: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v749.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v749)
            }
        }
        pub fn closure28(
            v0_1: Result<std::string::String, near_workspaces::error::Error>,
            unitVar: (),
        ) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                0_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Verbose")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_bright_black;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("borsh")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v668: std::string::String = format!("{:#?}", v0_1);
                let v698: () = {
                    Spiral_wasm::closure12(
                        v638.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v668)),
                        (),
                    );
                    ()
                };
                let v707: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v749: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v749.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v749)
            }
        }
        pub fn method17(
            v0_1: Result<Spiral_wasm::US4, anyhow::Error>,
        ) -> Result<Spiral_wasm::US4, anyhow::Error> {
            v0_1
        }
        pub fn method14(
            v0_1: Vec<u8>,
            v1: u8,
        ) -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Spiral_wasm::US4, anyhow::Error>>>,
        > {
            let v3: bool = true;
            let __future_init = Box::pin(async move {
                //;
                let v5: Result<
                    near_workspaces::Worker<near_workspaces::network::Sandbox>,
                    near_workspaces::error::Error,
                > = near_workspaces::sandbox().await;
                let v7: near_workspaces::Worker<near_workspaces::network::Sandbox> = v5?;
                let v10: () = {
                    Spiral_wasm::closure16(v1, v7.clone(), ());
                    ()
                };
                let v866: std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<
                                near_workspaces::Contract,
                                near_workspaces::error::Error,
                            >,
                        >,
                    >,
                > = Box::pin(v7.dev_deploy(&v0_1));
                let v868: Result<near_workspaces::Contract, near_workspaces::error::Error> =
                    v866.await;
                let v870: near_workspaces::Contract = v868?;
                let v873: () = {
                    Spiral_wasm::closure17(v1, v870.clone(), ());
                    ()
                };
                let v1730: near_workspaces::operations::CallTransaction =
                    v870.call(&*string("state_main"));
                let v1732: std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<
                                near_workspaces::result::ExecutionFinalResult,
                                near_workspaces::error::Error,
                            >,
                        >,
                    >,
                > = Box::pin(v1730.transact());
                let v1734: Result<
                    near_workspaces::result::ExecutionFinalResult,
                    near_workspaces::error::Error,
                > = v1732.await;
                let v1736: near_workspaces::result::ExecutionFinalResult = v1734?;
                let v1739: () = {
                    Spiral_wasm::closure18(v1, v1736.clone(), ());
                    ()
                };
                let v2595: Vec<&str> = v1736.logs();
                let v2597: bool = true;
                let _vec_map: Vec<_> = v2595
                    .into_iter()
                    .map(|x| {
                        //;
                        let v2599: &str = x;
                        let v2601: std::string::String = String::from(v2599);
                        let v2603: bool = true;
                        v2601
                    })
                    .collect::<Vec<_>>();
                let v2605: Vec<std::string::String> = _vec_map;
                let v2608: bool = true;
                v2605.iter().for_each(|x| {
                    Func1::new(move |v: std::string::String| Spiral_wasm::closure19((), v))(
                        x.clone(),
                    );
                }); //;
                let v2610: near_workspaces::types::Gas = v1736.clone().total_gas_burnt;
                let v2612: u64 = v2610.as_gas();
                let v2619: () = {
                    Spiral_wasm::closure21(
                        v1,
                        v2612,
                        v2612 as f64 / 10000000000000000.0_f64 * 6.68_f64,
                        (),
                    );
                    ()
                };
                let v3481: near_workspaces::result::ExecutionFinalResult = v1736.clone();
                let v3483: Vec<&near_workspaces::result::ExecutionOutcome> = v3481.outcomes();
                let v3485 = v3483.into_iter();
                let v3487 = v3485.cloned();
                let v3490: bool = true;
                v3487.for_each(|x| {
                    Func1::new(move |v_1: near_workspaces::result::ExecutionOutcome| {
                        Spiral_wasm::closure22((), v_1)
                    })(x)
                });
                let v3495: () = {
                    Spiral_wasm::closure24(v1736.clone().into_result(), ());
                    ()
                };
                let v4316: near_workspaces::result::ExecutionFinalResult =
                    Spiral_wasm::method15(v1736.clone());
                let v4318: Vec<&near_workspaces::result::ExecutionOutcome> =
                    v4316.receipt_failures();
                let v4322: i32 = v4318.clone().len() as i32;
                let v4325: () = {
                    Spiral_wasm::closure25(v4318.clone(), v4322, ());
                    ()
                };
                let v5180: near_workspaces::result::ExecutionFinalResult =
                    Spiral_wasm::method16(v1736.clone());
                let v5182: &[near_workspaces::result::ExecutionOutcome] = v5180.receipt_outcomes();
                let v5184: Vec<near_workspaces::result::ExecutionOutcome> = v5182.into();
                let v5188: i32 = v5184.clone().len() as i32;
                let v5191: () = {
                    Spiral_wasm::closure26(v5184, v5188, ());
                    ()
                };
                let v6050: () = {
                    Spiral_wasm::closure27(v1736.clone().json(), ());
                    ()
                };
                let v6875: () = {
                    Spiral_wasm::closure28(v1736.borsh(), ());
                    ()
                };
                let v7697: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v7704: () = {
                    Spiral_wasm::closure12(v7697.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v7713: () = {
                    Spiral_wasm::closure12(
                        v7697.clone(),
                        sprintf!("{}", string("receipt_failures")),
                        (),
                    );
                    ()
                };
                let v7722: () = {
                    Spiral_wasm::closure12(v7697.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v7727: std::string::String = format!("{:#?}", v4318);
                let v7757: () = {
                    Spiral_wasm::closure12(
                        v7697.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v7727)),
                        (),
                    );
                    ()
                };
                let v7766: () = {
                    Spiral_wasm::closure12(v7697.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v7775: () = {
                    Spiral_wasm::closure12(
                        v7697.clone(),
                        sprintf!("{}", string("receipt_outcomes_len")),
                        (),
                    );
                    ()
                };
                let v7783: () = {
                    Spiral_wasm::closure12(v7697.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v7791: () = {
                    Spiral_wasm::closure12(v7697.clone(), sprintf!("{}", v5188), ());
                    ()
                };
                let v7799: () = {
                    Spiral_wasm::closure12(v7697.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v7808: () = {
                    Spiral_wasm::closure12(v7697.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v7816: () = {
                    Spiral_wasm::closure12(v7697.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v7824: () = {
                    Spiral_wasm::closure12(v7697.clone(), sprintf!("{}", v1), ());
                    ()
                };
                let v7833: () = {
                    Spiral_wasm::closure12(v7697.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v7836: string = v7697.l0.get().clone();
                let v7849: Result<Spiral_wasm::US4, anyhow::Error> =
                    Spiral_wasm::method17(if v4322 > 0_i32 {
                        Ok::<Spiral_wasm::US4, anyhow::Error>(Spiral_wasm::US4::US4_0(
                            v7836.clone(),
                        ))
                    } else {
                        if v5188 > 1_i32 {
                            Ok::<Spiral_wasm::US4, anyhow::Error>(Spiral_wasm::US4::US4_1)
                        } else {
                            let v7844: anyhow::Error = anyhow::anyhow!(v7836);
                            Err(v7844)
                        }
                    });
                let v7853: string = string("true; v7849 });  // rust.fix_closure\'");
                let v7854: bool = true;
                v7849
            }); // rust.fix_closure';
            let v7856 = __future_init;
            v7856
        }
        pub fn closure29(unitVar: (), v0_1: anyhow::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method18() -> Func1<anyhow::Error, std::string::String> {
            Func1::new(move |v: anyhow::Error| Spiral_wasm::closure29((), v))
        }
        pub fn closure30(unitVar: (), v0_1: Spiral_wasm::US4) -> Spiral_wasm::US6 {
            Spiral_wasm::US6::US6_0(v0_1)
        }
        pub fn closure31(unitVar: (), v0_1: std::string::String) -> Spiral_wasm::US6 {
            Spiral_wasm::US6::US6_1(v0_1)
        }
        pub fn closure32(v0_1: std::string::String, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                3_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Warning")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_yellow;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 1_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v702: std::string::String = format!("{:#?}", v0_1);
                let v732: () = {
                    Spiral_wasm::closure12(
                        v638.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v702)),
                        (),
                    );
                    ()
                };
                let v741: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v783: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Error error"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v783.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v783)
            }
        }
        pub fn closure33(v0_1: std::string::String, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                3_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Warning")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_yellow;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 2_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v702: std::string::String = format!("{:#?}", v0_1);
                let v732: () = {
                    Spiral_wasm::closure12(
                        v638.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v702)),
                        (),
                    );
                    ()
                };
                let v741: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v783: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Error error"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v783.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v783)
            }
        }
        pub fn closure34(v0_1: std::string::String, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                3_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Warning")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_yellow;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 3_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v702: std::string::String = format!("{:#?}", v0_1);
                let v732: () = {
                    Spiral_wasm::closure12(
                        v638.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v702)),
                        (),
                    );
                    ()
                };
                let v741: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v783: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Error error"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v783.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v783)
            }
        }
        pub fn closure35(v0_1: std::string::String, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                3_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Warning")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_yellow;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 4_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v702: std::string::String = format!("{:#?}", v0_1);
                let v732: () = {
                    Spiral_wasm::closure12(
                        v638.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v702)),
                        (),
                    );
                    ()
                };
                let v741: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v783: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Error error"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v783.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v783)
            }
        }
        pub fn closure36(v0_1: std::string::String, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                3_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Warning")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_yellow;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 5_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v702: std::string::String = format!("{:#?}", v0_1);
                let v732: () = {
                    Spiral_wasm::closure12(
                        v638.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v702)),
                        (),
                    );
                    ()
                };
                let v741: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v783: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Error error"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v783.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v783)
            }
        }
        pub fn closure37(v0_1: std::string::String, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                3_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Warning")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_yellow;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 6_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v702: std::string::String = format!("{:#?}", v0_1);
                let v732: () = {
                    Spiral_wasm::closure12(
                        v638.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v702)),
                        (),
                    );
                    ()
                };
                let v741: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v783: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Error error"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v783.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v783)
            }
        }
        pub fn closure38(v0_1: std::string::String, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                3_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Warning")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_yellow;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 7_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v702: std::string::String = format!("{:#?}", v0_1);
                let v732: () = {
                    Spiral_wasm::closure12(
                        v638.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v702)),
                        (),
                    );
                    ()
                };
                let v741: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v783: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Error error"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v783.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v783)
            }
        }
        pub fn closure39(v0_1: std::string::String, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                3_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Warning")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_yellow;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 8_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v702: std::string::String = format!("{:#?}", v0_1);
                let v732: () = {
                    Spiral_wasm::closure12(
                        v638.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v702)),
                        (),
                    );
                    ()
                };
                let v741: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v783: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Error error"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v783.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v783)
            }
        }
        pub fn closure40(v0_1: std::string::String, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                3_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Warning")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_yellow;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 9_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v702: std::string::String = format!("{:#?}", v0_1);
                let v732: () = {
                    Spiral_wasm::closure12(
                        v638.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v702)),
                        (),
                    );
                    ()
                };
                let v741: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v783: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Error error"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v783.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v783)
            }
        }
        pub fn closure41(v0_1: std::string::String, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                3_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Warning")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_yellow;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 10_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v702: std::string::String = format!("{:#?}", v0_1);
                let v732: () = {
                    Spiral_wasm::closure12(
                        v638.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v702)),
                        (),
                    );
                    ()
                };
                let v741: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v783: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Error error"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v783.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v783)
            }
        }
        pub fn closure42(v0_1: std::string::String, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                3_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Warning")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_yellow;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 11_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v702: std::string::String = format!("{:#?}", v0_1);
                let v732: () = {
                    Spiral_wasm::closure12(
                        v638.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v702)),
                        (),
                    );
                    ()
                };
                let v741: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v783: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Error error"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v783.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v783)
            }
        }
        pub fn closure43(v0_1: std::string::String, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                3_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Warning")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_yellow;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 12_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v702: std::string::String = format!("{:#?}", v0_1);
                let v732: () = {
                    Spiral_wasm::closure12(
                        v638.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v702)),
                        (),
                    );
                    ()
                };
                let v741: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v783: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Error error"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v783.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v783)
            }
        }
        pub fn closure44(v0_1: std::string::String, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                3_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Warning")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_yellow;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 13_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v702: std::string::String = format!("{:#?}", v0_1);
                let v732: () = {
                    Spiral_wasm::closure12(
                        v638.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v702)),
                        (),
                    );
                    ()
                };
                let v741: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v783: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Error error"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v783.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v783)
            }
        }
        pub fn closure45(v0_1: std::string::String, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                3_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Warning")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_yellow;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 14_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v702: std::string::String = format!("{:#?}", v0_1);
                let v732: () = {
                    Spiral_wasm::closure12(
                        v638.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v702)),
                        (),
                    );
                    ()
                };
                let v741: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v783: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Error error"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v783.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v783)
            }
        }
        pub fn closure46(v0_1: std::string::String, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                3_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Warning")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_yellow;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 15_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v702: std::string::String = format!("{:#?}", v0_1);
                let v732: () = {
                    Spiral_wasm::closure12(
                        v638.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v702)),
                        (),
                    );
                    ()
                };
                let v741: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v783: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Error error"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v783.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v783)
            }
        }
        pub fn closure47(v0_1: std::string::String, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                3_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Warning")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_yellow;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 16_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v702: std::string::String = format!("{:#?}", v0_1);
                let v732: () = {
                    Spiral_wasm::closure12(
                        v638.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v702)),
                        (),
                    );
                    ()
                };
                let v741: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v783: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Error error"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v783.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v783)
            }
        }
        pub fn closure48(v0_1: std::string::String, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                3_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Warning")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_yellow;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 17_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v702: std::string::String = format!("{:#?}", v0_1);
                let v732: () = {
                    Spiral_wasm::closure12(
                        v638.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v702)),
                        (),
                    );
                    ()
                };
                let v741: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v783: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Error error"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v783.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v783)
            }
        }
        pub fn closure49(v0_1: std::string::String, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                3_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Warning")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_yellow;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 18_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v702: std::string::String = format!("{:#?}", v0_1);
                let v732: () = {
                    Spiral_wasm::closure12(
                        v638.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v702)),
                        (),
                    );
                    ()
                };
                let v741: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v783: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Error error"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v783.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v783)
            }
        }
        pub fn closure50(v0_1: std::string::String, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                3_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Warning")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_yellow;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 19_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v702: std::string::String = format!("{:#?}", v0_1);
                let v732: () = {
                    Spiral_wasm::closure12(
                        v638.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v702)),
                        (),
                    );
                    ()
                };
                let v741: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v783: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Error error"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v783.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v783)
            }
        }
        pub fn closure51(v0_1: std::string::String, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                3_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Warning")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_yellow;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 20_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v702: std::string::String = format!("{:#?}", v0_1);
                let v732: () = {
                    Spiral_wasm::closure12(
                        v638.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v702)),
                        (),
                    );
                    ()
                };
                let v741: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v783: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Error error"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v783.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v783)
            }
        }
        pub fn closure52(v0_1: std::string::String, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                3_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Warning")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_yellow;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 21_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v702: std::string::String = format!("{:#?}", v0_1);
                let v732: () = {
                    Spiral_wasm::closure12(
                        v638.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v702)),
                        (),
                    );
                    ()
                };
                let v741: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v783: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Error error"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v783.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v783)
            }
        }
        pub fn closure53(v0_1: std::string::String, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                3_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Warning")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_yellow;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 22_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v702: std::string::String = format!("{:#?}", v0_1);
                let v732: () = {
                    Spiral_wasm::closure12(
                        v638.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v702)),
                        (),
                    );
                    ()
                };
                let v741: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v783: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Error error"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v783.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v783)
            }
        }
        pub fn closure54(v0_1: std::string::String, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                3_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Warning")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_yellow;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 23_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v702: std::string::String = format!("{:#?}", v0_1);
                let v732: () = {
                    Spiral_wasm::closure12(
                        v638.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v702)),
                        (),
                    );
                    ()
                };
                let v741: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v783: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Error error"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v783.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v783)
            }
        }
        pub fn closure55(v0_1: std::string::String, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                3_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Warning")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_yellow;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 24_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v702: std::string::String = format!("{:#?}", v0_1);
                let v732: () = {
                    Spiral_wasm::closure12(
                        v638.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v702)),
                        (),
                    );
                    ()
                };
                let v741: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v783: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Error error"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v783.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v783)
            }
        }
        pub fn closure56(v0_1: std::string::String, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                3_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Warning")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_yellow;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 25_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v702: std::string::String = format!("{:#?}", v0_1);
                let v732: () = {
                    Spiral_wasm::closure12(
                        v638.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v702)),
                        (),
                    );
                    ()
                };
                let v741: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v783: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Error error"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v783.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v783)
            }
        }
        pub fn closure57(v0_1: std::string::String, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                3_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Warning")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_yellow;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 26_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v702: std::string::String = format!("{:#?}", v0_1);
                let v732: () = {
                    Spiral_wasm::closure12(
                        v638.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v702)),
                        (),
                    );
                    ()
                };
                let v741: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v783: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Error error"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v783.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v783)
            }
        }
        pub fn closure58(v0_1: std::string::String, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                3_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Warning")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_yellow;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 27_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v702: std::string::String = format!("{:#?}", v0_1);
                let v732: () = {
                    Spiral_wasm::closure12(
                        v638.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v702)),
                        (),
                    );
                    ()
                };
                let v741: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v783: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Error error"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v783.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v783)
            }
        }
        pub fn closure59(v0_1: std::string::String, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                3_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Warning")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_yellow;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 28_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v702: std::string::String = format!("{:#?}", v0_1);
                let v732: () = {
                    Spiral_wasm::closure12(
                        v638.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v702)),
                        (),
                    );
                    ()
                };
                let v741: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v783: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Error error"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v783.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v783)
            }
        }
        pub fn closure60(v0_1: std::string::String, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                3_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Warning")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_yellow;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 29_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v702: std::string::String = format!("{:#?}", v0_1);
                let v732: () = {
                    Spiral_wasm::closure12(
                        v638.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v702)),
                        (),
                    );
                    ()
                };
                let v741: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v783: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Error error"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v783.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v783)
            }
        }
        pub fn method19() -> u8 {
            30_u8
        }
        pub fn method20(v0_1: u8) -> Spiral_wasm::US7 {
            Spiral_wasm::US7::US7_1(v0_1)
        }
        pub fn method21() -> u8 {
            29_u8
        }
        pub fn method22(v0_1: u8) -> Spiral_wasm::US7 {
            Spiral_wasm::US7::US7_0(v0_1)
        }
        pub fn closure61(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_bright_red;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 29_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v705: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v714: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v756: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Ok (Some error)"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v756.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v756)
            }
        }
        pub fn method23() -> u8 {
            28_u8
        }
        pub fn closure62(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_bright_red;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 28_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v705: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v714: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v756: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Ok (Some error)"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v756.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v756)
            }
        }
        pub fn method24() -> u8 {
            27_u8
        }
        pub fn closure63(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_bright_red;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 27_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v705: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v714: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v756: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Ok (Some error)"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v756.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v756)
            }
        }
        pub fn method25() -> u8 {
            26_u8
        }
        pub fn closure64(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_bright_red;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 26_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v705: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v714: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v756: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Ok (Some error)"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v756.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v756)
            }
        }
        pub fn method26() -> u8 {
            25_u8
        }
        pub fn closure65(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_bright_red;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 25_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v705: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v714: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v756: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Ok (Some error)"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v756.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v756)
            }
        }
        pub fn method27() -> u8 {
            24_u8
        }
        pub fn closure66(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_bright_red;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 24_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v705: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v714: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v756: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Ok (Some error)"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v756.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v756)
            }
        }
        pub fn method28() -> u8 {
            23_u8
        }
        pub fn closure67(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_bright_red;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 23_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v705: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v714: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v756: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Ok (Some error)"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v756.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v756)
            }
        }
        pub fn method29() -> u8 {
            22_u8
        }
        pub fn closure68(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_bright_red;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 22_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v705: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v714: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v756: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Ok (Some error)"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v756.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v756)
            }
        }
        pub fn method30() -> u8 {
            21_u8
        }
        pub fn closure69(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_bright_red;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 21_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v705: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v714: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v756: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Ok (Some error)"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v756.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v756)
            }
        }
        pub fn method31() -> u8 {
            20_u8
        }
        pub fn closure70(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_bright_red;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 20_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v705: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v714: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v756: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Ok (Some error)"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v756.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v756)
            }
        }
        pub fn method32() -> u8 {
            19_u8
        }
        pub fn closure71(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_bright_red;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 19_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v705: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v714: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v756: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Ok (Some error)"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v756.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v756)
            }
        }
        pub fn method33() -> u8 {
            18_u8
        }
        pub fn closure72(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_bright_red;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 18_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v705: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v714: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v756: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Ok (Some error)"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v756.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v756)
            }
        }
        pub fn method34() -> u8 {
            17_u8
        }
        pub fn closure73(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_bright_red;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 17_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v705: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v714: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v756: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Ok (Some error)"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v756.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v756)
            }
        }
        pub fn method35() -> u8 {
            16_u8
        }
        pub fn closure74(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_bright_red;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 16_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v705: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v714: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v756: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Ok (Some error)"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v756.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v756)
            }
        }
        pub fn method36() -> u8 {
            15_u8
        }
        pub fn closure75(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_bright_red;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 15_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v705: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v714: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v756: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Ok (Some error)"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v756.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v756)
            }
        }
        pub fn method37() -> u8 {
            14_u8
        }
        pub fn closure76(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_bright_red;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 14_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v705: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v714: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v756: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Ok (Some error)"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v756.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v756)
            }
        }
        pub fn method38() -> u8 {
            13_u8
        }
        pub fn closure77(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_bright_red;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 13_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v705: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v714: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v756: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Ok (Some error)"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v756.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v756)
            }
        }
        pub fn method39() -> u8 {
            12_u8
        }
        pub fn closure78(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_bright_red;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 12_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v705: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v714: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v756: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Ok (Some error)"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v756.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v756)
            }
        }
        pub fn method40() -> u8 {
            11_u8
        }
        pub fn closure79(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_bright_red;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 11_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v705: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v714: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v756: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Ok (Some error)"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v756.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v756)
            }
        }
        pub fn method41() -> u8 {
            10_u8
        }
        pub fn closure80(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_bright_red;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 10_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v705: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v714: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v756: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Ok (Some error)"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v756.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v756)
            }
        }
        pub fn method42() -> u8 {
            9_u8
        }
        pub fn closure81(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_bright_red;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 9_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v705: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v714: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v756: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Ok (Some error)"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v756.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v756)
            }
        }
        pub fn method43() -> u8 {
            8_u8
        }
        pub fn closure82(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_bright_red;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 8_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v705: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v714: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v756: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Ok (Some error)"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v756.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v756)
            }
        }
        pub fn method44() -> u8 {
            7_u8
        }
        pub fn closure83(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_bright_red;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 7_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v705: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v714: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v756: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Ok (Some error)"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v756.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v756)
            }
        }
        pub fn method45() -> u8 {
            6_u8
        }
        pub fn closure84(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_bright_red;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 6_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v705: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v714: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v756: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Ok (Some error)"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v756.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v756)
            }
        }
        pub fn method46() -> u8 {
            5_u8
        }
        pub fn closure85(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_bright_red;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 5_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v705: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v714: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v756: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Ok (Some error)"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v756.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v756)
            }
        }
        pub fn method47() -> u8 {
            4_u8
        }
        pub fn closure86(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_bright_red;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 4_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v705: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v714: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v756: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Ok (Some error)"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v756.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v756)
            }
        }
        pub fn method48() -> u8 {
            3_u8
        }
        pub fn closure87(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_bright_red;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 3_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v705: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v714: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v756: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Ok (Some error)"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v756.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v756)
            }
        }
        pub fn method49() -> u8 {
            2_u8
        }
        pub fn closure88(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_bright_red;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 2_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v705: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v714: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v756: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Ok (Some error)"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v756.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v756)
            }
        }
        pub fn method50() -> u8 {
            1_u8
        }
        pub fn closure89(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_bright_red;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v671: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", 1_u8), ());
                    ()
                };
                let v680: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v689: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v697: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v705: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v714: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v756: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run / Ok (Some error)"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v756.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v756)
            }
        }
        pub fn closure90(v0_1: Spiral_wasm::US7, unitVar: ()) {
            fn v2() {
                Spiral_wasm::closure8((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v36: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v68: Spiral_wasm::US3 = (patternInput_1.4.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                0_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_wasm::US3::US3_0, 0_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_1, 1_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_2, 2_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_3, 3_i32)),
                            LrcPtr::new((Spiral_wasm::US3::US3_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_wasm::closure9(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_wasm::Mut0>,
                    LrcPtr<Spiral_wasm::Mut1>,
                    LrcPtr<Spiral_wasm::Mut2>,
                    LrcPtr<Spiral_wasm::Mut3>,
                    LrcPtr<Spiral_wasm::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
                let _v113: LrcPtr<MutCell<Option<Spiral_wasm::US5>>> =
                    refCell(None::<Spiral_wasm::US5>);
                let v118: () = {
                    Spiral_wasm::closure11(
                        patternInput_2.5.clone(),
                        Func1::new({
                            let _v113 = _v113.clone();
                            move |v: Option<Spiral_wasm::US5>| {
                                Spiral_wasm::closure10(_v113.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v133: Spiral_wasm::US5 =
                    defaultValue(Spiral_wasm::US5::US5_1, _v113.get().clone());
                let v173: DateTime = match &v133 {
                    Spiral_wasm::US5::US5_0(v133_0_0) => {
                        let v147: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v133 {
                                Spiral_wasm::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v147.hours(),
                            v147.minutes(),
                            v147.seconds(),
                            v147.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v178: string = {
                    let provider: string = Spiral_wasm::method7();
                    v173.toString(provider)
                };
                let v570: string = padLeft(toLower(string("Verbose")), 7_i32, ' ');
                let v586: &str = inline_colorization::color_bright_black;
                let v588: &str = &*v570;
                let v590: &str = inline_colorization::color_reset;
                let v592: string = string("format!(\"{v586}{v588}{v590}\")");
                let v593: std::string::String = format!("{v586}{v588}{v590}");
                let v595: string = fable_library_rust::String_::fromString(v593);
                let v636: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v638: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                    l0: MutCell::new(Spiral_wasm::method10()),
                });
                let v645: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v654: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string("retries")), ());
                    ()
                };
                let v663: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v674: () = {
                    Spiral_wasm::closure12(
                        v638.clone(),
                        sprintf!("{}", sprintf!("{:?}", v0_1)),
                        (),
                    );
                    ()
                };
                let v683: () = {
                    Spiral_wasm::closure12(v638.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v725: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v178,
                            v595,
                            v636,
                            string("spiral_wasm.run"),
                            v638.l0.get().clone()
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v725.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v725)
            }
        }
        pub fn method51(v0_1: Result<u8, anyhow::Error>) -> Result<u8, anyhow::Error> {
            v0_1
        }
        pub fn method12(
            v0_1: clap::ArgMatches,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<u8, anyhow::Error>>>>
        {
            let v2: bool = true;
            let __future_init = Box::pin(async move {
                //;
                let v3: string = Spiral_wasm::method13();
                let v5: &str = &*v3;
                let v7: Option<std::string::String> = clap::ArgMatches::get_one(&v0_1, v5).cloned();
                let _v8: LrcPtr<MutCell<Option<Spiral_wasm::US0>>> =
                    refCell(None::<Spiral_wasm::US0>);
                let v13: () = {
                    Spiral_wasm::closure2(
                        v7,
                        Func1::new({
                            let _v8 = _v8.clone();
                            move |v: Option<Spiral_wasm::US0>| Spiral_wasm::closure1(_v8.clone(), v)
                        }),
                        (),
                    );
                    ()
                };
                let v28: Spiral_wasm::US0 =
                    defaultValue(Spiral_wasm::US0::US0_1, _v8.get().clone());
                let v35: std::string::String = match &v28 {
                    Spiral_wasm::US0::US0_0(v28_0_0) => match &v28 {
                        Spiral_wasm::US0::US0_0(x) => x.clone(),
                        _ => unreachable!(),
                    },
                    _ => panic!("{}", string("Option does not have a value."),),
                };
                let v37: string = fable_library_rust::String_::fromString(v35);
                let v40: () = {
                    Spiral_wasm::closure15(v37.clone(), ());
                    ()
                };
                let v835: Result<Vec<u8>, std::io::Error> = std::fs::read(&*v37);
                let v837: Vec<u8> = v835?;
                let v839: std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<Spiral_wasm::US4, anyhow::Error>>>,
                > = Spiral_wasm::method14(v837.clone(), 1_u8);
                let v841: Result<Spiral_wasm::US4, anyhow::Error> = v839.await;
                let v842 = Spiral_wasm::method18();
                let v844: Result<Spiral_wasm::US4, std::string::String> = v841.map_err(|x| v842(x));
                fn v845(v_1: Spiral_wasm::US4) -> Spiral_wasm::US6 {
                    Spiral_wasm::closure30((), v_1)
                }
                fn v846(v_2: std::string::String) -> Spiral_wasm::US6 {
                    Spiral_wasm::closure31((), v_2)
                }
                let v847: Spiral_wasm::US6 = match &v844 {
                    Err(v844_1_0) => v846(v844_1_0.clone()),
                    Ok(v844_0_0) => v845(v844_0_0.clone()),
                };
                let v51613: std::pin::Pin<Box<dyn std::future::Future<Output = Spiral_wasm::US7>>> =
                    match &v847 {
                        Spiral_wasm::US6::US6_0(v847_0_0) => {
                            let v848: Spiral_wasm::US4 = v847_0_0.clone();
                            match &v848 {
                                Spiral_wasm::US4::US4_0(v848_0_0) => {
                                    let v876: () = {
                                        Spiral_wasm::closure89(
                                            match &v848 {
                                                Spiral_wasm::US4::US4_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            },
                                            (),
                                        );
                                        ()
                                    };
                                    let v1705: bool = true;
                                    let __future_init = Box::pin(async move {
                                        //;
                                        let v1707: bool = true;
                                        let __future_init = Box::pin(async move {
                                            //;
                                            let v1708: u8 = Spiral_wasm::method50();
                                            let v1712: string =
                                                string("true; v1708 });  // rust.fix_closure\'");
                                            let v1713: bool = true;
                                            v1708
                                        }); // rust.fix_closure';
                                        let v1715 = __future_init;
                                        let v1717: std::pin::Pin<
                                            Box<dyn std::future::Future<Output = u8>>,
                                        > = v1715;
                                        let v1720: Spiral_wasm::US7 =
                                            Spiral_wasm::method20(v1717.await);
                                        let v1722: string =
                                            string("true; v1720 });  // rust.fix_closure\'");
                                        let v1723: bool = true;
                                        v1720
                                    }); // rust.fix_closure';
                                    let v1725 = __future_init;
                                    v1725
                                }
                                _ => {
                                    let v850: bool = true;
                                    let __future_init = Box::pin(async move {
                                        //;
                                        let v852: bool = true;
                                        let __future_init = Box::pin(async move {
                                            //;
                                            let v853: u8 = Spiral_wasm::method50();
                                            let v857: string =
                                                string("true; v853 });  // rust.fix_closure\'");
                                            let v858: bool = true;
                                            v853
                                        }); // rust.fix_closure';
                                        let v860 = __future_init;
                                        let v862: std::pin::Pin<
                                            Box<dyn std::future::Future<Output = u8>>,
                                        > = v860;
                                        let v865: Spiral_wasm::US7 =
                                            Spiral_wasm::method22(v862.await);
                                        let v867: string =
                                            string("true; v865 });  // rust.fix_closure\'");
                                        let v868: bool = true;
                                        v865
                                    }); // rust.fix_closure';
                                    let v870 = __future_init;
                                    v870
                                }
                            }
                        }
                        Spiral_wasm::US6::US6_1(v847_1_0) => {
                            let v1733: () = {
                                Spiral_wasm::closure32(v847_1_0.clone(), ());
                                ()
                            };
                            let v2589: std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                        Output = Result<Spiral_wasm::US4, anyhow::Error>,
                                    >,
                                >,
                            > = Spiral_wasm::method14(v837.clone(), 2_u8);
                            let v2591: Result<Spiral_wasm::US4, anyhow::Error> = v2589.await;
                            let v2592 = Spiral_wasm::method18();
                            let v2594: Result<Spiral_wasm::US4, std::string::String> =
                                v2591.map_err(|x| v2592(x));
                            let v2595: Spiral_wasm::US6 = match &v2594 {
                                Err(v2594_1_0) => v846(v2594_1_0.clone()),
                                Ok(v2594_0_0) => v845(v2594_0_0.clone()),
                            };
                            match &v2595 {
                                Spiral_wasm::US6::US6_0(v2595_0_0) => {
                                    let v2596: Spiral_wasm::US4 = v2595_0_0.clone();
                                    match &v2596 {
                                        Spiral_wasm::US4::US4_0(v2596_0_0) => {
                                            let v2624: () = {
                                                Spiral_wasm::closure88(
                                                    match &v2596 {
                                                        Spiral_wasm::US4::US4_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    },
                                                    (),
                                                );
                                                ()
                                            };
                                            let v3453: bool = true;
                                            let __future_init = Box::pin(async move {
                                                //;
                                                let v3455: bool = true;
                                                let __future_init = Box::pin(async move {
                                                    //;
                                                    let v3456: u8 = Spiral_wasm::method49();
                                                    let v3460: string = string(
                                                        "true; v3456 });  // rust.fix_closure\'",
                                                    );
                                                    let v3461: bool = true;
                                                    v3456
                                                }); // rust.fix_closure';
                                                let v3463 = __future_init;
                                                let v3465: std::pin::Pin<
                                                    Box<dyn std::future::Future<Output = u8>>,
                                                > = v3463;
                                                let v3468: Spiral_wasm::US7 =
                                                    Spiral_wasm::method20(v3465.await);
                                                let v3470: string = string(
                                                    "true; v3468 });  // rust.fix_closure\'",
                                                );
                                                let v3471: bool = true;
                                                v3468
                                            }); // rust.fix_closure';
                                            let v3473 = __future_init;
                                            v3473
                                        }
                                        _ => {
                                            let v2598: bool = true;
                                            let __future_init = Box::pin(async move {
                                                //;
                                                let v2600: bool = true;
                                                let __future_init = Box::pin(async move {
                                                    //;
                                                    let v2601: u8 = Spiral_wasm::method49();
                                                    let v2605: string = string(
                                                        "true; v2601 });  // rust.fix_closure\'",
                                                    );
                                                    let v2606: bool = true;
                                                    v2601
                                                }); // rust.fix_closure';
                                                let v2608 = __future_init;
                                                let v2610: std::pin::Pin<
                                                    Box<dyn std::future::Future<Output = u8>>,
                                                > = v2608;
                                                let v2613: Spiral_wasm::US7 =
                                                    Spiral_wasm::method22(v2610.await);
                                                let v2615: string = string(
                                                    "true; v2613 });  // rust.fix_closure\'",
                                                );
                                                let v2616: bool = true;
                                                v2613
                                            }); // rust.fix_closure';
                                            let v2618 = __future_init;
                                            v2618
                                        }
                                    }
                                }
                                Spiral_wasm::US6::US6_1(v2595_1_0) => {
                                    let v3481: () = {
                                        Spiral_wasm::closure33(v2595_1_0.clone(), ());
                                        ()
                                    };
                                    let v4337: std::pin::Pin<
                                        Box<
                                            dyn std::future::Future<
                                                Output = Result<Spiral_wasm::US4, anyhow::Error>,
                                            >,
                                        >,
                                    > = Spiral_wasm::method14(v837.clone(), 3_u8);
                                    let v4339: Result<Spiral_wasm::US4, anyhow::Error> =
                                        v4337.await;
                                    let v4340 = Spiral_wasm::method18();
                                    let v4342: Result<Spiral_wasm::US4, std::string::String> =
                                        v4339.map_err(|x| v4340(x));
                                    let v4343: Spiral_wasm::US6 = match &v4342 {
                                        Err(v4342_1_0) => v846(v4342_1_0.clone()),
                                        Ok(v4342_0_0) => v845(v4342_0_0.clone()),
                                    };
                                    match &v4343 {
                                        Spiral_wasm::US6::US6_0(v4343_0_0) => {
                                            let v4344: Spiral_wasm::US4 = v4343_0_0.clone();
                                            match &v4344 {
                                                Spiral_wasm::US4::US4_0(v4344_0_0) => {
                                                    let v4372: () = {
                                                        Spiral_wasm::closure87(
                                                            match &v4344 {
                                                                Spiral_wasm::US4::US4_0(x) => {
                                                                    x.clone()
                                                                }
                                                                _ => unreachable!(),
                                                            },
                                                            (),
                                                        );
                                                        ()
                                                    };
                                                    let v5201: bool = true;
                                                    let __future_init = Box::pin(async move {
                                                        //;
                                                        let v5203: bool = true;
                                                        let __future_init = Box::pin(async move {
                                                            //;
                                                            let v5204: u8 = Spiral_wasm::method48();
                                                            let v5208: string =
                                                    string("true; v5204 });  // rust.fix_closure\'");
                                                            let v5209: bool = true;
                                                            v5204
                                                        }); // rust.fix_closure';
                                                        let v5211 = __future_init;
                                                        let v5213: std::pin::Pin<
                                                            Box<
                                                                dyn std::future::Future<
                                                                    Output = u8,
                                                                >,
                                                            >,
                                                        > = v5211;
                                                        let v5216: Spiral_wasm::US7 =
                                                            Spiral_wasm::method20(v5213.await);
                                                        let v5218: string =
                                                    string("true; v5216 });  // rust.fix_closure\'");
                                                        let v5219: bool = true;
                                                        v5216
                                                    }); // rust.fix_closure';
                                                    let v5221 = __future_init;
                                                    v5221
                                                }
                                                _ => {
                                                    let v4346: bool = true;
                                                    let __future_init = Box::pin(async move {
                                                        //;
                                                        let v4348: bool = true;
                                                        let __future_init = Box::pin(async move {
                                                            //;
                                                            let v4349: u8 = Spiral_wasm::method48();
                                                            let v4353: string =
                                                    string("true; v4349 });  // rust.fix_closure\'");
                                                            let v4354: bool = true;
                                                            v4349
                                                        }); // rust.fix_closure';
                                                        let v4356 = __future_init;
                                                        let v4358: std::pin::Pin<
                                                            Box<
                                                                dyn std::future::Future<
                                                                    Output = u8,
                                                                >,
                                                            >,
                                                        > = v4356;
                                                        let v4361: Spiral_wasm::US7 =
                                                            Spiral_wasm::method22(v4358.await);
                                                        let v4363: string =
                                                    string("true; v4361 });  // rust.fix_closure\'");
                                                        let v4364: bool = true;
                                                        v4361
                                                    }); // rust.fix_closure';
                                                    let v4366 = __future_init;
                                                    v4366
                                                }
                                            }
                                        }
                                        Spiral_wasm::US6::US6_1(v4343_1_0) => {
                                            let v5229: () = {
                                                Spiral_wasm::closure34(v4343_1_0.clone(), ());
                                                ()
                                            };
                                            let v6085: std::pin::Pin<
                                                Box<
                                                    dyn std::future::Future<
                                                        Output = Result<
                                                            Spiral_wasm::US4,
                                                            anyhow::Error,
                                                        >,
                                                    >,
                                                >,
                                            > = Spiral_wasm::method14(v837.clone(), 4_u8);
                                            let v6087: Result<Spiral_wasm::US4, anyhow::Error> =
                                                v6085.await;
                                            let v6088 = Spiral_wasm::method18();
                                            let v6090: Result<
                                                Spiral_wasm::US4,
                                                std::string::String,
                                            > = v6087.map_err(|x| v6088(x));
                                            let v6091: Spiral_wasm::US6 = match &v6090 {
                                                Err(v6090_1_0) => v846(v6090_1_0.clone()),
                                                Ok(v6090_0_0) => v845(v6090_0_0.clone()),
                                            };
                                            match &v6091 {
                                                Spiral_wasm::US6::US6_0(v6091_0_0) => {
                                                    let v6092: Spiral_wasm::US4 = v6091_0_0.clone();
                                                    match &v6092 {
                                                        Spiral_wasm::US4::US4_0(v6092_0_0) => {
                                                            let v6120: () = {
                                                                Spiral_wasm::closure86(
                                                                    match &v6092 {
                                                                        Spiral_wasm::US4::US4_0(
                                                                            x,
                                                                        ) => x.clone(),
                                                                        _ => unreachable!(),
                                                                    },
                                                                    (),
                                                                );
                                                                ()
                                                            };
                                                            let v6949: bool = true;
                                                            let __future_init = Box::pin(
                                                                async move {
                                                                    //;
                                                                    let v6951: bool = true;
                                                                    let __future_init = Box::pin(
                                                                        async move {
                                                                            //;
                                                                            let v6952: u8 =
                                                            Spiral_wasm::method47();
                                                                            let v6956: string =
                                                            string("true; v6952 });  // rust.fix_closure\'");
                                                                            let v6957: bool = true;
                                                                            v6952
                                                                        },
                                                                    ); // rust.fix_closure';
                                                                    let v6959 = __future_init;
                                                                    let v6961: std::pin::Pin<
                                                                        Box<
                                                                            dyn std::future::Future<
                                                                                Output = u8,
                                                                            >,
                                                                        >,
                                                                    > = v6959;
                                                                    let v6964: Spiral_wasm::US7 =
                                                                        Spiral_wasm::method20(
                                                                            v6961.await,
                                                                        );
                                                                    let v6966: string =
                                                            string("true; v6964 });  // rust.fix_closure\'");
                                                                    let v6967: bool = true;
                                                                    v6964
                                                                },
                                                            ); // rust.fix_closure';
                                                            let v6969 = __future_init;
                                                            v6969
                                                        }
                                                        _ => {
                                                            let v6094: bool = true;
                                                            let __future_init = Box::pin(
                                                                async move {
                                                                    //;
                                                                    let v6096: bool = true;
                                                                    let __future_init = Box::pin(
                                                                        async move {
                                                                            //;
                                                                            let v6097: u8 =
                                                            Spiral_wasm::method47();
                                                                            let v6101: string =
                                                            string("true; v6097 });  // rust.fix_closure\'");
                                                                            let v6102: bool = true;
                                                                            v6097
                                                                        },
                                                                    ); // rust.fix_closure';
                                                                    let v6104 = __future_init;
                                                                    let v6106: std::pin::Pin<
                                                                        Box<
                                                                            dyn std::future::Future<
                                                                                Output = u8,
                                                                            >,
                                                                        >,
                                                                    > = v6104;
                                                                    let v6109: Spiral_wasm::US7 =
                                                                        Spiral_wasm::method22(
                                                                            v6106.await,
                                                                        );
                                                                    let v6111: string =
                                                            string("true; v6109 });  // rust.fix_closure\'");
                                                                    let v6112: bool = true;
                                                                    v6109
                                                                },
                                                            ); // rust.fix_closure';
                                                            let v6114 = __future_init;
                                                            v6114
                                                        }
                                                    }
                                                }
                                                Spiral_wasm::US6::US6_1(v6091_1_0) => {
                                                    let v6977: () = {
                                                        Spiral_wasm::closure35(
                                                            v6091_1_0.clone(),
                                                            (),
                                                        );
                                                        ()
                                                    };
                                                    let v7833: std::pin::Pin<
                                                        Box<
                                                            dyn std::future::Future<
                                                                Output = Result<
                                                                    Spiral_wasm::US4,
                                                                    anyhow::Error,
                                                                >,
                                                            >,
                                                        >,
                                                    > = Spiral_wasm::method14(v837.clone(), 5_u8);
                                                    let v7835: Result<
                                                        Spiral_wasm::US4,
                                                        anyhow::Error,
                                                    > = v7833.await;
                                                    let v7836 = Spiral_wasm::method18();
                                                    let v7838: Result<
                                                        Spiral_wasm::US4,
                                                        std::string::String,
                                                    > = v7835.map_err(|x| v7836(x));
                                                    let v7839: Spiral_wasm::US6 = match &v7838 {
                                                        Err(v7838_1_0) => v846(v7838_1_0.clone()),
                                                        Ok(v7838_0_0) => v845(v7838_0_0.clone()),
                                                    };
                                                    match &v7839 {
                                                        Spiral_wasm::US6::US6_0(v7839_0_0) => {
                                                            let v7840: Spiral_wasm::US4 =
                                                                v7839_0_0.clone();
                                                            match &v7840 {
                                                                Spiral_wasm::US4::US4_0(
                                                                    v7840_0_0,
                                                                ) => {
                                                                    let v7868: () = {
                                                                        Spiral_wasm::closure85(match &v7840
                                                                                                   {
                                                                                                   Spiral_wasm::US4::US4_0(x)
                                                                                                   =>
                                                                                                   x.clone(),
                                                                                                   _
                                                                                                   =>
                                                                                                   unreachable!(),
                                                                                               },
                                                                                               ());
                                                                        ()
                                                                    };
                                                                    let v8697: bool = true;
                                                                    let __future_init = Box::pin(
                                                                        async move {
                                                                            //;
                                                                            let v8699: bool = true;
                                                                            let __future_init =
                                                                                Box::pin(
                                                                                    async move {
                                                                                        //;
                                                                                        let v8700:
                                                                        u8 =
                                                                    Spiral_wasm::method46();
                                                                                        let v8704:
                                                                        string =
                                                                    string("true; v8700 });  // rust.fix_closure\'");
                                                                                        let v8705:
                                                                        bool =
                                                                    true;
                                                                                        v8700
                                                                                    },
                                                                                ); // rust.fix_closure';
                                                                            let v8707 =
                                                                                __future_init;
                                                                            let v8709:
                                                                        std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                    v8707;
                                                                            let v8712:
                                                                        Spiral_wasm::US7 =
                                                                    Spiral_wasm::method20(v8709.await);
                                                                            let v8714:
                                                                        string =
                                                                    string("true; v8712 });  // rust.fix_closure\'");
                                                                            let v8715: bool = true;
                                                                            v8712
                                                                        },
                                                                    ); // rust.fix_closure';
                                                                    let v8717 = __future_init;
                                                                    v8717
                                                                }
                                                                _ => {
                                                                    let v7842: bool = true;
                                                                    let __future_init = Box::pin(
                                                                        async move {
                                                                            //;
                                                                            let v7844: bool = true;
                                                                            let __future_init =
                                                                                Box::pin(
                                                                                    async move {
                                                                                        //;
                                                                                        let v7845:
                                                                        u8 =
                                                                    Spiral_wasm::method46();
                                                                                        let v7849:
                                                                        string =
                                                                    string("true; v7845 });  // rust.fix_closure\'");
                                                                                        let v7850:
                                                                        bool =
                                                                    true;
                                                                                        v7845
                                                                                    },
                                                                                ); // rust.fix_closure';
                                                                            let v7852 =
                                                                                __future_init;
                                                                            let v7854:
                                                                        std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                    v7852;
                                                                            let v7857:
                                                                        Spiral_wasm::US7 =
                                                                    Spiral_wasm::method22(v7854.await);
                                                                            let v7859:
                                                                        string =
                                                                    string("true; v7857 });  // rust.fix_closure\'");
                                                                            let v7860: bool = true;
                                                                            v7857
                                                                        },
                                                                    ); // rust.fix_closure';
                                                                    let v7862 = __future_init;
                                                                    v7862
                                                                }
                                                            }
                                                        }
                                                        Spiral_wasm::US6::US6_1(v7839_1_0) => {
                                                            let v8725: () = {
                                                                Spiral_wasm::closure36(
                                                                    v7839_1_0.clone(),
                                                                    (),
                                                                );
                                                                ()
                                                            };
                                                            let v9581: std::pin::Pin<
                                                                Box<
                                                                    dyn std::future::Future<
                                                                        Output = Result<
                                                                            Spiral_wasm::US4,
                                                                            anyhow::Error,
                                                                        >,
                                                                    >,
                                                                >,
                                                            > = Spiral_wasm::method14(
                                                                v837.clone(),
                                                                6_u8,
                                                            );
                                                            let v9583: Result<
                                                                Spiral_wasm::US4,
                                                                anyhow::Error,
                                                            > = v9581.await;
                                                            let v9584 = Spiral_wasm::method18();
                                                            let v9586: Result<
                                                                Spiral_wasm::US4,
                                                                std::string::String,
                                                            > = v9583.map_err(|x| v9584(x));
                                                            let v9587: Spiral_wasm::US6 =
                                                                match &v9586 {
                                                                    Err(v9586_1_0) => {
                                                                        v846(v9586_1_0.clone())
                                                                    }
                                                                    Ok(v9586_0_0) => {
                                                                        v845(v9586_0_0.clone())
                                                                    }
                                                                };
                                                            match &v9587 {
                                                                Spiral_wasm::US6::US6_0(
                                                                    v9587_0_0,
                                                                ) => {
                                                                    let v9588: Spiral_wasm::US4 =
                                                                        v9587_0_0.clone();
                                                                    match &v9588 {
                                                                        Spiral_wasm::US4::US4_0(
                                                                            v9588_0_0,
                                                                        ) => {
                                                                            let v9616: () = {
                                                                                Spiral_wasm::closure84(match &v9588
                                                                                                           {
                                                                                                           Spiral_wasm::US4::US4_0(x)
                                                                                                           =>
                                                                                                           x.clone(),
                                                                                                           _
                                                                                                           =>
                                                                                                           unreachable!(),
                                                                                                       },
                                                                                                       ());
                                                                                ()
                                                                            };
                                                                            let v10445: bool = true;
                                                                            let __future_init =
                                                                                Box::pin(
                                                                                    async move {
                                                                                        //;
                                                                                        let v10447:
                                                                                bool =
                                                                            true;
                                                                                        let __future_init =
                                                                                            Box::pin(
                                                                                                async move {
                                                                                                    //;
                                                                                                    let v10448:
                                                                                u8 =
                                                                            Spiral_wasm::method45();
                                                                                                    let v10452:
                                                                                string =
                                                                            string("true; v10448 });  // rust.fix_closure\'");
                                                                                                    let v10453:
                                                                                bool =
                                                                            true;
                                                                                                    v10448
                                                                                                },
                                                                                            ); // rust.fix_closure';
                                                                                        let v10455 =
                                                                            __future_init;
                                                                                        let v10457:
                                                                                std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                            v10455;
                                                                                        let v10460:
                                                                                Spiral_wasm::US7 =
                                                                            Spiral_wasm::method20(v10457.await);
                                                                                        let v10462:
                                                                                string =
                                                                            string("true; v10460 });  // rust.fix_closure\'");
                                                                                        let v10463:
                                                                                bool =
                                                                            true;
                                                                                        v10460
                                                                                    },
                                                                                ); // rust.fix_closure';
                                                                            let v10465 =
                                                                                __future_init;
                                                                            v10465
                                                                        }
                                                                        _ => {
                                                                            let v9590: bool = true;
                                                                            let __future_init =
                                                                                Box::pin(
                                                                                    async move {
                                                                                        //;
                                                                                        let v9592:
                                                                                bool =
                                                                            true;
                                                                                        let __future_init =
                                                                                            Box::pin(
                                                                                                async move {
                                                                                                    //;
                                                                                                    let v9593:
                                                                                u8 =
                                                                            Spiral_wasm::method45();
                                                                                                    let v9597:
                                                                                string =
                                                                            string("true; v9593 });  // rust.fix_closure\'");
                                                                                                    let v9598:
                                                                                bool =
                                                                            true;
                                                                                                    v9593
                                                                                                },
                                                                                            ); // rust.fix_closure';
                                                                                        let v9600 =
                                                                            __future_init;
                                                                                        let v9602:
                                                                                std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                            v9600;
                                                                                        let v9605:
                                                                                Spiral_wasm::US7 =
                                                                            Spiral_wasm::method22(v9602.await);
                                                                                        let v9607:
                                                                                string =
                                                                            string("true; v9605 });  // rust.fix_closure\'");
                                                                                        let v9608:
                                                                                bool =
                                                                            true;
                                                                                        v9605
                                                                                    },
                                                                                ); // rust.fix_closure';
                                                                            let v9610 =
                                                                                __future_init;
                                                                            v9610
                                                                        }
                                                                    }
                                                                }
                                                                Spiral_wasm::US6::US6_1(
                                                                    v9587_1_0,
                                                                ) => {
                                                                    let v10473: () = {
                                                                        Spiral_wasm::closure37(
                                                                            v9587_1_0.clone(),
                                                                            (),
                                                                        );
                                                                        ()
                                                                    };
                                                                    let v11329:
                                                                        std::pin::Pin<Box<dyn std::future::Future<Output = Result<Spiral_wasm::US4,
                                                                                                                                  anyhow::Error>>>> =
                                                                    Spiral_wasm::method14(v837.clone(),
                                                                                          7_u8);
                                                                    let v11331: Result<
                                                                        Spiral_wasm::US4,
                                                                        anyhow::Error,
                                                                    > = v11329.await;
                                                                    let v11332 =
                                                                        Spiral_wasm::method18();
                                                                    let v11334: Result<
                                                                        Spiral_wasm::US4,
                                                                        std::string::String,
                                                                    > = v11331
                                                                        .map_err(|x| v11332(x));
                                                                    let v11335: Spiral_wasm::US6 =
                                                                        match &v11334 {
                                                                            Err(v11334_1_0) => {
                                                                                v846(
                                                                                    v11334_1_0
                                                                                        .clone(),
                                                                                )
                                                                            }
                                                                            Ok(v11334_0_0) => v845(
                                                                                v11334_0_0.clone(),
                                                                            ),
                                                                        };
                                                                    match &v11335 {
                                                                        Spiral_wasm::US6::US6_0(
                                                                            v11335_0_0,
                                                                        ) => {
                                                                            let v11336:
                                                                                Spiral_wasm::US4 =
                                                                            v11335_0_0.clone();
                                                                            match &v11336
                                                                            {
                                                                            Spiral_wasm::US4::US4_0(v11336_0_0)
                                                                            =>
                                                                            {
                                                                                let v11364:
                                                                                        () =
                                                                                    {
                                                                                        Spiral_wasm::closure83(match &v11336
                                                                                                                   {
                                                                                                                   Spiral_wasm::US4::US4_0(x)
                                                                                                                   =>
                                                                                                                   x.clone(),
                                                                                                                   _
                                                                                                                   =>
                                                                                                                   unreachable!(),
                                                                                                               },
                                                                                                               ());
                                                                                        ()
                                                                                    };
                                                                                let v12193:
                                                                                        bool =
                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                let v12195:
                                                                                        bool =
                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                let v12196:
                                                                                        u8 =
                                                                                    Spiral_wasm::method44();
                                                                                let v12200:
                                                                                        string =
                                                                                    string("true; v12196 });  // rust.fix_closure\'");
                                                                                let v12201:
                                                                                        bool =
                                                                                    true; v12196 });  // rust.fix_closure';
                                                                                let v12203 =
                                                                                    __future_init;
                                                                                let v12205:
                                                                                        std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                    v12203;
                                                                                let v12208:
                                                                                        Spiral_wasm::US7 =
                                                                                    Spiral_wasm::method20(v12205.await);
                                                                                let v12210:
                                                                                        string =
                                                                                    string("true; v12208 });  // rust.fix_closure\'");
                                                                                let v12211:
                                                                                        bool =
                                                                                    true; v12208 });  // rust.fix_closure';
                                                                                let v12213 =
                                                                                    __future_init;
                                                                                v12213
                                                                            }
                                                                            _
                                                                            =>
                                                                            {
                                                                                let v11338:
                                                                                        bool =
                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                let v11340:
                                                                                        bool =
                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                let v11341:
                                                                                        u8 =
                                                                                    Spiral_wasm::method44();
                                                                                let v11345:
                                                                                        string =
                                                                                    string("true; v11341 });  // rust.fix_closure\'");
                                                                                let v11346:
                                                                                        bool =
                                                                                    true; v11341 });  // rust.fix_closure';
                                                                                let v11348 =
                                                                                    __future_init;
                                                                                let v11350:
                                                                                        std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                    v11348;
                                                                                let v11353:
                                                                                        Spiral_wasm::US7 =
                                                                                    Spiral_wasm::method22(v11350.await);
                                                                                let v11355:
                                                                                        string =
                                                                                    string("true; v11353 });  // rust.fix_closure\'");
                                                                                let v11356:
                                                                                        bool =
                                                                                    true; v11353 });  // rust.fix_closure';
                                                                                let v11358 =
                                                                                    __future_init;
                                                                                v11358
                                                                            }
                                                                        }
                                                                        }
                                                                        Spiral_wasm::US6::US6_1(
                                                                            v11335_1_0,
                                                                        ) => {
                                                                            let v12221: () = {
                                                                                Spiral_wasm::closure38(v11335_1_0.clone(),
                                                                                                       ());
                                                                                ()
                                                                            };
                                                                            let v13077:
                                                                                std::pin::Pin<Box<dyn std::future::Future<Output = Result<Spiral_wasm::US4,
                                                                                                                                          anyhow::Error>>>> =
                                                                            Spiral_wasm::method14(v837.clone(),
                                                                                                  8_u8);
                                                                            let v13079: Result<
                                                                                Spiral_wasm::US4,
                                                                                anyhow::Error,
                                                                            > = v13077.await;
                                                                            let v13080 =
                                                                            Spiral_wasm::method18();
                                                                            let v13082: Result<
                                                                                Spiral_wasm::US4,
                                                                                std::string::String,
                                                                            > = v13079.map_err(
                                                                                |x| v13080(x),
                                                                            );
                                                                            let v13083:
                                                                                Spiral_wasm::US6 =
                                                                            match &v13082
                                                                                {
                                                                                Err(v13082_1_0)
                                                                                =>
                                                                                v846(v13082_1_0.clone()),
                                                                                Ok(v13082_0_0)
                                                                                =>
                                                                                v845(v13082_0_0.clone()),
                                                                            };
                                                                            match &v13083
                                                                            {
                                                                            Spiral_wasm::US6::US6_0(v13083_0_0)
                                                                            =>
                                                                            {
                                                                                let v13084:
                                                                                        Spiral_wasm::US4 =
                                                                                    v13083_0_0.clone();
                                                                                match &v13084
                                                                                    {
                                                                                    Spiral_wasm::US4::US4_0(v13084_0_0)
                                                                                    =>
                                                                                    {
                                                                                        let v13112:
                                                                                                () =
                                                                                            {
                                                                                                Spiral_wasm::closure82(match &v13084
                                                                                                                           {
                                                                                                                           Spiral_wasm::US4::US4_0(x)
                                                                                                                           =>
                                                                                                                           x.clone(),
                                                                                                                           _
                                                                                                                           =>
                                                                                                                           unreachable!(),
                                                                                                                       },
                                                                                                                       ());
                                                                                                ()
                                                                                            };
                                                                                        let v13941:
                                                                                                bool =
                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                        let v13943:
                                                                                                bool =
                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                        let v13944:
                                                                                                u8 =
                                                                                            Spiral_wasm::method43();
                                                                                        let v13948:
                                                                                                string =
                                                                                            string("true; v13944 });  // rust.fix_closure\'");
                                                                                        let v13949:
                                                                                                bool =
                                                                                            true; v13944 });  // rust.fix_closure';
                                                                                        let v13951 =
                                                                                            __future_init;
                                                                                        let v13953:
                                                                                                std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                            v13951;
                                                                                        let v13956:
                                                                                                Spiral_wasm::US7 =
                                                                                            Spiral_wasm::method20(v13953.await);
                                                                                        let v13958:
                                                                                                string =
                                                                                            string("true; v13956 });  // rust.fix_closure\'");
                                                                                        let v13959:
                                                                                                bool =
                                                                                            true; v13956 });  // rust.fix_closure';
                                                                                        let v13961 =
                                                                                            __future_init;
                                                                                        v13961
                                                                                    }
                                                                                    _
                                                                                    =>
                                                                                    {
                                                                                        let v13086:
                                                                                                bool =
                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                        let v13088:
                                                                                                bool =
                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                        let v13089:
                                                                                                u8 =
                                                                                            Spiral_wasm::method43();
                                                                                        let v13093:
                                                                                                string =
                                                                                            string("true; v13089 });  // rust.fix_closure\'");
                                                                                        let v13094:
                                                                                                bool =
                                                                                            true; v13089 });  // rust.fix_closure';
                                                                                        let v13096 =
                                                                                            __future_init;
                                                                                        let v13098:
                                                                                                std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                            v13096;
                                                                                        let v13101:
                                                                                                Spiral_wasm::US7 =
                                                                                            Spiral_wasm::method22(v13098.await);
                                                                                        let v13103:
                                                                                                string =
                                                                                            string("true; v13101 });  // rust.fix_closure\'");
                                                                                        let v13104:
                                                                                                bool =
                                                                                            true; v13101 });  // rust.fix_closure';
                                                                                        let v13106 =
                                                                                            __future_init;
                                                                                        v13106
                                                                                    }
                                                                                }
                                                                            }
                                                                            Spiral_wasm::US6::US6_1(v13083_1_0)
                                                                            =>
                                                                            {
                                                                                let v13969:
                                                                                        () =
                                                                                    {
                                                                                        Spiral_wasm::closure39(v13083_1_0.clone(),
                                                                                                               ());
                                                                                        ()
                                                                                    };
                                                                                let v14825:
                                                                                        std::pin::Pin<Box<dyn std::future::Future<Output = Result<Spiral_wasm::US4,
                                                                                                                                                  anyhow::Error>>>> =
                                                                                    Spiral_wasm::method14(v837.clone(),
                                                                                                          9_u8);
                                                                                let v14827:
                                                                                        Result<Spiral_wasm::US4,
                                                                                               anyhow::Error> =
                                                                                    v14825.await;
                                                                                let v14828 =
                                                                                    Spiral_wasm::method18();
                                                                                let v14830:
                                                                                        Result<Spiral_wasm::US4,
                                                                                               std::string::String> =
                                                                                    v14827.map_err(|x| v14828(x));
                                                                                let v14831:
                                                                                        Spiral_wasm::US6 =
                                                                                    match &v14830
                                                                                        {
                                                                                        Err(v14830_1_0)
                                                                                        =>
                                                                                        v846(v14830_1_0.clone()),
                                                                                        Ok(v14830_0_0)
                                                                                        =>
                                                                                        v845(v14830_0_0.clone()),
                                                                                    };
                                                                                match &v14831
                                                                                    {
                                                                                    Spiral_wasm::US6::US6_0(v14831_0_0)
                                                                                    =>
                                                                                    {
                                                                                        let v14832:
                                                                                                Spiral_wasm::US4 =
                                                                                            v14831_0_0.clone();
                                                                                        match &v14832
                                                                                            {
                                                                                            Spiral_wasm::US4::US4_0(v14832_0_0)
                                                                                            =>
                                                                                            {
                                                                                                let v14860:
                                                                                                        () =
                                                                                                    {
                                                                                                        Spiral_wasm::closure81(match &v14832
                                                                                                                                   {
                                                                                                                                   Spiral_wasm::US4::US4_0(x)
                                                                                                                                   =>
                                                                                                                                   x.clone(),
                                                                                                                                   _
                                                                                                                                   =>
                                                                                                                                   unreachable!(),
                                                                                                                               },
                                                                                                                               ());
                                                                                                        ()
                                                                                                    };
                                                                                                let v15689:
                                                                                                        bool =
                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                let v15691:
                                                                                                        bool =
                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                let v15692:
                                                                                                        u8 =
                                                                                                    Spiral_wasm::method42();
                                                                                                let v15696:
                                                                                                        string =
                                                                                                    string("true; v15692 });  // rust.fix_closure\'");
                                                                                                let v15697:
                                                                                                        bool =
                                                                                                    true; v15692 });  // rust.fix_closure';
                                                                                                let v15699 =
                                                                                                    __future_init;
                                                                                                let v15701:
                                                                                                        std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                    v15699;
                                                                                                let v15704:
                                                                                                        Spiral_wasm::US7 =
                                                                                                    Spiral_wasm::method20(v15701.await);
                                                                                                let v15706:
                                                                                                        string =
                                                                                                    string("true; v15704 });  // rust.fix_closure\'");
                                                                                                let v15707:
                                                                                                        bool =
                                                                                                    true; v15704 });  // rust.fix_closure';
                                                                                                let v15709 =
                                                                                                    __future_init;
                                                                                                v15709
                                                                                            }
                                                                                            _
                                                                                            =>
                                                                                            {
                                                                                                let v14834:
                                                                                                        bool =
                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                let v14836:
                                                                                                        bool =
                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                let v14837:
                                                                                                        u8 =
                                                                                                    Spiral_wasm::method42();
                                                                                                let v14841:
                                                                                                        string =
                                                                                                    string("true; v14837 });  // rust.fix_closure\'");
                                                                                                let v14842:
                                                                                                        bool =
                                                                                                    true; v14837 });  // rust.fix_closure';
                                                                                                let v14844 =
                                                                                                    __future_init;
                                                                                                let v14846:
                                                                                                        std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                    v14844;
                                                                                                let v14849:
                                                                                                        Spiral_wasm::US7 =
                                                                                                    Spiral_wasm::method22(v14846.await);
                                                                                                let v14851:
                                                                                                        string =
                                                                                                    string("true; v14849 });  // rust.fix_closure\'");
                                                                                                let v14852:
                                                                                                        bool =
                                                                                                    true; v14849 });  // rust.fix_closure';
                                                                                                let v14854 =
                                                                                                    __future_init;
                                                                                                v14854
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    Spiral_wasm::US6::US6_1(v14831_1_0)
                                                                                    =>
                                                                                    {
                                                                                        let v15717:
                                                                                                () =
                                                                                            {
                                                                                                Spiral_wasm::closure40(v14831_1_0.clone(),
                                                                                                                       ());
                                                                                                ()
                                                                                            };
                                                                                        let v16573:
                                                                                                std::pin::Pin<Box<dyn std::future::Future<Output = Result<Spiral_wasm::US4,
                                                                                                                                                          anyhow::Error>>>> =
                                                                                            Spiral_wasm::method14(v837.clone(),
                                                                                                                  10_u8);
                                                                                        let v16575:
                                                                                                Result<Spiral_wasm::US4,
                                                                                                       anyhow::Error> =
                                                                                            v16573.await;
                                                                                        let v16576 =
                                                                                            Spiral_wasm::method18();
                                                                                        let v16578:
                                                                                                Result<Spiral_wasm::US4,
                                                                                                       std::string::String> =
                                                                                            v16575.map_err(|x| v16576(x));
                                                                                        let v16579:
                                                                                                Spiral_wasm::US6 =
                                                                                            match &v16578
                                                                                                {
                                                                                                Err(v16578_1_0)
                                                                                                =>
                                                                                                v846(v16578_1_0.clone()),
                                                                                                Ok(v16578_0_0)
                                                                                                =>
                                                                                                v845(v16578_0_0.clone()),
                                                                                            };
                                                                                        match &v16579
                                                                                            {
                                                                                            Spiral_wasm::US6::US6_0(v16579_0_0)
                                                                                            =>
                                                                                            {
                                                                                                let v16580:
                                                                                                        Spiral_wasm::US4 =
                                                                                                    v16579_0_0.clone();
                                                                                                match &v16580
                                                                                                    {
                                                                                                    Spiral_wasm::US4::US4_0(v16580_0_0)
                                                                                                    =>
                                                                                                    {
                                                                                                        let v16608:
                                                                                                                () =
                                                                                                            {
                                                                                                                Spiral_wasm::closure80(match &v16580
                                                                                                                                           {
                                                                                                                                           Spiral_wasm::US4::US4_0(x)
                                                                                                                                           =>
                                                                                                                                           x.clone(),
                                                                                                                                           _
                                                                                                                                           =>
                                                                                                                                           unreachable!(),
                                                                                                                                       },
                                                                                                                                       ());
                                                                                                                ()
                                                                                                            };
                                                                                                        let v17437:
                                                                                                                bool =
                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                        let v17439:
                                                                                                                bool =
                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                        let v17440:
                                                                                                                u8 =
                                                                                                            Spiral_wasm::method41();
                                                                                                        let v17444:
                                                                                                                string =
                                                                                                            string("true; v17440 });  // rust.fix_closure\'");
                                                                                                        let v17445:
                                                                                                                bool =
                                                                                                            true; v17440 });  // rust.fix_closure';
                                                                                                        let v17447 =
                                                                                                            __future_init;
                                                                                                        let v17449:
                                                                                                                std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                            v17447;
                                                                                                        let v17452:
                                                                                                                Spiral_wasm::US7 =
                                                                                                            Spiral_wasm::method20(v17449.await);
                                                                                                        let v17454:
                                                                                                                string =
                                                                                                            string("true; v17452 });  // rust.fix_closure\'");
                                                                                                        let v17455:
                                                                                                                bool =
                                                                                                            true; v17452 });  // rust.fix_closure';
                                                                                                        let v17457 =
                                                                                                            __future_init;
                                                                                                        v17457
                                                                                                    }
                                                                                                    _
                                                                                                    =>
                                                                                                    {
                                                                                                        let v16582:
                                                                                                                bool =
                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                        let v16584:
                                                                                                                bool =
                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                        let v16585:
                                                                                                                u8 =
                                                                                                            Spiral_wasm::method41();
                                                                                                        let v16589:
                                                                                                                string =
                                                                                                            string("true; v16585 });  // rust.fix_closure\'");
                                                                                                        let v16590:
                                                                                                                bool =
                                                                                                            true; v16585 });  // rust.fix_closure';
                                                                                                        let v16592 =
                                                                                                            __future_init;
                                                                                                        let v16594:
                                                                                                                std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                            v16592;
                                                                                                        let v16597:
                                                                                                                Spiral_wasm::US7 =
                                                                                                            Spiral_wasm::method22(v16594.await);
                                                                                                        let v16599:
                                                                                                                string =
                                                                                                            string("true; v16597 });  // rust.fix_closure\'");
                                                                                                        let v16600:
                                                                                                                bool =
                                                                                                            true; v16597 });  // rust.fix_closure';
                                                                                                        let v16602 =
                                                                                                            __future_init;
                                                                                                        v16602
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            Spiral_wasm::US6::US6_1(v16579_1_0)
                                                                                            =>
                                                                                            {
                                                                                                let v17465:
                                                                                                        () =
                                                                                                    {
                                                                                                        Spiral_wasm::closure41(v16579_1_0.clone(),
                                                                                                                               ());
                                                                                                        ()
                                                                                                    };
                                                                                                let v18321:
                                                                                                        std::pin::Pin<Box<dyn std::future::Future<Output = Result<Spiral_wasm::US4,
                                                                                                                                                                  anyhow::Error>>>> =
                                                                                                    Spiral_wasm::method14(v837.clone(),
                                                                                                                          11_u8);
                                                                                                let v18323:
                                                                                                        Result<Spiral_wasm::US4,
                                                                                                               anyhow::Error> =
                                                                                                    v18321.await;
                                                                                                let v18324 =
                                                                                                    Spiral_wasm::method18();
                                                                                                let v18326:
                                                                                                        Result<Spiral_wasm::US4,
                                                                                                               std::string::String> =
                                                                                                    v18323.map_err(|x| v18324(x));
                                                                                                let v18327:
                                                                                                        Spiral_wasm::US6 =
                                                                                                    match &v18326
                                                                                                        {
                                                                                                        Err(v18326_1_0)
                                                                                                        =>
                                                                                                        v846(v18326_1_0.clone()),
                                                                                                        Ok(v18326_0_0)
                                                                                                        =>
                                                                                                        v845(v18326_0_0.clone()),
                                                                                                    };
                                                                                                match &v18327
                                                                                                    {
                                                                                                    Spiral_wasm::US6::US6_0(v18327_0_0)
                                                                                                    =>
                                                                                                    {
                                                                                                        let v18328:
                                                                                                                Spiral_wasm::US4 =
                                                                                                            v18327_0_0.clone();
                                                                                                        match &v18328
                                                                                                            {
                                                                                                            Spiral_wasm::US4::US4_0(v18328_0_0)
                                                                                                            =>
                                                                                                            {
                                                                                                                let v18356:
                                                                                                                        () =
                                                                                                                    {
                                                                                                                        Spiral_wasm::closure79(match &v18328
                                                                                                                                                   {
                                                                                                                                                   Spiral_wasm::US4::US4_0(x)
                                                                                                                                                   =>
                                                                                                                                                   x.clone(),
                                                                                                                                                   _
                                                                                                                                                   =>
                                                                                                                                                   unreachable!(),
                                                                                                                                               },
                                                                                                                                               ());
                                                                                                                        ()
                                                                                                                    };
                                                                                                                let v19185:
                                                                                                                        bool =
                                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                                let v19187:
                                                                                                                        bool =
                                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                                let v19188:
                                                                                                                        u8 =
                                                                                                                    Spiral_wasm::method40();
                                                                                                                let v19192:
                                                                                                                        string =
                                                                                                                    string("true; v19188 });  // rust.fix_closure\'");
                                                                                                                let v19193:
                                                                                                                        bool =
                                                                                                                    true; v19188 });  // rust.fix_closure';
                                                                                                                let v19195 =
                                                                                                                    __future_init;
                                                                                                                let v19197:
                                                                                                                        std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                                    v19195;
                                                                                                                let v19200:
                                                                                                                        Spiral_wasm::US7 =
                                                                                                                    Spiral_wasm::method20(v19197.await);
                                                                                                                let v19202:
                                                                                                                        string =
                                                                                                                    string("true; v19200 });  // rust.fix_closure\'");
                                                                                                                let v19203:
                                                                                                                        bool =
                                                                                                                    true; v19200 });  // rust.fix_closure';
                                                                                                                let v19205 =
                                                                                                                    __future_init;
                                                                                                                v19205
                                                                                                            }
                                                                                                            _
                                                                                                            =>
                                                                                                            {
                                                                                                                let v18330:
                                                                                                                        bool =
                                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                                let v18332:
                                                                                                                        bool =
                                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                                let v18333:
                                                                                                                        u8 =
                                                                                                                    Spiral_wasm::method40();
                                                                                                                let v18337:
                                                                                                                        string =
                                                                                                                    string("true; v18333 });  // rust.fix_closure\'");
                                                                                                                let v18338:
                                                                                                                        bool =
                                                                                                                    true; v18333 });  // rust.fix_closure';
                                                                                                                let v18340 =
                                                                                                                    __future_init;
                                                                                                                let v18342:
                                                                                                                        std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                                    v18340;
                                                                                                                let v18345:
                                                                                                                        Spiral_wasm::US7 =
                                                                                                                    Spiral_wasm::method22(v18342.await);
                                                                                                                let v18347:
                                                                                                                        string =
                                                                                                                    string("true; v18345 });  // rust.fix_closure\'");
                                                                                                                let v18348:
                                                                                                                        bool =
                                                                                                                    true; v18345 });  // rust.fix_closure';
                                                                                                                let v18350 =
                                                                                                                    __future_init;
                                                                                                                v18350
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    Spiral_wasm::US6::US6_1(v18327_1_0)
                                                                                                    =>
                                                                                                    {
                                                                                                        let v19213:
                                                                                                                () =
                                                                                                            {
                                                                                                                Spiral_wasm::closure42(v18327_1_0.clone(),
                                                                                                                                       ());
                                                                                                                ()
                                                                                                            };
                                                                                                        let v20069:
                                                                                                                std::pin::Pin<Box<dyn std::future::Future<Output = Result<Spiral_wasm::US4,
                                                                                                                                                                          anyhow::Error>>>> =
                                                                                                            Spiral_wasm::method14(v837.clone(),
                                                                                                                                  12_u8);
                                                                                                        let v20071:
                                                                                                                Result<Spiral_wasm::US4,
                                                                                                                       anyhow::Error> =
                                                                                                            v20069.await;
                                                                                                        let v20072 =
                                                                                                            Spiral_wasm::method18();
                                                                                                        let v20074:
                                                                                                                Result<Spiral_wasm::US4,
                                                                                                                       std::string::String> =
                                                                                                            v20071.map_err(|x| v20072(x));
                                                                                                        let v20075:
                                                                                                                Spiral_wasm::US6 =
                                                                                                            match &v20074
                                                                                                                {
                                                                                                                Err(v20074_1_0)
                                                                                                                =>
                                                                                                                v846(v20074_1_0.clone()),
                                                                                                                Ok(v20074_0_0)
                                                                                                                =>
                                                                                                                v845(v20074_0_0.clone()),
                                                                                                            };
                                                                                                        match &v20075
                                                                                                            {
                                                                                                            Spiral_wasm::US6::US6_0(v20075_0_0)
                                                                                                            =>
                                                                                                            {
                                                                                                                let v20076:
                                                                                                                        Spiral_wasm::US4 =
                                                                                                                    v20075_0_0.clone();
                                                                                                                match &v20076
                                                                                                                    {
                                                                                                                    Spiral_wasm::US4::US4_0(v20076_0_0)
                                                                                                                    =>
                                                                                                                    {
                                                                                                                        let v20104:
                                                                                                                                () =
                                                                                                                            {
                                                                                                                                Spiral_wasm::closure78(match &v20076
                                                                                                                                                           {
                                                                                                                                                           Spiral_wasm::US4::US4_0(x)
                                                                                                                                                           =>
                                                                                                                                                           x.clone(),
                                                                                                                                                           _
                                                                                                                                                           =>
                                                                                                                                                           unreachable!(),
                                                                                                                                                       },
                                                                                                                                                       ());
                                                                                                                                ()
                                                                                                                            };
                                                                                                                        let v20933:
                                                                                                                                bool =
                                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                                        let v20935:
                                                                                                                                bool =
                                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                                        let v20936:
                                                                                                                                u8 =
                                                                                                                            Spiral_wasm::method39();
                                                                                                                        let v20940:
                                                                                                                                string =
                                                                                                                            string("true; v20936 });  // rust.fix_closure\'");
                                                                                                                        let v20941:
                                                                                                                                bool =
                                                                                                                            true; v20936 });  // rust.fix_closure';
                                                                                                                        let v20943 =
                                                                                                                            __future_init;
                                                                                                                        let v20945:
                                                                                                                                std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                                            v20943;
                                                                                                                        let v20948:
                                                                                                                                Spiral_wasm::US7 =
                                                                                                                            Spiral_wasm::method20(v20945.await);
                                                                                                                        let v20950:
                                                                                                                                string =
                                                                                                                            string("true; v20948 });  // rust.fix_closure\'");
                                                                                                                        let v20951:
                                                                                                                                bool =
                                                                                                                            true; v20948 });  // rust.fix_closure';
                                                                                                                        let v20953 =
                                                                                                                            __future_init;
                                                                                                                        v20953
                                                                                                                    }
                                                                                                                    _
                                                                                                                    =>
                                                                                                                    {
                                                                                                                        let v20078:
                                                                                                                                bool =
                                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                                        let v20080:
                                                                                                                                bool =
                                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                                        let v20081:
                                                                                                                                u8 =
                                                                                                                            Spiral_wasm::method39();
                                                                                                                        let v20085:
                                                                                                                                string =
                                                                                                                            string("true; v20081 });  // rust.fix_closure\'");
                                                                                                                        let v20086:
                                                                                                                                bool =
                                                                                                                            true; v20081 });  // rust.fix_closure';
                                                                                                                        let v20088 =
                                                                                                                            __future_init;
                                                                                                                        let v20090:
                                                                                                                                std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                                            v20088;
                                                                                                                        let v20093:
                                                                                                                                Spiral_wasm::US7 =
                                                                                                                            Spiral_wasm::method22(v20090.await);
                                                                                                                        let v20095:
                                                                                                                                string =
                                                                                                                            string("true; v20093 });  // rust.fix_closure\'");
                                                                                                                        let v20096:
                                                                                                                                bool =
                                                                                                                            true; v20093 });  // rust.fix_closure';
                                                                                                                        let v20098 =
                                                                                                                            __future_init;
                                                                                                                        v20098
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            Spiral_wasm::US6::US6_1(v20075_1_0)
                                                                                                            =>
                                                                                                            {
                                                                                                                let v20961:
                                                                                                                        () =
                                                                                                                    {
                                                                                                                        Spiral_wasm::closure43(v20075_1_0.clone(),
                                                                                                                                               ());
                                                                                                                        ()
                                                                                                                    };
                                                                                                                let v21817:
                                                                                                                        std::pin::Pin<Box<dyn std::future::Future<Output = Result<Spiral_wasm::US4,
                                                                                                                                                                                  anyhow::Error>>>> =
                                                                                                                    Spiral_wasm::method14(v837.clone(),
                                                                                                                                          13_u8);
                                                                                                                let v21819:
                                                                                                                        Result<Spiral_wasm::US4,
                                                                                                                               anyhow::Error> =
                                                                                                                    v21817.await;
                                                                                                                let v21820 =
                                                                                                                    Spiral_wasm::method18();
                                                                                                                let v21822:
                                                                                                                        Result<Spiral_wasm::US4,
                                                                                                                               std::string::String> =
                                                                                                                    v21819.map_err(|x| v21820(x));
                                                                                                                let v21823:
                                                                                                                        Spiral_wasm::US6 =
                                                                                                                    match &v21822
                                                                                                                        {
                                                                                                                        Err(v21822_1_0)
                                                                                                                        =>
                                                                                                                        v846(v21822_1_0.clone()),
                                                                                                                        Ok(v21822_0_0)
                                                                                                                        =>
                                                                                                                        v845(v21822_0_0.clone()),
                                                                                                                    };
                                                                                                                match &v21823
                                                                                                                    {
                                                                                                                    Spiral_wasm::US6::US6_0(v21823_0_0)
                                                                                                                    =>
                                                                                                                    {
                                                                                                                        let v21824:
                                                                                                                                Spiral_wasm::US4 =
                                                                                                                            v21823_0_0.clone();
                                                                                                                        match &v21824
                                                                                                                            {
                                                                                                                            Spiral_wasm::US4::US4_0(v21824_0_0)
                                                                                                                            =>
                                                                                                                            {
                                                                                                                                let v21852:
                                                                                                                                        () =
                                                                                                                                    {
                                                                                                                                        Spiral_wasm::closure77(match &v21824
                                                                                                                                                                   {
                                                                                                                                                                   Spiral_wasm::US4::US4_0(x)
                                                                                                                                                                   =>
                                                                                                                                                                   x.clone(),
                                                                                                                                                                   _
                                                                                                                                                                   =>
                                                                                                                                                                   unreachable!(),
                                                                                                                                                               },
                                                                                                                                                               ());
                                                                                                                                        ()
                                                                                                                                    };
                                                                                                                                let v22681:
                                                                                                                                        bool =
                                                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                                                let v22683:
                                                                                                                                        bool =
                                                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                                                let v22684:
                                                                                                                                        u8 =
                                                                                                                                    Spiral_wasm::method38();
                                                                                                                                let v22688:
                                                                                                                                        string =
                                                                                                                                    string("true; v22684 });  // rust.fix_closure\'");
                                                                                                                                let v22689:
                                                                                                                                        bool =
                                                                                                                                    true; v22684 });  // rust.fix_closure';
                                                                                                                                let v22691 =
                                                                                                                                    __future_init;
                                                                                                                                let v22693:
                                                                                                                                        std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                                                    v22691;
                                                                                                                                let v22696:
                                                                                                                                        Spiral_wasm::US7 =
                                                                                                                                    Spiral_wasm::method20(v22693.await);
                                                                                                                                let v22698:
                                                                                                                                        string =
                                                                                                                                    string("true; v22696 });  // rust.fix_closure\'");
                                                                                                                                let v22699:
                                                                                                                                        bool =
                                                                                                                                    true; v22696 });  // rust.fix_closure';
                                                                                                                                let v22701 =
                                                                                                                                    __future_init;
                                                                                                                                v22701
                                                                                                                            }
                                                                                                                            _
                                                                                                                            =>
                                                                                                                            {
                                                                                                                                let v21826:
                                                                                                                                        bool =
                                                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                                                let v21828:
                                                                                                                                        bool =
                                                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                                                let v21829:
                                                                                                                                        u8 =
                                                                                                                                    Spiral_wasm::method38();
                                                                                                                                let v21833:
                                                                                                                                        string =
                                                                                                                                    string("true; v21829 });  // rust.fix_closure\'");
                                                                                                                                let v21834:
                                                                                                                                        bool =
                                                                                                                                    true; v21829 });  // rust.fix_closure';
                                                                                                                                let v21836 =
                                                                                                                                    __future_init;
                                                                                                                                let v21838:
                                                                                                                                        std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                                                    v21836;
                                                                                                                                let v21841:
                                                                                                                                        Spiral_wasm::US7 =
                                                                                                                                    Spiral_wasm::method22(v21838.await);
                                                                                                                                let v21843:
                                                                                                                                        string =
                                                                                                                                    string("true; v21841 });  // rust.fix_closure\'");
                                                                                                                                let v21844:
                                                                                                                                        bool =
                                                                                                                                    true; v21841 });  // rust.fix_closure';
                                                                                                                                let v21846 =
                                                                                                                                    __future_init;
                                                                                                                                v21846
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                    Spiral_wasm::US6::US6_1(v21823_1_0)
                                                                                                                    =>
                                                                                                                    {
                                                                                                                        let v22709:
                                                                                                                                () =
                                                                                                                            {
                                                                                                                                Spiral_wasm::closure44(v21823_1_0.clone(),
                                                                                                                                                       ());
                                                                                                                                ()
                                                                                                                            };
                                                                                                                        let v23565:
                                                                                                                                std::pin::Pin<Box<dyn std::future::Future<Output = Result<Spiral_wasm::US4,
                                                                                                                                                                                          anyhow::Error>>>> =
                                                                                                                            Spiral_wasm::method14(v837.clone(),
                                                                                                                                                  14_u8);
                                                                                                                        let v23567:
                                                                                                                                Result<Spiral_wasm::US4,
                                                                                                                                       anyhow::Error> =
                                                                                                                            v23565.await;
                                                                                                                        let v23568 =
                                                                                                                            Spiral_wasm::method18();
                                                                                                                        let v23570:
                                                                                                                                Result<Spiral_wasm::US4,
                                                                                                                                       std::string::String> =
                                                                                                                            v23567.map_err(|x| v23568(x));
                                                                                                                        let v23571:
                                                                                                                                Spiral_wasm::US6 =
                                                                                                                            match &v23570
                                                                                                                                {
                                                                                                                                Err(v23570_1_0)
                                                                                                                                =>
                                                                                                                                v846(v23570_1_0.clone()),
                                                                                                                                Ok(v23570_0_0)
                                                                                                                                =>
                                                                                                                                v845(v23570_0_0.clone()),
                                                                                                                            };
                                                                                                                        match &v23571
                                                                                                                            {
                                                                                                                            Spiral_wasm::US6::US6_0(v23571_0_0)
                                                                                                                            =>
                                                                                                                            {
                                                                                                                                let v23572:
                                                                                                                                        Spiral_wasm::US4 =
                                                                                                                                    v23571_0_0.clone();
                                                                                                                                match &v23572
                                                                                                                                    {
                                                                                                                                    Spiral_wasm::US4::US4_0(v23572_0_0)
                                                                                                                                    =>
                                                                                                                                    {
                                                                                                                                        let v23600:
                                                                                                                                                () =
                                                                                                                                            {
                                                                                                                                                Spiral_wasm::closure76(match &v23572
                                                                                                                                                                           {
                                                                                                                                                                           Spiral_wasm::US4::US4_0(x)
                                                                                                                                                                           =>
                                                                                                                                                                           x.clone(),
                                                                                                                                                                           _
                                                                                                                                                                           =>
                                                                                                                                                                           unreachable!(),
                                                                                                                                                                       },
                                                                                                                                                                       ());
                                                                                                                                                ()
                                                                                                                                            };
                                                                                                                                        let v24429:
                                                                                                                                                bool =
                                                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                                                        let v24431:
                                                                                                                                                bool =
                                                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                                                        let v24432:
                                                                                                                                                u8 =
                                                                                                                                            Spiral_wasm::method37();
                                                                                                                                        let v24436:
                                                                                                                                                string =
                                                                                                                                            string("true; v24432 });  // rust.fix_closure\'");
                                                                                                                                        let v24437:
                                                                                                                                                bool =
                                                                                                                                            true; v24432 });  // rust.fix_closure';
                                                                                                                                        let v24439 =
                                                                                                                                            __future_init;
                                                                                                                                        let v24441:
                                                                                                                                                std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                                                            v24439;
                                                                                                                                        let v24444:
                                                                                                                                                Spiral_wasm::US7 =
                                                                                                                                            Spiral_wasm::method20(v24441.await);
                                                                                                                                        let v24446:
                                                                                                                                                string =
                                                                                                                                            string("true; v24444 });  // rust.fix_closure\'");
                                                                                                                                        let v24447:
                                                                                                                                                bool =
                                                                                                                                            true; v24444 });  // rust.fix_closure';
                                                                                                                                        let v24449 =
                                                                                                                                            __future_init;
                                                                                                                                        v24449
                                                                                                                                    }
                                                                                                                                    _
                                                                                                                                    =>
                                                                                                                                    {
                                                                                                                                        let v23574:
                                                                                                                                                bool =
                                                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                                                        let v23576:
                                                                                                                                                bool =
                                                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                                                        let v23577:
                                                                                                                                                u8 =
                                                                                                                                            Spiral_wasm::method37();
                                                                                                                                        let v23581:
                                                                                                                                                string =
                                                                                                                                            string("true; v23577 });  // rust.fix_closure\'");
                                                                                                                                        let v23582:
                                                                                                                                                bool =
                                                                                                                                            true; v23577 });  // rust.fix_closure';
                                                                                                                                        let v23584 =
                                                                                                                                            __future_init;
                                                                                                                                        let v23586:
                                                                                                                                                std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                                                            v23584;
                                                                                                                                        let v23589:
                                                                                                                                                Spiral_wasm::US7 =
                                                                                                                                            Spiral_wasm::method22(v23586.await);
                                                                                                                                        let v23591:
                                                                                                                                                string =
                                                                                                                                            string("true; v23589 });  // rust.fix_closure\'");
                                                                                                                                        let v23592:
                                                                                                                                                bool =
                                                                                                                                            true; v23589 });  // rust.fix_closure';
                                                                                                                                        let v23594 =
                                                                                                                                            __future_init;
                                                                                                                                        v23594
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                            Spiral_wasm::US6::US6_1(v23571_1_0)
                                                                                                                            =>
                                                                                                                            {
                                                                                                                                let v24457:
                                                                                                                                        () =
                                                                                                                                    {
                                                                                                                                        Spiral_wasm::closure45(v23571_1_0.clone(),
                                                                                                                                                               ());
                                                                                                                                        ()
                                                                                                                                    };
                                                                                                                                let v25313:
                                                                                                                                        std::pin::Pin<Box<dyn std::future::Future<Output = Result<Spiral_wasm::US4,
                                                                                                                                                                                                  anyhow::Error>>>> =
                                                                                                                                    Spiral_wasm::method14(v837.clone(),
                                                                                                                                                          15_u8);
                                                                                                                                let v25315:
                                                                                                                                        Result<Spiral_wasm::US4,
                                                                                                                                               anyhow::Error> =
                                                                                                                                    v25313.await;
                                                                                                                                let v25316 =
                                                                                                                                    Spiral_wasm::method18();
                                                                                                                                let v25318:
                                                                                                                                        Result<Spiral_wasm::US4,
                                                                                                                                               std::string::String> =
                                                                                                                                    v25315.map_err(|x| v25316(x));
                                                                                                                                let v25319:
                                                                                                                                        Spiral_wasm::US6 =
                                                                                                                                    match &v25318
                                                                                                                                        {
                                                                                                                                        Err(v25318_1_0)
                                                                                                                                        =>
                                                                                                                                        v846(v25318_1_0.clone()),
                                                                                                                                        Ok(v25318_0_0)
                                                                                                                                        =>
                                                                                                                                        v845(v25318_0_0.clone()),
                                                                                                                                    };
                                                                                                                                match &v25319
                                                                                                                                    {
                                                                                                                                    Spiral_wasm::US6::US6_0(v25319_0_0)
                                                                                                                                    =>
                                                                                                                                    {
                                                                                                                                        let v25320:
                                                                                                                                                Spiral_wasm::US4 =
                                                                                                                                            v25319_0_0.clone();
                                                                                                                                        match &v25320
                                                                                                                                            {
                                                                                                                                            Spiral_wasm::US4::US4_0(v25320_0_0)
                                                                                                                                            =>
                                                                                                                                            {
                                                                                                                                                let v25348:
                                                                                                                                                        () =
                                                                                                                                                    {
                                                                                                                                                        Spiral_wasm::closure75(match &v25320
                                                                                                                                                                                   {
                                                                                                                                                                                   Spiral_wasm::US4::US4_0(x)
                                                                                                                                                                                   =>
                                                                                                                                                                                   x.clone(),
                                                                                                                                                                                   _
                                                                                                                                                                                   =>
                                                                                                                                                                                   unreachable!(),
                                                                                                                                                                               },
                                                                                                                                                                               ());
                                                                                                                                                        ()
                                                                                                                                                    };
                                                                                                                                                let v26177:
                                                                                                                                                        bool =
                                                                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                                                                let v26179:
                                                                                                                                                        bool =
                                                                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                                                                let v26180:
                                                                                                                                                        u8 =
                                                                                                                                                    Spiral_wasm::method36();
                                                                                                                                                let v26184:
                                                                                                                                                        string =
                                                                                                                                                    string("true; v26180 });  // rust.fix_closure\'");
                                                                                                                                                let v26185:
                                                                                                                                                        bool =
                                                                                                                                                    true; v26180 });  // rust.fix_closure';
                                                                                                                                                let v26187 =
                                                                                                                                                    __future_init;
                                                                                                                                                let v26189:
                                                                                                                                                        std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                                                                    v26187;
                                                                                                                                                let v26192:
                                                                                                                                                        Spiral_wasm::US7 =
                                                                                                                                                    Spiral_wasm::method20(v26189.await);
                                                                                                                                                let v26194:
                                                                                                                                                        string =
                                                                                                                                                    string("true; v26192 });  // rust.fix_closure\'");
                                                                                                                                                let v26195:
                                                                                                                                                        bool =
                                                                                                                                                    true; v26192 });  // rust.fix_closure';
                                                                                                                                                let v26197 =
                                                                                                                                                    __future_init;
                                                                                                                                                v26197
                                                                                                                                            }
                                                                                                                                            _
                                                                                                                                            =>
                                                                                                                                            {
                                                                                                                                                let v25322:
                                                                                                                                                        bool =
                                                                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                                                                let v25324:
                                                                                                                                                        bool =
                                                                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                                                                let v25325:
                                                                                                                                                        u8 =
                                                                                                                                                    Spiral_wasm::method36();
                                                                                                                                                let v25329:
                                                                                                                                                        string =
                                                                                                                                                    string("true; v25325 });  // rust.fix_closure\'");
                                                                                                                                                let v25330:
                                                                                                                                                        bool =
                                                                                                                                                    true; v25325 });  // rust.fix_closure';
                                                                                                                                                let v25332 =
                                                                                                                                                    __future_init;
                                                                                                                                                let v25334:
                                                                                                                                                        std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                                                                    v25332;
                                                                                                                                                let v25337:
                                                                                                                                                        Spiral_wasm::US7 =
                                                                                                                                                    Spiral_wasm::method22(v25334.await);
                                                                                                                                                let v25339:
                                                                                                                                                        string =
                                                                                                                                                    string("true; v25337 });  // rust.fix_closure\'");
                                                                                                                                                let v25340:
                                                                                                                                                        bool =
                                                                                                                                                    true; v25337 });  // rust.fix_closure';
                                                                                                                                                let v25342 =
                                                                                                                                                    __future_init;
                                                                                                                                                v25342
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    Spiral_wasm::US6::US6_1(v25319_1_0)
                                                                                                                                    =>
                                                                                                                                    {
                                                                                                                                        let v26205:
                                                                                                                                                () =
                                                                                                                                            {
                                                                                                                                                Spiral_wasm::closure46(v25319_1_0.clone(),
                                                                                                                                                                       ());
                                                                                                                                                ()
                                                                                                                                            };
                                                                                                                                        let v27061:
                                                                                                                                                std::pin::Pin<Box<dyn std::future::Future<Output = Result<Spiral_wasm::US4,
                                                                                                                                                                                                          anyhow::Error>>>> =
                                                                                                                                            Spiral_wasm::method14(v837.clone(),
                                                                                                                                                                  16_u8);
                                                                                                                                        let v27063:
                                                                                                                                                Result<Spiral_wasm::US4,
                                                                                                                                                       anyhow::Error> =
                                                                                                                                            v27061.await;
                                                                                                                                        let v27064 =
                                                                                                                                            Spiral_wasm::method18();
                                                                                                                                        let v27066:
                                                                                                                                                Result<Spiral_wasm::US4,
                                                                                                                                                       std::string::String> =
                                                                                                                                            v27063.map_err(|x| v27064(x));
                                                                                                                                        let v27067:
                                                                                                                                                Spiral_wasm::US6 =
                                                                                                                                            match &v27066
                                                                                                                                                {
                                                                                                                                                Err(v27066_1_0)
                                                                                                                                                =>
                                                                                                                                                v846(v27066_1_0.clone()),
                                                                                                                                                Ok(v27066_0_0)
                                                                                                                                                =>
                                                                                                                                                v845(v27066_0_0.clone()),
                                                                                                                                            };
                                                                                                                                        match &v27067
                                                                                                                                            {
                                                                                                                                            Spiral_wasm::US6::US6_0(v27067_0_0)
                                                                                                                                            =>
                                                                                                                                            {
                                                                                                                                                let v27068:
                                                                                                                                                        Spiral_wasm::US4 =
                                                                                                                                                    v27067_0_0.clone();
                                                                                                                                                match &v27068
                                                                                                                                                    {
                                                                                                                                                    Spiral_wasm::US4::US4_0(v27068_0_0)
                                                                                                                                                    =>
                                                                                                                                                    {
                                                                                                                                                        let v27096:
                                                                                                                                                                () =
                                                                                                                                                            {
                                                                                                                                                                Spiral_wasm::closure74(match &v27068
                                                                                                                                                                                           {
                                                                                                                                                                                           Spiral_wasm::US4::US4_0(x)
                                                                                                                                                                                           =>
                                                                                                                                                                                           x.clone(),
                                                                                                                                                                                           _
                                                                                                                                                                                           =>
                                                                                                                                                                                           unreachable!(),
                                                                                                                                                                                       },
                                                                                                                                                                                       ());
                                                                                                                                                                ()
                                                                                                                                                            };
                                                                                                                                                        let v27925:
                                                                                                                                                                bool =
                                                                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                                                                        let v27927:
                                                                                                                                                                bool =
                                                                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                                                                        let v27928:
                                                                                                                                                                u8 =
                                                                                                                                                            Spiral_wasm::method35();
                                                                                                                                                        let v27932:
                                                                                                                                                                string =
                                                                                                                                                            string("true; v27928 });  // rust.fix_closure\'");
                                                                                                                                                        let v27933:
                                                                                                                                                                bool =
                                                                                                                                                            true; v27928 });  // rust.fix_closure';
                                                                                                                                                        let v27935 =
                                                                                                                                                            __future_init;
                                                                                                                                                        let v27937:
                                                                                                                                                                std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                                                                            v27935;
                                                                                                                                                        let v27940:
                                                                                                                                                                Spiral_wasm::US7 =
                                                                                                                                                            Spiral_wasm::method20(v27937.await);
                                                                                                                                                        let v27942:
                                                                                                                                                                string =
                                                                                                                                                            string("true; v27940 });  // rust.fix_closure\'");
                                                                                                                                                        let v27943:
                                                                                                                                                                bool =
                                                                                                                                                            true; v27940 });  // rust.fix_closure';
                                                                                                                                                        let v27945 =
                                                                                                                                                            __future_init;
                                                                                                                                                        v27945
                                                                                                                                                    }
                                                                                                                                                    _
                                                                                                                                                    =>
                                                                                                                                                    {
                                                                                                                                                        let v27070:
                                                                                                                                                                bool =
                                                                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                                                                        let v27072:
                                                                                                                                                                bool =
                                                                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                                                                        let v27073:
                                                                                                                                                                u8 =
                                                                                                                                                            Spiral_wasm::method35();
                                                                                                                                                        let v27077:
                                                                                                                                                                string =
                                                                                                                                                            string("true; v27073 });  // rust.fix_closure\'");
                                                                                                                                                        let v27078:
                                                                                                                                                                bool =
                                                                                                                                                            true; v27073 });  // rust.fix_closure';
                                                                                                                                                        let v27080 =
                                                                                                                                                            __future_init;
                                                                                                                                                        let v27082:
                                                                                                                                                                std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                                                                            v27080;
                                                                                                                                                        let v27085:
                                                                                                                                                                Spiral_wasm::US7 =
                                                                                                                                                            Spiral_wasm::method22(v27082.await);
                                                                                                                                                        let v27087:
                                                                                                                                                                string =
                                                                                                                                                            string("true; v27085 });  // rust.fix_closure\'");
                                                                                                                                                        let v27088:
                                                                                                                                                                bool =
                                                                                                                                                            true; v27085 });  // rust.fix_closure';
                                                                                                                                                        let v27090 =
                                                                                                                                                            __future_init;
                                                                                                                                                        v27090
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            Spiral_wasm::US6::US6_1(v27067_1_0)
                                                                                                                                            =>
                                                                                                                                            {
                                                                                                                                                let v27953:
                                                                                                                                                        () =
                                                                                                                                                    {
                                                                                                                                                        Spiral_wasm::closure47(v27067_1_0.clone(),
                                                                                                                                                                               ());
                                                                                                                                                        ()
                                                                                                                                                    };
                                                                                                                                                let v28809:
                                                                                                                                                        std::pin::Pin<Box<dyn std::future::Future<Output = Result<Spiral_wasm::US4,
                                                                                                                                                                                                                  anyhow::Error>>>> =
                                                                                                                                                    Spiral_wasm::method14(v837.clone(),
                                                                                                                                                                          17_u8);
                                                                                                                                                let v28811:
                                                                                                                                                        Result<Spiral_wasm::US4,
                                                                                                                                                               anyhow::Error> =
                                                                                                                                                    v28809.await;
                                                                                                                                                let v28812 =
                                                                                                                                                    Spiral_wasm::method18();
                                                                                                                                                let v28814:
                                                                                                                                                        Result<Spiral_wasm::US4,
                                                                                                                                                               std::string::String> =
                                                                                                                                                    v28811.map_err(|x| v28812(x));
                                                                                                                                                let v28815:
                                                                                                                                                        Spiral_wasm::US6 =
                                                                                                                                                    match &v28814
                                                                                                                                                        {
                                                                                                                                                        Err(v28814_1_0)
                                                                                                                                                        =>
                                                                                                                                                        v846(v28814_1_0.clone()),
                                                                                                                                                        Ok(v28814_0_0)
                                                                                                                                                        =>
                                                                                                                                                        v845(v28814_0_0.clone()),
                                                                                                                                                    };
                                                                                                                                                match &v28815
                                                                                                                                                    {
                                                                                                                                                    Spiral_wasm::US6::US6_0(v28815_0_0)
                                                                                                                                                    =>
                                                                                                                                                    {
                                                                                                                                                        let v28816:
                                                                                                                                                                Spiral_wasm::US4 =
                                                                                                                                                            v28815_0_0.clone();
                                                                                                                                                        match &v28816
                                                                                                                                                            {
                                                                                                                                                            Spiral_wasm::US4::US4_0(v28816_0_0)
                                                                                                                                                            =>
                                                                                                                                                            {
                                                                                                                                                                let v28844:
                                                                                                                                                                        () =
                                                                                                                                                                    {
                                                                                                                                                                        Spiral_wasm::closure73(match &v28816
                                                                                                                                                                                                   {
                                                                                                                                                                                                   Spiral_wasm::US4::US4_0(x)
                                                                                                                                                                                                   =>
                                                                                                                                                                                                   x.clone(),
                                                                                                                                                                                                   _
                                                                                                                                                                                                   =>
                                                                                                                                                                                                   unreachable!(),
                                                                                                                                                                                               },
                                                                                                                                                                                               ());
                                                                                                                                                                        ()
                                                                                                                                                                    };
                                                                                                                                                                let v29673:
                                                                                                                                                                        bool =
                                                                                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                let v29675:
                                                                                                                                                                        bool =
                                                                                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                let v29676:
                                                                                                                                                                        u8 =
                                                                                                                                                                    Spiral_wasm::method34();
                                                                                                                                                                let v29680:
                                                                                                                                                                        string =
                                                                                                                                                                    string("true; v29676 });  // rust.fix_closure\'");
                                                                                                                                                                let v29681:
                                                                                                                                                                        bool =
                                                                                                                                                                    true; v29676 });  // rust.fix_closure';
                                                                                                                                                                let v29683 =
                                                                                                                                                                    __future_init;
                                                                                                                                                                let v29685:
                                                                                                                                                                        std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                                                                                    v29683;
                                                                                                                                                                let v29688:
                                                                                                                                                                        Spiral_wasm::US7 =
                                                                                                                                                                    Spiral_wasm::method20(v29685.await);
                                                                                                                                                                let v29690:
                                                                                                                                                                        string =
                                                                                                                                                                    string("true; v29688 });  // rust.fix_closure\'");
                                                                                                                                                                let v29691:
                                                                                                                                                                        bool =
                                                                                                                                                                    true; v29688 });  // rust.fix_closure';
                                                                                                                                                                let v29693 =
                                                                                                                                                                    __future_init;
                                                                                                                                                                v29693
                                                                                                                                                            }
                                                                                                                                                            _
                                                                                                                                                            =>
                                                                                                                                                            {
                                                                                                                                                                let v28818:
                                                                                                                                                                        bool =
                                                                                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                let v28820:
                                                                                                                                                                        bool =
                                                                                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                let v28821:
                                                                                                                                                                        u8 =
                                                                                                                                                                    Spiral_wasm::method34();
                                                                                                                                                                let v28825:
                                                                                                                                                                        string =
                                                                                                                                                                    string("true; v28821 });  // rust.fix_closure\'");
                                                                                                                                                                let v28826:
                                                                                                                                                                        bool =
                                                                                                                                                                    true; v28821 });  // rust.fix_closure';
                                                                                                                                                                let v28828 =
                                                                                                                                                                    __future_init;
                                                                                                                                                                let v28830:
                                                                                                                                                                        std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                                                                                    v28828;
                                                                                                                                                                let v28833:
                                                                                                                                                                        Spiral_wasm::US7 =
                                                                                                                                                                    Spiral_wasm::method22(v28830.await);
                                                                                                                                                                let v28835:
                                                                                                                                                                        string =
                                                                                                                                                                    string("true; v28833 });  // rust.fix_closure\'");
                                                                                                                                                                let v28836:
                                                                                                                                                                        bool =
                                                                                                                                                                    true; v28833 });  // rust.fix_closure';
                                                                                                                                                                let v28838 =
                                                                                                                                                                    __future_init;
                                                                                                                                                                v28838
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    Spiral_wasm::US6::US6_1(v28815_1_0)
                                                                                                                                                    =>
                                                                                                                                                    {
                                                                                                                                                        let v29701:
                                                                                                                                                                () =
                                                                                                                                                            {
                                                                                                                                                                Spiral_wasm::closure48(v28815_1_0.clone(),
                                                                                                                                                                                       ());
                                                                                                                                                                ()
                                                                                                                                                            };
                                                                                                                                                        let v30557:
                                                                                                                                                                std::pin::Pin<Box<dyn std::future::Future<Output = Result<Spiral_wasm::US4,
                                                                                                                                                                                                                          anyhow::Error>>>> =
                                                                                                                                                            Spiral_wasm::method14(v837.clone(),
                                                                                                                                                                                  18_u8);
                                                                                                                                                        let v30559:
                                                                                                                                                                Result<Spiral_wasm::US4,
                                                                                                                                                                       anyhow::Error> =
                                                                                                                                                            v30557.await;
                                                                                                                                                        let v30560 =
                                                                                                                                                            Spiral_wasm::method18();
                                                                                                                                                        let v30562:
                                                                                                                                                                Result<Spiral_wasm::US4,
                                                                                                                                                                       std::string::String> =
                                                                                                                                                            v30559.map_err(|x| v30560(x));
                                                                                                                                                        let v30563:
                                                                                                                                                                Spiral_wasm::US6 =
                                                                                                                                                            match &v30562
                                                                                                                                                                {
                                                                                                                                                                Err(v30562_1_0)
                                                                                                                                                                =>
                                                                                                                                                                v846(v30562_1_0.clone()),
                                                                                                                                                                Ok(v30562_0_0)
                                                                                                                                                                =>
                                                                                                                                                                v845(v30562_0_0.clone()),
                                                                                                                                                            };
                                                                                                                                                        match &v30563
                                                                                                                                                            {
                                                                                                                                                            Spiral_wasm::US6::US6_0(v30563_0_0)
                                                                                                                                                            =>
                                                                                                                                                            {
                                                                                                                                                                let v30564:
                                                                                                                                                                        Spiral_wasm::US4 =
                                                                                                                                                                    v30563_0_0.clone();
                                                                                                                                                                match &v30564
                                                                                                                                                                    {
                                                                                                                                                                    Spiral_wasm::US4::US4_0(v30564_0_0)
                                                                                                                                                                    =>
                                                                                                                                                                    {
                                                                                                                                                                        let v30592:
                                                                                                                                                                                () =
                                                                                                                                                                            {
                                                                                                                                                                                Spiral_wasm::closure72(match &v30564
                                                                                                                                                                                                           {
                                                                                                                                                                                                           Spiral_wasm::US4::US4_0(x)
                                                                                                                                                                                                           =>
                                                                                                                                                                                                           x.clone(),
                                                                                                                                                                                                           _
                                                                                                                                                                                                           =>
                                                                                                                                                                                                           unreachable!(),
                                                                                                                                                                                                       },
                                                                                                                                                                                                       ());
                                                                                                                                                                                ()
                                                                                                                                                                            };
                                                                                                                                                                        let v31421:
                                                                                                                                                                                bool =
                                                                                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                        let v31423:
                                                                                                                                                                                bool =
                                                                                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                        let v31424:
                                                                                                                                                                                u8 =
                                                                                                                                                                            Spiral_wasm::method33();
                                                                                                                                                                        let v31428:
                                                                                                                                                                                string =
                                                                                                                                                                            string("true; v31424 });  // rust.fix_closure\'");
                                                                                                                                                                        let v31429:
                                                                                                                                                                                bool =
                                                                                                                                                                            true; v31424 });  // rust.fix_closure';
                                                                                                                                                                        let v31431 =
                                                                                                                                                                            __future_init;
                                                                                                                                                                        let v31433:
                                                                                                                                                                                std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                                                                                            v31431;
                                                                                                                                                                        let v31436:
                                                                                                                                                                                Spiral_wasm::US7 =
                                                                                                                                                                            Spiral_wasm::method20(v31433.await);
                                                                                                                                                                        let v31438:
                                                                                                                                                                                string =
                                                                                                                                                                            string("true; v31436 });  // rust.fix_closure\'");
                                                                                                                                                                        let v31439:
                                                                                                                                                                                bool =
                                                                                                                                                                            true; v31436 });  // rust.fix_closure';
                                                                                                                                                                        let v31441 =
                                                                                                                                                                            __future_init;
                                                                                                                                                                        v31441
                                                                                                                                                                    }
                                                                                                                                                                    _
                                                                                                                                                                    =>
                                                                                                                                                                    {
                                                                                                                                                                        let v30566:
                                                                                                                                                                                bool =
                                                                                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                        let v30568:
                                                                                                                                                                                bool =
                                                                                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                        let v30569:
                                                                                                                                                                                u8 =
                                                                                                                                                                            Spiral_wasm::method33();
                                                                                                                                                                        let v30573:
                                                                                                                                                                                string =
                                                                                                                                                                            string("true; v30569 });  // rust.fix_closure\'");
                                                                                                                                                                        let v30574:
                                                                                                                                                                                bool =
                                                                                                                                                                            true; v30569 });  // rust.fix_closure';
                                                                                                                                                                        let v30576 =
                                                                                                                                                                            __future_init;
                                                                                                                                                                        let v30578:
                                                                                                                                                                                std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                                                                                            v30576;
                                                                                                                                                                        let v30581:
                                                                                                                                                                                Spiral_wasm::US7 =
                                                                                                                                                                            Spiral_wasm::method22(v30578.await);
                                                                                                                                                                        let v30583:
                                                                                                                                                                                string =
                                                                                                                                                                            string("true; v30581 });  // rust.fix_closure\'");
                                                                                                                                                                        let v30584:
                                                                                                                                                                                bool =
                                                                                                                                                                            true; v30581 });  // rust.fix_closure';
                                                                                                                                                                        let v30586 =
                                                                                                                                                                            __future_init;
                                                                                                                                                                        v30586
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            Spiral_wasm::US6::US6_1(v30563_1_0)
                                                                                                                                                            =>
                                                                                                                                                            {
                                                                                                                                                                let v31449:
                                                                                                                                                                        () =
                                                                                                                                                                    {
                                                                                                                                                                        Spiral_wasm::closure49(v30563_1_0.clone(),
                                                                                                                                                                                               ());
                                                                                                                                                                        ()
                                                                                                                                                                    };
                                                                                                                                                                let v32305:
                                                                                                                                                                        std::pin::Pin<Box<dyn std::future::Future<Output = Result<Spiral_wasm::US4,
                                                                                                                                                                                                                                  anyhow::Error>>>> =
                                                                                                                                                                    Spiral_wasm::method14(v837.clone(),
                                                                                                                                                                                          19_u8);
                                                                                                                                                                let v32307:
                                                                                                                                                                        Result<Spiral_wasm::US4,
                                                                                                                                                                               anyhow::Error> =
                                                                                                                                                                    v32305.await;
                                                                                                                                                                let v32308 =
                                                                                                                                                                    Spiral_wasm::method18();
                                                                                                                                                                let v32310:
                                                                                                                                                                        Result<Spiral_wasm::US4,
                                                                                                                                                                               std::string::String> =
                                                                                                                                                                    v32307.map_err(|x| v32308(x));
                                                                                                                                                                let v32311:
                                                                                                                                                                        Spiral_wasm::US6 =
                                                                                                                                                                    match &v32310
                                                                                                                                                                        {
                                                                                                                                                                        Err(v32310_1_0)
                                                                                                                                                                        =>
                                                                                                                                                                        v846(v32310_1_0.clone()),
                                                                                                                                                                        Ok(v32310_0_0)
                                                                                                                                                                        =>
                                                                                                                                                                        v845(v32310_0_0.clone()),
                                                                                                                                                                    };
                                                                                                                                                                match &v32311
                                                                                                                                                                    {
                                                                                                                                                                    Spiral_wasm::US6::US6_0(v32311_0_0)
                                                                                                                                                                    =>
                                                                                                                                                                    {
                                                                                                                                                                        let v32312:
                                                                                                                                                                                Spiral_wasm::US4 =
                                                                                                                                                                            v32311_0_0.clone();
                                                                                                                                                                        match &v32312
                                                                                                                                                                            {
                                                                                                                                                                            Spiral_wasm::US4::US4_0(v32312_0_0)
                                                                                                                                                                            =>
                                                                                                                                                                            {
                                                                                                                                                                                let v32340:
                                                                                                                                                                                        () =
                                                                                                                                                                                    {
                                                                                                                                                                                        Spiral_wasm::closure71(match &v32312
                                                                                                                                                                                                                   {
                                                                                                                                                                                                                   Spiral_wasm::US4::US4_0(x)
                                                                                                                                                                                                                   =>
                                                                                                                                                                                                                   x.clone(),
                                                                                                                                                                                                                   _
                                                                                                                                                                                                                   =>
                                                                                                                                                                                                                   unreachable!(),
                                                                                                                                                                                                               },
                                                                                                                                                                                                               ());
                                                                                                                                                                                        ()
                                                                                                                                                                                    };
                                                                                                                                                                                let v33169:
                                                                                                                                                                                        bool =
                                                                                                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                let v33171:
                                                                                                                                                                                        bool =
                                                                                                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                let v33172:
                                                                                                                                                                                        u8 =
                                                                                                                                                                                    Spiral_wasm::method32();
                                                                                                                                                                                let v33176:
                                                                                                                                                                                        string =
                                                                                                                                                                                    string("true; v33172 });  // rust.fix_closure\'");
                                                                                                                                                                                let v33177:
                                                                                                                                                                                        bool =
                                                                                                                                                                                    true; v33172 });  // rust.fix_closure';
                                                                                                                                                                                let v33179 =
                                                                                                                                                                                    __future_init;
                                                                                                                                                                                let v33181:
                                                                                                                                                                                        std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                                                                                                    v33179;
                                                                                                                                                                                let v33184:
                                                                                                                                                                                        Spiral_wasm::US7 =
                                                                                                                                                                                    Spiral_wasm::method20(v33181.await);
                                                                                                                                                                                let v33186:
                                                                                                                                                                                        string =
                                                                                                                                                                                    string("true; v33184 });  // rust.fix_closure\'");
                                                                                                                                                                                let v33187:
                                                                                                                                                                                        bool =
                                                                                                                                                                                    true; v33184 });  // rust.fix_closure';
                                                                                                                                                                                let v33189 =
                                                                                                                                                                                    __future_init;
                                                                                                                                                                                v33189
                                                                                                                                                                            }
                                                                                                                                                                            _
                                                                                                                                                                            =>
                                                                                                                                                                            {
                                                                                                                                                                                let v32314:
                                                                                                                                                                                        bool =
                                                                                                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                let v32316:
                                                                                                                                                                                        bool =
                                                                                                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                let v32317:
                                                                                                                                                                                        u8 =
                                                                                                                                                                                    Spiral_wasm::method32();
                                                                                                                                                                                let v32321:
                                                                                                                                                                                        string =
                                                                                                                                                                                    string("true; v32317 });  // rust.fix_closure\'");
                                                                                                                                                                                let v32322:
                                                                                                                                                                                        bool =
                                                                                                                                                                                    true; v32317 });  // rust.fix_closure';
                                                                                                                                                                                let v32324 =
                                                                                                                                                                                    __future_init;
                                                                                                                                                                                let v32326:
                                                                                                                                                                                        std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                                                                                                    v32324;
                                                                                                                                                                                let v32329:
                                                                                                                                                                                        Spiral_wasm::US7 =
                                                                                                                                                                                    Spiral_wasm::method22(v32326.await);
                                                                                                                                                                                let v32331:
                                                                                                                                                                                        string =
                                                                                                                                                                                    string("true; v32329 });  // rust.fix_closure\'");
                                                                                                                                                                                let v32332:
                                                                                                                                                                                        bool =
                                                                                                                                                                                    true; v32329 });  // rust.fix_closure';
                                                                                                                                                                                let v32334 =
                                                                                                                                                                                    __future_init;
                                                                                                                                                                                v32334
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                    Spiral_wasm::US6::US6_1(v32311_1_0)
                                                                                                                                                                    =>
                                                                                                                                                                    {
                                                                                                                                                                        let v33197:
                                                                                                                                                                                () =
                                                                                                                                                                            {
                                                                                                                                                                                Spiral_wasm::closure50(v32311_1_0.clone(),
                                                                                                                                                                                                       ());
                                                                                                                                                                                ()
                                                                                                                                                                            };
                                                                                                                                                                        let v34053:
                                                                                                                                                                                std::pin::Pin<Box<dyn std::future::Future<Output = Result<Spiral_wasm::US4,
                                                                                                                                                                                                                                          anyhow::Error>>>> =
                                                                                                                                                                            Spiral_wasm::method14(v837.clone(),
                                                                                                                                                                                                  20_u8);
                                                                                                                                                                        let v34055:
                                                                                                                                                                                Result<Spiral_wasm::US4,
                                                                                                                                                                                       anyhow::Error> =
                                                                                                                                                                            v34053.await;
                                                                                                                                                                        let v34056 =
                                                                                                                                                                            Spiral_wasm::method18();
                                                                                                                                                                        let v34058:
                                                                                                                                                                                Result<Spiral_wasm::US4,
                                                                                                                                                                                       std::string::String> =
                                                                                                                                                                            v34055.map_err(|x| v34056(x));
                                                                                                                                                                        let v34059:
                                                                                                                                                                                Spiral_wasm::US6 =
                                                                                                                                                                            match &v34058
                                                                                                                                                                                {
                                                                                                                                                                                Err(v34058_1_0)
                                                                                                                                                                                =>
                                                                                                                                                                                v846(v34058_1_0.clone()),
                                                                                                                                                                                Ok(v34058_0_0)
                                                                                                                                                                                =>
                                                                                                                                                                                v845(v34058_0_0.clone()),
                                                                                                                                                                            };
                                                                                                                                                                        match &v34059
                                                                                                                                                                            {
                                                                                                                                                                            Spiral_wasm::US6::US6_0(v34059_0_0)
                                                                                                                                                                            =>
                                                                                                                                                                            {
                                                                                                                                                                                let v34060:
                                                                                                                                                                                        Spiral_wasm::US4 =
                                                                                                                                                                                    v34059_0_0.clone();
                                                                                                                                                                                match &v34060
                                                                                                                                                                                    {
                                                                                                                                                                                    Spiral_wasm::US4::US4_0(v34060_0_0)
                                                                                                                                                                                    =>
                                                                                                                                                                                    {
                                                                                                                                                                                        let v34088:
                                                                                                                                                                                                () =
                                                                                                                                                                                            {
                                                                                                                                                                                                Spiral_wasm::closure70(match &v34060
                                                                                                                                                                                                                           {
                                                                                                                                                                                                                           Spiral_wasm::US4::US4_0(x)
                                                                                                                                                                                                                           =>
                                                                                                                                                                                                                           x.clone(),
                                                                                                                                                                                                                           _
                                                                                                                                                                                                                           =>
                                                                                                                                                                                                                           unreachable!(),
                                                                                                                                                                                                                       },
                                                                                                                                                                                                                       ());
                                                                                                                                                                                                ()
                                                                                                                                                                                            };
                                                                                                                                                                                        let v34917:
                                                                                                                                                                                                bool =
                                                                                                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                        let v34919:
                                                                                                                                                                                                bool =
                                                                                                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                        let v34920:
                                                                                                                                                                                                u8 =
                                                                                                                                                                                            Spiral_wasm::method31();
                                                                                                                                                                                        let v34924:
                                                                                                                                                                                                string =
                                                                                                                                                                                            string("true; v34920 });  // rust.fix_closure\'");
                                                                                                                                                                                        let v34925:
                                                                                                                                                                                                bool =
                                                                                                                                                                                            true; v34920 });  // rust.fix_closure';
                                                                                                                                                                                        let v34927 =
                                                                                                                                                                                            __future_init;
                                                                                                                                                                                        let v34929:
                                                                                                                                                                                                std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                                                                                                            v34927;
                                                                                                                                                                                        let v34932:
                                                                                                                                                                                                Spiral_wasm::US7 =
                                                                                                                                                                                            Spiral_wasm::method20(v34929.await);
                                                                                                                                                                                        let v34934:
                                                                                                                                                                                                string =
                                                                                                                                                                                            string("true; v34932 });  // rust.fix_closure\'");
                                                                                                                                                                                        let v34935:
                                                                                                                                                                                                bool =
                                                                                                                                                                                            true; v34932 });  // rust.fix_closure';
                                                                                                                                                                                        let v34937 =
                                                                                                                                                                                            __future_init;
                                                                                                                                                                                        v34937
                                                                                                                                                                                    }
                                                                                                                                                                                    _
                                                                                                                                                                                    =>
                                                                                                                                                                                    {
                                                                                                                                                                                        let v34062:
                                                                                                                                                                                                bool =
                                                                                                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                        let v34064:
                                                                                                                                                                                                bool =
                                                                                                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                        let v34065:
                                                                                                                                                                                                u8 =
                                                                                                                                                                                            Spiral_wasm::method31();
                                                                                                                                                                                        let v34069:
                                                                                                                                                                                                string =
                                                                                                                                                                                            string("true; v34065 });  // rust.fix_closure\'");
                                                                                                                                                                                        let v34070:
                                                                                                                                                                                                bool =
                                                                                                                                                                                            true; v34065 });  // rust.fix_closure';
                                                                                                                                                                                        let v34072 =
                                                                                                                                                                                            __future_init;
                                                                                                                                                                                        let v34074:
                                                                                                                                                                                                std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                                                                                                            v34072;
                                                                                                                                                                                        let v34077:
                                                                                                                                                                                                Spiral_wasm::US7 =
                                                                                                                                                                                            Spiral_wasm::method22(v34074.await);
                                                                                                                                                                                        let v34079:
                                                                                                                                                                                                string =
                                                                                                                                                                                            string("true; v34077 });  // rust.fix_closure\'");
                                                                                                                                                                                        let v34080:
                                                                                                                                                                                                bool =
                                                                                                                                                                                            true; v34077 });  // rust.fix_closure';
                                                                                                                                                                                        let v34082 =
                                                                                                                                                                                            __future_init;
                                                                                                                                                                                        v34082
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                            Spiral_wasm::US6::US6_1(v34059_1_0)
                                                                                                                                                                            =>
                                                                                                                                                                            {
                                                                                                                                                                                let v34945:
                                                                                                                                                                                        () =
                                                                                                                                                                                    {
                                                                                                                                                                                        Spiral_wasm::closure51(v34059_1_0.clone(),
                                                                                                                                                                                                               ());
                                                                                                                                                                                        ()
                                                                                                                                                                                    };
                                                                                                                                                                                let v35801:
                                                                                                                                                                                        std::pin::Pin<Box<dyn std::future::Future<Output = Result<Spiral_wasm::US4,
                                                                                                                                                                                                                                                  anyhow::Error>>>> =
                                                                                                                                                                                    Spiral_wasm::method14(v837.clone(),
                                                                                                                                                                                                          21_u8);
                                                                                                                                                                                let v35803:
                                                                                                                                                                                        Result<Spiral_wasm::US4,
                                                                                                                                                                                               anyhow::Error> =
                                                                                                                                                                                    v35801.await;
                                                                                                                                                                                let v35804 =
                                                                                                                                                                                    Spiral_wasm::method18();
                                                                                                                                                                                let v35806:
                                                                                                                                                                                        Result<Spiral_wasm::US4,
                                                                                                                                                                                               std::string::String> =
                                                                                                                                                                                    v35803.map_err(|x| v35804(x));
                                                                                                                                                                                let v35807:
                                                                                                                                                                                        Spiral_wasm::US6 =
                                                                                                                                                                                    match &v35806
                                                                                                                                                                                        {
                                                                                                                                                                                        Err(v35806_1_0)
                                                                                                                                                                                        =>
                                                                                                                                                                                        v846(v35806_1_0.clone()),
                                                                                                                                                                                        Ok(v35806_0_0)
                                                                                                                                                                                        =>
                                                                                                                                                                                        v845(v35806_0_0.clone()),
                                                                                                                                                                                    };
                                                                                                                                                                                match &v35807
                                                                                                                                                                                    {
                                                                                                                                                                                    Spiral_wasm::US6::US6_0(v35807_0_0)
                                                                                                                                                                                    =>
                                                                                                                                                                                    {
                                                                                                                                                                                        let v35808:
                                                                                                                                                                                                Spiral_wasm::US4 =
                                                                                                                                                                                            v35807_0_0.clone();
                                                                                                                                                                                        match &v35808
                                                                                                                                                                                            {
                                                                                                                                                                                            Spiral_wasm::US4::US4_0(v35808_0_0)
                                                                                                                                                                                            =>
                                                                                                                                                                                            {
                                                                                                                                                                                                let v35836:
                                                                                                                                                                                                        () =
                                                                                                                                                                                                    {
                                                                                                                                                                                                        Spiral_wasm::closure69(match &v35808
                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                   Spiral_wasm::US4::US4_0(x)
                                                                                                                                                                                                                                   =>
                                                                                                                                                                                                                                   x.clone(),
                                                                                                                                                                                                                                   _
                                                                                                                                                                                                                                   =>
                                                                                                                                                                                                                                   unreachable!(),
                                                                                                                                                                                                                               },
                                                                                                                                                                                                                               ());
                                                                                                                                                                                                        ()
                                                                                                                                                                                                    };
                                                                                                                                                                                                let v36665:
                                                                                                                                                                                                        bool =
                                                                                                                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                                let v36667:
                                                                                                                                                                                                        bool =
                                                                                                                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                                let v36668:
                                                                                                                                                                                                        u8 =
                                                                                                                                                                                                    Spiral_wasm::method30();
                                                                                                                                                                                                let v36672:
                                                                                                                                                                                                        string =
                                                                                                                                                                                                    string("true; v36668 });  // rust.fix_closure\'");
                                                                                                                                                                                                let v36673:
                                                                                                                                                                                                        bool =
                                                                                                                                                                                                    true; v36668 });  // rust.fix_closure';
                                                                                                                                                                                                let v36675 =
                                                                                                                                                                                                    __future_init;
                                                                                                                                                                                                let v36677:
                                                                                                                                                                                                        std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                                                                                                                    v36675;
                                                                                                                                                                                                let v36680:
                                                                                                                                                                                                        Spiral_wasm::US7 =
                                                                                                                                                                                                    Spiral_wasm::method20(v36677.await);
                                                                                                                                                                                                let v36682:
                                                                                                                                                                                                        string =
                                                                                                                                                                                                    string("true; v36680 });  // rust.fix_closure\'");
                                                                                                                                                                                                let v36683:
                                                                                                                                                                                                        bool =
                                                                                                                                                                                                    true; v36680 });  // rust.fix_closure';
                                                                                                                                                                                                let v36685 =
                                                                                                                                                                                                    __future_init;
                                                                                                                                                                                                v36685
                                                                                                                                                                                            }
                                                                                                                                                                                            _
                                                                                                                                                                                            =>
                                                                                                                                                                                            {
                                                                                                                                                                                                let v35810:
                                                                                                                                                                                                        bool =
                                                                                                                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                                let v35812:
                                                                                                                                                                                                        bool =
                                                                                                                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                                let v35813:
                                                                                                                                                                                                        u8 =
                                                                                                                                                                                                    Spiral_wasm::method30();
                                                                                                                                                                                                let v35817:
                                                                                                                                                                                                        string =
                                                                                                                                                                                                    string("true; v35813 });  // rust.fix_closure\'");
                                                                                                                                                                                                let v35818:
                                                                                                                                                                                                        bool =
                                                                                                                                                                                                    true; v35813 });  // rust.fix_closure';
                                                                                                                                                                                                let v35820 =
                                                                                                                                                                                                    __future_init;
                                                                                                                                                                                                let v35822:
                                                                                                                                                                                                        std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                                                                                                                    v35820;
                                                                                                                                                                                                let v35825:
                                                                                                                                                                                                        Spiral_wasm::US7 =
                                                                                                                                                                                                    Spiral_wasm::method22(v35822.await);
                                                                                                                                                                                                let v35827:
                                                                                                                                                                                                        string =
                                                                                                                                                                                                    string("true; v35825 });  // rust.fix_closure\'");
                                                                                                                                                                                                let v35828:
                                                                                                                                                                                                        bool =
                                                                                                                                                                                                    true; v35825 });  // rust.fix_closure';
                                                                                                                                                                                                let v35830 =
                                                                                                                                                                                                    __future_init;
                                                                                                                                                                                                v35830
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                    Spiral_wasm::US6::US6_1(v35807_1_0)
                                                                                                                                                                                    =>
                                                                                                                                                                                    {
                                                                                                                                                                                        let v36693:
                                                                                                                                                                                                () =
                                                                                                                                                                                            {
                                                                                                                                                                                                Spiral_wasm::closure52(v35807_1_0.clone(),
                                                                                                                                                                                                                       ());
                                                                                                                                                                                                ()
                                                                                                                                                                                            };
                                                                                                                                                                                        let v37549:
                                                                                                                                                                                                std::pin::Pin<Box<dyn std::future::Future<Output = Result<Spiral_wasm::US4,
                                                                                                                                                                                                                                                          anyhow::Error>>>> =
                                                                                                                                                                                            Spiral_wasm::method14(v837.clone(),
                                                                                                                                                                                                                  22_u8);
                                                                                                                                                                                        let v37551:
                                                                                                                                                                                                Result<Spiral_wasm::US4,
                                                                                                                                                                                                       anyhow::Error> =
                                                                                                                                                                                            v37549.await;
                                                                                                                                                                                        let v37552 =
                                                                                                                                                                                            Spiral_wasm::method18();
                                                                                                                                                                                        let v37554:
                                                                                                                                                                                                Result<Spiral_wasm::US4,
                                                                                                                                                                                                       std::string::String> =
                                                                                                                                                                                            v37551.map_err(|x| v37552(x));
                                                                                                                                                                                        let v37555:
                                                                                                                                                                                                Spiral_wasm::US6 =
                                                                                                                                                                                            match &v37554
                                                                                                                                                                                                {
                                                                                                                                                                                                Err(v37554_1_0)
                                                                                                                                                                                                =>
                                                                                                                                                                                                v846(v37554_1_0.clone()),
                                                                                                                                                                                                Ok(v37554_0_0)
                                                                                                                                                                                                =>
                                                                                                                                                                                                v845(v37554_0_0.clone()),
                                                                                                                                                                                            };
                                                                                                                                                                                        match &v37555
                                                                                                                                                                                            {
                                                                                                                                                                                            Spiral_wasm::US6::US6_0(v37555_0_0)
                                                                                                                                                                                            =>
                                                                                                                                                                                            {
                                                                                                                                                                                                let v37556:
                                                                                                                                                                                                        Spiral_wasm::US4 =
                                                                                                                                                                                                    v37555_0_0.clone();
                                                                                                                                                                                                match &v37556
                                                                                                                                                                                                    {
                                                                                                                                                                                                    Spiral_wasm::US4::US4_0(v37556_0_0)
                                                                                                                                                                                                    =>
                                                                                                                                                                                                    {
                                                                                                                                                                                                        let v37584:
                                                                                                                                                                                                                () =
                                                                                                                                                                                                            {
                                                                                                                                                                                                                Spiral_wasm::closure68(match &v37556
                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                           Spiral_wasm::US4::US4_0(x)
                                                                                                                                                                                                                                           =>
                                                                                                                                                                                                                                           x.clone(),
                                                                                                                                                                                                                                           _
                                                                                                                                                                                                                                           =>
                                                                                                                                                                                                                                           unreachable!(),
                                                                                                                                                                                                                                       },
                                                                                                                                                                                                                                       ());
                                                                                                                                                                                                                ()
                                                                                                                                                                                                            };
                                                                                                                                                                                                        let v38413:
                                                                                                                                                                                                                bool =
                                                                                                                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                                        let v38415:
                                                                                                                                                                                                                bool =
                                                                                                                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                                        let v38416:
                                                                                                                                                                                                                u8 =
                                                                                                                                                                                                            Spiral_wasm::method29();
                                                                                                                                                                                                        let v38420:
                                                                                                                                                                                                                string =
                                                                                                                                                                                                            string("true; v38416 });  // rust.fix_closure\'");
                                                                                                                                                                                                        let v38421:
                                                                                                                                                                                                                bool =
                                                                                                                                                                                                            true; v38416 });  // rust.fix_closure';
                                                                                                                                                                                                        let v38423 =
                                                                                                                                                                                                            __future_init;
                                                                                                                                                                                                        let v38425:
                                                                                                                                                                                                                std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                                                                                                                            v38423;
                                                                                                                                                                                                        let v38428:
                                                                                                                                                                                                                Spiral_wasm::US7 =
                                                                                                                                                                                                            Spiral_wasm::method20(v38425.await);
                                                                                                                                                                                                        let v38430:
                                                                                                                                                                                                                string =
                                                                                                                                                                                                            string("true; v38428 });  // rust.fix_closure\'");
                                                                                                                                                                                                        let v38431:
                                                                                                                                                                                                                bool =
                                                                                                                                                                                                            true; v38428 });  // rust.fix_closure';
                                                                                                                                                                                                        let v38433 =
                                                                                                                                                                                                            __future_init;
                                                                                                                                                                                                        v38433
                                                                                                                                                                                                    }
                                                                                                                                                                                                    _
                                                                                                                                                                                                    =>
                                                                                                                                                                                                    {
                                                                                                                                                                                                        let v37558:
                                                                                                                                                                                                                bool =
                                                                                                                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                                        let v37560:
                                                                                                                                                                                                                bool =
                                                                                                                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                                        let v37561:
                                                                                                                                                                                                                u8 =
                                                                                                                                                                                                            Spiral_wasm::method29();
                                                                                                                                                                                                        let v37565:
                                                                                                                                                                                                                string =
                                                                                                                                                                                                            string("true; v37561 });  // rust.fix_closure\'");
                                                                                                                                                                                                        let v37566:
                                                                                                                                                                                                                bool =
                                                                                                                                                                                                            true; v37561 });  // rust.fix_closure';
                                                                                                                                                                                                        let v37568 =
                                                                                                                                                                                                            __future_init;
                                                                                                                                                                                                        let v37570:
                                                                                                                                                                                                                std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                                                                                                                            v37568;
                                                                                                                                                                                                        let v37573:
                                                                                                                                                                                                                Spiral_wasm::US7 =
                                                                                                                                                                                                            Spiral_wasm::method22(v37570.await);
                                                                                                                                                                                                        let v37575:
                                                                                                                                                                                                                string =
                                                                                                                                                                                                            string("true; v37573 });  // rust.fix_closure\'");
                                                                                                                                                                                                        let v37576:
                                                                                                                                                                                                                bool =
                                                                                                                                                                                                            true; v37573 });  // rust.fix_closure';
                                                                                                                                                                                                        let v37578 =
                                                                                                                                                                                                            __future_init;
                                                                                                                                                                                                        v37578
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                            Spiral_wasm::US6::US6_1(v37555_1_0)
                                                                                                                                                                                            =>
                                                                                                                                                                                            {
                                                                                                                                                                                                let v38441:
                                                                                                                                                                                                        () =
                                                                                                                                                                                                    {
                                                                                                                                                                                                        Spiral_wasm::closure53(v37555_1_0.clone(),
                                                                                                                                                                                                                               ());
                                                                                                                                                                                                        ()
                                                                                                                                                                                                    };
                                                                                                                                                                                                let v39297:
                                                                                                                                                                                                        std::pin::Pin<Box<dyn std::future::Future<Output = Result<Spiral_wasm::US4,
                                                                                                                                                                                                                                                                  anyhow::Error>>>> =
                                                                                                                                                                                                    Spiral_wasm::method14(v837.clone(),
                                                                                                                                                                                                                          23_u8);
                                                                                                                                                                                                let v39299:
                                                                                                                                                                                                        Result<Spiral_wasm::US4,
                                                                                                                                                                                                               anyhow::Error> =
                                                                                                                                                                                                    v39297.await;
                                                                                                                                                                                                let v39300 =
                                                                                                                                                                                                    Spiral_wasm::method18();
                                                                                                                                                                                                let v39302:
                                                                                                                                                                                                        Result<Spiral_wasm::US4,
                                                                                                                                                                                                               std::string::String> =
                                                                                                                                                                                                    v39299.map_err(|x| v39300(x));
                                                                                                                                                                                                let v39303:
                                                                                                                                                                                                        Spiral_wasm::US6 =
                                                                                                                                                                                                    match &v39302
                                                                                                                                                                                                        {
                                                                                                                                                                                                        Err(v39302_1_0)
                                                                                                                                                                                                        =>
                                                                                                                                                                                                        v846(v39302_1_0.clone()),
                                                                                                                                                                                                        Ok(v39302_0_0)
                                                                                                                                                                                                        =>
                                                                                                                                                                                                        v845(v39302_0_0.clone()),
                                                                                                                                                                                                    };
                                                                                                                                                                                                match &v39303
                                                                                                                                                                                                    {
                                                                                                                                                                                                    Spiral_wasm::US6::US6_0(v39303_0_0)
                                                                                                                                                                                                    =>
                                                                                                                                                                                                    {
                                                                                                                                                                                                        let v39304:
                                                                                                                                                                                                                Spiral_wasm::US4 =
                                                                                                                                                                                                            v39303_0_0.clone();
                                                                                                                                                                                                        match &v39304
                                                                                                                                                                                                            {
                                                                                                                                                                                                            Spiral_wasm::US4::US4_0(v39304_0_0)
                                                                                                                                                                                                            =>
                                                                                                                                                                                                            {
                                                                                                                                                                                                                let v39332:
                                                                                                                                                                                                                        () =
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                        Spiral_wasm::closure67(match &v39304
                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                   Spiral_wasm::US4::US4_0(x)
                                                                                                                                                                                                                                                   =>
                                                                                                                                                                                                                                                   x.clone(),
                                                                                                                                                                                                                                                   _
                                                                                                                                                                                                                                                   =>
                                                                                                                                                                                                                                                   unreachable!(),
                                                                                                                                                                                                                                               },
                                                                                                                                                                                                                                               ());
                                                                                                                                                                                                                        ()
                                                                                                                                                                                                                    };
                                                                                                                                                                                                                let v40161:
                                                                                                                                                                                                                        bool =
                                                                                                                                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                                                let v40163:
                                                                                                                                                                                                                        bool =
                                                                                                                                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                                                let v40164:
                                                                                                                                                                                                                        u8 =
                                                                                                                                                                                                                    Spiral_wasm::method28();
                                                                                                                                                                                                                let v40168:
                                                                                                                                                                                                                        string =
                                                                                                                                                                                                                    string("true; v40164 });  // rust.fix_closure\'");
                                                                                                                                                                                                                let v40169:
                                                                                                                                                                                                                        bool =
                                                                                                                                                                                                                    true; v40164 });  // rust.fix_closure';
                                                                                                                                                                                                                let v40171 =
                                                                                                                                                                                                                    __future_init;
                                                                                                                                                                                                                let v40173:
                                                                                                                                                                                                                        std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                                                                                                                                    v40171;
                                                                                                                                                                                                                let v40176:
                                                                                                                                                                                                                        Spiral_wasm::US7 =
                                                                                                                                                                                                                    Spiral_wasm::method20(v40173.await);
                                                                                                                                                                                                                let v40178:
                                                                                                                                                                                                                        string =
                                                                                                                                                                                                                    string("true; v40176 });  // rust.fix_closure\'");
                                                                                                                                                                                                                let v40179:
                                                                                                                                                                                                                        bool =
                                                                                                                                                                                                                    true; v40176 });  // rust.fix_closure';
                                                                                                                                                                                                                let v40181 =
                                                                                                                                                                                                                    __future_init;
                                                                                                                                                                                                                v40181
                                                                                                                                                                                                            }
                                                                                                                                                                                                            _
                                                                                                                                                                                                            =>
                                                                                                                                                                                                            {
                                                                                                                                                                                                                let v39306:
                                                                                                                                                                                                                        bool =
                                                                                                                                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                                                let v39308:
                                                                                                                                                                                                                        bool =
                                                                                                                                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                                                let v39309:
                                                                                                                                                                                                                        u8 =
                                                                                                                                                                                                                    Spiral_wasm::method28();
                                                                                                                                                                                                                let v39313:
                                                                                                                                                                                                                        string =
                                                                                                                                                                                                                    string("true; v39309 });  // rust.fix_closure\'");
                                                                                                                                                                                                                let v39314:
                                                                                                                                                                                                                        bool =
                                                                                                                                                                                                                    true; v39309 });  // rust.fix_closure';
                                                                                                                                                                                                                let v39316 =
                                                                                                                                                                                                                    __future_init;
                                                                                                                                                                                                                let v39318:
                                                                                                                                                                                                                        std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                                                                                                                                    v39316;
                                                                                                                                                                                                                let v39321:
                                                                                                                                                                                                                        Spiral_wasm::US7 =
                                                                                                                                                                                                                    Spiral_wasm::method22(v39318.await);
                                                                                                                                                                                                                let v39323:
                                                                                                                                                                                                                        string =
                                                                                                                                                                                                                    string("true; v39321 });  // rust.fix_closure\'");
                                                                                                                                                                                                                let v39324:
                                                                                                                                                                                                                        bool =
                                                                                                                                                                                                                    true; v39321 });  // rust.fix_closure';
                                                                                                                                                                                                                let v39326 =
                                                                                                                                                                                                                    __future_init;
                                                                                                                                                                                                                v39326
                                                                                                                                                                                                            }
                                                                                                                                                                                                        }
                                                                                                                                                                                                    }
                                                                                                                                                                                                    Spiral_wasm::US6::US6_1(v39303_1_0)
                                                                                                                                                                                                    =>
                                                                                                                                                                                                    {
                                                                                                                                                                                                        let v40189:
                                                                                                                                                                                                                () =
                                                                                                                                                                                                            {
                                                                                                                                                                                                                Spiral_wasm::closure54(v39303_1_0.clone(),
                                                                                                                                                                                                                                       ());
                                                                                                                                                                                                                ()
                                                                                                                                                                                                            };
                                                                                                                                                                                                        let v41045:
                                                                                                                                                                                                                std::pin::Pin<Box<dyn std::future::Future<Output = Result<Spiral_wasm::US4,
                                                                                                                                                                                                                                                                          anyhow::Error>>>> =
                                                                                                                                                                                                            Spiral_wasm::method14(v837.clone(),
                                                                                                                                                                                                                                  24_u8);
                                                                                                                                                                                                        let v41047:
                                                                                                                                                                                                                Result<Spiral_wasm::US4,
                                                                                                                                                                                                                       anyhow::Error> =
                                                                                                                                                                                                            v41045.await;
                                                                                                                                                                                                        let v41048 =
                                                                                                                                                                                                            Spiral_wasm::method18();
                                                                                                                                                                                                        let v41050:
                                                                                                                                                                                                                Result<Spiral_wasm::US4,
                                                                                                                                                                                                                       std::string::String> =
                                                                                                                                                                                                            v41047.map_err(|x| v41048(x));
                                                                                                                                                                                                        let v41051:
                                                                                                                                                                                                                Spiral_wasm::US6 =
                                                                                                                                                                                                            match &v41050
                                                                                                                                                                                                                {
                                                                                                                                                                                                                Err(v41050_1_0)
                                                                                                                                                                                                                =>
                                                                                                                                                                                                                v846(v41050_1_0.clone()),
                                                                                                                                                                                                                Ok(v41050_0_0)
                                                                                                                                                                                                                =>
                                                                                                                                                                                                                v845(v41050_0_0.clone()),
                                                                                                                                                                                                            };
                                                                                                                                                                                                        match &v41051
                                                                                                                                                                                                            {
                                                                                                                                                                                                            Spiral_wasm::US6::US6_0(v41051_0_0)
                                                                                                                                                                                                            =>
                                                                                                                                                                                                            {
                                                                                                                                                                                                                let v41052:
                                                                                                                                                                                                                        Spiral_wasm::US4 =
                                                                                                                                                                                                                    v41051_0_0.clone();
                                                                                                                                                                                                                match &v41052
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                    Spiral_wasm::US4::US4_0(v41052_0_0)
                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                        let v41080:
                                                                                                                                                                                                                                () =
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                Spiral_wasm::closure66(match &v41052
                                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                                           Spiral_wasm::US4::US4_0(x)
                                                                                                                                                                                                                                                           =>
                                                                                                                                                                                                                                                           x.clone(),
                                                                                                                                                                                                                                                           _
                                                                                                                                                                                                                                                           =>
                                                                                                                                                                                                                                                           unreachable!(),
                                                                                                                                                                                                                                                       },
                                                                                                                                                                                                                                                       ());
                                                                                                                                                                                                                                ()
                                                                                                                                                                                                                            };
                                                                                                                                                                                                                        let v41909:
                                                                                                                                                                                                                                bool =
                                                                                                                                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                                                        let v41911:
                                                                                                                                                                                                                                bool =
                                                                                                                                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                                                        let v41912:
                                                                                                                                                                                                                                u8 =
                                                                                                                                                                                                                            Spiral_wasm::method27();
                                                                                                                                                                                                                        let v41916:
                                                                                                                                                                                                                                string =
                                                                                                                                                                                                                            string("true; v41912 });  // rust.fix_closure\'");
                                                                                                                                                                                                                        let v41917:
                                                                                                                                                                                                                                bool =
                                                                                                                                                                                                                            true; v41912 });  // rust.fix_closure';
                                                                                                                                                                                                                        let v41919 =
                                                                                                                                                                                                                            __future_init;
                                                                                                                                                                                                                        let v41921:
                                                                                                                                                                                                                                std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                                                                                                                                            v41919;
                                                                                                                                                                                                                        let v41924:
                                                                                                                                                                                                                                Spiral_wasm::US7 =
                                                                                                                                                                                                                            Spiral_wasm::method20(v41921.await);
                                                                                                                                                                                                                        let v41926:
                                                                                                                                                                                                                                string =
                                                                                                                                                                                                                            string("true; v41924 });  // rust.fix_closure\'");
                                                                                                                                                                                                                        let v41927:
                                                                                                                                                                                                                                bool =
                                                                                                                                                                                                                            true; v41924 });  // rust.fix_closure';
                                                                                                                                                                                                                        let v41929 =
                                                                                                                                                                                                                            __future_init;
                                                                                                                                                                                                                        v41929
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    _
                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                        let v41054:
                                                                                                                                                                                                                                bool =
                                                                                                                                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                                                        let v41056:
                                                                                                                                                                                                                                bool =
                                                                                                                                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                                                        let v41057:
                                                                                                                                                                                                                                u8 =
                                                                                                                                                                                                                            Spiral_wasm::method27();
                                                                                                                                                                                                                        let v41061:
                                                                                                                                                                                                                                string =
                                                                                                                                                                                                                            string("true; v41057 });  // rust.fix_closure\'");
                                                                                                                                                                                                                        let v41062:
                                                                                                                                                                                                                                bool =
                                                                                                                                                                                                                            true; v41057 });  // rust.fix_closure';
                                                                                                                                                                                                                        let v41064 =
                                                                                                                                                                                                                            __future_init;
                                                                                                                                                                                                                        let v41066:
                                                                                                                                                                                                                                std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                                                                                                                                            v41064;
                                                                                                                                                                                                                        let v41069:
                                                                                                                                                                                                                                Spiral_wasm::US7 =
                                                                                                                                                                                                                            Spiral_wasm::method22(v41066.await);
                                                                                                                                                                                                                        let v41071:
                                                                                                                                                                                                                                string =
                                                                                                                                                                                                                            string("true; v41069 });  // rust.fix_closure\'");
                                                                                                                                                                                                                        let v41072:
                                                                                                                                                                                                                                bool =
                                                                                                                                                                                                                            true; v41069 });  // rust.fix_closure';
                                                                                                                                                                                                                        let v41074 =
                                                                                                                                                                                                                            __future_init;
                                                                                                                                                                                                                        v41074
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                }
                                                                                                                                                                                                            }
                                                                                                                                                                                                            Spiral_wasm::US6::US6_1(v41051_1_0)
                                                                                                                                                                                                            =>
                                                                                                                                                                                                            {
                                                                                                                                                                                                                let v41937:
                                                                                                                                                                                                                        () =
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                        Spiral_wasm::closure55(v41051_1_0.clone(),
                                                                                                                                                                                                                                               ());
                                                                                                                                                                                                                        ()
                                                                                                                                                                                                                    };
                                                                                                                                                                                                                let v42793:
                                                                                                                                                                                                                        std::pin::Pin<Box<dyn std::future::Future<Output = Result<Spiral_wasm::US4,
                                                                                                                                                                                                                                                                                  anyhow::Error>>>> =
                                                                                                                                                                                                                    Spiral_wasm::method14(v837.clone(),
                                                                                                                                                                                                                                          25_u8);
                                                                                                                                                                                                                let v42795:
                                                                                                                                                                                                                        Result<Spiral_wasm::US4,
                                                                                                                                                                                                                               anyhow::Error> =
                                                                                                                                                                                                                    v42793.await;
                                                                                                                                                                                                                let v42796 =
                                                                                                                                                                                                                    Spiral_wasm::method18();
                                                                                                                                                                                                                let v42798:
                                                                                                                                                                                                                        Result<Spiral_wasm::US4,
                                                                                                                                                                                                                               std::string::String> =
                                                                                                                                                                                                                    v42795.map_err(|x| v42796(x));
                                                                                                                                                                                                                let v42799:
                                                                                                                                                                                                                        Spiral_wasm::US6 =
                                                                                                                                                                                                                    match &v42798
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                        Err(v42798_1_0)
                                                                                                                                                                                                                        =>
                                                                                                                                                                                                                        v846(v42798_1_0.clone()),
                                                                                                                                                                                                                        Ok(v42798_0_0)
                                                                                                                                                                                                                        =>
                                                                                                                                                                                                                        v845(v42798_0_0.clone()),
                                                                                                                                                                                                                    };
                                                                                                                                                                                                                match &v42799
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                    Spiral_wasm::US6::US6_0(v42799_0_0)
                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                        let v42800:
                                                                                                                                                                                                                                Spiral_wasm::US4 =
                                                                                                                                                                                                                            v42799_0_0.clone();
                                                                                                                                                                                                                        match &v42800
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                            Spiral_wasm::US4::US4_0(v42800_0_0)
                                                                                                                                                                                                                            =>
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                let v42828:
                                                                                                                                                                                                                                        () =
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                        Spiral_wasm::closure65(match &v42800
                                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                                   Spiral_wasm::US4::US4_0(x)
                                                                                                                                                                                                                                                                   =>
                                                                                                                                                                                                                                                                   x.clone(),
                                                                                                                                                                                                                                                                   _
                                                                                                                                                                                                                                                                   =>
                                                                                                                                                                                                                                                                   unreachable!(),
                                                                                                                                                                                                                                                               },
                                                                                                                                                                                                                                                               ());
                                                                                                                                                                                                                                        ()
                                                                                                                                                                                                                                    };
                                                                                                                                                                                                                                let v43657:
                                                                                                                                                                                                                                        bool =
                                                                                                                                                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                                                                let v43659:
                                                                                                                                                                                                                                        bool =
                                                                                                                                                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                                                                let v43660:
                                                                                                                                                                                                                                        u8 =
                                                                                                                                                                                                                                    Spiral_wasm::method26();
                                                                                                                                                                                                                                let v43664:
                                                                                                                                                                                                                                        string =
                                                                                                                                                                                                                                    string("true; v43660 });  // rust.fix_closure\'");
                                                                                                                                                                                                                                let v43665:
                                                                                                                                                                                                                                        bool =
                                                                                                                                                                                                                                    true; v43660 });  // rust.fix_closure';
                                                                                                                                                                                                                                let v43667 =
                                                                                                                                                                                                                                    __future_init;
                                                                                                                                                                                                                                let v43669:
                                                                                                                                                                                                                                        std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                                                                                                                                                    v43667;
                                                                                                                                                                                                                                let v43672:
                                                                                                                                                                                                                                        Spiral_wasm::US7 =
                                                                                                                                                                                                                                    Spiral_wasm::method20(v43669.await);
                                                                                                                                                                                                                                let v43674:
                                                                                                                                                                                                                                        string =
                                                                                                                                                                                                                                    string("true; v43672 });  // rust.fix_closure\'");
                                                                                                                                                                                                                                let v43675:
                                                                                                                                                                                                                                        bool =
                                                                                                                                                                                                                                    true; v43672 });  // rust.fix_closure';
                                                                                                                                                                                                                                let v43677 =
                                                                                                                                                                                                                                    __future_init;
                                                                                                                                                                                                                                v43677
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            _
                                                                                                                                                                                                                            =>
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                let v42802:
                                                                                                                                                                                                                                        bool =
                                                                                                                                                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                                                                let v42804:
                                                                                                                                                                                                                                        bool =
                                                                                                                                                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                                                                let v42805:
                                                                                                                                                                                                                                        u8 =
                                                                                                                                                                                                                                    Spiral_wasm::method26();
                                                                                                                                                                                                                                let v42809:
                                                                                                                                                                                                                                        string =
                                                                                                                                                                                                                                    string("true; v42805 });  // rust.fix_closure\'");
                                                                                                                                                                                                                                let v42810:
                                                                                                                                                                                                                                        bool =
                                                                                                                                                                                                                                    true; v42805 });  // rust.fix_closure';
                                                                                                                                                                                                                                let v42812 =
                                                                                                                                                                                                                                    __future_init;
                                                                                                                                                                                                                                let v42814:
                                                                                                                                                                                                                                        std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                                                                                                                                                    v42812;
                                                                                                                                                                                                                                let v42817:
                                                                                                                                                                                                                                        Spiral_wasm::US7 =
                                                                                                                                                                                                                                    Spiral_wasm::method22(v42814.await);
                                                                                                                                                                                                                                let v42819:
                                                                                                                                                                                                                                        string =
                                                                                                                                                                                                                                    string("true; v42817 });  // rust.fix_closure\'");
                                                                                                                                                                                                                                let v42820:
                                                                                                                                                                                                                                        bool =
                                                                                                                                                                                                                                    true; v42817 });  // rust.fix_closure';
                                                                                                                                                                                                                                let v42822 =
                                                                                                                                                                                                                                    __future_init;
                                                                                                                                                                                                                                v42822
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    Spiral_wasm::US6::US6_1(v42799_1_0)
                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                        let v43685:
                                                                                                                                                                                                                                () =
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                Spiral_wasm::closure56(v42799_1_0.clone(),
                                                                                                                                                                                                                                                       ());
                                                                                                                                                                                                                                ()
                                                                                                                                                                                                                            };
                                                                                                                                                                                                                        let v44541:
                                                                                                                                                                                                                                std::pin::Pin<Box<dyn std::future::Future<Output = Result<Spiral_wasm::US4,
                                                                                                                                                                                                                                                                                          anyhow::Error>>>> =
                                                                                                                                                                                                                            Spiral_wasm::method14(v837.clone(),
                                                                                                                                                                                                                                                  26_u8);
                                                                                                                                                                                                                        let v44543:
                                                                                                                                                                                                                                Result<Spiral_wasm::US4,
                                                                                                                                                                                                                                       anyhow::Error> =
                                                                                                                                                                                                                            v44541.await;
                                                                                                                                                                                                                        let v44544 =
                                                                                                                                                                                                                            Spiral_wasm::method18();
                                                                                                                                                                                                                        let v44546:
                                                                                                                                                                                                                                Result<Spiral_wasm::US4,
                                                                                                                                                                                                                                       std::string::String> =
                                                                                                                                                                                                                            v44543.map_err(|x| v44544(x));
                                                                                                                                                                                                                        let v44547:
                                                                                                                                                                                                                                Spiral_wasm::US6 =
                                                                                                                                                                                                                            match &v44546
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                Err(v44546_1_0)
                                                                                                                                                                                                                                =>
                                                                                                                                                                                                                                v846(v44546_1_0.clone()),
                                                                                                                                                                                                                                Ok(v44546_0_0)
                                                                                                                                                                                                                                =>
                                                                                                                                                                                                                                v845(v44546_0_0.clone()),
                                                                                                                                                                                                                            };
                                                                                                                                                                                                                        match &v44547
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                            Spiral_wasm::US6::US6_0(v44547_0_0)
                                                                                                                                                                                                                            =>
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                let v44548:
                                                                                                                                                                                                                                        Spiral_wasm::US4 =
                                                                                                                                                                                                                                    v44547_0_0.clone();
                                                                                                                                                                                                                                match &v44548
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                    Spiral_wasm::US4::US4_0(v44548_0_0)
                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                        let v44576:
                                                                                                                                                                                                                                                () =
                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                Spiral_wasm::closure64(match &v44548
                                                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                                                           Spiral_wasm::US4::US4_0(x)
                                                                                                                                                                                                                                                                           =>
                                                                                                                                                                                                                                                                           x.clone(),
                                                                                                                                                                                                                                                                           _
                                                                                                                                                                                                                                                                           =>
                                                                                                                                                                                                                                                                           unreachable!(),
                                                                                                                                                                                                                                                                       },
                                                                                                                                                                                                                                                                       ());
                                                                                                                                                                                                                                                ()
                                                                                                                                                                                                                                            };
                                                                                                                                                                                                                                        let v45405:
                                                                                                                                                                                                                                                bool =
                                                                                                                                                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                                                                        let v45407:
                                                                                                                                                                                                                                                bool =
                                                                                                                                                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                                                                        let v45408:
                                                                                                                                                                                                                                                u8 =
                                                                                                                                                                                                                                            Spiral_wasm::method25();
                                                                                                                                                                                                                                        let v45412:
                                                                                                                                                                                                                                                string =
                                                                                                                                                                                                                                            string("true; v45408 });  // rust.fix_closure\'");
                                                                                                                                                                                                                                        let v45413:
                                                                                                                                                                                                                                                bool =
                                                                                                                                                                                                                                            true; v45408 });  // rust.fix_closure';
                                                                                                                                                                                                                                        let v45415 =
                                                                                                                                                                                                                                            __future_init;
                                                                                                                                                                                                                                        let v45417:
                                                                                                                                                                                                                                                std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                                                                                                                                                            v45415;
                                                                                                                                                                                                                                        let v45420:
                                                                                                                                                                                                                                                Spiral_wasm::US7 =
                                                                                                                                                                                                                                            Spiral_wasm::method20(v45417.await);
                                                                                                                                                                                                                                        let v45422:
                                                                                                                                                                                                                                                string =
                                                                                                                                                                                                                                            string("true; v45420 });  // rust.fix_closure\'");
                                                                                                                                                                                                                                        let v45423:
                                                                                                                                                                                                                                                bool =
                                                                                                                                                                                                                                            true; v45420 });  // rust.fix_closure';
                                                                                                                                                                                                                                        let v45425 =
                                                                                                                                                                                                                                            __future_init;
                                                                                                                                                                                                                                        v45425
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                    _
                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                        let v44550:
                                                                                                                                                                                                                                                bool =
                                                                                                                                                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                                                                        let v44552:
                                                                                                                                                                                                                                                bool =
                                                                                                                                                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                                                                        let v44553:
                                                                                                                                                                                                                                                u8 =
                                                                                                                                                                                                                                            Spiral_wasm::method25();
                                                                                                                                                                                                                                        let v44557:
                                                                                                                                                                                                                                                string =
                                                                                                                                                                                                                                            string("true; v44553 });  // rust.fix_closure\'");
                                                                                                                                                                                                                                        let v44558:
                                                                                                                                                                                                                                                bool =
                                                                                                                                                                                                                                            true; v44553 });  // rust.fix_closure';
                                                                                                                                                                                                                                        let v44560 =
                                                                                                                                                                                                                                            __future_init;
                                                                                                                                                                                                                                        let v44562:
                                                                                                                                                                                                                                                std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                                                                                                                                                            v44560;
                                                                                                                                                                                                                                        let v44565:
                                                                                                                                                                                                                                                Spiral_wasm::US7 =
                                                                                                                                                                                                                                            Spiral_wasm::method22(v44562.await);
                                                                                                                                                                                                                                        let v44567:
                                                                                                                                                                                                                                                string =
                                                                                                                                                                                                                                            string("true; v44565 });  // rust.fix_closure\'");
                                                                                                                                                                                                                                        let v44568:
                                                                                                                                                                                                                                                bool =
                                                                                                                                                                                                                                            true; v44565 });  // rust.fix_closure';
                                                                                                                                                                                                                                        let v44570 =
                                                                                                                                                                                                                                            __future_init;
                                                                                                                                                                                                                                        v44570
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            Spiral_wasm::US6::US6_1(v44547_1_0)
                                                                                                                                                                                                                            =>
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                let v45433:
                                                                                                                                                                                                                                        () =
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                        Spiral_wasm::closure57(v44547_1_0.clone(),
                                                                                                                                                                                                                                                               ());
                                                                                                                                                                                                                                        ()
                                                                                                                                                                                                                                    };
                                                                                                                                                                                                                                let v46289:
                                                                                                                                                                                                                                        std::pin::Pin<Box<dyn std::future::Future<Output = Result<Spiral_wasm::US4,
                                                                                                                                                                                                                                                                                                  anyhow::Error>>>> =
                                                                                                                                                                                                                                    Spiral_wasm::method14(v837.clone(),
                                                                                                                                                                                                                                                          27_u8);
                                                                                                                                                                                                                                let v46291:
                                                                                                                                                                                                                                        Result<Spiral_wasm::US4,
                                                                                                                                                                                                                                               anyhow::Error> =
                                                                                                                                                                                                                                    v46289.await;
                                                                                                                                                                                                                                let v46292 =
                                                                                                                                                                                                                                    Spiral_wasm::method18();
                                                                                                                                                                                                                                let v46294:
                                                                                                                                                                                                                                        Result<Spiral_wasm::US4,
                                                                                                                                                                                                                                               std::string::String> =
                                                                                                                                                                                                                                    v46291.map_err(|x| v46292(x));
                                                                                                                                                                                                                                let v46295:
                                                                                                                                                                                                                                        Spiral_wasm::US6 =
                                                                                                                                                                                                                                    match &v46294
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                        Err(v46294_1_0)
                                                                                                                                                                                                                                        =>
                                                                                                                                                                                                                                        v846(v46294_1_0.clone()),
                                                                                                                                                                                                                                        Ok(v46294_0_0)
                                                                                                                                                                                                                                        =>
                                                                                                                                                                                                                                        v845(v46294_0_0.clone()),
                                                                                                                                                                                                                                    };
                                                                                                                                                                                                                                match &v46295
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                    Spiral_wasm::US6::US6_0(v46295_0_0)
                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                        let v46296:
                                                                                                                                                                                                                                                Spiral_wasm::US4 =
                                                                                                                                                                                                                                            v46295_0_0.clone();
                                                                                                                                                                                                                                        match &v46296
                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                            Spiral_wasm::US4::US4_0(v46296_0_0)
                                                                                                                                                                                                                                            =>
                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                let v46324:
                                                                                                                                                                                                                                                        () =
                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                        Spiral_wasm::closure63(match &v46296
                                                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                                                   Spiral_wasm::US4::US4_0(x)
                                                                                                                                                                                                                                                                                   =>
                                                                                                                                                                                                                                                                                   x.clone(),
                                                                                                                                                                                                                                                                                   _
                                                                                                                                                                                                                                                                                   =>
                                                                                                                                                                                                                                                                                   unreachable!(),
                                                                                                                                                                                                                                                                               },
                                                                                                                                                                                                                                                                               ());
                                                                                                                                                                                                                                                        ()
                                                                                                                                                                                                                                                    };
                                                                                                                                                                                                                                                let v47153:
                                                                                                                                                                                                                                                        bool =
                                                                                                                                                                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                                                                                let v47155:
                                                                                                                                                                                                                                                        bool =
                                                                                                                                                                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                                                                                let v47156:
                                                                                                                                                                                                                                                        u8 =
                                                                                                                                                                                                                                                    Spiral_wasm::method24();
                                                                                                                                                                                                                                                let v47160:
                                                                                                                                                                                                                                                        string =
                                                                                                                                                                                                                                                    string("true; v47156 });  // rust.fix_closure\'");
                                                                                                                                                                                                                                                let v47161:
                                                                                                                                                                                                                                                        bool =
                                                                                                                                                                                                                                                    true; v47156 });  // rust.fix_closure';
                                                                                                                                                                                                                                                let v47163 =
                                                                                                                                                                                                                                                    __future_init;
                                                                                                                                                                                                                                                let v47165:
                                                                                                                                                                                                                                                        std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                                                                                                                                                                    v47163;
                                                                                                                                                                                                                                                let v47168:
                                                                                                                                                                                                                                                        Spiral_wasm::US7 =
                                                                                                                                                                                                                                                    Spiral_wasm::method20(v47165.await);
                                                                                                                                                                                                                                                let v47170:
                                                                                                                                                                                                                                                        string =
                                                                                                                                                                                                                                                    string("true; v47168 });  // rust.fix_closure\'");
                                                                                                                                                                                                                                                let v47171:
                                                                                                                                                                                                                                                        bool =
                                                                                                                                                                                                                                                    true; v47168 });  // rust.fix_closure';
                                                                                                                                                                                                                                                let v47173 =
                                                                                                                                                                                                                                                    __future_init;
                                                                                                                                                                                                                                                v47173
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                            _
                                                                                                                                                                                                                                            =>
                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                let v46298:
                                                                                                                                                                                                                                                        bool =
                                                                                                                                                                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                                                                                let v46300:
                                                                                                                                                                                                                                                        bool =
                                                                                                                                                                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                                                                                let v46301:
                                                                                                                                                                                                                                                        u8 =
                                                                                                                                                                                                                                                    Spiral_wasm::method24();
                                                                                                                                                                                                                                                let v46305:
                                                                                                                                                                                                                                                        string =
                                                                                                                                                                                                                                                    string("true; v46301 });  // rust.fix_closure\'");
                                                                                                                                                                                                                                                let v46306:
                                                                                                                                                                                                                                                        bool =
                                                                                                                                                                                                                                                    true; v46301 });  // rust.fix_closure';
                                                                                                                                                                                                                                                let v46308 =
                                                                                                                                                                                                                                                    __future_init;
                                                                                                                                                                                                                                                let v46310:
                                                                                                                                                                                                                                                        std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                                                                                                                                                                    v46308;
                                                                                                                                                                                                                                                let v46313:
                                                                                                                                                                                                                                                        Spiral_wasm::US7 =
                                                                                                                                                                                                                                                    Spiral_wasm::method22(v46310.await);
                                                                                                                                                                                                                                                let v46315:
                                                                                                                                                                                                                                                        string =
                                                                                                                                                                                                                                                    string("true; v46313 });  // rust.fix_closure\'");
                                                                                                                                                                                                                                                let v46316:
                                                                                                                                                                                                                                                        bool =
                                                                                                                                                                                                                                                    true; v46313 });  // rust.fix_closure';
                                                                                                                                                                                                                                                let v46318 =
                                                                                                                                                                                                                                                    __future_init;
                                                                                                                                                                                                                                                v46318
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                    Spiral_wasm::US6::US6_1(v46295_1_0)
                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                        let v47181:
                                                                                                                                                                                                                                                () =
                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                Spiral_wasm::closure58(v46295_1_0.clone(),
                                                                                                                                                                                                                                                                       ());
                                                                                                                                                                                                                                                ()
                                                                                                                                                                                                                                            };
                                                                                                                                                                                                                                        let v48037:
                                                                                                                                                                                                                                                std::pin::Pin<Box<dyn std::future::Future<Output = Result<Spiral_wasm::US4,
                                                                                                                                                                                                                                                                                                          anyhow::Error>>>> =
                                                                                                                                                                                                                                            Spiral_wasm::method14(v837.clone(),
                                                                                                                                                                                                                                                                  28_u8);
                                                                                                                                                                                                                                        let v48039:
                                                                                                                                                                                                                                                Result<Spiral_wasm::US4,
                                                                                                                                                                                                                                                       anyhow::Error> =
                                                                                                                                                                                                                                            v48037.await;
                                                                                                                                                                                                                                        let v48040 =
                                                                                                                                                                                                                                            Spiral_wasm::method18();
                                                                                                                                                                                                                                        let v48042:
                                                                                                                                                                                                                                                Result<Spiral_wasm::US4,
                                                                                                                                                                                                                                                       std::string::String> =
                                                                                                                                                                                                                                            v48039.map_err(|x| v48040(x));
                                                                                                                                                                                                                                        let v48043:
                                                                                                                                                                                                                                                Spiral_wasm::US6 =
                                                                                                                                                                                                                                            match &v48042
                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                Err(v48042_1_0)
                                                                                                                                                                                                                                                =>
                                                                                                                                                                                                                                                v846(v48042_1_0.clone()),
                                                                                                                                                                                                                                                Ok(v48042_0_0)
                                                                                                                                                                                                                                                =>
                                                                                                                                                                                                                                                v845(v48042_0_0.clone()),
                                                                                                                                                                                                                                            };
                                                                                                                                                                                                                                        match &v48043
                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                            Spiral_wasm::US6::US6_0(v48043_0_0)
                                                                                                                                                                                                                                            =>
                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                let v48044:
                                                                                                                                                                                                                                                        Spiral_wasm::US4 =
                                                                                                                                                                                                                                                    v48043_0_0.clone();
                                                                                                                                                                                                                                                match &v48044
                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                    Spiral_wasm::US4::US4_0(v48044_0_0)
                                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                        let v48072:
                                                                                                                                                                                                                                                                () =
                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                Spiral_wasm::closure62(match &v48044
                                                                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                                                                           Spiral_wasm::US4::US4_0(x)
                                                                                                                                                                                                                                                                                           =>
                                                                                                                                                                                                                                                                                           x.clone(),
                                                                                                                                                                                                                                                                                           _
                                                                                                                                                                                                                                                                                           =>
                                                                                                                                                                                                                                                                                           unreachable!(),
                                                                                                                                                                                                                                                                                       },
                                                                                                                                                                                                                                                                                       ());
                                                                                                                                                                                                                                                                ()
                                                                                                                                                                                                                                                            };
                                                                                                                                                                                                                                                        let v48901:
                                                                                                                                                                                                                                                                bool =
                                                                                                                                                                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                                                                                        let v48903:
                                                                                                                                                                                                                                                                bool =
                                                                                                                                                                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                                                                                        let v48904:
                                                                                                                                                                                                                                                                u8 =
                                                                                                                                                                                                                                                            Spiral_wasm::method23();
                                                                                                                                                                                                                                                        let v48908:
                                                                                                                                                                                                                                                                string =
                                                                                                                                                                                                                                                            string("true; v48904 });  // rust.fix_closure\'");
                                                                                                                                                                                                                                                        let v48909:
                                                                                                                                                                                                                                                                bool =
                                                                                                                                                                                                                                                            true; v48904 });  // rust.fix_closure';
                                                                                                                                                                                                                                                        let v48911 =
                                                                                                                                                                                                                                                            __future_init;
                                                                                                                                                                                                                                                        let v48913:
                                                                                                                                                                                                                                                                std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                                                                                                                                                                            v48911;
                                                                                                                                                                                                                                                        let v48916:
                                                                                                                                                                                                                                                                Spiral_wasm::US7 =
                                                                                                                                                                                                                                                            Spiral_wasm::method20(v48913.await);
                                                                                                                                                                                                                                                        let v48918:
                                                                                                                                                                                                                                                                string =
                                                                                                                                                                                                                                                            string("true; v48916 });  // rust.fix_closure\'");
                                                                                                                                                                                                                                                        let v48919:
                                                                                                                                                                                                                                                                bool =
                                                                                                                                                                                                                                                            true; v48916 });  // rust.fix_closure';
                                                                                                                                                                                                                                                        let v48921 =
                                                                                                                                                                                                                                                            __future_init;
                                                                                                                                                                                                                                                        v48921
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                    _
                                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                        let v48046:
                                                                                                                                                                                                                                                                bool =
                                                                                                                                                                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                                                                                        let v48048:
                                                                                                                                                                                                                                                                bool =
                                                                                                                                                                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                                                                                        let v48049:
                                                                                                                                                                                                                                                                u8 =
                                                                                                                                                                                                                                                            Spiral_wasm::method23();
                                                                                                                                                                                                                                                        let v48053:
                                                                                                                                                                                                                                                                string =
                                                                                                                                                                                                                                                            string("true; v48049 });  // rust.fix_closure\'");
                                                                                                                                                                                                                                                        let v48054:
                                                                                                                                                                                                                                                                bool =
                                                                                                                                                                                                                                                            true; v48049 });  // rust.fix_closure';
                                                                                                                                                                                                                                                        let v48056 =
                                                                                                                                                                                                                                                            __future_init;
                                                                                                                                                                                                                                                        let v48058:
                                                                                                                                                                                                                                                                std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                                                                                                                                                                            v48056;
                                                                                                                                                                                                                                                        let v48061:
                                                                                                                                                                                                                                                                Spiral_wasm::US7 =
                                                                                                                                                                                                                                                            Spiral_wasm::method22(v48058.await);
                                                                                                                                                                                                                                                        let v48063:
                                                                                                                                                                                                                                                                string =
                                                                                                                                                                                                                                                            string("true; v48061 });  // rust.fix_closure\'");
                                                                                                                                                                                                                                                        let v48064:
                                                                                                                                                                                                                                                                bool =
                                                                                                                                                                                                                                                            true; v48061 });  // rust.fix_closure';
                                                                                                                                                                                                                                                        let v48066 =
                                                                                                                                                                                                                                                            __future_init;
                                                                                                                                                                                                                                                        v48066
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                            Spiral_wasm::US6::US6_1(v48043_1_0)
                                                                                                                                                                                                                                            =>
                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                let v48929:
                                                                                                                                                                                                                                                        () =
                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                        Spiral_wasm::closure59(v48043_1_0.clone(),
                                                                                                                                                                                                                                                                               ());
                                                                                                                                                                                                                                                        ()
                                                                                                                                                                                                                                                    };
                                                                                                                                                                                                                                                let v49785:
                                                                                                                                                                                                                                                        std::pin::Pin<Box<dyn std::future::Future<Output = Result<Spiral_wasm::US4,
                                                                                                                                                                                                                                                                                                                  anyhow::Error>>>> =
                                                                                                                                                                                                                                                    Spiral_wasm::method14(v837.clone(),
                                                                                                                                                                                                                                                                          29_u8);
                                                                                                                                                                                                                                                let v49787:
                                                                                                                                                                                                                                                        Result<Spiral_wasm::US4,
                                                                                                                                                                                                                                                               anyhow::Error> =
                                                                                                                                                                                                                                                    v49785.await;
                                                                                                                                                                                                                                                let v49788 =
                                                                                                                                                                                                                                                    Spiral_wasm::method18();
                                                                                                                                                                                                                                                let v49790:
                                                                                                                                                                                                                                                        Result<Spiral_wasm::US4,
                                                                                                                                                                                                                                                               std::string::String> =
                                                                                                                                                                                                                                                    v49787.map_err(|x| v49788(x));
                                                                                                                                                                                                                                                let v49791:
                                                                                                                                                                                                                                                        Spiral_wasm::US6 =
                                                                                                                                                                                                                                                    match &v49790
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                        Err(v49790_1_0)
                                                                                                                                                                                                                                                        =>
                                                                                                                                                                                                                                                        v846(v49790_1_0.clone()),
                                                                                                                                                                                                                                                        Ok(v49790_0_0)
                                                                                                                                                                                                                                                        =>
                                                                                                                                                                                                                                                        v845(v49790_0_0.clone()),
                                                                                                                                                                                                                                                    };
                                                                                                                                                                                                                                                match &v49791
                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                    Spiral_wasm::US6::US6_0(v49791_0_0)
                                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                        let v49792:
                                                                                                                                                                                                                                                                Spiral_wasm::US4 =
                                                                                                                                                                                                                                                            v49791_0_0.clone();
                                                                                                                                                                                                                                                        match &v49792
                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                            Spiral_wasm::US4::US4_0(v49792_0_0)
                                                                                                                                                                                                                                                            =>
                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                let v49820:
                                                                                                                                                                                                                                                                        () =
                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                        Spiral_wasm::closure61(match &v49792
                                                                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                                                                   Spiral_wasm::US4::US4_0(x)
                                                                                                                                                                                                                                                                                                   =>
                                                                                                                                                                                                                                                                                                   x.clone(),
                                                                                                                                                                                                                                                                                                   _
                                                                                                                                                                                                                                                                                                   =>
                                                                                                                                                                                                                                                                                                   unreachable!(),
                                                                                                                                                                                                                                                                                               },
                                                                                                                                                                                                                                                                                               ());
                                                                                                                                                                                                                                                                        ()
                                                                                                                                                                                                                                                                    };
                                                                                                                                                                                                                                                                let v50649:
                                                                                                                                                                                                                                                                        bool =
                                                                                                                                                                                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                                                                                                let v50651:
                                                                                                                                                                                                                                                                        bool =
                                                                                                                                                                                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                                                                                                let v50652:
                                                                                                                                                                                                                                                                        u8 =
                                                                                                                                                                                                                                                                    Spiral_wasm::method21();
                                                                                                                                                                                                                                                                let v50656:
                                                                                                                                                                                                                                                                        string =
                                                                                                                                                                                                                                                                    string("true; v50652 });  // rust.fix_closure\'");
                                                                                                                                                                                                                                                                let v50657:
                                                                                                                                                                                                                                                                        bool =
                                                                                                                                                                                                                                                                    true; v50652 });  // rust.fix_closure';
                                                                                                                                                                                                                                                                let v50659 =
                                                                                                                                                                                                                                                                    __future_init;
                                                                                                                                                                                                                                                                let v50661:
                                                                                                                                                                                                                                                                        std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                                                                                                                                                                                    v50659;
                                                                                                                                                                                                                                                                let v50664:
                                                                                                                                                                                                                                                                        Spiral_wasm::US7 =
                                                                                                                                                                                                                                                                    Spiral_wasm::method20(v50661.await);
                                                                                                                                                                                                                                                                let v50666:
                                                                                                                                                                                                                                                                        string =
                                                                                                                                                                                                                                                                    string("true; v50664 });  // rust.fix_closure\'");
                                                                                                                                                                                                                                                                let v50667:
                                                                                                                                                                                                                                                                        bool =
                                                                                                                                                                                                                                                                    true; v50664 });  // rust.fix_closure';
                                                                                                                                                                                                                                                                let v50669 =
                                                                                                                                                                                                                                                                    __future_init;
                                                                                                                                                                                                                                                                v50669
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                            _
                                                                                                                                                                                                                                                            =>
                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                let v49794:
                                                                                                                                                                                                                                                                        bool =
                                                                                                                                                                                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                                                                                                let v49796:
                                                                                                                                                                                                                                                                        bool =
                                                                                                                                                                                                                                                                    true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                                                                                                let v49797:
                                                                                                                                                                                                                                                                        u8 =
                                                                                                                                                                                                                                                                    Spiral_wasm::method21();
                                                                                                                                                                                                                                                                let v49801:
                                                                                                                                                                                                                                                                        string =
                                                                                                                                                                                                                                                                    string("true; v49797 });  // rust.fix_closure\'");
                                                                                                                                                                                                                                                                let v49802:
                                                                                                                                                                                                                                                                        bool =
                                                                                                                                                                                                                                                                    true; v49797 });  // rust.fix_closure';
                                                                                                                                                                                                                                                                let v49804 =
                                                                                                                                                                                                                                                                    __future_init;
                                                                                                                                                                                                                                                                let v49806:
                                                                                                                                                                                                                                                                        std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                                                                                                                                                                                    v49804;
                                                                                                                                                                                                                                                                let v49809:
                                                                                                                                                                                                                                                                        Spiral_wasm::US7 =
                                                                                                                                                                                                                                                                    Spiral_wasm::method22(v49806.await);
                                                                                                                                                                                                                                                                let v49811:
                                                                                                                                                                                                                                                                        string =
                                                                                                                                                                                                                                                                    string("true; v49809 });  // rust.fix_closure\'");
                                                                                                                                                                                                                                                                let v49812:
                                                                                                                                                                                                                                                                        bool =
                                                                                                                                                                                                                                                                    true; v49809 });  // rust.fix_closure';
                                                                                                                                                                                                                                                                let v49814 =
                                                                                                                                                                                                                                                                    __future_init;
                                                                                                                                                                                                                                                                v49814
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                    Spiral_wasm::US6::US6_1(v49791_1_0)
                                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                        let v50677:
                                                                                                                                                                                                                                                                () =
                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                Spiral_wasm::closure60(v49791_1_0.clone(),
                                                                                                                                                                                                                                                                                       ());
                                                                                                                                                                                                                                                                ()
                                                                                                                                                                                                                                                            };
                                                                                                                                                                                                                                                        let v51533:
                                                                                                                                                                                                                                                                bool =
                                                                                                                                                                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                                                                                        let v51535:
                                                                                                                                                                                                                                                                bool =
                                                                                                                                                                                                                                                            true; let __future_init = Box::pin(async move { //;
                                                                                                                                                                                                                                                        let v51536:
                                                                                                                                                                                                                                                                u8 =
                                                                                                                                                                                                                                                            Spiral_wasm::method19();
                                                                                                                                                                                                                                                        let v51540:
                                                                                                                                                                                                                                                                string =
                                                                                                                                                                                                                                                            string("true; v51536 });  // rust.fix_closure\'");
                                                                                                                                                                                                                                                        let v51541:
                                                                                                                                                                                                                                                                bool =
                                                                                                                                                                                                                                                            true; v51536 });  // rust.fix_closure';
                                                                                                                                                                                                                                                        let v51543 =
                                                                                                                                                                                                                                                            __future_init;
                                                                                                                                                                                                                                                        let v51545:
                                                                                                                                                                                                                                                                std::pin::Pin<Box<dyn std::future::Future<Output = u8>>> =
                                                                                                                                                                                                                                                            v51543;
                                                                                                                                                                                                                                                        let v51548:
                                                                                                                                                                                                                                                                Spiral_wasm::US7 =
                                                                                                                                                                                                                                                            Spiral_wasm::method20(v51545.await);
                                                                                                                                                                                                                                                        let v51550:
                                                                                                                                                                                                                                                                string =
                                                                                                                                                                                                                                                            string("true; v51548 });  // rust.fix_closure\'");
                                                                                                                                                                                                                                                        let v51551:
                                                                                                                                                                                                                                                                bool =
                                                                                                                                                                                                                                                            true; v51548 });  // rust.fix_closure';
                                                                                                                                                                                                                                                        let v51553 =
                                                                                                                                                                                                                                                            __future_init;
                                                                                                                                                                                                                                                        v51553
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                }
                                                                                                                                                                                                            }
                                                                                                                                                                                                        }
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    };
                let v51615: Spiral_wasm::US7 = v51613.await;
                let v51618: () = {
                    Spiral_wasm::closure90(v51615.clone(), ());
                    ()
                };
                let v52471: Result<u8, anyhow::Error> = Spiral_wasm::method51(match &v51615 {
                    Spiral_wasm::US7::US7_0(v51615_0_0) => {
                        Ok::<u8, anyhow::Error>(v51615_0_0.clone())
                    }
                    Spiral_wasm::US7::US7_1(v51615_1_0) => {
                        let v52419: LrcPtr<Spiral_wasm::Mut3> = LrcPtr::new(Spiral_wasm::Mut3 {
                            l0: MutCell::new(Spiral_wasm::method10()),
                        });
                        let v52426: () = {
                            Spiral_wasm::closure12(
                                v52419.clone(),
                                sprintf!("{}", string("{ ")),
                                (),
                            );
                            ()
                        };
                        let v52435: () = {
                            Spiral_wasm::closure12(
                                v52419.clone(),
                                sprintf!("{}", string("retries")),
                                (),
                            );
                            ()
                        };
                        let v52444: () = {
                            Spiral_wasm::closure12(
                                v52419.clone(),
                                sprintf!("{}", string(" = ")),
                                (),
                            );
                            ()
                        };
                        let v52452: () = {
                            Spiral_wasm::closure12(
                                v52419.clone(),
                                sprintf!("{}", v51615_1_0.clone()),
                                (),
                            );
                            ()
                        };
                        let v52461: () = {
                            Spiral_wasm::closure12(
                                v52419.clone(),
                                sprintf!("{}", string(" }")),
                                (),
                            );
                            ()
                        };
                        let v52464: string = v52419.l0.get().clone();
                        let v52466: anyhow::Error = anyhow::anyhow!(v52464);
                        Err(v52466)
                    }
                });
                let v52475: string = string("true; v52471 });  // rust.fix_closure\'");
                let v52476: bool = true;
                v52471
            }); // rust.fix_closure';
            let v52478 = __future_init;
            v52478
        }
        pub fn closure91(
            v0_1: LrcPtr<MutCell<Option<Spiral_wasm::US8>>>,
            v1: Option<Spiral_wasm::US8>,
        ) -> LrcPtr<MutCell<Option<Spiral_wasm::US8>>> {
            v0_1.set(v1);
            v0_1
        }
        pub fn closure92(
            v0_1: Option<u8>,
            v1: Func1<Option<Spiral_wasm::US8>, LrcPtr<MutCell<Option<Spiral_wasm::US8>>>>,
            unitVar: (),
        ) {
            {
                let value: LrcPtr<MutCell<Option<Spiral_wasm::US8>>> = v1(match &v0_1 {
                    None => None::<Spiral_wasm::US8>,
                    Some(v0_1_0_0) => {
                        let x: u8 = v0_1_0_0.clone();
                        Some((Func0::new({
                            let x = x.clone();
                            move || Spiral_wasm::US8::US8_0(x)
                        }))())
                    }
                });
                ()
            }
            ()
        }
        pub fn closure0(unitVar: (), v0_1: Array<string>) -> i32 {
            let v1: clap::Command = Spiral_wasm::method0();
            let v3: clap::ArgMatches = clap::Command::get_matches(v1);
            let v4: string = Spiral_wasm::method1();
            let v6: &str = &*v4;
            let v8: Option<std::string::String> =
                clap::ArgMatches::get_one(&v3.clone(), v6).cloned();
            let _v9: LrcPtr<MutCell<Option<Spiral_wasm::US0>>> = refCell(None::<Spiral_wasm::US0>);
            let v14: () = {
                Spiral_wasm::closure2(
                    v8,
                    Func1::new({
                        let _v9 = _v9.clone();
                        move |v: Option<Spiral_wasm::US0>| Spiral_wasm::closure1(_v9.clone(), v)
                    }),
                    (),
                );
                ()
            };
            let v29: Spiral_wasm::US0 = defaultValue(Spiral_wasm::US0::US0_1, _v9.get().clone());
            let v85: Spiral_wasm::US1 = match &v29 {
                Spiral_wasm::US0::US0_0(v29_0_0) => {
                    let v35: string = fable_library_rust::String_::fromString(match &v29 {
                        Spiral_wasm::US0::US0_0(x) => x.clone(),
                        _ => unreachable!(),
                    });
                    let v40: Spiral_wasm::US2 = if string("Verbose") == v35.clone() {
                        Spiral_wasm::US2::US2_0(Spiral_wasm::US3::US3_0)
                    } else {
                        Spiral_wasm::US2::US2_1
                    };
                    Spiral_wasm::US1::US1_0(match &v40 {
                        Spiral_wasm::US2::US2_0(v40_0_0) => Spiral_wasm::US2::US2_0(match &v40 {
                            Spiral_wasm::US2::US2_0(x) => x.clone(),
                            _ => unreachable!(),
                        }),
                        _ => {
                            let v47: Spiral_wasm::US2 = if string("Debug") == v35.clone() {
                                Spiral_wasm::US2::US2_0(Spiral_wasm::US3::US3_1)
                            } else {
                                Spiral_wasm::US2::US2_1
                            };
                            match &v47 {
                                Spiral_wasm::US2::US2_0(v47_0_0) => {
                                    Spiral_wasm::US2::US2_0(match &v47 {
                                        Spiral_wasm::US2::US2_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    })
                                }
                                _ => {
                                    let v54: Spiral_wasm::US2 = if string("Info") == v35.clone() {
                                        Spiral_wasm::US2::US2_0(Spiral_wasm::US3::US3_2)
                                    } else {
                                        Spiral_wasm::US2::US2_1
                                    };
                                    match &v54 {
                                        Spiral_wasm::US2::US2_0(v54_0_0) => {
                                            Spiral_wasm::US2::US2_0(match &v54 {
                                                Spiral_wasm::US2::US2_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            })
                                        }
                                        _ => {
                                            let v61: Spiral_wasm::US2 =
                                                if string("Warning") == v35.clone() {
                                                    Spiral_wasm::US2::US2_0(Spiral_wasm::US3::US3_3)
                                                } else {
                                                    Spiral_wasm::US2::US2_1
                                                };
                                            match &v61 {
                                                Spiral_wasm::US2::US2_0(v61_0_0) => {
                                                    Spiral_wasm::US2::US2_0(match &v61 {
                                                        Spiral_wasm::US2::US2_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    })
                                                }
                                                _ => {
                                                    let v68: Spiral_wasm::US2 =
                                                        if string("Critical") == v35.clone() {
                                                            Spiral_wasm::US2::US2_0(
                                                                Spiral_wasm::US3::US3_4,
                                                            )
                                                        } else {
                                                            Spiral_wasm::US2::US2_1
                                                        };
                                                    match &v68 {
                                                        Spiral_wasm::US2::US2_0(v68_0_0) => {
                                                            Spiral_wasm::US2::US2_0(match &v68 {
                                                                Spiral_wasm::US2::US2_0(x) => {
                                                                    x.clone()
                                                                }
                                                                _ => unreachable!(),
                                                            })
                                                        }
                                                        _ => Spiral_wasm::US2::US2_1,
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    })
                }
                _ => Spiral_wasm::US1::US1_1,
            };
            let v92: Spiral_wasm::US2 = if let Spiral_wasm::US1::US1_0(v85_0_0) = &v85 {
                let v86: Spiral_wasm::US2 = match &v85 {
                    Spiral_wasm::US1::US1_0(x) => x.clone(),
                    _ => unreachable!(),
                };
                if let Spiral_wasm::US2::US2_0(v86_0_0) = &v86 {
                    Spiral_wasm::US2::US2_0(match &v86 {
                        Spiral_wasm::US2::US2_0(x) => x.clone(),
                        _ => unreachable!(),
                    })
                } else {
                    Spiral_wasm::US2::US2_1
                }
            } else {
                Spiral_wasm::US2::US2_1
            };
            let v99: () = {
                Spiral_wasm::closure3(
                    match &v92 {
                        Spiral_wasm::US2::US2_0(v92_0_0) => match &v92 {
                            Spiral_wasm::US2::US2_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => Spiral_wasm::US3::US3_0,
                    },
                    (),
                );
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_wasm::Mut0>,
                LrcPtr<Spiral_wasm::Mut1>,
                LrcPtr<Spiral_wasm::Mut2>,
                LrcPtr<Spiral_wasm::Mut3>,
                LrcPtr<Spiral_wasm::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_wasm::TraceState::trace_state().get().clone());
            let v131: () = {
                Spiral_wasm::closure7(v0_1, ());
                ()
            };
            let v931: string = Spiral_wasm::method11();
            let v933: &str = &*v931;
            let v935: bool = clap::ArgMatches::get_flag(&v3, v933);
            let v936: std::pin::Pin<
                Box<dyn std::future::Future<Output = Result<u8, anyhow::Error>>>,
            > = Spiral_wasm::method12(v3);
            let v938 = tokio::runtime::Builder::new_multi_thread()
                .enable_all()
                .build()
                .unwrap();
            let v940: Result<u8, anyhow::Error> = v938.handle().block_on(v936);
            let v941 = Spiral_wasm::method18();
            let v943: Result<u8, std::string::String> = v940.map_err(|x| v941(x));
            let v945: Option<u8> = v943.clone().ok();
            let _v946: LrcPtr<MutCell<Option<Spiral_wasm::US8>>> =
                refCell(None::<Spiral_wasm::US8>);
            let v951: () = {
                Spiral_wasm::closure92(
                    v945,
                    Func1::new({
                        let _v946 = _v946.clone();
                        move |v_1: Option<Spiral_wasm::US8>| {
                            Spiral_wasm::closure91(_v946.clone(), v_1)
                        }
                    }),
                    (),
                );
                ()
            };
            let v966: Spiral_wasm::US8 = defaultValue(Spiral_wasm::US8::US8_1, _v946.get().clone());
            match &v966 {
                Spiral_wasm::US8::US8_0(v966_0_0) => {
                    if v935 {
                        let v973: Result<(), string> =
                            Err(string("spiral_wasm.main / exception=true"));
                        v973.unwrap();
                        ()
                    }
                }
                _ => {
                    if v935 {
                        ()
                    } else {
                        let v976: u8 = v943.unwrap();
                        ()
                    }
                }
            }
            0_i32
        }
        pub fn v0() -> Func1<Array<string>, i32> {
            static v0: OnceInit<Func1<Array<string>, i32>> = OnceInit::new();
            v0.get_or_init(|| Func1::new(move |v: Array<string>| Spiral_wasm::closure0((), v)))
                .clone()
        }
        pub fn main(args: Array<string>) -> i32 {
            (Spiral_wasm::v0())(args)
        }
    }
}
pub use module_fb49c4a9::*;
#[path = "../../../lib/fsharp/Common.rs"]
mod module_ad43931;
pub use module_ad43931::*;
#[path = "../../../lib/spiral/async_.rs"]
mod module_67c461a2;
pub use module_67c461a2::*;
#[path = "../../../lib/spiral/common.rs"]
mod module_181b15d6;
pub use module_181b15d6::*;
#[path = "../../../lib/spiral/crypto.rs"]
mod module_90d9c778;
pub use module_90d9c778::*;
#[path = "../../../lib/spiral/date_time.rs"]
mod module_e43a8385;
pub use module_e43a8385::*;
#[path = "../../../lib/spiral/file_system.rs"]
mod module_a7db9b47;
pub use module_a7db9b47::*;
#[path = "../../../lib/spiral/lib.rs"]
mod module_98e448fc;
pub use module_98e448fc::*;
#[path = "../../../lib/spiral/networking.rs"]
mod module_268024e5;
pub use module_268024e5::*;
#[path = "../../../lib/spiral/platform.rs"]
mod module_7d8ad484;
pub use module_7d8ad484::*;
#[path = "../../../lib/spiral/runtime.rs"]
mod module_485aae07;
pub use module_485aae07::*;
#[path = "../../../lib/spiral/sm.rs"]
mod module_582b4305;
pub use module_582b4305::*;
#[path = "../../../lib/spiral/threading.rs"]
mod module_d5afb6f5;
pub use module_d5afb6f5::*;
#[path = "../../../lib/spiral/trace.rs"]
mod module_9e77af3a;
pub use module_9e77af3a::*;
pub mod Polyglot {
    pub use crate::module_ad43931::Polyglot::*;
}
pub fn main() {
    let args = std::env::args().skip(1).map(fromString).collect();
    Spiral_wasm::main(array_from(args));
}
