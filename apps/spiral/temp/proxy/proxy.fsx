type [<Struct>] US0 =
    | US0_0
    | US0_1
    | US0_2
    | US0_3
    | US0_4
let rec method0 () : struct (string * string * string * bool) =
    let v0 : string = ""
    let v1 : obj = v0
    struct (v0, v0, v0, true)
and method1 (v0 : string) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "String::from(core::ops::Deref::deref($0))"
    let v2 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v0 v1
    let v3 : Types.EmitType<Types.std.string.String> = v2 |> unbox<Types.EmitType<Types.std.string.String>>
    v3
and method2 (v0 : Types.rocket.http.uri.Segments<Types.rocket.http.uri.fmt.Path>) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "format!(\"{:?}\", $0)"
    let v2 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v0 v1
    let v3 : Types.EmitType<Types.std.string.String> = v2 |> unbox<Types.EmitType<Types.std.string.String>>
    v3
and method3 (v0 : (Types.EmitType<Types.std.string.String> [])) : (Types.EmitType<Types.std.string.String> []) =
    v0
and method5 (v0 : int32, v1 : string) : string =
    let v2 : int32 = String.length v1
    let v3 : bool = v2 < v0
    if v3 then
        let v4 : string = $"0{v1}"
        method5(v0, v4)
    else
        v1
and method6 (v0 : uint8) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "format!(\"{:?}\", $0)"
    let v2 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v0 v1
    let v3 : Types.EmitType<Types.std.string.String> = v2 |> unbox<Types.EmitType<Types.std.string.String>>
    v3
and method7 (v0 : Types.std.string.String) : Types.EmitType<Types.std.string.String> =
    let v1 : Types.EmitType<Types.std.string.String> = v0 |> unbox<Types.EmitType<Types.std.string.String>>
    v1
and method8 (v0 : (Types.EmitType<Types.std.string.String> [])) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "$0"
    let v2 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v0 v1
    let v3 : string = "core::ops::Deref::deref(v2)"
    let v4 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v3
    let v5 : obj = v4
    let v6 : string = "format!(\"{:?}\", $0)"
    let v7 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v5 v6
    let v8 : Types.EmitType<Types.std.string.String> = v7 |> unbox<Types.EmitType<Types.std.string.String>>
    v8
and method9 (v0 : string) : string =
    v0
and method10 () : string =
    let v0 : string = "$1=$2"
    v0
and method11 (v0 : Types.std.string.String) : Types.std.string.String =
    v0
and method12 () : string =
    let v0 : string = "[$1]"
    v0
and method13 () : string =
    let v0 : string = "\""
    v0
and method14 () : string =
    let v0 : string = " "
    v0
and method4 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.RustInterop.emitRustExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method5(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.RustInterop.emitRustExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method1(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method1(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method1(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method6(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method1(v18)
    let v20 : US0 = US0_0
    let v21 : string = "format!(\"{:?}\", $0)"
    let v22 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v20 v21
    let v23 : Types.EmitType<Types.std.string.String> = method7(v22)
    let v24 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v23|]
    let v25 : (Types.EmitType<Types.std.string.String> []) = method3(v24)
    let v26 : Types.EmitType<Types.std.string.String> = method8(v25)
    let v27 : string = "> parseUrls ()"
    let v28 : Types.EmitType<Types.std.string.String> = method1(v27)
    let v29 : (Types.EmitType<Types.std.string.String> []) = [|v28|]
    let v30 : (Types.EmitType<Types.std.string.String> []) = method3(v29)
    let v31 : string = "$0"
    let v32 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v30 v31
    let v33 : string = "core::ops::Deref::deref(v32)"
    let v34 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v33
    let v35 : obj = v34
    let v36 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v35 v21
    let v37 : Types.EmitType<Types.std.string.String> = v36 |> unbox<Types.EmitType<Types.std.string.String>>
    let v38 : string = "format!(\"{}\", $0)"
    let v39 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v37 v38
    let v40 : string = (v39).ToString ()
    let v41 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v42 : string = "r#\"" + v41 + "\"#"
    let v43 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v42
    let v44 : string = "regex::RegexBuilder::new($0)"
    let v45 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v43 v44
    let v46 : string = "$0.build().unwrap()"
    let v47 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v45 v46
    let v48 : string = method9(v40)
    let v49 : string = "v48.as_str()"
    let v50 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v49
    let v51 : string = method10()
    let v52 : string = "v51.as_str()"
    let v53 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v52
    let v54 : string = "$0.replace_all(&$1, $2).to_string()"
    let v55 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v47, v50, v53) v54
    let v56 : Types.std.string.String = method11(v55)
    let v57 : string = "fable_library_rust::String_::fromString(v56)"
    let v58 : string = Fable.Core.RustInterop.emitRustExpr () v57
    let v59 : string = "\\[\"(.*?)\"\\]"
    let v60 : string = "r#\"" + v59 + "\"#"
    let v61 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v60
    let v62 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v61 v44
    let v63 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v62 v46
    let v64 : string = method9(v58)
    let v65 : string = "v64.as_str()"
    let v66 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v65
    let v67 : string = method12()
    let v68 : string = "v67.as_str()"
    let v69 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v68
    let v70 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v63, v66, v69) v54
    let v71 : Types.std.string.String = method11(v70)
    let v72 : string = "fable_library_rust::String_::fromString(v71)"
    let v73 : string = Fable.Core.RustInterop.emitRustExpr () v72
    let v74 : string = "\\\\\""
    let v75 : string = "r#\"" + v74 + "\"#"
    let v76 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v75
    let v77 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v76 v44
    let v78 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v77 v46
    let v79 : string = method9(v73)
    let v80 : string = "v79.as_str()"
    let v81 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v80
    let v82 : string = method13()
    let v83 : string = "v82.as_str()"
    let v84 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v83
    let v85 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v78, v81, v84) v54
    let v86 : Types.std.string.String = method11(v85)
    let v87 : string = "fable_library_rust::String_::fromString(v86)"
    let v88 : string = Fable.Core.RustInterop.emitRustExpr () v87
    let v89 : string = ", "
    let v90 : string = "r#\"" + v89 + "\"#"
    let v91 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v90
    let v92 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v91 v44
    let v93 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v92 v46
    let v94 : string = method9(v88)
    let v95 : string = "v94.as_str()"
    let v96 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v95
    let v97 : string = method14()
    let v98 : string = "v97.as_str()"
    let v99 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v98
    let v100 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v93, v96, v99) v54
    let v101 : Types.std.string.String = method11(v100)
    let v102 : string = "fable_library_rust::String_::fromString(v101)"
    let v103 : string = Fable.Core.RustInterop.emitRustExpr () v102
    let v104 : Types.EmitType<Types.std.string.String> = method1(v103)
    let v105 : string = "$0"
    let v106 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v1 v105
    let v107 : string = "core::ops::Deref::deref(v106)"
    let v108 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v107
    let v109 : obj = v108
    let v110 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v109 v21
    let v111 : Types.EmitType<Types.std.string.String> = v110 |> unbox<Types.EmitType<Types.std.string.String>>
    let v112 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v111 v38
    let v113 : string = (v112).ToString ()
    let v114 : string = "r#\"" + v41 + "\"#"
    let v115 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v114
    let v116 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v115 v44
    let v117 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v116 v46
    let v118 : string = method9(v113)
    let v119 : string = "v118.as_str()"
    let v120 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v119
    let v121 : string = method10()
    let v122 : string = "v121.as_str()"
    let v123 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v122
    let v124 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v117, v120, v123) v54
    let v125 : Types.std.string.String = method11(v124)
    let v126 : string = "fable_library_rust::String_::fromString(v125)"
    let v127 : string = Fable.Core.RustInterop.emitRustExpr () v126
    let v128 : string = "r#\"" + v59 + "\"#"
    let v129 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v128
    let v130 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v129 v44
    let v131 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v130 v46
    let v132 : string = method9(v127)
    let v133 : string = "v132.as_str()"
    let v134 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v133
    let v135 : string = method12()
    let v136 : string = "v135.as_str()"
    let v137 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v136
    let v138 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v131, v134, v137) v54
    let v139 : Types.std.string.String = method11(v138)
    let v140 : string = "fable_library_rust::String_::fromString(v139)"
    let v141 : string = Fable.Core.RustInterop.emitRustExpr () v140
    let v142 : string = "r#\"" + v74 + "\"#"
    let v143 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v142
    let v144 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v143 v44
    let v145 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v144 v46
    let v146 : string = method9(v141)
    let v147 : string = "v146.as_str()"
    let v148 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v147
    let v149 : string = method13()
    let v150 : string = "v149.as_str()"
    let v151 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v150
    let v152 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v145, v148, v151) v54
    let v153 : Types.std.string.String = method11(v152)
    let v154 : string = "fable_library_rust::String_::fromString(v153)"
    let v155 : string = Fable.Core.RustInterop.emitRustExpr () v154
    let v156 : string = "r#\"" + v89 + "\"#"
    let v157 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v156
    let v158 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v157 v44
    let v159 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v158 v46
    let v160 : string = method9(v155)
    let v161 : string = "v160.as_str()"
    let v162 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v161
    let v163 : string = method14()
    let v164 : string = "v163.as_str()"
    let v165 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v164
    let v166 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v159, v162, v165) v54
    let v167 : Types.std.string.String = method11(v166)
    let v168 : string = "fable_library_rust::String_::fromString(v167)"
    let v169 : string = Fable.Core.RustInterop.emitRustExpr () v168
    let v170 : Types.EmitType<Types.std.string.String> = method1(v169)
    let v171 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v26 v38
    let v172 : string = (v171).ToString ()
    let v173 : string = "r#\"" + v41 + "\"#"
    let v174 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v173
    let v175 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v174 v44
    let v176 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v175 v46
    let v177 : string = method9(v172)
    let v178 : string = "v177.as_str()"
    let v179 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v178
    let v180 : string = method10()
    let v181 : string = "v180.as_str()"
    let v182 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v181
    let v183 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v176, v179, v182) v54
    let v184 : Types.std.string.String = method11(v183)
    let v185 : string = "fable_library_rust::String_::fromString(v184)"
    let v186 : string = Fable.Core.RustInterop.emitRustExpr () v185
    let v187 : string = "r#\"" + v59 + "\"#"
    let v188 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v187
    let v189 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v188 v44
    let v190 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v189 v46
    let v191 : string = method9(v186)
    let v192 : string = "v191.as_str()"
    let v193 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v192
    let v194 : string = method12()
    let v195 : string = "v194.as_str()"
    let v196 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v195
    let v197 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v190, v193, v196) v54
    let v198 : Types.std.string.String = method11(v197)
    let v199 : string = "fable_library_rust::String_::fromString(v198)"
    let v200 : string = Fable.Core.RustInterop.emitRustExpr () v199
    let v201 : string = "r#\"" + v74 + "\"#"
    let v202 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v201
    let v203 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v202 v44
    let v204 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v203 v46
    let v205 : string = method9(v200)
    let v206 : string = "v205.as_str()"
    let v207 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v206
    let v208 : string = method13()
    let v209 : string = "v208.as_str()"
    let v210 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v209
    let v211 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v204, v207, v210) v54
    let v212 : Types.std.string.String = method11(v211)
    let v213 : string = "fable_library_rust::String_::fromString(v212)"
    let v214 : string = Fable.Core.RustInterop.emitRustExpr () v213
    let v215 : string = "r#\"" + v89 + "\"#"
    let v216 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v215
    let v217 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v216 v44
    let v218 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v217 v46
    let v219 : string = method9(v214)
    let v220 : string = "v219.as_str()"
    let v221 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v220
    let v222 : string = method14()
    let v223 : string = "v222.as_str()"
    let v224 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v223
    let v225 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v218, v221, v224) v54
    let v226 : Types.std.string.String = method11(v225)
    let v227 : string = "fable_library_rust::String_::fromString(v226)"
    let v228 : string = Fable.Core.RustInterop.emitRustExpr () v227
    let v229 : Types.EmitType<Types.std.string.String> = method1(v228)
    let v230 : string = "006666"
    let v231 : string = v230.Substring (0, 2)
    let v232 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v233 : uint8 = Fable.Core.RustInterop.emitRustExpr v231 v232
    let v234 : string = v230.Substring (2, 4)
    let v235 : uint8 = Fable.Core.RustInterop.emitRustExpr v234 v232
    let v236 : string = v230.Substring (4, 6)
    let v237 : uint8 = Fable.Core.RustInterop.emitRustExpr v236 v232
    let v238 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v239 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v170, v233, v235, v237) v238
    let v240 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v239 v38
    let v241 : string = "385779"
    let v242 : string = v241.Substring (0, 2)
    let v243 : uint8 = Fable.Core.RustInterop.emitRustExpr v242 v232
    let v244 : string = v241.Substring (2, 4)
    let v245 : uint8 = Fable.Core.RustInterop.emitRustExpr v244 v232
    let v246 : string = v241.Substring (4, 6)
    let v247 : uint8 = Fable.Core.RustInterop.emitRustExpr v246 v232
    let v248 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v229, v243, v245, v247) v238
    let v249 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v248 v38
    let v250 : string = $"{v104} {v240} {v249}"
    System.Console.WriteLine v250
    ()
and closure1 () (v0 : Types.rocket.http.uri.Segments<Types.rocket.http.uri.fmt.Path>) : unit =
    let struct (v1 : string, v2 : string, v3 : string, v4 : bool) = method0()
    let v5 : string = "chrono::Utc::now()"
    let v6 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v5
    let v7 : string = "($0).timestamp()"
    let v8 : int64 = Fable.Core.RustInterop.emitRustExpr v6 v7
    let v9 : string = "uri"
    let v10 : Types.EmitType<Types.std.string.String> = method1(v9)
    let v11 : Types.EmitType<Types.std.string.String> = method2(v0)
    let v12 : (Types.EmitType<Types.std.string.String> []) = [|v10; v11|]
    let v13 : (Types.EmitType<Types.std.string.String> []) = method3(v12)
    method4(v8, v13)
and method15 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.RustInterop.emitRustExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method5(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.RustInterop.emitRustExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method1(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method1(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method1(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method6(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method1(v18)
    let v20 : US0 = US0_0
    let v21 : string = "format!(\"{:?}\", $0)"
    let v22 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v20 v21
    let v23 : Types.EmitType<Types.std.string.String> = method7(v22)
    let v24 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v23|]
    let v25 : (Types.EmitType<Types.std.string.String> []) = method3(v24)
    let v26 : Types.EmitType<Types.std.string.String> = method8(v25)
    let v27 : string = "> init ()"
    let v28 : Types.EmitType<Types.std.string.String> = method1(v27)
    let v29 : (Types.EmitType<Types.std.string.String> []) = [|v28|]
    let v30 : (Types.EmitType<Types.std.string.String> []) = method3(v29)
    let v31 : string = "$0"
    let v32 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v30 v31
    let v33 : string = "core::ops::Deref::deref(v32)"
    let v34 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v33
    let v35 : obj = v34
    let v36 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v35 v21
    let v37 : Types.EmitType<Types.std.string.String> = v36 |> unbox<Types.EmitType<Types.std.string.String>>
    let v38 : string = "format!(\"{}\", $0)"
    let v39 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v37 v38
    let v40 : string = (v39).ToString ()
    let v41 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v42 : string = "r#\"" + v41 + "\"#"
    let v43 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v42
    let v44 : string = "regex::RegexBuilder::new($0)"
    let v45 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v43 v44
    let v46 : string = "$0.build().unwrap()"
    let v47 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v45 v46
    let v48 : string = method9(v40)
    let v49 : string = "v48.as_str()"
    let v50 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v49
    let v51 : string = method10()
    let v52 : string = "v51.as_str()"
    let v53 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v52
    let v54 : string = "$0.replace_all(&$1, $2).to_string()"
    let v55 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v47, v50, v53) v54
    let v56 : Types.std.string.String = method11(v55)
    let v57 : string = "fable_library_rust::String_::fromString(v56)"
    let v58 : string = Fable.Core.RustInterop.emitRustExpr () v57
    let v59 : string = "\\[\"(.*?)\"\\]"
    let v60 : string = "r#\"" + v59 + "\"#"
    let v61 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v60
    let v62 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v61 v44
    let v63 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v62 v46
    let v64 : string = method9(v58)
    let v65 : string = "v64.as_str()"
    let v66 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v65
    let v67 : string = method12()
    let v68 : string = "v67.as_str()"
    let v69 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v68
    let v70 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v63, v66, v69) v54
    let v71 : Types.std.string.String = method11(v70)
    let v72 : string = "fable_library_rust::String_::fromString(v71)"
    let v73 : string = Fable.Core.RustInterop.emitRustExpr () v72
    let v74 : string = "\\\\\""
    let v75 : string = "r#\"" + v74 + "\"#"
    let v76 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v75
    let v77 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v76 v44
    let v78 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v77 v46
    let v79 : string = method9(v73)
    let v80 : string = "v79.as_str()"
    let v81 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v80
    let v82 : string = method13()
    let v83 : string = "v82.as_str()"
    let v84 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v83
    let v85 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v78, v81, v84) v54
    let v86 : Types.std.string.String = method11(v85)
    let v87 : string = "fable_library_rust::String_::fromString(v86)"
    let v88 : string = Fable.Core.RustInterop.emitRustExpr () v87
    let v89 : string = ", "
    let v90 : string = "r#\"" + v89 + "\"#"
    let v91 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v90
    let v92 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v91 v44
    let v93 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v92 v46
    let v94 : string = method9(v88)
    let v95 : string = "v94.as_str()"
    let v96 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v95
    let v97 : string = method14()
    let v98 : string = "v97.as_str()"
    let v99 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v98
    let v100 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v93, v96, v99) v54
    let v101 : Types.std.string.String = method11(v100)
    let v102 : string = "fable_library_rust::String_::fromString(v101)"
    let v103 : string = Fable.Core.RustInterop.emitRustExpr () v102
    let v104 : Types.EmitType<Types.std.string.String> = method1(v103)
    let v105 : string = "$0"
    let v106 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v1 v105
    let v107 : string = "core::ops::Deref::deref(v106)"
    let v108 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v107
    let v109 : obj = v108
    let v110 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v109 v21
    let v111 : Types.EmitType<Types.std.string.String> = v110 |> unbox<Types.EmitType<Types.std.string.String>>
    let v112 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v111 v38
    let v113 : string = (v112).ToString ()
    let v114 : string = "r#\"" + v41 + "\"#"
    let v115 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v114
    let v116 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v115 v44
    let v117 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v116 v46
    let v118 : string = method9(v113)
    let v119 : string = "v118.as_str()"
    let v120 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v119
    let v121 : string = method10()
    let v122 : string = "v121.as_str()"
    let v123 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v122
    let v124 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v117, v120, v123) v54
    let v125 : Types.std.string.String = method11(v124)
    let v126 : string = "fable_library_rust::String_::fromString(v125)"
    let v127 : string = Fable.Core.RustInterop.emitRustExpr () v126
    let v128 : string = "r#\"" + v59 + "\"#"
    let v129 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v128
    let v130 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v129 v44
    let v131 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v130 v46
    let v132 : string = method9(v127)
    let v133 : string = "v132.as_str()"
    let v134 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v133
    let v135 : string = method12()
    let v136 : string = "v135.as_str()"
    let v137 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v136
    let v138 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v131, v134, v137) v54
    let v139 : Types.std.string.String = method11(v138)
    let v140 : string = "fable_library_rust::String_::fromString(v139)"
    let v141 : string = Fable.Core.RustInterop.emitRustExpr () v140
    let v142 : string = "r#\"" + v74 + "\"#"
    let v143 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v142
    let v144 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v143 v44
    let v145 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v144 v46
    let v146 : string = method9(v141)
    let v147 : string = "v146.as_str()"
    let v148 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v147
    let v149 : string = method13()
    let v150 : string = "v149.as_str()"
    let v151 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v150
    let v152 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v145, v148, v151) v54
    let v153 : Types.std.string.String = method11(v152)
    let v154 : string = "fable_library_rust::String_::fromString(v153)"
    let v155 : string = Fable.Core.RustInterop.emitRustExpr () v154
    let v156 : string = "r#\"" + v89 + "\"#"
    let v157 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v156
    let v158 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v157 v44
    let v159 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v158 v46
    let v160 : string = method9(v155)
    let v161 : string = "v160.as_str()"
    let v162 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v161
    let v163 : string = method14()
    let v164 : string = "v163.as_str()"
    let v165 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v164
    let v166 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v159, v162, v165) v54
    let v167 : Types.std.string.String = method11(v166)
    let v168 : string = "fable_library_rust::String_::fromString(v167)"
    let v169 : string = Fable.Core.RustInterop.emitRustExpr () v168
    let v170 : Types.EmitType<Types.std.string.String> = method1(v169)
    let v171 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v26 v38
    let v172 : string = (v171).ToString ()
    let v173 : string = "r#\"" + v41 + "\"#"
    let v174 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v173
    let v175 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v174 v44
    let v176 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v175 v46
    let v177 : string = method9(v172)
    let v178 : string = "v177.as_str()"
    let v179 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v178
    let v180 : string = method10()
    let v181 : string = "v180.as_str()"
    let v182 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v181
    let v183 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v176, v179, v182) v54
    let v184 : Types.std.string.String = method11(v183)
    let v185 : string = "fable_library_rust::String_::fromString(v184)"
    let v186 : string = Fable.Core.RustInterop.emitRustExpr () v185
    let v187 : string = "r#\"" + v59 + "\"#"
    let v188 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v187
    let v189 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v188 v44
    let v190 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v189 v46
    let v191 : string = method9(v186)
    let v192 : string = "v191.as_str()"
    let v193 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v192
    let v194 : string = method12()
    let v195 : string = "v194.as_str()"
    let v196 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v195
    let v197 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v190, v193, v196) v54
    let v198 : Types.std.string.String = method11(v197)
    let v199 : string = "fable_library_rust::String_::fromString(v198)"
    let v200 : string = Fable.Core.RustInterop.emitRustExpr () v199
    let v201 : string = "r#\"" + v74 + "\"#"
    let v202 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v201
    let v203 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v202 v44
    let v204 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v203 v46
    let v205 : string = method9(v200)
    let v206 : string = "v205.as_str()"
    let v207 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v206
    let v208 : string = method13()
    let v209 : string = "v208.as_str()"
    let v210 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v209
    let v211 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v204, v207, v210) v54
    let v212 : Types.std.string.String = method11(v211)
    let v213 : string = "fable_library_rust::String_::fromString(v212)"
    let v214 : string = Fable.Core.RustInterop.emitRustExpr () v213
    let v215 : string = "r#\"" + v89 + "\"#"
    let v216 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v215
    let v217 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v216 v44
    let v218 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v217 v46
    let v219 : string = method9(v214)
    let v220 : string = "v219.as_str()"
    let v221 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v220
    let v222 : string = method14()
    let v223 : string = "v222.as_str()"
    let v224 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v223
    let v225 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v218, v221, v224) v54
    let v226 : Types.std.string.String = method11(v225)
    let v227 : string = "fable_library_rust::String_::fromString(v226)"
    let v228 : string = Fable.Core.RustInterop.emitRustExpr () v227
    let v229 : Types.EmitType<Types.std.string.String> = method1(v228)
    let v230 : string = "666666"
    let v231 : string = v230.Substring (0, 2)
    let v232 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v233 : uint8 = Fable.Core.RustInterop.emitRustExpr v231 v232
    let v234 : string = v230.Substring (2, 4)
    let v235 : uint8 = Fable.Core.RustInterop.emitRustExpr v234 v232
    let v236 : string = v230.Substring (4, 6)
    let v237 : uint8 = Fable.Core.RustInterop.emitRustExpr v236 v232
    let v238 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v239 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v170, v233, v235, v237) v238
    let v240 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v239 v38
    let v241 : string = "385779"
    let v242 : string = v241.Substring (0, 2)
    let v243 : uint8 = Fable.Core.RustInterop.emitRustExpr v242 v232
    let v244 : string = v241.Substring (2, 4)
    let v245 : uint8 = Fable.Core.RustInterop.emitRustExpr v244 v232
    let v246 : string = v241.Substring (4, 6)
    let v247 : uint8 = Fable.Core.RustInterop.emitRustExpr v246 v232
    let v248 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v229, v243, v245, v247) v238
    let v249 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v248 v38
    let v250 : string = $"{v104} {v240} {v249}"
    System.Console.WriteLine v250
    ()
and closure0 () () : int32 =
    let struct (v0 : string, v1 : string, v2 : string, v3 : bool) = method0()
    let v4 : string = "chrono::Utc::now()"
    let v5 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v4
    let v6 : string = "($0).timestamp()"
    let v7 : int64 = Fable.Core.RustInterop.emitRustExpr v5 v6
    let v8 : string = "#[rocket::get(\"/<uri..>\")]"
    let v9 : string = " async fn proxy("
    let v10 : string = v8 + v9
    let v11 : string = "   uri: rocket::http::uri::Segments<'_, rocket::http::uri::fmt::Path>,"
    let v12 : string = v10 + v11
    let v13 : string = "   client: &rocket::State<reqwest::Client>"
    let v14 : string = v12 + v13
    let v15 : string = " ) -> Result<rocket::response::content::RawHtml<String>, rocket::http::Status> {"
    let v16 : string = v14 + v15
    let v17 : (Types.rocket.http.uri.Segments<Types.rocket.http.uri.fmt.Path> -> unit) = closure1()
    let v18 : string = "   v17(uri.clone());"
    let v19 : string = v16 + v18
    let v20 : string = "   let uri = uri.collect::<Vec<_>>();"
    let v21 : string = v19 + v20
    let v22 : string = "   let uri = uri.join(\"/\");"
    let v23 : string = v21 + v22
    let v24 : string = "   let uri = uri.replace(\":/\", \"://\");"
    let v25 : string = v23 + v24
    let v26 : string = "   let (host_url, url) = uri.split_once('|').unwrap_or((\"\", &uri));"
    let v27 : string = v25 + v26
    let v28 : string = "   let (host_protocol, host_host) = host_url.split_once(\"://\").unwrap_or((\"https\", \"www.github.com\"));"
    let v29 : string = v27 + v28
    let v30 : string = "   let (protocol, suffix) = url.split_once(\"://\").unwrap_or((host_protocol, url));"
    let v31 : string = v29 + v30
    let v32 : string = "   let (host, path) = match (url.split_once(\"://\"), suffix.split_once(\"/\")) {"
    let v33 : string = v31 + v32
    let v34 : string = "     (Some(_), None) if suffix != \"\" => (suffix, \"\"),"
    let v35 : string = v33 + v34
    let v36 : string = "     _ => (host_host, suffix),"
    let v37 : string = v35 + v36
    let v38 : string = "   };"
    let v39 : string = v37 + v38
    let v40 : string = "   let new_url = match path {"
    let v41 : string = v39 + v40
    let v42 : string = "     \"\" => format!(\"{protocol}://{host}\"),"
    let v43 : string = v41 + v42
    let v44 : string = "     _ => format!(\"{protocol}://{host}/{path}\"),"
    let v45 : string = v43 + v44
    let v46 : string = "   };"
    let v47 : string = v45 + v46
    let v48 : string = "   println!(\"uri={uri}; new_url={new_url}; host={host}; path={path}; suffix={suffix}; host_url={host_url}; url={url}; host_host={host_host}; host_protocol={host_protocol}; protocol={protocol}\");"
    let v49 : string = v47 + v48
    let v50 : string = "   let res = client"
    let v51 : string = v49 + v50
    let v52 : string = "     .get(new_url)"
    let v53 : string = v51 + v52
    let v54 : string = "     .send()"
    let v55 : string = v53 + v54
    let v56 : string = "     .await"
    let v57 : string = v55 + v56
    let v58 : string = "     .map_err(|_| rocket::http::Status::NotFound);"
    let v59 : string = v57 + v58
    let v60 : string = "   match res {"
    let v61 : string = v59 + v60
    let v62 : string = "       Ok(res) => {"
    let v63 : string = v61 + v62
    let v64 : string = "           let content = res.text();"
    let v65 : string = v63 + v64
    let v66 : string = "           let content = content.await;"
    let v67 : string = v65 + v66
    let v68 : string = "           let content = content.map_err(|_| rocket::http::Status::InternalServerError);"
    let v69 : string = v67 + v68
    let v70 : string = "           let content = content.unwrap();"
    let v71 : string = v69 + v70
    let v72 : string = "           Ok(rocket::response::content::RawHtml(content))"
    let v73 : string = v71 + v72
    let v74 : string = "       }"
    let v75 : string = v73 + v74
    let v76 : string = "       Err(status) => Err(status),"
    let v77 : string = v75 + v76
    let v78 : string = "   }"
    let v79 : string = v77 + v78
    let v80 : string = "} ()"
    let v81 : string = v79 + v80
    Fable.Core.RustInterop.emitRustExpr () v81
    let v82 : string = "#[rocket::get(\"/file/<file..>\")]"
    let v83 : string = " async fn file("
    let v84 : string = v82 + v83
    let v85 : string = "   file: std::path::PathBuf,"
    let v86 : string = v84 + v85
    let v87 : string = "   client: &rocket::State<reqwest::Client>"
    let v88 : string = v86 + v87
    let v89 : string = " ) -> std::option::Option<rocket::fs::NamedFile> {"
    let v90 : string = v88 + v89
    let v91 : string = "   rocket::fs::NamedFile::open(std::path::Path::new(\"./\").join(file))"
    let v92 : string = v90 + v91
    let v93 : string = "     .await"
    let v94 : string = v92 + v93
    let v95 : string = "     .ok()"
    let v96 : string = v94 + v95
    let v97 : string = "} ()"
    let v98 : string = v96 + v97
    Fable.Core.RustInterop.emitRustExpr () v98
    let v99 : string = "#[rocket::launch]"
    let v100 : string = " fn rocket() -> _ {"
    let v101 : string = v99 + v100
    let v102 : string = "    rocket::build()"
    let v103 : string = v101 + v102
    let v104 : string = "      .manage(reqwest::Client::new())"
    let v105 : string = v103 + v104
    let v106 : string = "      .mount(\"/\", rocket::routes![proxy, file])"
    let v107 : string = v105 + v106
    let v108 : string = "} ()"
    let v109 : string = v107 + v108
    Fable.Core.RustInterop.emitRustExpr () v109
    let v110 : string = "app end"
    let v111 : Types.EmitType<Types.std.string.String> = method1(v110)
    let v112 : string = "???"
    let v113 : Types.EmitType<Types.std.string.String> = method1(v112)
    let v114 : (Types.EmitType<Types.std.string.String> []) = [|v111; v113|]
    let v115 : (Types.EmitType<Types.std.string.String> []) = method3(v114)
    method15(v7, v115)
    0
let v0 : (unit -> int32) = closure0()
()
