type [<Struct>] US0 =
    | US0_0
    | US0_1
    | US0_2
    | US0_3
    | US0_4
and UH0 =
    | UH0_0 of Types.std.string.String * UH0
    | UH0_1
and Mut0 = {mutable l0 : UH0}
and UH1 =
    | UH1_0 of string * UH1
    | UH1_1
and [<Struct>] US1 =
    | US1_0
    | US1_1 of f1_0 : string
and Mut1 = {mutable l0 : int32; mutable l1 : US1}
let rec method0 (v0 : Option<Types.std.string.String>) : Option<Types.std.string.String> =
    v0
and method1 (v0 : Types.std.string.String) : Types.std.string.String =
    v0
and closure1 () (v0 : Types.std.string.String) : string =
    let v1 : Types.std.string.String = method1(v0)
    let v2 : string = "fable_library_rust::String_::fromString(v1)"
    let v3 : string = Fable.Core.RustInterop.emitRustExpr () v2
    v3
and method2 () : struct (string * string * string * bool) =
    let v0 : string = ""
    let v1 : obj = v0
    struct (v0, v0, v0, true)
and method3 () : string =
    let v0 : string = "rs-path"
    v0
and method4 (v0 : Option<Types.StaticRef<Types.std.string.String>>) : Option<Types.StaticRef<Types.std.string.String>> =
    v0
and method5 (v0 : Types.StaticRef<Types.std.string.String>) : Types.StaticRef<Types.std.string.String> =
    v0
and method6 (v0 : string) : string =
    v0
and method7 () : string =
    let v0 : string = ""
    v0
and closure2 () (v0 : Types.StaticRef<Types.std.string.String>) : string =
    let v1 : Types.StaticRef<Types.std.string.String> = method5(v0)
    let v2 : string = "*v1"
    let v3 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v2
    let v4 : Types.std.string.String = method1(v3)
    let v5 : string = "fable_library_rust::String_::fromString(v4)"
    let v6 : string = Fable.Core.RustInterop.emitRustExpr () v5
    let v7 : string = "rs-path"
    let v8 : string = "--" + v7 + "="
    let v9 : string = method6(v8)
    let v10 : string = "fable_library_rust::String_::LrcStr::as_str($0)"
    let v11 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr v9 v10
    let v12 : string = "String::from(core::ops::Deref::deref($0))"
    let v13 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v11 v12
    let v14 : string = method7()
    let v15 : string = "fable_library_rust::String_::LrcStr::as_str($0)"
    let v16 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr v14 v15
    let v17 : string = "String::from(core::ops::Deref::deref($0))"
    let v18 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v16 v17
    let v19 : string = method6(v6)
    let v20 : string = "fable_library_rust::String_::LrcStr::as_str($0)"
    let v21 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr v19 v20
    let v22 : string = "String::from(core::ops::Deref::deref($0))"
    let v23 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v21 v22
    let v24 : string = "v23.replace(&v13, &v18)"
    let v25 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v24
    let v26 : Types.std.string.String = method1(v25)
    let v27 : string = "fable_library_rust::String_::fromString(v26)"
    let v28 : string = Fable.Core.RustInterop.emitRustExpr () v27
    v28
and method8 (v0 : Types.std.string.String) : Types.std.string.String =
    v0
and method9 (v0 : Types.std.path.PathBuf) : Types.std.path.PathBuf =
    v0
and method10 (v0 : string) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "String::from(core::ops::Deref::deref($0))"
    let v2 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v0 v1
    let v3 : Types.EmitType<Types.std.string.String> = v2 |> unbox<Types.EmitType<Types.std.string.String>>
    v3
and method11 (v0 : Types.std.path.PathBuf) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "format!(\"{:?}\", $0)"
    let v2 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v0 v1
    let v3 : Types.EmitType<Types.std.string.String> = v2 |> unbox<Types.EmitType<Types.std.string.String>>
    v3
and method12 (v0 : (Types.EmitType<Types.std.string.String> [])) : (Types.EmitType<Types.std.string.String> []) =
    v0
and method14 (v0 : int32, v1 : string) : string =
    let v2 : int32 = String.length v1
    let v3 : bool = v2 < v0
    if v3 then
        let v4 : string = $"0{v1}"
        method14(v0, v4)
    else
        v1
and method15 (v0 : uint8) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "format!(\"{:?}\", $0)"
    let v2 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v0 v1
    let v3 : Types.EmitType<Types.std.string.String> = v2 |> unbox<Types.EmitType<Types.std.string.String>>
    v3
and method16 (v0 : Types.std.string.String) : Types.EmitType<Types.std.string.String> =
    let v1 : Types.EmitType<Types.std.string.String> = v0 |> unbox<Types.EmitType<Types.std.string.String>>
    v1
and method17 (v0 : (Types.EmitType<Types.std.string.String> [])) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "$0"
    let v2 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v0 v1
    let v3 : string = "core::ops::Deref::deref(v2)"
    let v4 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v3
    let v5 : obj = v4
    let v6 : string = "format!(\"{:?}\", $0)"
    let v7 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v5 v6
    let v8 : Types.EmitType<Types.std.string.String> = v7 |> unbox<Types.EmitType<Types.std.string.String>>
    v8
and method18 (v0 : string) : string =
    v0
and method19 () : string =
    let v0 : string = "$1=$2"
    v0
and method20 () : string =
    let v0 : string = "[$1]"
    v0
and method21 () : string =
    let v0 : string = "\""
    v0
and method22 () : string =
    let v0 : string = " "
    v0
and method13 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.RustInterop.emitRustExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method14(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.RustInterop.emitRustExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method10(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method10(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method10(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method15(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method10(v18)
    let v20 : US0 = US0_0
    let v21 : string = "format!(\"{:?}\", $0)"
    let v22 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v20 v21
    let v23 : Types.EmitType<Types.std.string.String> = method16(v22)
    let v24 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v23|]
    let v25 : (Types.EmitType<Types.std.string.String> []) = method12(v24)
    let v26 : Types.EmitType<Types.std.string.String> = method17(v25)
    let v27 : string = "> post_fsx_rs_build ()"
    let v28 : Types.EmitType<Types.std.string.String> = method10(v27)
    let v29 : (Types.EmitType<Types.std.string.String> []) = [|v28|]
    let v30 : (Types.EmitType<Types.std.string.String> []) = method12(v29)
    let v31 : string = "$0"
    let v32 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v30 v31
    let v33 : string = "core::ops::Deref::deref(v32)"
    let v34 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v33
    let v35 : obj = v34
    let v36 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v35 v21
    let v37 : Types.EmitType<Types.std.string.String> = v36 |> unbox<Types.EmitType<Types.std.string.String>>
    let v38 : string = "format!(\"{}\", $0)"
    let v39 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v37 v38
    let v40 : string = (v39).ToString ()
    let v41 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v42 : string = "r#\"" + v41 + "\"#"
    let v43 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v42
    let v44 : string = "regex::RegexBuilder::new($0)"
    let v45 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v43 v44
    let v46 : string = "$0.build().unwrap()"
    let v47 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v45 v46
    let v48 : string = method18(v40)
    let v49 : string = "v48.as_str()"
    let v50 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v49
    let v51 : string = method19()
    let v52 : string = "v51.as_str()"
    let v53 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v52
    let v54 : string = "$0.replace_all(&$1, $2).to_string()"
    let v55 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v47, v50, v53) v54
    let v56 : Types.std.string.String = method1(v55)
    let v57 : string = "fable_library_rust::String_::fromString(v56)"
    let v58 : string = Fable.Core.RustInterop.emitRustExpr () v57
    let v59 : string = "\\[\"(.*?)\"\\]"
    let v60 : string = "r#\"" + v59 + "\"#"
    let v61 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v60
    let v62 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v61 v44
    let v63 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v62 v46
    let v64 : string = method18(v58)
    let v65 : string = "v64.as_str()"
    let v66 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v65
    let v67 : string = method20()
    let v68 : string = "v67.as_str()"
    let v69 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v68
    let v70 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v63, v66, v69) v54
    let v71 : Types.std.string.String = method1(v70)
    let v72 : string = "fable_library_rust::String_::fromString(v71)"
    let v73 : string = Fable.Core.RustInterop.emitRustExpr () v72
    let v74 : string = "\\\\\""
    let v75 : string = "r#\"" + v74 + "\"#"
    let v76 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v75
    let v77 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v76 v44
    let v78 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v77 v46
    let v79 : string = method18(v73)
    let v80 : string = "v79.as_str()"
    let v81 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v80
    let v82 : string = method21()
    let v83 : string = "v82.as_str()"
    let v84 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v83
    let v85 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v78, v81, v84) v54
    let v86 : Types.std.string.String = method1(v85)
    let v87 : string = "fable_library_rust::String_::fromString(v86)"
    let v88 : string = Fable.Core.RustInterop.emitRustExpr () v87
    let v89 : string = ", "
    let v90 : string = "r#\"" + v89 + "\"#"
    let v91 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v90
    let v92 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v91 v44
    let v93 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v92 v46
    let v94 : string = method18(v88)
    let v95 : string = "v94.as_str()"
    let v96 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v95
    let v97 : string = method22()
    let v98 : string = "v97.as_str()"
    let v99 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v98
    let v100 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v93, v96, v99) v54
    let v101 : Types.std.string.String = method1(v100)
    let v102 : string = "fable_library_rust::String_::fromString(v101)"
    let v103 : string = Fable.Core.RustInterop.emitRustExpr () v102
    let v104 : Types.EmitType<Types.std.string.String> = method10(v103)
    let v105 : string = "$0"
    let v106 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v1 v105
    let v107 : string = "core::ops::Deref::deref(v106)"
    let v108 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v107
    let v109 : obj = v108
    let v110 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v109 v21
    let v111 : Types.EmitType<Types.std.string.String> = v110 |> unbox<Types.EmitType<Types.std.string.String>>
    let v112 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v111 v38
    let v113 : string = (v112).ToString ()
    let v114 : string = "r#\"" + v41 + "\"#"
    let v115 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v114
    let v116 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v115 v44
    let v117 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v116 v46
    let v118 : string = method18(v113)
    let v119 : string = "v118.as_str()"
    let v120 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v119
    let v121 : string = method19()
    let v122 : string = "v121.as_str()"
    let v123 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v122
    let v124 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v117, v120, v123) v54
    let v125 : Types.std.string.String = method1(v124)
    let v126 : string = "fable_library_rust::String_::fromString(v125)"
    let v127 : string = Fable.Core.RustInterop.emitRustExpr () v126
    let v128 : string = "r#\"" + v59 + "\"#"
    let v129 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v128
    let v130 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v129 v44
    let v131 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v130 v46
    let v132 : string = method18(v127)
    let v133 : string = "v132.as_str()"
    let v134 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v133
    let v135 : string = method20()
    let v136 : string = "v135.as_str()"
    let v137 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v136
    let v138 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v131, v134, v137) v54
    let v139 : Types.std.string.String = method1(v138)
    let v140 : string = "fable_library_rust::String_::fromString(v139)"
    let v141 : string = Fable.Core.RustInterop.emitRustExpr () v140
    let v142 : string = "r#\"" + v74 + "\"#"
    let v143 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v142
    let v144 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v143 v44
    let v145 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v144 v46
    let v146 : string = method18(v141)
    let v147 : string = "v146.as_str()"
    let v148 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v147
    let v149 : string = method21()
    let v150 : string = "v149.as_str()"
    let v151 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v150
    let v152 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v145, v148, v151) v54
    let v153 : Types.std.string.String = method1(v152)
    let v154 : string = "fable_library_rust::String_::fromString(v153)"
    let v155 : string = Fable.Core.RustInterop.emitRustExpr () v154
    let v156 : string = "r#\"" + v89 + "\"#"
    let v157 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v156
    let v158 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v157 v44
    let v159 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v158 v46
    let v160 : string = method18(v155)
    let v161 : string = "v160.as_str()"
    let v162 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v161
    let v163 : string = method22()
    let v164 : string = "v163.as_str()"
    let v165 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v164
    let v166 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v159, v162, v165) v54
    let v167 : Types.std.string.String = method1(v166)
    let v168 : string = "fable_library_rust::String_::fromString(v167)"
    let v169 : string = Fable.Core.RustInterop.emitRustExpr () v168
    let v170 : Types.EmitType<Types.std.string.String> = method10(v169)
    let v171 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v26 v38
    let v172 : string = (v171).ToString ()
    let v173 : string = "r#\"" + v41 + "\"#"
    let v174 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v173
    let v175 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v174 v44
    let v176 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v175 v46
    let v177 : string = method18(v172)
    let v178 : string = "v177.as_str()"
    let v179 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v178
    let v180 : string = method19()
    let v181 : string = "v180.as_str()"
    let v182 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v181
    let v183 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v176, v179, v182) v54
    let v184 : Types.std.string.String = method1(v183)
    let v185 : string = "fable_library_rust::String_::fromString(v184)"
    let v186 : string = Fable.Core.RustInterop.emitRustExpr () v185
    let v187 : string = "r#\"" + v59 + "\"#"
    let v188 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v187
    let v189 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v188 v44
    let v190 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v189 v46
    let v191 : string = method18(v186)
    let v192 : string = "v191.as_str()"
    let v193 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v192
    let v194 : string = method20()
    let v195 : string = "v194.as_str()"
    let v196 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v195
    let v197 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v190, v193, v196) v54
    let v198 : Types.std.string.String = method1(v197)
    let v199 : string = "fable_library_rust::String_::fromString(v198)"
    let v200 : string = Fable.Core.RustInterop.emitRustExpr () v199
    let v201 : string = "r#\"" + v74 + "\"#"
    let v202 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v201
    let v203 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v202 v44
    let v204 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v203 v46
    let v205 : string = method18(v200)
    let v206 : string = "v205.as_str()"
    let v207 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v206
    let v208 : string = method21()
    let v209 : string = "v208.as_str()"
    let v210 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v209
    let v211 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v204, v207, v210) v54
    let v212 : Types.std.string.String = method1(v211)
    let v213 : string = "fable_library_rust::String_::fromString(v212)"
    let v214 : string = Fable.Core.RustInterop.emitRustExpr () v213
    let v215 : string = "r#\"" + v89 + "\"#"
    let v216 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v215
    let v217 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v216 v44
    let v218 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v217 v46
    let v219 : string = method18(v214)
    let v220 : string = "v219.as_str()"
    let v221 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v220
    let v222 : string = method22()
    let v223 : string = "v222.as_str()"
    let v224 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v223
    let v225 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v218, v221, v224) v54
    let v226 : Types.std.string.String = method1(v225)
    let v227 : string = "fable_library_rust::String_::fromString(v226)"
    let v228 : string = Fable.Core.RustInterop.emitRustExpr () v227
    let v229 : Types.EmitType<Types.std.string.String> = method10(v228)
    let v230 : string = "666666"
    let v231 : string = v230.Substring (0, 2)
    let v232 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v233 : uint8 = Fable.Core.RustInterop.emitRustExpr v231 v232
    let v234 : string = v230.Substring (2, 4)
    let v235 : uint8 = Fable.Core.RustInterop.emitRustExpr v234 v232
    let v236 : string = v230.Substring (4, 6)
    let v237 : uint8 = Fable.Core.RustInterop.emitRustExpr v236 v232
    let v238 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v239 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v170, v233, v235, v237) v238
    let v240 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v239 v38
    let v241 : string = "385779"
    let v242 : string = v241.Substring (0, 2)
    let v243 : uint8 = Fable.Core.RustInterop.emitRustExpr v242 v232
    let v244 : string = v241.Substring (2, 4)
    let v245 : uint8 = Fable.Core.RustInterop.emitRustExpr v244 v232
    let v246 : string = v241.Substring (4, 6)
    let v247 : uint8 = Fable.Core.RustInterop.emitRustExpr v246 v232
    let v248 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v229, v243, v245, v247) v238
    let v249 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v248 v38
    let v250 : string = $"{v104} {v240} {v249}"
    System.Console.WriteLine v250
    ()
and method23 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.RustInterop.emitRustExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method14(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.RustInterop.emitRustExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method10(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method10(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method10(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method15(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method10(v18)
    let v20 : US0 = US0_0
    let v21 : string = "format!(\"{:?}\", $0)"
    let v22 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v20 v21
    let v23 : Types.EmitType<Types.std.string.String> = method16(v22)
    let v24 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v23|]
    let v25 : (Types.EmitType<Types.std.string.String> []) = method12(v24)
    let v26 : Types.EmitType<Types.std.string.String> = method17(v25)
    let v27 : string = "> read_lines ()"
    let v28 : Types.EmitType<Types.std.string.String> = method10(v27)
    let v29 : (Types.EmitType<Types.std.string.String> []) = [|v28|]
    let v30 : (Types.EmitType<Types.std.string.String> []) = method12(v29)
    let v31 : string = "$0"
    let v32 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v30 v31
    let v33 : string = "core::ops::Deref::deref(v32)"
    let v34 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v33
    let v35 : obj = v34
    let v36 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v35 v21
    let v37 : Types.EmitType<Types.std.string.String> = v36 |> unbox<Types.EmitType<Types.std.string.String>>
    let v38 : string = "format!(\"{}\", $0)"
    let v39 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v37 v38
    let v40 : string = (v39).ToString ()
    let v41 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v42 : string = "r#\"" + v41 + "\"#"
    let v43 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v42
    let v44 : string = "regex::RegexBuilder::new($0)"
    let v45 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v43 v44
    let v46 : string = "$0.build().unwrap()"
    let v47 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v45 v46
    let v48 : string = method18(v40)
    let v49 : string = "v48.as_str()"
    let v50 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v49
    let v51 : string = method19()
    let v52 : string = "v51.as_str()"
    let v53 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v52
    let v54 : string = "$0.replace_all(&$1, $2).to_string()"
    let v55 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v47, v50, v53) v54
    let v56 : Types.std.string.String = method1(v55)
    let v57 : string = "fable_library_rust::String_::fromString(v56)"
    let v58 : string = Fable.Core.RustInterop.emitRustExpr () v57
    let v59 : string = "\\[\"(.*?)\"\\]"
    let v60 : string = "r#\"" + v59 + "\"#"
    let v61 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v60
    let v62 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v61 v44
    let v63 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v62 v46
    let v64 : string = method18(v58)
    let v65 : string = "v64.as_str()"
    let v66 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v65
    let v67 : string = method20()
    let v68 : string = "v67.as_str()"
    let v69 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v68
    let v70 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v63, v66, v69) v54
    let v71 : Types.std.string.String = method1(v70)
    let v72 : string = "fable_library_rust::String_::fromString(v71)"
    let v73 : string = Fable.Core.RustInterop.emitRustExpr () v72
    let v74 : string = "\\\\\""
    let v75 : string = "r#\"" + v74 + "\"#"
    let v76 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v75
    let v77 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v76 v44
    let v78 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v77 v46
    let v79 : string = method18(v73)
    let v80 : string = "v79.as_str()"
    let v81 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v80
    let v82 : string = method21()
    let v83 : string = "v82.as_str()"
    let v84 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v83
    let v85 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v78, v81, v84) v54
    let v86 : Types.std.string.String = method1(v85)
    let v87 : string = "fable_library_rust::String_::fromString(v86)"
    let v88 : string = Fable.Core.RustInterop.emitRustExpr () v87
    let v89 : string = ", "
    let v90 : string = "r#\"" + v89 + "\"#"
    let v91 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v90
    let v92 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v91 v44
    let v93 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v92 v46
    let v94 : string = method18(v88)
    let v95 : string = "v94.as_str()"
    let v96 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v95
    let v97 : string = method22()
    let v98 : string = "v97.as_str()"
    let v99 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v98
    let v100 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v93, v96, v99) v54
    let v101 : Types.std.string.String = method1(v100)
    let v102 : string = "fable_library_rust::String_::fromString(v101)"
    let v103 : string = Fable.Core.RustInterop.emitRustExpr () v102
    let v104 : Types.EmitType<Types.std.string.String> = method10(v103)
    let v105 : string = "$0"
    let v106 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v1 v105
    let v107 : string = "core::ops::Deref::deref(v106)"
    let v108 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v107
    let v109 : obj = v108
    let v110 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v109 v21
    let v111 : Types.EmitType<Types.std.string.String> = v110 |> unbox<Types.EmitType<Types.std.string.String>>
    let v112 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v111 v38
    let v113 : string = (v112).ToString ()
    let v114 : string = "r#\"" + v41 + "\"#"
    let v115 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v114
    let v116 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v115 v44
    let v117 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v116 v46
    let v118 : string = method18(v113)
    let v119 : string = "v118.as_str()"
    let v120 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v119
    let v121 : string = method19()
    let v122 : string = "v121.as_str()"
    let v123 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v122
    let v124 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v117, v120, v123) v54
    let v125 : Types.std.string.String = method1(v124)
    let v126 : string = "fable_library_rust::String_::fromString(v125)"
    let v127 : string = Fable.Core.RustInterop.emitRustExpr () v126
    let v128 : string = "r#\"" + v59 + "\"#"
    let v129 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v128
    let v130 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v129 v44
    let v131 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v130 v46
    let v132 : string = method18(v127)
    let v133 : string = "v132.as_str()"
    let v134 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v133
    let v135 : string = method20()
    let v136 : string = "v135.as_str()"
    let v137 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v136
    let v138 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v131, v134, v137) v54
    let v139 : Types.std.string.String = method1(v138)
    let v140 : string = "fable_library_rust::String_::fromString(v139)"
    let v141 : string = Fable.Core.RustInterop.emitRustExpr () v140
    let v142 : string = "r#\"" + v74 + "\"#"
    let v143 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v142
    let v144 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v143 v44
    let v145 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v144 v46
    let v146 : string = method18(v141)
    let v147 : string = "v146.as_str()"
    let v148 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v147
    let v149 : string = method21()
    let v150 : string = "v149.as_str()"
    let v151 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v150
    let v152 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v145, v148, v151) v54
    let v153 : Types.std.string.String = method1(v152)
    let v154 : string = "fable_library_rust::String_::fromString(v153)"
    let v155 : string = Fable.Core.RustInterop.emitRustExpr () v154
    let v156 : string = "r#\"" + v89 + "\"#"
    let v157 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v156
    let v158 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v157 v44
    let v159 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v158 v46
    let v160 : string = method18(v155)
    let v161 : string = "v160.as_str()"
    let v162 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v161
    let v163 : string = method22()
    let v164 : string = "v163.as_str()"
    let v165 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v164
    let v166 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v159, v162, v165) v54
    let v167 : Types.std.string.String = method1(v166)
    let v168 : string = "fable_library_rust::String_::fromString(v167)"
    let v169 : string = Fable.Core.RustInterop.emitRustExpr () v168
    let v170 : Types.EmitType<Types.std.string.String> = method10(v169)
    let v171 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v26 v38
    let v172 : string = (v171).ToString ()
    let v173 : string = "r#\"" + v41 + "\"#"
    let v174 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v173
    let v175 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v174 v44
    let v176 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v175 v46
    let v177 : string = method18(v172)
    let v178 : string = "v177.as_str()"
    let v179 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v178
    let v180 : string = method19()
    let v181 : string = "v180.as_str()"
    let v182 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v181
    let v183 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v176, v179, v182) v54
    let v184 : Types.std.string.String = method1(v183)
    let v185 : string = "fable_library_rust::String_::fromString(v184)"
    let v186 : string = Fable.Core.RustInterop.emitRustExpr () v185
    let v187 : string = "r#\"" + v59 + "\"#"
    let v188 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v187
    let v189 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v188 v44
    let v190 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v189 v46
    let v191 : string = method18(v186)
    let v192 : string = "v191.as_str()"
    let v193 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v192
    let v194 : string = method20()
    let v195 : string = "v194.as_str()"
    let v196 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v195
    let v197 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v190, v193, v196) v54
    let v198 : Types.std.string.String = method1(v197)
    let v199 : string = "fable_library_rust::String_::fromString(v198)"
    let v200 : string = Fable.Core.RustInterop.emitRustExpr () v199
    let v201 : string = "r#\"" + v74 + "\"#"
    let v202 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v201
    let v203 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v202 v44
    let v204 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v203 v46
    let v205 : string = method18(v200)
    let v206 : string = "v205.as_str()"
    let v207 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v206
    let v208 : string = method21()
    let v209 : string = "v208.as_str()"
    let v210 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v209
    let v211 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v204, v207, v210) v54
    let v212 : Types.std.string.String = method1(v211)
    let v213 : string = "fable_library_rust::String_::fromString(v212)"
    let v214 : string = Fable.Core.RustInterop.emitRustExpr () v213
    let v215 : string = "r#\"" + v89 + "\"#"
    let v216 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v215
    let v217 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v216 v44
    let v218 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v217 v46
    let v219 : string = method18(v214)
    let v220 : string = "v219.as_str()"
    let v221 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v220
    let v222 : string = method22()
    let v223 : string = "v222.as_str()"
    let v224 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v223
    let v225 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v218, v221, v224) v54
    let v226 : Types.std.string.String = method1(v225)
    let v227 : string = "fable_library_rust::String_::fromString(v226)"
    let v228 : string = Fable.Core.RustInterop.emitRustExpr () v227
    let v229 : Types.EmitType<Types.std.string.String> = method10(v228)
    let v230 : string = "881749"
    let v231 : string = v230.Substring (0, 2)
    let v232 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v233 : uint8 = Fable.Core.RustInterop.emitRustExpr v231 v232
    let v234 : string = v230.Substring (2, 4)
    let v235 : uint8 = Fable.Core.RustInterop.emitRustExpr v234 v232
    let v236 : string = v230.Substring (4, 6)
    let v237 : uint8 = Fable.Core.RustInterop.emitRustExpr v236 v232
    let v238 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v239 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v170, v233, v235, v237) v238
    let v240 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v239 v38
    let v241 : string = "385779"
    let v242 : string = v241.Substring (0, 2)
    let v243 : uint8 = Fable.Core.RustInterop.emitRustExpr v242 v232
    let v244 : string = v241.Substring (2, 4)
    let v245 : uint8 = Fable.Core.RustInterop.emitRustExpr v244 v232
    let v246 : string = v241.Substring (4, 6)
    let v247 : uint8 = Fable.Core.RustInterop.emitRustExpr v246 v232
    let v248 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v229, v243, v245, v247) v238
    let v249 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v248 v38
    let v250 : string = $"{v104} {v240} {v249}"
    System.Console.WriteLine v250
    ()
and method25 (v0 : int32) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "format!(\"{:?}\", $0)"
    let v2 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v0 v1
    let v3 : Types.EmitType<Types.std.string.String> = v2 |> unbox<Types.EmitType<Types.std.string.String>>
    v3
and method26 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    ()
and closure3 (v0 : int64, v1 : Mut0) (v2 : Types.Vec<uint8>) : Result<bool, Types.std.io.Error> =
    let v3 : string = "line len"
    let v4 : Types.EmitType<Types.std.string.String> = method10(v3)
    let v5 : string = "v2.len()"
    let v6 : obj = Fable.Core.RustInterop.emitRustExpr () v5
    let v7 : string = "v6.try_into().unwrap()"
    let v8 : int32 = Fable.Core.RustInterop.emitRustExpr () v7
    let v9 : Types.EmitType<Types.std.string.String> = method25(v8)
    let v10 : (Types.EmitType<Types.std.string.String> []) = [|v4; v9|]
    let v11 : (Types.EmitType<Types.std.string.String> []) = method12(v10)
    method26(v0, v11)
    let v12 : string = "v2.to_owned()"
    let v13 : Types.Vec<uint8> = Fable.Core.RustInterop.emitRustExpr () v12
    let v14 : string = "std::string::String::from_utf8(v13).unwrap()"
    let v15 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v14
    let v16 : UH0 = v1.l0
    let v17 : UH0 = UH0_0(v15, v16)
    v1.l0 <- v17
    let v18 : Result<bool, Types.std.io.Error> = Ok true
    v18
and method24 (v0 : int64, v1 : Mut0) : (Types.Vec<uint8> -> Result<bool, Types.std.io.Error>) =
    closure3(v0, v1)
and method27 (v0 : UH0, v1 : UH0) : UH0 =
    match v0 with
    | UH0_0(v2, v3) -> (* Cons *)
        let v4 : UH0 = UH0_0(v2, v1)
        method27(v3, v4)
    | UH0_1 -> (* Nil *)
        v1
and method28 (v0 : UH0, v1 : UH1) : UH1 =
    match v0 with
    | UH0_0(v2, v3) -> (* Cons *)
        let v4 : UH1 = method28(v3, v1)
        let v5 : Types.std.string.String = method1(v2)
        let v6 : string = "fable_library_rust::String_::fromString(v5)"
        let v7 : string = Fable.Core.RustInterop.emitRustExpr () v6
        UH1_0(v7, v4)
    | UH0_1 -> (* Nil *)
        v1
and method29 (v0 : UH1, v1 : int32) : int32 =
    match v0 with
    | UH1_0(v2, v3) -> (* Cons *)
        let v4 : int32 = v1 + 1
        method29(v3, v4)
    | UH1_1 -> (* Nil *)
        v1
and method31 () : string =
    let v0 : string = "/node_modules/"
    v0
and method32 () : string =
    let v0 : string = ".cs"
    v0
and method30 (v0 : int64, v1 : UH1, v2 : int32, v3 : UH1) : struct (int32 * UH1) =
    match v1 with
    | UH1_0(v4, v5) -> (* Cons *)
        let v6 : string = method31()
        let v7 : string = "fable_library_rust::String_::LrcStr::as_str($0)"
        let v8 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr v6 v7
        let v9 : string = "String::from(core::ops::Deref::deref($0))"
        let v10 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v8 v9
        let v11 : string = "v4.contains(&v10)"
        let v12 : bool = Fable.Core.RustInterop.emitRustExpr () v11
        let v20 : bool =
            if v12 then
                let v13 : string = method32()
                let v14 : string = "fable_library_rust::String_::LrcStr::as_str($0)"
                let v15 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr v13 v14
                let v16 : string = "String::from(core::ops::Deref::deref($0))"
                let v17 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v15 v16
                let v18 : string = "v4.contains(&v17)"
                let v19 : bool = Fable.Core.RustInterop.emitRustExpr () v18
                v19
            else
                false
        let struct (v36 : int32, v37 : UH1) =
            if v20 then
                let v21 : string = "found line. removing."
                let v22 : Types.EmitType<Types.std.string.String> = method10(v21)
                let v23 : string = " line"
                let v24 : Types.EmitType<Types.std.string.String> = method10(v23)
                let v25 : Types.EmitType<Types.std.string.String> = method10(v4)
                let v26 : (Types.EmitType<Types.std.string.String> []) = [|v22; v24; v25|]
                let v27 : (Types.EmitType<Types.std.string.String> []) = method12(v26)
                method13(v0, v27)
                struct (1, v3)
            else
                let v28 : bool = 0 = v2
                if v28 then
                    let v29 : UH1 = UH1_0(v4, v3)
                    struct (0, v29)
                else
                    let v30 : bool = 2 = v2
                    if v30 then
                        struct (0, v3)
                    else
                        let v31 : int32 = v2 + 1
                        struct (v31, v3)
        method30(v0, v5, v36, v37)
    | UH1_1 -> (* Nil *)
        struct (v2, v3)
and method33 (v0 : UH1, v1 : UH1) : UH1 =
    match v0 with
    | UH1_0(v2, v3) -> (* Cons *)
        let v4 : UH1 = UH1_0(v2, v1)
        method33(v3, v4)
    | UH1_1 -> (* Nil *)
        v1
and method34 (v0 : UH1, v1 : string) : string =
    match v0 with
    | UH1_0(v2, v3) -> (* Cons *)
        let v4 : string = v1 + v2
        method34(v3, v4)
    | UH1_1 -> (* Nil *)
        v1
and method35 () : string =
    let v0 : string = "spi-path"
    v0
and closure4 () (v0 : Types.StaticRef<Types.std.string.String>) : string =
    let v1 : Types.StaticRef<Types.std.string.String> = method5(v0)
    let v2 : string = "*v1"
    let v3 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v2
    let v4 : Types.std.string.String = method1(v3)
    let v5 : string = "fable_library_rust::String_::fromString(v4)"
    let v6 : string = Fable.Core.RustInterop.emitRustExpr () v5
    let v7 : string = "spi-path"
    let v8 : string = "--" + v7 + "="
    let v9 : string = method6(v8)
    let v10 : string = "fable_library_rust::String_::LrcStr::as_str($0)"
    let v11 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr v9 v10
    let v12 : string = "String::from(core::ops::Deref::deref($0))"
    let v13 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v11 v12
    let v14 : string = method7()
    let v15 : string = "fable_library_rust::String_::LrcStr::as_str($0)"
    let v16 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr v14 v15
    let v17 : string = "String::from(core::ops::Deref::deref($0))"
    let v18 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v16 v17
    let v19 : string = method6(v6)
    let v20 : string = "fable_library_rust::String_::LrcStr::as_str($0)"
    let v21 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr v19 v20
    let v22 : string = "String::from(core::ops::Deref::deref($0))"
    let v23 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v21 v22
    let v24 : string = "v23.replace(&v13, &v18)"
    let v25 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v24
    let v26 : Types.std.string.String = method1(v25)
    let v27 : string = "fable_library_rust::String_::fromString(v26)"
    let v28 : string = Fable.Core.RustInterop.emitRustExpr () v27
    v28
and method36 () : string =
    let v0 : string = "fsx-path"
    v0
and method37 (v0 : Types.StaticRef<Types.std.string.String>) : Types.StaticRef<Types.std.string.String> =
    v0
and closure5 () (v0 : Types.StaticRef<Types.std.string.String>) : Types.std.path.PathBuf =
    let v1 : Types.StaticRef<Types.std.string.String> = method37(v0)
    let v2 : string = "std::path::PathBuf::from(v1)"
    let v3 : Types.std.path.PathBuf = Fable.Core.RustInterop.emitRustExpr () v2
    v3
and method38 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.RustInterop.emitRustExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method14(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.RustInterop.emitRustExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method10(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method10(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method10(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method15(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method10(v18)
    let v20 : US0 = US0_0
    let v21 : string = "format!(\"{:?}\", $0)"
    let v22 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v20 v21
    let v23 : Types.EmitType<Types.std.string.String> = method16(v22)
    let v24 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v23|]
    let v25 : (Types.EmitType<Types.std.string.String> []) = method12(v24)
    let v26 : Types.EmitType<Types.std.string.String> = method17(v25)
    let v27 : string = "> spi_to_fsx ()"
    let v28 : Types.EmitType<Types.std.string.String> = method10(v27)
    let v29 : (Types.EmitType<Types.std.string.String> []) = [|v28|]
    let v30 : (Types.EmitType<Types.std.string.String> []) = method12(v29)
    let v31 : string = "$0"
    let v32 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v30 v31
    let v33 : string = "core::ops::Deref::deref(v32)"
    let v34 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v33
    let v35 : obj = v34
    let v36 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v35 v21
    let v37 : Types.EmitType<Types.std.string.String> = v36 |> unbox<Types.EmitType<Types.std.string.String>>
    let v38 : string = "format!(\"{}\", $0)"
    let v39 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v37 v38
    let v40 : string = (v39).ToString ()
    let v41 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v42 : string = "r#\"" + v41 + "\"#"
    let v43 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v42
    let v44 : string = "regex::RegexBuilder::new($0)"
    let v45 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v43 v44
    let v46 : string = "$0.build().unwrap()"
    let v47 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v45 v46
    let v48 : string = method18(v40)
    let v49 : string = "v48.as_str()"
    let v50 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v49
    let v51 : string = method19()
    let v52 : string = "v51.as_str()"
    let v53 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v52
    let v54 : string = "$0.replace_all(&$1, $2).to_string()"
    let v55 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v47, v50, v53) v54
    let v56 : Types.std.string.String = method1(v55)
    let v57 : string = "fable_library_rust::String_::fromString(v56)"
    let v58 : string = Fable.Core.RustInterop.emitRustExpr () v57
    let v59 : string = "\\[\"(.*?)\"\\]"
    let v60 : string = "r#\"" + v59 + "\"#"
    let v61 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v60
    let v62 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v61 v44
    let v63 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v62 v46
    let v64 : string = method18(v58)
    let v65 : string = "v64.as_str()"
    let v66 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v65
    let v67 : string = method20()
    let v68 : string = "v67.as_str()"
    let v69 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v68
    let v70 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v63, v66, v69) v54
    let v71 : Types.std.string.String = method1(v70)
    let v72 : string = "fable_library_rust::String_::fromString(v71)"
    let v73 : string = Fable.Core.RustInterop.emitRustExpr () v72
    let v74 : string = "\\\\\""
    let v75 : string = "r#\"" + v74 + "\"#"
    let v76 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v75
    let v77 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v76 v44
    let v78 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v77 v46
    let v79 : string = method18(v73)
    let v80 : string = "v79.as_str()"
    let v81 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v80
    let v82 : string = method21()
    let v83 : string = "v82.as_str()"
    let v84 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v83
    let v85 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v78, v81, v84) v54
    let v86 : Types.std.string.String = method1(v85)
    let v87 : string = "fable_library_rust::String_::fromString(v86)"
    let v88 : string = Fable.Core.RustInterop.emitRustExpr () v87
    let v89 : string = ", "
    let v90 : string = "r#\"" + v89 + "\"#"
    let v91 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v90
    let v92 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v91 v44
    let v93 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v92 v46
    let v94 : string = method18(v88)
    let v95 : string = "v94.as_str()"
    let v96 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v95
    let v97 : string = method22()
    let v98 : string = "v97.as_str()"
    let v99 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v98
    let v100 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v93, v96, v99) v54
    let v101 : Types.std.string.String = method1(v100)
    let v102 : string = "fable_library_rust::String_::fromString(v101)"
    let v103 : string = Fable.Core.RustInterop.emitRustExpr () v102
    let v104 : Types.EmitType<Types.std.string.String> = method10(v103)
    let v105 : string = "$0"
    let v106 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v1 v105
    let v107 : string = "core::ops::Deref::deref(v106)"
    let v108 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v107
    let v109 : obj = v108
    let v110 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v109 v21
    let v111 : Types.EmitType<Types.std.string.String> = v110 |> unbox<Types.EmitType<Types.std.string.String>>
    let v112 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v111 v38
    let v113 : string = (v112).ToString ()
    let v114 : string = "r#\"" + v41 + "\"#"
    let v115 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v114
    let v116 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v115 v44
    let v117 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v116 v46
    let v118 : string = method18(v113)
    let v119 : string = "v118.as_str()"
    let v120 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v119
    let v121 : string = method19()
    let v122 : string = "v121.as_str()"
    let v123 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v122
    let v124 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v117, v120, v123) v54
    let v125 : Types.std.string.String = method1(v124)
    let v126 : string = "fable_library_rust::String_::fromString(v125)"
    let v127 : string = Fable.Core.RustInterop.emitRustExpr () v126
    let v128 : string = "r#\"" + v59 + "\"#"
    let v129 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v128
    let v130 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v129 v44
    let v131 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v130 v46
    let v132 : string = method18(v127)
    let v133 : string = "v132.as_str()"
    let v134 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v133
    let v135 : string = method20()
    let v136 : string = "v135.as_str()"
    let v137 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v136
    let v138 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v131, v134, v137) v54
    let v139 : Types.std.string.String = method1(v138)
    let v140 : string = "fable_library_rust::String_::fromString(v139)"
    let v141 : string = Fable.Core.RustInterop.emitRustExpr () v140
    let v142 : string = "r#\"" + v74 + "\"#"
    let v143 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v142
    let v144 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v143 v44
    let v145 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v144 v46
    let v146 : string = method18(v141)
    let v147 : string = "v146.as_str()"
    let v148 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v147
    let v149 : string = method21()
    let v150 : string = "v149.as_str()"
    let v151 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v150
    let v152 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v145, v148, v151) v54
    let v153 : Types.std.string.String = method1(v152)
    let v154 : string = "fable_library_rust::String_::fromString(v153)"
    let v155 : string = Fable.Core.RustInterop.emitRustExpr () v154
    let v156 : string = "r#\"" + v89 + "\"#"
    let v157 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v156
    let v158 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v157 v44
    let v159 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v158 v46
    let v160 : string = method18(v155)
    let v161 : string = "v160.as_str()"
    let v162 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v161
    let v163 : string = method22()
    let v164 : string = "v163.as_str()"
    let v165 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v164
    let v166 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v159, v162, v165) v54
    let v167 : Types.std.string.String = method1(v166)
    let v168 : string = "fable_library_rust::String_::fromString(v167)"
    let v169 : string = Fable.Core.RustInterop.emitRustExpr () v168
    let v170 : Types.EmitType<Types.std.string.String> = method10(v169)
    let v171 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v26 v38
    let v172 : string = (v171).ToString ()
    let v173 : string = "r#\"" + v41 + "\"#"
    let v174 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v173
    let v175 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v174 v44
    let v176 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v175 v46
    let v177 : string = method18(v172)
    let v178 : string = "v177.as_str()"
    let v179 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v178
    let v180 : string = method19()
    let v181 : string = "v180.as_str()"
    let v182 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v181
    let v183 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v176, v179, v182) v54
    let v184 : Types.std.string.String = method1(v183)
    let v185 : string = "fable_library_rust::String_::fromString(v184)"
    let v186 : string = Fable.Core.RustInterop.emitRustExpr () v185
    let v187 : string = "r#\"" + v59 + "\"#"
    let v188 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v187
    let v189 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v188 v44
    let v190 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v189 v46
    let v191 : string = method18(v186)
    let v192 : string = "v191.as_str()"
    let v193 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v192
    let v194 : string = method20()
    let v195 : string = "v194.as_str()"
    let v196 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v195
    let v197 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v190, v193, v196) v54
    let v198 : Types.std.string.String = method1(v197)
    let v199 : string = "fable_library_rust::String_::fromString(v198)"
    let v200 : string = Fable.Core.RustInterop.emitRustExpr () v199
    let v201 : string = "r#\"" + v74 + "\"#"
    let v202 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v201
    let v203 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v202 v44
    let v204 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v203 v46
    let v205 : string = method18(v200)
    let v206 : string = "v205.as_str()"
    let v207 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v206
    let v208 : string = method21()
    let v209 : string = "v208.as_str()"
    let v210 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v209
    let v211 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v204, v207, v210) v54
    let v212 : Types.std.string.String = method1(v211)
    let v213 : string = "fable_library_rust::String_::fromString(v212)"
    let v214 : string = Fable.Core.RustInterop.emitRustExpr () v213
    let v215 : string = "r#\"" + v89 + "\"#"
    let v216 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v215
    let v217 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v216 v44
    let v218 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v217 v46
    let v219 : string = method18(v214)
    let v220 : string = "v219.as_str()"
    let v221 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v220
    let v222 : string = method22()
    let v223 : string = "v222.as_str()"
    let v224 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v223
    let v225 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v218, v221, v224) v54
    let v226 : Types.std.string.String = method1(v225)
    let v227 : string = "fable_library_rust::String_::fromString(v226)"
    let v228 : string = Fable.Core.RustInterop.emitRustExpr () v227
    let v229 : Types.EmitType<Types.std.string.String> = method10(v228)
    let v230 : string = "de884c"
    let v231 : string = v230.Substring (0, 2)
    let v232 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v233 : uint8 = Fable.Core.RustInterop.emitRustExpr v231 v232
    let v234 : string = v230.Substring (2, 4)
    let v235 : uint8 = Fable.Core.RustInterop.emitRustExpr v234 v232
    let v236 : string = v230.Substring (4, 6)
    let v237 : uint8 = Fable.Core.RustInterop.emitRustExpr v236 v232
    let v238 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v239 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v170, v233, v235, v237) v238
    let v240 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v239 v38
    let v241 : string = "385779"
    let v242 : string = v241.Substring (0, 2)
    let v243 : uint8 = Fable.Core.RustInterop.emitRustExpr v242 v232
    let v244 : string = v241.Substring (2, 4)
    let v245 : uint8 = Fable.Core.RustInterop.emitRustExpr v244 v232
    let v246 : string = v241.Substring (4, 6)
    let v247 : uint8 = Fable.Core.RustInterop.emitRustExpr v246 v232
    let v248 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v229, v243, v245, v247) v238
    let v249 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v248 v38
    let v250 : string = $"{v104} {v240} {v249}"
    System.Console.WriteLine v250
    ()
and method39 (v0 : Types.std.path.PathBuf) : Types.std.path.PathBuf =
    v0
and method40 (v0 : Types.Ref<Types.std.path.Path>) : Types.Ref<Types.std.path.Path> =
    v0
and method41 () : string =
    let v0 : string = "package.spiproj"
    v0
and method42 (v0 : Types.Ref<Types.std.path.Path>) : Types.Ref<Types.std.path.Path> =
    v0
and closure6 () (v0 : Types.Ref<Types.std.path.Path>) : Types.std.path.PathBuf =
    let v1 : string = method41()
    let v2 : string = "v1.as_str()"
    let v3 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v2
    let v4 : Types.Ref<Types.std.path.Path> = method42(v0)
    let v5 : string = "v4.join(v3)"
    let v6 : Types.std.path.PathBuf = Fable.Core.RustInterop.emitRustExpr () v5
    v6
and method43 (v0 : Types.std.path.PathBuf) : Types.std.path.PathBuf =
    v0
and closure7 () (v0 : Types.std.path.PathBuf) : bool =
    let v1 : Types.std.path.PathBuf = method43(v0)
    let v2 : string = "v1.exists()"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr () v2
    v3
and method44 () : string =
    let v0 : string = ".spir"
    v0
and method45 () : string =
    let v0 : string = ".spi"
    v0
and method46 () : string =
    let v0 : string = ".fsx"
    v0
and method47 () : string =
    let v0 : string = ""
    v0
and method48 (v0 : Types.U16) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "format!(\"{:?}\", $0)"
    let v2 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v0 v1
    let v3 : Types.EmitType<Types.std.string.String> = v2 |> unbox<Types.EmitType<Types.std.string.String>>
    v3
and method49 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.RustInterop.emitRustExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method14(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.RustInterop.emitRustExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method10(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method10(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method10(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method15(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method10(v18)
    let v20 : US0 = US0_0
    let v21 : string = "format!(\"{:?}\", $0)"
    let v22 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v20 v21
    let v23 : Types.EmitType<Types.std.string.String> = method16(v22)
    let v24 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v23|]
    let v25 : (Types.EmitType<Types.std.string.String> []) = method12(v24)
    let v26 : Types.EmitType<Types.std.string.String> = method17(v25)
    let v27 : string = "> ping ()"
    let v28 : Types.EmitType<Types.std.string.String> = method10(v27)
    let v29 : (Types.EmitType<Types.std.string.String> []) = [|v28|]
    let v30 : (Types.EmitType<Types.std.string.String> []) = method12(v29)
    let v31 : string = "$0"
    let v32 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v30 v31
    let v33 : string = "core::ops::Deref::deref(v32)"
    let v34 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v33
    let v35 : obj = v34
    let v36 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v35 v21
    let v37 : Types.EmitType<Types.std.string.String> = v36 |> unbox<Types.EmitType<Types.std.string.String>>
    let v38 : string = "format!(\"{}\", $0)"
    let v39 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v37 v38
    let v40 : string = (v39).ToString ()
    let v41 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v42 : string = "r#\"" + v41 + "\"#"
    let v43 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v42
    let v44 : string = "regex::RegexBuilder::new($0)"
    let v45 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v43 v44
    let v46 : string = "$0.build().unwrap()"
    let v47 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v45 v46
    let v48 : string = method18(v40)
    let v49 : string = "v48.as_str()"
    let v50 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v49
    let v51 : string = method19()
    let v52 : string = "v51.as_str()"
    let v53 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v52
    let v54 : string = "$0.replace_all(&$1, $2).to_string()"
    let v55 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v47, v50, v53) v54
    let v56 : Types.std.string.String = method1(v55)
    let v57 : string = "fable_library_rust::String_::fromString(v56)"
    let v58 : string = Fable.Core.RustInterop.emitRustExpr () v57
    let v59 : string = "\\[\"(.*?)\"\\]"
    let v60 : string = "r#\"" + v59 + "\"#"
    let v61 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v60
    let v62 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v61 v44
    let v63 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v62 v46
    let v64 : string = method18(v58)
    let v65 : string = "v64.as_str()"
    let v66 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v65
    let v67 : string = method20()
    let v68 : string = "v67.as_str()"
    let v69 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v68
    let v70 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v63, v66, v69) v54
    let v71 : Types.std.string.String = method1(v70)
    let v72 : string = "fable_library_rust::String_::fromString(v71)"
    let v73 : string = Fable.Core.RustInterop.emitRustExpr () v72
    let v74 : string = "\\\\\""
    let v75 : string = "r#\"" + v74 + "\"#"
    let v76 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v75
    let v77 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v76 v44
    let v78 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v77 v46
    let v79 : string = method18(v73)
    let v80 : string = "v79.as_str()"
    let v81 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v80
    let v82 : string = method21()
    let v83 : string = "v82.as_str()"
    let v84 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v83
    let v85 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v78, v81, v84) v54
    let v86 : Types.std.string.String = method1(v85)
    let v87 : string = "fable_library_rust::String_::fromString(v86)"
    let v88 : string = Fable.Core.RustInterop.emitRustExpr () v87
    let v89 : string = ", "
    let v90 : string = "r#\"" + v89 + "\"#"
    let v91 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v90
    let v92 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v91 v44
    let v93 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v92 v46
    let v94 : string = method18(v88)
    let v95 : string = "v94.as_str()"
    let v96 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v95
    let v97 : string = method22()
    let v98 : string = "v97.as_str()"
    let v99 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v98
    let v100 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v93, v96, v99) v54
    let v101 : Types.std.string.String = method1(v100)
    let v102 : string = "fable_library_rust::String_::fromString(v101)"
    let v103 : string = Fable.Core.RustInterop.emitRustExpr () v102
    let v104 : Types.EmitType<Types.std.string.String> = method10(v103)
    let v105 : string = "$0"
    let v106 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v1 v105
    let v107 : string = "core::ops::Deref::deref(v106)"
    let v108 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v107
    let v109 : obj = v108
    let v110 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v109 v21
    let v111 : Types.EmitType<Types.std.string.String> = v110 |> unbox<Types.EmitType<Types.std.string.String>>
    let v112 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v111 v38
    let v113 : string = (v112).ToString ()
    let v114 : string = "r#\"" + v41 + "\"#"
    let v115 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v114
    let v116 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v115 v44
    let v117 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v116 v46
    let v118 : string = method18(v113)
    let v119 : string = "v118.as_str()"
    let v120 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v119
    let v121 : string = method19()
    let v122 : string = "v121.as_str()"
    let v123 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v122
    let v124 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v117, v120, v123) v54
    let v125 : Types.std.string.String = method1(v124)
    let v126 : string = "fable_library_rust::String_::fromString(v125)"
    let v127 : string = Fable.Core.RustInterop.emitRustExpr () v126
    let v128 : string = "r#\"" + v59 + "\"#"
    let v129 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v128
    let v130 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v129 v44
    let v131 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v130 v46
    let v132 : string = method18(v127)
    let v133 : string = "v132.as_str()"
    let v134 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v133
    let v135 : string = method20()
    let v136 : string = "v135.as_str()"
    let v137 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v136
    let v138 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v131, v134, v137) v54
    let v139 : Types.std.string.String = method1(v138)
    let v140 : string = "fable_library_rust::String_::fromString(v139)"
    let v141 : string = Fable.Core.RustInterop.emitRustExpr () v140
    let v142 : string = "r#\"" + v74 + "\"#"
    let v143 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v142
    let v144 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v143 v44
    let v145 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v144 v46
    let v146 : string = method18(v141)
    let v147 : string = "v146.as_str()"
    let v148 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v147
    let v149 : string = method21()
    let v150 : string = "v149.as_str()"
    let v151 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v150
    let v152 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v145, v148, v151) v54
    let v153 : Types.std.string.String = method1(v152)
    let v154 : string = "fable_library_rust::String_::fromString(v153)"
    let v155 : string = Fable.Core.RustInterop.emitRustExpr () v154
    let v156 : string = "r#\"" + v89 + "\"#"
    let v157 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v156
    let v158 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v157 v44
    let v159 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v158 v46
    let v160 : string = method18(v155)
    let v161 : string = "v160.as_str()"
    let v162 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v161
    let v163 : string = method22()
    let v164 : string = "v163.as_str()"
    let v165 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v164
    let v166 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v159, v162, v165) v54
    let v167 : Types.std.string.String = method1(v166)
    let v168 : string = "fable_library_rust::String_::fromString(v167)"
    let v169 : string = Fable.Core.RustInterop.emitRustExpr () v168
    let v170 : Types.EmitType<Types.std.string.String> = method10(v169)
    let v171 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v26 v38
    let v172 : string = (v171).ToString ()
    let v173 : string = "r#\"" + v41 + "\"#"
    let v174 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v173
    let v175 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v174 v44
    let v176 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v175 v46
    let v177 : string = method18(v172)
    let v178 : string = "v177.as_str()"
    let v179 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v178
    let v180 : string = method19()
    let v181 : string = "v180.as_str()"
    let v182 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v181
    let v183 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v176, v179, v182) v54
    let v184 : Types.std.string.String = method1(v183)
    let v185 : string = "fable_library_rust::String_::fromString(v184)"
    let v186 : string = Fable.Core.RustInterop.emitRustExpr () v185
    let v187 : string = "r#\"" + v59 + "\"#"
    let v188 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v187
    let v189 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v188 v44
    let v190 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v189 v46
    let v191 : string = method18(v186)
    let v192 : string = "v191.as_str()"
    let v193 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v192
    let v194 : string = method20()
    let v195 : string = "v194.as_str()"
    let v196 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v195
    let v197 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v190, v193, v196) v54
    let v198 : Types.std.string.String = method1(v197)
    let v199 : string = "fable_library_rust::String_::fromString(v198)"
    let v200 : string = Fable.Core.RustInterop.emitRustExpr () v199
    let v201 : string = "r#\"" + v74 + "\"#"
    let v202 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v201
    let v203 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v202 v44
    let v204 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v203 v46
    let v205 : string = method18(v200)
    let v206 : string = "v205.as_str()"
    let v207 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v206
    let v208 : string = method21()
    let v209 : string = "v208.as_str()"
    let v210 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v209
    let v211 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v204, v207, v210) v54
    let v212 : Types.std.string.String = method1(v211)
    let v213 : string = "fable_library_rust::String_::fromString(v212)"
    let v214 : string = Fable.Core.RustInterop.emitRustExpr () v213
    let v215 : string = "r#\"" + v89 + "\"#"
    let v216 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v215
    let v217 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v216 v44
    let v218 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v217 v46
    let v219 : string = method18(v214)
    let v220 : string = "v219.as_str()"
    let v221 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v220
    let v222 : string = method22()
    let v223 : string = "v222.as_str()"
    let v224 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v223
    let v225 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v218, v221, v224) v54
    let v226 : Types.std.string.String = method1(v225)
    let v227 : string = "fable_library_rust::String_::fromString(v226)"
    let v228 : string = Fable.Core.RustInterop.emitRustExpr () v227
    let v229 : Types.EmitType<Types.std.string.String> = method10(v228)
    let v230 : string = "e36a62"
    let v231 : string = v230.Substring (0, 2)
    let v232 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v233 : uint8 = Fable.Core.RustInterop.emitRustExpr v231 v232
    let v234 : string = v230.Substring (2, 4)
    let v235 : uint8 = Fable.Core.RustInterop.emitRustExpr v234 v232
    let v236 : string = v230.Substring (4, 6)
    let v237 : uint8 = Fable.Core.RustInterop.emitRustExpr v236 v232
    let v238 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v239 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v170, v233, v235, v237) v238
    let v240 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v239 v38
    let v241 : string = "385779"
    let v242 : string = v241.Substring (0, 2)
    let v243 : uint8 = Fable.Core.RustInterop.emitRustExpr v242 v232
    let v244 : string = v241.Substring (2, 4)
    let v245 : uint8 = Fable.Core.RustInterop.emitRustExpr v244 v232
    let v246 : string = v241.Substring (4, 6)
    let v247 : uint8 = Fable.Core.RustInterop.emitRustExpr v246 v232
    let v248 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v229, v243, v245, v247) v238
    let v249 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v248 v38
    let v250 : string = $"{v104} {v240} {v249}"
    System.Console.WriteLine v250
    ()
and method50 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.RustInterop.emitRustExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method14(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.RustInterop.emitRustExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method10(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method10(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method10(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method15(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method10(v18)
    let v20 : US0 = US0_0
    let v21 : string = "format!(\"{:?}\", $0)"
    let v22 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v20 v21
    let v23 : Types.EmitType<Types.std.string.String> = method16(v22)
    let v24 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v23|]
    let v25 : (Types.EmitType<Types.std.string.String> []) = method12(v24)
    let v26 : Types.EmitType<Types.std.string.String> = method17(v25)
    let v27 : string = "> zmq_request ()"
    let v28 : Types.EmitType<Types.std.string.String> = method10(v27)
    let v29 : (Types.EmitType<Types.std.string.String> []) = [|v28|]
    let v30 : (Types.EmitType<Types.std.string.String> []) = method12(v29)
    let v31 : string = "$0"
    let v32 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v30 v31
    let v33 : string = "core::ops::Deref::deref(v32)"
    let v34 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v33
    let v35 : obj = v34
    let v36 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v35 v21
    let v37 : Types.EmitType<Types.std.string.String> = v36 |> unbox<Types.EmitType<Types.std.string.String>>
    let v38 : string = "format!(\"{}\", $0)"
    let v39 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v37 v38
    let v40 : string = (v39).ToString ()
    let v41 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v42 : string = "r#\"" + v41 + "\"#"
    let v43 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v42
    let v44 : string = "regex::RegexBuilder::new($0)"
    let v45 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v43 v44
    let v46 : string = "$0.build().unwrap()"
    let v47 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v45 v46
    let v48 : string = method18(v40)
    let v49 : string = "v48.as_str()"
    let v50 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v49
    let v51 : string = method19()
    let v52 : string = "v51.as_str()"
    let v53 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v52
    let v54 : string = "$0.replace_all(&$1, $2).to_string()"
    let v55 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v47, v50, v53) v54
    let v56 : Types.std.string.String = method1(v55)
    let v57 : string = "fable_library_rust::String_::fromString(v56)"
    let v58 : string = Fable.Core.RustInterop.emitRustExpr () v57
    let v59 : string = "\\[\"(.*?)\"\\]"
    let v60 : string = "r#\"" + v59 + "\"#"
    let v61 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v60
    let v62 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v61 v44
    let v63 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v62 v46
    let v64 : string = method18(v58)
    let v65 : string = "v64.as_str()"
    let v66 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v65
    let v67 : string = method20()
    let v68 : string = "v67.as_str()"
    let v69 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v68
    let v70 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v63, v66, v69) v54
    let v71 : Types.std.string.String = method1(v70)
    let v72 : string = "fable_library_rust::String_::fromString(v71)"
    let v73 : string = Fable.Core.RustInterop.emitRustExpr () v72
    let v74 : string = "\\\\\""
    let v75 : string = "r#\"" + v74 + "\"#"
    let v76 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v75
    let v77 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v76 v44
    let v78 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v77 v46
    let v79 : string = method18(v73)
    let v80 : string = "v79.as_str()"
    let v81 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v80
    let v82 : string = method21()
    let v83 : string = "v82.as_str()"
    let v84 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v83
    let v85 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v78, v81, v84) v54
    let v86 : Types.std.string.String = method1(v85)
    let v87 : string = "fable_library_rust::String_::fromString(v86)"
    let v88 : string = Fable.Core.RustInterop.emitRustExpr () v87
    let v89 : string = ", "
    let v90 : string = "r#\"" + v89 + "\"#"
    let v91 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v90
    let v92 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v91 v44
    let v93 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v92 v46
    let v94 : string = method18(v88)
    let v95 : string = "v94.as_str()"
    let v96 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v95
    let v97 : string = method22()
    let v98 : string = "v97.as_str()"
    let v99 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v98
    let v100 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v93, v96, v99) v54
    let v101 : Types.std.string.String = method1(v100)
    let v102 : string = "fable_library_rust::String_::fromString(v101)"
    let v103 : string = Fable.Core.RustInterop.emitRustExpr () v102
    let v104 : Types.EmitType<Types.std.string.String> = method10(v103)
    let v105 : string = "$0"
    let v106 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v1 v105
    let v107 : string = "core::ops::Deref::deref(v106)"
    let v108 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v107
    let v109 : obj = v108
    let v110 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v109 v21
    let v111 : Types.EmitType<Types.std.string.String> = v110 |> unbox<Types.EmitType<Types.std.string.String>>
    let v112 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v111 v38
    let v113 : string = (v112).ToString ()
    let v114 : string = "r#\"" + v41 + "\"#"
    let v115 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v114
    let v116 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v115 v44
    let v117 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v116 v46
    let v118 : string = method18(v113)
    let v119 : string = "v118.as_str()"
    let v120 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v119
    let v121 : string = method19()
    let v122 : string = "v121.as_str()"
    let v123 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v122
    let v124 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v117, v120, v123) v54
    let v125 : Types.std.string.String = method1(v124)
    let v126 : string = "fable_library_rust::String_::fromString(v125)"
    let v127 : string = Fable.Core.RustInterop.emitRustExpr () v126
    let v128 : string = "r#\"" + v59 + "\"#"
    let v129 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v128
    let v130 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v129 v44
    let v131 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v130 v46
    let v132 : string = method18(v127)
    let v133 : string = "v132.as_str()"
    let v134 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v133
    let v135 : string = method20()
    let v136 : string = "v135.as_str()"
    let v137 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v136
    let v138 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v131, v134, v137) v54
    let v139 : Types.std.string.String = method1(v138)
    let v140 : string = "fable_library_rust::String_::fromString(v139)"
    let v141 : string = Fable.Core.RustInterop.emitRustExpr () v140
    let v142 : string = "r#\"" + v74 + "\"#"
    let v143 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v142
    let v144 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v143 v44
    let v145 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v144 v46
    let v146 : string = method18(v141)
    let v147 : string = "v146.as_str()"
    let v148 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v147
    let v149 : string = method21()
    let v150 : string = "v149.as_str()"
    let v151 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v150
    let v152 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v145, v148, v151) v54
    let v153 : Types.std.string.String = method1(v152)
    let v154 : string = "fable_library_rust::String_::fromString(v153)"
    let v155 : string = Fable.Core.RustInterop.emitRustExpr () v154
    let v156 : string = "r#\"" + v89 + "\"#"
    let v157 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v156
    let v158 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v157 v44
    let v159 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v158 v46
    let v160 : string = method18(v155)
    let v161 : string = "v160.as_str()"
    let v162 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v161
    let v163 : string = method22()
    let v164 : string = "v163.as_str()"
    let v165 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v164
    let v166 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v159, v162, v165) v54
    let v167 : Types.std.string.String = method1(v166)
    let v168 : string = "fable_library_rust::String_::fromString(v167)"
    let v169 : string = Fable.Core.RustInterop.emitRustExpr () v168
    let v170 : Types.EmitType<Types.std.string.String> = method10(v169)
    let v171 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v26 v38
    let v172 : string = (v171).ToString ()
    let v173 : string = "r#\"" + v41 + "\"#"
    let v174 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v173
    let v175 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v174 v44
    let v176 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v175 v46
    let v177 : string = method18(v172)
    let v178 : string = "v177.as_str()"
    let v179 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v178
    let v180 : string = method19()
    let v181 : string = "v180.as_str()"
    let v182 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v181
    let v183 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v176, v179, v182) v54
    let v184 : Types.std.string.String = method1(v183)
    let v185 : string = "fable_library_rust::String_::fromString(v184)"
    let v186 : string = Fable.Core.RustInterop.emitRustExpr () v185
    let v187 : string = "r#\"" + v59 + "\"#"
    let v188 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v187
    let v189 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v188 v44
    let v190 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v189 v46
    let v191 : string = method18(v186)
    let v192 : string = "v191.as_str()"
    let v193 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v192
    let v194 : string = method20()
    let v195 : string = "v194.as_str()"
    let v196 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v195
    let v197 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v190, v193, v196) v54
    let v198 : Types.std.string.String = method1(v197)
    let v199 : string = "fable_library_rust::String_::fromString(v198)"
    let v200 : string = Fable.Core.RustInterop.emitRustExpr () v199
    let v201 : string = "r#\"" + v74 + "\"#"
    let v202 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v201
    let v203 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v202 v44
    let v204 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v203 v46
    let v205 : string = method18(v200)
    let v206 : string = "v205.as_str()"
    let v207 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v206
    let v208 : string = method21()
    let v209 : string = "v208.as_str()"
    let v210 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v209
    let v211 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v204, v207, v210) v54
    let v212 : Types.std.string.String = method1(v211)
    let v213 : string = "fable_library_rust::String_::fromString(v212)"
    let v214 : string = Fable.Core.RustInterop.emitRustExpr () v213
    let v215 : string = "r#\"" + v89 + "\"#"
    let v216 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v215
    let v217 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v216 v44
    let v218 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v217 v46
    let v219 : string = method18(v214)
    let v220 : string = "v219.as_str()"
    let v221 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v220
    let v222 : string = method22()
    let v223 : string = "v222.as_str()"
    let v224 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v223
    let v225 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v218, v221, v224) v54
    let v226 : Types.std.string.String = method1(v225)
    let v227 : string = "fable_library_rust::String_::fromString(v226)"
    let v228 : string = Fable.Core.RustInterop.emitRustExpr () v227
    let v229 : Types.EmitType<Types.std.string.String> = method10(v228)
    let v230 : string = "fcfb1b"
    let v231 : string = v230.Substring (0, 2)
    let v232 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v233 : uint8 = Fable.Core.RustInterop.emitRustExpr v231 v232
    let v234 : string = v230.Substring (2, 4)
    let v235 : uint8 = Fable.Core.RustInterop.emitRustExpr v234 v232
    let v236 : string = v230.Substring (4, 6)
    let v237 : uint8 = Fable.Core.RustInterop.emitRustExpr v236 v232
    let v238 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v239 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v170, v233, v235, v237) v238
    let v240 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v239 v38
    let v241 : string = "385779"
    let v242 : string = v241.Substring (0, 2)
    let v243 : uint8 = Fable.Core.RustInterop.emitRustExpr v242 v232
    let v244 : string = v241.Substring (2, 4)
    let v245 : uint8 = Fable.Core.RustInterop.emitRustExpr v244 v232
    let v246 : string = v241.Substring (4, 6)
    let v247 : uint8 = Fable.Core.RustInterop.emitRustExpr v246 v232
    let v248 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v229, v243, v245, v247) v238
    let v249 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v248 v38
    let v250 : string = $"{v104} {v240} {v249}"
    System.Console.WriteLine v250
    ()
and method51 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.RustInterop.emitRustExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method14(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.RustInterop.emitRustExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method10(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method10(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method10(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method15(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method10(v18)
    let v20 : US0 = US0_0
    let v21 : string = "format!(\"{:?}\", $0)"
    let v22 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v20 v21
    let v23 : Types.EmitType<Types.std.string.String> = method16(v22)
    let v24 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v23|]
    let v25 : (Types.EmitType<Types.std.string.String> []) = method12(v24)
    let v26 : Types.EmitType<Types.std.string.String> = method17(v25)
    let v27 : string = "> spi_open ()"
    let v28 : Types.EmitType<Types.std.string.String> = method10(v27)
    let v29 : (Types.EmitType<Types.std.string.String> []) = [|v28|]
    let v30 : (Types.EmitType<Types.std.string.String> []) = method12(v29)
    let v31 : string = "$0"
    let v32 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v30 v31
    let v33 : string = "core::ops::Deref::deref(v32)"
    let v34 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v33
    let v35 : obj = v34
    let v36 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v35 v21
    let v37 : Types.EmitType<Types.std.string.String> = v36 |> unbox<Types.EmitType<Types.std.string.String>>
    let v38 : string = "format!(\"{}\", $0)"
    let v39 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v37 v38
    let v40 : string = (v39).ToString ()
    let v41 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v42 : string = "r#\"" + v41 + "\"#"
    let v43 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v42
    let v44 : string = "regex::RegexBuilder::new($0)"
    let v45 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v43 v44
    let v46 : string = "$0.build().unwrap()"
    let v47 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v45 v46
    let v48 : string = method18(v40)
    let v49 : string = "v48.as_str()"
    let v50 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v49
    let v51 : string = method19()
    let v52 : string = "v51.as_str()"
    let v53 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v52
    let v54 : string = "$0.replace_all(&$1, $2).to_string()"
    let v55 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v47, v50, v53) v54
    let v56 : Types.std.string.String = method1(v55)
    let v57 : string = "fable_library_rust::String_::fromString(v56)"
    let v58 : string = Fable.Core.RustInterop.emitRustExpr () v57
    let v59 : string = "\\[\"(.*?)\"\\]"
    let v60 : string = "r#\"" + v59 + "\"#"
    let v61 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v60
    let v62 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v61 v44
    let v63 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v62 v46
    let v64 : string = method18(v58)
    let v65 : string = "v64.as_str()"
    let v66 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v65
    let v67 : string = method20()
    let v68 : string = "v67.as_str()"
    let v69 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v68
    let v70 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v63, v66, v69) v54
    let v71 : Types.std.string.String = method1(v70)
    let v72 : string = "fable_library_rust::String_::fromString(v71)"
    let v73 : string = Fable.Core.RustInterop.emitRustExpr () v72
    let v74 : string = "\\\\\""
    let v75 : string = "r#\"" + v74 + "\"#"
    let v76 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v75
    let v77 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v76 v44
    let v78 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v77 v46
    let v79 : string = method18(v73)
    let v80 : string = "v79.as_str()"
    let v81 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v80
    let v82 : string = method21()
    let v83 : string = "v82.as_str()"
    let v84 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v83
    let v85 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v78, v81, v84) v54
    let v86 : Types.std.string.String = method1(v85)
    let v87 : string = "fable_library_rust::String_::fromString(v86)"
    let v88 : string = Fable.Core.RustInterop.emitRustExpr () v87
    let v89 : string = ", "
    let v90 : string = "r#\"" + v89 + "\"#"
    let v91 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v90
    let v92 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v91 v44
    let v93 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v92 v46
    let v94 : string = method18(v88)
    let v95 : string = "v94.as_str()"
    let v96 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v95
    let v97 : string = method22()
    let v98 : string = "v97.as_str()"
    let v99 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v98
    let v100 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v93, v96, v99) v54
    let v101 : Types.std.string.String = method1(v100)
    let v102 : string = "fable_library_rust::String_::fromString(v101)"
    let v103 : string = Fable.Core.RustInterop.emitRustExpr () v102
    let v104 : Types.EmitType<Types.std.string.String> = method10(v103)
    let v105 : string = "$0"
    let v106 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v1 v105
    let v107 : string = "core::ops::Deref::deref(v106)"
    let v108 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v107
    let v109 : obj = v108
    let v110 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v109 v21
    let v111 : Types.EmitType<Types.std.string.String> = v110 |> unbox<Types.EmitType<Types.std.string.String>>
    let v112 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v111 v38
    let v113 : string = (v112).ToString ()
    let v114 : string = "r#\"" + v41 + "\"#"
    let v115 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v114
    let v116 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v115 v44
    let v117 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v116 v46
    let v118 : string = method18(v113)
    let v119 : string = "v118.as_str()"
    let v120 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v119
    let v121 : string = method19()
    let v122 : string = "v121.as_str()"
    let v123 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v122
    let v124 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v117, v120, v123) v54
    let v125 : Types.std.string.String = method1(v124)
    let v126 : string = "fable_library_rust::String_::fromString(v125)"
    let v127 : string = Fable.Core.RustInterop.emitRustExpr () v126
    let v128 : string = "r#\"" + v59 + "\"#"
    let v129 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v128
    let v130 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v129 v44
    let v131 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v130 v46
    let v132 : string = method18(v127)
    let v133 : string = "v132.as_str()"
    let v134 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v133
    let v135 : string = method20()
    let v136 : string = "v135.as_str()"
    let v137 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v136
    let v138 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v131, v134, v137) v54
    let v139 : Types.std.string.String = method1(v138)
    let v140 : string = "fable_library_rust::String_::fromString(v139)"
    let v141 : string = Fable.Core.RustInterop.emitRustExpr () v140
    let v142 : string = "r#\"" + v74 + "\"#"
    let v143 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v142
    let v144 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v143 v44
    let v145 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v144 v46
    let v146 : string = method18(v141)
    let v147 : string = "v146.as_str()"
    let v148 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v147
    let v149 : string = method21()
    let v150 : string = "v149.as_str()"
    let v151 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v150
    let v152 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v145, v148, v151) v54
    let v153 : Types.std.string.String = method1(v152)
    let v154 : string = "fable_library_rust::String_::fromString(v153)"
    let v155 : string = Fable.Core.RustInterop.emitRustExpr () v154
    let v156 : string = "r#\"" + v89 + "\"#"
    let v157 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v156
    let v158 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v157 v44
    let v159 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v158 v46
    let v160 : string = method18(v155)
    let v161 : string = "v160.as_str()"
    let v162 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v161
    let v163 : string = method22()
    let v164 : string = "v163.as_str()"
    let v165 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v164
    let v166 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v159, v162, v165) v54
    let v167 : Types.std.string.String = method1(v166)
    let v168 : string = "fable_library_rust::String_::fromString(v167)"
    let v169 : string = Fable.Core.RustInterop.emitRustExpr () v168
    let v170 : Types.EmitType<Types.std.string.String> = method10(v169)
    let v171 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v26 v38
    let v172 : string = (v171).ToString ()
    let v173 : string = "r#\"" + v41 + "\"#"
    let v174 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v173
    let v175 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v174 v44
    let v176 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v175 v46
    let v177 : string = method18(v172)
    let v178 : string = "v177.as_str()"
    let v179 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v178
    let v180 : string = method19()
    let v181 : string = "v180.as_str()"
    let v182 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v181
    let v183 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v176, v179, v182) v54
    let v184 : Types.std.string.String = method1(v183)
    let v185 : string = "fable_library_rust::String_::fromString(v184)"
    let v186 : string = Fable.Core.RustInterop.emitRustExpr () v185
    let v187 : string = "r#\"" + v59 + "\"#"
    let v188 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v187
    let v189 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v188 v44
    let v190 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v189 v46
    let v191 : string = method18(v186)
    let v192 : string = "v191.as_str()"
    let v193 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v192
    let v194 : string = method20()
    let v195 : string = "v194.as_str()"
    let v196 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v195
    let v197 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v190, v193, v196) v54
    let v198 : Types.std.string.String = method1(v197)
    let v199 : string = "fable_library_rust::String_::fromString(v198)"
    let v200 : string = Fable.Core.RustInterop.emitRustExpr () v199
    let v201 : string = "r#\"" + v74 + "\"#"
    let v202 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v201
    let v203 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v202 v44
    let v204 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v203 v46
    let v205 : string = method18(v200)
    let v206 : string = "v205.as_str()"
    let v207 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v206
    let v208 : string = method21()
    let v209 : string = "v208.as_str()"
    let v210 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v209
    let v211 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v204, v207, v210) v54
    let v212 : Types.std.string.String = method1(v211)
    let v213 : string = "fable_library_rust::String_::fromString(v212)"
    let v214 : string = Fable.Core.RustInterop.emitRustExpr () v213
    let v215 : string = "r#\"" + v89 + "\"#"
    let v216 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v215
    let v217 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v216 v44
    let v218 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v217 v46
    let v219 : string = method18(v214)
    let v220 : string = "v219.as_str()"
    let v221 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v220
    let v222 : string = method22()
    let v223 : string = "v222.as_str()"
    let v224 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v223
    let v225 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v218, v221, v224) v54
    let v226 : Types.std.string.String = method1(v225)
    let v227 : string = "fable_library_rust::String_::fromString(v226)"
    let v228 : string = Fable.Core.RustInterop.emitRustExpr () v227
    let v229 : Types.EmitType<Types.std.string.String> = method10(v228)
    let v230 : string = "e36a62"
    let v231 : string = v230.Substring (0, 2)
    let v232 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v233 : uint8 = Fable.Core.RustInterop.emitRustExpr v231 v232
    let v234 : string = v230.Substring (2, 4)
    let v235 : uint8 = Fable.Core.RustInterop.emitRustExpr v234 v232
    let v236 : string = v230.Substring (4, 6)
    let v237 : uint8 = Fable.Core.RustInterop.emitRustExpr v236 v232
    let v238 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v239 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v170, v233, v235, v237) v238
    let v240 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v239 v38
    let v241 : string = "385779"
    let v242 : string = v241.Substring (0, 2)
    let v243 : uint8 = Fable.Core.RustInterop.emitRustExpr v242 v232
    let v244 : string = v241.Substring (2, 4)
    let v245 : uint8 = Fable.Core.RustInterop.emitRustExpr v244 v232
    let v246 : string = v241.Substring (4, 6)
    let v247 : uint8 = Fable.Core.RustInterop.emitRustExpr v246 v232
    let v248 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v229, v243, v245, v247) v238
    let v249 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v248 v38
    let v250 : string = $"{v104} {v240} {v249}"
    System.Console.WriteLine v250
    ()
and method52 (v0 : Types.Ref<Types.Str>) : Types.Ref<Types.Str> =
    v0
and method53 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.RustInterop.emitRustExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method14(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.RustInterop.emitRustExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method10(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method10(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method10(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method15(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method10(v18)
    let v20 : US0 = US0_0
    let v21 : string = "format!(\"{:?}\", $0)"
    let v22 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v20 v21
    let v23 : Types.EmitType<Types.std.string.String> = method16(v22)
    let v24 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v23|]
    let v25 : (Types.EmitType<Types.std.string.String> []) = method12(v24)
    let v26 : Types.EmitType<Types.std.string.String> = method17(v25)
    let v27 : string = "> spiproj_open ()"
    let v28 : Types.EmitType<Types.std.string.String> = method10(v27)
    let v29 : (Types.EmitType<Types.std.string.String> []) = [|v28|]
    let v30 : (Types.EmitType<Types.std.string.String> []) = method12(v29)
    let v31 : string = "$0"
    let v32 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v30 v31
    let v33 : string = "core::ops::Deref::deref(v32)"
    let v34 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v33
    let v35 : obj = v34
    let v36 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v35 v21
    let v37 : Types.EmitType<Types.std.string.String> = v36 |> unbox<Types.EmitType<Types.std.string.String>>
    let v38 : string = "format!(\"{}\", $0)"
    let v39 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v37 v38
    let v40 : string = (v39).ToString ()
    let v41 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v42 : string = "r#\"" + v41 + "\"#"
    let v43 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v42
    let v44 : string = "regex::RegexBuilder::new($0)"
    let v45 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v43 v44
    let v46 : string = "$0.build().unwrap()"
    let v47 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v45 v46
    let v48 : string = method18(v40)
    let v49 : string = "v48.as_str()"
    let v50 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v49
    let v51 : string = method19()
    let v52 : string = "v51.as_str()"
    let v53 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v52
    let v54 : string = "$0.replace_all(&$1, $2).to_string()"
    let v55 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v47, v50, v53) v54
    let v56 : Types.std.string.String = method1(v55)
    let v57 : string = "fable_library_rust::String_::fromString(v56)"
    let v58 : string = Fable.Core.RustInterop.emitRustExpr () v57
    let v59 : string = "\\[\"(.*?)\"\\]"
    let v60 : string = "r#\"" + v59 + "\"#"
    let v61 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v60
    let v62 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v61 v44
    let v63 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v62 v46
    let v64 : string = method18(v58)
    let v65 : string = "v64.as_str()"
    let v66 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v65
    let v67 : string = method20()
    let v68 : string = "v67.as_str()"
    let v69 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v68
    let v70 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v63, v66, v69) v54
    let v71 : Types.std.string.String = method1(v70)
    let v72 : string = "fable_library_rust::String_::fromString(v71)"
    let v73 : string = Fable.Core.RustInterop.emitRustExpr () v72
    let v74 : string = "\\\\\""
    let v75 : string = "r#\"" + v74 + "\"#"
    let v76 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v75
    let v77 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v76 v44
    let v78 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v77 v46
    let v79 : string = method18(v73)
    let v80 : string = "v79.as_str()"
    let v81 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v80
    let v82 : string = method21()
    let v83 : string = "v82.as_str()"
    let v84 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v83
    let v85 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v78, v81, v84) v54
    let v86 : Types.std.string.String = method1(v85)
    let v87 : string = "fable_library_rust::String_::fromString(v86)"
    let v88 : string = Fable.Core.RustInterop.emitRustExpr () v87
    let v89 : string = ", "
    let v90 : string = "r#\"" + v89 + "\"#"
    let v91 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v90
    let v92 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v91 v44
    let v93 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v92 v46
    let v94 : string = method18(v88)
    let v95 : string = "v94.as_str()"
    let v96 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v95
    let v97 : string = method22()
    let v98 : string = "v97.as_str()"
    let v99 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v98
    let v100 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v93, v96, v99) v54
    let v101 : Types.std.string.String = method1(v100)
    let v102 : string = "fable_library_rust::String_::fromString(v101)"
    let v103 : string = Fable.Core.RustInterop.emitRustExpr () v102
    let v104 : Types.EmitType<Types.std.string.String> = method10(v103)
    let v105 : string = "$0"
    let v106 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v1 v105
    let v107 : string = "core::ops::Deref::deref(v106)"
    let v108 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v107
    let v109 : obj = v108
    let v110 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v109 v21
    let v111 : Types.EmitType<Types.std.string.String> = v110 |> unbox<Types.EmitType<Types.std.string.String>>
    let v112 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v111 v38
    let v113 : string = (v112).ToString ()
    let v114 : string = "r#\"" + v41 + "\"#"
    let v115 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v114
    let v116 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v115 v44
    let v117 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v116 v46
    let v118 : string = method18(v113)
    let v119 : string = "v118.as_str()"
    let v120 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v119
    let v121 : string = method19()
    let v122 : string = "v121.as_str()"
    let v123 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v122
    let v124 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v117, v120, v123) v54
    let v125 : Types.std.string.String = method1(v124)
    let v126 : string = "fable_library_rust::String_::fromString(v125)"
    let v127 : string = Fable.Core.RustInterop.emitRustExpr () v126
    let v128 : string = "r#\"" + v59 + "\"#"
    let v129 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v128
    let v130 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v129 v44
    let v131 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v130 v46
    let v132 : string = method18(v127)
    let v133 : string = "v132.as_str()"
    let v134 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v133
    let v135 : string = method20()
    let v136 : string = "v135.as_str()"
    let v137 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v136
    let v138 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v131, v134, v137) v54
    let v139 : Types.std.string.String = method1(v138)
    let v140 : string = "fable_library_rust::String_::fromString(v139)"
    let v141 : string = Fable.Core.RustInterop.emitRustExpr () v140
    let v142 : string = "r#\"" + v74 + "\"#"
    let v143 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v142
    let v144 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v143 v44
    let v145 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v144 v46
    let v146 : string = method18(v141)
    let v147 : string = "v146.as_str()"
    let v148 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v147
    let v149 : string = method21()
    let v150 : string = "v149.as_str()"
    let v151 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v150
    let v152 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v145, v148, v151) v54
    let v153 : Types.std.string.String = method1(v152)
    let v154 : string = "fable_library_rust::String_::fromString(v153)"
    let v155 : string = Fable.Core.RustInterop.emitRustExpr () v154
    let v156 : string = "r#\"" + v89 + "\"#"
    let v157 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v156
    let v158 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v157 v44
    let v159 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v158 v46
    let v160 : string = method18(v155)
    let v161 : string = "v160.as_str()"
    let v162 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v161
    let v163 : string = method22()
    let v164 : string = "v163.as_str()"
    let v165 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v164
    let v166 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v159, v162, v165) v54
    let v167 : Types.std.string.String = method1(v166)
    let v168 : string = "fable_library_rust::String_::fromString(v167)"
    let v169 : string = Fable.Core.RustInterop.emitRustExpr () v168
    let v170 : Types.EmitType<Types.std.string.String> = method10(v169)
    let v171 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v26 v38
    let v172 : string = (v171).ToString ()
    let v173 : string = "r#\"" + v41 + "\"#"
    let v174 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v173
    let v175 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v174 v44
    let v176 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v175 v46
    let v177 : string = method18(v172)
    let v178 : string = "v177.as_str()"
    let v179 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v178
    let v180 : string = method19()
    let v181 : string = "v180.as_str()"
    let v182 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v181
    let v183 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v176, v179, v182) v54
    let v184 : Types.std.string.String = method1(v183)
    let v185 : string = "fable_library_rust::String_::fromString(v184)"
    let v186 : string = Fable.Core.RustInterop.emitRustExpr () v185
    let v187 : string = "r#\"" + v59 + "\"#"
    let v188 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v187
    let v189 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v188 v44
    let v190 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v189 v46
    let v191 : string = method18(v186)
    let v192 : string = "v191.as_str()"
    let v193 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v192
    let v194 : string = method20()
    let v195 : string = "v194.as_str()"
    let v196 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v195
    let v197 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v190, v193, v196) v54
    let v198 : Types.std.string.String = method1(v197)
    let v199 : string = "fable_library_rust::String_::fromString(v198)"
    let v200 : string = Fable.Core.RustInterop.emitRustExpr () v199
    let v201 : string = "r#\"" + v74 + "\"#"
    let v202 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v201
    let v203 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v202 v44
    let v204 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v203 v46
    let v205 : string = method18(v200)
    let v206 : string = "v205.as_str()"
    let v207 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v206
    let v208 : string = method21()
    let v209 : string = "v208.as_str()"
    let v210 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v209
    let v211 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v204, v207, v210) v54
    let v212 : Types.std.string.String = method1(v211)
    let v213 : string = "fable_library_rust::String_::fromString(v212)"
    let v214 : string = Fable.Core.RustInterop.emitRustExpr () v213
    let v215 : string = "r#\"" + v89 + "\"#"
    let v216 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v215
    let v217 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v216 v44
    let v218 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v217 v46
    let v219 : string = method18(v214)
    let v220 : string = "v219.as_str()"
    let v221 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v220
    let v222 : string = method22()
    let v223 : string = "v222.as_str()"
    let v224 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v223
    let v225 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v218, v221, v224) v54
    let v226 : Types.std.string.String = method1(v225)
    let v227 : string = "fable_library_rust::String_::fromString(v226)"
    let v228 : string = Fable.Core.RustInterop.emitRustExpr () v227
    let v229 : Types.EmitType<Types.std.string.String> = method10(v228)
    let v230 : string = "e36a62"
    let v231 : string = v230.Substring (0, 2)
    let v232 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v233 : uint8 = Fable.Core.RustInterop.emitRustExpr v231 v232
    let v234 : string = v230.Substring (2, 4)
    let v235 : uint8 = Fable.Core.RustInterop.emitRustExpr v234 v232
    let v236 : string = v230.Substring (4, 6)
    let v237 : uint8 = Fable.Core.RustInterop.emitRustExpr v236 v232
    let v238 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v239 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v170, v233, v235, v237) v238
    let v240 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v239 v38
    let v241 : string = "385779"
    let v242 : string = v241.Substring (0, 2)
    let v243 : uint8 = Fable.Core.RustInterop.emitRustExpr v242 v232
    let v244 : string = v241.Substring (2, 4)
    let v245 : uint8 = Fable.Core.RustInterop.emitRustExpr v244 v232
    let v246 : string = v241.Substring (4, 6)
    let v247 : uint8 = Fable.Core.RustInterop.emitRustExpr v246 v232
    let v248 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v229, v243, v245, v247) v238
    let v249 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v248 v38
    let v250 : string = $"{v104} {v240} {v249}"
    System.Console.WriteLine v250
    ()
and method54 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.RustInterop.emitRustExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method14(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.RustInterop.emitRustExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method10(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method10(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method10(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method15(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method10(v18)
    let v20 : US0 = US0_0
    let v21 : string = "format!(\"{:?}\", $0)"
    let v22 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v20 v21
    let v23 : Types.EmitType<Types.std.string.String> = method16(v22)
    let v24 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v23|]
    let v25 : (Types.EmitType<Types.std.string.String> []) = method12(v24)
    let v26 : Types.EmitType<Types.std.string.String> = method17(v25)
    let v27 : string = "> spi_build_file ()"
    let v28 : Types.EmitType<Types.std.string.String> = method10(v27)
    let v29 : (Types.EmitType<Types.std.string.String> []) = [|v28|]
    let v30 : (Types.EmitType<Types.std.string.String> []) = method12(v29)
    let v31 : string = "$0"
    let v32 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v30 v31
    let v33 : string = "core::ops::Deref::deref(v32)"
    let v34 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v33
    let v35 : obj = v34
    let v36 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v35 v21
    let v37 : Types.EmitType<Types.std.string.String> = v36 |> unbox<Types.EmitType<Types.std.string.String>>
    let v38 : string = "format!(\"{}\", $0)"
    let v39 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v37 v38
    let v40 : string = (v39).ToString ()
    let v41 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v42 : string = "r#\"" + v41 + "\"#"
    let v43 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v42
    let v44 : string = "regex::RegexBuilder::new($0)"
    let v45 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v43 v44
    let v46 : string = "$0.build().unwrap()"
    let v47 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v45 v46
    let v48 : string = method18(v40)
    let v49 : string = "v48.as_str()"
    let v50 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v49
    let v51 : string = method19()
    let v52 : string = "v51.as_str()"
    let v53 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v52
    let v54 : string = "$0.replace_all(&$1, $2).to_string()"
    let v55 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v47, v50, v53) v54
    let v56 : Types.std.string.String = method1(v55)
    let v57 : string = "fable_library_rust::String_::fromString(v56)"
    let v58 : string = Fable.Core.RustInterop.emitRustExpr () v57
    let v59 : string = "\\[\"(.*?)\"\\]"
    let v60 : string = "r#\"" + v59 + "\"#"
    let v61 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v60
    let v62 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v61 v44
    let v63 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v62 v46
    let v64 : string = method18(v58)
    let v65 : string = "v64.as_str()"
    let v66 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v65
    let v67 : string = method20()
    let v68 : string = "v67.as_str()"
    let v69 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v68
    let v70 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v63, v66, v69) v54
    let v71 : Types.std.string.String = method1(v70)
    let v72 : string = "fable_library_rust::String_::fromString(v71)"
    let v73 : string = Fable.Core.RustInterop.emitRustExpr () v72
    let v74 : string = "\\\\\""
    let v75 : string = "r#\"" + v74 + "\"#"
    let v76 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v75
    let v77 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v76 v44
    let v78 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v77 v46
    let v79 : string = method18(v73)
    let v80 : string = "v79.as_str()"
    let v81 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v80
    let v82 : string = method21()
    let v83 : string = "v82.as_str()"
    let v84 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v83
    let v85 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v78, v81, v84) v54
    let v86 : Types.std.string.String = method1(v85)
    let v87 : string = "fable_library_rust::String_::fromString(v86)"
    let v88 : string = Fable.Core.RustInterop.emitRustExpr () v87
    let v89 : string = ", "
    let v90 : string = "r#\"" + v89 + "\"#"
    let v91 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v90
    let v92 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v91 v44
    let v93 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v92 v46
    let v94 : string = method18(v88)
    let v95 : string = "v94.as_str()"
    let v96 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v95
    let v97 : string = method22()
    let v98 : string = "v97.as_str()"
    let v99 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v98
    let v100 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v93, v96, v99) v54
    let v101 : Types.std.string.String = method1(v100)
    let v102 : string = "fable_library_rust::String_::fromString(v101)"
    let v103 : string = Fable.Core.RustInterop.emitRustExpr () v102
    let v104 : Types.EmitType<Types.std.string.String> = method10(v103)
    let v105 : string = "$0"
    let v106 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v1 v105
    let v107 : string = "core::ops::Deref::deref(v106)"
    let v108 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v107
    let v109 : obj = v108
    let v110 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v109 v21
    let v111 : Types.EmitType<Types.std.string.String> = v110 |> unbox<Types.EmitType<Types.std.string.String>>
    let v112 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v111 v38
    let v113 : string = (v112).ToString ()
    let v114 : string = "r#\"" + v41 + "\"#"
    let v115 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v114
    let v116 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v115 v44
    let v117 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v116 v46
    let v118 : string = method18(v113)
    let v119 : string = "v118.as_str()"
    let v120 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v119
    let v121 : string = method19()
    let v122 : string = "v121.as_str()"
    let v123 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v122
    let v124 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v117, v120, v123) v54
    let v125 : Types.std.string.String = method1(v124)
    let v126 : string = "fable_library_rust::String_::fromString(v125)"
    let v127 : string = Fable.Core.RustInterop.emitRustExpr () v126
    let v128 : string = "r#\"" + v59 + "\"#"
    let v129 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v128
    let v130 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v129 v44
    let v131 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v130 v46
    let v132 : string = method18(v127)
    let v133 : string = "v132.as_str()"
    let v134 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v133
    let v135 : string = method20()
    let v136 : string = "v135.as_str()"
    let v137 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v136
    let v138 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v131, v134, v137) v54
    let v139 : Types.std.string.String = method1(v138)
    let v140 : string = "fable_library_rust::String_::fromString(v139)"
    let v141 : string = Fable.Core.RustInterop.emitRustExpr () v140
    let v142 : string = "r#\"" + v74 + "\"#"
    let v143 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v142
    let v144 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v143 v44
    let v145 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v144 v46
    let v146 : string = method18(v141)
    let v147 : string = "v146.as_str()"
    let v148 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v147
    let v149 : string = method21()
    let v150 : string = "v149.as_str()"
    let v151 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v150
    let v152 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v145, v148, v151) v54
    let v153 : Types.std.string.String = method1(v152)
    let v154 : string = "fable_library_rust::String_::fromString(v153)"
    let v155 : string = Fable.Core.RustInterop.emitRustExpr () v154
    let v156 : string = "r#\"" + v89 + "\"#"
    let v157 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v156
    let v158 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v157 v44
    let v159 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v158 v46
    let v160 : string = method18(v155)
    let v161 : string = "v160.as_str()"
    let v162 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v161
    let v163 : string = method22()
    let v164 : string = "v163.as_str()"
    let v165 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v164
    let v166 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v159, v162, v165) v54
    let v167 : Types.std.string.String = method1(v166)
    let v168 : string = "fable_library_rust::String_::fromString(v167)"
    let v169 : string = Fable.Core.RustInterop.emitRustExpr () v168
    let v170 : Types.EmitType<Types.std.string.String> = method10(v169)
    let v171 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v26 v38
    let v172 : string = (v171).ToString ()
    let v173 : string = "r#\"" + v41 + "\"#"
    let v174 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v173
    let v175 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v174 v44
    let v176 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v175 v46
    let v177 : string = method18(v172)
    let v178 : string = "v177.as_str()"
    let v179 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v178
    let v180 : string = method19()
    let v181 : string = "v180.as_str()"
    let v182 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v181
    let v183 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v176, v179, v182) v54
    let v184 : Types.std.string.String = method1(v183)
    let v185 : string = "fable_library_rust::String_::fromString(v184)"
    let v186 : string = Fable.Core.RustInterop.emitRustExpr () v185
    let v187 : string = "r#\"" + v59 + "\"#"
    let v188 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v187
    let v189 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v188 v44
    let v190 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v189 v46
    let v191 : string = method18(v186)
    let v192 : string = "v191.as_str()"
    let v193 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v192
    let v194 : string = method20()
    let v195 : string = "v194.as_str()"
    let v196 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v195
    let v197 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v190, v193, v196) v54
    let v198 : Types.std.string.String = method1(v197)
    let v199 : string = "fable_library_rust::String_::fromString(v198)"
    let v200 : string = Fable.Core.RustInterop.emitRustExpr () v199
    let v201 : string = "r#\"" + v74 + "\"#"
    let v202 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v201
    let v203 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v202 v44
    let v204 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v203 v46
    let v205 : string = method18(v200)
    let v206 : string = "v205.as_str()"
    let v207 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v206
    let v208 : string = method21()
    let v209 : string = "v208.as_str()"
    let v210 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v209
    let v211 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v204, v207, v210) v54
    let v212 : Types.std.string.String = method1(v211)
    let v213 : string = "fable_library_rust::String_::fromString(v212)"
    let v214 : string = Fable.Core.RustInterop.emitRustExpr () v213
    let v215 : string = "r#\"" + v89 + "\"#"
    let v216 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v215
    let v217 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v216 v44
    let v218 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v217 v46
    let v219 : string = method18(v214)
    let v220 : string = "v219.as_str()"
    let v221 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v220
    let v222 : string = method22()
    let v223 : string = "v222.as_str()"
    let v224 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v223
    let v225 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v218, v221, v224) v54
    let v226 : Types.std.string.String = method1(v225)
    let v227 : string = "fable_library_rust::String_::fromString(v226)"
    let v228 : string = Fable.Core.RustInterop.emitRustExpr () v227
    let v229 : Types.EmitType<Types.std.string.String> = method10(v228)
    let v230 : string = "98d5ef"
    let v231 : string = v230.Substring (0, 2)
    let v232 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v233 : uint8 = Fable.Core.RustInterop.emitRustExpr v231 v232
    let v234 : string = v230.Substring (2, 4)
    let v235 : uint8 = Fable.Core.RustInterop.emitRustExpr v234 v232
    let v236 : string = v230.Substring (4, 6)
    let v237 : uint8 = Fable.Core.RustInterop.emitRustExpr v236 v232
    let v238 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v239 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v170, v233, v235, v237) v238
    let v240 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v239 v38
    let v241 : string = "385779"
    let v242 : string = v241.Substring (0, 2)
    let v243 : uint8 = Fable.Core.RustInterop.emitRustExpr v242 v232
    let v244 : string = v241.Substring (2, 4)
    let v245 : uint8 = Fable.Core.RustInterop.emitRustExpr v244 v232
    let v246 : string = v241.Substring (4, 6)
    let v247 : uint8 = Fable.Core.RustInterop.emitRustExpr v246 v232
    let v248 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v229, v243, v245, v247) v238
    let v249 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v248 v38
    let v250 : string = $"{v104} {v240} {v249}"
    System.Console.WriteLine v250
    ()
and method55 () : string =
    let v0 : string = "Fsharp"
    v0
and method56 (v0 : Types.std.time.SystemTime) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "format!(\"{:?}\", $0)"
    let v2 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v0 v1
    let v3 : Types.EmitType<Types.std.string.String> = v2 |> unbox<Types.EmitType<Types.std.string.String>>
    v3
and method57 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.RustInterop.emitRustExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method14(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.RustInterop.emitRustExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method10(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method10(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method10(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method15(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method10(v18)
    let v20 : US0 = US0_0
    let v21 : string = "format!(\"{:?}\", $0)"
    let v22 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v20 v21
    let v23 : Types.EmitType<Types.std.string.String> = method16(v22)
    let v24 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v23|]
    let v25 : (Types.EmitType<Types.std.string.String> []) = method12(v24)
    let v26 : Types.EmitType<Types.std.string.String> = method17(v25)
    let v27 : string = "> wait_file_change ()"
    let v28 : Types.EmitType<Types.std.string.String> = method10(v27)
    let v29 : (Types.EmitType<Types.std.string.String> []) = [|v28|]
    let v30 : (Types.EmitType<Types.std.string.String> []) = method12(v29)
    let v31 : string = "$0"
    let v32 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v30 v31
    let v33 : string = "core::ops::Deref::deref(v32)"
    let v34 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v33
    let v35 : obj = v34
    let v36 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v35 v21
    let v37 : Types.EmitType<Types.std.string.String> = v36 |> unbox<Types.EmitType<Types.std.string.String>>
    let v38 : string = "format!(\"{}\", $0)"
    let v39 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v37 v38
    let v40 : string = (v39).ToString ()
    let v41 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v42 : string = "r#\"" + v41 + "\"#"
    let v43 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v42
    let v44 : string = "regex::RegexBuilder::new($0)"
    let v45 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v43 v44
    let v46 : string = "$0.build().unwrap()"
    let v47 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v45 v46
    let v48 : string = method18(v40)
    let v49 : string = "v48.as_str()"
    let v50 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v49
    let v51 : string = method19()
    let v52 : string = "v51.as_str()"
    let v53 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v52
    let v54 : string = "$0.replace_all(&$1, $2).to_string()"
    let v55 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v47, v50, v53) v54
    let v56 : Types.std.string.String = method1(v55)
    let v57 : string = "fable_library_rust::String_::fromString(v56)"
    let v58 : string = Fable.Core.RustInterop.emitRustExpr () v57
    let v59 : string = "\\[\"(.*?)\"\\]"
    let v60 : string = "r#\"" + v59 + "\"#"
    let v61 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v60
    let v62 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v61 v44
    let v63 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v62 v46
    let v64 : string = method18(v58)
    let v65 : string = "v64.as_str()"
    let v66 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v65
    let v67 : string = method20()
    let v68 : string = "v67.as_str()"
    let v69 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v68
    let v70 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v63, v66, v69) v54
    let v71 : Types.std.string.String = method1(v70)
    let v72 : string = "fable_library_rust::String_::fromString(v71)"
    let v73 : string = Fable.Core.RustInterop.emitRustExpr () v72
    let v74 : string = "\\\\\""
    let v75 : string = "r#\"" + v74 + "\"#"
    let v76 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v75
    let v77 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v76 v44
    let v78 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v77 v46
    let v79 : string = method18(v73)
    let v80 : string = "v79.as_str()"
    let v81 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v80
    let v82 : string = method21()
    let v83 : string = "v82.as_str()"
    let v84 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v83
    let v85 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v78, v81, v84) v54
    let v86 : Types.std.string.String = method1(v85)
    let v87 : string = "fable_library_rust::String_::fromString(v86)"
    let v88 : string = Fable.Core.RustInterop.emitRustExpr () v87
    let v89 : string = ", "
    let v90 : string = "r#\"" + v89 + "\"#"
    let v91 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v90
    let v92 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v91 v44
    let v93 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v92 v46
    let v94 : string = method18(v88)
    let v95 : string = "v94.as_str()"
    let v96 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v95
    let v97 : string = method22()
    let v98 : string = "v97.as_str()"
    let v99 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v98
    let v100 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v93, v96, v99) v54
    let v101 : Types.std.string.String = method1(v100)
    let v102 : string = "fable_library_rust::String_::fromString(v101)"
    let v103 : string = Fable.Core.RustInterop.emitRustExpr () v102
    let v104 : Types.EmitType<Types.std.string.String> = method10(v103)
    let v105 : string = "$0"
    let v106 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v1 v105
    let v107 : string = "core::ops::Deref::deref(v106)"
    let v108 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v107
    let v109 : obj = v108
    let v110 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v109 v21
    let v111 : Types.EmitType<Types.std.string.String> = v110 |> unbox<Types.EmitType<Types.std.string.String>>
    let v112 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v111 v38
    let v113 : string = (v112).ToString ()
    let v114 : string = "r#\"" + v41 + "\"#"
    let v115 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v114
    let v116 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v115 v44
    let v117 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v116 v46
    let v118 : string = method18(v113)
    let v119 : string = "v118.as_str()"
    let v120 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v119
    let v121 : string = method19()
    let v122 : string = "v121.as_str()"
    let v123 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v122
    let v124 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v117, v120, v123) v54
    let v125 : Types.std.string.String = method1(v124)
    let v126 : string = "fable_library_rust::String_::fromString(v125)"
    let v127 : string = Fable.Core.RustInterop.emitRustExpr () v126
    let v128 : string = "r#\"" + v59 + "\"#"
    let v129 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v128
    let v130 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v129 v44
    let v131 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v130 v46
    let v132 : string = method18(v127)
    let v133 : string = "v132.as_str()"
    let v134 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v133
    let v135 : string = method20()
    let v136 : string = "v135.as_str()"
    let v137 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v136
    let v138 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v131, v134, v137) v54
    let v139 : Types.std.string.String = method1(v138)
    let v140 : string = "fable_library_rust::String_::fromString(v139)"
    let v141 : string = Fable.Core.RustInterop.emitRustExpr () v140
    let v142 : string = "r#\"" + v74 + "\"#"
    let v143 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v142
    let v144 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v143 v44
    let v145 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v144 v46
    let v146 : string = method18(v141)
    let v147 : string = "v146.as_str()"
    let v148 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v147
    let v149 : string = method21()
    let v150 : string = "v149.as_str()"
    let v151 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v150
    let v152 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v145, v148, v151) v54
    let v153 : Types.std.string.String = method1(v152)
    let v154 : string = "fable_library_rust::String_::fromString(v153)"
    let v155 : string = Fable.Core.RustInterop.emitRustExpr () v154
    let v156 : string = "r#\"" + v89 + "\"#"
    let v157 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v156
    let v158 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v157 v44
    let v159 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v158 v46
    let v160 : string = method18(v155)
    let v161 : string = "v160.as_str()"
    let v162 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v161
    let v163 : string = method22()
    let v164 : string = "v163.as_str()"
    let v165 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v164
    let v166 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v159, v162, v165) v54
    let v167 : Types.std.string.String = method1(v166)
    let v168 : string = "fable_library_rust::String_::fromString(v167)"
    let v169 : string = Fable.Core.RustInterop.emitRustExpr () v168
    let v170 : Types.EmitType<Types.std.string.String> = method10(v169)
    let v171 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v26 v38
    let v172 : string = (v171).ToString ()
    let v173 : string = "r#\"" + v41 + "\"#"
    let v174 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v173
    let v175 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v174 v44
    let v176 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v175 v46
    let v177 : string = method18(v172)
    let v178 : string = "v177.as_str()"
    let v179 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v178
    let v180 : string = method19()
    let v181 : string = "v180.as_str()"
    let v182 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v181
    let v183 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v176, v179, v182) v54
    let v184 : Types.std.string.String = method1(v183)
    let v185 : string = "fable_library_rust::String_::fromString(v184)"
    let v186 : string = Fable.Core.RustInterop.emitRustExpr () v185
    let v187 : string = "r#\"" + v59 + "\"#"
    let v188 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v187
    let v189 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v188 v44
    let v190 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v189 v46
    let v191 : string = method18(v186)
    let v192 : string = "v191.as_str()"
    let v193 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v192
    let v194 : string = method20()
    let v195 : string = "v194.as_str()"
    let v196 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v195
    let v197 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v190, v193, v196) v54
    let v198 : Types.std.string.String = method1(v197)
    let v199 : string = "fable_library_rust::String_::fromString(v198)"
    let v200 : string = Fable.Core.RustInterop.emitRustExpr () v199
    let v201 : string = "r#\"" + v74 + "\"#"
    let v202 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v201
    let v203 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v202 v44
    let v204 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v203 v46
    let v205 : string = method18(v200)
    let v206 : string = "v205.as_str()"
    let v207 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v206
    let v208 : string = method21()
    let v209 : string = "v208.as_str()"
    let v210 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v209
    let v211 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v204, v207, v210) v54
    let v212 : Types.std.string.String = method1(v211)
    let v213 : string = "fable_library_rust::String_::fromString(v212)"
    let v214 : string = Fable.Core.RustInterop.emitRustExpr () v213
    let v215 : string = "r#\"" + v89 + "\"#"
    let v216 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v215
    let v217 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v216 v44
    let v218 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v217 v46
    let v219 : string = method18(v214)
    let v220 : string = "v219.as_str()"
    let v221 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v220
    let v222 : string = method22()
    let v223 : string = "v222.as_str()"
    let v224 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v223
    let v225 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v218, v221, v224) v54
    let v226 : Types.std.string.String = method1(v225)
    let v227 : string = "fable_library_rust::String_::fromString(v226)"
    let v228 : string = Fable.Core.RustInterop.emitRustExpr () v227
    let v229 : Types.EmitType<Types.std.string.String> = method10(v228)
    let v230 : string = "387957"
    let v231 : string = v230.Substring (0, 2)
    let v232 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v233 : uint8 = Fable.Core.RustInterop.emitRustExpr v231 v232
    let v234 : string = v230.Substring (2, 4)
    let v235 : uint8 = Fable.Core.RustInterop.emitRustExpr v234 v232
    let v236 : string = v230.Substring (4, 6)
    let v237 : uint8 = Fable.Core.RustInterop.emitRustExpr v236 v232
    let v238 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v239 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v170, v233, v235, v237) v238
    let v240 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v239 v38
    let v241 : string = "385779"
    let v242 : string = v241.Substring (0, 2)
    let v243 : uint8 = Fable.Core.RustInterop.emitRustExpr v242 v232
    let v244 : string = v241.Substring (2, 4)
    let v245 : uint8 = Fable.Core.RustInterop.emitRustExpr v244 v232
    let v246 : string = v241.Substring (4, 6)
    let v247 : uint8 = Fable.Core.RustInterop.emitRustExpr v246 v232
    let v248 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v229, v243, v245, v247) v238
    let v249 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v248 v38
    let v250 : string = $"{v104} {v240} {v249}"
    System.Console.WriteLine v250
    ()
and method58 (v0 : int32, v1 : Mut1) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and method59 () : uint64 =
    60UL
and method61 (v0 : Types.Ref<Types.Str>) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "format!(\"{:?}\", $0)"
    let v2 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v0 v1
    let v3 : Types.EmitType<Types.std.string.String> = v2 |> unbox<Types.EmitType<Types.std.string.String>>
    v3
and method60 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.RustInterop.emitRustExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method14(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.RustInterop.emitRustExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method10(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method10(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method10(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method15(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method10(v18)
    let v20 : US0 = US0_0
    let v21 : string = "format!(\"{:?}\", $0)"
    let v22 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v20 v21
    let v23 : Types.EmitType<Types.std.string.String> = method16(v22)
    let v24 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v23|]
    let v25 : (Types.EmitType<Types.std.string.String> []) = method12(v24)
    let v26 : Types.EmitType<Types.std.string.String> = method17(v25)
    let v27 : string = "> app ()"
    let v28 : string = "r#\"" + v27 + "\"#"
    let v29 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v28
    let v30 : Types.EmitType<Types.std.string.String> = method61(v29)
    let v31 : (Types.EmitType<Types.std.string.String> []) = [|v30|]
    let v32 : (Types.EmitType<Types.std.string.String> []) = method12(v31)
    let v33 : string = "$0"
    let v34 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v32 v33
    let v35 : string = "core::ops::Deref::deref(v34)"
    let v36 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v35
    let v37 : obj = v36
    let v38 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v37 v21
    let v39 : Types.EmitType<Types.std.string.String> = v38 |> unbox<Types.EmitType<Types.std.string.String>>
    let v40 : string = "format!(\"{}\", $0)"
    let v41 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v39 v40
    let v42 : string = (v41).ToString ()
    let v43 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v44 : string = "r#\"" + v43 + "\"#"
    let v45 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v44
    let v46 : string = "regex::RegexBuilder::new($0)"
    let v47 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v45 v46
    let v48 : string = "$0.build().unwrap()"
    let v49 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v47 v48
    let v50 : string = method18(v42)
    let v51 : string = "v50.as_str()"
    let v52 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v51
    let v53 : string = method19()
    let v54 : string = "v53.as_str()"
    let v55 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v54
    let v56 : string = "$0.replace_all(&$1, $2).to_string()"
    let v57 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v49, v52, v55) v56
    let v58 : Types.std.string.String = method1(v57)
    let v59 : string = "fable_library_rust::String_::fromString(v58)"
    let v60 : string = Fable.Core.RustInterop.emitRustExpr () v59
    let v61 : string = "\\[\"(.*?)\"\\]"
    let v62 : string = "r#\"" + v61 + "\"#"
    let v63 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v62
    let v64 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v63 v46
    let v65 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v64 v48
    let v66 : string = method18(v60)
    let v67 : string = "v66.as_str()"
    let v68 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v67
    let v69 : string = method20()
    let v70 : string = "v69.as_str()"
    let v71 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v70
    let v72 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v65, v68, v71) v56
    let v73 : Types.std.string.String = method1(v72)
    let v74 : string = "fable_library_rust::String_::fromString(v73)"
    let v75 : string = Fable.Core.RustInterop.emitRustExpr () v74
    let v76 : string = "\\\\\""
    let v77 : string = "r#\"" + v76 + "\"#"
    let v78 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v77
    let v79 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v78 v46
    let v80 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v79 v48
    let v81 : string = method18(v75)
    let v82 : string = "v81.as_str()"
    let v83 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v82
    let v84 : string = method21()
    let v85 : string = "v84.as_str()"
    let v86 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v85
    let v87 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v80, v83, v86) v56
    let v88 : Types.std.string.String = method1(v87)
    let v89 : string = "fable_library_rust::String_::fromString(v88)"
    let v90 : string = Fable.Core.RustInterop.emitRustExpr () v89
    let v91 : string = ", "
    let v92 : string = "r#\"" + v91 + "\"#"
    let v93 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v92
    let v94 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v93 v46
    let v95 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v94 v48
    let v96 : string = method18(v90)
    let v97 : string = "v96.as_str()"
    let v98 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v97
    let v99 : string = method22()
    let v100 : string = "v99.as_str()"
    let v101 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v100
    let v102 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v95, v98, v101) v56
    let v103 : Types.std.string.String = method1(v102)
    let v104 : string = "fable_library_rust::String_::fromString(v103)"
    let v105 : string = Fable.Core.RustInterop.emitRustExpr () v104
    let v106 : Types.EmitType<Types.std.string.String> = method10(v105)
    let v107 : string = "$0"
    let v108 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v1 v107
    let v109 : string = "core::ops::Deref::deref(v108)"
    let v110 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v109
    let v111 : obj = v110
    let v112 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v111 v21
    let v113 : Types.EmitType<Types.std.string.String> = v112 |> unbox<Types.EmitType<Types.std.string.String>>
    let v114 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v113 v40
    let v115 : string = (v114).ToString ()
    let v116 : string = "r#\"" + v43 + "\"#"
    let v117 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v116
    let v118 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v117 v46
    let v119 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v118 v48
    let v120 : string = method18(v115)
    let v121 : string = "v120.as_str()"
    let v122 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v121
    let v123 : string = method19()
    let v124 : string = "v123.as_str()"
    let v125 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v124
    let v126 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v119, v122, v125) v56
    let v127 : Types.std.string.String = method1(v126)
    let v128 : string = "fable_library_rust::String_::fromString(v127)"
    let v129 : string = Fable.Core.RustInterop.emitRustExpr () v128
    let v130 : string = "r#\"" + v61 + "\"#"
    let v131 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v130
    let v132 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v131 v46
    let v133 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v132 v48
    let v134 : string = method18(v129)
    let v135 : string = "v134.as_str()"
    let v136 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v135
    let v137 : string = method20()
    let v138 : string = "v137.as_str()"
    let v139 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v138
    let v140 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v133, v136, v139) v56
    let v141 : Types.std.string.String = method1(v140)
    let v142 : string = "fable_library_rust::String_::fromString(v141)"
    let v143 : string = Fable.Core.RustInterop.emitRustExpr () v142
    let v144 : string = "r#\"" + v76 + "\"#"
    let v145 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v144
    let v146 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v145 v46
    let v147 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v146 v48
    let v148 : string = method18(v143)
    let v149 : string = "v148.as_str()"
    let v150 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v149
    let v151 : string = method21()
    let v152 : string = "v151.as_str()"
    let v153 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v152
    let v154 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v147, v150, v153) v56
    let v155 : Types.std.string.String = method1(v154)
    let v156 : string = "fable_library_rust::String_::fromString(v155)"
    let v157 : string = Fable.Core.RustInterop.emitRustExpr () v156
    let v158 : string = "r#\"" + v91 + "\"#"
    let v159 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v158
    let v160 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v159 v46
    let v161 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v160 v48
    let v162 : string = method18(v157)
    let v163 : string = "v162.as_str()"
    let v164 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v163
    let v165 : string = method22()
    let v166 : string = "v165.as_str()"
    let v167 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v166
    let v168 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v161, v164, v167) v56
    let v169 : Types.std.string.String = method1(v168)
    let v170 : string = "fable_library_rust::String_::fromString(v169)"
    let v171 : string = Fable.Core.RustInterop.emitRustExpr () v170
    let v172 : Types.EmitType<Types.std.string.String> = method10(v171)
    let v173 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v26 v40
    let v174 : string = (v173).ToString ()
    let v175 : string = "r#\"" + v43 + "\"#"
    let v176 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v175
    let v177 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v176 v46
    let v178 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v177 v48
    let v179 : string = method18(v174)
    let v180 : string = "v179.as_str()"
    let v181 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v180
    let v182 : string = method19()
    let v183 : string = "v182.as_str()"
    let v184 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v183
    let v185 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v178, v181, v184) v56
    let v186 : Types.std.string.String = method1(v185)
    let v187 : string = "fable_library_rust::String_::fromString(v186)"
    let v188 : string = Fable.Core.RustInterop.emitRustExpr () v187
    let v189 : string = "r#\"" + v61 + "\"#"
    let v190 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v189
    let v191 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v190 v46
    let v192 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v191 v48
    let v193 : string = method18(v188)
    let v194 : string = "v193.as_str()"
    let v195 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v194
    let v196 : string = method20()
    let v197 : string = "v196.as_str()"
    let v198 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v197
    let v199 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v192, v195, v198) v56
    let v200 : Types.std.string.String = method1(v199)
    let v201 : string = "fable_library_rust::String_::fromString(v200)"
    let v202 : string = Fable.Core.RustInterop.emitRustExpr () v201
    let v203 : string = "r#\"" + v76 + "\"#"
    let v204 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v203
    let v205 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v204 v46
    let v206 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v205 v48
    let v207 : string = method18(v202)
    let v208 : string = "v207.as_str()"
    let v209 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v208
    let v210 : string = method21()
    let v211 : string = "v210.as_str()"
    let v212 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v211
    let v213 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v206, v209, v212) v56
    let v214 : Types.std.string.String = method1(v213)
    let v215 : string = "fable_library_rust::String_::fromString(v214)"
    let v216 : string = Fable.Core.RustInterop.emitRustExpr () v215
    let v217 : string = "r#\"" + v91 + "\"#"
    let v218 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v217
    let v219 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v218 v46
    let v220 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v219 v48
    let v221 : string = method18(v216)
    let v222 : string = "v221.as_str()"
    let v223 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v222
    let v224 : string = method22()
    let v225 : string = "v224.as_str()"
    let v226 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v225
    let v227 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v220, v223, v226) v56
    let v228 : Types.std.string.String = method1(v227)
    let v229 : string = "fable_library_rust::String_::fromString(v228)"
    let v230 : string = Fable.Core.RustInterop.emitRustExpr () v229
    let v231 : Types.EmitType<Types.std.string.String> = method10(v230)
    let v232 : string = "387958"
    let v233 : string = v232.Substring (0, 2)
    let v234 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v235 : uint8 = Fable.Core.RustInterop.emitRustExpr v233 v234
    let v236 : string = v232.Substring (2, 4)
    let v237 : uint8 = Fable.Core.RustInterop.emitRustExpr v236 v234
    let v238 : string = v232.Substring (4, 6)
    let v239 : uint8 = Fable.Core.RustInterop.emitRustExpr v238 v234
    let v240 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v241 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v172, v235, v237, v239) v240
    let v242 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v241 v40
    let v243 : string = "385779"
    let v244 : string = v243.Substring (0, 2)
    let v245 : uint8 = Fable.Core.RustInterop.emitRustExpr v244 v234
    let v246 : string = v243.Substring (2, 4)
    let v247 : uint8 = Fable.Core.RustInterop.emitRustExpr v246 v234
    let v248 : string = v243.Substring (4, 6)
    let v249 : uint8 = Fable.Core.RustInterop.emitRustExpr v248 v234
    let v250 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v231, v245, v247, v249) v240
    let v251 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v250 v40
    let v252 : string = $"{v106} {v242} {v251}"
    System.Console.WriteLine v252
    ()
and closure0 () () : int32 =
    let v0 : string = "cli2"
    let v1 : string = "r#\"" + v0 + "\"#"
    let v2 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v1
    let v3 : string = "String::from(core::ops::Deref::deref($0))"
    let v4 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v2 v3
    let v5 : Option<Types.std.string.String> = Some v4
    let v6 : Option<Types.std.string.String> = method0(v5)
    let v7 : string = "v6.map(&*$0)"
    let v8 : (Types.std.string.String -> string) = closure1()
    let v9 : Option<string> = Fable.Core.RustInterop.emitRustExpr v8 v7
    let v10 : string = "format!(\"{:?}\", $0)"
    let v11 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v9 v10
    System.Console.WriteLine v11
    let struct (v12 : string, v13 : string, v14 : string, v15 : bool) = method2()
    let v16 : string = "chrono::Utc::now()"
    let v17 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
    let v18 : string = "($0).timestamp()"
    let v19 : int64 = Fable.Core.RustInterop.emitRustExpr v17 v18
    let v20 : string = "app1"
    let v21 : string = "r#\"" + v20 + "\"#"
    let v22 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v21
    let v23 : string = "clap::Command::new(v22)"
    let v24 : string = ".version(env!(\"CARGO_PKG_VERSION\"))"
    let v25 : string = v23 + v24
    let v26 : string = ".propagate_version(true)"
    let v27 : string = v25 + v26
    let v28 : string = ".subcommand_required(false)"
    let v29 : string = v27 + v28
    let v30 : string = ".about(\"command about\")"
    let v31 : string = v29 + v30
    let v32 : string = ".arg_required_else_help(true)"
    let v33 : string = v31 + v32
    let v34 : Types.clap.builder.Command = Fable.Core.RustInterop.emitRustExpr () v33
    let v35 : string = "PostFsxRsBuild"
    let v36 : string = "r#\"" + v35 + "\"#"
    let v37 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v36
    let v38 : string = "clap::Command::new(v37)"
    let v39 : string = v38 + v24
    let v40 : string = v39 + v26
    let v41 : string = v40 + v28
    let v42 : string = v41 + v30
    let v43 : string = v42 + v32
    let v44 : Types.clap.builder.Command = Fable.Core.RustInterop.emitRustExpr () v43
    let v45 : string = "rs-path"
    let v46 : string = "r#\"" + v45 + "\"#"
    let v47 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v46
    let v48 : string = "clap::Arg::new(v47)"
    let v49 : Types.clap.builder.Arg = Fable.Core.RustInterop.emitRustExpr () v48
    let v50 : string = "v44.arg(v49)"
    let v51 : Types.clap.builder.Command = Fable.Core.RustInterop.emitRustExpr () v50
    let v52 : string = "v34.subcommand(v51)"
    let v53 : Types.clap.builder.Command = Fable.Core.RustInterop.emitRustExpr () v52
    let v54 : string = "SpiFsxBuild"
    let v55 : string = "r#\"" + v54 + "\"#"
    let v56 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v55
    let v57 : string = "clap::Command::new(v56)"
    let v58 : string = v57 + v24
    let v59 : string = v58 + v26
    let v60 : string = v59 + v28
    let v61 : string = v60 + v30
    let v62 : string = v61 + v32
    let v63 : Types.clap.builder.Command = Fable.Core.RustInterop.emitRustExpr () v62
    let v64 : string = "spi-path"
    let v65 : string = "r#\"" + v64 + "\"#"
    let v66 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v65
    let v67 : string = "clap::Arg::new(v66)"
    let v68 : Types.clap.builder.Arg = Fable.Core.RustInterop.emitRustExpr () v67
    let v69 : string = "v63.arg(v68)"
    let v70 : Types.clap.builder.Command = Fable.Core.RustInterop.emitRustExpr () v69
    let v71 : string = "fsx-path"
    let v72 : string = "r#\"" + v71 + "\"#"
    let v73 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v72
    let v74 : string = "clap::Arg::new(v73)"
    let v75 : Types.clap.builder.Arg = Fable.Core.RustInterop.emitRustExpr () v74
    let v76 : string = "v70.arg(v75)"
    let v77 : Types.clap.builder.Command = Fable.Core.RustInterop.emitRustExpr () v76
    let v78 : string = "v53.subcommand(v77)"
    let v79 : Types.clap.builder.Command = Fable.Core.RustInterop.emitRustExpr () v78
    let v80 : string = "v79.get_matches()"
    let v81 : Types.clap.parser.ArgMatches = Fable.Core.RustInterop.emitRustExpr () v80
    let v82 : string = "std::sync::Arc::new(v81)"
    let v83 : Types.std.sync.Arc<Types.clap.parser.ArgMatches> = Fable.Core.RustInterop.emitRustExpr () v82
    let v84 : string = "v83.subcommand().map(|(name, matches)| (name, std::sync::Arc::new(matches.clone())))"
    let v85 : Option<struct (Types.Ref<Types.Str> * Types.std.sync.Arc<Types.clap.parser.ArgMatches>)> = Fable.Core.RustInterop.emitRustExpr () v84
    let v86 : string = "v85.unwrap()"
    let struct (v87 : Types.Ref<Types.Str>, v88 : Types.std.sync.Arc<Types.clap.parser.ArgMatches>) = Fable.Core.RustInterop.emitRustExpr () v86
    let v89 : obj = struct (v87, v88)
    let v90 : string = "v89.0"
    let v91 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v90
    let v92 : string = "std::sync::Arc::clone(&v89.1)"
    let v93 : Types.std.sync.Arc<Types.clap.parser.ArgMatches> = Fable.Core.RustInterop.emitRustExpr () v92
    let struct (v94 : Types.Ref<Types.Str>, v95 : Types.Ref<Types.clap.parser.ArgMatches>) = v89
    let v96 : string = "fable_library_rust::String_::string(v94)"
    let v97 : string = Fable.Core.RustInterop.emitRustExpr () v96
    let v98 : bool = "PostFsxRsBuild" = v97
    if v98 then
        let v99 : string = method3()
        let v100 : string = "v99.as_str()"
        let v101 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v100
        let v102 : string = "v95.get_one::<String>(v101)"
        let v103 : Option<Types.StaticRef<Types.std.string.String>> = Fable.Core.RustInterop.emitRustExpr () v102
        let v104 : Option<Types.StaticRef<Types.std.string.String>> = method4(v103)
        let v105 : string = "v104.map(&*$0)"
        let v106 : (Types.StaticRef<Types.std.string.String> -> string) = closure2()
        let v107 : Option<string> = Fable.Core.RustInterop.emitRustExpr v106 v105
        let v108 : string = "get_clap_one: "
        let v109 : string = v108 + v45
        let v110 : string = "v107.unwrap_or(v109)"
        let v111 : string = Fable.Core.RustInterop.emitRustExpr () v110
        let v112 : string = method6(v111)
        let v113 : string = "fable_library_rust::String_::LrcStr::as_str($0)"
        let v114 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr v112 v113
        let v115 : string = "String::from(core::ops::Deref::deref($0))"
        let v116 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v114 v115
        let v117 : Types.std.string.String = method8(v116)
        let v118 : string = "std::path::PathBuf::from(v117)"
        let v119 : Types.std.path.PathBuf = Fable.Core.RustInterop.emitRustExpr () v118
        let v120 : Types.std.path.PathBuf = method9(v119)
        let v121 : string = "v120.canonicalize()"
        let v122 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.RustInterop.emitRustExpr () v121
        let v123 : string = "v122.unwrap()"
        let v124 : Types.std.path.PathBuf = Fable.Core.RustInterop.emitRustExpr () v123
        let struct (v125 : string, v126 : string, v127 : string, v128 : bool) = method2()
        let v129 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
        let v130 : int64 = Fable.Core.RustInterop.emitRustExpr v129 v18
        let v131 : string = "rs_path"
        let v132 : Types.EmitType<Types.std.string.String> = method10(v131)
        let v133 : Types.EmitType<Types.std.string.String> = method11(v124)
        let v134 : (Types.EmitType<Types.std.string.String> []) = [|v132; v133|]
        let v135 : (Types.EmitType<Types.std.string.String> []) = method12(v134)
        method13(v130, v135)
        let struct (v136 : string, v137 : string, v138 : string, v139 : bool) = method2()
        let v140 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
        let v141 : int64 = Fable.Core.RustInterop.emitRustExpr v140 v18
        let v142 : Types.std.path.PathBuf = method9(v124)
        let v143 : string = "v142.canonicalize()"
        let v144 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.RustInterop.emitRustExpr () v143
        let v145 : string = "v144.unwrap()"
        let v146 : Types.std.path.PathBuf = Fable.Core.RustInterop.emitRustExpr () v145
        let v147 : string = "path_clean"
        let v148 : Types.EmitType<Types.std.string.String> = method10(v147)
        let v149 : string = "format!(\"{}\", v146.display())"
        let v150 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v149
        let v151 : Types.std.string.String = method1(v150)
        let v152 : string = "fable_library_rust::String_::fromString(v151)"
        let v153 : string = Fable.Core.RustInterop.emitRustExpr () v152
        let v154 : Types.EmitType<Types.std.string.String> = method10(v153)
        let v155 : (Types.EmitType<Types.std.string.String> []) = [|v148; v154|]
        let v156 : (Types.EmitType<Types.std.string.String> []) = method12(v155)
        method23(v141, v156)
        let v157 : string = "std::fs::File::open(v146)"
        let v158 : Result<Types.std.fs.File, Types.std.io.Error> = Fable.Core.RustInterop.emitRustExpr () v157
        let v159 : string = "v158.unwrap()"
        let v160 : Types.std.fs.File = Fable.Core.RustInterop.emitRustExpr () v159
        let v161 : string = "std::cell::RefCell::new(linereader::LineReader::new(v160))"
        let v162 : Types.std.cell.RefCell<Types.linereader.LineReader<Types.std.fs.File>> = Fable.Core.RustInterop.emitRustExpr () v161
        let v163 : string = "reader"
        let v164 : Types.EmitType<Types.std.string.String> = method10(v163)
        let v165 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v162 v10
        let v166 : Types.EmitType<Types.std.string.String> = method16(v165)
        let v167 : (Types.EmitType<Types.std.string.String> []) = [|v164; v166|]
        let v168 : (Types.EmitType<Types.std.string.String> []) = method12(v167)
        method23(v141, v168)
        let v169 : UH0 = UH0_1
        let v170 : Mut0 = {l0 = v169} : Mut0
        let v171 : (Types.Vec<uint8> -> Result<bool, Types.std.io.Error>) = method24(v141, v170)
        let v172 : string = "v162.borrow_mut().for_each(move |x| v171(x.to_vec()))"
        let v173 : Result<unit, Types.std.io.Error> = Fable.Core.RustInterop.emitRustExpr () v172
        let v174 : string = "v173.unwrap()"
        Fable.Core.RustInterop.emitRustExpr () v174
        let v175 : UH0 = v170.l0
        let v176 : UH0 = UH0_1
        let v177 : UH0 = method27(v175, v176)
        let v178 : UH1 = UH1_1
        let v179 : UH1 = method28(v177, v178)
        let v180 : string = "lines len"
        let v181 : Types.EmitType<Types.std.string.String> = method10(v180)
        let v182 : int32 = 0
        let v183 : int32 = method29(v179, v182)
        let v184 : Types.EmitType<Types.std.string.String> = method25(v183)
        let v185 : (Types.EmitType<Types.std.string.String> []) = [|v181; v184|]
        let v186 : (Types.EmitType<Types.std.string.String> []) = method12(v185)
        method23(v141, v186)
        let v187 : int32 = 0
        let v188 : UH1 = UH1_1
        let struct (v189 : int32, v190 : UH1) = method30(v130, v179, v187, v188)
        let v191 : UH1 = UH1_1
        let v192 : UH1 = method33(v190, v191)
        let v193 : string = ""
        let v194 : string = method34(v192, v193)
        let v195 : string = "text_len"
        let v196 : Types.EmitType<Types.std.string.String> = method10(v195)
        let v197 : string = "v194.len()"
        let v198 : obj = Fable.Core.RustInterop.emitRustExpr () v197
        let v199 : string = "v198.try_into().unwrap()"
        let v200 : int32 = Fable.Core.RustInterop.emitRustExpr () v199
        let v201 : Types.EmitType<Types.std.string.String> = method25(v200)
        let v202 : (Types.EmitType<Types.std.string.String> []) = [|v196; v201|]
        let v203 : (Types.EmitType<Types.std.string.String> []) = method12(v202)
        method13(v130, v203)
        let v204 : string = method18(v194)
        let v205 : string = "v204.as_str()"
        let v206 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v205
        let v207 : string = "std::fs::write(v124, v206)"
        let v208 : Result<unit, Types.std.io.Error> = Fable.Core.RustInterop.emitRustExpr () v207
        let v209 : string = "v208.unwrap()"
        Fable.Core.RustInterop.emitRustExpr () v209
        let v210 : string = "> fs_write rs_path_clean text; ok"
        let v211 : Types.EmitType<Types.std.string.String> = method10(v210)
        let v212 : (Types.EmitType<Types.std.string.String> []) = [|v211|]
        let v213 : (Types.EmitType<Types.std.string.String> []) = method12(v212)
        method13(v130, v213)
    else
        let v214 : bool = "SpiFsxBuild" = v97
        if v214 then
            let v215 : string = method35()
            let v216 : string = "v215.as_str()"
            let v217 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v216
            let v218 : string = "v95.get_one::<String>(v217)"
            let v219 : Option<Types.StaticRef<Types.std.string.String>> = Fable.Core.RustInterop.emitRustExpr () v218
            let v220 : Option<Types.StaticRef<Types.std.string.String>> = method4(v219)
            let v221 : string = "v220.map(&*$0)"
            let v222 : (Types.StaticRef<Types.std.string.String> -> string) = closure4()
            let v223 : Option<string> = Fable.Core.RustInterop.emitRustExpr v222 v221
            let v224 : string = "get_clap_one: "
            let v225 : string = v224 + v64
            let v226 : string = "v223.unwrap_or(v225)"
            let v227 : string = Fable.Core.RustInterop.emitRustExpr () v226
            let v228 : string = method6(v227)
            let v229 : string = "fable_library_rust::String_::LrcStr::as_str($0)"
            let v230 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr v228 v229
            let v231 : string = "String::from(core::ops::Deref::deref($0))"
            let v232 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v230 v231
            let v233 : Types.std.string.String = method8(v232)
            let v234 : string = "std::path::PathBuf::from(v233)"
            let v235 : Types.std.path.PathBuf = Fable.Core.RustInterop.emitRustExpr () v234
            let v236 : Types.std.path.PathBuf = method9(v235)
            let v237 : string = "v236.canonicalize()"
            let v238 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.RustInterop.emitRustExpr () v237
            let v239 : string = "v238.unwrap()"
            let v240 : Types.std.path.PathBuf = Fable.Core.RustInterop.emitRustExpr () v239
            let v241 : string = method36()
            let v242 : string = "v241.as_str()"
            let v243 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v242
            let v244 : string = "v95.get_one::<String>(v243)"
            let v245 : Option<Types.StaticRef<Types.std.string.String>> = Fable.Core.RustInterop.emitRustExpr () v244
            let v246 : Option<Types.StaticRef<Types.std.string.String>> = method4(v245)
            let v247 : string = "v246.map(&*$0)"
            let v248 : (Types.StaticRef<Types.std.string.String> -> Types.std.path.PathBuf) = closure5()
            let v249 : Option<Types.std.path.PathBuf> = Fable.Core.RustInterop.emitRustExpr v248 v247
            let struct (v250 : string, v251 : string, v252 : string, v253 : bool) = method2()
            let v254 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
            let v255 : int64 = Fable.Core.RustInterop.emitRustExpr v254 v18
            let v256 : string = "pwd"
            let v257 : Types.EmitType<Types.std.string.String> = method10(v256)
            let v258 : string = "std::env::current_dir()"
            let v259 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.RustInterop.emitRustExpr () v258
            let v260 : string = "v259.unwrap()"
            let v261 : Types.std.path.PathBuf = Fable.Core.RustInterop.emitRustExpr () v260
            let v262 : Types.std.path.PathBuf = method9(v261)
            let v263 : string = "v262.canonicalize()"
            let v264 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.RustInterop.emitRustExpr () v263
            let v265 : string = "v264.unwrap()"
            let v266 : Types.std.path.PathBuf = Fable.Core.RustInterop.emitRustExpr () v265
            let v267 : string = "format!(\"{}\", v266.display())"
            let v268 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v267
            let v269 : Types.std.string.String = method1(v268)
            let v270 : string = "fable_library_rust::String_::fromString(v269)"
            let v271 : string = Fable.Core.RustInterop.emitRustExpr () v270
            let v272 : Types.EmitType<Types.std.string.String> = method10(v271)
            let v273 : string = "spi_path"
            let v274 : Types.EmitType<Types.std.string.String> = method10(v273)
            let v275 : string = "format!(\"{}\", v240.display())"
            let v276 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v275
            let v277 : Types.std.string.String = method1(v276)
            let v278 : string = "fable_library_rust::String_::fromString(v277)"
            let v279 : string = Fable.Core.RustInterop.emitRustExpr () v278
            let v280 : Types.EmitType<Types.std.string.String> = method10(v279)
            let v281 : string = "new_fsx_path"
            let v282 : Types.EmitType<Types.std.string.String> = method10(v281)
            let v283 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v249 v10
            let v284 : Types.EmitType<Types.std.string.String> = method16(v283)
            let v285 : (Types.EmitType<Types.std.string.String> []) = [|v257; v272; v274; v280; v282; v284|]
            let v286 : (Types.EmitType<Types.std.string.String> []) = method12(v285)
            method38(v255, v286)
            let v287 : Types.std.path.PathBuf = method39(v240)
            let v288 : string = "v287.parent()"
            let v289 : Option<Types.Ref<Types.std.path.Path>> = Fable.Core.RustInterop.emitRustExpr () v288
            let v290 : string = "v289.unwrap()"
            let v291 : Types.Ref<Types.std.path.Path> = Fable.Core.RustInterop.emitRustExpr () v290
            let v292 : Types.Ref<Types.std.path.Path> = method40(v291)
            let v293 : string = "std::path::PathBuf::from(v292)"
            let v294 : Types.std.path.PathBuf = Fable.Core.RustInterop.emitRustExpr () v293
            let v295 : string = "src_path"
            let v296 : Types.EmitType<Types.std.string.String> = method10(v295)
            let v297 : string = "format!(\"{}\", v294.display())"
            let v298 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v297
            let v299 : Types.std.string.String = method1(v298)
            let v300 : string = "fable_library_rust::String_::fromString(v299)"
            let v301 : string = Fable.Core.RustInterop.emitRustExpr () v300
            let v302 : Types.EmitType<Types.std.string.String> = method10(v301)
            let v303 : (Types.EmitType<Types.std.string.String> []) = [|v296; v302|]
            let v304 : (Types.EmitType<Types.std.string.String> []) = method12(v303)
            method38(v255, v304)
            let v305 : string = "v294.ancestors()"
            let v306 : Types.std.path.Ancestors = Fable.Core.RustInterop.emitRustExpr () v305
            let v307 : unativeint = unativeint 10
            let v308 : string = "v306.take(v307)"
            let v309 : Types.std.iter.Iterator<Types.Ref<Types.std.path.Path>> = Fable.Core.RustInterop.emitRustExpr () v308
            let v310 : string = "$0.into_iter().map($1)"
            let v311 : (Types.Ref<Types.std.path.Path> -> Types.std.path.PathBuf) = closure6()
            let v312 : Types.std.iter.Iterator<Types.std.path.PathBuf> = Fable.Core.RustInterop.emitRustExpr struct (v309, v311) v310
            let v313 : string = "v312.into_iter().find($0)"
            let v314 : (Types.std.path.PathBuf -> bool) = closure7()
            let v315 : Option<Types.std.path.PathBuf> = Fable.Core.RustInterop.emitRustExpr v314 v313
            let v316 : string = "v315.unwrap()"
            let v317 : Types.std.path.PathBuf = Fable.Core.RustInterop.emitRustExpr () v316
            let v318 : string = "spiproj_path"
            let v319 : Types.EmitType<Types.std.string.String> = method10(v318)
            let v320 : string = "format!(\"{}\", v317.display())"
            let v321 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v320
            let v322 : Types.std.string.String = method1(v321)
            let v323 : string = "fable_library_rust::String_::fromString(v322)"
            let v324 : string = Fable.Core.RustInterop.emitRustExpr () v323
            let v325 : Types.EmitType<Types.std.string.String> = method10(v324)
            let v326 : (Types.EmitType<Types.std.string.String> []) = [|v319; v325|]
            let v327 : (Types.EmitType<Types.std.string.String> []) = method12(v326)
            method38(v255, v327)
            let v328 : string = "v240.to_str()"
            let v329 : Option<Types.Ref<Types.Str>> = Fable.Core.RustInterop.emitRustExpr () v328
            let v330 : string = "v329.unwrap()"
            let v331 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v330
            let v332 : string = "fable_library_rust::String_::string(v331)"
            let v333 : string = Fable.Core.RustInterop.emitRustExpr () v332
            let v334 : string = method44()
            let v335 : string = "fable_library_rust::String_::LrcStr::as_str($0)"
            let v336 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr v334 v335
            let v337 : string = "String::from(core::ops::Deref::deref($0))"
            let v338 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v336 v337
            let v339 : string = method45()
            let v340 : string = "fable_library_rust::String_::LrcStr::as_str($0)"
            let v341 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr v339 v340
            let v342 : string = "String::from(core::ops::Deref::deref($0))"
            let v343 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v341 v342
            let v344 : string = method6(v333)
            let v345 : string = "fable_library_rust::String_::LrcStr::as_str($0)"
            let v346 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr v344 v345
            let v347 : string = "String::from(core::ops::Deref::deref($0))"
            let v348 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v346 v347
            let v349 : string = "v348.replace(&v338, &v343)"
            let v350 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v349
            let v351 : Types.std.string.String = method1(v350)
            let v352 : string = "fable_library_rust::String_::fromString(v351)"
            let v353 : string = Fable.Core.RustInterop.emitRustExpr () v352
            let v354 : string = method45()
            let v355 : string = "fable_library_rust::String_::LrcStr::as_str($0)"
            let v356 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr v354 v355
            let v357 : string = "String::from(core::ops::Deref::deref($0))"
            let v358 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v356 v357
            let v359 : string = method46()
            let v360 : string = "fable_library_rust::String_::LrcStr::as_str($0)"
            let v361 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr v359 v360
            let v362 : string = "String::from(core::ops::Deref::deref($0))"
            let v363 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v361 v362
            let v364 : string = method6(v353)
            let v365 : string = "fable_library_rust::String_::LrcStr::as_str($0)"
            let v366 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr v364 v365
            let v367 : string = "String::from(core::ops::Deref::deref($0))"
            let v368 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v366 v367
            let v369 : string = "v368.replace(&v358, &v363)"
            let v370 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v369
            let v371 : Types.std.string.String = method1(v370)
            let v372 : string = "fable_library_rust::String_::fromString(v371)"
            let v373 : string = Fable.Core.RustInterop.emitRustExpr () v372
            let v374 : string = method6(v373)
            let v375 : string = "fable_library_rust::String_::LrcStr::as_str($0)"
            let v376 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr v374 v375
            let v377 : string = "String::from(core::ops::Deref::deref($0))"
            let v378 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v376 v377
            let v379 : Types.std.string.String = method8(v378)
            let v380 : string = "std::path::PathBuf::from(v379)"
            let v381 : Types.std.path.PathBuf = Fable.Core.RustInterop.emitRustExpr () v380
            let v382 : Types.std.path.PathBuf = method9(v381)
            let v383 : string = "v382.canonicalize()"
            let v384 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.RustInterop.emitRustExpr () v383
            let v385 : string = "v384.unwrap()"
            let v386 : Types.std.path.PathBuf = Fable.Core.RustInterop.emitRustExpr () v385
            let v387 : string = "fsx_path"
            let v388 : Types.EmitType<Types.std.string.String> = method10(v387)
            let v389 : string = "format!(\"{}\", v386.display())"
            let v390 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v389
            let v391 : Types.std.string.String = method1(v390)
            let v392 : string = "fable_library_rust::String_::fromString(v391)"
            let v393 : string = Fable.Core.RustInterop.emitRustExpr () v392
            let v394 : Types.EmitType<Types.std.string.String> = method10(v393)
            let v395 : (Types.EmitType<Types.std.string.String> []) = [|v388; v394|]
            let v396 : (Types.EmitType<Types.std.string.String> []) = method12(v395)
            method38(v255, v396)
            let v397 : string = method47()
            let v398 : string = "v397.as_str()"
            let v399 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v398
            let v400 : string = "std::fs::write(v386, v399)"
            let v401 : Result<unit, Types.std.io.Error> = Fable.Core.RustInterop.emitRustExpr () v400
            let v402 : string = "v401.unwrap()"
            Fable.Core.RustInterop.emitRustExpr () v402
            let v403 : string = "> fs_write fsx_path \"\"; ok"
            let v404 : Types.EmitType<Types.std.string.String> = method10(v403)
            let v405 : (Types.EmitType<Types.std.string.String> []) = [|v404|]
            let v406 : (Types.EmitType<Types.std.string.String> []) = method12(v405)
            method38(v255, v406)
            let v407 : string = "13805.try_into().unwrap()"
            let v408 : Types.U16 = Fable.Core.RustInterop.emitRustExpr () v407
            let v409 : string = "port"
            let v410 : Types.EmitType<Types.std.string.String> = method10(v409)
            let v411 : Types.EmitType<Types.std.string.String> = method48(v408)
            let v412 : (Types.EmitType<Types.std.string.String> []) = [|v410; v411|]
            let v413 : (Types.EmitType<Types.std.string.String> []) = method12(v412)
            method38(v255, v413)
            let v414 : string = "../The-Spiral-Language/The Spiral Language 2/bin/Release/net7.0/Spiral.dll"
            let v415 : string = "r#\"" + v414 + "\"#"
            let v416 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v415
            let v417 : string = "dotnet"
            let v418 : string = "r#\"" + v417 + "\"#"
            let v419 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v418
            let v420 : string = "std::process::Command::new(v419)"
            let v421 : obj = Fable.Core.RustInterop.emitRustExpr () v420
            let v422 : string = "let mut v421 = v421"
            Fable.Core.RustInterop.emitRustExpr () v422
            let v423 : string = "v421.arg(v416)"
            let v424 : obj = Fable.Core.RustInterop.emitRustExpr () v423
            let v425 : string = (v408).ToString ()
            let v426 : string = "port="
            let v427 : string = v426 + v425
            let v428 : string = method6(v427)
            let v429 : string = "fable_library_rust::String_::LrcStr::as_str($0)"
            let v430 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr v428 v429
            let v431 : string = "String::from(core::ops::Deref::deref($0))"
            let v432 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v430 v431
            let v433 : string = "v424.arg(v432)"
            let v434 : obj = Fable.Core.RustInterop.emitRustExpr () v433
            let v435 : string = "v434.stdout(std::process::Stdio::inherit())"
            let v436 : obj = Fable.Core.RustInterop.emitRustExpr () v435
            let v437 : string = "v436.stderr(std::process::Stdio::inherit())"
            let v438 : obj = Fable.Core.RustInterop.emitRustExpr () v437
            let v439 : string = "v438.spawn()"
            let v440 : Result<Types.std.process.Child, Types.std.io.Error> = Fable.Core.RustInterop.emitRustExpr () v439
            let v441 : string = "v440.unwrap()"
            let v442 : Types.std.process.Child = Fable.Core.RustInterop.emitRustExpr () v441
            let v443 : string = "process"
            let v444 : Types.EmitType<Types.std.string.String> = method10(v443)
            let v445 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v442 v10
            let v446 : Types.EmitType<Types.std.string.String> = method16(v445)
            let v447 : (Types.EmitType<Types.std.string.String> []) = [|v444; v446|]
            let v448 : (Types.EmitType<Types.std.string.String> []) = method12(v447)
            method38(v255, v448)
            let v449 : string = "std::net::SocketAddr::from(([0, 0, 0, 0], v408))"
            let v450 : Types.std.net.SocketAddr = Fable.Core.RustInterop.emitRustExpr () v449
            let v451 : string = "async move {"
            let v452 : string = "     loop {"
            let v453 : string = v451 + v452
            let v454 : string = "         let result = std::net::TcpStream::connect(&v450);"
            let v455 : string = v453 + v454
            let v456 : string = "         println!(\"connect_timeout: {:?}\", result);"
            let v457 : string = v455 + v456
            let v458 : string = "         if result.is_ok() {"
            let v459 : string = v457 + v458
            let v460 : string = "             tokio::time::sleep(std::time::Duration::from_secs(1)).await;"
            let v461 : string = v459 + v460
            let v462 : string = "             break;"
            let v463 : string = v461 + v462
            let v464 : string = "         } else {"
            let v465 : string = v463 + v464
            let v466 : string = "             tokio::time::sleep(std::time::Duration::from_millis(60)).await;"
            let v467 : string = v465 + v466
            let v468 : string = "         }"
            let v469 : string = v467 + v468
            let v470 : string = "     }"
            let v471 : string = v469 + v470
            let v472 : string = " }"
            let v473 : string = v471 + v472
            let v474 : string = "tokio::runtime::Builder::new_current_thread()"
            let v475 : obj = Fable.Core.RustInterop.emitRustExpr () v474
            let v476 : string = "let mut v475 = v475"
            Fable.Core.RustInterop.emitRustExpr () v476
            let v477 : string = "v475.enable_all()"
            let v478 : obj = Fable.Core.RustInterop.emitRustExpr () v477
            let v479 : string = "v478.build()"
            let v480 : obj = Fable.Core.RustInterop.emitRustExpr () v479
            let v481 : string = "v480.unwrap()"
            let v482 : obj = Fable.Core.RustInterop.emitRustExpr () v481
            let v483 : string = "v482.block_on("
            let v484 : string = v483 + v473
            let v485 : string = ")"
            let v486 : string = v484 + v485
            Fable.Core.RustInterop.emitRustExpr () v486
            let struct (v487 : string, v488 : string, v489 : string, v490 : bool) = method2()
            let v491 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
            let v492 : int64 = Fable.Core.RustInterop.emitRustExpr v491 v18
            let v493 : string = "\"Ping\": true"
            let v494 : string = "{"
            let v495 : string = v494 + v493
            let v496 : string = "}"
            let v497 : string = v495 + v496
            let v498 : string = "serde_json::json!("
            let v499 : string = v498 + v497
            let v500 : string = ").to_string()"
            let v501 : string = v499 + v500
            let v502 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v501
            let v503 : string = "json_len"
            let v504 : Types.EmitType<Types.std.string.String> = method10(v503)
            let v505 : string = "v502.len()"
            let v506 : obj = Fable.Core.RustInterop.emitRustExpr () v505
            let v507 : string = "v506.try_into().unwrap()"
            let v508 : int32 = Fable.Core.RustInterop.emitRustExpr () v507
            let v509 : Types.EmitType<Types.std.string.String> = method25(v508)
            let v510 : (Types.EmitType<Types.std.string.String> []) = [|v504; v509|]
            let v511 : (Types.EmitType<Types.std.string.String> []) = method12(v510)
            method49(v492, v511)
            let struct (v512 : string, v513 : string, v514 : string, v515 : bool) = method2()
            let v516 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
            let v517 : int64 = Fable.Core.RustInterop.emitRustExpr v516 v18
            let v518 : string = "host"
            let v519 : Types.EmitType<Types.std.string.String> = method10(v518)
            let v520 : string = "127.0.0.1"
            let v521 : Types.EmitType<Types.std.string.String> = method10(v520)
            let v522 : Types.EmitType<Types.std.string.String> = method10(v409)
            let v523 : Types.EmitType<Types.std.string.String> = method48(v408)
            let v524 : string = "msg_len"
            let v525 : Types.EmitType<Types.std.string.String> = method10(v524)
            let v526 : string = "v502.len()"
            let v527 : obj = Fable.Core.RustInterop.emitRustExpr () v526
            let v528 : string = "v527.try_into().unwrap()"
            let v529 : int32 = Fable.Core.RustInterop.emitRustExpr () v528
            let v530 : Types.EmitType<Types.std.string.String> = method25(v529)
            let v531 : (Types.EmitType<Types.std.string.String> []) = [|v519; v521; v522; v523; v525; v530|]
            let v532 : (Types.EmitType<Types.std.string.String> []) = method12(v531)
            method50(v517, v532)
            let v533 : string = "zmq::Context::new()"
            let v534 : obj = Fable.Core.RustInterop.emitRustExpr () v533
            let v535 : string = "$0.socket(zmq::REQ).unwrap()"
            let v536 : obj = Fable.Core.RustInterop.emitRustExpr v534 v535
            let v537 : string = $"tcp://{v520}:{v408}"
            let v538 : string = "$0.connect(&$1).unwrap()"
            Fable.Core.RustInterop.emitRustExpr struct (v536, v537) v538
            let v539 : string = $"$0.send($1.as_str(), 0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr struct (v536, v502) v539
            let v540 : string = "$0.recv_string(0).unwrap().unwrap()"
            let v541 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v536 v540
            let v542 : string = "$0.disconnect(&$1).unwrap()"
            Fable.Core.RustInterop.emitRustExpr struct (v536, v537) v542
            let v543 : string = "result_len"
            let v544 : Types.EmitType<Types.std.string.String> = method10(v543)
            let v545 : string = "v541.len()"
            let v546 : obj = Fable.Core.RustInterop.emitRustExpr () v545
            let v547 : string = "v546.try_into().unwrap()"
            let v548 : int32 = Fable.Core.RustInterop.emitRustExpr () v547
            let v549 : Types.EmitType<Types.std.string.String> = method25(v548)
            let v550 : (Types.EmitType<Types.std.string.String> []) = [|v544; v549|]
            let v551 : (Types.EmitType<Types.std.string.String> []) = method12(v550)
            method50(v517, v551)
            let v552 : string = "> ping; ok"
            let v553 : Types.EmitType<Types.std.string.String> = method10(v552)
            let v554 : (Types.EmitType<Types.std.string.String> []) = [|v553|]
            let v555 : (Types.EmitType<Types.std.string.String> []) = method12(v554)
            method38(v255, v555)
            let v556 : string = "std::fs::read_to_string(v240)"
            let v557 : Result<Types.std.string.String, Types.std.io.Error> = Fable.Core.RustInterop.emitRustExpr () v556
            let v558 : string = "($0).as_ref().unwrap().to_string()"
            let v559 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v557 v558
            let struct (v560 : string, v561 : string, v562 : string, v563 : bool) = method2()
            let v564 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
            let v565 : int64 = Fable.Core.RustInterop.emitRustExpr v564 v18
            let v566 : Types.EmitType<Types.std.string.String> = method10(v273)
            let v567 : string = "format!(\"{}\", v240.display())"
            let v568 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v567
            let v569 : Types.std.string.String = method1(v568)
            let v570 : string = "fable_library_rust::String_::fromString(v569)"
            let v571 : string = Fable.Core.RustInterop.emitRustExpr () v570
            let v572 : Types.EmitType<Types.std.string.String> = method10(v571)
            let v573 : string = "spi_text_len"
            let v574 : Types.EmitType<Types.std.string.String> = method10(v573)
            let v575 : string = "v559.len()"
            let v576 : obj = Fable.Core.RustInterop.emitRustExpr () v575
            let v577 : string = "v576.try_into().unwrap()"
            let v578 : int32 = Fable.Core.RustInterop.emitRustExpr () v577
            let v579 : Types.EmitType<Types.std.string.String> = method25(v578)
            let v580 : (Types.EmitType<Types.std.string.String> []) = [|v566; v572; v574; v579|]
            let v581 : (Types.EmitType<Types.std.string.String> []) = method12(v580)
            method51(v565, v581)
            let v582 : string = "\"FileOpen\": {"
            let v583 : string = v494 + v582
            let v584 : string = "\"spiText\": v559,"
            let v585 : string = v583 + v584
            let v586 : string = "\"uri\": \"file://\".to_owned() + v240.to_str().unwrap()"
            let v587 : string = v585 + v586
            let v588 : string = v587 + v496
            let v589 : string = v588 + v496
            let v590 : string = v498 + v589
            let v591 : string = v590 + v500
            let v592 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v591
            let v593 : Types.EmitType<Types.std.string.String> = method10(v503)
            let v594 : string = "v592.len()"
            let v595 : obj = Fable.Core.RustInterop.emitRustExpr () v594
            let v596 : string = "v595.try_into().unwrap()"
            let v597 : int32 = Fable.Core.RustInterop.emitRustExpr () v596
            let v598 : Types.EmitType<Types.std.string.String> = method25(v597)
            let v599 : (Types.EmitType<Types.std.string.String> []) = [|v593; v598|]
            let v600 : (Types.EmitType<Types.std.string.String> []) = method12(v599)
            method51(v565, v600)
            let struct (v601 : string, v602 : string, v603 : string, v604 : bool) = method2()
            let v605 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
            let v606 : int64 = Fable.Core.RustInterop.emitRustExpr v605 v18
            let v607 : Types.EmitType<Types.std.string.String> = method10(v518)
            let v608 : Types.EmitType<Types.std.string.String> = method10(v520)
            let v609 : Types.EmitType<Types.std.string.String> = method10(v409)
            let v610 : Types.EmitType<Types.std.string.String> = method48(v408)
            let v611 : Types.EmitType<Types.std.string.String> = method10(v524)
            let v612 : string = "v592.len()"
            let v613 : obj = Fable.Core.RustInterop.emitRustExpr () v612
            let v614 : string = "v613.try_into().unwrap()"
            let v615 : int32 = Fable.Core.RustInterop.emitRustExpr () v614
            let v616 : Types.EmitType<Types.std.string.String> = method25(v615)
            let v617 : (Types.EmitType<Types.std.string.String> []) = [|v607; v608; v609; v610; v611; v616|]
            let v618 : (Types.EmitType<Types.std.string.String> []) = method12(v617)
            method50(v606, v618)
            let v619 : obj = Fable.Core.RustInterop.emitRustExpr () v533
            let v620 : obj = Fable.Core.RustInterop.emitRustExpr v619 v535
            let v621 : string = $"tcp://{v520}:{v408}"
            Fable.Core.RustInterop.emitRustExpr struct (v620, v621) v538
            let v622 : string = $"$0.send($1.as_str(), 0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr struct (v620, v592) v622
            let v623 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v620 v540
            Fable.Core.RustInterop.emitRustExpr struct (v620, v621) v542
            let v624 : Types.EmitType<Types.std.string.String> = method10(v543)
            let v625 : string = "v623.len()"
            let v626 : obj = Fable.Core.RustInterop.emitRustExpr () v625
            let v627 : string = "v626.try_into().unwrap()"
            let v628 : int32 = Fable.Core.RustInterop.emitRustExpr () v627
            let v629 : Types.EmitType<Types.std.string.String> = method25(v628)
            let v630 : (Types.EmitType<Types.std.string.String> []) = [|v624; v629|]
            let v631 : (Types.EmitType<Types.std.string.String> []) = method12(v630)
            method50(v606, v631)
            let v632 : string = "> spi_open; ok"
            let v633 : Types.EmitType<Types.std.string.String> = method10(v632)
            let v634 : (Types.EmitType<Types.std.string.String> []) = [|v633|]
            let v635 : (Types.EmitType<Types.std.string.String> []) = method12(v634)
            method38(v255, v635)
            let struct (v636 : string, v637 : string, v638 : string, v639 : bool) = method2()
            let v640 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
            let v641 : int64 = Fable.Core.RustInterop.emitRustExpr v640 v18
            let v642 : string = "\"Ping\": true"
            let v643 : string = v494 + v642
            let v644 : string = v643 + v496
            let v645 : string = v498 + v644
            let v646 : string = v645 + v500
            let v647 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v646
            let v648 : Types.EmitType<Types.std.string.String> = method10(v503)
            let v649 : string = "v647.len()"
            let v650 : obj = Fable.Core.RustInterop.emitRustExpr () v649
            let v651 : string = "v650.try_into().unwrap()"
            let v652 : int32 = Fable.Core.RustInterop.emitRustExpr () v651
            let v653 : Types.EmitType<Types.std.string.String> = method25(v652)
            let v654 : (Types.EmitType<Types.std.string.String> []) = [|v648; v653|]
            let v655 : (Types.EmitType<Types.std.string.String> []) = method12(v654)
            method49(v641, v655)
            let struct (v656 : string, v657 : string, v658 : string, v659 : bool) = method2()
            let v660 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
            let v661 : int64 = Fable.Core.RustInterop.emitRustExpr v660 v18
            let v662 : Types.EmitType<Types.std.string.String> = method10(v518)
            let v663 : Types.EmitType<Types.std.string.String> = method10(v520)
            let v664 : Types.EmitType<Types.std.string.String> = method10(v409)
            let v665 : Types.EmitType<Types.std.string.String> = method48(v408)
            let v666 : Types.EmitType<Types.std.string.String> = method10(v524)
            let v667 : string = "v647.len()"
            let v668 : obj = Fable.Core.RustInterop.emitRustExpr () v667
            let v669 : string = "v668.try_into().unwrap()"
            let v670 : int32 = Fable.Core.RustInterop.emitRustExpr () v669
            let v671 : Types.EmitType<Types.std.string.String> = method25(v670)
            let v672 : (Types.EmitType<Types.std.string.String> []) = [|v662; v663; v664; v665; v666; v671|]
            let v673 : (Types.EmitType<Types.std.string.String> []) = method12(v672)
            method50(v661, v673)
            let v674 : obj = Fable.Core.RustInterop.emitRustExpr () v533
            let v675 : obj = Fable.Core.RustInterop.emitRustExpr v674 v535
            let v676 : string = $"tcp://{v520}:{v408}"
            Fable.Core.RustInterop.emitRustExpr struct (v675, v676) v538
            let v677 : string = $"$0.send($1.as_str(), 0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr struct (v675, v647) v677
            let v678 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v675 v540
            Fable.Core.RustInterop.emitRustExpr struct (v675, v676) v542
            let v679 : Types.EmitType<Types.std.string.String> = method10(v543)
            let v680 : string = "v678.len()"
            let v681 : obj = Fable.Core.RustInterop.emitRustExpr () v680
            let v682 : string = "v681.try_into().unwrap()"
            let v683 : int32 = Fable.Core.RustInterop.emitRustExpr () v682
            let v684 : Types.EmitType<Types.std.string.String> = method25(v683)
            let v685 : (Types.EmitType<Types.std.string.String> []) = [|v679; v684|]
            let v686 : (Types.EmitType<Types.std.string.String> []) = method12(v685)
            method50(v661, v686)
            let v687 : Types.EmitType<Types.std.string.String> = method10(v552)
            let v688 : (Types.EmitType<Types.std.string.String> []) = [|v687|]
            let v689 : (Types.EmitType<Types.std.string.String> []) = method12(v688)
            method38(v255, v689)
            let v690 : string = "../The-Spiral-Language/VS Code Plugin/core/package.spiproj"
            let v691 : string = "r#\"" + v690 + "\"#"
            let v692 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v691
            let v693 : Types.Ref<Types.Str> = method52(v692)
            let v694 : string = "std::path::PathBuf::from(v693)"
            let v695 : Types.std.path.PathBuf = Fable.Core.RustInterop.emitRustExpr () v694
            let v696 : Types.std.path.PathBuf = method9(v695)
            let v697 : string = "v696.canonicalize()"
            let v698 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.RustInterop.emitRustExpr () v697
            let v699 : string = "v698.unwrap()"
            let v700 : Types.std.path.PathBuf = Fable.Core.RustInterop.emitRustExpr () v699
            let v701 : string = "std::fs::read_to_string(v700)"
            let v702 : Result<Types.std.string.String, Types.std.io.Error> = Fable.Core.RustInterop.emitRustExpr () v701
            let v703 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v702 v558
            let struct (v704 : string, v705 : string, v706 : string, v707 : bool) = method2()
            let v708 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
            let v709 : int64 = Fable.Core.RustInterop.emitRustExpr v708 v18
            let v710 : Types.EmitType<Types.std.string.String> = method10(v318)
            let v711 : string = "format!(\"{}\", v700.display())"
            let v712 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v711
            let v713 : Types.std.string.String = method1(v712)
            let v714 : string = "fable_library_rust::String_::fromString(v713)"
            let v715 : string = Fable.Core.RustInterop.emitRustExpr () v714
            let v716 : Types.EmitType<Types.std.string.String> = method10(v715)
            let v717 : string = "spiproj_text_len"
            let v718 : Types.EmitType<Types.std.string.String> = method10(v717)
            let v719 : string = "v703.len()"
            let v720 : obj = Fable.Core.RustInterop.emitRustExpr () v719
            let v721 : string = "v720.try_into().unwrap()"
            let v722 : int32 = Fable.Core.RustInterop.emitRustExpr () v721
            let v723 : Types.EmitType<Types.std.string.String> = method25(v722)
            let v724 : (Types.EmitType<Types.std.string.String> []) = [|v710; v716; v718; v723|]
            let v725 : (Types.EmitType<Types.std.string.String> []) = method12(v724)
            method53(v709, v725)
            let v726 : string = "\"ProjectFileOpen\": {"
            let v727 : string = v494 + v726
            let v728 : string = "\"spiprojText\": v703,"
            let v729 : string = v727 + v728
            let v730 : string = "\"uri\": \"file://\".to_owned() + v700.to_str().unwrap()"
            let v731 : string = v729 + v730
            let v732 : string = v731 + v496
            let v733 : string = v732 + v496
            let v734 : string = v498 + v733
            let v735 : string = v734 + v500
            let v736 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v735
            let v737 : Types.EmitType<Types.std.string.String> = method10(v503)
            let v738 : string = "v736.len()"
            let v739 : obj = Fable.Core.RustInterop.emitRustExpr () v738
            let v740 : string = "v739.try_into().unwrap()"
            let v741 : int32 = Fable.Core.RustInterop.emitRustExpr () v740
            let v742 : Types.EmitType<Types.std.string.String> = method25(v741)
            let v743 : (Types.EmitType<Types.std.string.String> []) = [|v737; v742|]
            let v744 : (Types.EmitType<Types.std.string.String> []) = method12(v743)
            method53(v709, v744)
            let struct (v745 : string, v746 : string, v747 : string, v748 : bool) = method2()
            let v749 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
            let v750 : int64 = Fable.Core.RustInterop.emitRustExpr v749 v18
            let v751 : Types.EmitType<Types.std.string.String> = method10(v518)
            let v752 : Types.EmitType<Types.std.string.String> = method10(v520)
            let v753 : Types.EmitType<Types.std.string.String> = method10(v409)
            let v754 : Types.EmitType<Types.std.string.String> = method48(v408)
            let v755 : Types.EmitType<Types.std.string.String> = method10(v524)
            let v756 : string = "v736.len()"
            let v757 : obj = Fable.Core.RustInterop.emitRustExpr () v756
            let v758 : string = "v757.try_into().unwrap()"
            let v759 : int32 = Fable.Core.RustInterop.emitRustExpr () v758
            let v760 : Types.EmitType<Types.std.string.String> = method25(v759)
            let v761 : (Types.EmitType<Types.std.string.String> []) = [|v751; v752; v753; v754; v755; v760|]
            let v762 : (Types.EmitType<Types.std.string.String> []) = method12(v761)
            method50(v750, v762)
            let v763 : obj = Fable.Core.RustInterop.emitRustExpr () v533
            let v764 : obj = Fable.Core.RustInterop.emitRustExpr v763 v535
            let v765 : string = $"tcp://{v520}:{v408}"
            Fable.Core.RustInterop.emitRustExpr struct (v764, v765) v538
            let v766 : string = $"$0.send($1.as_str(), 0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr struct (v764, v736) v766
            let v767 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v764 v540
            Fable.Core.RustInterop.emitRustExpr struct (v764, v765) v542
            let v768 : Types.EmitType<Types.std.string.String> = method10(v543)
            let v769 : string = "v767.len()"
            let v770 : obj = Fable.Core.RustInterop.emitRustExpr () v769
            let v771 : string = "v770.try_into().unwrap()"
            let v772 : int32 = Fable.Core.RustInterop.emitRustExpr () v771
            let v773 : Types.EmitType<Types.std.string.String> = method25(v772)
            let v774 : (Types.EmitType<Types.std.string.String> []) = [|v768; v773|]
            let v775 : (Types.EmitType<Types.std.string.String> []) = method12(v774)
            method50(v750, v775)
            let v776 : string = "> spiproj_open base_spiproj_path; ok"
            let v777 : Types.EmitType<Types.std.string.String> = method10(v776)
            let v778 : (Types.EmitType<Types.std.string.String> []) = [|v777|]
            let v779 : (Types.EmitType<Types.std.string.String> []) = method12(v778)
            method38(v255, v779)
            let v780 : string = "std::fs::read_to_string(v317)"
            let v781 : Result<Types.std.string.String, Types.std.io.Error> = Fable.Core.RustInterop.emitRustExpr () v780
            let v782 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v781 v558
            let struct (v783 : string, v784 : string, v785 : string, v786 : bool) = method2()
            let v787 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
            let v788 : int64 = Fable.Core.RustInterop.emitRustExpr v787 v18
            let v789 : Types.EmitType<Types.std.string.String> = method10(v318)
            let v790 : string = "format!(\"{}\", v317.display())"
            let v791 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v790
            let v792 : Types.std.string.String = method1(v791)
            let v793 : string = "fable_library_rust::String_::fromString(v792)"
            let v794 : string = Fable.Core.RustInterop.emitRustExpr () v793
            let v795 : Types.EmitType<Types.std.string.String> = method10(v794)
            let v796 : Types.EmitType<Types.std.string.String> = method10(v717)
            let v797 : string = "v782.len()"
            let v798 : obj = Fable.Core.RustInterop.emitRustExpr () v797
            let v799 : string = "v798.try_into().unwrap()"
            let v800 : int32 = Fable.Core.RustInterop.emitRustExpr () v799
            let v801 : Types.EmitType<Types.std.string.String> = method25(v800)
            let v802 : (Types.EmitType<Types.std.string.String> []) = [|v789; v795; v796; v801|]
            let v803 : (Types.EmitType<Types.std.string.String> []) = method12(v802)
            method53(v788, v803)
            let v804 : string = v494 + v726
            let v805 : string = "\"spiprojText\": v782,"
            let v806 : string = v804 + v805
            let v807 : string = "\"uri\": \"file://\".to_owned() + v317.to_str().unwrap()"
            let v808 : string = v806 + v807
            let v809 : string = v808 + v496
            let v810 : string = v809 + v496
            let v811 : string = v498 + v810
            let v812 : string = v811 + v500
            let v813 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v812
            let v814 : Types.EmitType<Types.std.string.String> = method10(v503)
            let v815 : string = "v813.len()"
            let v816 : obj = Fable.Core.RustInterop.emitRustExpr () v815
            let v817 : string = "v816.try_into().unwrap()"
            let v818 : int32 = Fable.Core.RustInterop.emitRustExpr () v817
            let v819 : Types.EmitType<Types.std.string.String> = method25(v818)
            let v820 : (Types.EmitType<Types.std.string.String> []) = [|v814; v819|]
            let v821 : (Types.EmitType<Types.std.string.String> []) = method12(v820)
            method53(v788, v821)
            let struct (v822 : string, v823 : string, v824 : string, v825 : bool) = method2()
            let v826 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
            let v827 : int64 = Fable.Core.RustInterop.emitRustExpr v826 v18
            let v828 : Types.EmitType<Types.std.string.String> = method10(v518)
            let v829 : Types.EmitType<Types.std.string.String> = method10(v520)
            let v830 : Types.EmitType<Types.std.string.String> = method10(v409)
            let v831 : Types.EmitType<Types.std.string.String> = method48(v408)
            let v832 : Types.EmitType<Types.std.string.String> = method10(v524)
            let v833 : string = "v813.len()"
            let v834 : obj = Fable.Core.RustInterop.emitRustExpr () v833
            let v835 : string = "v834.try_into().unwrap()"
            let v836 : int32 = Fable.Core.RustInterop.emitRustExpr () v835
            let v837 : Types.EmitType<Types.std.string.String> = method25(v836)
            let v838 : (Types.EmitType<Types.std.string.String> []) = [|v828; v829; v830; v831; v832; v837|]
            let v839 : (Types.EmitType<Types.std.string.String> []) = method12(v838)
            method50(v827, v839)
            let v840 : obj = Fable.Core.RustInterop.emitRustExpr () v533
            let v841 : obj = Fable.Core.RustInterop.emitRustExpr v840 v535
            let v842 : string = $"tcp://{v520}:{v408}"
            Fable.Core.RustInterop.emitRustExpr struct (v841, v842) v538
            let v843 : string = $"$0.send($1.as_str(), 0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr struct (v841, v813) v843
            let v844 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v841 v540
            Fable.Core.RustInterop.emitRustExpr struct (v841, v842) v542
            let v845 : Types.EmitType<Types.std.string.String> = method10(v543)
            let v846 : string = "v844.len()"
            let v847 : obj = Fable.Core.RustInterop.emitRustExpr () v846
            let v848 : string = "v847.try_into().unwrap()"
            let v849 : int32 = Fable.Core.RustInterop.emitRustExpr () v848
            let v850 : Types.EmitType<Types.std.string.String> = method25(v849)
            let v851 : (Types.EmitType<Types.std.string.String> []) = [|v845; v850|]
            let v852 : (Types.EmitType<Types.std.string.String> []) = method12(v851)
            method50(v827, v852)
            let v853 : string = "> spiproj_open spiproj_path; ok"
            let v854 : Types.EmitType<Types.std.string.String> = method10(v853)
            let v855 : (Types.EmitType<Types.std.string.String> []) = [|v854|]
            let v856 : (Types.EmitType<Types.std.string.String> []) = method12(v855)
            method38(v255, v856)
            let struct (v857 : string, v858 : string, v859 : string, v860 : bool) = method2()
            let v861 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
            let v862 : int64 = Fable.Core.RustInterop.emitRustExpr v861 v18
            let v863 : string = "\"Ping\": true"
            let v864 : string = v494 + v863
            let v865 : string = v864 + v496
            let v866 : string = v498 + v865
            let v867 : string = v866 + v500
            let v868 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v867
            let v869 : Types.EmitType<Types.std.string.String> = method10(v503)
            let v870 : string = "v868.len()"
            let v871 : obj = Fable.Core.RustInterop.emitRustExpr () v870
            let v872 : string = "v871.try_into().unwrap()"
            let v873 : int32 = Fable.Core.RustInterop.emitRustExpr () v872
            let v874 : Types.EmitType<Types.std.string.String> = method25(v873)
            let v875 : (Types.EmitType<Types.std.string.String> []) = [|v869; v874|]
            let v876 : (Types.EmitType<Types.std.string.String> []) = method12(v875)
            method49(v862, v876)
            let struct (v877 : string, v878 : string, v879 : string, v880 : bool) = method2()
            let v881 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
            let v882 : int64 = Fable.Core.RustInterop.emitRustExpr v881 v18
            let v883 : Types.EmitType<Types.std.string.String> = method10(v518)
            let v884 : Types.EmitType<Types.std.string.String> = method10(v520)
            let v885 : Types.EmitType<Types.std.string.String> = method10(v409)
            let v886 : Types.EmitType<Types.std.string.String> = method48(v408)
            let v887 : Types.EmitType<Types.std.string.String> = method10(v524)
            let v888 : string = "v868.len()"
            let v889 : obj = Fable.Core.RustInterop.emitRustExpr () v888
            let v890 : string = "v889.try_into().unwrap()"
            let v891 : int32 = Fable.Core.RustInterop.emitRustExpr () v890
            let v892 : Types.EmitType<Types.std.string.String> = method25(v891)
            let v893 : (Types.EmitType<Types.std.string.String> []) = [|v883; v884; v885; v886; v887; v892|]
            let v894 : (Types.EmitType<Types.std.string.String> []) = method12(v893)
            method50(v882, v894)
            let v895 : obj = Fable.Core.RustInterop.emitRustExpr () v533
            let v896 : obj = Fable.Core.RustInterop.emitRustExpr v895 v535
            let v897 : string = $"tcp://{v520}:{v408}"
            Fable.Core.RustInterop.emitRustExpr struct (v896, v897) v538
            let v898 : string = $"$0.send($1.as_str(), 0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr struct (v896, v868) v898
            let v899 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v896 v540
            Fable.Core.RustInterop.emitRustExpr struct (v896, v897) v542
            let v900 : Types.EmitType<Types.std.string.String> = method10(v543)
            let v901 : string = "v899.len()"
            let v902 : obj = Fable.Core.RustInterop.emitRustExpr () v901
            let v903 : string = "v902.try_into().unwrap()"
            let v904 : int32 = Fable.Core.RustInterop.emitRustExpr () v903
            let v905 : Types.EmitType<Types.std.string.String> = method25(v904)
            let v906 : (Types.EmitType<Types.std.string.String> []) = [|v900; v905|]
            let v907 : (Types.EmitType<Types.std.string.String> []) = method12(v906)
            method50(v882, v907)
            let v908 : Types.EmitType<Types.std.string.String> = method10(v552)
            let v909 : (Types.EmitType<Types.std.string.String> []) = [|v908|]
            let v910 : (Types.EmitType<Types.std.string.String> []) = method12(v909)
            method38(v255, v910)
            let struct (v911 : string, v912 : string, v913 : string, v914 : bool) = method2()
            let v915 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
            let v916 : int64 = Fable.Core.RustInterop.emitRustExpr v915 v18
            let v917 : Types.EmitType<Types.std.string.String> = method10(v273)
            let v918 : string = "format!(\"{}\", v240.display())"
            let v919 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v918
            let v920 : Types.std.string.String = method1(v919)
            let v921 : string = "fable_library_rust::String_::fromString(v920)"
            let v922 : string = Fable.Core.RustInterop.emitRustExpr () v921
            let v923 : Types.EmitType<Types.std.string.String> = method10(v922)
            let v924 : string = "backend"
            let v925 : Types.EmitType<Types.std.string.String> = method10(v924)
            let v926 : string = "Fsharp"
            let v927 : Types.EmitType<Types.std.string.String> = method10(v926)
            let v928 : (Types.EmitType<Types.std.string.String> []) = [|v917; v923; v925; v927|]
            let v929 : (Types.EmitType<Types.std.string.String> []) = method12(v928)
            method54(v916, v929)
            let v930 : string = method55()
            let v931 : string = "fable_library_rust::String_::LrcStr::as_str($0)"
            let v932 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr v930 v931
            let v933 : string = "String::from(core::ops::Deref::deref($0))"
            let v934 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v932 v933
            let v935 : string = "\"BuildFile\": {"
            let v936 : string = v494 + v935
            let v937 : string = "\"uri\": \"file://\".to_owned() + v240.to_str().unwrap(),"
            let v938 : string = v936 + v937
            let v939 : string = "\"backend\": v934"
            let v940 : string = v938 + v939
            let v941 : string = v940 + v496
            let v942 : string = v941 + v496
            let v943 : string = v498 + v942
            let v944 : string = v943 + v500
            let v945 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v944
            let v946 : Types.EmitType<Types.std.string.String> = method10(v503)
            let v947 : string = "v945.len()"
            let v948 : obj = Fable.Core.RustInterop.emitRustExpr () v947
            let v949 : string = "v948.try_into().unwrap()"
            let v950 : int32 = Fable.Core.RustInterop.emitRustExpr () v949
            let v951 : Types.EmitType<Types.std.string.String> = method25(v950)
            let v952 : (Types.EmitType<Types.std.string.String> []) = [|v946; v951|]
            let v953 : (Types.EmitType<Types.std.string.String> []) = method12(v952)
            method54(v916, v953)
            let struct (v954 : string, v955 : string, v956 : string, v957 : bool) = method2()
            let v958 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
            let v959 : int64 = Fable.Core.RustInterop.emitRustExpr v958 v18
            let v960 : Types.EmitType<Types.std.string.String> = method10(v518)
            let v961 : Types.EmitType<Types.std.string.String> = method10(v520)
            let v962 : Types.EmitType<Types.std.string.String> = method10(v409)
            let v963 : Types.EmitType<Types.std.string.String> = method48(v408)
            let v964 : Types.EmitType<Types.std.string.String> = method10(v524)
            let v965 : string = "v945.len()"
            let v966 : obj = Fable.Core.RustInterop.emitRustExpr () v965
            let v967 : string = "v966.try_into().unwrap()"
            let v968 : int32 = Fable.Core.RustInterop.emitRustExpr () v967
            let v969 : Types.EmitType<Types.std.string.String> = method25(v968)
            let v970 : (Types.EmitType<Types.std.string.String> []) = [|v960; v961; v962; v963; v964; v969|]
            let v971 : (Types.EmitType<Types.std.string.String> []) = method12(v970)
            method50(v959, v971)
            let v972 : obj = Fable.Core.RustInterop.emitRustExpr () v533
            let v973 : obj = Fable.Core.RustInterop.emitRustExpr v972 v535
            let v974 : string = $"tcp://{v520}:{v408}"
            Fable.Core.RustInterop.emitRustExpr struct (v973, v974) v538
            let v975 : string = $"$0.send($1.as_str(), 0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr struct (v973, v945) v975
            let v976 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v973 v540
            Fable.Core.RustInterop.emitRustExpr struct (v973, v974) v542
            let v977 : Types.EmitType<Types.std.string.String> = method10(v543)
            let v978 : string = "v976.len()"
            let v979 : obj = Fable.Core.RustInterop.emitRustExpr () v978
            let v980 : string = "v979.try_into().unwrap()"
            let v981 : int32 = Fable.Core.RustInterop.emitRustExpr () v980
            let v982 : Types.EmitType<Types.std.string.String> = method25(v981)
            let v983 : (Types.EmitType<Types.std.string.String> []) = [|v977; v982|]
            let v984 : (Types.EmitType<Types.std.string.String> []) = method12(v983)
            method50(v959, v984)
            let v985 : string = "> spi_build_file; ok"
            let v986 : Types.EmitType<Types.std.string.String> = method10(v985)
            let v987 : (Types.EmitType<Types.std.string.String> []) = [|v986|]
            let v988 : (Types.EmitType<Types.std.string.String> []) = method12(v987)
            method38(v255, v988)
            let struct (v989 : string, v990 : string, v991 : string, v992 : bool) = method2()
            let v993 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
            let v994 : int64 = Fable.Core.RustInterop.emitRustExpr v993 v18
            let v995 : string = "\"Ping\": true"
            let v996 : string = v494 + v995
            let v997 : string = v996 + v496
            let v998 : string = v498 + v997
            let v999 : string = v998 + v500
            let v1000 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v999
            let v1001 : Types.EmitType<Types.std.string.String> = method10(v503)
            let v1002 : string = "v1000.len()"
            let v1003 : obj = Fable.Core.RustInterop.emitRustExpr () v1002
            let v1004 : string = "v1003.try_into().unwrap()"
            let v1005 : int32 = Fable.Core.RustInterop.emitRustExpr () v1004
            let v1006 : Types.EmitType<Types.std.string.String> = method25(v1005)
            let v1007 : (Types.EmitType<Types.std.string.String> []) = [|v1001; v1006|]
            let v1008 : (Types.EmitType<Types.std.string.String> []) = method12(v1007)
            method49(v994, v1008)
            let struct (v1009 : string, v1010 : string, v1011 : string, v1012 : bool) = method2()
            let v1013 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
            let v1014 : int64 = Fable.Core.RustInterop.emitRustExpr v1013 v18
            let v1015 : Types.EmitType<Types.std.string.String> = method10(v518)
            let v1016 : Types.EmitType<Types.std.string.String> = method10(v520)
            let v1017 : Types.EmitType<Types.std.string.String> = method10(v409)
            let v1018 : Types.EmitType<Types.std.string.String> = method48(v408)
            let v1019 : Types.EmitType<Types.std.string.String> = method10(v524)
            let v1020 : string = "v1000.len()"
            let v1021 : obj = Fable.Core.RustInterop.emitRustExpr () v1020
            let v1022 : string = "v1021.try_into().unwrap()"
            let v1023 : int32 = Fable.Core.RustInterop.emitRustExpr () v1022
            let v1024 : Types.EmitType<Types.std.string.String> = method25(v1023)
            let v1025 : (Types.EmitType<Types.std.string.String> []) = [|v1015; v1016; v1017; v1018; v1019; v1024|]
            let v1026 : (Types.EmitType<Types.std.string.String> []) = method12(v1025)
            method50(v1014, v1026)
            let v1027 : obj = Fable.Core.RustInterop.emitRustExpr () v533
            let v1028 : obj = Fable.Core.RustInterop.emitRustExpr v1027 v535
            let v1029 : string = $"tcp://{v520}:{v408}"
            Fable.Core.RustInterop.emitRustExpr struct (v1028, v1029) v538
            let v1030 : string = $"$0.send($1.as_str(), 0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr struct (v1028, v1000) v1030
            let v1031 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v1028 v540
            Fable.Core.RustInterop.emitRustExpr struct (v1028, v1029) v542
            let v1032 : Types.EmitType<Types.std.string.String> = method10(v543)
            let v1033 : string = "v1031.len()"
            let v1034 : obj = Fable.Core.RustInterop.emitRustExpr () v1033
            let v1035 : string = "v1034.try_into().unwrap()"
            let v1036 : int32 = Fable.Core.RustInterop.emitRustExpr () v1035
            let v1037 : Types.EmitType<Types.std.string.String> = method25(v1036)
            let v1038 : (Types.EmitType<Types.std.string.String> []) = [|v1032; v1037|]
            let v1039 : (Types.EmitType<Types.std.string.String> []) = method12(v1038)
            method50(v1014, v1039)
            let v1040 : Types.EmitType<Types.std.string.String> = method10(v552)
            let v1041 : (Types.EmitType<Types.std.string.String> []) = [|v1040|]
            let v1042 : (Types.EmitType<Types.std.string.String> []) = method12(v1041)
            method38(v255, v1042)
            let struct (v1043 : string, v1044 : string, v1045 : string, v1046 : bool) = method2()
            let v1047 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
            let v1048 : int64 = Fable.Core.RustInterop.emitRustExpr v1047 v18
            let v1049 : string = "std::fs::metadata(v386).unwrap().modified().unwrap()"
            let v1050 : Types.std.time.SystemTime = Fable.Core.RustInterop.emitRustExpr () v1049
            let v1051 : Types.EmitType<Types.std.string.String> = method10(v387)
            let v1052 : string = "format!(\"{}\", v386.display())"
            let v1053 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v1052
            let v1054 : Types.std.string.String = method1(v1053)
            let v1055 : string = "fable_library_rust::String_::fromString(v1054)"
            let v1056 : string = Fable.Core.RustInterop.emitRustExpr () v1055
            let v1057 : Types.EmitType<Types.std.string.String> = method10(v1056)
            let v1058 : string = "start"
            let v1059 : Types.EmitType<Types.std.string.String> = method10(v1058)
            let v1060 : Types.EmitType<Types.std.string.String> = method56(v1050)
            let v1061 : (Types.EmitType<Types.std.string.String> []) = [|v1051; v1057; v1059; v1060|]
            let v1062 : (Types.EmitType<Types.std.string.String> []) = method12(v1061)
            method57(v1048, v1062)
            let v1063 : (int32 []) = [| 0..20 |]
            let v1064 : int32 = v1063.Length
            let v1065 : US1 = US1_0
            let v1066 : Mut1 = {l0 = 0; l1 = v1065} : Mut1
            while method58(v1064, v1066) do
                let v1068 : int32 = v1066.l0
                let v1069 : US1 = v1066.l1
                let v1070 : int32 = v1063.[int v1068]
                let v1097 : US1 =
                    match v1069 with
                    | US1_0 -> (* None *)
                        let v1073 : string = "std::fs::metadata(v386).unwrap().modified().unwrap()"
                        let v1074 : Types.std.time.SystemTime = Fable.Core.RustInterop.emitRustExpr () v1073
                        let v1075 : string = "i"
                        let v1076 : Types.EmitType<Types.std.string.String> = method10(v1075)
                        let v1077 : Types.EmitType<Types.std.string.String> = method25(v1070)
                        let v1078 : string = "last_modified"
                        let v1079 : Types.EmitType<Types.std.string.String> = method10(v1078)
                        let v1080 : Types.EmitType<Types.std.string.String> = method56(v1074)
                        let v1081 : (Types.EmitType<Types.std.string.String> []) = [|v1076; v1077; v1079; v1080|]
                        let v1082 : (Types.EmitType<Types.std.string.String> []) = method12(v1081)
                        method57(v1048, v1082)
                        let v1083 : string = "v1074 > v1050"
                        let v1084 : bool = Fable.Core.RustInterop.emitRustExpr () v1083
                        if v1084 then
                            let v1085 : string = "std::fs::read_to_string(v386)"
                            let v1086 : Result<Types.std.string.String, Types.std.io.Error> = Fable.Core.RustInterop.emitRustExpr () v1085
                            let v1087 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v1086 v558
                            let v1088 : Types.std.string.String = method1(v1087)
                            let v1089 : string = "fable_library_rust::String_::fromString(v1088)"
                            let v1090 : string = Fable.Core.RustInterop.emitRustExpr () v1089
                            US1_1(v1090)
                        else
                            let v1092 : uint64 = method59()
                            let v1093 : string = "std::thread::sleep(std::time::Duration::from_millis(v1092))"
                            Fable.Core.RustInterop.emitRustExpr () v1093
                            US1_0
                    | US1_1(v1071) -> (* Some *)
                        US1_1(v1071)
                let v1098 : int32 = v1068 + 1
                v1066.l0 <- v1098
                v1066.l1 <- v1097
                ()
            let v1099 : US1 = v1066.l1
            let v1103 : string =
                match v1099 with
                | US1_0 -> (* None *)
                    let v1101 : string = ""
                    v1101
                | US1_1(v1100) -> (* Some *)
                    v1100
            let v1104 : string = "new_fsx_len"
            let v1105 : Types.EmitType<Types.std.string.String> = method10(v1104)
            let v1106 : string = "v1103.len()"
            let v1107 : obj = Fable.Core.RustInterop.emitRustExpr () v1106
            let v1108 : string = "v1107.try_into().unwrap()"
            let v1109 : int32 = Fable.Core.RustInterop.emitRustExpr () v1108
            let v1110 : Types.EmitType<Types.std.string.String> = method25(v1109)
            let v1111 : (Types.EmitType<Types.std.string.String> []) = [|v1105; v1110|]
            let v1112 : (Types.EmitType<Types.std.string.String> []) = method12(v1111)
            method38(v255, v1112)
            let struct (v1113 : string, v1114 : string, v1115 : string, v1116 : bool) = method2()
            let v1117 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
            let v1118 : int64 = Fable.Core.RustInterop.emitRustExpr v1117 v18
            let v1119 : string = "\"Ping\": true"
            let v1120 : string = v494 + v1119
            let v1121 : string = v1120 + v496
            let v1122 : string = v498 + v1121
            let v1123 : string = v1122 + v500
            let v1124 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v1123
            let v1125 : Types.EmitType<Types.std.string.String> = method10(v503)
            let v1126 : string = "v1124.len()"
            let v1127 : obj = Fable.Core.RustInterop.emitRustExpr () v1126
            let v1128 : string = "v1127.try_into().unwrap()"
            let v1129 : int32 = Fable.Core.RustInterop.emitRustExpr () v1128
            let v1130 : Types.EmitType<Types.std.string.String> = method25(v1129)
            let v1131 : (Types.EmitType<Types.std.string.String> []) = [|v1125; v1130|]
            let v1132 : (Types.EmitType<Types.std.string.String> []) = method12(v1131)
            method49(v1118, v1132)
            let struct (v1133 : string, v1134 : string, v1135 : string, v1136 : bool) = method2()
            let v1137 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
            let v1138 : int64 = Fable.Core.RustInterop.emitRustExpr v1137 v18
            let v1139 : Types.EmitType<Types.std.string.String> = method10(v518)
            let v1140 : Types.EmitType<Types.std.string.String> = method10(v520)
            let v1141 : Types.EmitType<Types.std.string.String> = method10(v409)
            let v1142 : Types.EmitType<Types.std.string.String> = method48(v408)
            let v1143 : Types.EmitType<Types.std.string.String> = method10(v524)
            let v1144 : string = "v1124.len()"
            let v1145 : obj = Fable.Core.RustInterop.emitRustExpr () v1144
            let v1146 : string = "v1145.try_into().unwrap()"
            let v1147 : int32 = Fable.Core.RustInterop.emitRustExpr () v1146
            let v1148 : Types.EmitType<Types.std.string.String> = method25(v1147)
            let v1149 : (Types.EmitType<Types.std.string.String> []) = [|v1139; v1140; v1141; v1142; v1143; v1148|]
            let v1150 : (Types.EmitType<Types.std.string.String> []) = method12(v1149)
            method50(v1138, v1150)
            let v1151 : obj = Fable.Core.RustInterop.emitRustExpr () v533
            let v1152 : obj = Fable.Core.RustInterop.emitRustExpr v1151 v535
            let v1153 : string = $"tcp://{v520}:{v408}"
            Fable.Core.RustInterop.emitRustExpr struct (v1152, v1153) v538
            let v1154 : string = $"$0.send($1.as_str(), 0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr struct (v1152, v1124) v1154
            let v1155 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v1152 v540
            Fable.Core.RustInterop.emitRustExpr struct (v1152, v1153) v542
            let v1156 : Types.EmitType<Types.std.string.String> = method10(v543)
            let v1157 : string = "v1155.len()"
            let v1158 : obj = Fable.Core.RustInterop.emitRustExpr () v1157
            let v1159 : string = "v1158.try_into().unwrap()"
            let v1160 : int32 = Fable.Core.RustInterop.emitRustExpr () v1159
            let v1161 : Types.EmitType<Types.std.string.String> = method25(v1160)
            let v1162 : (Types.EmitType<Types.std.string.String> []) = [|v1156; v1161|]
            let v1163 : (Types.EmitType<Types.std.string.String> []) = method12(v1162)
            method50(v1138, v1163)
            let v1164 : Types.EmitType<Types.std.string.String> = method10(v552)
            let v1165 : (Types.EmitType<Types.std.string.String> []) = [|v1164|]
            let v1166 : (Types.EmitType<Types.std.string.String> []) = method12(v1165)
            method38(v255, v1166)
            let v1167 : string = "v442.wait_with_output().unwrap()"
            let v1168 : obj = Fable.Core.RustInterop.emitRustExpr () v1167
            let v1169 : string = "output"
            let v1170 : Types.EmitType<Types.std.string.String> = method10(v1169)
            let v1171 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v1168 v10
            let v1172 : Types.EmitType<Types.std.string.String> = method16(v1171)
            let v1173 : (Types.EmitType<Types.std.string.String> []) = [|v1170; v1172|]
            let v1174 : (Types.EmitType<Types.std.string.String> []) = method12(v1173)
            method38(v255, v1174)
            let v1175 : string = "v249.unwrap_or(v386)"
            let v1176 : Types.std.path.PathBuf = Fable.Core.RustInterop.emitRustExpr () v1175
            let v1177 : string = method18(v1103)
            let v1178 : string = "v1177.as_str()"
            let v1179 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v1178
            let v1180 : string = "std::fs::write(v1176, v1179)"
            let v1181 : Result<unit, Types.std.io.Error> = Fable.Core.RustInterop.emitRustExpr () v1180
            let v1182 : string = "v1181.unwrap()"
            Fable.Core.RustInterop.emitRustExpr () v1182
            let v1183 : string = "> fs_write new_fsx_path; ok"
            let v1184 : Types.EmitType<Types.std.string.String> = method10(v1183)
            let v1185 : (Types.EmitType<Types.std.string.String> []) = [|v1184|]
            let v1186 : (Types.EmitType<Types.std.string.String> []) = method12(v1185)
            method38(v255, v1186)
            let v1187 : string = "fsx.len"
            let v1188 : Types.EmitType<Types.std.string.String> = method10(v1187)
            let v1189 : int32 = v1103.Length
            let v1190 : Types.EmitType<Types.std.string.String> = method25(v1189)
            let v1191 : (Types.EmitType<Types.std.string.String> []) = [|v1188; v1190|]
            let v1192 : (Types.EmitType<Types.std.string.String> []) = method12(v1191)
            method60(v19, v1192)
    let v1193 : string = "cli end"
    let v1194 : Types.EmitType<Types.std.string.String> = method10(v1193)
    let v1195 : string = "???"
    let v1196 : Types.EmitType<Types.std.string.String> = method10(v1195)
    let v1197 : (Types.EmitType<Types.std.string.String> []) = [|v1194; v1196|]
    let v1198 : (Types.EmitType<Types.std.string.String> []) = method12(v1197)
    method60(v19, v1198)
    0
let v0 : (unit -> int32) = closure0()
()
