type [<Struct>] US0 =
    | US0_0
    | US0_1
    | US0_2
    | US0_3
    | US0_4
and UH0 =
    | UH0_0
    | UH0_1 of Types.std.string.String * UH0
and Mut0 = {mutable l0 : UH0}
and UH1 =
    | UH1_0
    | UH1_1 of string * UH1
and [<Struct>] US1 =
    | US1_0 of f0_0 : string
    | US1_1
and Mut1 = {mutable l0 : int32; mutable l1 : US1}
let rec method0 (v0 : Option<Types.std.string.String>) : Option<Types.std.string.String> =
    v0
and method1 (v0 : Types.std.string.String) : Types.std.string.String =
    v0
and closure1 () (v0 : Types.std.string.String) : string =
    let v1 : Types.std.string.String = method1(v0)
    let v2 : string = "fable_library_rust::String_::fromString(v1)"
    let v3 : string = Fable.Core.RustInterop.emitRustExpr () v2
    v3
and method2 () : struct (string * string * string * bool) =
    let v0 : string = ""
    let v1 : obj = v0
    struct (v0, v0, v0, true)
and method3 () : string =
    let v0 : string = "rs-path"
    v0
and method4 (v0 : Option<Types.StaticRef<Types.std.string.String>>) : Option<Types.StaticRef<Types.std.string.String>> =
    v0
and method5 (v0 : Types.StaticRef<Types.std.string.String>) : Types.StaticRef<Types.std.string.String> =
    v0
and method6 (v0 : string) : string =
    v0
and method7 () : string =
    let v0 : string = ""
    v0
and closure2 () (v0 : Types.StaticRef<Types.std.string.String>) : string =
    let v1 : Types.StaticRef<Types.std.string.String> = method5(v0)
    let v2 : string = "*v1"
    let v3 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v2
    let v4 : Types.std.string.String = method1(v3)
    let v5 : string = "fable_library_rust::String_::fromString(v4)"
    let v6 : string = Fable.Core.RustInterop.emitRustExpr () v5
    let v7 : string = "rs-path"
    let v8 : string = "--" + v7 + "="
    let v9 : string = method6(v8)
    let v10 : string = "fable_library_rust::String_::LrcStr::as_str($0)"
    let v11 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr v9 v10
    let v12 : string = "String::from(core::ops::Deref::deref($0))"
    let v13 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v11 v12
    let v14 : string = method7()
    let v15 : string = "fable_library_rust::String_::LrcStr::as_str($0)"
    let v16 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr v14 v15
    let v17 : string = "String::from(core::ops::Deref::deref($0))"
    let v18 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v16 v17
    let v19 : string = method6(v6)
    let v20 : string = "fable_library_rust::String_::LrcStr::as_str($0)"
    let v21 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr v19 v20
    let v22 : string = "String::from(core::ops::Deref::deref($0))"
    let v23 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v21 v22
    let v24 : string = "v23.replace(&v13, &v18)"
    let v25 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v24
    let v26 : Types.std.string.String = method1(v25)
    let v27 : string = "fable_library_rust::String_::fromString(v26)"
    let v28 : string = Fable.Core.RustInterop.emitRustExpr () v27
    v28
and method8 (v0 : Types.std.string.String) : Types.std.string.String =
    v0
and method9 (v0 : Types.std.path.PathBuf) : Types.std.path.PathBuf =
    v0
and method10 (v0 : string) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "String::from(core::ops::Deref::deref($0))"
    let v2 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v0 v1
    let v3 : Types.EmitType<Types.std.string.String> = v2 |> unbox<Types.EmitType<Types.std.string.String>>
    v3
and method11 (v0 : Types.std.path.PathBuf) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "format!(\"{:?}\", $0)"
    let v2 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v0 v1
    let v3 : Types.EmitType<Types.std.string.String> = v2 |> unbox<Types.EmitType<Types.std.string.String>>
    v3
and method13 (v0 : int32, v1 : string) : string =
    let v2 : int32 = String.length v1
    let v3 : bool = v2 < v0
    if v3 then
        let v4 : string = $"0{v1}"
        method13(v0, v4)
    else
        v1
and method14 (v0 : uint8) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "format!(\"{:?}\", $0)"
    let v2 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v0 v1
    let v3 : Types.EmitType<Types.std.string.String> = v2 |> unbox<Types.EmitType<Types.std.string.String>>
    v3
and method15 (v0 : Types.std.string.String) : Types.EmitType<Types.std.string.String> =
    let v1 : Types.EmitType<Types.std.string.String> = v0 |> unbox<Types.EmitType<Types.std.string.String>>
    v1
and method16 (v0 : (Types.EmitType<Types.std.string.String> [])) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "$0"
    let v2 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v0 v1
    let v3 : string = "core::ops::Deref::deref(v2)"
    let v4 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v3
    let v5 : obj = v4
    let v6 : string = "format!(\"{:?}\", $0)"
    let v7 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v5 v6
    let v8 : Types.EmitType<Types.std.string.String> = v7 |> unbox<Types.EmitType<Types.std.string.String>>
    v8
and method17 (v0 : string) : string =
    v0
and method18 () : string =
    let v0 : string = "$1=$2"
    v0
and method19 () : string =
    let v0 : string = "[$1]"
    v0
and method20 () : string =
    let v0 : string = "\""
    v0
and method21 () : string =
    let v0 : string = " "
    v0
and method12 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.RustInterop.emitRustExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method13(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.RustInterop.emitRustExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method10(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method10(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method10(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method14(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method10(v18)
    let v20 : US0 = US0_1
    let v21 : string = "format!(\"{:?}\", $0)"
    let v22 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v20 v21
    let v23 : Types.EmitType<Types.std.string.String> = method15(v22)
    let v24 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v23|]
    let v25 : Types.EmitType<Types.std.string.String> = method16(v24)
    let v26 : string = "> post_fsx_rs_build ()"
    let v27 : Types.EmitType<Types.std.string.String> = method10(v26)
    let v28 : (Types.EmitType<Types.std.string.String> []) = [|v27|]
    let v29 : string = "$0"
    let v30 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v28 v29
    let v31 : string = "core::ops::Deref::deref(v30)"
    let v32 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v31
    let v33 : obj = v32
    let v34 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v33 v21
    let v35 : Types.EmitType<Types.std.string.String> = v34 |> unbox<Types.EmitType<Types.std.string.String>>
    let v36 : string = "format!(\"{}\", $0)"
    let v37 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v35 v36
    let v38 : string = (v37).ToString ()
    let v39 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v40 : string = "r#\"" + v39 + "\"#"
    let v41 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v40
    let v42 : string = "regex::RegexBuilder::new($0)"
    let v43 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v41 v42
    let v44 : string = "$0.build().unwrap()"
    let v45 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v43 v44
    let v46 : string = method17(v38)
    let v47 : string = "v46.as_str()"
    let v48 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v47
    let v49 : string = method18()
    let v50 : string = "v49.as_str()"
    let v51 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v50
    let v52 : string = "$0.replace_all(&$1, $2).to_string()"
    let v53 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v45, v48, v51) v52
    let v54 : Types.std.string.String = method1(v53)
    let v55 : string = "fable_library_rust::String_::fromString(v54)"
    let v56 : string = Fable.Core.RustInterop.emitRustExpr () v55
    let v57 : string = "\\[\"(.*?)\"\\]"
    let v58 : string = "r#\"" + v57 + "\"#"
    let v59 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v58
    let v60 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v59 v42
    let v61 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v60 v44
    let v62 : string = method17(v56)
    let v63 : string = "v62.as_str()"
    let v64 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v63
    let v65 : string = method19()
    let v66 : string = "v65.as_str()"
    let v67 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v66
    let v68 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v61, v64, v67) v52
    let v69 : Types.std.string.String = method1(v68)
    let v70 : string = "fable_library_rust::String_::fromString(v69)"
    let v71 : string = Fable.Core.RustInterop.emitRustExpr () v70
    let v72 : string = "\\\\\""
    let v73 : string = "r#\"" + v72 + "\"#"
    let v74 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v73
    let v75 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v74 v42
    let v76 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v75 v44
    let v77 : string = method17(v71)
    let v78 : string = "v77.as_str()"
    let v79 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v78
    let v80 : string = method20()
    let v81 : string = "v80.as_str()"
    let v82 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v81
    let v83 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v76, v79, v82) v52
    let v84 : Types.std.string.String = method1(v83)
    let v85 : string = "fable_library_rust::String_::fromString(v84)"
    let v86 : string = Fable.Core.RustInterop.emitRustExpr () v85
    let v87 : string = ", "
    let v88 : string = "r#\"" + v87 + "\"#"
    let v89 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v88
    let v90 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v89 v42
    let v91 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v90 v44
    let v92 : string = method17(v86)
    let v93 : string = "v92.as_str()"
    let v94 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v93
    let v95 : string = method21()
    let v96 : string = "v95.as_str()"
    let v97 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v96
    let v98 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v91, v94, v97) v52
    let v99 : Types.std.string.String = method1(v98)
    let v100 : string = "fable_library_rust::String_::fromString(v99)"
    let v101 : string = Fable.Core.RustInterop.emitRustExpr () v100
    let v102 : Types.EmitType<Types.std.string.String> = method10(v101)
    let v103 : string = "$0"
    let v104 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v1 v103
    let v105 : string = "core::ops::Deref::deref(v104)"
    let v106 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v105
    let v107 : obj = v106
    let v108 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v107 v21
    let v109 : Types.EmitType<Types.std.string.String> = v108 |> unbox<Types.EmitType<Types.std.string.String>>
    let v110 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v109 v36
    let v111 : string = (v110).ToString ()
    let v112 : string = "r#\"" + v39 + "\"#"
    let v113 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v112
    let v114 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v113 v42
    let v115 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v114 v44
    let v116 : string = method17(v111)
    let v117 : string = "v116.as_str()"
    let v118 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v117
    let v119 : string = method18()
    let v120 : string = "v119.as_str()"
    let v121 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v120
    let v122 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v115, v118, v121) v52
    let v123 : Types.std.string.String = method1(v122)
    let v124 : string = "fable_library_rust::String_::fromString(v123)"
    let v125 : string = Fable.Core.RustInterop.emitRustExpr () v124
    let v126 : string = "r#\"" + v57 + "\"#"
    let v127 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v126
    let v128 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v127 v42
    let v129 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v128 v44
    let v130 : string = method17(v125)
    let v131 : string = "v130.as_str()"
    let v132 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v131
    let v133 : string = method19()
    let v134 : string = "v133.as_str()"
    let v135 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v134
    let v136 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v129, v132, v135) v52
    let v137 : Types.std.string.String = method1(v136)
    let v138 : string = "fable_library_rust::String_::fromString(v137)"
    let v139 : string = Fable.Core.RustInterop.emitRustExpr () v138
    let v140 : string = "r#\"" + v72 + "\"#"
    let v141 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v140
    let v142 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v141 v42
    let v143 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v142 v44
    let v144 : string = method17(v139)
    let v145 : string = "v144.as_str()"
    let v146 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v145
    let v147 : string = method20()
    let v148 : string = "v147.as_str()"
    let v149 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v148
    let v150 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v143, v146, v149) v52
    let v151 : Types.std.string.String = method1(v150)
    let v152 : string = "fable_library_rust::String_::fromString(v151)"
    let v153 : string = Fable.Core.RustInterop.emitRustExpr () v152
    let v154 : string = "r#\"" + v87 + "\"#"
    let v155 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v154
    let v156 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v155 v42
    let v157 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v156 v44
    let v158 : string = method17(v153)
    let v159 : string = "v158.as_str()"
    let v160 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v159
    let v161 : string = method21()
    let v162 : string = "v161.as_str()"
    let v163 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v162
    let v164 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v157, v160, v163) v52
    let v165 : Types.std.string.String = method1(v164)
    let v166 : string = "fable_library_rust::String_::fromString(v165)"
    let v167 : string = Fable.Core.RustInterop.emitRustExpr () v166
    let v168 : Types.EmitType<Types.std.string.String> = method10(v167)
    let v169 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v25 v36
    let v170 : string = (v169).ToString ()
    let v171 : string = "r#\"" + v39 + "\"#"
    let v172 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v171
    let v173 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v172 v42
    let v174 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v173 v44
    let v175 : string = method17(v170)
    let v176 : string = "v175.as_str()"
    let v177 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v176
    let v178 : string = method18()
    let v179 : string = "v178.as_str()"
    let v180 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v179
    let v181 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v174, v177, v180) v52
    let v182 : Types.std.string.String = method1(v181)
    let v183 : string = "fable_library_rust::String_::fromString(v182)"
    let v184 : string = Fable.Core.RustInterop.emitRustExpr () v183
    let v185 : string = "r#\"" + v57 + "\"#"
    let v186 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v185
    let v187 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v186 v42
    let v188 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v187 v44
    let v189 : string = method17(v184)
    let v190 : string = "v189.as_str()"
    let v191 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v190
    let v192 : string = method19()
    let v193 : string = "v192.as_str()"
    let v194 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v193
    let v195 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v188, v191, v194) v52
    let v196 : Types.std.string.String = method1(v195)
    let v197 : string = "fable_library_rust::String_::fromString(v196)"
    let v198 : string = Fable.Core.RustInterop.emitRustExpr () v197
    let v199 : string = "r#\"" + v72 + "\"#"
    let v200 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v199
    let v201 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v200 v42
    let v202 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v201 v44
    let v203 : string = method17(v198)
    let v204 : string = "v203.as_str()"
    let v205 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v204
    let v206 : string = method20()
    let v207 : string = "v206.as_str()"
    let v208 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v207
    let v209 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v202, v205, v208) v52
    let v210 : Types.std.string.String = method1(v209)
    let v211 : string = "fable_library_rust::String_::fromString(v210)"
    let v212 : string = Fable.Core.RustInterop.emitRustExpr () v211
    let v213 : string = "r#\"" + v87 + "\"#"
    let v214 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v213
    let v215 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v214 v42
    let v216 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v215 v44
    let v217 : string = method17(v212)
    let v218 : string = "v217.as_str()"
    let v219 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v218
    let v220 : string = method21()
    let v221 : string = "v220.as_str()"
    let v222 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v221
    let v223 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v216, v219, v222) v52
    let v224 : Types.std.string.String = method1(v223)
    let v225 : string = "fable_library_rust::String_::fromString(v224)"
    let v226 : string = Fable.Core.RustInterop.emitRustExpr () v225
    let v227 : Types.EmitType<Types.std.string.String> = method10(v226)
    let v228 : string = "666666"
    let v229 : string = v228.Substring (0, 2)
    let v230 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v231 : uint8 = Fable.Core.RustInterop.emitRustExpr v229 v230
    let v232 : string = v228.Substring (2, 4)
    let v233 : uint8 = Fable.Core.RustInterop.emitRustExpr v232 v230
    let v234 : string = v228.Substring (4, 6)
    let v235 : uint8 = Fable.Core.RustInterop.emitRustExpr v234 v230
    let v236 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v237 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v168, v231, v233, v235) v236
    let v238 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v237 v36
    let v239 : string = "385779"
    let v240 : string = v239.Substring (0, 2)
    let v241 : uint8 = Fable.Core.RustInterop.emitRustExpr v240 v230
    let v242 : string = v239.Substring (2, 4)
    let v243 : uint8 = Fable.Core.RustInterop.emitRustExpr v242 v230
    let v244 : string = v239.Substring (4, 6)
    let v245 : uint8 = Fable.Core.RustInterop.emitRustExpr v244 v230
    let v246 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v227, v241, v243, v245) v236
    let v247 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v246 v36
    let v248 : string = $"{v102} {v238} {v247}"
    System.Console.WriteLine v248
    ()
and method22 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.RustInterop.emitRustExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method13(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.RustInterop.emitRustExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method10(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method10(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method10(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method14(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method10(v18)
    let v20 : US0 = US0_1
    let v21 : string = "format!(\"{:?}\", $0)"
    let v22 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v20 v21
    let v23 : Types.EmitType<Types.std.string.String> = method15(v22)
    let v24 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v23|]
    let v25 : Types.EmitType<Types.std.string.String> = method16(v24)
    let v26 : string = "> read_lines ()"
    let v27 : Types.EmitType<Types.std.string.String> = method10(v26)
    let v28 : (Types.EmitType<Types.std.string.String> []) = [|v27|]
    let v29 : string = "$0"
    let v30 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v28 v29
    let v31 : string = "core::ops::Deref::deref(v30)"
    let v32 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v31
    let v33 : obj = v32
    let v34 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v33 v21
    let v35 : Types.EmitType<Types.std.string.String> = v34 |> unbox<Types.EmitType<Types.std.string.String>>
    let v36 : string = "format!(\"{}\", $0)"
    let v37 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v35 v36
    let v38 : string = (v37).ToString ()
    let v39 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v40 : string = "r#\"" + v39 + "\"#"
    let v41 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v40
    let v42 : string = "regex::RegexBuilder::new($0)"
    let v43 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v41 v42
    let v44 : string = "$0.build().unwrap()"
    let v45 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v43 v44
    let v46 : string = method17(v38)
    let v47 : string = "v46.as_str()"
    let v48 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v47
    let v49 : string = method18()
    let v50 : string = "v49.as_str()"
    let v51 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v50
    let v52 : string = "$0.replace_all(&$1, $2).to_string()"
    let v53 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v45, v48, v51) v52
    let v54 : Types.std.string.String = method1(v53)
    let v55 : string = "fable_library_rust::String_::fromString(v54)"
    let v56 : string = Fable.Core.RustInterop.emitRustExpr () v55
    let v57 : string = "\\[\"(.*?)\"\\]"
    let v58 : string = "r#\"" + v57 + "\"#"
    let v59 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v58
    let v60 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v59 v42
    let v61 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v60 v44
    let v62 : string = method17(v56)
    let v63 : string = "v62.as_str()"
    let v64 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v63
    let v65 : string = method19()
    let v66 : string = "v65.as_str()"
    let v67 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v66
    let v68 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v61, v64, v67) v52
    let v69 : Types.std.string.String = method1(v68)
    let v70 : string = "fable_library_rust::String_::fromString(v69)"
    let v71 : string = Fable.Core.RustInterop.emitRustExpr () v70
    let v72 : string = "\\\\\""
    let v73 : string = "r#\"" + v72 + "\"#"
    let v74 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v73
    let v75 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v74 v42
    let v76 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v75 v44
    let v77 : string = method17(v71)
    let v78 : string = "v77.as_str()"
    let v79 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v78
    let v80 : string = method20()
    let v81 : string = "v80.as_str()"
    let v82 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v81
    let v83 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v76, v79, v82) v52
    let v84 : Types.std.string.String = method1(v83)
    let v85 : string = "fable_library_rust::String_::fromString(v84)"
    let v86 : string = Fable.Core.RustInterop.emitRustExpr () v85
    let v87 : string = ", "
    let v88 : string = "r#\"" + v87 + "\"#"
    let v89 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v88
    let v90 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v89 v42
    let v91 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v90 v44
    let v92 : string = method17(v86)
    let v93 : string = "v92.as_str()"
    let v94 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v93
    let v95 : string = method21()
    let v96 : string = "v95.as_str()"
    let v97 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v96
    let v98 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v91, v94, v97) v52
    let v99 : Types.std.string.String = method1(v98)
    let v100 : string = "fable_library_rust::String_::fromString(v99)"
    let v101 : string = Fable.Core.RustInterop.emitRustExpr () v100
    let v102 : Types.EmitType<Types.std.string.String> = method10(v101)
    let v103 : string = "$0"
    let v104 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v1 v103
    let v105 : string = "core::ops::Deref::deref(v104)"
    let v106 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v105
    let v107 : obj = v106
    let v108 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v107 v21
    let v109 : Types.EmitType<Types.std.string.String> = v108 |> unbox<Types.EmitType<Types.std.string.String>>
    let v110 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v109 v36
    let v111 : string = (v110).ToString ()
    let v112 : string = "r#\"" + v39 + "\"#"
    let v113 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v112
    let v114 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v113 v42
    let v115 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v114 v44
    let v116 : string = method17(v111)
    let v117 : string = "v116.as_str()"
    let v118 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v117
    let v119 : string = method18()
    let v120 : string = "v119.as_str()"
    let v121 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v120
    let v122 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v115, v118, v121) v52
    let v123 : Types.std.string.String = method1(v122)
    let v124 : string = "fable_library_rust::String_::fromString(v123)"
    let v125 : string = Fable.Core.RustInterop.emitRustExpr () v124
    let v126 : string = "r#\"" + v57 + "\"#"
    let v127 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v126
    let v128 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v127 v42
    let v129 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v128 v44
    let v130 : string = method17(v125)
    let v131 : string = "v130.as_str()"
    let v132 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v131
    let v133 : string = method19()
    let v134 : string = "v133.as_str()"
    let v135 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v134
    let v136 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v129, v132, v135) v52
    let v137 : Types.std.string.String = method1(v136)
    let v138 : string = "fable_library_rust::String_::fromString(v137)"
    let v139 : string = Fable.Core.RustInterop.emitRustExpr () v138
    let v140 : string = "r#\"" + v72 + "\"#"
    let v141 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v140
    let v142 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v141 v42
    let v143 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v142 v44
    let v144 : string = method17(v139)
    let v145 : string = "v144.as_str()"
    let v146 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v145
    let v147 : string = method20()
    let v148 : string = "v147.as_str()"
    let v149 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v148
    let v150 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v143, v146, v149) v52
    let v151 : Types.std.string.String = method1(v150)
    let v152 : string = "fable_library_rust::String_::fromString(v151)"
    let v153 : string = Fable.Core.RustInterop.emitRustExpr () v152
    let v154 : string = "r#\"" + v87 + "\"#"
    let v155 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v154
    let v156 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v155 v42
    let v157 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v156 v44
    let v158 : string = method17(v153)
    let v159 : string = "v158.as_str()"
    let v160 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v159
    let v161 : string = method21()
    let v162 : string = "v161.as_str()"
    let v163 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v162
    let v164 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v157, v160, v163) v52
    let v165 : Types.std.string.String = method1(v164)
    let v166 : string = "fable_library_rust::String_::fromString(v165)"
    let v167 : string = Fable.Core.RustInterop.emitRustExpr () v166
    let v168 : Types.EmitType<Types.std.string.String> = method10(v167)
    let v169 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v25 v36
    let v170 : string = (v169).ToString ()
    let v171 : string = "r#\"" + v39 + "\"#"
    let v172 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v171
    let v173 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v172 v42
    let v174 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v173 v44
    let v175 : string = method17(v170)
    let v176 : string = "v175.as_str()"
    let v177 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v176
    let v178 : string = method18()
    let v179 : string = "v178.as_str()"
    let v180 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v179
    let v181 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v174, v177, v180) v52
    let v182 : Types.std.string.String = method1(v181)
    let v183 : string = "fable_library_rust::String_::fromString(v182)"
    let v184 : string = Fable.Core.RustInterop.emitRustExpr () v183
    let v185 : string = "r#\"" + v57 + "\"#"
    let v186 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v185
    let v187 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v186 v42
    let v188 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v187 v44
    let v189 : string = method17(v184)
    let v190 : string = "v189.as_str()"
    let v191 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v190
    let v192 : string = method19()
    let v193 : string = "v192.as_str()"
    let v194 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v193
    let v195 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v188, v191, v194) v52
    let v196 : Types.std.string.String = method1(v195)
    let v197 : string = "fable_library_rust::String_::fromString(v196)"
    let v198 : string = Fable.Core.RustInterop.emitRustExpr () v197
    let v199 : string = "r#\"" + v72 + "\"#"
    let v200 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v199
    let v201 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v200 v42
    let v202 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v201 v44
    let v203 : string = method17(v198)
    let v204 : string = "v203.as_str()"
    let v205 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v204
    let v206 : string = method20()
    let v207 : string = "v206.as_str()"
    let v208 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v207
    let v209 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v202, v205, v208) v52
    let v210 : Types.std.string.String = method1(v209)
    let v211 : string = "fable_library_rust::String_::fromString(v210)"
    let v212 : string = Fable.Core.RustInterop.emitRustExpr () v211
    let v213 : string = "r#\"" + v87 + "\"#"
    let v214 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v213
    let v215 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v214 v42
    let v216 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v215 v44
    let v217 : string = method17(v212)
    let v218 : string = "v217.as_str()"
    let v219 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v218
    let v220 : string = method21()
    let v221 : string = "v220.as_str()"
    let v222 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v221
    let v223 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v216, v219, v222) v52
    let v224 : Types.std.string.String = method1(v223)
    let v225 : string = "fable_library_rust::String_::fromString(v224)"
    let v226 : string = Fable.Core.RustInterop.emitRustExpr () v225
    let v227 : Types.EmitType<Types.std.string.String> = method10(v226)
    let v228 : string = "881749"
    let v229 : string = v228.Substring (0, 2)
    let v230 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v231 : uint8 = Fable.Core.RustInterop.emitRustExpr v229 v230
    let v232 : string = v228.Substring (2, 4)
    let v233 : uint8 = Fable.Core.RustInterop.emitRustExpr v232 v230
    let v234 : string = v228.Substring (4, 6)
    let v235 : uint8 = Fable.Core.RustInterop.emitRustExpr v234 v230
    let v236 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v237 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v168, v231, v233, v235) v236
    let v238 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v237 v36
    let v239 : string = "385779"
    let v240 : string = v239.Substring (0, 2)
    let v241 : uint8 = Fable.Core.RustInterop.emitRustExpr v240 v230
    let v242 : string = v239.Substring (2, 4)
    let v243 : uint8 = Fable.Core.RustInterop.emitRustExpr v242 v230
    let v244 : string = v239.Substring (4, 6)
    let v245 : uint8 = Fable.Core.RustInterop.emitRustExpr v244 v230
    let v246 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v227, v241, v243, v245) v236
    let v247 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v246 v36
    let v248 : string = $"{v102} {v238} {v247}"
    System.Console.WriteLine v248
    ()
and method24 (v0 : int32) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "format!(\"{:?}\", $0)"
    let v2 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v0 v1
    let v3 : Types.EmitType<Types.std.string.String> = v2 |> unbox<Types.EmitType<Types.std.string.String>>
    v3
and method25 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    ()
and closure3 (v0 : int64, v1 : Mut0) (v2 : Types.Vec<uint8>) : Result<bool, Types.std.io.Error> =
    let v3 : string = "line len"
    let v4 : Types.EmitType<Types.std.string.String> = method10(v3)
    let v5 : string = "v2.len()"
    let v6 : obj = Fable.Core.RustInterop.emitRustExpr () v5
    let v7 : string = "v6.try_into().unwrap()"
    let v8 : int32 = Fable.Core.RustInterop.emitRustExpr () v7
    let v9 : Types.EmitType<Types.std.string.String> = method24(v8)
    let v10 : (Types.EmitType<Types.std.string.String> []) = [|v4; v9|]
    method25(v0, v10)
    let v11 : string = "v2.to_owned()"
    let v12 : Types.Vec<uint8> = Fable.Core.RustInterop.emitRustExpr () v11
    let v13 : string = "std::string::String::from_utf8(v12).unwrap()"
    let v14 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v13
    let v15 : UH0 = v1.l0
    let v16 : UH0 = UH0_1(v14, v15)
    v1.l0 <- v16
    let v17 : Result<bool, Types.std.io.Error> = Ok true
    v17
and method23 (v0 : int64, v1 : Mut0) : (Types.Vec<uint8> -> Result<bool, Types.std.io.Error>) =
    closure3(v0, v1)
and method26 (v0 : UH0, v1 : UH0) : UH0 =
    match v0 with
    | UH0_1(v2, v3) -> (* Cons *)
        let v4 : UH0 = UH0_1(v2, v1)
        method26(v3, v4)
    | UH0_0 -> (* Nil *)
        v1
and method27 (v0 : UH0, v1 : UH1) : UH1 =
    match v0 with
    | UH0_1(v2, v3) -> (* Cons *)
        let v4 : UH1 = method27(v3, v1)
        let v5 : Types.std.string.String = method1(v2)
        let v6 : string = "fable_library_rust::String_::fromString(v5)"
        let v7 : string = Fable.Core.RustInterop.emitRustExpr () v6
        UH1_1(v7, v4)
    | UH0_0 -> (* Nil *)
        v1
and method28 (v0 : UH1, v1 : int32) : int32 =
    match v0 with
    | UH1_1(v2, v3) -> (* Cons *)
        let v4 : int32 = v1 + 1
        method28(v3, v4)
    | UH1_0 -> (* Nil *)
        v1
and method30 () : string =
    let v0 : string = "/node_modules/"
    v0
and method31 () : string =
    let v0 : string = ".cs"
    v0
and method29 (v0 : int64, v1 : UH1, v2 : int32, v3 : UH1) : struct (int32 * UH1) =
    match v1 with
    | UH1_1(v4, v5) -> (* Cons *)
        let v6 : string = method30()
        let v7 : string = "fable_library_rust::String_::LrcStr::as_str($0)"
        let v8 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr v6 v7
        let v9 : string = "String::from(core::ops::Deref::deref($0))"
        let v10 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v8 v9
        let v11 : string = "v4.contains(&v10)"
        let v12 : bool = Fable.Core.RustInterop.emitRustExpr () v11
        let v20 : bool =
            if v12 then
                let v13 : string = method31()
                let v14 : string = "fable_library_rust::String_::LrcStr::as_str($0)"
                let v15 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr v13 v14
                let v16 : string = "String::from(core::ops::Deref::deref($0))"
                let v17 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v15 v16
                let v18 : string = "v4.contains(&v17)"
                let v19 : bool = Fable.Core.RustInterop.emitRustExpr () v18
                v19
            else
                false
        let struct (v35 : int32, v36 : UH1) =
            if v20 then
                let v21 : string = "found line. removing."
                let v22 : Types.EmitType<Types.std.string.String> = method10(v21)
                let v23 : string = " line"
                let v24 : Types.EmitType<Types.std.string.String> = method10(v23)
                let v25 : Types.EmitType<Types.std.string.String> = method10(v4)
                let v26 : (Types.EmitType<Types.std.string.String> []) = [|v22; v24; v25|]
                method12(v0, v26)
                struct (1, v3)
            else
                let v27 : bool = 0 = v2
                if v27 then
                    let v28 : UH1 = UH1_1(v4, v3)
                    struct (0, v28)
                else
                    let v29 : bool = 2 = v2
                    if v29 then
                        struct (0, v3)
                    else
                        let v30 : int32 = v2 + 1
                        struct (v30, v3)
        method29(v0, v5, v35, v36)
    | UH1_0 -> (* Nil *)
        struct (v2, v3)
and method32 (v0 : UH1, v1 : UH1) : UH1 =
    match v0 with
    | UH1_1(v2, v3) -> (* Cons *)
        let v4 : UH1 = UH1_1(v2, v1)
        method32(v3, v4)
    | UH1_0 -> (* Nil *)
        v1
and method33 (v0 : UH1, v1 : string) : string =
    match v0 with
    | UH1_1(v2, v3) -> (* Cons *)
        let v4 : string = v1 + v2
        method33(v3, v4)
    | UH1_0 -> (* Nil *)
        v1
and method34 () : string =
    let v0 : string = "spi-path"
    v0
and closure4 () (v0 : Types.StaticRef<Types.std.string.String>) : string =
    let v1 : Types.StaticRef<Types.std.string.String> = method5(v0)
    let v2 : string = "*v1"
    let v3 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v2
    let v4 : Types.std.string.String = method1(v3)
    let v5 : string = "fable_library_rust::String_::fromString(v4)"
    let v6 : string = Fable.Core.RustInterop.emitRustExpr () v5
    let v7 : string = "spi-path"
    let v8 : string = "--" + v7 + "="
    let v9 : string = method6(v8)
    let v10 : string = "fable_library_rust::String_::LrcStr::as_str($0)"
    let v11 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr v9 v10
    let v12 : string = "String::from(core::ops::Deref::deref($0))"
    let v13 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v11 v12
    let v14 : string = method7()
    let v15 : string = "fable_library_rust::String_::LrcStr::as_str($0)"
    let v16 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr v14 v15
    let v17 : string = "String::from(core::ops::Deref::deref($0))"
    let v18 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v16 v17
    let v19 : string = method6(v6)
    let v20 : string = "fable_library_rust::String_::LrcStr::as_str($0)"
    let v21 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr v19 v20
    let v22 : string = "String::from(core::ops::Deref::deref($0))"
    let v23 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v21 v22
    let v24 : string = "v23.replace(&v13, &v18)"
    let v25 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v24
    let v26 : Types.std.string.String = method1(v25)
    let v27 : string = "fable_library_rust::String_::fromString(v26)"
    let v28 : string = Fable.Core.RustInterop.emitRustExpr () v27
    v28
and method35 () : string =
    let v0 : string = "fsx-path"
    v0
and method36 (v0 : Types.StaticRef<Types.std.string.String>) : Types.StaticRef<Types.std.string.String> =
    v0
and closure5 () (v0 : Types.StaticRef<Types.std.string.String>) : Types.std.path.PathBuf =
    let v1 : Types.StaticRef<Types.std.string.String> = method36(v0)
    let v2 : string = "std::path::PathBuf::from(v1)"
    let v3 : Types.std.path.PathBuf = Fable.Core.RustInterop.emitRustExpr () v2
    v3
and method37 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.RustInterop.emitRustExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method13(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.RustInterop.emitRustExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method10(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method10(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method10(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method14(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method10(v18)
    let v20 : US0 = US0_1
    let v21 : string = "format!(\"{:?}\", $0)"
    let v22 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v20 v21
    let v23 : Types.EmitType<Types.std.string.String> = method15(v22)
    let v24 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v23|]
    let v25 : Types.EmitType<Types.std.string.String> = method16(v24)
    let v26 : string = "> spi_to_fsx ()"
    let v27 : Types.EmitType<Types.std.string.String> = method10(v26)
    let v28 : (Types.EmitType<Types.std.string.String> []) = [|v27|]
    let v29 : string = "$0"
    let v30 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v28 v29
    let v31 : string = "core::ops::Deref::deref(v30)"
    let v32 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v31
    let v33 : obj = v32
    let v34 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v33 v21
    let v35 : Types.EmitType<Types.std.string.String> = v34 |> unbox<Types.EmitType<Types.std.string.String>>
    let v36 : string = "format!(\"{}\", $0)"
    let v37 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v35 v36
    let v38 : string = (v37).ToString ()
    let v39 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v40 : string = "r#\"" + v39 + "\"#"
    let v41 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v40
    let v42 : string = "regex::RegexBuilder::new($0)"
    let v43 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v41 v42
    let v44 : string = "$0.build().unwrap()"
    let v45 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v43 v44
    let v46 : string = method17(v38)
    let v47 : string = "v46.as_str()"
    let v48 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v47
    let v49 : string = method18()
    let v50 : string = "v49.as_str()"
    let v51 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v50
    let v52 : string = "$0.replace_all(&$1, $2).to_string()"
    let v53 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v45, v48, v51) v52
    let v54 : Types.std.string.String = method1(v53)
    let v55 : string = "fable_library_rust::String_::fromString(v54)"
    let v56 : string = Fable.Core.RustInterop.emitRustExpr () v55
    let v57 : string = "\\[\"(.*?)\"\\]"
    let v58 : string = "r#\"" + v57 + "\"#"
    let v59 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v58
    let v60 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v59 v42
    let v61 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v60 v44
    let v62 : string = method17(v56)
    let v63 : string = "v62.as_str()"
    let v64 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v63
    let v65 : string = method19()
    let v66 : string = "v65.as_str()"
    let v67 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v66
    let v68 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v61, v64, v67) v52
    let v69 : Types.std.string.String = method1(v68)
    let v70 : string = "fable_library_rust::String_::fromString(v69)"
    let v71 : string = Fable.Core.RustInterop.emitRustExpr () v70
    let v72 : string = "\\\\\""
    let v73 : string = "r#\"" + v72 + "\"#"
    let v74 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v73
    let v75 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v74 v42
    let v76 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v75 v44
    let v77 : string = method17(v71)
    let v78 : string = "v77.as_str()"
    let v79 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v78
    let v80 : string = method20()
    let v81 : string = "v80.as_str()"
    let v82 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v81
    let v83 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v76, v79, v82) v52
    let v84 : Types.std.string.String = method1(v83)
    let v85 : string = "fable_library_rust::String_::fromString(v84)"
    let v86 : string = Fable.Core.RustInterop.emitRustExpr () v85
    let v87 : string = ", "
    let v88 : string = "r#\"" + v87 + "\"#"
    let v89 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v88
    let v90 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v89 v42
    let v91 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v90 v44
    let v92 : string = method17(v86)
    let v93 : string = "v92.as_str()"
    let v94 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v93
    let v95 : string = method21()
    let v96 : string = "v95.as_str()"
    let v97 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v96
    let v98 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v91, v94, v97) v52
    let v99 : Types.std.string.String = method1(v98)
    let v100 : string = "fable_library_rust::String_::fromString(v99)"
    let v101 : string = Fable.Core.RustInterop.emitRustExpr () v100
    let v102 : Types.EmitType<Types.std.string.String> = method10(v101)
    let v103 : string = "$0"
    let v104 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v1 v103
    let v105 : string = "core::ops::Deref::deref(v104)"
    let v106 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v105
    let v107 : obj = v106
    let v108 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v107 v21
    let v109 : Types.EmitType<Types.std.string.String> = v108 |> unbox<Types.EmitType<Types.std.string.String>>
    let v110 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v109 v36
    let v111 : string = (v110).ToString ()
    let v112 : string = "r#\"" + v39 + "\"#"
    let v113 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v112
    let v114 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v113 v42
    let v115 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v114 v44
    let v116 : string = method17(v111)
    let v117 : string = "v116.as_str()"
    let v118 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v117
    let v119 : string = method18()
    let v120 : string = "v119.as_str()"
    let v121 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v120
    let v122 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v115, v118, v121) v52
    let v123 : Types.std.string.String = method1(v122)
    let v124 : string = "fable_library_rust::String_::fromString(v123)"
    let v125 : string = Fable.Core.RustInterop.emitRustExpr () v124
    let v126 : string = "r#\"" + v57 + "\"#"
    let v127 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v126
    let v128 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v127 v42
    let v129 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v128 v44
    let v130 : string = method17(v125)
    let v131 : string = "v130.as_str()"
    let v132 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v131
    let v133 : string = method19()
    let v134 : string = "v133.as_str()"
    let v135 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v134
    let v136 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v129, v132, v135) v52
    let v137 : Types.std.string.String = method1(v136)
    let v138 : string = "fable_library_rust::String_::fromString(v137)"
    let v139 : string = Fable.Core.RustInterop.emitRustExpr () v138
    let v140 : string = "r#\"" + v72 + "\"#"
    let v141 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v140
    let v142 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v141 v42
    let v143 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v142 v44
    let v144 : string = method17(v139)
    let v145 : string = "v144.as_str()"
    let v146 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v145
    let v147 : string = method20()
    let v148 : string = "v147.as_str()"
    let v149 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v148
    let v150 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v143, v146, v149) v52
    let v151 : Types.std.string.String = method1(v150)
    let v152 : string = "fable_library_rust::String_::fromString(v151)"
    let v153 : string = Fable.Core.RustInterop.emitRustExpr () v152
    let v154 : string = "r#\"" + v87 + "\"#"
    let v155 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v154
    let v156 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v155 v42
    let v157 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v156 v44
    let v158 : string = method17(v153)
    let v159 : string = "v158.as_str()"
    let v160 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v159
    let v161 : string = method21()
    let v162 : string = "v161.as_str()"
    let v163 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v162
    let v164 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v157, v160, v163) v52
    let v165 : Types.std.string.String = method1(v164)
    let v166 : string = "fable_library_rust::String_::fromString(v165)"
    let v167 : string = Fable.Core.RustInterop.emitRustExpr () v166
    let v168 : Types.EmitType<Types.std.string.String> = method10(v167)
    let v169 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v25 v36
    let v170 : string = (v169).ToString ()
    let v171 : string = "r#\"" + v39 + "\"#"
    let v172 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v171
    let v173 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v172 v42
    let v174 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v173 v44
    let v175 : string = method17(v170)
    let v176 : string = "v175.as_str()"
    let v177 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v176
    let v178 : string = method18()
    let v179 : string = "v178.as_str()"
    let v180 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v179
    let v181 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v174, v177, v180) v52
    let v182 : Types.std.string.String = method1(v181)
    let v183 : string = "fable_library_rust::String_::fromString(v182)"
    let v184 : string = Fable.Core.RustInterop.emitRustExpr () v183
    let v185 : string = "r#\"" + v57 + "\"#"
    let v186 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v185
    let v187 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v186 v42
    let v188 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v187 v44
    let v189 : string = method17(v184)
    let v190 : string = "v189.as_str()"
    let v191 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v190
    let v192 : string = method19()
    let v193 : string = "v192.as_str()"
    let v194 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v193
    let v195 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v188, v191, v194) v52
    let v196 : Types.std.string.String = method1(v195)
    let v197 : string = "fable_library_rust::String_::fromString(v196)"
    let v198 : string = Fable.Core.RustInterop.emitRustExpr () v197
    let v199 : string = "r#\"" + v72 + "\"#"
    let v200 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v199
    let v201 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v200 v42
    let v202 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v201 v44
    let v203 : string = method17(v198)
    let v204 : string = "v203.as_str()"
    let v205 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v204
    let v206 : string = method20()
    let v207 : string = "v206.as_str()"
    let v208 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v207
    let v209 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v202, v205, v208) v52
    let v210 : Types.std.string.String = method1(v209)
    let v211 : string = "fable_library_rust::String_::fromString(v210)"
    let v212 : string = Fable.Core.RustInterop.emitRustExpr () v211
    let v213 : string = "r#\"" + v87 + "\"#"
    let v214 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v213
    let v215 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v214 v42
    let v216 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v215 v44
    let v217 : string = method17(v212)
    let v218 : string = "v217.as_str()"
    let v219 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v218
    let v220 : string = method21()
    let v221 : string = "v220.as_str()"
    let v222 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v221
    let v223 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v216, v219, v222) v52
    let v224 : Types.std.string.String = method1(v223)
    let v225 : string = "fable_library_rust::String_::fromString(v224)"
    let v226 : string = Fable.Core.RustInterop.emitRustExpr () v225
    let v227 : Types.EmitType<Types.std.string.String> = method10(v226)
    let v228 : string = "de884c"
    let v229 : string = v228.Substring (0, 2)
    let v230 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v231 : uint8 = Fable.Core.RustInterop.emitRustExpr v229 v230
    let v232 : string = v228.Substring (2, 4)
    let v233 : uint8 = Fable.Core.RustInterop.emitRustExpr v232 v230
    let v234 : string = v228.Substring (4, 6)
    let v235 : uint8 = Fable.Core.RustInterop.emitRustExpr v234 v230
    let v236 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v237 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v168, v231, v233, v235) v236
    let v238 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v237 v36
    let v239 : string = "385779"
    let v240 : string = v239.Substring (0, 2)
    let v241 : uint8 = Fable.Core.RustInterop.emitRustExpr v240 v230
    let v242 : string = v239.Substring (2, 4)
    let v243 : uint8 = Fable.Core.RustInterop.emitRustExpr v242 v230
    let v244 : string = v239.Substring (4, 6)
    let v245 : uint8 = Fable.Core.RustInterop.emitRustExpr v244 v230
    let v246 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v227, v241, v243, v245) v236
    let v247 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v246 v36
    let v248 : string = $"{v102} {v238} {v247}"
    System.Console.WriteLine v248
    ()
and method38 (v0 : Types.std.path.PathBuf) : Types.std.path.PathBuf =
    v0
and method39 (v0 : Types.Ref<Types.std.path.Path>) : Types.Ref<Types.std.path.Path> =
    v0
and method40 () : string =
    let v0 : string = "package.spiproj"
    v0
and method41 (v0 : Types.Ref<Types.std.path.Path>) : Types.Ref<Types.std.path.Path> =
    v0
and closure6 () (v0 : Types.Ref<Types.std.path.Path>) : Types.std.path.PathBuf =
    let v1 : string = method40()
    let v2 : string = "v1.as_str()"
    let v3 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v2
    let v4 : Types.Ref<Types.std.path.Path> = method41(v0)
    let v5 : string = "v4.join(v3)"
    let v6 : Types.std.path.PathBuf = Fable.Core.RustInterop.emitRustExpr () v5
    v6
and method42 (v0 : Types.std.path.PathBuf) : Types.std.path.PathBuf =
    v0
and closure7 () (v0 : Types.std.path.PathBuf) : bool =
    let v1 : Types.std.path.PathBuf = method42(v0)
    let v2 : string = "v1.exists()"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr () v2
    v3
and method43 () : string =
    let v0 : string = ".spir"
    v0
and method44 () : string =
    let v0 : string = ".spi"
    v0
and method45 () : string =
    let v0 : string = ".fsx"
    v0
and method46 () : string =
    let v0 : string = ""
    v0
and method47 (v0 : Types.U16) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "format!(\"{:?}\", $0)"
    let v2 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v0 v1
    let v3 : Types.EmitType<Types.std.string.String> = v2 |> unbox<Types.EmitType<Types.std.string.String>>
    v3
and method48 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.RustInterop.emitRustExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method13(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.RustInterop.emitRustExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method10(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method10(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method10(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method14(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method10(v18)
    let v20 : US0 = US0_1
    let v21 : string = "format!(\"{:?}\", $0)"
    let v22 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v20 v21
    let v23 : Types.EmitType<Types.std.string.String> = method15(v22)
    let v24 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v23|]
    let v25 : Types.EmitType<Types.std.string.String> = method16(v24)
    let v26 : string = "> ping ()"
    let v27 : Types.EmitType<Types.std.string.String> = method10(v26)
    let v28 : (Types.EmitType<Types.std.string.String> []) = [|v27|]
    let v29 : string = "$0"
    let v30 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v28 v29
    let v31 : string = "core::ops::Deref::deref(v30)"
    let v32 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v31
    let v33 : obj = v32
    let v34 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v33 v21
    let v35 : Types.EmitType<Types.std.string.String> = v34 |> unbox<Types.EmitType<Types.std.string.String>>
    let v36 : string = "format!(\"{}\", $0)"
    let v37 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v35 v36
    let v38 : string = (v37).ToString ()
    let v39 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v40 : string = "r#\"" + v39 + "\"#"
    let v41 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v40
    let v42 : string = "regex::RegexBuilder::new($0)"
    let v43 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v41 v42
    let v44 : string = "$0.build().unwrap()"
    let v45 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v43 v44
    let v46 : string = method17(v38)
    let v47 : string = "v46.as_str()"
    let v48 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v47
    let v49 : string = method18()
    let v50 : string = "v49.as_str()"
    let v51 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v50
    let v52 : string = "$0.replace_all(&$1, $2).to_string()"
    let v53 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v45, v48, v51) v52
    let v54 : Types.std.string.String = method1(v53)
    let v55 : string = "fable_library_rust::String_::fromString(v54)"
    let v56 : string = Fable.Core.RustInterop.emitRustExpr () v55
    let v57 : string = "\\[\"(.*?)\"\\]"
    let v58 : string = "r#\"" + v57 + "\"#"
    let v59 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v58
    let v60 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v59 v42
    let v61 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v60 v44
    let v62 : string = method17(v56)
    let v63 : string = "v62.as_str()"
    let v64 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v63
    let v65 : string = method19()
    let v66 : string = "v65.as_str()"
    let v67 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v66
    let v68 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v61, v64, v67) v52
    let v69 : Types.std.string.String = method1(v68)
    let v70 : string = "fable_library_rust::String_::fromString(v69)"
    let v71 : string = Fable.Core.RustInterop.emitRustExpr () v70
    let v72 : string = "\\\\\""
    let v73 : string = "r#\"" + v72 + "\"#"
    let v74 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v73
    let v75 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v74 v42
    let v76 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v75 v44
    let v77 : string = method17(v71)
    let v78 : string = "v77.as_str()"
    let v79 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v78
    let v80 : string = method20()
    let v81 : string = "v80.as_str()"
    let v82 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v81
    let v83 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v76, v79, v82) v52
    let v84 : Types.std.string.String = method1(v83)
    let v85 : string = "fable_library_rust::String_::fromString(v84)"
    let v86 : string = Fable.Core.RustInterop.emitRustExpr () v85
    let v87 : string = ", "
    let v88 : string = "r#\"" + v87 + "\"#"
    let v89 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v88
    let v90 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v89 v42
    let v91 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v90 v44
    let v92 : string = method17(v86)
    let v93 : string = "v92.as_str()"
    let v94 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v93
    let v95 : string = method21()
    let v96 : string = "v95.as_str()"
    let v97 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v96
    let v98 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v91, v94, v97) v52
    let v99 : Types.std.string.String = method1(v98)
    let v100 : string = "fable_library_rust::String_::fromString(v99)"
    let v101 : string = Fable.Core.RustInterop.emitRustExpr () v100
    let v102 : Types.EmitType<Types.std.string.String> = method10(v101)
    let v103 : string = "$0"
    let v104 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v1 v103
    let v105 : string = "core::ops::Deref::deref(v104)"
    let v106 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v105
    let v107 : obj = v106
    let v108 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v107 v21
    let v109 : Types.EmitType<Types.std.string.String> = v108 |> unbox<Types.EmitType<Types.std.string.String>>
    let v110 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v109 v36
    let v111 : string = (v110).ToString ()
    let v112 : string = "r#\"" + v39 + "\"#"
    let v113 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v112
    let v114 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v113 v42
    let v115 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v114 v44
    let v116 : string = method17(v111)
    let v117 : string = "v116.as_str()"
    let v118 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v117
    let v119 : string = method18()
    let v120 : string = "v119.as_str()"
    let v121 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v120
    let v122 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v115, v118, v121) v52
    let v123 : Types.std.string.String = method1(v122)
    let v124 : string = "fable_library_rust::String_::fromString(v123)"
    let v125 : string = Fable.Core.RustInterop.emitRustExpr () v124
    let v126 : string = "r#\"" + v57 + "\"#"
    let v127 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v126
    let v128 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v127 v42
    let v129 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v128 v44
    let v130 : string = method17(v125)
    let v131 : string = "v130.as_str()"
    let v132 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v131
    let v133 : string = method19()
    let v134 : string = "v133.as_str()"
    let v135 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v134
    let v136 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v129, v132, v135) v52
    let v137 : Types.std.string.String = method1(v136)
    let v138 : string = "fable_library_rust::String_::fromString(v137)"
    let v139 : string = Fable.Core.RustInterop.emitRustExpr () v138
    let v140 : string = "r#\"" + v72 + "\"#"
    let v141 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v140
    let v142 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v141 v42
    let v143 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v142 v44
    let v144 : string = method17(v139)
    let v145 : string = "v144.as_str()"
    let v146 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v145
    let v147 : string = method20()
    let v148 : string = "v147.as_str()"
    let v149 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v148
    let v150 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v143, v146, v149) v52
    let v151 : Types.std.string.String = method1(v150)
    let v152 : string = "fable_library_rust::String_::fromString(v151)"
    let v153 : string = Fable.Core.RustInterop.emitRustExpr () v152
    let v154 : string = "r#\"" + v87 + "\"#"
    let v155 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v154
    let v156 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v155 v42
    let v157 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v156 v44
    let v158 : string = method17(v153)
    let v159 : string = "v158.as_str()"
    let v160 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v159
    let v161 : string = method21()
    let v162 : string = "v161.as_str()"
    let v163 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v162
    let v164 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v157, v160, v163) v52
    let v165 : Types.std.string.String = method1(v164)
    let v166 : string = "fable_library_rust::String_::fromString(v165)"
    let v167 : string = Fable.Core.RustInterop.emitRustExpr () v166
    let v168 : Types.EmitType<Types.std.string.String> = method10(v167)
    let v169 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v25 v36
    let v170 : string = (v169).ToString ()
    let v171 : string = "r#\"" + v39 + "\"#"
    let v172 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v171
    let v173 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v172 v42
    let v174 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v173 v44
    let v175 : string = method17(v170)
    let v176 : string = "v175.as_str()"
    let v177 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v176
    let v178 : string = method18()
    let v179 : string = "v178.as_str()"
    let v180 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v179
    let v181 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v174, v177, v180) v52
    let v182 : Types.std.string.String = method1(v181)
    let v183 : string = "fable_library_rust::String_::fromString(v182)"
    let v184 : string = Fable.Core.RustInterop.emitRustExpr () v183
    let v185 : string = "r#\"" + v57 + "\"#"
    let v186 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v185
    let v187 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v186 v42
    let v188 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v187 v44
    let v189 : string = method17(v184)
    let v190 : string = "v189.as_str()"
    let v191 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v190
    let v192 : string = method19()
    let v193 : string = "v192.as_str()"
    let v194 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v193
    let v195 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v188, v191, v194) v52
    let v196 : Types.std.string.String = method1(v195)
    let v197 : string = "fable_library_rust::String_::fromString(v196)"
    let v198 : string = Fable.Core.RustInterop.emitRustExpr () v197
    let v199 : string = "r#\"" + v72 + "\"#"
    let v200 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v199
    let v201 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v200 v42
    let v202 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v201 v44
    let v203 : string = method17(v198)
    let v204 : string = "v203.as_str()"
    let v205 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v204
    let v206 : string = method20()
    let v207 : string = "v206.as_str()"
    let v208 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v207
    let v209 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v202, v205, v208) v52
    let v210 : Types.std.string.String = method1(v209)
    let v211 : string = "fable_library_rust::String_::fromString(v210)"
    let v212 : string = Fable.Core.RustInterop.emitRustExpr () v211
    let v213 : string = "r#\"" + v87 + "\"#"
    let v214 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v213
    let v215 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v214 v42
    let v216 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v215 v44
    let v217 : string = method17(v212)
    let v218 : string = "v217.as_str()"
    let v219 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v218
    let v220 : string = method21()
    let v221 : string = "v220.as_str()"
    let v222 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v221
    let v223 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v216, v219, v222) v52
    let v224 : Types.std.string.String = method1(v223)
    let v225 : string = "fable_library_rust::String_::fromString(v224)"
    let v226 : string = Fable.Core.RustInterop.emitRustExpr () v225
    let v227 : Types.EmitType<Types.std.string.String> = method10(v226)
    let v228 : string = "e36a62"
    let v229 : string = v228.Substring (0, 2)
    let v230 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v231 : uint8 = Fable.Core.RustInterop.emitRustExpr v229 v230
    let v232 : string = v228.Substring (2, 4)
    let v233 : uint8 = Fable.Core.RustInterop.emitRustExpr v232 v230
    let v234 : string = v228.Substring (4, 6)
    let v235 : uint8 = Fable.Core.RustInterop.emitRustExpr v234 v230
    let v236 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v237 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v168, v231, v233, v235) v236
    let v238 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v237 v36
    let v239 : string = "385779"
    let v240 : string = v239.Substring (0, 2)
    let v241 : uint8 = Fable.Core.RustInterop.emitRustExpr v240 v230
    let v242 : string = v239.Substring (2, 4)
    let v243 : uint8 = Fable.Core.RustInterop.emitRustExpr v242 v230
    let v244 : string = v239.Substring (4, 6)
    let v245 : uint8 = Fable.Core.RustInterop.emitRustExpr v244 v230
    let v246 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v227, v241, v243, v245) v236
    let v247 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v246 v36
    let v248 : string = $"{v102} {v238} {v247}"
    System.Console.WriteLine v248
    ()
and method49 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.RustInterop.emitRustExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method13(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.RustInterop.emitRustExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method10(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method10(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method10(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method14(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method10(v18)
    let v20 : US0 = US0_1
    let v21 : string = "format!(\"{:?}\", $0)"
    let v22 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v20 v21
    let v23 : Types.EmitType<Types.std.string.String> = method15(v22)
    let v24 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v23|]
    let v25 : Types.EmitType<Types.std.string.String> = method16(v24)
    let v26 : string = "> zmq_request ()"
    let v27 : Types.EmitType<Types.std.string.String> = method10(v26)
    let v28 : (Types.EmitType<Types.std.string.String> []) = [|v27|]
    let v29 : string = "$0"
    let v30 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v28 v29
    let v31 : string = "core::ops::Deref::deref(v30)"
    let v32 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v31
    let v33 : obj = v32
    let v34 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v33 v21
    let v35 : Types.EmitType<Types.std.string.String> = v34 |> unbox<Types.EmitType<Types.std.string.String>>
    let v36 : string = "format!(\"{}\", $0)"
    let v37 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v35 v36
    let v38 : string = (v37).ToString ()
    let v39 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v40 : string = "r#\"" + v39 + "\"#"
    let v41 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v40
    let v42 : string = "regex::RegexBuilder::new($0)"
    let v43 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v41 v42
    let v44 : string = "$0.build().unwrap()"
    let v45 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v43 v44
    let v46 : string = method17(v38)
    let v47 : string = "v46.as_str()"
    let v48 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v47
    let v49 : string = method18()
    let v50 : string = "v49.as_str()"
    let v51 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v50
    let v52 : string = "$0.replace_all(&$1, $2).to_string()"
    let v53 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v45, v48, v51) v52
    let v54 : Types.std.string.String = method1(v53)
    let v55 : string = "fable_library_rust::String_::fromString(v54)"
    let v56 : string = Fable.Core.RustInterop.emitRustExpr () v55
    let v57 : string = "\\[\"(.*?)\"\\]"
    let v58 : string = "r#\"" + v57 + "\"#"
    let v59 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v58
    let v60 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v59 v42
    let v61 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v60 v44
    let v62 : string = method17(v56)
    let v63 : string = "v62.as_str()"
    let v64 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v63
    let v65 : string = method19()
    let v66 : string = "v65.as_str()"
    let v67 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v66
    let v68 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v61, v64, v67) v52
    let v69 : Types.std.string.String = method1(v68)
    let v70 : string = "fable_library_rust::String_::fromString(v69)"
    let v71 : string = Fable.Core.RustInterop.emitRustExpr () v70
    let v72 : string = "\\\\\""
    let v73 : string = "r#\"" + v72 + "\"#"
    let v74 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v73
    let v75 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v74 v42
    let v76 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v75 v44
    let v77 : string = method17(v71)
    let v78 : string = "v77.as_str()"
    let v79 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v78
    let v80 : string = method20()
    let v81 : string = "v80.as_str()"
    let v82 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v81
    let v83 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v76, v79, v82) v52
    let v84 : Types.std.string.String = method1(v83)
    let v85 : string = "fable_library_rust::String_::fromString(v84)"
    let v86 : string = Fable.Core.RustInterop.emitRustExpr () v85
    let v87 : string = ", "
    let v88 : string = "r#\"" + v87 + "\"#"
    let v89 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v88
    let v90 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v89 v42
    let v91 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v90 v44
    let v92 : string = method17(v86)
    let v93 : string = "v92.as_str()"
    let v94 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v93
    let v95 : string = method21()
    let v96 : string = "v95.as_str()"
    let v97 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v96
    let v98 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v91, v94, v97) v52
    let v99 : Types.std.string.String = method1(v98)
    let v100 : string = "fable_library_rust::String_::fromString(v99)"
    let v101 : string = Fable.Core.RustInterop.emitRustExpr () v100
    let v102 : Types.EmitType<Types.std.string.String> = method10(v101)
    let v103 : string = "$0"
    let v104 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v1 v103
    let v105 : string = "core::ops::Deref::deref(v104)"
    let v106 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v105
    let v107 : obj = v106
    let v108 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v107 v21
    let v109 : Types.EmitType<Types.std.string.String> = v108 |> unbox<Types.EmitType<Types.std.string.String>>
    let v110 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v109 v36
    let v111 : string = (v110).ToString ()
    let v112 : string = "r#\"" + v39 + "\"#"
    let v113 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v112
    let v114 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v113 v42
    let v115 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v114 v44
    let v116 : string = method17(v111)
    let v117 : string = "v116.as_str()"
    let v118 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v117
    let v119 : string = method18()
    let v120 : string = "v119.as_str()"
    let v121 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v120
    let v122 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v115, v118, v121) v52
    let v123 : Types.std.string.String = method1(v122)
    let v124 : string = "fable_library_rust::String_::fromString(v123)"
    let v125 : string = Fable.Core.RustInterop.emitRustExpr () v124
    let v126 : string = "r#\"" + v57 + "\"#"
    let v127 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v126
    let v128 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v127 v42
    let v129 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v128 v44
    let v130 : string = method17(v125)
    let v131 : string = "v130.as_str()"
    let v132 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v131
    let v133 : string = method19()
    let v134 : string = "v133.as_str()"
    let v135 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v134
    let v136 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v129, v132, v135) v52
    let v137 : Types.std.string.String = method1(v136)
    let v138 : string = "fable_library_rust::String_::fromString(v137)"
    let v139 : string = Fable.Core.RustInterop.emitRustExpr () v138
    let v140 : string = "r#\"" + v72 + "\"#"
    let v141 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v140
    let v142 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v141 v42
    let v143 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v142 v44
    let v144 : string = method17(v139)
    let v145 : string = "v144.as_str()"
    let v146 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v145
    let v147 : string = method20()
    let v148 : string = "v147.as_str()"
    let v149 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v148
    let v150 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v143, v146, v149) v52
    let v151 : Types.std.string.String = method1(v150)
    let v152 : string = "fable_library_rust::String_::fromString(v151)"
    let v153 : string = Fable.Core.RustInterop.emitRustExpr () v152
    let v154 : string = "r#\"" + v87 + "\"#"
    let v155 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v154
    let v156 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v155 v42
    let v157 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v156 v44
    let v158 : string = method17(v153)
    let v159 : string = "v158.as_str()"
    let v160 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v159
    let v161 : string = method21()
    let v162 : string = "v161.as_str()"
    let v163 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v162
    let v164 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v157, v160, v163) v52
    let v165 : Types.std.string.String = method1(v164)
    let v166 : string = "fable_library_rust::String_::fromString(v165)"
    let v167 : string = Fable.Core.RustInterop.emitRustExpr () v166
    let v168 : Types.EmitType<Types.std.string.String> = method10(v167)
    let v169 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v25 v36
    let v170 : string = (v169).ToString ()
    let v171 : string = "r#\"" + v39 + "\"#"
    let v172 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v171
    let v173 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v172 v42
    let v174 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v173 v44
    let v175 : string = method17(v170)
    let v176 : string = "v175.as_str()"
    let v177 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v176
    let v178 : string = method18()
    let v179 : string = "v178.as_str()"
    let v180 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v179
    let v181 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v174, v177, v180) v52
    let v182 : Types.std.string.String = method1(v181)
    let v183 : string = "fable_library_rust::String_::fromString(v182)"
    let v184 : string = Fable.Core.RustInterop.emitRustExpr () v183
    let v185 : string = "r#\"" + v57 + "\"#"
    let v186 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v185
    let v187 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v186 v42
    let v188 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v187 v44
    let v189 : string = method17(v184)
    let v190 : string = "v189.as_str()"
    let v191 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v190
    let v192 : string = method19()
    let v193 : string = "v192.as_str()"
    let v194 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v193
    let v195 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v188, v191, v194) v52
    let v196 : Types.std.string.String = method1(v195)
    let v197 : string = "fable_library_rust::String_::fromString(v196)"
    let v198 : string = Fable.Core.RustInterop.emitRustExpr () v197
    let v199 : string = "r#\"" + v72 + "\"#"
    let v200 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v199
    let v201 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v200 v42
    let v202 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v201 v44
    let v203 : string = method17(v198)
    let v204 : string = "v203.as_str()"
    let v205 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v204
    let v206 : string = method20()
    let v207 : string = "v206.as_str()"
    let v208 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v207
    let v209 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v202, v205, v208) v52
    let v210 : Types.std.string.String = method1(v209)
    let v211 : string = "fable_library_rust::String_::fromString(v210)"
    let v212 : string = Fable.Core.RustInterop.emitRustExpr () v211
    let v213 : string = "r#\"" + v87 + "\"#"
    let v214 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v213
    let v215 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v214 v42
    let v216 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v215 v44
    let v217 : string = method17(v212)
    let v218 : string = "v217.as_str()"
    let v219 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v218
    let v220 : string = method21()
    let v221 : string = "v220.as_str()"
    let v222 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v221
    let v223 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v216, v219, v222) v52
    let v224 : Types.std.string.String = method1(v223)
    let v225 : string = "fable_library_rust::String_::fromString(v224)"
    let v226 : string = Fable.Core.RustInterop.emitRustExpr () v225
    let v227 : Types.EmitType<Types.std.string.String> = method10(v226)
    let v228 : string = "fcfb1b"
    let v229 : string = v228.Substring (0, 2)
    let v230 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v231 : uint8 = Fable.Core.RustInterop.emitRustExpr v229 v230
    let v232 : string = v228.Substring (2, 4)
    let v233 : uint8 = Fable.Core.RustInterop.emitRustExpr v232 v230
    let v234 : string = v228.Substring (4, 6)
    let v235 : uint8 = Fable.Core.RustInterop.emitRustExpr v234 v230
    let v236 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v237 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v168, v231, v233, v235) v236
    let v238 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v237 v36
    let v239 : string = "385779"
    let v240 : string = v239.Substring (0, 2)
    let v241 : uint8 = Fable.Core.RustInterop.emitRustExpr v240 v230
    let v242 : string = v239.Substring (2, 4)
    let v243 : uint8 = Fable.Core.RustInterop.emitRustExpr v242 v230
    let v244 : string = v239.Substring (4, 6)
    let v245 : uint8 = Fable.Core.RustInterop.emitRustExpr v244 v230
    let v246 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v227, v241, v243, v245) v236
    let v247 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v246 v36
    let v248 : string = $"{v102} {v238} {v247}"
    System.Console.WriteLine v248
    ()
and method50 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.RustInterop.emitRustExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method13(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.RustInterop.emitRustExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method10(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method10(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method10(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method14(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method10(v18)
    let v20 : US0 = US0_1
    let v21 : string = "format!(\"{:?}\", $0)"
    let v22 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v20 v21
    let v23 : Types.EmitType<Types.std.string.String> = method15(v22)
    let v24 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v23|]
    let v25 : Types.EmitType<Types.std.string.String> = method16(v24)
    let v26 : string = "> spi_open ()"
    let v27 : Types.EmitType<Types.std.string.String> = method10(v26)
    let v28 : (Types.EmitType<Types.std.string.String> []) = [|v27|]
    let v29 : string = "$0"
    let v30 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v28 v29
    let v31 : string = "core::ops::Deref::deref(v30)"
    let v32 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v31
    let v33 : obj = v32
    let v34 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v33 v21
    let v35 : Types.EmitType<Types.std.string.String> = v34 |> unbox<Types.EmitType<Types.std.string.String>>
    let v36 : string = "format!(\"{}\", $0)"
    let v37 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v35 v36
    let v38 : string = (v37).ToString ()
    let v39 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v40 : string = "r#\"" + v39 + "\"#"
    let v41 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v40
    let v42 : string = "regex::RegexBuilder::new($0)"
    let v43 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v41 v42
    let v44 : string = "$0.build().unwrap()"
    let v45 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v43 v44
    let v46 : string = method17(v38)
    let v47 : string = "v46.as_str()"
    let v48 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v47
    let v49 : string = method18()
    let v50 : string = "v49.as_str()"
    let v51 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v50
    let v52 : string = "$0.replace_all(&$1, $2).to_string()"
    let v53 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v45, v48, v51) v52
    let v54 : Types.std.string.String = method1(v53)
    let v55 : string = "fable_library_rust::String_::fromString(v54)"
    let v56 : string = Fable.Core.RustInterop.emitRustExpr () v55
    let v57 : string = "\\[\"(.*?)\"\\]"
    let v58 : string = "r#\"" + v57 + "\"#"
    let v59 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v58
    let v60 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v59 v42
    let v61 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v60 v44
    let v62 : string = method17(v56)
    let v63 : string = "v62.as_str()"
    let v64 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v63
    let v65 : string = method19()
    let v66 : string = "v65.as_str()"
    let v67 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v66
    let v68 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v61, v64, v67) v52
    let v69 : Types.std.string.String = method1(v68)
    let v70 : string = "fable_library_rust::String_::fromString(v69)"
    let v71 : string = Fable.Core.RustInterop.emitRustExpr () v70
    let v72 : string = "\\\\\""
    let v73 : string = "r#\"" + v72 + "\"#"
    let v74 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v73
    let v75 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v74 v42
    let v76 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v75 v44
    let v77 : string = method17(v71)
    let v78 : string = "v77.as_str()"
    let v79 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v78
    let v80 : string = method20()
    let v81 : string = "v80.as_str()"
    let v82 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v81
    let v83 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v76, v79, v82) v52
    let v84 : Types.std.string.String = method1(v83)
    let v85 : string = "fable_library_rust::String_::fromString(v84)"
    let v86 : string = Fable.Core.RustInterop.emitRustExpr () v85
    let v87 : string = ", "
    let v88 : string = "r#\"" + v87 + "\"#"
    let v89 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v88
    let v90 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v89 v42
    let v91 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v90 v44
    let v92 : string = method17(v86)
    let v93 : string = "v92.as_str()"
    let v94 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v93
    let v95 : string = method21()
    let v96 : string = "v95.as_str()"
    let v97 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v96
    let v98 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v91, v94, v97) v52
    let v99 : Types.std.string.String = method1(v98)
    let v100 : string = "fable_library_rust::String_::fromString(v99)"
    let v101 : string = Fable.Core.RustInterop.emitRustExpr () v100
    let v102 : Types.EmitType<Types.std.string.String> = method10(v101)
    let v103 : string = "$0"
    let v104 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v1 v103
    let v105 : string = "core::ops::Deref::deref(v104)"
    let v106 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v105
    let v107 : obj = v106
    let v108 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v107 v21
    let v109 : Types.EmitType<Types.std.string.String> = v108 |> unbox<Types.EmitType<Types.std.string.String>>
    let v110 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v109 v36
    let v111 : string = (v110).ToString ()
    let v112 : string = "r#\"" + v39 + "\"#"
    let v113 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v112
    let v114 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v113 v42
    let v115 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v114 v44
    let v116 : string = method17(v111)
    let v117 : string = "v116.as_str()"
    let v118 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v117
    let v119 : string = method18()
    let v120 : string = "v119.as_str()"
    let v121 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v120
    let v122 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v115, v118, v121) v52
    let v123 : Types.std.string.String = method1(v122)
    let v124 : string = "fable_library_rust::String_::fromString(v123)"
    let v125 : string = Fable.Core.RustInterop.emitRustExpr () v124
    let v126 : string = "r#\"" + v57 + "\"#"
    let v127 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v126
    let v128 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v127 v42
    let v129 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v128 v44
    let v130 : string = method17(v125)
    let v131 : string = "v130.as_str()"
    let v132 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v131
    let v133 : string = method19()
    let v134 : string = "v133.as_str()"
    let v135 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v134
    let v136 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v129, v132, v135) v52
    let v137 : Types.std.string.String = method1(v136)
    let v138 : string = "fable_library_rust::String_::fromString(v137)"
    let v139 : string = Fable.Core.RustInterop.emitRustExpr () v138
    let v140 : string = "r#\"" + v72 + "\"#"
    let v141 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v140
    let v142 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v141 v42
    let v143 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v142 v44
    let v144 : string = method17(v139)
    let v145 : string = "v144.as_str()"
    let v146 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v145
    let v147 : string = method20()
    let v148 : string = "v147.as_str()"
    let v149 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v148
    let v150 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v143, v146, v149) v52
    let v151 : Types.std.string.String = method1(v150)
    let v152 : string = "fable_library_rust::String_::fromString(v151)"
    let v153 : string = Fable.Core.RustInterop.emitRustExpr () v152
    let v154 : string = "r#\"" + v87 + "\"#"
    let v155 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v154
    let v156 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v155 v42
    let v157 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v156 v44
    let v158 : string = method17(v153)
    let v159 : string = "v158.as_str()"
    let v160 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v159
    let v161 : string = method21()
    let v162 : string = "v161.as_str()"
    let v163 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v162
    let v164 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v157, v160, v163) v52
    let v165 : Types.std.string.String = method1(v164)
    let v166 : string = "fable_library_rust::String_::fromString(v165)"
    let v167 : string = Fable.Core.RustInterop.emitRustExpr () v166
    let v168 : Types.EmitType<Types.std.string.String> = method10(v167)
    let v169 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v25 v36
    let v170 : string = (v169).ToString ()
    let v171 : string = "r#\"" + v39 + "\"#"
    let v172 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v171
    let v173 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v172 v42
    let v174 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v173 v44
    let v175 : string = method17(v170)
    let v176 : string = "v175.as_str()"
    let v177 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v176
    let v178 : string = method18()
    let v179 : string = "v178.as_str()"
    let v180 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v179
    let v181 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v174, v177, v180) v52
    let v182 : Types.std.string.String = method1(v181)
    let v183 : string = "fable_library_rust::String_::fromString(v182)"
    let v184 : string = Fable.Core.RustInterop.emitRustExpr () v183
    let v185 : string = "r#\"" + v57 + "\"#"
    let v186 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v185
    let v187 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v186 v42
    let v188 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v187 v44
    let v189 : string = method17(v184)
    let v190 : string = "v189.as_str()"
    let v191 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v190
    let v192 : string = method19()
    let v193 : string = "v192.as_str()"
    let v194 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v193
    let v195 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v188, v191, v194) v52
    let v196 : Types.std.string.String = method1(v195)
    let v197 : string = "fable_library_rust::String_::fromString(v196)"
    let v198 : string = Fable.Core.RustInterop.emitRustExpr () v197
    let v199 : string = "r#\"" + v72 + "\"#"
    let v200 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v199
    let v201 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v200 v42
    let v202 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v201 v44
    let v203 : string = method17(v198)
    let v204 : string = "v203.as_str()"
    let v205 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v204
    let v206 : string = method20()
    let v207 : string = "v206.as_str()"
    let v208 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v207
    let v209 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v202, v205, v208) v52
    let v210 : Types.std.string.String = method1(v209)
    let v211 : string = "fable_library_rust::String_::fromString(v210)"
    let v212 : string = Fable.Core.RustInterop.emitRustExpr () v211
    let v213 : string = "r#\"" + v87 + "\"#"
    let v214 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v213
    let v215 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v214 v42
    let v216 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v215 v44
    let v217 : string = method17(v212)
    let v218 : string = "v217.as_str()"
    let v219 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v218
    let v220 : string = method21()
    let v221 : string = "v220.as_str()"
    let v222 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v221
    let v223 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v216, v219, v222) v52
    let v224 : Types.std.string.String = method1(v223)
    let v225 : string = "fable_library_rust::String_::fromString(v224)"
    let v226 : string = Fable.Core.RustInterop.emitRustExpr () v225
    let v227 : Types.EmitType<Types.std.string.String> = method10(v226)
    let v228 : string = "e36a62"
    let v229 : string = v228.Substring (0, 2)
    let v230 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v231 : uint8 = Fable.Core.RustInterop.emitRustExpr v229 v230
    let v232 : string = v228.Substring (2, 4)
    let v233 : uint8 = Fable.Core.RustInterop.emitRustExpr v232 v230
    let v234 : string = v228.Substring (4, 6)
    let v235 : uint8 = Fable.Core.RustInterop.emitRustExpr v234 v230
    let v236 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v237 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v168, v231, v233, v235) v236
    let v238 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v237 v36
    let v239 : string = "385779"
    let v240 : string = v239.Substring (0, 2)
    let v241 : uint8 = Fable.Core.RustInterop.emitRustExpr v240 v230
    let v242 : string = v239.Substring (2, 4)
    let v243 : uint8 = Fable.Core.RustInterop.emitRustExpr v242 v230
    let v244 : string = v239.Substring (4, 6)
    let v245 : uint8 = Fable.Core.RustInterop.emitRustExpr v244 v230
    let v246 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v227, v241, v243, v245) v236
    let v247 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v246 v36
    let v248 : string = $"{v102} {v238} {v247}"
    System.Console.WriteLine v248
    ()
and method51 (v0 : Types.Ref<Types.Str>) : Types.Ref<Types.Str> =
    v0
and method52 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.RustInterop.emitRustExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method13(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.RustInterop.emitRustExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method10(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method10(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method10(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method14(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method10(v18)
    let v20 : US0 = US0_1
    let v21 : string = "format!(\"{:?}\", $0)"
    let v22 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v20 v21
    let v23 : Types.EmitType<Types.std.string.String> = method15(v22)
    let v24 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v23|]
    let v25 : Types.EmitType<Types.std.string.String> = method16(v24)
    let v26 : string = "> spiproj_open ()"
    let v27 : Types.EmitType<Types.std.string.String> = method10(v26)
    let v28 : (Types.EmitType<Types.std.string.String> []) = [|v27|]
    let v29 : string = "$0"
    let v30 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v28 v29
    let v31 : string = "core::ops::Deref::deref(v30)"
    let v32 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v31
    let v33 : obj = v32
    let v34 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v33 v21
    let v35 : Types.EmitType<Types.std.string.String> = v34 |> unbox<Types.EmitType<Types.std.string.String>>
    let v36 : string = "format!(\"{}\", $0)"
    let v37 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v35 v36
    let v38 : string = (v37).ToString ()
    let v39 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v40 : string = "r#\"" + v39 + "\"#"
    let v41 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v40
    let v42 : string = "regex::RegexBuilder::new($0)"
    let v43 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v41 v42
    let v44 : string = "$0.build().unwrap()"
    let v45 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v43 v44
    let v46 : string = method17(v38)
    let v47 : string = "v46.as_str()"
    let v48 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v47
    let v49 : string = method18()
    let v50 : string = "v49.as_str()"
    let v51 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v50
    let v52 : string = "$0.replace_all(&$1, $2).to_string()"
    let v53 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v45, v48, v51) v52
    let v54 : Types.std.string.String = method1(v53)
    let v55 : string = "fable_library_rust::String_::fromString(v54)"
    let v56 : string = Fable.Core.RustInterop.emitRustExpr () v55
    let v57 : string = "\\[\"(.*?)\"\\]"
    let v58 : string = "r#\"" + v57 + "\"#"
    let v59 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v58
    let v60 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v59 v42
    let v61 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v60 v44
    let v62 : string = method17(v56)
    let v63 : string = "v62.as_str()"
    let v64 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v63
    let v65 : string = method19()
    let v66 : string = "v65.as_str()"
    let v67 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v66
    let v68 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v61, v64, v67) v52
    let v69 : Types.std.string.String = method1(v68)
    let v70 : string = "fable_library_rust::String_::fromString(v69)"
    let v71 : string = Fable.Core.RustInterop.emitRustExpr () v70
    let v72 : string = "\\\\\""
    let v73 : string = "r#\"" + v72 + "\"#"
    let v74 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v73
    let v75 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v74 v42
    let v76 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v75 v44
    let v77 : string = method17(v71)
    let v78 : string = "v77.as_str()"
    let v79 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v78
    let v80 : string = method20()
    let v81 : string = "v80.as_str()"
    let v82 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v81
    let v83 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v76, v79, v82) v52
    let v84 : Types.std.string.String = method1(v83)
    let v85 : string = "fable_library_rust::String_::fromString(v84)"
    let v86 : string = Fable.Core.RustInterop.emitRustExpr () v85
    let v87 : string = ", "
    let v88 : string = "r#\"" + v87 + "\"#"
    let v89 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v88
    let v90 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v89 v42
    let v91 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v90 v44
    let v92 : string = method17(v86)
    let v93 : string = "v92.as_str()"
    let v94 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v93
    let v95 : string = method21()
    let v96 : string = "v95.as_str()"
    let v97 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v96
    let v98 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v91, v94, v97) v52
    let v99 : Types.std.string.String = method1(v98)
    let v100 : string = "fable_library_rust::String_::fromString(v99)"
    let v101 : string = Fable.Core.RustInterop.emitRustExpr () v100
    let v102 : Types.EmitType<Types.std.string.String> = method10(v101)
    let v103 : string = "$0"
    let v104 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v1 v103
    let v105 : string = "core::ops::Deref::deref(v104)"
    let v106 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v105
    let v107 : obj = v106
    let v108 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v107 v21
    let v109 : Types.EmitType<Types.std.string.String> = v108 |> unbox<Types.EmitType<Types.std.string.String>>
    let v110 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v109 v36
    let v111 : string = (v110).ToString ()
    let v112 : string = "r#\"" + v39 + "\"#"
    let v113 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v112
    let v114 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v113 v42
    let v115 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v114 v44
    let v116 : string = method17(v111)
    let v117 : string = "v116.as_str()"
    let v118 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v117
    let v119 : string = method18()
    let v120 : string = "v119.as_str()"
    let v121 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v120
    let v122 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v115, v118, v121) v52
    let v123 : Types.std.string.String = method1(v122)
    let v124 : string = "fable_library_rust::String_::fromString(v123)"
    let v125 : string = Fable.Core.RustInterop.emitRustExpr () v124
    let v126 : string = "r#\"" + v57 + "\"#"
    let v127 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v126
    let v128 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v127 v42
    let v129 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v128 v44
    let v130 : string = method17(v125)
    let v131 : string = "v130.as_str()"
    let v132 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v131
    let v133 : string = method19()
    let v134 : string = "v133.as_str()"
    let v135 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v134
    let v136 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v129, v132, v135) v52
    let v137 : Types.std.string.String = method1(v136)
    let v138 : string = "fable_library_rust::String_::fromString(v137)"
    let v139 : string = Fable.Core.RustInterop.emitRustExpr () v138
    let v140 : string = "r#\"" + v72 + "\"#"
    let v141 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v140
    let v142 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v141 v42
    let v143 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v142 v44
    let v144 : string = method17(v139)
    let v145 : string = "v144.as_str()"
    let v146 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v145
    let v147 : string = method20()
    let v148 : string = "v147.as_str()"
    let v149 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v148
    let v150 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v143, v146, v149) v52
    let v151 : Types.std.string.String = method1(v150)
    let v152 : string = "fable_library_rust::String_::fromString(v151)"
    let v153 : string = Fable.Core.RustInterop.emitRustExpr () v152
    let v154 : string = "r#\"" + v87 + "\"#"
    let v155 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v154
    let v156 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v155 v42
    let v157 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v156 v44
    let v158 : string = method17(v153)
    let v159 : string = "v158.as_str()"
    let v160 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v159
    let v161 : string = method21()
    let v162 : string = "v161.as_str()"
    let v163 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v162
    let v164 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v157, v160, v163) v52
    let v165 : Types.std.string.String = method1(v164)
    let v166 : string = "fable_library_rust::String_::fromString(v165)"
    let v167 : string = Fable.Core.RustInterop.emitRustExpr () v166
    let v168 : Types.EmitType<Types.std.string.String> = method10(v167)
    let v169 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v25 v36
    let v170 : string = (v169).ToString ()
    let v171 : string = "r#\"" + v39 + "\"#"
    let v172 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v171
    let v173 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v172 v42
    let v174 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v173 v44
    let v175 : string = method17(v170)
    let v176 : string = "v175.as_str()"
    let v177 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v176
    let v178 : string = method18()
    let v179 : string = "v178.as_str()"
    let v180 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v179
    let v181 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v174, v177, v180) v52
    let v182 : Types.std.string.String = method1(v181)
    let v183 : string = "fable_library_rust::String_::fromString(v182)"
    let v184 : string = Fable.Core.RustInterop.emitRustExpr () v183
    let v185 : string = "r#\"" + v57 + "\"#"
    let v186 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v185
    let v187 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v186 v42
    let v188 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v187 v44
    let v189 : string = method17(v184)
    let v190 : string = "v189.as_str()"
    let v191 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v190
    let v192 : string = method19()
    let v193 : string = "v192.as_str()"
    let v194 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v193
    let v195 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v188, v191, v194) v52
    let v196 : Types.std.string.String = method1(v195)
    let v197 : string = "fable_library_rust::String_::fromString(v196)"
    let v198 : string = Fable.Core.RustInterop.emitRustExpr () v197
    let v199 : string = "r#\"" + v72 + "\"#"
    let v200 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v199
    let v201 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v200 v42
    let v202 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v201 v44
    let v203 : string = method17(v198)
    let v204 : string = "v203.as_str()"
    let v205 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v204
    let v206 : string = method20()
    let v207 : string = "v206.as_str()"
    let v208 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v207
    let v209 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v202, v205, v208) v52
    let v210 : Types.std.string.String = method1(v209)
    let v211 : string = "fable_library_rust::String_::fromString(v210)"
    let v212 : string = Fable.Core.RustInterop.emitRustExpr () v211
    let v213 : string = "r#\"" + v87 + "\"#"
    let v214 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v213
    let v215 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v214 v42
    let v216 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v215 v44
    let v217 : string = method17(v212)
    let v218 : string = "v217.as_str()"
    let v219 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v218
    let v220 : string = method21()
    let v221 : string = "v220.as_str()"
    let v222 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v221
    let v223 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v216, v219, v222) v52
    let v224 : Types.std.string.String = method1(v223)
    let v225 : string = "fable_library_rust::String_::fromString(v224)"
    let v226 : string = Fable.Core.RustInterop.emitRustExpr () v225
    let v227 : Types.EmitType<Types.std.string.String> = method10(v226)
    let v228 : string = "e36a62"
    let v229 : string = v228.Substring (0, 2)
    let v230 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v231 : uint8 = Fable.Core.RustInterop.emitRustExpr v229 v230
    let v232 : string = v228.Substring (2, 4)
    let v233 : uint8 = Fable.Core.RustInterop.emitRustExpr v232 v230
    let v234 : string = v228.Substring (4, 6)
    let v235 : uint8 = Fable.Core.RustInterop.emitRustExpr v234 v230
    let v236 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v237 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v168, v231, v233, v235) v236
    let v238 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v237 v36
    let v239 : string = "385779"
    let v240 : string = v239.Substring (0, 2)
    let v241 : uint8 = Fable.Core.RustInterop.emitRustExpr v240 v230
    let v242 : string = v239.Substring (2, 4)
    let v243 : uint8 = Fable.Core.RustInterop.emitRustExpr v242 v230
    let v244 : string = v239.Substring (4, 6)
    let v245 : uint8 = Fable.Core.RustInterop.emitRustExpr v244 v230
    let v246 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v227, v241, v243, v245) v236
    let v247 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v246 v36
    let v248 : string = $"{v102} {v238} {v247}"
    System.Console.WriteLine v248
    ()
and method53 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.RustInterop.emitRustExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method13(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.RustInterop.emitRustExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method10(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method10(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method10(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method14(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method10(v18)
    let v20 : US0 = US0_1
    let v21 : string = "format!(\"{:?}\", $0)"
    let v22 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v20 v21
    let v23 : Types.EmitType<Types.std.string.String> = method15(v22)
    let v24 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v23|]
    let v25 : Types.EmitType<Types.std.string.String> = method16(v24)
    let v26 : string = "> spi_build_file ()"
    let v27 : Types.EmitType<Types.std.string.String> = method10(v26)
    let v28 : (Types.EmitType<Types.std.string.String> []) = [|v27|]
    let v29 : string = "$0"
    let v30 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v28 v29
    let v31 : string = "core::ops::Deref::deref(v30)"
    let v32 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v31
    let v33 : obj = v32
    let v34 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v33 v21
    let v35 : Types.EmitType<Types.std.string.String> = v34 |> unbox<Types.EmitType<Types.std.string.String>>
    let v36 : string = "format!(\"{}\", $0)"
    let v37 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v35 v36
    let v38 : string = (v37).ToString ()
    let v39 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v40 : string = "r#\"" + v39 + "\"#"
    let v41 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v40
    let v42 : string = "regex::RegexBuilder::new($0)"
    let v43 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v41 v42
    let v44 : string = "$0.build().unwrap()"
    let v45 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v43 v44
    let v46 : string = method17(v38)
    let v47 : string = "v46.as_str()"
    let v48 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v47
    let v49 : string = method18()
    let v50 : string = "v49.as_str()"
    let v51 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v50
    let v52 : string = "$0.replace_all(&$1, $2).to_string()"
    let v53 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v45, v48, v51) v52
    let v54 : Types.std.string.String = method1(v53)
    let v55 : string = "fable_library_rust::String_::fromString(v54)"
    let v56 : string = Fable.Core.RustInterop.emitRustExpr () v55
    let v57 : string = "\\[\"(.*?)\"\\]"
    let v58 : string = "r#\"" + v57 + "\"#"
    let v59 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v58
    let v60 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v59 v42
    let v61 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v60 v44
    let v62 : string = method17(v56)
    let v63 : string = "v62.as_str()"
    let v64 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v63
    let v65 : string = method19()
    let v66 : string = "v65.as_str()"
    let v67 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v66
    let v68 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v61, v64, v67) v52
    let v69 : Types.std.string.String = method1(v68)
    let v70 : string = "fable_library_rust::String_::fromString(v69)"
    let v71 : string = Fable.Core.RustInterop.emitRustExpr () v70
    let v72 : string = "\\\\\""
    let v73 : string = "r#\"" + v72 + "\"#"
    let v74 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v73
    let v75 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v74 v42
    let v76 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v75 v44
    let v77 : string = method17(v71)
    let v78 : string = "v77.as_str()"
    let v79 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v78
    let v80 : string = method20()
    let v81 : string = "v80.as_str()"
    let v82 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v81
    let v83 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v76, v79, v82) v52
    let v84 : Types.std.string.String = method1(v83)
    let v85 : string = "fable_library_rust::String_::fromString(v84)"
    let v86 : string = Fable.Core.RustInterop.emitRustExpr () v85
    let v87 : string = ", "
    let v88 : string = "r#\"" + v87 + "\"#"
    let v89 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v88
    let v90 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v89 v42
    let v91 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v90 v44
    let v92 : string = method17(v86)
    let v93 : string = "v92.as_str()"
    let v94 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v93
    let v95 : string = method21()
    let v96 : string = "v95.as_str()"
    let v97 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v96
    let v98 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v91, v94, v97) v52
    let v99 : Types.std.string.String = method1(v98)
    let v100 : string = "fable_library_rust::String_::fromString(v99)"
    let v101 : string = Fable.Core.RustInterop.emitRustExpr () v100
    let v102 : Types.EmitType<Types.std.string.String> = method10(v101)
    let v103 : string = "$0"
    let v104 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v1 v103
    let v105 : string = "core::ops::Deref::deref(v104)"
    let v106 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v105
    let v107 : obj = v106
    let v108 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v107 v21
    let v109 : Types.EmitType<Types.std.string.String> = v108 |> unbox<Types.EmitType<Types.std.string.String>>
    let v110 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v109 v36
    let v111 : string = (v110).ToString ()
    let v112 : string = "r#\"" + v39 + "\"#"
    let v113 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v112
    let v114 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v113 v42
    let v115 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v114 v44
    let v116 : string = method17(v111)
    let v117 : string = "v116.as_str()"
    let v118 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v117
    let v119 : string = method18()
    let v120 : string = "v119.as_str()"
    let v121 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v120
    let v122 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v115, v118, v121) v52
    let v123 : Types.std.string.String = method1(v122)
    let v124 : string = "fable_library_rust::String_::fromString(v123)"
    let v125 : string = Fable.Core.RustInterop.emitRustExpr () v124
    let v126 : string = "r#\"" + v57 + "\"#"
    let v127 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v126
    let v128 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v127 v42
    let v129 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v128 v44
    let v130 : string = method17(v125)
    let v131 : string = "v130.as_str()"
    let v132 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v131
    let v133 : string = method19()
    let v134 : string = "v133.as_str()"
    let v135 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v134
    let v136 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v129, v132, v135) v52
    let v137 : Types.std.string.String = method1(v136)
    let v138 : string = "fable_library_rust::String_::fromString(v137)"
    let v139 : string = Fable.Core.RustInterop.emitRustExpr () v138
    let v140 : string = "r#\"" + v72 + "\"#"
    let v141 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v140
    let v142 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v141 v42
    let v143 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v142 v44
    let v144 : string = method17(v139)
    let v145 : string = "v144.as_str()"
    let v146 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v145
    let v147 : string = method20()
    let v148 : string = "v147.as_str()"
    let v149 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v148
    let v150 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v143, v146, v149) v52
    let v151 : Types.std.string.String = method1(v150)
    let v152 : string = "fable_library_rust::String_::fromString(v151)"
    let v153 : string = Fable.Core.RustInterop.emitRustExpr () v152
    let v154 : string = "r#\"" + v87 + "\"#"
    let v155 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v154
    let v156 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v155 v42
    let v157 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v156 v44
    let v158 : string = method17(v153)
    let v159 : string = "v158.as_str()"
    let v160 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v159
    let v161 : string = method21()
    let v162 : string = "v161.as_str()"
    let v163 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v162
    let v164 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v157, v160, v163) v52
    let v165 : Types.std.string.String = method1(v164)
    let v166 : string = "fable_library_rust::String_::fromString(v165)"
    let v167 : string = Fable.Core.RustInterop.emitRustExpr () v166
    let v168 : Types.EmitType<Types.std.string.String> = method10(v167)
    let v169 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v25 v36
    let v170 : string = (v169).ToString ()
    let v171 : string = "r#\"" + v39 + "\"#"
    let v172 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v171
    let v173 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v172 v42
    let v174 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v173 v44
    let v175 : string = method17(v170)
    let v176 : string = "v175.as_str()"
    let v177 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v176
    let v178 : string = method18()
    let v179 : string = "v178.as_str()"
    let v180 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v179
    let v181 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v174, v177, v180) v52
    let v182 : Types.std.string.String = method1(v181)
    let v183 : string = "fable_library_rust::String_::fromString(v182)"
    let v184 : string = Fable.Core.RustInterop.emitRustExpr () v183
    let v185 : string = "r#\"" + v57 + "\"#"
    let v186 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v185
    let v187 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v186 v42
    let v188 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v187 v44
    let v189 : string = method17(v184)
    let v190 : string = "v189.as_str()"
    let v191 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v190
    let v192 : string = method19()
    let v193 : string = "v192.as_str()"
    let v194 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v193
    let v195 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v188, v191, v194) v52
    let v196 : Types.std.string.String = method1(v195)
    let v197 : string = "fable_library_rust::String_::fromString(v196)"
    let v198 : string = Fable.Core.RustInterop.emitRustExpr () v197
    let v199 : string = "r#\"" + v72 + "\"#"
    let v200 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v199
    let v201 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v200 v42
    let v202 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v201 v44
    let v203 : string = method17(v198)
    let v204 : string = "v203.as_str()"
    let v205 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v204
    let v206 : string = method20()
    let v207 : string = "v206.as_str()"
    let v208 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v207
    let v209 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v202, v205, v208) v52
    let v210 : Types.std.string.String = method1(v209)
    let v211 : string = "fable_library_rust::String_::fromString(v210)"
    let v212 : string = Fable.Core.RustInterop.emitRustExpr () v211
    let v213 : string = "r#\"" + v87 + "\"#"
    let v214 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v213
    let v215 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v214 v42
    let v216 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v215 v44
    let v217 : string = method17(v212)
    let v218 : string = "v217.as_str()"
    let v219 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v218
    let v220 : string = method21()
    let v221 : string = "v220.as_str()"
    let v222 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v221
    let v223 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v216, v219, v222) v52
    let v224 : Types.std.string.String = method1(v223)
    let v225 : string = "fable_library_rust::String_::fromString(v224)"
    let v226 : string = Fable.Core.RustInterop.emitRustExpr () v225
    let v227 : Types.EmitType<Types.std.string.String> = method10(v226)
    let v228 : string = "98d5ef"
    let v229 : string = v228.Substring (0, 2)
    let v230 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v231 : uint8 = Fable.Core.RustInterop.emitRustExpr v229 v230
    let v232 : string = v228.Substring (2, 4)
    let v233 : uint8 = Fable.Core.RustInterop.emitRustExpr v232 v230
    let v234 : string = v228.Substring (4, 6)
    let v235 : uint8 = Fable.Core.RustInterop.emitRustExpr v234 v230
    let v236 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v237 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v168, v231, v233, v235) v236
    let v238 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v237 v36
    let v239 : string = "385779"
    let v240 : string = v239.Substring (0, 2)
    let v241 : uint8 = Fable.Core.RustInterop.emitRustExpr v240 v230
    let v242 : string = v239.Substring (2, 4)
    let v243 : uint8 = Fable.Core.RustInterop.emitRustExpr v242 v230
    let v244 : string = v239.Substring (4, 6)
    let v245 : uint8 = Fable.Core.RustInterop.emitRustExpr v244 v230
    let v246 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v227, v241, v243, v245) v236
    let v247 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v246 v36
    let v248 : string = $"{v102} {v238} {v247}"
    System.Console.WriteLine v248
    ()
and method54 () : string =
    let v0 : string = "Fsharp"
    v0
and method55 (v0 : Types.std.time.SystemTime) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "format!(\"{:?}\", $0)"
    let v2 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v0 v1
    let v3 : Types.EmitType<Types.std.string.String> = v2 |> unbox<Types.EmitType<Types.std.string.String>>
    v3
and method56 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.RustInterop.emitRustExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method13(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.RustInterop.emitRustExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method10(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method10(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method10(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method14(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method10(v18)
    let v20 : US0 = US0_1
    let v21 : string = "format!(\"{:?}\", $0)"
    let v22 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v20 v21
    let v23 : Types.EmitType<Types.std.string.String> = method15(v22)
    let v24 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v23|]
    let v25 : Types.EmitType<Types.std.string.String> = method16(v24)
    let v26 : string = "> wait_file_change ()"
    let v27 : Types.EmitType<Types.std.string.String> = method10(v26)
    let v28 : (Types.EmitType<Types.std.string.String> []) = [|v27|]
    let v29 : string = "$0"
    let v30 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v28 v29
    let v31 : string = "core::ops::Deref::deref(v30)"
    let v32 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v31
    let v33 : obj = v32
    let v34 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v33 v21
    let v35 : Types.EmitType<Types.std.string.String> = v34 |> unbox<Types.EmitType<Types.std.string.String>>
    let v36 : string = "format!(\"{}\", $0)"
    let v37 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v35 v36
    let v38 : string = (v37).ToString ()
    let v39 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v40 : string = "r#\"" + v39 + "\"#"
    let v41 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v40
    let v42 : string = "regex::RegexBuilder::new($0)"
    let v43 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v41 v42
    let v44 : string = "$0.build().unwrap()"
    let v45 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v43 v44
    let v46 : string = method17(v38)
    let v47 : string = "v46.as_str()"
    let v48 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v47
    let v49 : string = method18()
    let v50 : string = "v49.as_str()"
    let v51 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v50
    let v52 : string = "$0.replace_all(&$1, $2).to_string()"
    let v53 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v45, v48, v51) v52
    let v54 : Types.std.string.String = method1(v53)
    let v55 : string = "fable_library_rust::String_::fromString(v54)"
    let v56 : string = Fable.Core.RustInterop.emitRustExpr () v55
    let v57 : string = "\\[\"(.*?)\"\\]"
    let v58 : string = "r#\"" + v57 + "\"#"
    let v59 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v58
    let v60 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v59 v42
    let v61 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v60 v44
    let v62 : string = method17(v56)
    let v63 : string = "v62.as_str()"
    let v64 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v63
    let v65 : string = method19()
    let v66 : string = "v65.as_str()"
    let v67 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v66
    let v68 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v61, v64, v67) v52
    let v69 : Types.std.string.String = method1(v68)
    let v70 : string = "fable_library_rust::String_::fromString(v69)"
    let v71 : string = Fable.Core.RustInterop.emitRustExpr () v70
    let v72 : string = "\\\\\""
    let v73 : string = "r#\"" + v72 + "\"#"
    let v74 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v73
    let v75 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v74 v42
    let v76 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v75 v44
    let v77 : string = method17(v71)
    let v78 : string = "v77.as_str()"
    let v79 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v78
    let v80 : string = method20()
    let v81 : string = "v80.as_str()"
    let v82 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v81
    let v83 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v76, v79, v82) v52
    let v84 : Types.std.string.String = method1(v83)
    let v85 : string = "fable_library_rust::String_::fromString(v84)"
    let v86 : string = Fable.Core.RustInterop.emitRustExpr () v85
    let v87 : string = ", "
    let v88 : string = "r#\"" + v87 + "\"#"
    let v89 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v88
    let v90 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v89 v42
    let v91 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v90 v44
    let v92 : string = method17(v86)
    let v93 : string = "v92.as_str()"
    let v94 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v93
    let v95 : string = method21()
    let v96 : string = "v95.as_str()"
    let v97 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v96
    let v98 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v91, v94, v97) v52
    let v99 : Types.std.string.String = method1(v98)
    let v100 : string = "fable_library_rust::String_::fromString(v99)"
    let v101 : string = Fable.Core.RustInterop.emitRustExpr () v100
    let v102 : Types.EmitType<Types.std.string.String> = method10(v101)
    let v103 : string = "$0"
    let v104 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v1 v103
    let v105 : string = "core::ops::Deref::deref(v104)"
    let v106 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v105
    let v107 : obj = v106
    let v108 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v107 v21
    let v109 : Types.EmitType<Types.std.string.String> = v108 |> unbox<Types.EmitType<Types.std.string.String>>
    let v110 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v109 v36
    let v111 : string = (v110).ToString ()
    let v112 : string = "r#\"" + v39 + "\"#"
    let v113 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v112
    let v114 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v113 v42
    let v115 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v114 v44
    let v116 : string = method17(v111)
    let v117 : string = "v116.as_str()"
    let v118 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v117
    let v119 : string = method18()
    let v120 : string = "v119.as_str()"
    let v121 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v120
    let v122 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v115, v118, v121) v52
    let v123 : Types.std.string.String = method1(v122)
    let v124 : string = "fable_library_rust::String_::fromString(v123)"
    let v125 : string = Fable.Core.RustInterop.emitRustExpr () v124
    let v126 : string = "r#\"" + v57 + "\"#"
    let v127 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v126
    let v128 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v127 v42
    let v129 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v128 v44
    let v130 : string = method17(v125)
    let v131 : string = "v130.as_str()"
    let v132 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v131
    let v133 : string = method19()
    let v134 : string = "v133.as_str()"
    let v135 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v134
    let v136 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v129, v132, v135) v52
    let v137 : Types.std.string.String = method1(v136)
    let v138 : string = "fable_library_rust::String_::fromString(v137)"
    let v139 : string = Fable.Core.RustInterop.emitRustExpr () v138
    let v140 : string = "r#\"" + v72 + "\"#"
    let v141 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v140
    let v142 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v141 v42
    let v143 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v142 v44
    let v144 : string = method17(v139)
    let v145 : string = "v144.as_str()"
    let v146 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v145
    let v147 : string = method20()
    let v148 : string = "v147.as_str()"
    let v149 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v148
    let v150 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v143, v146, v149) v52
    let v151 : Types.std.string.String = method1(v150)
    let v152 : string = "fable_library_rust::String_::fromString(v151)"
    let v153 : string = Fable.Core.RustInterop.emitRustExpr () v152
    let v154 : string = "r#\"" + v87 + "\"#"
    let v155 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v154
    let v156 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v155 v42
    let v157 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v156 v44
    let v158 : string = method17(v153)
    let v159 : string = "v158.as_str()"
    let v160 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v159
    let v161 : string = method21()
    let v162 : string = "v161.as_str()"
    let v163 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v162
    let v164 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v157, v160, v163) v52
    let v165 : Types.std.string.String = method1(v164)
    let v166 : string = "fable_library_rust::String_::fromString(v165)"
    let v167 : string = Fable.Core.RustInterop.emitRustExpr () v166
    let v168 : Types.EmitType<Types.std.string.String> = method10(v167)
    let v169 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v25 v36
    let v170 : string = (v169).ToString ()
    let v171 : string = "r#\"" + v39 + "\"#"
    let v172 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v171
    let v173 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v172 v42
    let v174 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v173 v44
    let v175 : string = method17(v170)
    let v176 : string = "v175.as_str()"
    let v177 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v176
    let v178 : string = method18()
    let v179 : string = "v178.as_str()"
    let v180 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v179
    let v181 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v174, v177, v180) v52
    let v182 : Types.std.string.String = method1(v181)
    let v183 : string = "fable_library_rust::String_::fromString(v182)"
    let v184 : string = Fable.Core.RustInterop.emitRustExpr () v183
    let v185 : string = "r#\"" + v57 + "\"#"
    let v186 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v185
    let v187 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v186 v42
    let v188 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v187 v44
    let v189 : string = method17(v184)
    let v190 : string = "v189.as_str()"
    let v191 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v190
    let v192 : string = method19()
    let v193 : string = "v192.as_str()"
    let v194 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v193
    let v195 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v188, v191, v194) v52
    let v196 : Types.std.string.String = method1(v195)
    let v197 : string = "fable_library_rust::String_::fromString(v196)"
    let v198 : string = Fable.Core.RustInterop.emitRustExpr () v197
    let v199 : string = "r#\"" + v72 + "\"#"
    let v200 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v199
    let v201 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v200 v42
    let v202 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v201 v44
    let v203 : string = method17(v198)
    let v204 : string = "v203.as_str()"
    let v205 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v204
    let v206 : string = method20()
    let v207 : string = "v206.as_str()"
    let v208 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v207
    let v209 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v202, v205, v208) v52
    let v210 : Types.std.string.String = method1(v209)
    let v211 : string = "fable_library_rust::String_::fromString(v210)"
    let v212 : string = Fable.Core.RustInterop.emitRustExpr () v211
    let v213 : string = "r#\"" + v87 + "\"#"
    let v214 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v213
    let v215 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v214 v42
    let v216 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v215 v44
    let v217 : string = method17(v212)
    let v218 : string = "v217.as_str()"
    let v219 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v218
    let v220 : string = method21()
    let v221 : string = "v220.as_str()"
    let v222 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v221
    let v223 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v216, v219, v222) v52
    let v224 : Types.std.string.String = method1(v223)
    let v225 : string = "fable_library_rust::String_::fromString(v224)"
    let v226 : string = Fable.Core.RustInterop.emitRustExpr () v225
    let v227 : Types.EmitType<Types.std.string.String> = method10(v226)
    let v228 : string = "387957"
    let v229 : string = v228.Substring (0, 2)
    let v230 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v231 : uint8 = Fable.Core.RustInterop.emitRustExpr v229 v230
    let v232 : string = v228.Substring (2, 4)
    let v233 : uint8 = Fable.Core.RustInterop.emitRustExpr v232 v230
    let v234 : string = v228.Substring (4, 6)
    let v235 : uint8 = Fable.Core.RustInterop.emitRustExpr v234 v230
    let v236 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v237 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v168, v231, v233, v235) v236
    let v238 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v237 v36
    let v239 : string = "385779"
    let v240 : string = v239.Substring (0, 2)
    let v241 : uint8 = Fable.Core.RustInterop.emitRustExpr v240 v230
    let v242 : string = v239.Substring (2, 4)
    let v243 : uint8 = Fable.Core.RustInterop.emitRustExpr v242 v230
    let v244 : string = v239.Substring (4, 6)
    let v245 : uint8 = Fable.Core.RustInterop.emitRustExpr v244 v230
    let v246 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v227, v241, v243, v245) v236
    let v247 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v246 v36
    let v248 : string = $"{v102} {v238} {v247}"
    System.Console.WriteLine v248
    ()
and method57 (v0 : int32, v1 : Mut1) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and method58 () : uint64 =
    60UL
and method60 (v0 : Types.Ref<Types.Str>) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "format!(\"{:?}\", $0)"
    let v2 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v0 v1
    let v3 : Types.EmitType<Types.std.string.String> = v2 |> unbox<Types.EmitType<Types.std.string.String>>
    v3
and method59 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.RustInterop.emitRustExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method13(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.RustInterop.emitRustExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method10(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method10(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method10(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method14(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method10(v18)
    let v20 : US0 = US0_1
    let v21 : string = "format!(\"{:?}\", $0)"
    let v22 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v20 v21
    let v23 : Types.EmitType<Types.std.string.String> = method15(v22)
    let v24 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v23|]
    let v25 : Types.EmitType<Types.std.string.String> = method16(v24)
    let v26 : string = "> app ()"
    let v27 : string = "r#\"" + v26 + "\"#"
    let v28 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v27
    let v29 : Types.EmitType<Types.std.string.String> = method60(v28)
    let v30 : (Types.EmitType<Types.std.string.String> []) = [|v29|]
    let v31 : string = "$0"
    let v32 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v30 v31
    let v33 : string = "core::ops::Deref::deref(v32)"
    let v34 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v33
    let v35 : obj = v34
    let v36 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v35 v21
    let v37 : Types.EmitType<Types.std.string.String> = v36 |> unbox<Types.EmitType<Types.std.string.String>>
    let v38 : string = "format!(\"{}\", $0)"
    let v39 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v37 v38
    let v40 : string = (v39).ToString ()
    let v41 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v42 : string = "r#\"" + v41 + "\"#"
    let v43 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v42
    let v44 : string = "regex::RegexBuilder::new($0)"
    let v45 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v43 v44
    let v46 : string = "$0.build().unwrap()"
    let v47 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v45 v46
    let v48 : string = method17(v40)
    let v49 : string = "v48.as_str()"
    let v50 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v49
    let v51 : string = method18()
    let v52 : string = "v51.as_str()"
    let v53 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v52
    let v54 : string = "$0.replace_all(&$1, $2).to_string()"
    let v55 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v47, v50, v53) v54
    let v56 : Types.std.string.String = method1(v55)
    let v57 : string = "fable_library_rust::String_::fromString(v56)"
    let v58 : string = Fable.Core.RustInterop.emitRustExpr () v57
    let v59 : string = "\\[\"(.*?)\"\\]"
    let v60 : string = "r#\"" + v59 + "\"#"
    let v61 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v60
    let v62 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v61 v44
    let v63 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v62 v46
    let v64 : string = method17(v58)
    let v65 : string = "v64.as_str()"
    let v66 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v65
    let v67 : string = method19()
    let v68 : string = "v67.as_str()"
    let v69 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v68
    let v70 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v63, v66, v69) v54
    let v71 : Types.std.string.String = method1(v70)
    let v72 : string = "fable_library_rust::String_::fromString(v71)"
    let v73 : string = Fable.Core.RustInterop.emitRustExpr () v72
    let v74 : string = "\\\\\""
    let v75 : string = "r#\"" + v74 + "\"#"
    let v76 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v75
    let v77 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v76 v44
    let v78 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v77 v46
    let v79 : string = method17(v73)
    let v80 : string = "v79.as_str()"
    let v81 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v80
    let v82 : string = method20()
    let v83 : string = "v82.as_str()"
    let v84 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v83
    let v85 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v78, v81, v84) v54
    let v86 : Types.std.string.String = method1(v85)
    let v87 : string = "fable_library_rust::String_::fromString(v86)"
    let v88 : string = Fable.Core.RustInterop.emitRustExpr () v87
    let v89 : string = ", "
    let v90 : string = "r#\"" + v89 + "\"#"
    let v91 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v90
    let v92 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v91 v44
    let v93 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v92 v46
    let v94 : string = method17(v88)
    let v95 : string = "v94.as_str()"
    let v96 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v95
    let v97 : string = method21()
    let v98 : string = "v97.as_str()"
    let v99 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v98
    let v100 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v93, v96, v99) v54
    let v101 : Types.std.string.String = method1(v100)
    let v102 : string = "fable_library_rust::String_::fromString(v101)"
    let v103 : string = Fable.Core.RustInterop.emitRustExpr () v102
    let v104 : Types.EmitType<Types.std.string.String> = method10(v103)
    let v105 : string = "$0"
    let v106 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr v1 v105
    let v107 : string = "core::ops::Deref::deref(v106)"
    let v108 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.RustInterop.emitRustExpr () v107
    let v109 : obj = v108
    let v110 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v109 v21
    let v111 : Types.EmitType<Types.std.string.String> = v110 |> unbox<Types.EmitType<Types.std.string.String>>
    let v112 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v111 v38
    let v113 : string = (v112).ToString ()
    let v114 : string = "r#\"" + v41 + "\"#"
    let v115 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v114
    let v116 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v115 v44
    let v117 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v116 v46
    let v118 : string = method17(v113)
    let v119 : string = "v118.as_str()"
    let v120 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v119
    let v121 : string = method18()
    let v122 : string = "v121.as_str()"
    let v123 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v122
    let v124 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v117, v120, v123) v54
    let v125 : Types.std.string.String = method1(v124)
    let v126 : string = "fable_library_rust::String_::fromString(v125)"
    let v127 : string = Fable.Core.RustInterop.emitRustExpr () v126
    let v128 : string = "r#\"" + v59 + "\"#"
    let v129 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v128
    let v130 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v129 v44
    let v131 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v130 v46
    let v132 : string = method17(v127)
    let v133 : string = "v132.as_str()"
    let v134 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v133
    let v135 : string = method19()
    let v136 : string = "v135.as_str()"
    let v137 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v136
    let v138 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v131, v134, v137) v54
    let v139 : Types.std.string.String = method1(v138)
    let v140 : string = "fable_library_rust::String_::fromString(v139)"
    let v141 : string = Fable.Core.RustInterop.emitRustExpr () v140
    let v142 : string = "r#\"" + v74 + "\"#"
    let v143 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v142
    let v144 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v143 v44
    let v145 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v144 v46
    let v146 : string = method17(v141)
    let v147 : string = "v146.as_str()"
    let v148 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v147
    let v149 : string = method20()
    let v150 : string = "v149.as_str()"
    let v151 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v150
    let v152 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v145, v148, v151) v54
    let v153 : Types.std.string.String = method1(v152)
    let v154 : string = "fable_library_rust::String_::fromString(v153)"
    let v155 : string = Fable.Core.RustInterop.emitRustExpr () v154
    let v156 : string = "r#\"" + v89 + "\"#"
    let v157 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v156
    let v158 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v157 v44
    let v159 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v158 v46
    let v160 : string = method17(v155)
    let v161 : string = "v160.as_str()"
    let v162 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v161
    let v163 : string = method21()
    let v164 : string = "v163.as_str()"
    let v165 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v164
    let v166 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v159, v162, v165) v54
    let v167 : Types.std.string.String = method1(v166)
    let v168 : string = "fable_library_rust::String_::fromString(v167)"
    let v169 : string = Fable.Core.RustInterop.emitRustExpr () v168
    let v170 : Types.EmitType<Types.std.string.String> = method10(v169)
    let v171 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v25 v38
    let v172 : string = (v171).ToString ()
    let v173 : string = "r#\"" + v41 + "\"#"
    let v174 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v173
    let v175 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v174 v44
    let v176 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v175 v46
    let v177 : string = method17(v172)
    let v178 : string = "v177.as_str()"
    let v179 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v178
    let v180 : string = method18()
    let v181 : string = "v180.as_str()"
    let v182 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v181
    let v183 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v176, v179, v182) v54
    let v184 : Types.std.string.String = method1(v183)
    let v185 : string = "fable_library_rust::String_::fromString(v184)"
    let v186 : string = Fable.Core.RustInterop.emitRustExpr () v185
    let v187 : string = "r#\"" + v59 + "\"#"
    let v188 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v187
    let v189 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v188 v44
    let v190 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v189 v46
    let v191 : string = method17(v186)
    let v192 : string = "v191.as_str()"
    let v193 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v192
    let v194 : string = method19()
    let v195 : string = "v194.as_str()"
    let v196 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v195
    let v197 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v190, v193, v196) v54
    let v198 : Types.std.string.String = method1(v197)
    let v199 : string = "fable_library_rust::String_::fromString(v198)"
    let v200 : string = Fable.Core.RustInterop.emitRustExpr () v199
    let v201 : string = "r#\"" + v74 + "\"#"
    let v202 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v201
    let v203 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v202 v44
    let v204 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v203 v46
    let v205 : string = method17(v200)
    let v206 : string = "v205.as_str()"
    let v207 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v206
    let v208 : string = method20()
    let v209 : string = "v208.as_str()"
    let v210 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v209
    let v211 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v204, v207, v210) v54
    let v212 : Types.std.string.String = method1(v211)
    let v213 : string = "fable_library_rust::String_::fromString(v212)"
    let v214 : string = Fable.Core.RustInterop.emitRustExpr () v213
    let v215 : string = "r#\"" + v89 + "\"#"
    let v216 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v215
    let v217 : Types.regex.RegexBuilder = Fable.Core.RustInterop.emitRustExpr v216 v44
    let v218 : Types.Ref<Types.regex.Regex> = Fable.Core.RustInterop.emitRustExpr v217 v46
    let v219 : string = method17(v214)
    let v220 : string = "v219.as_str()"
    let v221 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v220
    let v222 : string = method21()
    let v223 : string = "v222.as_str()"
    let v224 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v223
    let v225 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr struct (v218, v221, v224) v54
    let v226 : Types.std.string.String = method1(v225)
    let v227 : string = "fable_library_rust::String_::fromString(v226)"
    let v228 : string = Fable.Core.RustInterop.emitRustExpr () v227
    let v229 : Types.EmitType<Types.std.string.String> = method10(v228)
    let v230 : string = "387958"
    let v231 : string = v230.Substring (0, 2)
    let v232 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v233 : uint8 = Fable.Core.RustInterop.emitRustExpr v231 v232
    let v234 : string = v230.Substring (2, 4)
    let v235 : uint8 = Fable.Core.RustInterop.emitRustExpr v234 v232
    let v236 : string = v230.Substring (4, 6)
    let v237 : uint8 = Fable.Core.RustInterop.emitRustExpr v236 v232
    let v238 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v239 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v170, v233, v235, v237) v238
    let v240 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v239 v38
    let v241 : string = "385779"
    let v242 : string = v241.Substring (0, 2)
    let v243 : uint8 = Fable.Core.RustInterop.emitRustExpr v242 v232
    let v244 : string = v241.Substring (2, 4)
    let v245 : uint8 = Fable.Core.RustInterop.emitRustExpr v244 v232
    let v246 : string = v241.Substring (4, 6)
    let v247 : uint8 = Fable.Core.RustInterop.emitRustExpr v246 v232
    let v248 : Types.colored.ColoredString = Fable.Core.RustInterop.emitRustExpr struct (v229, v243, v245, v247) v238
    let v249 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v248 v38
    let v250 : string = $"{v104} {v240} {v249}"
    System.Console.WriteLine v250
    ()
and closure0 () () : int32 =
    let v0 : string = "cli2"
    let v1 : string = "r#\"" + v0 + "\"#"
    let v2 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v1
    let v3 : string = "String::from(core::ops::Deref::deref($0))"
    let v4 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v2 v3
    let v5 : Option<Types.std.string.String> = Some v4
    let v6 : Option<Types.std.string.String> = method0(v5)
    let v7 : string = "v6.map(&*$0)"
    let v8 : (Types.std.string.String -> string) = closure1()
    let v9 : Option<string> = Fable.Core.RustInterop.emitRustExpr v8 v7
    let v10 : string = "format!(\"{:?}\", $0)"
    let v11 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v9 v10
    System.Console.WriteLine v11
    let struct (v12 : string, v13 : string, v14 : string, v15 : bool) = method2()
    let v16 : string = "chrono::Utc::now()"
    let v17 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
    let v18 : string = "($0).timestamp()"
    let v19 : int64 = Fable.Core.RustInterop.emitRustExpr v17 v18
    let v20 : string = "app1"
    let v21 : string = "r#\"" + v20 + "\"#"
    let v22 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v21
    let v23 : string = "clap::Command::new(v22)"
    let v24 : string = ".version(env!(\"CARGO_PKG_VERSION\"))"
    let v25 : string = v23 + v24
    let v26 : string = ".propagate_version(true)"
    let v27 : string = v25 + v26
    let v28 : string = ".subcommand_required(false)"
    let v29 : string = v27 + v28
    let v30 : string = ".about(\"command about\")"
    let v31 : string = v29 + v30
    let v32 : string = ".arg_required_else_help(true)"
    let v33 : string = v31 + v32
    let v34 : Types.clap.builder.Command = Fable.Core.RustInterop.emitRustExpr () v33
    let v35 : string = "PostFsxRsBuild"
    let v36 : string = "r#\"" + v35 + "\"#"
    let v37 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v36
    let v38 : string = "clap::Command::new(v37)"
    let v39 : string = v38 + v24
    let v40 : string = v39 + v26
    let v41 : string = v40 + v28
    let v42 : string = v41 + v30
    let v43 : string = v42 + v32
    let v44 : Types.clap.builder.Command = Fable.Core.RustInterop.emitRustExpr () v43
    let v45 : string = "rs-path"
    let v46 : string = "r#\"" + v45 + "\"#"
    let v47 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v46
    let v48 : string = "clap::Arg::new(v47)"
    let v49 : Types.clap.builder.Arg = Fable.Core.RustInterop.emitRustExpr () v48
    let v50 : string = "v44.arg(v49)"
    let v51 : Types.clap.builder.Command = Fable.Core.RustInterop.emitRustExpr () v50
    let v52 : string = "v34.subcommand(v51)"
    let v53 : Types.clap.builder.Command = Fable.Core.RustInterop.emitRustExpr () v52
    let v54 : string = "SpiFsxBuild"
    let v55 : string = "r#\"" + v54 + "\"#"
    let v56 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v55
    let v57 : string = "clap::Command::new(v56)"
    let v58 : string = v57 + v24
    let v59 : string = v58 + v26
    let v60 : string = v59 + v28
    let v61 : string = v60 + v30
    let v62 : string = v61 + v32
    let v63 : Types.clap.builder.Command = Fable.Core.RustInterop.emitRustExpr () v62
    let v64 : string = "spi-path"
    let v65 : string = "r#\"" + v64 + "\"#"
    let v66 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v65
    let v67 : string = "clap::Arg::new(v66)"
    let v68 : Types.clap.builder.Arg = Fable.Core.RustInterop.emitRustExpr () v67
    let v69 : string = "v63.arg(v68)"
    let v70 : Types.clap.builder.Command = Fable.Core.RustInterop.emitRustExpr () v69
    let v71 : string = "fsx-path"
    let v72 : string = "r#\"" + v71 + "\"#"
    let v73 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v72
    let v74 : string = "clap::Arg::new(v73)"
    let v75 : Types.clap.builder.Arg = Fable.Core.RustInterop.emitRustExpr () v74
    let v76 : string = "v70.arg(v75)"
    let v77 : Types.clap.builder.Command = Fable.Core.RustInterop.emitRustExpr () v76
    let v78 : string = "v53.subcommand(v77)"
    let v79 : Types.clap.builder.Command = Fable.Core.RustInterop.emitRustExpr () v78
    let v80 : string = "v79.get_matches()"
    let v81 : Types.clap.parser.ArgMatches = Fable.Core.RustInterop.emitRustExpr () v80
    let v82 : string = "std::sync::Arc::new(v81)"
    let v83 : Types.std.sync.Arc<Types.clap.parser.ArgMatches> = Fable.Core.RustInterop.emitRustExpr () v82
    let v84 : string = "v83.subcommand().map(|(name, matches)| (name, std::sync::Arc::new(matches.clone())))"
    let v85 : Option<struct (Types.Ref<Types.Str> * Types.std.sync.Arc<Types.clap.parser.ArgMatches>)> = Fable.Core.RustInterop.emitRustExpr () v84
    let v86 : string = "v85.unwrap()"
    let struct (v87 : Types.Ref<Types.Str>, v88 : Types.std.sync.Arc<Types.clap.parser.ArgMatches>) = Fable.Core.RustInterop.emitRustExpr () v86
    let v89 : obj = struct (v87, v88)
    let v90 : string = "v89.0"
    let v91 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v90
    let v92 : string = "std::sync::Arc::clone(&v89.1)"
    let v93 : Types.std.sync.Arc<Types.clap.parser.ArgMatches> = Fable.Core.RustInterop.emitRustExpr () v92
    let struct (v94 : Types.Ref<Types.Str>, v95 : Types.Ref<Types.clap.parser.ArgMatches>) = v89
    let v96 : string = "fable_library_rust::String_::string(v94)"
    let v97 : string = Fable.Core.RustInterop.emitRustExpr () v96
    let v98 : bool = "PostFsxRsBuild" = v97
    if v98 then
        let v99 : string = method3()
        let v100 : string = "v99.as_str()"
        let v101 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v100
        let v102 : string = "v95.get_one::<String>(v101)"
        let v103 : Option<Types.StaticRef<Types.std.string.String>> = Fable.Core.RustInterop.emitRustExpr () v102
        let v104 : Option<Types.StaticRef<Types.std.string.String>> = method4(v103)
        let v105 : string = "v104.map(&*$0)"
        let v106 : (Types.StaticRef<Types.std.string.String> -> string) = closure2()
        let v107 : Option<string> = Fable.Core.RustInterop.emitRustExpr v106 v105
        let v108 : string = "get_clap_one: "
        let v109 : string = v108 + v45
        let v110 : string = "v107.unwrap_or(v109)"
        let v111 : string = Fable.Core.RustInterop.emitRustExpr () v110
        let v112 : string = method6(v111)
        let v113 : string = "fable_library_rust::String_::LrcStr::as_str($0)"
        let v114 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr v112 v113
        let v115 : string = "String::from(core::ops::Deref::deref($0))"
        let v116 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v114 v115
        let v117 : Types.std.string.String = method8(v116)
        let v118 : string = "std::path::PathBuf::from(v117)"
        let v119 : Types.std.path.PathBuf = Fable.Core.RustInterop.emitRustExpr () v118
        let v120 : Types.std.path.PathBuf = method9(v119)
        let v121 : string = "v120.canonicalize()"
        let v122 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.RustInterop.emitRustExpr () v121
        let v123 : string = "v122.unwrap()"
        let v124 : Types.std.path.PathBuf = Fable.Core.RustInterop.emitRustExpr () v123
        let struct (v125 : string, v126 : string, v127 : string, v128 : bool) = method2()
        let v129 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
        let v130 : int64 = Fable.Core.RustInterop.emitRustExpr v129 v18
        let v131 : string = "rs_path"
        let v132 : Types.EmitType<Types.std.string.String> = method10(v131)
        let v133 : Types.EmitType<Types.std.string.String> = method11(v124)
        let v134 : (Types.EmitType<Types.std.string.String> []) = [|v132; v133|]
        method12(v130, v134)
        let struct (v135 : string, v136 : string, v137 : string, v138 : bool) = method2()
        let v139 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
        let v140 : int64 = Fable.Core.RustInterop.emitRustExpr v139 v18
        let v141 : Types.std.path.PathBuf = method9(v124)
        let v142 : string = "v141.canonicalize()"
        let v143 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.RustInterop.emitRustExpr () v142
        let v144 : string = "v143.unwrap()"
        let v145 : Types.std.path.PathBuf = Fable.Core.RustInterop.emitRustExpr () v144
        let v146 : string = "path_clean"
        let v147 : Types.EmitType<Types.std.string.String> = method10(v146)
        let v148 : string = "format!(\"{}\", v145.display())"
        let v149 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v148
        let v150 : Types.std.string.String = method1(v149)
        let v151 : string = "fable_library_rust::String_::fromString(v150)"
        let v152 : string = Fable.Core.RustInterop.emitRustExpr () v151
        let v153 : Types.EmitType<Types.std.string.String> = method10(v152)
        let v154 : (Types.EmitType<Types.std.string.String> []) = [|v147; v153|]
        method22(v140, v154)
        let v155 : string = "std::fs::File::open(v145)"
        let v156 : Result<Types.std.fs.File, Types.std.io.Error> = Fable.Core.RustInterop.emitRustExpr () v155
        let v157 : string = "v156.unwrap()"
        let v158 : Types.std.fs.File = Fable.Core.RustInterop.emitRustExpr () v157
        let v159 : string = "std::cell::RefCell::new(linereader::LineReader::new(v158))"
        let v160 : Types.std.cell.RefCell<Types.linereader.LineReader<Types.std.fs.File>> = Fable.Core.RustInterop.emitRustExpr () v159
        let v161 : string = "reader"
        let v162 : Types.EmitType<Types.std.string.String> = method10(v161)
        let v163 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v160 v10
        let v164 : Types.EmitType<Types.std.string.String> = method15(v163)
        let v165 : (Types.EmitType<Types.std.string.String> []) = [|v162; v164|]
        method22(v140, v165)
        let v166 : UH0 = UH0_0
        let v167 : Mut0 = {l0 = v166} : Mut0
        let v168 : (Types.Vec<uint8> -> Result<bool, Types.std.io.Error>) = method23(v140, v167)
        let v169 : string = "v160.borrow_mut().for_each(move |x| v168(x.to_vec()))"
        let v170 : Result<unit, Types.std.io.Error> = Fable.Core.RustInterop.emitRustExpr () v169
        let v171 : string = "v170.unwrap()"
        Fable.Core.RustInterop.emitRustExpr () v171
        let v172 : UH0 = v167.l0
        let v173 : UH0 = UH0_0
        let v174 : UH0 = method26(v172, v173)
        let v175 : UH1 = UH1_0
        let v176 : UH1 = method27(v174, v175)
        let v177 : string = "lines len"
        let v178 : Types.EmitType<Types.std.string.String> = method10(v177)
        let v179 : int32 = 0
        let v180 : int32 = method28(v176, v179)
        let v181 : Types.EmitType<Types.std.string.String> = method24(v180)
        let v182 : (Types.EmitType<Types.std.string.String> []) = [|v178; v181|]
        method22(v140, v182)
        let v183 : int32 = 0
        let v184 : UH1 = UH1_0
        let struct (v185 : int32, v186 : UH1) = method29(v130, v176, v183, v184)
        let v187 : UH1 = UH1_0
        let v188 : UH1 = method32(v186, v187)
        let v189 : string = ""
        let v190 : string = method33(v188, v189)
        let v191 : string = "text_len"
        let v192 : Types.EmitType<Types.std.string.String> = method10(v191)
        let v193 : string = "v190.len()"
        let v194 : obj = Fable.Core.RustInterop.emitRustExpr () v193
        let v195 : string = "v194.try_into().unwrap()"
        let v196 : int32 = Fable.Core.RustInterop.emitRustExpr () v195
        let v197 : Types.EmitType<Types.std.string.String> = method24(v196)
        let v198 : (Types.EmitType<Types.std.string.String> []) = [|v192; v197|]
        method12(v130, v198)
        let v199 : string = method17(v190)
        let v200 : string = "v199.as_str()"
        let v201 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v200
        let v202 : string = "std::fs::write(v124, v201)"
        let v203 : Result<unit, Types.std.io.Error> = Fable.Core.RustInterop.emitRustExpr () v202
        let v204 : string = "v203.unwrap()"
        Fable.Core.RustInterop.emitRustExpr () v204
        let v205 : string = "> fs_write rs_path_clean text; ok"
        let v206 : Types.EmitType<Types.std.string.String> = method10(v205)
        let v207 : (Types.EmitType<Types.std.string.String> []) = [|v206|]
        method12(v130, v207)
    else
        let v208 : bool = "SpiFsxBuild" = v97
        if v208 then
            let v209 : string = method34()
            let v210 : string = "v209.as_str()"
            let v211 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v210
            let v212 : string = "v95.get_one::<String>(v211)"
            let v213 : Option<Types.StaticRef<Types.std.string.String>> = Fable.Core.RustInterop.emitRustExpr () v212
            let v214 : Option<Types.StaticRef<Types.std.string.String>> = method4(v213)
            let v215 : string = "v214.map(&*$0)"
            let v216 : (Types.StaticRef<Types.std.string.String> -> string) = closure4()
            let v217 : Option<string> = Fable.Core.RustInterop.emitRustExpr v216 v215
            let v218 : string = "get_clap_one: "
            let v219 : string = v218 + v64
            let v220 : string = "v217.unwrap_or(v219)"
            let v221 : string = Fable.Core.RustInterop.emitRustExpr () v220
            let v222 : string = method6(v221)
            let v223 : string = "fable_library_rust::String_::LrcStr::as_str($0)"
            let v224 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr v222 v223
            let v225 : string = "String::from(core::ops::Deref::deref($0))"
            let v226 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v224 v225
            let v227 : Types.std.string.String = method8(v226)
            let v228 : string = "std::path::PathBuf::from(v227)"
            let v229 : Types.std.path.PathBuf = Fable.Core.RustInterop.emitRustExpr () v228
            let v230 : Types.std.path.PathBuf = method9(v229)
            let v231 : string = "v230.canonicalize()"
            let v232 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.RustInterop.emitRustExpr () v231
            let v233 : string = "v232.unwrap()"
            let v234 : Types.std.path.PathBuf = Fable.Core.RustInterop.emitRustExpr () v233
            let v235 : string = method35()
            let v236 : string = "v235.as_str()"
            let v237 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v236
            let v238 : string = "v95.get_one::<String>(v237)"
            let v239 : Option<Types.StaticRef<Types.std.string.String>> = Fable.Core.RustInterop.emitRustExpr () v238
            let v240 : Option<Types.StaticRef<Types.std.string.String>> = method4(v239)
            let v241 : string = "v240.map(&*$0)"
            let v242 : (Types.StaticRef<Types.std.string.String> -> Types.std.path.PathBuf) = closure5()
            let v243 : Option<Types.std.path.PathBuf> = Fable.Core.RustInterop.emitRustExpr v242 v241
            let struct (v244 : string, v245 : string, v246 : string, v247 : bool) = method2()
            let v248 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
            let v249 : int64 = Fable.Core.RustInterop.emitRustExpr v248 v18
            let v250 : string = "pwd"
            let v251 : Types.EmitType<Types.std.string.String> = method10(v250)
            let v252 : string = "std::env::current_dir()"
            let v253 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.RustInterop.emitRustExpr () v252
            let v254 : string = "v253.unwrap()"
            let v255 : Types.std.path.PathBuf = Fable.Core.RustInterop.emitRustExpr () v254
            let v256 : Types.std.path.PathBuf = method9(v255)
            let v257 : string = "v256.canonicalize()"
            let v258 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.RustInterop.emitRustExpr () v257
            let v259 : string = "v258.unwrap()"
            let v260 : Types.std.path.PathBuf = Fable.Core.RustInterop.emitRustExpr () v259
            let v261 : string = "format!(\"{}\", v260.display())"
            let v262 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v261
            let v263 : Types.std.string.String = method1(v262)
            let v264 : string = "fable_library_rust::String_::fromString(v263)"
            let v265 : string = Fable.Core.RustInterop.emitRustExpr () v264
            let v266 : Types.EmitType<Types.std.string.String> = method10(v265)
            let v267 : string = "spi_path"
            let v268 : Types.EmitType<Types.std.string.String> = method10(v267)
            let v269 : string = "format!(\"{}\", v234.display())"
            let v270 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v269
            let v271 : Types.std.string.String = method1(v270)
            let v272 : string = "fable_library_rust::String_::fromString(v271)"
            let v273 : string = Fable.Core.RustInterop.emitRustExpr () v272
            let v274 : Types.EmitType<Types.std.string.String> = method10(v273)
            let v275 : string = "new_fsx_path"
            let v276 : Types.EmitType<Types.std.string.String> = method10(v275)
            let v277 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v243 v10
            let v278 : Types.EmitType<Types.std.string.String> = method15(v277)
            let v279 : (Types.EmitType<Types.std.string.String> []) = [|v251; v266; v268; v274; v276; v278|]
            method37(v249, v279)
            let v280 : Types.std.path.PathBuf = method38(v234)
            let v281 : string = "v280.parent()"
            let v282 : Option<Types.Ref<Types.std.path.Path>> = Fable.Core.RustInterop.emitRustExpr () v281
            let v283 : string = "v282.unwrap()"
            let v284 : Types.Ref<Types.std.path.Path> = Fable.Core.RustInterop.emitRustExpr () v283
            let v285 : Types.Ref<Types.std.path.Path> = method39(v284)
            let v286 : string = "std::path::PathBuf::from(v285)"
            let v287 : Types.std.path.PathBuf = Fable.Core.RustInterop.emitRustExpr () v286
            let v288 : string = "src_path"
            let v289 : Types.EmitType<Types.std.string.String> = method10(v288)
            let v290 : string = "format!(\"{}\", v287.display())"
            let v291 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v290
            let v292 : Types.std.string.String = method1(v291)
            let v293 : string = "fable_library_rust::String_::fromString(v292)"
            let v294 : string = Fable.Core.RustInterop.emitRustExpr () v293
            let v295 : Types.EmitType<Types.std.string.String> = method10(v294)
            let v296 : (Types.EmitType<Types.std.string.String> []) = [|v289; v295|]
            method37(v249, v296)
            let v297 : string = "v287.ancestors()"
            let v298 : Types.std.path.Ancestors = Fable.Core.RustInterop.emitRustExpr () v297
            let v299 : unativeint = unativeint 10
            let v300 : string = "v298.take(v299)"
            let v301 : Types.std.iter.Iterator<Types.Ref<Types.std.path.Path>> = Fable.Core.RustInterop.emitRustExpr () v300
            let v302 : string = "$0.into_iter().map($1)"
            let v303 : (Types.Ref<Types.std.path.Path> -> Types.std.path.PathBuf) = closure6()
            let v304 : Types.std.iter.Iterator<Types.std.path.PathBuf> = Fable.Core.RustInterop.emitRustExpr struct (v301, v303) v302
            let v305 : string = "v304.into_iter().find($0)"
            let v306 : (Types.std.path.PathBuf -> bool) = closure7()
            let v307 : Option<Types.std.path.PathBuf> = Fable.Core.RustInterop.emitRustExpr v306 v305
            let v308 : string = "v307.unwrap()"
            let v309 : Types.std.path.PathBuf = Fable.Core.RustInterop.emitRustExpr () v308
            let v310 : string = "spiproj_path"
            let v311 : Types.EmitType<Types.std.string.String> = method10(v310)
            let v312 : string = "format!(\"{}\", v309.display())"
            let v313 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v312
            let v314 : Types.std.string.String = method1(v313)
            let v315 : string = "fable_library_rust::String_::fromString(v314)"
            let v316 : string = Fable.Core.RustInterop.emitRustExpr () v315
            let v317 : Types.EmitType<Types.std.string.String> = method10(v316)
            let v318 : (Types.EmitType<Types.std.string.String> []) = [|v311; v317|]
            method37(v249, v318)
            let v319 : string = "v234.to_str()"
            let v320 : Option<Types.Ref<Types.Str>> = Fable.Core.RustInterop.emitRustExpr () v319
            let v321 : string = "v320.unwrap()"
            let v322 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v321
            let v323 : string = "fable_library_rust::String_::string(v322)"
            let v324 : string = Fable.Core.RustInterop.emitRustExpr () v323
            let v325 : string = method43()
            let v326 : string = "fable_library_rust::String_::LrcStr::as_str($0)"
            let v327 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr v325 v326
            let v328 : string = "String::from(core::ops::Deref::deref($0))"
            let v329 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v327 v328
            let v330 : string = method44()
            let v331 : string = "fable_library_rust::String_::LrcStr::as_str($0)"
            let v332 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr v330 v331
            let v333 : string = "String::from(core::ops::Deref::deref($0))"
            let v334 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v332 v333
            let v335 : string = method6(v324)
            let v336 : string = "fable_library_rust::String_::LrcStr::as_str($0)"
            let v337 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr v335 v336
            let v338 : string = "String::from(core::ops::Deref::deref($0))"
            let v339 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v337 v338
            let v340 : string = "v339.replace(&v329, &v334)"
            let v341 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v340
            let v342 : Types.std.string.String = method1(v341)
            let v343 : string = "fable_library_rust::String_::fromString(v342)"
            let v344 : string = Fable.Core.RustInterop.emitRustExpr () v343
            let v345 : string = method44()
            let v346 : string = "fable_library_rust::String_::LrcStr::as_str($0)"
            let v347 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr v345 v346
            let v348 : string = "String::from(core::ops::Deref::deref($0))"
            let v349 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v347 v348
            let v350 : string = method45()
            let v351 : string = "fable_library_rust::String_::LrcStr::as_str($0)"
            let v352 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr v350 v351
            let v353 : string = "String::from(core::ops::Deref::deref($0))"
            let v354 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v352 v353
            let v355 : string = method6(v344)
            let v356 : string = "fable_library_rust::String_::LrcStr::as_str($0)"
            let v357 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr v355 v356
            let v358 : string = "String::from(core::ops::Deref::deref($0))"
            let v359 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v357 v358
            let v360 : string = "v359.replace(&v349, &v354)"
            let v361 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v360
            let v362 : Types.std.string.String = method1(v361)
            let v363 : string = "fable_library_rust::String_::fromString(v362)"
            let v364 : string = Fable.Core.RustInterop.emitRustExpr () v363
            let v365 : string = method6(v364)
            let v366 : string = "fable_library_rust::String_::LrcStr::as_str($0)"
            let v367 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr v365 v366
            let v368 : string = "String::from(core::ops::Deref::deref($0))"
            let v369 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v367 v368
            let v370 : Types.std.string.String = method8(v369)
            let v371 : string = "std::path::PathBuf::from(v370)"
            let v372 : Types.std.path.PathBuf = Fable.Core.RustInterop.emitRustExpr () v371
            let v373 : Types.std.path.PathBuf = method9(v372)
            let v374 : string = "v373.canonicalize()"
            let v375 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.RustInterop.emitRustExpr () v374
            let v376 : string = "v375.unwrap()"
            let v377 : Types.std.path.PathBuf = Fable.Core.RustInterop.emitRustExpr () v376
            let v378 : string = "fsx_path"
            let v379 : Types.EmitType<Types.std.string.String> = method10(v378)
            let v380 : string = "format!(\"{}\", v377.display())"
            let v381 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v380
            let v382 : Types.std.string.String = method1(v381)
            let v383 : string = "fable_library_rust::String_::fromString(v382)"
            let v384 : string = Fable.Core.RustInterop.emitRustExpr () v383
            let v385 : Types.EmitType<Types.std.string.String> = method10(v384)
            let v386 : (Types.EmitType<Types.std.string.String> []) = [|v379; v385|]
            method37(v249, v386)
            let v387 : string = method46()
            let v388 : string = "v387.as_str()"
            let v389 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v388
            let v390 : string = "std::fs::write(v377, v389)"
            let v391 : Result<unit, Types.std.io.Error> = Fable.Core.RustInterop.emitRustExpr () v390
            let v392 : string = "v391.unwrap()"
            Fable.Core.RustInterop.emitRustExpr () v392
            let v393 : string = "> fs_write fsx_path \"\"; ok"
            let v394 : Types.EmitType<Types.std.string.String> = method10(v393)
            let v395 : (Types.EmitType<Types.std.string.String> []) = [|v394|]
            method37(v249, v395)
            let v396 : string = "13805.try_into().unwrap()"
            let v397 : Types.U16 = Fable.Core.RustInterop.emitRustExpr () v396
            let v398 : string = "port"
            let v399 : Types.EmitType<Types.std.string.String> = method10(v398)
            let v400 : Types.EmitType<Types.std.string.String> = method47(v397)
            let v401 : (Types.EmitType<Types.std.string.String> []) = [|v399; v400|]
            method37(v249, v401)
            let v402 : string = "../The-Spiral-Language/The Spiral Language 2/bin/Release/net7.0/Spiral.dll"
            let v403 : string = "r#\"" + v402 + "\"#"
            let v404 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v403
            let v405 : string = "dotnet"
            let v406 : string = "r#\"" + v405 + "\"#"
            let v407 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v406
            let v408 : string = "std::process::Command::new(v407)"
            let v409 : obj = Fable.Core.RustInterop.emitRustExpr () v408
            let v410 : string = "let mut v409 = v409"
            Fable.Core.RustInterop.emitRustExpr () v410
            let v411 : string = "v409.arg(v404)"
            let v412 : obj = Fable.Core.RustInterop.emitRustExpr () v411
            let v413 : string = (v397).ToString ()
            let v414 : string = "port="
            let v415 : string = v414 + v413
            let v416 : string = method6(v415)
            let v417 : string = "fable_library_rust::String_::LrcStr::as_str($0)"
            let v418 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr v416 v417
            let v419 : string = "String::from(core::ops::Deref::deref($0))"
            let v420 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v418 v419
            let v421 : string = "v412.arg(v420)"
            let v422 : obj = Fable.Core.RustInterop.emitRustExpr () v421
            let v423 : string = "v422.stdout(std::process::Stdio::inherit())"
            let v424 : obj = Fable.Core.RustInterop.emitRustExpr () v423
            let v425 : string = "v424.stderr(std::process::Stdio::inherit())"
            let v426 : obj = Fable.Core.RustInterop.emitRustExpr () v425
            let v427 : string = "v426.spawn()"
            let v428 : Result<Types.std.process.Child, Types.std.io.Error> = Fable.Core.RustInterop.emitRustExpr () v427
            let v429 : string = "v428.unwrap()"
            let v430 : Types.std.process.Child = Fable.Core.RustInterop.emitRustExpr () v429
            let v431 : string = "process"
            let v432 : Types.EmitType<Types.std.string.String> = method10(v431)
            let v433 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v430 v10
            let v434 : Types.EmitType<Types.std.string.String> = method15(v433)
            let v435 : (Types.EmitType<Types.std.string.String> []) = [|v432; v434|]
            method37(v249, v435)
            let v436 : string = "std::net::SocketAddr::from(([0, 0, 0, 0], v397))"
            let v437 : Types.std.net.SocketAddr = Fable.Core.RustInterop.emitRustExpr () v436
            let v438 : string = "async move {"
            let v439 : string = "     loop {"
            let v440 : string = v438 + v439
            let v441 : string = "         let result = std::net::TcpStream::connect(&v437);"
            let v442 : string = v440 + v441
            let v443 : string = "         println!(\"connect_timeout: {:?}\", result);"
            let v444 : string = v442 + v443
            let v445 : string = "         if result.is_ok() {"
            let v446 : string = v444 + v445
            let v447 : string = "             tokio::time::sleep(std::time::Duration::from_secs(1)).await;"
            let v448 : string = v446 + v447
            let v449 : string = "             break;"
            let v450 : string = v448 + v449
            let v451 : string = "         } else {"
            let v452 : string = v450 + v451
            let v453 : string = "             tokio::time::sleep(std::time::Duration::from_millis(60)).await;"
            let v454 : string = v452 + v453
            let v455 : string = "         }"
            let v456 : string = v454 + v455
            let v457 : string = "     }"
            let v458 : string = v456 + v457
            let v459 : string = " }"
            let v460 : string = v458 + v459
            let v461 : string = "tokio::runtime::Builder::new_current_thread()"
            let v462 : obj = Fable.Core.RustInterop.emitRustExpr () v461
            let v463 : string = "let mut v462 = v462"
            Fable.Core.RustInterop.emitRustExpr () v463
            let v464 : string = "v462.enable_all()"
            let v465 : obj = Fable.Core.RustInterop.emitRustExpr () v464
            let v466 : string = "v465.build()"
            let v467 : obj = Fable.Core.RustInterop.emitRustExpr () v466
            let v468 : string = "v467.unwrap()"
            let v469 : obj = Fable.Core.RustInterop.emitRustExpr () v468
            let v470 : string = "v469.block_on("
            let v471 : string = v470 + v460
            let v472 : string = ")"
            let v473 : string = v471 + v472
            Fable.Core.RustInterop.emitRustExpr () v473
            let struct (v474 : string, v475 : string, v476 : string, v477 : bool) = method2()
            let v478 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
            let v479 : int64 = Fable.Core.RustInterop.emitRustExpr v478 v18
            let v480 : string = "\"Ping\": true"
            let v481 : string = "{"
            let v482 : string = v481 + v480
            let v483 : string = "}"
            let v484 : string = v482 + v483
            let v485 : string = "serde_json::json!("
            let v486 : string = v485 + v484
            let v487 : string = ").to_string()"
            let v488 : string = v486 + v487
            let v489 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v488
            let v490 : string = "json_len"
            let v491 : Types.EmitType<Types.std.string.String> = method10(v490)
            let v492 : string = "v489.len()"
            let v493 : obj = Fable.Core.RustInterop.emitRustExpr () v492
            let v494 : string = "v493.try_into().unwrap()"
            let v495 : int32 = Fable.Core.RustInterop.emitRustExpr () v494
            let v496 : Types.EmitType<Types.std.string.String> = method24(v495)
            let v497 : (Types.EmitType<Types.std.string.String> []) = [|v491; v496|]
            method48(v479, v497)
            let struct (v498 : string, v499 : string, v500 : string, v501 : bool) = method2()
            let v502 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
            let v503 : int64 = Fable.Core.RustInterop.emitRustExpr v502 v18
            let v504 : string = "host"
            let v505 : Types.EmitType<Types.std.string.String> = method10(v504)
            let v506 : string = "127.0.0.1"
            let v507 : Types.EmitType<Types.std.string.String> = method10(v506)
            let v508 : Types.EmitType<Types.std.string.String> = method10(v398)
            let v509 : Types.EmitType<Types.std.string.String> = method47(v397)
            let v510 : string = "msg_len"
            let v511 : Types.EmitType<Types.std.string.String> = method10(v510)
            let v512 : string = "v489.len()"
            let v513 : obj = Fable.Core.RustInterop.emitRustExpr () v512
            let v514 : string = "v513.try_into().unwrap()"
            let v515 : int32 = Fable.Core.RustInterop.emitRustExpr () v514
            let v516 : Types.EmitType<Types.std.string.String> = method24(v515)
            let v517 : (Types.EmitType<Types.std.string.String> []) = [|v505; v507; v508; v509; v511; v516|]
            method49(v503, v517)
            let v518 : string = "zmq::Context::new()"
            let v519 : obj = Fable.Core.RustInterop.emitRustExpr () v518
            let v520 : string = "$0.socket(zmq::REQ).unwrap()"
            let v521 : obj = Fable.Core.RustInterop.emitRustExpr v519 v520
            let v522 : string = $"tcp://{v506}:{v397}"
            let v523 : string = "$0.connect(&$1).unwrap()"
            Fable.Core.RustInterop.emitRustExpr struct (v521, v522) v523
            let v524 : string = $"$0.send($1.as_str(), 0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr struct (v521, v489) v524
            let v525 : string = "$0.recv_string(0).unwrap().unwrap()"
            let v526 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v521 v525
            let v527 : string = "$0.disconnect(&$1).unwrap()"
            Fable.Core.RustInterop.emitRustExpr struct (v521, v522) v527
            let v528 : string = "result_len"
            let v529 : Types.EmitType<Types.std.string.String> = method10(v528)
            let v530 : string = "v526.len()"
            let v531 : obj = Fable.Core.RustInterop.emitRustExpr () v530
            let v532 : string = "v531.try_into().unwrap()"
            let v533 : int32 = Fable.Core.RustInterop.emitRustExpr () v532
            let v534 : Types.EmitType<Types.std.string.String> = method24(v533)
            let v535 : (Types.EmitType<Types.std.string.String> []) = [|v529; v534|]
            method49(v503, v535)
            let v536 : string = "> ping; ok"
            let v537 : Types.EmitType<Types.std.string.String> = method10(v536)
            let v538 : (Types.EmitType<Types.std.string.String> []) = [|v537|]
            method37(v249, v538)
            let v539 : string = "std::fs::read_to_string(v234)"
            let v540 : Result<Types.std.string.String, Types.std.io.Error> = Fable.Core.RustInterop.emitRustExpr () v539
            let v541 : string = "($0).as_ref().unwrap().to_string()"
            let v542 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v540 v541
            let struct (v543 : string, v544 : string, v545 : string, v546 : bool) = method2()
            let v547 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
            let v548 : int64 = Fable.Core.RustInterop.emitRustExpr v547 v18
            let v549 : Types.EmitType<Types.std.string.String> = method10(v267)
            let v550 : string = "format!(\"{}\", v234.display())"
            let v551 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v550
            let v552 : Types.std.string.String = method1(v551)
            let v553 : string = "fable_library_rust::String_::fromString(v552)"
            let v554 : string = Fable.Core.RustInterop.emitRustExpr () v553
            let v555 : Types.EmitType<Types.std.string.String> = method10(v554)
            let v556 : string = "spi_text_len"
            let v557 : Types.EmitType<Types.std.string.String> = method10(v556)
            let v558 : string = "v542.len()"
            let v559 : obj = Fable.Core.RustInterop.emitRustExpr () v558
            let v560 : string = "v559.try_into().unwrap()"
            let v561 : int32 = Fable.Core.RustInterop.emitRustExpr () v560
            let v562 : Types.EmitType<Types.std.string.String> = method24(v561)
            let v563 : (Types.EmitType<Types.std.string.String> []) = [|v549; v555; v557; v562|]
            method50(v548, v563)
            let v564 : string = "\"FileOpen\": {"
            let v565 : string = v481 + v564
            let v566 : string = "\"spiText\": v542,"
            let v567 : string = v565 + v566
            let v568 : string = "\"uri\": \"file://\".to_owned() + v234.to_str().unwrap()"
            let v569 : string = v567 + v568
            let v570 : string = v569 + v483
            let v571 : string = v570 + v483
            let v572 : string = v485 + v571
            let v573 : string = v572 + v487
            let v574 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v573
            let v575 : Types.EmitType<Types.std.string.String> = method10(v490)
            let v576 : string = "v574.len()"
            let v577 : obj = Fable.Core.RustInterop.emitRustExpr () v576
            let v578 : string = "v577.try_into().unwrap()"
            let v579 : int32 = Fable.Core.RustInterop.emitRustExpr () v578
            let v580 : Types.EmitType<Types.std.string.String> = method24(v579)
            let v581 : (Types.EmitType<Types.std.string.String> []) = [|v575; v580|]
            method50(v548, v581)
            let struct (v582 : string, v583 : string, v584 : string, v585 : bool) = method2()
            let v586 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
            let v587 : int64 = Fable.Core.RustInterop.emitRustExpr v586 v18
            let v588 : Types.EmitType<Types.std.string.String> = method10(v504)
            let v589 : Types.EmitType<Types.std.string.String> = method10(v506)
            let v590 : Types.EmitType<Types.std.string.String> = method10(v398)
            let v591 : Types.EmitType<Types.std.string.String> = method47(v397)
            let v592 : Types.EmitType<Types.std.string.String> = method10(v510)
            let v593 : string = "v574.len()"
            let v594 : obj = Fable.Core.RustInterop.emitRustExpr () v593
            let v595 : string = "v594.try_into().unwrap()"
            let v596 : int32 = Fable.Core.RustInterop.emitRustExpr () v595
            let v597 : Types.EmitType<Types.std.string.String> = method24(v596)
            let v598 : (Types.EmitType<Types.std.string.String> []) = [|v588; v589; v590; v591; v592; v597|]
            method49(v587, v598)
            let v599 : obj = Fable.Core.RustInterop.emitRustExpr () v518
            let v600 : obj = Fable.Core.RustInterop.emitRustExpr v599 v520
            let v601 : string = $"tcp://{v506}:{v397}"
            Fable.Core.RustInterop.emitRustExpr struct (v600, v601) v523
            let v602 : string = $"$0.send($1.as_str(), 0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr struct (v600, v574) v602
            let v603 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v600 v525
            Fable.Core.RustInterop.emitRustExpr struct (v600, v601) v527
            let v604 : Types.EmitType<Types.std.string.String> = method10(v528)
            let v605 : string = "v603.len()"
            let v606 : obj = Fable.Core.RustInterop.emitRustExpr () v605
            let v607 : string = "v606.try_into().unwrap()"
            let v608 : int32 = Fable.Core.RustInterop.emitRustExpr () v607
            let v609 : Types.EmitType<Types.std.string.String> = method24(v608)
            let v610 : (Types.EmitType<Types.std.string.String> []) = [|v604; v609|]
            method49(v587, v610)
            let v611 : string = "> spi_open; ok"
            let v612 : Types.EmitType<Types.std.string.String> = method10(v611)
            let v613 : (Types.EmitType<Types.std.string.String> []) = [|v612|]
            method37(v249, v613)
            let struct (v614 : string, v615 : string, v616 : string, v617 : bool) = method2()
            let v618 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
            let v619 : int64 = Fable.Core.RustInterop.emitRustExpr v618 v18
            let v620 : string = "\"Ping\": true"
            let v621 : string = v481 + v620
            let v622 : string = v621 + v483
            let v623 : string = v485 + v622
            let v624 : string = v623 + v487
            let v625 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v624
            let v626 : Types.EmitType<Types.std.string.String> = method10(v490)
            let v627 : string = "v625.len()"
            let v628 : obj = Fable.Core.RustInterop.emitRustExpr () v627
            let v629 : string = "v628.try_into().unwrap()"
            let v630 : int32 = Fable.Core.RustInterop.emitRustExpr () v629
            let v631 : Types.EmitType<Types.std.string.String> = method24(v630)
            let v632 : (Types.EmitType<Types.std.string.String> []) = [|v626; v631|]
            method48(v619, v632)
            let struct (v633 : string, v634 : string, v635 : string, v636 : bool) = method2()
            let v637 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
            let v638 : int64 = Fable.Core.RustInterop.emitRustExpr v637 v18
            let v639 : Types.EmitType<Types.std.string.String> = method10(v504)
            let v640 : Types.EmitType<Types.std.string.String> = method10(v506)
            let v641 : Types.EmitType<Types.std.string.String> = method10(v398)
            let v642 : Types.EmitType<Types.std.string.String> = method47(v397)
            let v643 : Types.EmitType<Types.std.string.String> = method10(v510)
            let v644 : string = "v625.len()"
            let v645 : obj = Fable.Core.RustInterop.emitRustExpr () v644
            let v646 : string = "v645.try_into().unwrap()"
            let v647 : int32 = Fable.Core.RustInterop.emitRustExpr () v646
            let v648 : Types.EmitType<Types.std.string.String> = method24(v647)
            let v649 : (Types.EmitType<Types.std.string.String> []) = [|v639; v640; v641; v642; v643; v648|]
            method49(v638, v649)
            let v650 : obj = Fable.Core.RustInterop.emitRustExpr () v518
            let v651 : obj = Fable.Core.RustInterop.emitRustExpr v650 v520
            let v652 : string = $"tcp://{v506}:{v397}"
            Fable.Core.RustInterop.emitRustExpr struct (v651, v652) v523
            let v653 : string = $"$0.send($1.as_str(), 0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr struct (v651, v625) v653
            let v654 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v651 v525
            Fable.Core.RustInterop.emitRustExpr struct (v651, v652) v527
            let v655 : Types.EmitType<Types.std.string.String> = method10(v528)
            let v656 : string = "v654.len()"
            let v657 : obj = Fable.Core.RustInterop.emitRustExpr () v656
            let v658 : string = "v657.try_into().unwrap()"
            let v659 : int32 = Fable.Core.RustInterop.emitRustExpr () v658
            let v660 : Types.EmitType<Types.std.string.String> = method24(v659)
            let v661 : (Types.EmitType<Types.std.string.String> []) = [|v655; v660|]
            method49(v638, v661)
            let v662 : Types.EmitType<Types.std.string.String> = method10(v536)
            let v663 : (Types.EmitType<Types.std.string.String> []) = [|v662|]
            method37(v249, v663)
            let v664 : string = "../The-Spiral-Language/VS Code Plugin/core/package.spiproj"
            let v665 : string = "r#\"" + v664 + "\"#"
            let v666 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v665
            let v667 : Types.Ref<Types.Str> = method51(v666)
            let v668 : string = "std::path::PathBuf::from(v667)"
            let v669 : Types.std.path.PathBuf = Fable.Core.RustInterop.emitRustExpr () v668
            let v670 : Types.std.path.PathBuf = method9(v669)
            let v671 : string = "v670.canonicalize()"
            let v672 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.RustInterop.emitRustExpr () v671
            let v673 : string = "v672.unwrap()"
            let v674 : Types.std.path.PathBuf = Fable.Core.RustInterop.emitRustExpr () v673
            let v675 : string = "std::fs::read_to_string(v674)"
            let v676 : Result<Types.std.string.String, Types.std.io.Error> = Fable.Core.RustInterop.emitRustExpr () v675
            let v677 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v676 v541
            let struct (v678 : string, v679 : string, v680 : string, v681 : bool) = method2()
            let v682 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
            let v683 : int64 = Fable.Core.RustInterop.emitRustExpr v682 v18
            let v684 : Types.EmitType<Types.std.string.String> = method10(v310)
            let v685 : string = "format!(\"{}\", v674.display())"
            let v686 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v685
            let v687 : Types.std.string.String = method1(v686)
            let v688 : string = "fable_library_rust::String_::fromString(v687)"
            let v689 : string = Fable.Core.RustInterop.emitRustExpr () v688
            let v690 : Types.EmitType<Types.std.string.String> = method10(v689)
            let v691 : string = "spiproj_text_len"
            let v692 : Types.EmitType<Types.std.string.String> = method10(v691)
            let v693 : string = "v677.len()"
            let v694 : obj = Fable.Core.RustInterop.emitRustExpr () v693
            let v695 : string = "v694.try_into().unwrap()"
            let v696 : int32 = Fable.Core.RustInterop.emitRustExpr () v695
            let v697 : Types.EmitType<Types.std.string.String> = method24(v696)
            let v698 : (Types.EmitType<Types.std.string.String> []) = [|v684; v690; v692; v697|]
            method52(v683, v698)
            let v699 : string = "\"ProjectFileOpen\": {"
            let v700 : string = v481 + v699
            let v701 : string = "\"spiprojText\": v677,"
            let v702 : string = v700 + v701
            let v703 : string = "\"uri\": \"file://\".to_owned() + v674.to_str().unwrap()"
            let v704 : string = v702 + v703
            let v705 : string = v704 + v483
            let v706 : string = v705 + v483
            let v707 : string = v485 + v706
            let v708 : string = v707 + v487
            let v709 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v708
            let v710 : Types.EmitType<Types.std.string.String> = method10(v490)
            let v711 : string = "v709.len()"
            let v712 : obj = Fable.Core.RustInterop.emitRustExpr () v711
            let v713 : string = "v712.try_into().unwrap()"
            let v714 : int32 = Fable.Core.RustInterop.emitRustExpr () v713
            let v715 : Types.EmitType<Types.std.string.String> = method24(v714)
            let v716 : (Types.EmitType<Types.std.string.String> []) = [|v710; v715|]
            method52(v683, v716)
            let struct (v717 : string, v718 : string, v719 : string, v720 : bool) = method2()
            let v721 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
            let v722 : int64 = Fable.Core.RustInterop.emitRustExpr v721 v18
            let v723 : Types.EmitType<Types.std.string.String> = method10(v504)
            let v724 : Types.EmitType<Types.std.string.String> = method10(v506)
            let v725 : Types.EmitType<Types.std.string.String> = method10(v398)
            let v726 : Types.EmitType<Types.std.string.String> = method47(v397)
            let v727 : Types.EmitType<Types.std.string.String> = method10(v510)
            let v728 : string = "v709.len()"
            let v729 : obj = Fable.Core.RustInterop.emitRustExpr () v728
            let v730 : string = "v729.try_into().unwrap()"
            let v731 : int32 = Fable.Core.RustInterop.emitRustExpr () v730
            let v732 : Types.EmitType<Types.std.string.String> = method24(v731)
            let v733 : (Types.EmitType<Types.std.string.String> []) = [|v723; v724; v725; v726; v727; v732|]
            method49(v722, v733)
            let v734 : obj = Fable.Core.RustInterop.emitRustExpr () v518
            let v735 : obj = Fable.Core.RustInterop.emitRustExpr v734 v520
            let v736 : string = $"tcp://{v506}:{v397}"
            Fable.Core.RustInterop.emitRustExpr struct (v735, v736) v523
            let v737 : string = $"$0.send($1.as_str(), 0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr struct (v735, v709) v737
            let v738 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v735 v525
            Fable.Core.RustInterop.emitRustExpr struct (v735, v736) v527
            let v739 : Types.EmitType<Types.std.string.String> = method10(v528)
            let v740 : string = "v738.len()"
            let v741 : obj = Fable.Core.RustInterop.emitRustExpr () v740
            let v742 : string = "v741.try_into().unwrap()"
            let v743 : int32 = Fable.Core.RustInterop.emitRustExpr () v742
            let v744 : Types.EmitType<Types.std.string.String> = method24(v743)
            let v745 : (Types.EmitType<Types.std.string.String> []) = [|v739; v744|]
            method49(v722, v745)
            let v746 : string = "> spiproj_open base_spiproj_path; ok"
            let v747 : Types.EmitType<Types.std.string.String> = method10(v746)
            let v748 : (Types.EmitType<Types.std.string.String> []) = [|v747|]
            method37(v249, v748)
            let v749 : string = "std::fs::read_to_string(v309)"
            let v750 : Result<Types.std.string.String, Types.std.io.Error> = Fable.Core.RustInterop.emitRustExpr () v749
            let v751 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v750 v541
            let struct (v752 : string, v753 : string, v754 : string, v755 : bool) = method2()
            let v756 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
            let v757 : int64 = Fable.Core.RustInterop.emitRustExpr v756 v18
            let v758 : Types.EmitType<Types.std.string.String> = method10(v310)
            let v759 : string = "format!(\"{}\", v309.display())"
            let v760 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v759
            let v761 : Types.std.string.String = method1(v760)
            let v762 : string = "fable_library_rust::String_::fromString(v761)"
            let v763 : string = Fable.Core.RustInterop.emitRustExpr () v762
            let v764 : Types.EmitType<Types.std.string.String> = method10(v763)
            let v765 : Types.EmitType<Types.std.string.String> = method10(v691)
            let v766 : string = "v751.len()"
            let v767 : obj = Fable.Core.RustInterop.emitRustExpr () v766
            let v768 : string = "v767.try_into().unwrap()"
            let v769 : int32 = Fable.Core.RustInterop.emitRustExpr () v768
            let v770 : Types.EmitType<Types.std.string.String> = method24(v769)
            let v771 : (Types.EmitType<Types.std.string.String> []) = [|v758; v764; v765; v770|]
            method52(v757, v771)
            let v772 : string = v481 + v699
            let v773 : string = "\"spiprojText\": v751,"
            let v774 : string = v772 + v773
            let v775 : string = "\"uri\": \"file://\".to_owned() + v309.to_str().unwrap()"
            let v776 : string = v774 + v775
            let v777 : string = v776 + v483
            let v778 : string = v777 + v483
            let v779 : string = v485 + v778
            let v780 : string = v779 + v487
            let v781 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v780
            let v782 : Types.EmitType<Types.std.string.String> = method10(v490)
            let v783 : string = "v781.len()"
            let v784 : obj = Fable.Core.RustInterop.emitRustExpr () v783
            let v785 : string = "v784.try_into().unwrap()"
            let v786 : int32 = Fable.Core.RustInterop.emitRustExpr () v785
            let v787 : Types.EmitType<Types.std.string.String> = method24(v786)
            let v788 : (Types.EmitType<Types.std.string.String> []) = [|v782; v787|]
            method52(v757, v788)
            let struct (v789 : string, v790 : string, v791 : string, v792 : bool) = method2()
            let v793 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
            let v794 : int64 = Fable.Core.RustInterop.emitRustExpr v793 v18
            let v795 : Types.EmitType<Types.std.string.String> = method10(v504)
            let v796 : Types.EmitType<Types.std.string.String> = method10(v506)
            let v797 : Types.EmitType<Types.std.string.String> = method10(v398)
            let v798 : Types.EmitType<Types.std.string.String> = method47(v397)
            let v799 : Types.EmitType<Types.std.string.String> = method10(v510)
            let v800 : string = "v781.len()"
            let v801 : obj = Fable.Core.RustInterop.emitRustExpr () v800
            let v802 : string = "v801.try_into().unwrap()"
            let v803 : int32 = Fable.Core.RustInterop.emitRustExpr () v802
            let v804 : Types.EmitType<Types.std.string.String> = method24(v803)
            let v805 : (Types.EmitType<Types.std.string.String> []) = [|v795; v796; v797; v798; v799; v804|]
            method49(v794, v805)
            let v806 : obj = Fable.Core.RustInterop.emitRustExpr () v518
            let v807 : obj = Fable.Core.RustInterop.emitRustExpr v806 v520
            let v808 : string = $"tcp://{v506}:{v397}"
            Fable.Core.RustInterop.emitRustExpr struct (v807, v808) v523
            let v809 : string = $"$0.send($1.as_str(), 0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr struct (v807, v781) v809
            let v810 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v807 v525
            Fable.Core.RustInterop.emitRustExpr struct (v807, v808) v527
            let v811 : Types.EmitType<Types.std.string.String> = method10(v528)
            let v812 : string = "v810.len()"
            let v813 : obj = Fable.Core.RustInterop.emitRustExpr () v812
            let v814 : string = "v813.try_into().unwrap()"
            let v815 : int32 = Fable.Core.RustInterop.emitRustExpr () v814
            let v816 : Types.EmitType<Types.std.string.String> = method24(v815)
            let v817 : (Types.EmitType<Types.std.string.String> []) = [|v811; v816|]
            method49(v794, v817)
            let v818 : string = "> spiproj_open spiproj_path; ok"
            let v819 : Types.EmitType<Types.std.string.String> = method10(v818)
            let v820 : (Types.EmitType<Types.std.string.String> []) = [|v819|]
            method37(v249, v820)
            let struct (v821 : string, v822 : string, v823 : string, v824 : bool) = method2()
            let v825 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
            let v826 : int64 = Fable.Core.RustInterop.emitRustExpr v825 v18
            let v827 : string = "\"Ping\": true"
            let v828 : string = v481 + v827
            let v829 : string = v828 + v483
            let v830 : string = v485 + v829
            let v831 : string = v830 + v487
            let v832 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v831
            let v833 : Types.EmitType<Types.std.string.String> = method10(v490)
            let v834 : string = "v832.len()"
            let v835 : obj = Fable.Core.RustInterop.emitRustExpr () v834
            let v836 : string = "v835.try_into().unwrap()"
            let v837 : int32 = Fable.Core.RustInterop.emitRustExpr () v836
            let v838 : Types.EmitType<Types.std.string.String> = method24(v837)
            let v839 : (Types.EmitType<Types.std.string.String> []) = [|v833; v838|]
            method48(v826, v839)
            let struct (v840 : string, v841 : string, v842 : string, v843 : bool) = method2()
            let v844 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
            let v845 : int64 = Fable.Core.RustInterop.emitRustExpr v844 v18
            let v846 : Types.EmitType<Types.std.string.String> = method10(v504)
            let v847 : Types.EmitType<Types.std.string.String> = method10(v506)
            let v848 : Types.EmitType<Types.std.string.String> = method10(v398)
            let v849 : Types.EmitType<Types.std.string.String> = method47(v397)
            let v850 : Types.EmitType<Types.std.string.String> = method10(v510)
            let v851 : string = "v832.len()"
            let v852 : obj = Fable.Core.RustInterop.emitRustExpr () v851
            let v853 : string = "v852.try_into().unwrap()"
            let v854 : int32 = Fable.Core.RustInterop.emitRustExpr () v853
            let v855 : Types.EmitType<Types.std.string.String> = method24(v854)
            let v856 : (Types.EmitType<Types.std.string.String> []) = [|v846; v847; v848; v849; v850; v855|]
            method49(v845, v856)
            let v857 : obj = Fable.Core.RustInterop.emitRustExpr () v518
            let v858 : obj = Fable.Core.RustInterop.emitRustExpr v857 v520
            let v859 : string = $"tcp://{v506}:{v397}"
            Fable.Core.RustInterop.emitRustExpr struct (v858, v859) v523
            let v860 : string = $"$0.send($1.as_str(), 0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr struct (v858, v832) v860
            let v861 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v858 v525
            Fable.Core.RustInterop.emitRustExpr struct (v858, v859) v527
            let v862 : Types.EmitType<Types.std.string.String> = method10(v528)
            let v863 : string = "v861.len()"
            let v864 : obj = Fable.Core.RustInterop.emitRustExpr () v863
            let v865 : string = "v864.try_into().unwrap()"
            let v866 : int32 = Fable.Core.RustInterop.emitRustExpr () v865
            let v867 : Types.EmitType<Types.std.string.String> = method24(v866)
            let v868 : (Types.EmitType<Types.std.string.String> []) = [|v862; v867|]
            method49(v845, v868)
            let v869 : Types.EmitType<Types.std.string.String> = method10(v536)
            let v870 : (Types.EmitType<Types.std.string.String> []) = [|v869|]
            method37(v249, v870)
            let struct (v871 : string, v872 : string, v873 : string, v874 : bool) = method2()
            let v875 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
            let v876 : int64 = Fable.Core.RustInterop.emitRustExpr v875 v18
            let v877 : Types.EmitType<Types.std.string.String> = method10(v267)
            let v878 : string = "format!(\"{}\", v234.display())"
            let v879 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v878
            let v880 : Types.std.string.String = method1(v879)
            let v881 : string = "fable_library_rust::String_::fromString(v880)"
            let v882 : string = Fable.Core.RustInterop.emitRustExpr () v881
            let v883 : Types.EmitType<Types.std.string.String> = method10(v882)
            let v884 : string = "backend"
            let v885 : Types.EmitType<Types.std.string.String> = method10(v884)
            let v886 : string = "Fsharp"
            let v887 : Types.EmitType<Types.std.string.String> = method10(v886)
            let v888 : (Types.EmitType<Types.std.string.String> []) = [|v877; v883; v885; v887|]
            method53(v876, v888)
            let v889 : string = method54()
            let v890 : string = "fable_library_rust::String_::LrcStr::as_str($0)"
            let v891 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr v889 v890
            let v892 : string = "String::from(core::ops::Deref::deref($0))"
            let v893 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v891 v892
            let v894 : string = "\"BuildFile\": {"
            let v895 : string = v481 + v894
            let v896 : string = "\"uri\": \"file://\".to_owned() + v234.to_str().unwrap(),"
            let v897 : string = v895 + v896
            let v898 : string = "\"backend\": v893"
            let v899 : string = v897 + v898
            let v900 : string = v899 + v483
            let v901 : string = v900 + v483
            let v902 : string = v485 + v901
            let v903 : string = v902 + v487
            let v904 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v903
            let v905 : Types.EmitType<Types.std.string.String> = method10(v490)
            let v906 : string = "v904.len()"
            let v907 : obj = Fable.Core.RustInterop.emitRustExpr () v906
            let v908 : string = "v907.try_into().unwrap()"
            let v909 : int32 = Fable.Core.RustInterop.emitRustExpr () v908
            let v910 : Types.EmitType<Types.std.string.String> = method24(v909)
            let v911 : (Types.EmitType<Types.std.string.String> []) = [|v905; v910|]
            method53(v876, v911)
            let struct (v912 : string, v913 : string, v914 : string, v915 : bool) = method2()
            let v916 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
            let v917 : int64 = Fable.Core.RustInterop.emitRustExpr v916 v18
            let v918 : Types.EmitType<Types.std.string.String> = method10(v504)
            let v919 : Types.EmitType<Types.std.string.String> = method10(v506)
            let v920 : Types.EmitType<Types.std.string.String> = method10(v398)
            let v921 : Types.EmitType<Types.std.string.String> = method47(v397)
            let v922 : Types.EmitType<Types.std.string.String> = method10(v510)
            let v923 : string = "v904.len()"
            let v924 : obj = Fable.Core.RustInterop.emitRustExpr () v923
            let v925 : string = "v924.try_into().unwrap()"
            let v926 : int32 = Fable.Core.RustInterop.emitRustExpr () v925
            let v927 : Types.EmitType<Types.std.string.String> = method24(v926)
            let v928 : (Types.EmitType<Types.std.string.String> []) = [|v918; v919; v920; v921; v922; v927|]
            method49(v917, v928)
            let v929 : obj = Fable.Core.RustInterop.emitRustExpr () v518
            let v930 : obj = Fable.Core.RustInterop.emitRustExpr v929 v520
            let v931 : string = $"tcp://{v506}:{v397}"
            Fable.Core.RustInterop.emitRustExpr struct (v930, v931) v523
            let v932 : string = $"$0.send($1.as_str(), 0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr struct (v930, v904) v932
            let v933 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v930 v525
            Fable.Core.RustInterop.emitRustExpr struct (v930, v931) v527
            let v934 : Types.EmitType<Types.std.string.String> = method10(v528)
            let v935 : string = "v933.len()"
            let v936 : obj = Fable.Core.RustInterop.emitRustExpr () v935
            let v937 : string = "v936.try_into().unwrap()"
            let v938 : int32 = Fable.Core.RustInterop.emitRustExpr () v937
            let v939 : Types.EmitType<Types.std.string.String> = method24(v938)
            let v940 : (Types.EmitType<Types.std.string.String> []) = [|v934; v939|]
            method49(v917, v940)
            let v941 : string = "> spi_build_file; ok"
            let v942 : Types.EmitType<Types.std.string.String> = method10(v941)
            let v943 : (Types.EmitType<Types.std.string.String> []) = [|v942|]
            method37(v249, v943)
            let struct (v944 : string, v945 : string, v946 : string, v947 : bool) = method2()
            let v948 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
            let v949 : int64 = Fable.Core.RustInterop.emitRustExpr v948 v18
            let v950 : string = "\"Ping\": true"
            let v951 : string = v481 + v950
            let v952 : string = v951 + v483
            let v953 : string = v485 + v952
            let v954 : string = v953 + v487
            let v955 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v954
            let v956 : Types.EmitType<Types.std.string.String> = method10(v490)
            let v957 : string = "v955.len()"
            let v958 : obj = Fable.Core.RustInterop.emitRustExpr () v957
            let v959 : string = "v958.try_into().unwrap()"
            let v960 : int32 = Fable.Core.RustInterop.emitRustExpr () v959
            let v961 : Types.EmitType<Types.std.string.String> = method24(v960)
            let v962 : (Types.EmitType<Types.std.string.String> []) = [|v956; v961|]
            method48(v949, v962)
            let struct (v963 : string, v964 : string, v965 : string, v966 : bool) = method2()
            let v967 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
            let v968 : int64 = Fable.Core.RustInterop.emitRustExpr v967 v18
            let v969 : Types.EmitType<Types.std.string.String> = method10(v504)
            let v970 : Types.EmitType<Types.std.string.String> = method10(v506)
            let v971 : Types.EmitType<Types.std.string.String> = method10(v398)
            let v972 : Types.EmitType<Types.std.string.String> = method47(v397)
            let v973 : Types.EmitType<Types.std.string.String> = method10(v510)
            let v974 : string = "v955.len()"
            let v975 : obj = Fable.Core.RustInterop.emitRustExpr () v974
            let v976 : string = "v975.try_into().unwrap()"
            let v977 : int32 = Fable.Core.RustInterop.emitRustExpr () v976
            let v978 : Types.EmitType<Types.std.string.String> = method24(v977)
            let v979 : (Types.EmitType<Types.std.string.String> []) = [|v969; v970; v971; v972; v973; v978|]
            method49(v968, v979)
            let v980 : obj = Fable.Core.RustInterop.emitRustExpr () v518
            let v981 : obj = Fable.Core.RustInterop.emitRustExpr v980 v520
            let v982 : string = $"tcp://{v506}:{v397}"
            Fable.Core.RustInterop.emitRustExpr struct (v981, v982) v523
            let v983 : string = $"$0.send($1.as_str(), 0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr struct (v981, v955) v983
            let v984 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v981 v525
            Fable.Core.RustInterop.emitRustExpr struct (v981, v982) v527
            let v985 : Types.EmitType<Types.std.string.String> = method10(v528)
            let v986 : string = "v984.len()"
            let v987 : obj = Fable.Core.RustInterop.emitRustExpr () v986
            let v988 : string = "v987.try_into().unwrap()"
            let v989 : int32 = Fable.Core.RustInterop.emitRustExpr () v988
            let v990 : Types.EmitType<Types.std.string.String> = method24(v989)
            let v991 : (Types.EmitType<Types.std.string.String> []) = [|v985; v990|]
            method49(v968, v991)
            let v992 : Types.EmitType<Types.std.string.String> = method10(v536)
            let v993 : (Types.EmitType<Types.std.string.String> []) = [|v992|]
            method37(v249, v993)
            let struct (v994 : string, v995 : string, v996 : string, v997 : bool) = method2()
            let v998 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
            let v999 : int64 = Fable.Core.RustInterop.emitRustExpr v998 v18
            let v1000 : string = "std::fs::metadata(v377).unwrap().modified().unwrap()"
            let v1001 : Types.std.time.SystemTime = Fable.Core.RustInterop.emitRustExpr () v1000
            let v1002 : Types.EmitType<Types.std.string.String> = method10(v378)
            let v1003 : string = "format!(\"{}\", v377.display())"
            let v1004 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v1003
            let v1005 : Types.std.string.String = method1(v1004)
            let v1006 : string = "fable_library_rust::String_::fromString(v1005)"
            let v1007 : string = Fable.Core.RustInterop.emitRustExpr () v1006
            let v1008 : Types.EmitType<Types.std.string.String> = method10(v1007)
            let v1009 : string = "start"
            let v1010 : Types.EmitType<Types.std.string.String> = method10(v1009)
            let v1011 : Types.EmitType<Types.std.string.String> = method55(v1001)
            let v1012 : (Types.EmitType<Types.std.string.String> []) = [|v1002; v1008; v1010; v1011|]
            method56(v999, v1012)
            let v1013 : (int32 []) = [| 0..20 |]
            let v1014 : int32 = v1013.Length
            let v1015 : US1 = US1_1
            let v1016 : Mut1 = {l0 = 0; l1 = v1015} : Mut1
            while method57(v1014, v1016) do
                let v1018 : int32 = v1016.l0
                let v1019 : US1 = v1016.l1
                let v1020 : int32 = v1013.[int v1018]
                let v1046 : US1 =
                    match v1019 with
                    | US1_1 -> (* None *)
                        let v1023 : string = "std::fs::metadata(v377).unwrap().modified().unwrap()"
                        let v1024 : Types.std.time.SystemTime = Fable.Core.RustInterop.emitRustExpr () v1023
                        let v1025 : string = "i"
                        let v1026 : Types.EmitType<Types.std.string.String> = method10(v1025)
                        let v1027 : Types.EmitType<Types.std.string.String> = method24(v1020)
                        let v1028 : string = "last_modified"
                        let v1029 : Types.EmitType<Types.std.string.String> = method10(v1028)
                        let v1030 : Types.EmitType<Types.std.string.String> = method55(v1024)
                        let v1031 : (Types.EmitType<Types.std.string.String> []) = [|v1026; v1027; v1029; v1030|]
                        method56(v999, v1031)
                        let v1032 : string = "v1024 > v1001"
                        let v1033 : bool = Fable.Core.RustInterop.emitRustExpr () v1032
                        if v1033 then
                            let v1034 : string = "std::fs::read_to_string(v377)"
                            let v1035 : Result<Types.std.string.String, Types.std.io.Error> = Fable.Core.RustInterop.emitRustExpr () v1034
                            let v1036 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v1035 v541
                            let v1037 : Types.std.string.String = method1(v1036)
                            let v1038 : string = "fable_library_rust::String_::fromString(v1037)"
                            let v1039 : string = Fable.Core.RustInterop.emitRustExpr () v1038
                            US1_0(v1039)
                        else
                            let v1041 : uint64 = method58()
                            let v1042 : string = "std::thread::sleep(std::time::Duration::from_millis(v1041))"
                            Fable.Core.RustInterop.emitRustExpr () v1042
                            US1_1
                    | US1_0(v1021) -> (* Some *)
                        US1_0(v1021)
                let v1047 : int32 = v1018 + 1
                v1016.l0 <- v1047
                v1016.l1 <- v1046
                ()
            let v1048 : US1 = v1016.l1
            let v1052 : string =
                match v1048 with
                | US1_1 -> (* None *)
                    let v1050 : string = ""
                    v1050
                | US1_0(v1049) -> (* Some *)
                    v1049
            let v1053 : string = "new_fsx_len"
            let v1054 : Types.EmitType<Types.std.string.String> = method10(v1053)
            let v1055 : string = "v1052.len()"
            let v1056 : obj = Fable.Core.RustInterop.emitRustExpr () v1055
            let v1057 : string = "v1056.try_into().unwrap()"
            let v1058 : int32 = Fable.Core.RustInterop.emitRustExpr () v1057
            let v1059 : Types.EmitType<Types.std.string.String> = method24(v1058)
            let v1060 : (Types.EmitType<Types.std.string.String> []) = [|v1054; v1059|]
            method37(v249, v1060)
            let struct (v1061 : string, v1062 : string, v1063 : string, v1064 : bool) = method2()
            let v1065 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
            let v1066 : int64 = Fable.Core.RustInterop.emitRustExpr v1065 v18
            let v1067 : string = "\"Ping\": true"
            let v1068 : string = v481 + v1067
            let v1069 : string = v1068 + v483
            let v1070 : string = v485 + v1069
            let v1071 : string = v1070 + v487
            let v1072 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr () v1071
            let v1073 : Types.EmitType<Types.std.string.String> = method10(v490)
            let v1074 : string = "v1072.len()"
            let v1075 : obj = Fable.Core.RustInterop.emitRustExpr () v1074
            let v1076 : string = "v1075.try_into().unwrap()"
            let v1077 : int32 = Fable.Core.RustInterop.emitRustExpr () v1076
            let v1078 : Types.EmitType<Types.std.string.String> = method24(v1077)
            let v1079 : (Types.EmitType<Types.std.string.String> []) = [|v1073; v1078|]
            method48(v1066, v1079)
            let struct (v1080 : string, v1081 : string, v1082 : string, v1083 : bool) = method2()
            let v1084 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.RustInterop.emitRustExpr () v16
            let v1085 : int64 = Fable.Core.RustInterop.emitRustExpr v1084 v18
            let v1086 : Types.EmitType<Types.std.string.String> = method10(v504)
            let v1087 : Types.EmitType<Types.std.string.String> = method10(v506)
            let v1088 : Types.EmitType<Types.std.string.String> = method10(v398)
            let v1089 : Types.EmitType<Types.std.string.String> = method47(v397)
            let v1090 : Types.EmitType<Types.std.string.String> = method10(v510)
            let v1091 : string = "v1072.len()"
            let v1092 : obj = Fable.Core.RustInterop.emitRustExpr () v1091
            let v1093 : string = "v1092.try_into().unwrap()"
            let v1094 : int32 = Fable.Core.RustInterop.emitRustExpr () v1093
            let v1095 : Types.EmitType<Types.std.string.String> = method24(v1094)
            let v1096 : (Types.EmitType<Types.std.string.String> []) = [|v1086; v1087; v1088; v1089; v1090; v1095|]
            method49(v1085, v1096)
            let v1097 : obj = Fable.Core.RustInterop.emitRustExpr () v518
            let v1098 : obj = Fable.Core.RustInterop.emitRustExpr v1097 v520
            let v1099 : string = $"tcp://{v506}:{v397}"
            Fable.Core.RustInterop.emitRustExpr struct (v1098, v1099) v523
            let v1100 : string = $"$0.send($1.as_str(), 0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr struct (v1098, v1072) v1100
            let v1101 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v1098 v525
            Fable.Core.RustInterop.emitRustExpr struct (v1098, v1099) v527
            let v1102 : Types.EmitType<Types.std.string.String> = method10(v528)
            let v1103 : string = "v1101.len()"
            let v1104 : obj = Fable.Core.RustInterop.emitRustExpr () v1103
            let v1105 : string = "v1104.try_into().unwrap()"
            let v1106 : int32 = Fable.Core.RustInterop.emitRustExpr () v1105
            let v1107 : Types.EmitType<Types.std.string.String> = method24(v1106)
            let v1108 : (Types.EmitType<Types.std.string.String> []) = [|v1102; v1107|]
            method49(v1085, v1108)
            let v1109 : Types.EmitType<Types.std.string.String> = method10(v536)
            let v1110 : (Types.EmitType<Types.std.string.String> []) = [|v1109|]
            method37(v249, v1110)
            let v1111 : string = "v430.wait_with_output().unwrap()"
            let v1112 : obj = Fable.Core.RustInterop.emitRustExpr () v1111
            let v1113 : string = "output"
            let v1114 : Types.EmitType<Types.std.string.String> = method10(v1113)
            let v1115 : Types.std.string.String = Fable.Core.RustInterop.emitRustExpr v1112 v10
            let v1116 : Types.EmitType<Types.std.string.String> = method15(v1115)
            let v1117 : (Types.EmitType<Types.std.string.String> []) = [|v1114; v1116|]
            method37(v249, v1117)
            let v1118 : string = "v243.unwrap_or(v377)"
            let v1119 : Types.std.path.PathBuf = Fable.Core.RustInterop.emitRustExpr () v1118
            let v1120 : string = method17(v1052)
            let v1121 : string = "v1120.as_str()"
            let v1122 : Types.Ref<Types.Str> = Fable.Core.RustInterop.emitRustExpr () v1121
            let v1123 : string = "std::fs::write(v1119, v1122)"
            let v1124 : Result<unit, Types.std.io.Error> = Fable.Core.RustInterop.emitRustExpr () v1123
            let v1125 : string = "v1124.unwrap()"
            Fable.Core.RustInterop.emitRustExpr () v1125
            let v1126 : string = "> fs_write new_fsx_path; ok"
            let v1127 : Types.EmitType<Types.std.string.String> = method10(v1126)
            let v1128 : (Types.EmitType<Types.std.string.String> []) = [|v1127|]
            method37(v249, v1128)
            let v1129 : string = "fsx.len"
            let v1130 : Types.EmitType<Types.std.string.String> = method10(v1129)
            let v1131 : int32 = v1052.Length
            let v1132 : Types.EmitType<Types.std.string.String> = method24(v1131)
            let v1133 : (Types.EmitType<Types.std.string.String> []) = [|v1130; v1132|]
            method59(v19, v1133)
    let v1134 : string = "cli end"
    let v1135 : Types.EmitType<Types.std.string.String> = method10(v1134)
    let v1136 : string = "???"
    let v1137 : Types.EmitType<Types.std.string.String> = method10(v1136)
    let v1138 : (Types.EmitType<Types.std.string.String> []) = [|v1135; v1137|]
    method59(v19, v1138)
    0
let v0 : (unit -> int32) = closure0()
()
