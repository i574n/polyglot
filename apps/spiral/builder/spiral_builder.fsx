#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("&$0")>]
#endif
type Ref<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Command")>]
#endif
type clap_Command = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Arg")>]
#endif
type clap_Arg = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Vec<$0>")>]
#endif
type Vec<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::String")>]
#endif
type std_string_String = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Box<$0>")>]
#endif
type Box<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::PossibleValue")>]
#endif
type clap_builder_PossibleValue = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::ValueParser")>]
#endif
type clap_builder_ValueParser = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::ValueRange")>]
#endif
type clap_builder_ValueRange = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::ArgAction")>]
#endif
type clap_ArgAction = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::ArgMatches")>]
#endif
type clap_ArgMatches = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::PathBuf")>]
#endif
type std_path_PathBuf = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::Display")>]
#endif
type std_path_Display = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Error")>]
#endif
type std_io_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::ffi::OsString")>]
#endif
type std_ffi_OsString = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Command")>]
#endif
type std_process_Command = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Stdio")>]
#endif
type std_process_Stdio = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Child")>]
#endif
type std_process_Child = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::Mutex<$0>")>]
#endif
type std_sync_Mutex<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::Arc<$0>")>]
#endif
type std_sync_Arc<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::MutexGuard<$0>")>]
#endif
type std_sync_MutexGuard<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStdout")>]
#endif
type std_process_ChildStdout = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStderr")>]
#endif
type std_process_ChildStderr = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStdin")>]
#endif
type std_process_ChildStdin = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::Sender<$0>")>]
#endif
type std_sync_mpsc_Sender<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("encoding_rs_io::DecodeReaderBytes<$0, $1>")>]
#endif
type encoding_rs_io_DecodeReaderBytes<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::BufReader<$0>")>]
#endif
type std_io_BufReader<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Lines<$0>")>]
#endif
type std_io_Lines<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::borrow::Cow<$0>")>]
#endif
type std_borrow_Cow<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::SendError<$0>")>]
#endif
type std_sync_mpsc_SendError<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("_")>]
#endif
type core_ops_Try<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::thread::JoinHandle<$0>")>]
#endif
type std_thread_JoinHandle<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Output")>]
#endif
type std_process_Output = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ExitStatus")>]
#endif
type std_process_ExitStatus = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::BTreeMap<$0, $1>")>]
#endif
type std_collections_BTreeMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::pin::Pin<$0>")>]
#endif
type std_pin_Pin<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Regex")>]
#endif
type regex_Regex = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Cursor<$0>")>]
#endif
type std_io_Cursor<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("sha2::Sha256")>]
#endif
type sha2_Sha256 = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("_")>]
#endif
type Slice'<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::DateTime<$0>")>]
#endif
type chrono_DateTime<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::NaiveDateTime")>]
#endif
type chrono_NaiveDateTime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::CaptureMatches")>]
#endif
type regex_CaptureMatches = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Captures<$0>")>]
#endif
type regex_Captures<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::CaptureNames")>]
#endif
type regex_CaptureNames = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::HashMap<$0, $1>")>]
#endif
type std_collections_HashMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::WalkDir")>]
#endif
type async_walkdir_WalkDir = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::DirEntry")>]
#endif
type async_walkdir_DirEntry = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::fs::FileType")>]
#endif
type std_fs_FileType = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::Filtering")>]
#endif
type async_walkdir_Filtering = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::Error")>]
#endif
type async_walkdir_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rayon::vec::IntoIter<$0>")>]
#endif
type rayon_vec_IntoIter<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rayon::iter::Map<$0, _>")>]
#endif
type rayon_iter_Map<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("serde_json::Error")>]
#endif
type serde_json_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 $1")>]
#endif
type Lifetime<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("'static")>]
#endif
type StaticLifetime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("str")>]
#endif
type Str = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("mut $0")>]
#endif
type Mut<'T> = class end
module State = let mutable trace_state = None
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::env::VarError")>]
#endif
type std_env_VarError = class end
type IOsEnviron = abstract environ: x: unit -> obj
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("dyn $0")>]
#endif
type Dyn<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::future::Future<Output = $0>")>]
#endif
type std_future_Future<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::FromUtf8Error")>]
#endif
type std_string_FromUtf8Error = class end
type IPathJoin = abstract join: [<System.ParamArray>] paths: string[] -> string
type IFsExistsSync = abstract existsSync: path: string -> bool
type IPathDirname = abstract dirname: path: string -> string
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::Path")>]
#endif
type std_path_Path = class end
type Disposable (f : unit -> unit) = interface System.IDisposable with member _.Dispose () = f ()
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::ffi::OsStr")>]
#endif
type std_ffi_OsStr = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::Receiver<$0>")>]
#endif
type std_sync_mpsc_Receiver<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::PoisonError<$0>")>]
#endif
type std_sync_PoisonError<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("encoding_rs::Encoding")>]
#endif
type encoding_rs_Encoding = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("[$0]")>]
#endif
type Slice<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::str::Utf8Error")>]
#endif
type std_str_Utf8Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0")>]
#endif
type LifetimeRef<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 + $1")>]
#endif
type LifetimeJoin<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("core::any::Any")>]
#endif
type core_any_Any = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Send")>]
#endif
type Send<'T> = class end
#if FABLE_COMPILER
[<CompilationRepresentation (CompilationRepresentationFlags.ModuleSuffix)>]
module System =
 module Diagnostics =
  type Process = unit
  type DataReceivedEventArgs = unit
#endif
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Error")>]
#endif
type regex_Error = class end
type ICryptoCreateHash = abstract createHash: x: string -> obj
type IHashlibSha256 = abstract sha256: x: unit -> obj
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Utc")>]
#endif
type chrono_Utc = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Local")>]
#endif
type chrono_Local = class end
type [<Struct>] US0 =
    | US0_0
    | US0_1
    | US0_2
    | US0_3
    | US0_4
and Mut0 = {mutable l0 : int64}
and Mut1 = {mutable l0 : (string -> unit)}
and Mut2 = {mutable l0 : bool}
and Mut3 = {mutable l0 : US0}
and [<Struct>] US1 =
    | US1_0 of f0_0 : string
    | US1_1
and [<Struct>] US2 =
    | US2_0 of f0_0 : US0
    | US2_1
and [<Struct>] US3 =
    | US3_0 of f0_0 : int64
    | US3_1
and Mut4 = {mutable l0 : string}
and [<Struct>] US4 =
    | US4_0 of f0_0 : std_string_String * f0_1 : clap_ArgMatches
    | US4_1
and [<Struct>] US5 =
    | US5_0 of f0_0 : std_string_String
    | US5_1
and [<Struct>] US8 =
    | US8_0
    | US8_1
and [<Struct>] US7 =
    | US7_0 of f0_0 : US8
    | US7_1
and [<Struct>] US6 =
    | US6_0 of f0_0 : US7
    | US6_1
and [<Struct>] US9 =
    | US9_0 of f0_0 : Vec<std_string_String>
    | US9_1
and [<Struct>] US10 =
    | US10_0
    | US10_1
    | US10_2
and [<Struct>] US11 =
    | US11_0 of f0_0 : US10
    | US11_1 of f1_0 : US10
    | US11_2 of f2_0 : US10
    | US11_3 of f3_0 : US10
    | US11_4 of f4_0 : US10
and [<Struct>] US12 =
    | US12_0 of f0_0 : string
    | US12_1 of f1_0 : string
and [<Struct>] US13 =
    | US13_0
    | US13_1 of f1_0 : std_string_String
and [<Struct>] US14 =
    | US14_0 of f0_0 : string * f0_1 : US1
    | US14_1 of f1_0 : string
and [<Struct>] US15 =
    | US15_0 of f0_0 : char * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US15_1 of f1_0 : string
and Mut5 = {mutable l0 : int32}
and UH0 =
    | UH0_0
    | UH0_1 of char * UH0
and UH1 =
    | UH1_0
    | UH1_1 of (struct (string * System.Text.StringBuilder * int32 * int32) -> US15) * UH1
and [<Struct>] US16 =
    | US16_0 of f0_0 : string * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US16_1 of f1_0 : string
and [<Struct>] US17 =
    | US17_0 of f0_0 : char
    | US17_1
and [<Struct>] US18 =
    | US18_0 of f0_0 : string * f0_1 : System.Text.StringBuilder * f0_2 : int32 * f0_3 : int32
    | US18_1 of f1_0 : string
and [<Struct>] US19 =
    | US19_0 of f0_0 : string * f0_1 : US1 * f0_2 : string * f0_3 : System.Text.StringBuilder * f0_4 : int32 * f0_5 : int32
    | US19_1 of f1_0 : string
and [<Struct>] US20 =
    | US20_0 of f0_0 : US17 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US20_1 of f1_0 : string
and [<Struct>] US21 =
    | US21_0 of f0_0 : US1 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US21_1 of f1_0 : string
and [<Struct>] US22 =
    | US22_0 of f0_0 : (string [])
    | US22_1 of f1_0 : string
and UH2 =
    | UH2_0
    | UH2_1 of string * UH2
and [<Struct>] US23 =
    | US23_0 of f0_0 : UH2 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US23_1 of f1_0 : string
and UH3 =
    | UH3_0
    | UH3_1 of (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) * UH3
and [<Struct>] US24 =
    | US24_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>
    | US24_1 of f1_0 : std_string_String
and [<Struct>] US25 =
    | US25_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>
    | US25_1
and [<Struct>] US26 =
    | US26_0 of f0_0 : std_string_String
    | US26_1 of f1_0 : std_string_String
and [<Struct>] US27 =
    | US27_0 of f0_0 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit)
    | US27_1
and [<Struct>] US28 =
    | US28_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>>
    | US28_1
and [<Struct>] US29 =
    | US29_0 of f0_0 : std_process_Output
    | US29_1 of f1_0 : std_string_String
and [<Struct>] US30 =
    | US30_0 of f0_0 : int32
    | US30_1
and [<Struct>] US31 =
    | US31_0 of f0_0 : (struct (int32 * string * bool) -> Async<unit>)
    | US31_1
and [<Struct>] US32 =
    | US32_0 of f0_0 : System.Threading.CancellationToken
    | US32_1
and Mut6 = {mutable l0 : int32; mutable l1 : int32; mutable l2 : (string [])}
and [<Struct>] US34 =
    | US34_0
    | US34_1
and [<Struct>] US33 =
    | US33_0 of f0_0 : US34
    | US33_1
and [<Struct>] US35 =
    | US35_0 of f0_0 : chrono_DateTime<chrono_Utc>
    | US35_1
and [<Struct>] US36 =
    | US36_0 of f0_0 : int32 * f0_1 : string
    | US36_1 of f1_0 : int32 * f1_1 : string
and [<Struct>] US37 =
    | US37_0 of f0_0 : std_collections_HashMap<string, string>
    | US37_1
and [<Struct>] US38 =
    | US38_0 of f0_0 : US1
    | US38_1
and UH4 =
    | UH4_0
    | UH4_1 of string * bool * UH4
and [<Struct>] US39 =
    | US39_0
    | US39_1
    | US39_2
and [<Struct>] US40 =
    | US40_0 of f0_0 : std_fs_FileType
    | US40_1 of f1_0 : std_string_String
and [<Struct>] US41 =
    | US41_0 of f0_0 : async_walkdir_DirEntry
    | US41_1 of f1_0 : std_string_String
and [<Struct>] US42 =
    | US42_0 of f0_0 : string * f0_1 : string
    | US42_1
and UH5 =
    | UH5_0
    | UH5_1 of string * string * UH5
let rec method0 () : clap_Command =
    let v0 : string = "command"
    let v1 : string = "r#\"" + v0 + "\"#"
    let v2 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : string = "clap::Command::new($0)"
    let v4 : clap_Command = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "clap::Command::subcommand_required($0, true)"
    let v6 : clap_Command = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "fsharp"
    let v8 : string = "r#\"" + v7 + "\"#"
    let v9 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "clap::Command::new($0)"
    let v11 : clap_Command = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "spi-path"
    let v13 : string = "r#\"" + v12 + "\"#"
    let v14 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v13 
    let v15 : string = "clap::Arg::new($0)"
    let v16 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v14 v15 
    let v17 : string = "$0.short($1)"
    let v18 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v16, 's') v17 
    let v19 : string = "r#\"" + v12 + "\"#"
    let v20 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = "$0.long($1)"
    let v22 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v18, v20) v21 
    let v23 : string = "$0.required($1)"
    let v24 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v22, true) v23 
    let v25 : string = "clap::Command::arg($0, $1)"
    let v26 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v11, v24) v25 
    let v27 : string = "clap::Command::subcommand($0, v26)"
    let v28 : clap_Command = Fable.Core.RustInterop.emitRustExpr v6 v27 
    let v29 : string = "cuda"
    let v30 : string = "r#\"" + v29 + "\"#"
    let v31 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v30 
    let v32 : string = "clap::Command::new($0)"
    let v33 : clap_Command = Fable.Core.RustInterop.emitRustExpr v31 v32 
    let v34 : string = "py-path"
    let v35 : string = "r#\"" + v34 + "\"#"
    let v36 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "clap::Arg::new($0)"
    let v38 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "$0.short($1)"
    let v40 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v38, 'p') v39 
    let v41 : string = "r#\"" + v34 + "\"#"
    let v42 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v41 
    let v43 : string = "$0.long($1)"
    let v44 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v40, v42) v43 
    let v45 : string = "$0.required($1)"
    let v46 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v44, true) v45 
    let v47 : string = "clap::Command::arg($0, $1)"
    let v48 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v33, v46) v47 
    let v49 : string = "env"
    let v50 : string = "r#\"" + v49 + "\"#"
    let v51 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v50 
    let v52 : string = "clap::Arg::new($0)"
    let v53 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v51 v52 
    let v54 : string = "$0.short($1)"
    let v55 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v53, 'e') v54 
    let v56 : string = "r#\"" + v49 + "\"#"
    let v57 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "$0.long($1)"
    let v59 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v55, v57) v58 
    let v60 : string list = []
    let v61 : string = "Poetry"
    let v62 : string list = v61 :: v60 
    let v65 : string = "Pip"
    let v66 : string list = v65 :: v62 
    let v69 : (string list -> (string [])) = List.toArray
    let v70 : (string []) = v69 v66
    let v73 : string = "$0.to_vec()"
    let v74 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v70 v73 
    let v75 : string = "true; let _result : Vec<_> = v74.into_iter().map(|x| { //"
    let v76 : bool = Fable.Core.RustInterop.emitRustExpr () v75 
    let v77 : string = "x"
    let v78 : string = Fable.Core.RustInterop.emitRustExpr () v77 
    let v79 : string = "&*$0"
    let v80 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v78 v79 
    let v81 : string = "String::from($0)"
    let v82 : std_string_String = Fable.Core.RustInterop.emitRustExpr v80 v81 
    let v83 : string = "Box::new($0)"
    let v84 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v82 v83 
    let v85 : string = "Box::leak($0)"
    let v86 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v84 v85 
    let v87 : string = "clap::builder::PossibleValue::new(&**$0)"
    let v88 : clap_builder_PossibleValue = Fable.Core.RustInterop.emitRustExpr v86 v87 
    let v89 : string = "true; $0 }).collect::<Vec<_>>()"
    let v90 : bool = Fable.Core.RustInterop.emitRustExpr v88 v89 
    let v91 : string = "_result"
    let v92 : Vec<clap_builder_PossibleValue> = Fable.Core.RustInterop.emitRustExpr () v91 
    let v93 : string = "Into::<clap::builder::ValueParser>::into(clap::builder::PossibleValuesParser::new($0))"
    let v94 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr v92 v93 
    let v95 : string = "$0.value_parser($1)"
    let v96 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v59, v94) v95 
    let v97 : string = "clap::Command::arg($0, $1)"
    let v98 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v48, v96) v97 
    let v99 : string = "NAME"
    let v100 : string = "r#\"" + v99 + "\"#"
    let v101 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v100 
    let v102 : string = "VERSION"
    let v103 : string = "r#\"" + v102 + "\"#"
    let v104 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v103 
    let v105 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v101; v104|]
    let v106 : unativeint = 1 |> unativeint 
    let v109 : unativeint = 0 |> unativeint 
    let v112 : bool = v109 = v109 
    let v119 : clap_builder_ValueRange =
        if v112 then
            let v115 : string = "clap::builder::ValueRange::new(v106..)"
            let v116 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr () v115 
            v116
        else
            let v117 : string = "clap::builder::ValueRange::new(v106..v109)"
            let v118 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr () v117 
            v118
    let v120 : string = "deps"
    let v121 : string = "r#\"" + v120 + "\"#"
    let v122 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v121 
    let v123 : string = "clap::Arg::new($0)"
    let v124 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v122 v123 
    let v125 : string = "$0.short($1)"
    let v126 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v124, 'd') v125 
    let v127 : string = "r#\"" + v120 + "\"#"
    let v128 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v127 
    let v129 : string = "$0.long($1)"
    let v130 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v126, v128) v129 
    let v131 : string = "$0.to_vec()"
    let v132 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v105 v131 
    let v133 : string = "$0.value_names($1)"
    let v134 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v130, v132) v133 
    let v135 : string = "$0.num_args($1)"
    let v136 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v134, v119) v135 
    let v137 : string = "clap::ArgAction::Append"
    let v138 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v137 
    let v139 : string = "$0.action($1)"
    let v140 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v136, v138) v139 
    let v141 : string = "clap::Command::arg($0, $1)"
    let v142 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v98, v140) v141 
    let v143 : string = "clap::Command::subcommand($0, v142)"
    let v144 : clap_Command = Fable.Core.RustInterop.emitRustExpr v28 v143 
    let v145 : string = "fable"
    let v146 : string = "r#\"" + v145 + "\"#"
    let v147 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v146 
    let v148 : string = "clap::Command::new($0)"
    let v149 : clap_Command = Fable.Core.RustInterop.emitRustExpr v147 v148 
    let v150 : string = "fs-path"
    let v151 : string = "r#\"" + v150 + "\"#"
    let v152 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v151 
    let v153 : string = "clap::Arg::new($0)"
    let v154 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v152 v153 
    let v155 : string = "$0.short($1)"
    let v156 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v154, 'f') v155 
    let v157 : string = "r#\"" + v150 + "\"#"
    let v158 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v157 
    let v159 : string = "$0.long($1)"
    let v160 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v156, v158) v159 
    let v161 : string = "$0.required($1)"
    let v162 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v160, true) v161 
    let v163 : string = "clap::Command::arg($0, $1)"
    let v164 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v149, v162) v163 
    let v165 : string = "r#\"" + v0 + "\"#"
    let v166 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v165 
    let v167 : string = "clap::Arg::new($0)"
    let v168 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v166 v167 
    let v169 : string = "$0.short($1)"
    let v170 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v168, 'c') v169 
    let v171 : string = "r#\"" + v0 + "\"#"
    let v172 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v171 
    let v173 : string = "$0.long($1)"
    let v174 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v170, v172) v173 
    let v175 : string = "clap::Command::arg($0, $1)"
    let v176 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v164, v174) v175 
    let v177 : string = "clap::Command::subcommand($0, v176)"
    let v178 : clap_Command = Fable.Core.RustInterop.emitRustExpr v144 v177 
    let v179 : string = "rust"
    let v180 : string = "r#\"" + v179 + "\"#"
    let v181 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v180 
    let v182 : string = "clap::Command::new($0)"
    let v183 : clap_Command = Fable.Core.RustInterop.emitRustExpr v181 v182 
    let v184 : string = "r#\"" + v150 + "\"#"
    let v185 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v184 
    let v186 : string = "clap::Arg::new($0)"
    let v187 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v185 v186 
    let v188 : string = "$0.short($1)"
    let v189 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v187, 'f') v188 
    let v190 : string = "r#\"" + v150 + "\"#"
    let v191 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v190 
    let v192 : string = "$0.long($1)"
    let v193 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v189, v191) v192 
    let v194 : string = "$0.required($1)"
    let v195 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v193, true) v194 
    let v196 : string = "clap::Command::arg($0, $1)"
    let v197 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v183, v195) v196 
    let v198 : string = "r#\"" + v99 + "\"#"
    let v199 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v198 
    let v200 : string = "r#\"" + v102 + "\"#"
    let v201 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v200 
    let v202 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v199; v201|]
    let v203 : unativeint = 1 |> unativeint 
    let v206 : unativeint = 0 |> unativeint 
    let v209 : bool = v206 = v206 
    let v216 : clap_builder_ValueRange =
        if v209 then
            let v212 : string = "clap::builder::ValueRange::new(v203..)"
            let v213 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr () v212 
            v213
        else
            let v214 : string = "clap::builder::ValueRange::new(v203..v206)"
            let v215 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr () v214 
            v215
    let v217 : string = "r#\"" + v120 + "\"#"
    let v218 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v217 
    let v219 : string = "clap::Arg::new($0)"
    let v220 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v218 v219 
    let v221 : string = "$0.short($1)"
    let v222 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v220, 'd') v221 
    let v223 : string = "r#\"" + v120 + "\"#"
    let v224 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v223 
    let v225 : string = "$0.long($1)"
    let v226 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v222, v224) v225 
    let v227 : string = "$0.to_vec()"
    let v228 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v202 v227 
    let v229 : string = "$0.value_names($1)"
    let v230 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v226, v228) v229 
    let v231 : string = "$0.num_args($1)"
    let v232 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v230, v216) v231 
    let v233 : string = "clap::ArgAction::Append"
    let v234 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v233 
    let v235 : string = "$0.action($1)"
    let v236 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v232, v234) v235 
    let v237 : string = "clap::Command::arg($0, $1)"
    let v238 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v197, v236) v237 
    let v239 : string = "wasm"
    let v240 : string = "r#\"" + v239 + "\"#"
    let v241 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v240 
    let v242 : string = "clap::Arg::new($0)"
    let v243 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v241 v242 
    let v244 : string = "$0.short($1)"
    let v245 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v243, 'w') v244 
    let v246 : string = "r#\"" + v239 + "\"#"
    let v247 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v246 
    let v248 : string = "$0.long($1)"
    let v249 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v245, v247) v248 
    let v250 : string = "clap::ArgAction::SetTrue"
    let v251 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v250 
    let v252 : string = "$0.action($1)"
    let v253 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v249, v251) v252 
    let v254 : string = "clap::Command::arg($0, $1)"
    let v255 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v238, v253) v254 
    let v256 : string = "contract"
    let v257 : string = "r#\"" + v256 + "\"#"
    let v258 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v257 
    let v259 : string = "clap::Arg::new($0)"
    let v260 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v258 v259 
    let v261 : string = "$0.short($1)"
    let v262 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v260, 'c') v261 
    let v263 : string = "r#\"" + v256 + "\"#"
    let v264 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v263 
    let v265 : string = "$0.long($1)"
    let v266 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v262, v264) v265 
    let v267 : string = "clap::ArgAction::SetTrue"
    let v268 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v267 
    let v269 : string = "$0.action($1)"
    let v270 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v266, v268) v269 
    let v271 : string = "clap::Command::arg($0, $1)"
    let v272 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v255, v270) v271 
    let v273 : string = "clap::Command::subcommand($0, v272)"
    let v274 : clap_Command = Fable.Core.RustInterop.emitRustExpr v178 v273 
    let v275 : string = "typescript"
    let v276 : string = "r#\"" + v275 + "\"#"
    let v277 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v276 
    let v278 : string = "clap::Command::new($0)"
    let v279 : clap_Command = Fable.Core.RustInterop.emitRustExpr v277 v278 
    let v280 : string = "r#\"" + v150 + "\"#"
    let v281 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v280 
    let v282 : string = "clap::Arg::new($0)"
    let v283 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v281 v282 
    let v284 : string = "$0.short($1)"
    let v285 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v283, 'f') v284 
    let v286 : string = "r#\"" + v150 + "\"#"
    let v287 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v286 
    let v288 : string = "$0.long($1)"
    let v289 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v285, v287) v288 
    let v290 : string = "$0.required($1)"
    let v291 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v289, true) v290 
    let v292 : string = "clap::Command::arg($0, $1)"
    let v293 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v279, v291) v292 
    let v294 : string = "r#\"" + v99 + "\"#"
    let v295 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v294 
    let v296 : string = "r#\"" + v102 + "\"#"
    let v297 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v296 
    let v298 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v295; v297|]
    let v299 : unativeint = 1 |> unativeint 
    let v302 : unativeint = 0 |> unativeint 
    let v305 : bool = v302 = v302 
    let v312 : clap_builder_ValueRange =
        if v305 then
            let v308 : string = "clap::builder::ValueRange::new(v299..)"
            let v309 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr () v308 
            v309
        else
            let v310 : string = "clap::builder::ValueRange::new(v299..v302)"
            let v311 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr () v310 
            v311
    let v313 : string = "r#\"" + v120 + "\"#"
    let v314 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v313 
    let v315 : string = "clap::Arg::new($0)"
    let v316 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v314 v315 
    let v317 : string = "$0.short($1)"
    let v318 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v316, 'd') v317 
    let v319 : string = "r#\"" + v120 + "\"#"
    let v320 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v319 
    let v321 : string = "$0.long($1)"
    let v322 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v318, v320) v321 
    let v323 : string = "$0.to_vec()"
    let v324 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v298 v323 
    let v325 : string = "$0.value_names($1)"
    let v326 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v322, v324) v325 
    let v327 : string = "$0.num_args($1)"
    let v328 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v326, v312) v327 
    let v329 : string = "clap::ArgAction::Append"
    let v330 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v329 
    let v331 : string = "$0.action($1)"
    let v332 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v328, v330) v331 
    let v333 : string = "clap::Command::arg($0, $1)"
    let v334 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v293, v332) v333 
    let v335 : string = "clap::Command::subcommand($0, v334)"
    let v336 : clap_Command = Fable.Core.RustInterop.emitRustExpr v274 v335 
    let v337 : string = "python"
    let v338 : string = "r#\"" + v337 + "\"#"
    let v339 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v338 
    let v340 : string = "clap::Command::new($0)"
    let v341 : clap_Command = Fable.Core.RustInterop.emitRustExpr v339 v340 
    let v342 : string = "r#\"" + v150 + "\"#"
    let v343 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v342 
    let v344 : string = "clap::Arg::new($0)"
    let v345 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v343 v344 
    let v346 : string = "$0.short($1)"
    let v347 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v345, 'f') v346 
    let v348 : string = "r#\"" + v150 + "\"#"
    let v349 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v348 
    let v350 : string = "$0.long($1)"
    let v351 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v347, v349) v350 
    let v352 : string = "$0.required($1)"
    let v353 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v351, true) v352 
    let v354 : string = "clap::Command::arg($0, $1)"
    let v355 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v341, v353) v354 
    let v356 : string = "r#\"" + v99 + "\"#"
    let v357 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v356 
    let v358 : string = "r#\"" + v102 + "\"#"
    let v359 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v358 
    let v360 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v357; v359|]
    let v361 : unativeint = 1 |> unativeint 
    let v364 : unativeint = 0 |> unativeint 
    let v367 : bool = v364 = v364 
    let v374 : clap_builder_ValueRange =
        if v367 then
            let v370 : string = "clap::builder::ValueRange::new(v361..)"
            let v371 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr () v370 
            v371
        else
            let v372 : string = "clap::builder::ValueRange::new(v361..v364)"
            let v373 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr () v372 
            v373
    let v375 : string = "r#\"" + v120 + "\"#"
    let v376 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v375 
    let v377 : string = "clap::Arg::new($0)"
    let v378 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v376 v377 
    let v379 : string = "$0.short($1)"
    let v380 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v378, 'd') v379 
    let v381 : string = "r#\"" + v120 + "\"#"
    let v382 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v381 
    let v383 : string = "$0.long($1)"
    let v384 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v380, v382) v383 
    let v385 : string = "$0.to_vec()"
    let v386 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v360 v385 
    let v387 : string = "$0.value_names($1)"
    let v388 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v384, v386) v387 
    let v389 : string = "$0.num_args($1)"
    let v390 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v388, v374) v389 
    let v391 : string = "clap::ArgAction::Append"
    let v392 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v391 
    let v393 : string = "$0.action($1)"
    let v394 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v390, v392) v393 
    let v395 : string = "clap::Command::arg($0, $1)"
    let v396 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v355, v394) v395 
    let v397 : string = "clap::Command::subcommand($0, v396)"
    let v398 : clap_Command = Fable.Core.RustInterop.emitRustExpr v336 v397 
    let v399 : string = "dib"
    let v400 : string = "r#\"" + v399 + "\"#"
    let v401 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v400 
    let v402 : string = "clap::Command::new($0)"
    let v403 : clap_Command = Fable.Core.RustInterop.emitRustExpr v401 v402 
    let v404 : string = "path"
    let v405 : string = "r#\"" + v404 + "\"#"
    let v406 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v405 
    let v407 : string = "clap::Arg::new($0)"
    let v408 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v406 v407 
    let v409 : string = "$0.short($1)"
    let v410 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v408, 'p') v409 
    let v411 : string = "r#\"" + v404 + "\"#"
    let v412 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v411 
    let v413 : string = "$0.long($1)"
    let v414 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v410, v412) v413 
    let v415 : string = "$0.required($1)"
    let v416 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v414, true) v415 
    let v417 : string = "clap::Command::arg($0, $1)"
    let v418 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v403, v416) v417 
    let v419 : string = "u8"
    let v420 : string = "clap::value_parser!(" + v419 + ").into()"
    let v421 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr () v420 
    let v422 : string = "retries"
    let v423 : string = "r#\"" + v422 + "\"#"
    let v424 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v423 
    let v425 : string = "clap::Arg::new($0)"
    let v426 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v424 v425 
    let v427 : string = "$0.short($1)"
    let v428 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v426, 'r') v427 
    let v429 : string = "r#\"" + v422 + "\"#"
    let v430 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v429 
    let v431 : string = "$0.long($1)"
    let v432 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v428, v430) v431 
    let v433 : string = "$0.value_parser($1)"
    let v434 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v432, v421) v433 
    let v435 : string = "clap::Command::arg($0, $1)"
    let v436 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v418, v434) v435 
    let v437 : string = "working-directory"
    let v438 : string = "r#\"" + v437 + "\"#"
    let v439 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v438 
    let v440 : string = "clap::Arg::new($0)"
    let v441 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v439 v440 
    let v442 : string = "$0.short($1)"
    let v443 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v441, 'w') v442 
    let v444 : string = "r#\"" + v437 + "\"#"
    let v445 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v444 
    let v446 : string = "$0.long($1)"
    let v447 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v443, v445) v446 
    let v448 : string = "clap::Command::arg($0, $1)"
    let v449 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v436, v447) v448 
    let v450 : string = "clap::Command::subcommand($0, v449)"
    let v451 : clap_Command = Fable.Core.RustInterop.emitRustExpr v398 v450 
    v451
and closure0 () () : unit =
    let v0 : string = "true; () //"
    let v1 : bool = Fable.Core.RustInterop.emitRustExpr () v0 
    let v2 : string = "} /* /*"
    Fable.Core.RustInterop.emitRustExpr () v2 
    let v3 : string = "verify_app"
    let v4 : string = $"*/ #[test] fn " + v3 + "() { //"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : clap_Command = method0()
    let v7 : string = "clap::Command::debug_assert($0)"
    Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v8 : string = "{ //"
    Fable.Core.RustInterop.emitRustExpr () v8 
    ()
and method2 () : string =
    let v0 : string = "TRACE_LEVEL"
    v0
and method4 () : string =
    let v0 : string = ""
    v0
and method3 (v0 : string) : string =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "std::env::var(&*$0)"
    let v3 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "true; let _result = $0.map(|x| { //"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "x"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : string = "fable_library_rust::String_::fromString($0)"
    let v9 : string = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "true; $0 })"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "_result"
    let v13 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = method4()
    let v15 : string = "$0.unwrap_or($1)"
    let v16 : string = Fable.Core.RustInterop.emitRustExpr struct (v13, v14) v15 
    let _v1 = v16 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : string = "std::env::var(&*$0)"
    let v18 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v0 v17 
    let v19 : string = "true; let _result = $0.map(|x| { //"
    let v20 : bool = Fable.Core.RustInterop.emitRustExpr v18 v19 
    let v21 : string = "x"
    let v22 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v21 
    let v23 : string = "fable_library_rust::String_::fromString($0)"
    let v24 : string = Fable.Core.RustInterop.emitRustExpr v22 v23 
    let v25 : string = "true; $0 })"
    let v26 : bool = Fable.Core.RustInterop.emitRustExpr v24 v25 
    let v27 : string = "_result"
    let v28 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v27 
    let v29 : string = method4()
    let v30 : string = "$0.unwrap_or($1)"
    let v31 : string = Fable.Core.RustInterop.emitRustExpr struct (v28, v29) v30 
    let _v1 = v31 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v32 : string = "std::env::var(&*$0)"
    let v33 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v0 v32 
    let v34 : string = "true; let _result = $0.map(|x| { //"
    let v35 : bool = Fable.Core.RustInterop.emitRustExpr v33 v34 
    let v36 : string = "x"
    let v37 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v36 
    let v38 : string = "fable_library_rust::String_::fromString($0)"
    let v39 : string = Fable.Core.RustInterop.emitRustExpr v37 v38 
    let v40 : string = "true; $0 })"
    let v41 : bool = Fable.Core.RustInterop.emitRustExpr v39 v40 
    let v42 : string = "_result"
    let v43 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v42 
    let v44 : string = method4()
    let v45 : string = "$0.unwrap_or($1)"
    let v46 : string = Fable.Core.RustInterop.emitRustExpr struct (v43, v44) v45 
    let _v1 = v46 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v47 : string = "process.env[$0] ?? \"\""
    let v48 : string = Fable.Core.JsInterop.emitJsExpr v0 v47 
    let _v1 = v48 
    #endif
#if FABLE_COMPILER_PYTHON
    let v49 : string = "os"
    let v50 : IOsEnviron = Fable.Core.PyInterop.importAll v49 
    let v51 : string = "v50.environ"
    let v52 : obj = Fable.Core.PyInterop.emitPyExpr () v51 
    let v55 : string = "v52.get($0)"
    let v56 : string = Fable.Core.PyInterop.emitPyExpr v0 v55 
    let mutable _v56 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v59 : (string -> string option) = Option.ofObj
    let v60 : string option = v59 v56
    v60 
    #else
    Some v56 
    #endif
    |> fun x -> _v56 <- Some x
    let v61 : string option = match _v56 with Some x -> x | None -> failwith "optionm'.of_obj / _v56=None"
    let v64 : US1 option = None
    let _v64 = ref v64 
    match v61 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v65 : string = x
    let v66 : US1 = US1_0(v65)
    v66 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v64.Value <- x
    let v67 : US1 option = _v64.Value 
    let v78 : US1 = US1_1
    let v79 : US1 = v67 |> Option.defaultValue v78 
    let v86 : string =
        match v79 with
        | US1_1 -> (* None *)
            let v84 : string = ""
            v84
        | US1_0(v83) -> (* Some *)
            v83
    let _v1 = v86 
    #endif
#else
    let v87 : (string -> string) = System.Environment.GetEnvironmentVariable
    let v88 : string = v87 v0
    let mutable _v88 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v89 : (string -> string option) = Option.ofObj
    let v90 : string option = v89 v88
    v90 
    #else
    Some v88 
    #endif
    |> fun x -> _v88 <- Some x
    let v91 : string option = match _v88 with Some x -> x | None -> failwith "optionm'.of_obj / _v88=None"
    let v94 : US1 option = None
    let _v94 = ref v94 
    match v91 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v95 : string = x
    let v96 : US1 = US1_0(v95)
    v96 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v94.Value <- x
    let v97 : US1 option = _v94.Value 
    let v108 : US1 = US1_1
    let v109 : US1 = v97 |> Option.defaultValue v108 
    let v116 : string =
        match v109 with
        | US1_1 -> (* None *)
            let v114 : string = ""
            v114
        | US1_0(v113) -> (* Some *)
            v113
    let _v1 = v116 
    #endif
    let v117 : string = _v1 
    v117
and method5 () : string =
    let v0 : string = "AUTOMATION"
    v0
and closure2 () (v0 : string) : unit =
    ()
and method1 (v0 : US0) : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = method2()
    let v3 : string = method3(v2)
    let v4 : bool = "Verbose" = v3
    let v8 : US2 =
        if v4 then
            let v5 : US0 = US0_0
            US2_0(v5)
        else
            US2_1
    let v49 : US2 =
        match v8 with
        | US2_1 -> (* None *)
            let v11 : bool = "Debug" = v3
            let v15 : US2 =
                if v11 then
                    let v12 : US0 = US0_1
                    US2_0(v12)
                else
                    US2_1
            match v15 with
            | US2_1 -> (* None *)
                let v18 : bool = "Info" = v3
                let v22 : US2 =
                    if v18 then
                        let v19 : US0 = US0_2
                        US2_0(v19)
                    else
                        US2_1
                match v22 with
                | US2_1 -> (* None *)
                    let v25 : bool = "Warning" = v3
                    let v29 : US2 =
                        if v25 then
                            let v26 : US0 = US0_3
                            US2_0(v26)
                        else
                            US2_1
                    match v29 with
                    | US2_1 -> (* None *)
                        let v32 : bool = "Critical" = v3
                        let v36 : US2 =
                            if v32 then
                                let v33 : US0 = US0_4
                                US2_0(v33)
                            else
                                US2_1
                        match v36 with
                        | US2_1 -> (* None *)
                            US2_1
                        | US2_0(v37) -> (* Some *)
                            US2_0(v37)
                    | US2_0(v30) -> (* Some *)
                        US2_0(v30)
                | US2_0(v23) -> (* Some *)
                    US2_0(v23)
            | US2_0(v16) -> (* Some *)
                US2_0(v16)
        | US2_0(v9) -> (* Some *)
            US2_0(v9)
    let v50 : string = method5()
    let v51 : string = method3(v50)
    let v52 : bool = v51 = "True"
    let v62 : US3 =
        if v52 then
            let v53 : System.DateTime = System.DateTime.Now
            let v56 : (System.DateTime -> int64) = _.Ticks
            let v57 : int64 = v56 v53
            US3_0(v57)
        else
            US3_1
    let _v1 = struct (v49, v62) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v63 : US2 = US2_1
    let v64 : US3 = US3_1
    let _v1 = struct (v63, v64) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v65 : string = "AUTOMATION"
    let v66 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v67 : string = "env!(\"" + v65 + "\")"
    let v68 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v67 
    let v69 : string = "String::from($0)"
    let v70 : std_string_String = Fable.Core.RustInterop.emitRustExpr v68 v69 
    let v71 : string = "fable_library_rust::String_::fromString($0)"
    let v72 : string = Fable.Core.RustInterop.emitRustExpr v70 v71 
    let _v66 = v72 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v73 : string = "env!(\"" + v65 + "\")"
    let v74 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v73 
    let v75 : string = "String::from($0)"
    let v76 : std_string_String = Fable.Core.RustInterop.emitRustExpr v74 v75 
    let v77 : string = "fable_library_rust::String_::fromString($0)"
    let v78 : string = Fable.Core.RustInterop.emitRustExpr v76 v77 
    let _v66 = v78 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v79 : string = "env!(\"" + v65 + "\")"
    let v80 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v79 
    let v81 : string = "String::from($0)"
    let v82 : std_string_String = Fable.Core.RustInterop.emitRustExpr v80 v81 
    let v83 : string = "fable_library_rust::String_::fromString($0)"
    let v84 : string = Fable.Core.RustInterop.emitRustExpr v82 v83 
    let _v66 = v84 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v85 : string = null |> unbox<string>
    let _v66 = v85 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : string = null |> unbox<string>
    let _v66 = v88 
    #endif
#else
    let v91 : string = null |> unbox<string>
    let _v66 = v91 
    #endif
    let v94 : string = _v66 
    let v99 : string = "True"
    let v100 : bool = v94 <> v99 
    let v109 : US3 =
        if v100 then
            US3_1
        else
            let v104 : string = $"near_sdk::env::block_timestamp()"
            let v105 : uint64 = Fable.Core.RustInterop.emitRustExpr () v104 
            let v106 : (uint64 -> int64) = int64
            let v107 : int64 = v106 v105
            US3_0(v107)
    let v110 : US2 = US2_1
    let _v1 = struct (v110, v109) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v111 : string = method2()
    let v112 : string = method3(v111)
    let v113 : bool = "Verbose" = v112
    let v117 : US2 =
        if v113 then
            let v114 : US0 = US0_0
            US2_0(v114)
        else
            US2_1
    let v158 : US2 =
        match v117 with
        | US2_1 -> (* None *)
            let v120 : bool = "Debug" = v112
            let v124 : US2 =
                if v120 then
                    let v121 : US0 = US0_1
                    US2_0(v121)
                else
                    US2_1
            match v124 with
            | US2_1 -> (* None *)
                let v127 : bool = "Info" = v112
                let v131 : US2 =
                    if v127 then
                        let v128 : US0 = US0_2
                        US2_0(v128)
                    else
                        US2_1
                match v131 with
                | US2_1 -> (* None *)
                    let v134 : bool = "Warning" = v112
                    let v138 : US2 =
                        if v134 then
                            let v135 : US0 = US0_3
                            US2_0(v135)
                        else
                            US2_1
                    match v138 with
                    | US2_1 -> (* None *)
                        let v141 : bool = "Critical" = v112
                        let v145 : US2 =
                            if v141 then
                                let v142 : US0 = US0_4
                                US2_0(v142)
                            else
                                US2_1
                        match v145 with
                        | US2_1 -> (* None *)
                            US2_1
                        | US2_0(v146) -> (* Some *)
                            US2_0(v146)
                    | US2_0(v139) -> (* Some *)
                        US2_0(v139)
                | US2_0(v132) -> (* Some *)
                    US2_0(v132)
            | US2_0(v125) -> (* Some *)
                US2_0(v125)
        | US2_0(v118) -> (* Some *)
            US2_0(v118)
    let v159 : string = method5()
    let v160 : string = method3(v159)
    let v161 : bool = v160 = "True"
    let v171 : US3 =
        if v161 then
            let v162 : System.DateTime = System.DateTime.Now
            let v165 : (System.DateTime -> int64) = _.Ticks
            let v166 : int64 = v165 v162
            US3_0(v166)
        else
            US3_1
    let _v1 = struct (v158, v171) 
    #endif
#if FABLE_COMPILER_PYTHON
    let v172 : string = method2()
    let v173 : string = method3(v172)
    let v174 : bool = "Verbose" = v173
    let v178 : US2 =
        if v174 then
            let v175 : US0 = US0_0
            US2_0(v175)
        else
            US2_1
    let v219 : US2 =
        match v178 with
        | US2_1 -> (* None *)
            let v181 : bool = "Debug" = v173
            let v185 : US2 =
                if v181 then
                    let v182 : US0 = US0_1
                    US2_0(v182)
                else
                    US2_1
            match v185 with
            | US2_1 -> (* None *)
                let v188 : bool = "Info" = v173
                let v192 : US2 =
                    if v188 then
                        let v189 : US0 = US0_2
                        US2_0(v189)
                    else
                        US2_1
                match v192 with
                | US2_1 -> (* None *)
                    let v195 : bool = "Warning" = v173
                    let v199 : US2 =
                        if v195 then
                            let v196 : US0 = US0_3
                            US2_0(v196)
                        else
                            US2_1
                    match v199 with
                    | US2_1 -> (* None *)
                        let v202 : bool = "Critical" = v173
                        let v206 : US2 =
                            if v202 then
                                let v203 : US0 = US0_4
                                US2_0(v203)
                            else
                                US2_1
                        match v206 with
                        | US2_1 -> (* None *)
                            US2_1
                        | US2_0(v207) -> (* Some *)
                            US2_0(v207)
                    | US2_0(v200) -> (* Some *)
                        US2_0(v200)
                | US2_0(v193) -> (* Some *)
                    US2_0(v193)
            | US2_0(v186) -> (* Some *)
                US2_0(v186)
        | US2_0(v179) -> (* Some *)
            US2_0(v179)
    let v220 : string = method5()
    let v221 : string = method3(v220)
    let v222 : bool = v221 = "True"
    let v232 : US3 =
        if v222 then
            let v223 : System.DateTime = System.DateTime.Now
            let v226 : (System.DateTime -> int64) = _.Ticks
            let v227 : int64 = v226 v223
            US3_0(v227)
        else
            US3_1
    let _v1 = struct (v219, v232) 
    #endif
#else
    let v233 : string = method2()
    let v234 : string = method3(v233)
    let v235 : bool = "Verbose" = v234
    let v239 : US2 =
        if v235 then
            let v236 : US0 = US0_0
            US2_0(v236)
        else
            US2_1
    let v280 : US2 =
        match v239 with
        | US2_1 -> (* None *)
            let v242 : bool = "Debug" = v234
            let v246 : US2 =
                if v242 then
                    let v243 : US0 = US0_1
                    US2_0(v243)
                else
                    US2_1
            match v246 with
            | US2_1 -> (* None *)
                let v249 : bool = "Info" = v234
                let v253 : US2 =
                    if v249 then
                        let v250 : US0 = US0_2
                        US2_0(v250)
                    else
                        US2_1
                match v253 with
                | US2_1 -> (* None *)
                    let v256 : bool = "Warning" = v234
                    let v260 : US2 =
                        if v256 then
                            let v257 : US0 = US0_3
                            US2_0(v257)
                        else
                            US2_1
                    match v260 with
                    | US2_1 -> (* None *)
                        let v263 : bool = "Critical" = v234
                        let v267 : US2 =
                            if v263 then
                                let v264 : US0 = US0_4
                                US2_0(v264)
                            else
                                US2_1
                        match v267 with
                        | US2_1 -> (* None *)
                            US2_1
                        | US2_0(v268) -> (* Some *)
                            US2_0(v268)
                    | US2_0(v261) -> (* Some *)
                        US2_0(v261)
                | US2_0(v254) -> (* Some *)
                    US2_0(v254)
            | US2_0(v247) -> (* Some *)
                US2_0(v247)
        | US2_0(v240) -> (* Some *)
            US2_0(v240)
    let v281 : string = method5()
    let v282 : string = method3(v281)
    let v283 : bool = v282 = "True"
    let v293 : US3 =
        if v283 then
            let v284 : System.DateTime = System.DateTime.Now
            let v287 : (System.DateTime -> int64) = _.Ticks
            let v288 : int64 = v287 v284
            US3_0(v288)
        else
            US3_1
    let _v1 = struct (v280, v293) 
    #endif
    let struct (v294 : US2, v295 : US3) = _v1 
    let v359 : Mut2 = {l0 = true} : Mut2
    let v360 : Mut0 = {l0 = 0L} : Mut0
    let v363 : US0 =
        match v294 with
        | US2_1 -> (* None *)
            v0
        | US2_0(v361) -> (* Some *)
            v361
    let v364 : Mut3 = {l0 = v363} : Mut3
    let v365 : (string -> unit) = closure2()
    let v366 : Mut1 = {l0 = v365} : Mut1
    let v373 : int64 option =
        match v295 with
        | US3_1 -> (* None *)
            let v371 : int64 option = None
            v371
        | US3_0(v367) -> (* Some *)
            let v368 : int64 option = Some v367 
            v368
    struct (v360, v366, v359, v364, v373)
and method6 () : string =
    let v0 : string = "hh:mm:ss"
    v0
and method7 () : string =
    let v0 : string = "HH:mm:ss"
    v0
and method8 () : string =
    let v0 : string = "\u001b[0m"
    v0
and method9 () : string =
    let v0 : string = ""
    v0
and closure3 () () : string =
    let v0 : string = $"spiral_builder.main"
    v0
and closure4 () (v0 : Ref<Str>) : std_string_String =
    let v1 : string = "String::from($0)"
    let v2 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v1 
    v2
and method11 () : string =
    let v0 : string = "py-path"
    v0
and method12 () : string =
    let v0 : string = "env"
    v0
and method13 () : string =
    let v0 : string = "deps"
    v0
and method14 (v0 : Vec<uint8>) : Vec<uint8> =
    v0
and method17 (v0 : string) : string =
    v0
and method16 (v0 : string, v1 : string) : struct (string * string) =
    let v2 : string = method17(v0)
    struct (v1, v2)
and method15 (v0 : string, v1 : string) : string =
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let v5 : string = "String::from($0)"
    let v6 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "std::path::PathBuf::from($0)"
    let v8 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v9 : string = "&*$0"
    let v10 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v9 
    let v11 : string = "String::from($0)"
    let v12 : std_string_String = Fable.Core.RustInterop.emitRustExpr v10 v11 
    let v13 : string = "$0.join($1)"
    let v14 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr struct (v8, v12) v13 
    let v15 : string = "$0.display()"
    let v16 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v14 v15 
    let v17 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v18 : string = "format!(\"{}\", $0)"
    let v19 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16 v18 
    let _v17 = v19 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v20 : string = "format!(\"{}\", $0)"
    let v21 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16 v20 
    let _v17 = v21 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v22 : string = "format!(\"{}\", $0)"
    let v23 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16 v22 
    let _v17 = v23 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v24 : std_string_String = null |> unbox<std_string_String>
    let _v17 = v24 
    #endif
#if FABLE_COMPILER_PYTHON
    let v27 : std_string_String = null |> unbox<std_string_String>
    let _v17 = v27 
    #endif
#else
    let v30 : std_string_String = null |> unbox<std_string_String>
    let _v17 = v30 
    #endif
    let v33 : std_string_String = _v17 
    let v38 : string = "fable_library_rust::String_::fromString($0)"
    let v39 : string = Fable.Core.RustInterop.emitRustExpr v33 v38 
    let _v2 = v39 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v40 : US10 = US10_1
    let v41 : US11 = US11_2(v40)
    let v42 : string = $"file_system.(</>) / target: {v41} / a: {v0} / b: {v1}"
    let v43 : string = failwith<string> v42
    let _v2 = v43 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v44 : string = null |> unbox<string>
    let _v2 = v44 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v47 : string = "path"
    let v48 : IPathJoin = Fable.Core.JsInterop.importAll v47 
    let struct (v49 : string, v50 : string) = method16(v1, v0)
    let v51 : string = "v48.join($0, $1)"
    let v52 : string = Fable.Core.JsInterop.emitJsExpr struct (v49, v50) v51 
    let _v2 = v52 
    #endif
#if FABLE_COMPILER_PYTHON
    let v53 : US10 = US10_0
    let v54 : US11 = US11_4(v53)
    let v55 : string = $"file_system.(</>) / target: {v54} / a: {v0} / b: {v1}"
    let v56 : string = failwith<string> v55
    let _v2 = v56 
    #endif
#else
    let v57 : string = System.IO.Path.Combine (v0, v1)
    let _v2 = v57 
    #endif
    let v58 : string = _v2 
    v58
and method19 (v0 : string) : bool =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "std::path::PathBuf::from($0)"
    let v7 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "$0.exists()"
    let v9 : bool = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v15 : bool =
        if v9 then
            true
        else
            let v10 : string = "$0.is_dir()"
            let v11 : bool = Fable.Core.RustInterop.emitRustExpr v7 v10 
            if v11 then
                true
            else
                let v12 : string = "$0.is_symlink()"
                let v13 : bool = Fable.Core.RustInterop.emitRustExpr v7 v12 
                v13
    let _v1 = v15 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v16 : bool = null |> unbox<bool>
    let _v1 = v16 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v19 : bool = null |> unbox<bool>
    let _v1 = v19 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v22 : string = "fs"
    let v23 : IFsExistsSync = Fable.Core.JsInterop.importAll v22 
    let v24 : string = "$0.existsSync($1)"
    let v25 : bool = Fable.Core.JsInterop.emitJsExpr struct (v23, v0) v24 
    let _v1 = v25 
    #endif
#if FABLE_COMPILER_PYTHON
    let v26 : bool = null |> unbox<bool>
    let _v1 = v26 
    #endif
#else
    let v29 : (string -> bool) = System.IO.Directory.Exists
    let v30 : bool = v29 v0
    let _v1 = v30 
    #endif
    let v31 : bool = _v1 
    v31
and method21 (v0 : string) : string option =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "std::path::PathBuf::from($0)"
    let v7 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "$0.parent().map(std::path::PathBuf::from)"
    let v9 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "$0?"
    let v11 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "$0.display()"
    let v13 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v15 : string = "format!(\"{}\", $0)"
    let v16 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v15 
    let _v14 = v16 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : string = "format!(\"{}\", $0)"
    let v18 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v17 
    let _v14 = v18 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v19 : string = "format!(\"{}\", $0)"
    let v20 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v19 
    let _v14 = v20 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _v14 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : std_string_String = null |> unbox<std_string_String>
    let _v14 = v24 
    #endif
#else
    let v27 : std_string_String = null |> unbox<std_string_String>
    let _v14 = v27 
    #endif
    let v30 : std_string_String = _v14 
    let v35 : string = "fable_library_rust::String_::fromString($0)"
    let v36 : string = Fable.Core.RustInterop.emitRustExpr v30 v35 
    let v37 : US1 = US1_0(v36)
    let _v1 = v37 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v38 : US1 = null |> unbox<US1>
    let _v1 = v38 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v41 : US1 = null |> unbox<US1>
    let _v1 = v41 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v44 : string = "path"
    let v45 : IPathDirname = Fable.Core.JsInterop.importAll v44 
    let v46 : string = "v45.dirname($0)"
    let v47 : string = Fable.Core.JsInterop.emitJsExpr v0 v46 
    let v48 : US1 = US1_0(v47)
    let _v1 = v48 
    #endif
#if FABLE_COMPILER_PYTHON
    let v49 : US1 = null |> unbox<US1>
    let _v1 = v49 
    #endif
#else
    let v52 : (string -> System.IO.DirectoryInfo) = System.IO.Directory.GetParent
    let v53 : System.IO.DirectoryInfo = v52 v0
    let v54 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let v57 : bool = v53 = v54 
    let v84 : US1 =
        if v57 then
            US1_1
        else
            let v61 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v62 : string = null |> unbox<string>
            let _v61 = v62 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v65 : string = null |> unbox<string>
            let _v61 = v65 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v68 : string = null |> unbox<string>
            let _v61 = v68 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v71 : string = null |> unbox<string>
            let _v61 = v71 
            #endif
#if FABLE_COMPILER_PYTHON
            let v74 : string = null |> unbox<string>
            let _v61 = v74 
            #endif
#else
            let v77 : string = v53.FullName
            let _v61 = v77 
            #endif
            let v78 : string = _v61 
            US1_0(v78)
    let _v1 = v84 
    #endif
    let v85 : US1 = _v1 
    match v85 with
    | US1_1 -> (* None *)
        let v94 : string option = None
        v94
    | US1_0(v90) -> (* Some *)
        let v91 : string option = Some v90 
        v91
and closure5 () (v0 : string) : string option =
    method21(v0)
and method20 () : (string -> string option) =
    closure5()
and method22 (v0 : string, v1 : string, v2 : string) : US12 =
    let v3 : string = method15(v2, v0)
    let v4 : bool = method19(v3)
    if v4 then
        US12_0(v2)
    else
        let v6 : (string -> string option) = method20()
        let v7 : string option = v6 v2
        let v8 : US1 option = None
        let _v8 = ref v8 
        match v7 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v9 : string = x
        let v10 : US1 = US1_0(v9)
        v10 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v8.Value <- x
        let v11 : US1 option = _v8.Value 
        let v22 : US1 = US1_1
        let v23 : US1 = v11 |> Option.defaultValue v22 
        match v23 with
        | US1_1 -> (* None *)
            let v29 : string = $"""No parent for {if false then "file" else "dir"} '{v0}' at '{v1}' (until '{v2}')"""
            US12_1(v29)
        | US1_0(v27) -> (* Some *)
            method22(v0, v1, v27)
and method18 (v0 : string, v1 : string) : US12 =
    let v2 : string = method15(v1, v0)
    let v3 : bool = method19(v2)
    if v3 then
        US12_0(v1)
    else
        let v5 : (string -> string option) = method20()
        let v6 : string option = v5 v1
        let v7 : US1 option = None
        let _v7 = ref v7 
        match v6 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v8 : string = x
        let v9 : US1 = US1_0(v8)
        v9 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v7.Value <- x
        let v10 : US1 option = _v7.Value 
        let v21 : US1 = US1_1
        let v22 : US1 = v10 |> Option.defaultValue v21 
        match v22 with
        | US1_1 -> (* None *)
            let v28 : string = $"""No parent for {if false then "file" else "dir"} '{v0}' at '{v1}' (until '{v1}')"""
            US12_1(v28)
        | US1_0(v26) -> (* Some *)
            method22(v0, v1, v26)
and closure6 () () : string =
    let v0 : string = "file_system.get_workspace_root"
    v0
and method23 () : string =
    let v0 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1 : string = "std::env::current_dir()"
    let v2 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : string = "$0.unwrap()"
    let v4 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "$0.display()"
    let v6 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v8 
    let _v7 = v9 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v10 : string = "format!(\"{}\", $0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v10 
    let _v7 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v12 : string = "format!(\"{}\", $0)"
    let v13 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v12 
    let _v7 = v13 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v7 = v14 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _v7 = v17 
    #endif
#else
    let v20 : std_string_String = null |> unbox<std_string_String>
    let _v7 = v20 
    #endif
    let v23 : std_string_String = _v7 
    let v28 : string = "fable_library_rust::String_::fromString($0)"
    let v29 : string = Fable.Core.RustInterop.emitRustExpr v23 v28 
    let _v0 = v29 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v30 : string = null |> unbox<string>
    let _v0 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v33 : string = null |> unbox<string>
    let _v0 = v33 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v36 : string = null |> unbox<string>
    let _v0 = v36 
    #endif
#if FABLE_COMPILER_PYTHON
    let v39 : string = null |> unbox<string>
    let _v0 = v39 
    #endif
#else
    let v42 : (unit -> string) = System.IO.Directory.GetCurrentDirectory
    let v43 : string = v42 ()
    let _v0 = v43 
    #endif
    let v44 : string = _v0 
    v44
and method24 (v0 : string) : string =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "std::path::PathBuf::from($0)"
    let v7 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "$0.parent()"
    let v9 : Ref<std_path_Path> option = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "$0.unwrap()"
    let v11 : Ref<std_path_Path> = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "$0.display()"
    let v13 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v15 : string = "format!(\"{}\", $0)"
    let v16 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v15 
    let _v14 = v16 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : string = "format!(\"{}\", $0)"
    let v18 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v17 
    let _v14 = v18 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v19 : string = "format!(\"{}\", $0)"
    let v20 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v19 
    let _v14 = v20 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _v14 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : std_string_String = null |> unbox<std_string_String>
    let _v14 = v24 
    #endif
#else
    let v27 : std_string_String = null |> unbox<std_string_String>
    let _v14 = v27 
    #endif
    let v30 : std_string_String = _v14 
    let v35 : string = "fable_library_rust::String_::fromString($0)"
    let v36 : string = Fable.Core.RustInterop.emitRustExpr v30 v35 
    let _v1 = v36 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v37 : (string -> string) = System.IO.Path.GetDirectoryName
    let v38 : string = v37 v0
    let _v1 = v38 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v39 : string = null |> unbox<string>
    let _v1 = v39 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v42 : (string -> string) = System.IO.Path.GetDirectoryName
    let v43 : string = v42 v0
    let _v1 = v43 
    #endif
#if FABLE_COMPILER_PYTHON
    let v44 : (string -> string) = System.IO.Path.GetDirectoryName
    let v45 : string = v44 v0
    let _v1 = v45 
    #endif
#else
    let v46 : (string -> string) = System.IO.Path.GetDirectoryName
    let v47 : string = v46 v0
    let _v1 = v47 
    #endif
    let v48 : string = _v1 
    v48
and method27 (v0 : string) : bool =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "std::path::PathBuf::from($0)"
    let v7 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "$0.exists()"
    let v9 : bool = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v12 : bool =
        if v9 then
            let v10 : string = "$0.is_file()"
            let v11 : bool = Fable.Core.RustInterop.emitRustExpr v7 v10 
            v11
        else
            false
    let _v1 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : bool = null |> unbox<bool>
    let _v1 = v13 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : bool = null |> unbox<bool>
    let _v1 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : string = "fs"
    let v20 : IFsExistsSync = Fable.Core.JsInterop.importAll v19 
    let v21 : string = "$0.existsSync($1)"
    let v22 : bool = Fable.Core.JsInterop.emitJsExpr struct (v20, v0) v21 
    let _v1 = v22 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : bool = null |> unbox<bool>
    let _v1 = v23 
    #endif
#else
    let v26 : (string -> bool) = System.IO.File.Exists
    let v27 : bool = v26 v0
    let _v1 = v27 
    #endif
    let v28 : bool = _v1 
    v28
and method26 (v0 : string, v1 : string) : bool =
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : bool = method27(v0)
    let v4 : bool = v3 = false
    let v57 : bool =
        if v4 then
            false
        else
            let v5 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v6 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v7 : string = "std::fs::read(&*$0)"
            let v8 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v7 
            let v9 : string = "$0.unwrap()"
            let v10 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8 v9 
            let _v6 = v10 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v11 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _v6 = v11 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v14 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _v6 = v14 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v17 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _v6 = v17 
            #endif
#if FABLE_COMPILER_PYTHON
            let v20 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _v6 = v20 
            #endif
#else
            let v23 : (uint8 []) = v0 |> System.IO.File.ReadAllBytes
            let v24 : string = "$0.to_vec()"
            let v25 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v23 v24 
            let _v6 = v25 
            #endif
            let v26 : Vec<uint8> = _v6 
            let v31 : Vec<uint8> = method14(v26)
            let v32 : string = "std::string::String::from_utf8($0)"
            let v33 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v31 v32 
            let v34 : string = "$0.unwrap()"
            let v35 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v34 
            let v36 : string = "fable_library_rust::String_::fromString($0)"
            let v37 : string = Fable.Core.RustInterop.emitRustExpr v35 v36 
            let _v5 = v37 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v38 : string = null |> unbox<string>
            let _v5 = v38 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v41 : string = null |> unbox<string>
            let _v5 = v41 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v44 : string = null |> unbox<string>
            let _v5 = v44 
            #endif
#if FABLE_COMPILER_PYTHON
            let v47 : string = null |> unbox<string>
            let _v5 = v47 
            #endif
#else
            let v50 : string = v0 |> System.IO.File.ReadAllText
            let _v5 = v50 
            #endif
            let v51 : string = _v5 
            let v56 : bool = v1 = v51
            v56
    let _v2 = v57 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v58 : bool = null |> unbox<bool>
    let _v2 = v58 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v61 : bool = null |> unbox<bool>
    let _v2 = v61 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v64 : bool = null |> unbox<bool>
    let _v2 = v64 
    #endif
#if FABLE_COMPILER_PYTHON
    let v67 : bool = null |> unbox<bool>
    let _v2 = v67 
    #endif
#else
    let v70 : bool = null |> unbox<bool>
    let _v2 = v70 
    #endif
    let v73 : bool = _v2 
    v73
and method29 (v0 : string) : string =
    v0
and closure7 () (v0 : std_io_Error) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#else
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
    let v17 : std_string_String = _v1 
    v17
and method30 () : (std_io_Error -> std_string_String) =
    closure7()
and closure8 () () : US13 =
    US13_0
and closure9 () (v0 : std_string_String) : US13 =
    US13_1(v0)
and closure10 () () : string =
    let v0 : string = "file_system.create_dir"
    v0
and closure11 () () : string =
    let v0 : string = "file_system.create_dir"
    v0
and method33 (v0 : string) : string =
    v0
and method32 (v0 : bool, v1 : string) : unit =
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = method33(v1)
    let v4 : bool = method19(v3)
    if v4 then
        if v0 then
            let v5 : string = "std::fs::remove_dir_all(&*$0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr v3 v5 
            ()
        else
            let v6 : string = "std::fs::remove_dir(&*$0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr v3 v6 
            ()
    let _v2 = () 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let _v2 = () 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let _v2 = () 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _v2 = () 
    #endif
#if FABLE_COMPILER_PYTHON
    let _v2 = () 
    #endif
#else
    System.IO.Directory.Delete (v1, v0)
    let _v2 = () 
    #endif
    _v2 
    ()
and closure12 (v0 : string) () : unit =
    let v1 : bool = true
    method32(v1, v0)
and method31 (v0 : string) : (unit -> unit) =
    closure12(v0)
and method34 (v0 : string) : (unit -> unit) =
    closure12(v0)
and closure13 () () : string =
    let v0 : string = "file_system.create_dir"
    v0
and method37 (v0 : string) : string =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "std::path::PathBuf::from($0)"
    let v7 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "$0.file_name()"
    let v9 : Ref<std_ffi_OsStr> option = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "$0.unwrap()"
    let v11 : Ref<std_ffi_OsStr> = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "$0.to_os_string()"
    let v13 : std_ffi_OsString = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : string = "$0.to_str()"
    let v15 : Ref<Str> option = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : string = "$0.unwrap()"
    let v17 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v15 v16 
    let v18 : string = "String::from($0)"
    let v19 : std_string_String = Fable.Core.RustInterop.emitRustExpr v17 v18 
    let v20 : string = "fable_library_rust::String_::fromString($0)"
    let v21 : string = Fable.Core.RustInterop.emitRustExpr v19 v20 
    let _v1 = v21 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v22 : US10 = US10_1
    let v23 : US11 = US11_2(v22)
    let v24 : string = $"file_system.get_file_name / target: {v23} / path: {v0}"
    let v25 : string = failwith<string> v24
    let _v1 = v25 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v26 : string = null |> unbox<string>
    let _v1 = v26 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v29 : US10 = US10_0
    let v30 : US11 = US11_3(v29)
    let v31 : string = $"file_system.get_file_name / target: {v30} / path: {v0}"
    let v32 : string = failwith<string> v31
    let _v1 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v33 : US10 = US10_0
    let v34 : US11 = US11_4(v33)
    let v35 : string = $"file_system.get_file_name / target: {v34} / path: {v0}"
    let v36 : string = failwith<string> v35
    let _v1 = v36 
    #endif
#else
    let v37 : (string -> string) = System.IO.Path.GetFileName
    let v38 : string = v37 v0
    let _v1 = v38 
    #endif
    let v39 : string = _v1 
    v39
and closure15 () () : string =
    let v0 : string = "file_system.delete_directory_async"
    v0
and method36 (v0 : string, v1 : int64) : Async<int64> =
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : Async<int64> = null |> unbox<Async<int64>>
    let _v2 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : Async<int64> = null |> unbox<Async<int64>>
    let _v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v9 : Async<int64> = null |> unbox<Async<int64>>
    let _v2 = v9 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : Async<int64> = null |> unbox<Async<int64>>
    let _v2 = v12 
    #endif
#if FABLE_COMPILER_PYTHON
    let v15 : Async<int64> = null |> unbox<Async<int64>>
    let _v2 = v15 
    #endif
#else
    let v18 : Async<int64> option = None
    let mutable _v18 = v18 
    async {
    try
    let v19 : bool = true
    method32(v19, v0)
    return v1 
    with ex ->
    let v20 : exn = ex
    let v21 : int64 = v1 % 100L
    let v22 : bool = v21 = 0L
    if v22 then
        let v23 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v24 : string = $"%A{v20}"
        let _v23 = v24 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v27 : string = $"%A{v20}"
        let _v23 = v27 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v30 : string = $"%A{v20}"
        let _v23 = v30 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v33 : string = $"%A{v20}"
        let _v23 = v33 
        #endif
#if FABLE_COMPILER_PYTHON
        let v36 : string = $"%A{v20}"
        let _v23 = v36 
        #endif
#else
        let v39 : string = $"{v20.GetType ()}: {v20.Message}"
        let _v23 = v39 
        #endif
        let v40 : string = _v23 
        let v45 : bool = State.trace_state.IsNone
        if v45 then
            let v46 : US0 = US0_0
            let struct (v47 : Mut0, v48 : Mut1, v49 : Mut2, v50 : Mut3, v51 : int64 option) = method1(v46)
            let v52 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v47, v48, v49, v50, v51) 
            State.trace_state <- v52 
            ()
        let struct (v57 : Mut0, v58 : Mut1, v59 : Mut2, v60 : Mut3, v61 : int64 option) = State.trace_state.Value
        let v72 : bool = State.trace_state.IsNone
        if v72 then
            let v73 : US0 = US0_0
            let struct (v74 : Mut0, v75 : Mut1, v76 : Mut2, v77 : Mut3, v78 : int64 option) = method1(v73)
            let v79 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v74, v75, v76, v77, v78) 
            State.trace_state <- v79 
            ()
        let struct (v84 : Mut0, v85 : Mut1, v86 : Mut2, v87 : Mut3, v88 : int64 option) = State.trace_state.Value
        let v99 : US0 = v87.l0
        let v100 : bool = v86.l0
        let v101 : bool = v100 = false
        let v104 : bool =
            if v101 then
                false
            else
                let v102 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v99
                let v103 : bool = 1 >= v102
                v103
        if v104 then
            let v105 : int64 = v57.l0
            let v106 : int64 = v105 + 1L
            v57.l0 <- v106
            let v107 : bool = State.trace_state.IsNone
            if v107 then
                let v108 : US0 = US0_0
                let struct (v109 : Mut0, v110 : Mut1, v111 : Mut2, v112 : Mut3, v113 : int64 option) = method1(v108)
                let v114 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v109, v110, v111, v112, v113) 
                State.trace_state <- v114 
                ()
            let struct (v119 : Mut0, v120 : Mut1, v121 : Mut2, v122 : Mut3, v123 : int64 option) = State.trace_state.Value
            let v134 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v135 : US3 option = None
            let _v135 = ref v135 
            match v123 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v136 : int64 = x
            let v137 : US3 = US3_0(v136)
            v137 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v135.Value <- x
            let v138 : US3 option = _v135.Value 
            let v149 : US3 = US3_1
            let v150 : US3 = v138 |> Option.defaultValue v149 
            let v190 : System.DateTime =
                match v150 with
                | US3_1 -> (* None *)
                    let v186 : System.DateTime = System.DateTime.Now
                    v186
                | US3_0(v154) -> (* Some *)
                    let v155 : System.DateTime = System.DateTime.Now
                    let v158 : (System.DateTime -> int64) = _.Ticks
                    let v159 : int64 = v158 v155
                    let v162 : int64 = v159 - v154
                    let v163 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v164 : System.TimeSpan = v163 v162
                    let v167 : (System.TimeSpan -> int32) = _.Hours
                    let v168 : int32 = v167 v164
                    let v171 : (System.TimeSpan -> int32) = _.Minutes
                    let v172 : int32 = v171 v164
                    let v175 : (System.TimeSpan -> int32) = _.Seconds
                    let v176 : int32 = v175 v164
                    let v179 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v180 : int32 = v179 v164
                    let v183 : System.DateTime = System.DateTime (1, 1, 1, v168, v172, v176, v180)
                    v183
            let v191 : string = method6()
            let v194 : (string -> string) = v190.ToString
            let v195 : string = v194 v191
            let _v134 = v195 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v198 : US3 option = None
            let _v198 = ref v198 
            match v123 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v199 : int64 = x
            let v200 : US3 = US3_0(v199)
            v200 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v198.Value <- x
            let v201 : US3 option = _v198.Value 
            let v212 : US3 = US3_1
            let v213 : US3 = v201 |> Option.defaultValue v212 
            let v253 : System.DateTime =
                match v213 with
                | US3_1 -> (* None *)
                    let v249 : System.DateTime = System.DateTime.Now
                    v249
                | US3_0(v217) -> (* Some *)
                    let v218 : System.DateTime = System.DateTime.Now
                    let v221 : (System.DateTime -> int64) = _.Ticks
                    let v222 : int64 = v221 v218
                    let v225 : int64 = v222 - v217
                    let v226 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v227 : System.TimeSpan = v226 v225
                    let v230 : (System.TimeSpan -> int32) = _.Hours
                    let v231 : int32 = v230 v227
                    let v234 : (System.TimeSpan -> int32) = _.Minutes
                    let v235 : int32 = v234 v227
                    let v238 : (System.TimeSpan -> int32) = _.Seconds
                    let v239 : int32 = v238 v227
                    let v242 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v243 : int32 = v242 v227
                    let v246 : System.DateTime = System.DateTime (1, 1, 1, v231, v235, v239, v243)
                    v246
            let v254 : string = method6()
            let v257 : (string -> string) = v253.ToString
            let v258 : string = v257 v254
            let _v134 = v258 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v261 : string = $"near_sdk::env::block_timestamp()"
            let v262 : uint64 = Fable.Core.RustInterop.emitRustExpr () v261 
            let v263 : US3 option = None
            let _v263 = ref v263 
            match v123 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v264 : int64 = x
            let v265 : US3 = US3_0(v264)
            v265 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v263.Value <- x
            let v266 : US3 option = _v263.Value 
            let v277 : US3 = US3_1
            let v278 : US3 = v266 |> Option.defaultValue v277 
            let v287 : uint64 =
                match v278 with
                | US3_1 -> (* None *)
                    v262
                | US3_0(v282) -> (* Some *)
                    let v283 : (int64 -> uint64) = uint64
                    let v284 : uint64 = v283 v282
                    let v285 : uint64 = v262 - v284
                    v285
            let v288 : uint64 = v287 / 1000000000UL
            let v289 : uint64 = v288 % 60UL
            let v290 : uint64 = v288 / 60UL
            let v291 : uint64 = v290 % 60UL
            let v292 : uint64 = v288 / 3600UL
            let v293 : uint64 = v292 % 24UL
            let v294 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
            let v295 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v293, v291, v289) v294 
            let v296 : string = "fable_library_rust::String_::fromString($0)"
            let v297 : string = Fable.Core.RustInterop.emitRustExpr v295 v296 
            let _v134 = v297 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v298 : US3 option = None
            let _v298 = ref v298 
            match v123 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v299 : int64 = x
            let v300 : US3 = US3_0(v299)
            v300 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v298.Value <- x
            let v301 : US3 option = _v298.Value 
            let v312 : US3 = US3_1
            let v313 : US3 = v301 |> Option.defaultValue v312 
            let v353 : System.DateTime =
                match v313 with
                | US3_1 -> (* None *)
                    let v349 : System.DateTime = System.DateTime.Now
                    v349
                | US3_0(v317) -> (* Some *)
                    let v318 : System.DateTime = System.DateTime.Now
                    let v321 : (System.DateTime -> int64) = _.Ticks
                    let v322 : int64 = v321 v318
                    let v325 : int64 = v322 - v317
                    let v326 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v327 : System.TimeSpan = v326 v325
                    let v330 : (System.TimeSpan -> int32) = _.Hours
                    let v331 : int32 = v330 v327
                    let v334 : (System.TimeSpan -> int32) = _.Minutes
                    let v335 : int32 = v334 v327
                    let v338 : (System.TimeSpan -> int32) = _.Seconds
                    let v339 : int32 = v338 v327
                    let v342 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v343 : int32 = v342 v327
                    let v346 : System.DateTime = System.DateTime (1, 1, 1, v331, v335, v339, v343)
                    v346
            let v354 : string = method7()
            let v357 : (string -> string) = v353.ToString
            let v358 : string = v357 v354
            let _v134 = v358 
            #endif
#if FABLE_COMPILER_PYTHON
            let v361 : US3 option = None
            let _v361 = ref v361 
            match v123 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v362 : int64 = x
            let v363 : US3 = US3_0(v362)
            v363 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v361.Value <- x
            let v364 : US3 option = _v361.Value 
            let v375 : US3 = US3_1
            let v376 : US3 = v364 |> Option.defaultValue v375 
            let v416 : System.DateTime =
                match v376 with
                | US3_1 -> (* None *)
                    let v412 : System.DateTime = System.DateTime.Now
                    v412
                | US3_0(v380) -> (* Some *)
                    let v381 : System.DateTime = System.DateTime.Now
                    let v384 : (System.DateTime -> int64) = _.Ticks
                    let v385 : int64 = v384 v381
                    let v388 : int64 = v385 - v380
                    let v389 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v390 : System.TimeSpan = v389 v388
                    let v393 : (System.TimeSpan -> int32) = _.Hours
                    let v394 : int32 = v393 v390
                    let v397 : (System.TimeSpan -> int32) = _.Minutes
                    let v398 : int32 = v397 v390
                    let v401 : (System.TimeSpan -> int32) = _.Seconds
                    let v402 : int32 = v401 v390
                    let v405 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v406 : int32 = v405 v390
                    let v409 : System.DateTime = System.DateTime (1, 1, 1, v394, v398, v402, v406)
                    v409
            let v417 : string = method7()
            let v420 : (string -> string) = v416.ToString
            let v421 : string = v420 v417
            let _v134 = v421 
            #endif
#else
            let v424 : US3 option = None
            let _v424 = ref v424 
            match v123 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v425 : int64 = x
            let v426 : US3 = US3_0(v425)
            v426 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v424.Value <- x
            let v427 : US3 option = _v424.Value 
            let v438 : US3 = US3_1
            let v439 : US3 = v427 |> Option.defaultValue v438 
            let v479 : System.DateTime =
                match v439 with
                | US3_1 -> (* None *)
                    let v475 : System.DateTime = System.DateTime.Now
                    v475
                | US3_0(v443) -> (* Some *)
                    let v444 : System.DateTime = System.DateTime.Now
                    let v447 : (System.DateTime -> int64) = _.Ticks
                    let v448 : int64 = v447 v444
                    let v451 : int64 = v448 - v443
                    let v452 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v453 : System.TimeSpan = v452 v451
                    let v456 : (System.TimeSpan -> int32) = _.Hours
                    let v457 : int32 = v456 v453
                    let v460 : (System.TimeSpan -> int32) = _.Minutes
                    let v461 : int32 = v460 v453
                    let v464 : (System.TimeSpan -> int32) = _.Seconds
                    let v465 : int32 = v464 v453
                    let v468 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v469 : int32 = v468 v453
                    let v472 : System.DateTime = System.DateTime (1, 1, 1, v457, v461, v465, v469)
                    v472
            let v480 : string = method7()
            let v483 : (string -> string) = v479.ToString
            let v484 : string = v483 v480
            let _v134 = v484 
            #endif
            let v487 : string = _v134 
            let v552 : string = "Debug"
            let v553 : (unit -> string) = v552.ToLower
            let v554 : string = v553 ()
            let v557 : string = v554.PadLeft (7, ' ')
            let v571 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v572 : string = "inline_colorization::color_bright_blue"
            let v573 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v572 
            let v574 : string = "&*$0"
            let v575 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v557 v574 
            let v576 : string = "inline_colorization::color_reset"
            let v577 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v576 
            let v578 : string = "\"{v573}{v575}{v577}\""
            let v579 : string = @$"format!(" + v578 + ")"
            let v580 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v579 
            let v581 : string = "fable_library_rust::String_::fromString($0)"
            let v582 : string = Fable.Core.RustInterop.emitRustExpr v580 v581 
            let _v571 = v582 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v583 : string = "inline_colorization::color_bright_blue"
            let v584 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v583 
            let v585 : string = "&*$0"
            let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v557 v585 
            let v587 : string = "inline_colorization::color_reset"
            let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
            let v589 : string = "\"{v584}{v586}{v588}\""
            let v590 : string = @$"format!(" + v589 + ")"
            let v591 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v590 
            let v592 : string = "fable_library_rust::String_::fromString($0)"
            let v593 : string = Fable.Core.RustInterop.emitRustExpr v591 v592 
            let _v571 = v593 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v594 : string = "inline_colorization::color_bright_blue"
            let v595 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v594 
            let v596 : string = "&*$0"
            let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v557 v596 
            let v598 : string = "inline_colorization::color_reset"
            let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
            let v600 : string = "\"{v595}{v597}{v599}\""
            let v601 : string = @$"format!(" + v600 + ")"
            let v602 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v601 
            let v603 : string = "fable_library_rust::String_::fromString($0)"
            let v604 : string = Fable.Core.RustInterop.emitRustExpr v602 v603 
            let _v571 = v604 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v605 : string = "\u001b[94m"
            let v606 : string = method8()
            let v607 : string = v605 + v557 
            let v608 : string = v607 + v606 
            let _v571 = v608 
            #endif
#if FABLE_COMPILER_PYTHON
            let v609 : string = "\u001b[94m"
            let v610 : string = method8()
            let v611 : string = v609 + v557 
            let v612 : string = v611 + v610 
            let _v571 = v612 
            #endif
#else
            let v613 : string = "\u001b[94m"
            let v614 : string = method8()
            let v615 : string = v613 + v557 
            let v616 : string = v615 + v614 
            let _v571 = v616 
            #endif
            let v617 : string = _v571 
            let v623 : int64 = v119.l0
            let v624 : string = method37(v0)
            let v625 : string = method9()
            let v626 : Mut4 = {l0 = v625} : Mut4
            let v627 : string = "{ "
            let v628 : string = $"{v627}"
            let v631 : string = v626.l0
            let v632 : string = v631 + v628 
            v626.l0 <- v632
            let v633 : string = "ex"
            let v634 : string = $"{v633}"
            let v637 : string = v626.l0
            let v638 : string = v637 + v634 
            v626.l0 <- v638
            let v639 : string = " = "
            let v640 : string = $"{v639}"
            let v643 : string = v626.l0
            let v644 : string = v643 + v640 
            v626.l0 <- v644
            let v645 : string = $"{v40}"
            let v648 : string = v626.l0
            let v649 : string = v648 + v645 
            v626.l0 <- v649
            let v650 : string = "; "
            let v651 : string = $"{v650}"
            let v654 : string = v626.l0
            let v655 : string = v654 + v651 
            v626.l0 <- v655
            let v656 : string = "path"
            let v657 : string = $"{v656}"
            let v660 : string = v626.l0
            let v661 : string = v660 + v657 
            v626.l0 <- v661
            let v662 : string = $"{v639}"
            let v665 : string = v626.l0
            let v666 : string = v665 + v662 
            v626.l0 <- v666
            let v667 : string = $"{v624}"
            let v670 : string = v626.l0
            let v671 : string = v670 + v667 
            v626.l0 <- v671
            let v672 : string = " }"
            let v673 : string = $"{v672}"
            let v676 : string = v626.l0
            let v677 : string = v676 + v673 
            v626.l0 <- v677
            let v678 : string = v626.l0
            let v679 : (unit -> string) = closure15()
            let v680 : string = $"{v487} {v617} #{v623} %s{v679 ()} / {v678}"
            let v683 : char list = []
            let v684 : (char list -> (char [])) = List.toArray
            let v685 : (char []) = v684 v683
            let v688 : string = v680.TrimStart v685 
            let v706 : char list = []
            let v707 : char list = '/' :: v706 
            let v710 : char list = ' ' :: v707 
            let v713 : (char list -> (char [])) = List.toArray
            let v714 : (char []) = v713 v710
            let v717 : string = v688.TrimEnd v714 
            let v735 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v736 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v717 v736 
            let _v735 = () 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v737 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v717 v737 
            let _v735 = () 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v738 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v717 v738 
            let _v735 = () 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            System.Console.WriteLine v717 
            let _v735 = () 
            #endif
#if FABLE_COMPILER_PYTHON
            System.Console.WriteLine v717 
            let _v735 = () 
            #endif
#else
            System.Console.WriteLine v717 
            let _v735 = () 
            #endif
            _v735 
            let v739 : (string -> unit) = v58.l0
            v739 v717
    let v740 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v741 : Async<unit> = null |> unbox<Async<unit>>
    let _v740 = v741 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v744 : Async<unit> = null |> unbox<Async<unit>>
    let _v740 = v744 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v747 : Async<unit> = null |> unbox<Async<unit>>
    let _v740 = v747 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v750 : Async<unit> = null |> unbox<Async<unit>>
    let _v740 = v750 
    #endif
#if FABLE_COMPILER_PYTHON
    let v753 : Async<unit> = null |> unbox<Async<unit>>
    let _v740 = v753 
    #endif
#else
    let v756 : (int32 -> Async<unit>) = Async.Sleep
    let v757 : Async<unit> = v756 10
    let _v740 = v757 
    #endif
    let v758 : Async<unit> = _v740 
    do! v758 
    let v763 : int64 = v1 + 1L
    let v764 : Async<int64> = method36(v0, v763)
    return! v764 
    (*
    let v765 : int64 = *)
    }
    |> fun x -> _v18 <- Some x
    let v766 : Async<int64> = match _v18 with Some x -> x | None -> failwith "async.new_async_unit / _v18=None"
    let _v2 = v766 
    #endif
    let v767 : Async<int64> = _v2 
    v767
and closure14 (v0 : string) () : unit =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : Async<int64> = null |> unbox<Async<int64>>
    let _v1 = v2 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : Async<int64> = null |> unbox<Async<int64>>
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : Async<int64> = null |> unbox<Async<int64>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v11 : Async<int64> = null |> unbox<Async<int64>>
    let _v1 = v11 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : Async<int64> = null |> unbox<Async<int64>>
    let _v1 = v14 
    #endif
#else
    let v17 : int64 = 0L
    let v18 : Async<int64> = method36(v0, v17)
    let _v1 = v18 
    #endif
    let v19 : Async<int64> = _v1 
    let v24 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v25 : Async<unit> = null |> unbox<Async<unit>>
    let _v24 = v25 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : Async<unit> = null |> unbox<Async<unit>>
    let _v24 = v28 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : Async<unit> = null |> unbox<Async<unit>>
    let _v24 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v34 : Async<unit> = null |> unbox<Async<unit>>
    let _v24 = v34 
    #endif
#if FABLE_COMPILER_PYTHON
    let v37 : Async<unit> = null |> unbox<Async<unit>>
    let _v24 = v37 
    #endif
#else
    let v40 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v41 : Async<unit> = v40 v19
    let _v24 = v41 
    #endif
    let v42 : Async<unit> = _v24 
    let v47 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    let _v47 = () 
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    let _v47 = () 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    let _v47 = () 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    null |> unbox<unit>
    let _v47 = () 
    #endif
#if FABLE_COMPILER_PYTHON
    null |> unbox<unit>
    let _v47 = () 
    #endif
#else
    let v48 : (Async<unit> -> unit) = Async.RunSynchronously
    v48 v42
    let _v47 = () 
    #endif
    _v47 
    ()
and method35 (v0 : string) : (unit -> unit) =
    closure14(v0)
and method38 (v0 : string) : (unit -> unit) =
    closure14(v0)
and method28 (v0 : string) : System.IDisposable =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = method29(v0)
    let v3 : string = "std::fs::create_dir_all(&*$0)"
    let v4 : Result<unit, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : (std_io_Error -> std_string_String) = method30()
    let v6 : string = "$0.map_err(|x| $1(x))"
    let v7 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v4, v5) v6 
    let v8 : (unit -> US13) = closure8()
    let v9 : (std_string_String -> US13) = closure9()
    let v10 : US13 = match v7 with Ok () -> v8 () | Error x -> v9 x
    match v10 with
    | US13_1(v683) -> (* Error *)
        let v684 : bool = State.trace_state.IsNone
        if v684 then
            let v685 : US0 = US0_0
            let struct (v686 : Mut0, v687 : Mut1, v688 : Mut2, v689 : Mut3, v690 : int64 option) = method1(v685)
            let v691 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v686, v687, v688, v689, v690) 
            State.trace_state <- v691 
            ()
        let struct (v696 : Mut0, v697 : Mut1, v698 : Mut2, v699 : Mut3, v700 : int64 option) = State.trace_state.Value
        let v711 : bool = State.trace_state.IsNone
        if v711 then
            let v712 : US0 = US0_0
            let struct (v713 : Mut0, v714 : Mut1, v715 : Mut2, v716 : Mut3, v717 : int64 option) = method1(v712)
            let v718 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v713, v714, v715, v716, v717) 
            State.trace_state <- v718 
            ()
        let struct (v723 : Mut0, v724 : Mut1, v725 : Mut2, v726 : Mut3, v727 : int64 option) = State.trace_state.Value
        let v738 : US0 = v726.l0
        let v739 : bool = v725.l0
        let v740 : bool = v739 = false
        let v743 : bool =
            if v740 then
                false
            else
                let v741 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v738
                let v742 : bool = 4 >= v741
                v742
        if v743 then
            let v744 : int64 = v696.l0
            let v745 : int64 = v744 + 1L
            v696.l0 <- v745
            let v746 : bool = State.trace_state.IsNone
            if v746 then
                let v747 : US0 = US0_0
                let struct (v748 : Mut0, v749 : Mut1, v750 : Mut2, v751 : Mut3, v752 : int64 option) = method1(v747)
                let v753 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v748, v749, v750, v751, v752) 
                State.trace_state <- v753 
                ()
            let struct (v758 : Mut0, v759 : Mut1, v760 : Mut2, v761 : Mut3, v762 : int64 option) = State.trace_state.Value
            let v773 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v774 : US3 option = None
            let _v774 = ref v774 
            match v762 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v775 : int64 = x
            let v776 : US3 = US3_0(v775)
            v776 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v774.Value <- x
            let v777 : US3 option = _v774.Value 
            let v788 : US3 = US3_1
            let v789 : US3 = v777 |> Option.defaultValue v788 
            let v829 : System.DateTime =
                match v789 with
                | US3_1 -> (* None *)
                    let v825 : System.DateTime = System.DateTime.Now
                    v825
                | US3_0(v793) -> (* Some *)
                    let v794 : System.DateTime = System.DateTime.Now
                    let v797 : (System.DateTime -> int64) = _.Ticks
                    let v798 : int64 = v797 v794
                    let v801 : int64 = v798 - v793
                    let v802 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v803 : System.TimeSpan = v802 v801
                    let v806 : (System.TimeSpan -> int32) = _.Hours
                    let v807 : int32 = v806 v803
                    let v810 : (System.TimeSpan -> int32) = _.Minutes
                    let v811 : int32 = v810 v803
                    let v814 : (System.TimeSpan -> int32) = _.Seconds
                    let v815 : int32 = v814 v803
                    let v818 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v819 : int32 = v818 v803
                    let v822 : System.DateTime = System.DateTime (1, 1, 1, v807, v811, v815, v819)
                    v822
            let v830 : string = method6()
            let v833 : (string -> string) = v829.ToString
            let v834 : string = v833 v830
            let _v773 = v834 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v837 : US3 option = None
            let _v837 = ref v837 
            match v762 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v838 : int64 = x
            let v839 : US3 = US3_0(v838)
            v839 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v837.Value <- x
            let v840 : US3 option = _v837.Value 
            let v851 : US3 = US3_1
            let v852 : US3 = v840 |> Option.defaultValue v851 
            let v892 : System.DateTime =
                match v852 with
                | US3_1 -> (* None *)
                    let v888 : System.DateTime = System.DateTime.Now
                    v888
                | US3_0(v856) -> (* Some *)
                    let v857 : System.DateTime = System.DateTime.Now
                    let v860 : (System.DateTime -> int64) = _.Ticks
                    let v861 : int64 = v860 v857
                    let v864 : int64 = v861 - v856
                    let v865 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v866 : System.TimeSpan = v865 v864
                    let v869 : (System.TimeSpan -> int32) = _.Hours
                    let v870 : int32 = v869 v866
                    let v873 : (System.TimeSpan -> int32) = _.Minutes
                    let v874 : int32 = v873 v866
                    let v877 : (System.TimeSpan -> int32) = _.Seconds
                    let v878 : int32 = v877 v866
                    let v881 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v882 : int32 = v881 v866
                    let v885 : System.DateTime = System.DateTime (1, 1, 1, v870, v874, v878, v882)
                    v885
            let v893 : string = method6()
            let v896 : (string -> string) = v892.ToString
            let v897 : string = v896 v893
            let _v773 = v897 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v900 : string = $"near_sdk::env::block_timestamp()"
            let v901 : uint64 = Fable.Core.RustInterop.emitRustExpr () v900 
            let v902 : US3 option = None
            let _v902 = ref v902 
            match v762 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v903 : int64 = x
            let v904 : US3 = US3_0(v903)
            v904 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v902.Value <- x
            let v905 : US3 option = _v902.Value 
            let v916 : US3 = US3_1
            let v917 : US3 = v905 |> Option.defaultValue v916 
            let v926 : uint64 =
                match v917 with
                | US3_1 -> (* None *)
                    v901
                | US3_0(v921) -> (* Some *)
                    let v922 : (int64 -> uint64) = uint64
                    let v923 : uint64 = v922 v921
                    let v924 : uint64 = v901 - v923
                    v924
            let v927 : uint64 = v926 / 1000000000UL
            let v928 : uint64 = v927 % 60UL
            let v929 : uint64 = v927 / 60UL
            let v930 : uint64 = v929 % 60UL
            let v931 : uint64 = v927 / 3600UL
            let v932 : uint64 = v931 % 24UL
            let v933 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
            let v934 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v932, v930, v928) v933 
            let v935 : string = "fable_library_rust::String_::fromString($0)"
            let v936 : string = Fable.Core.RustInterop.emitRustExpr v934 v935 
            let _v773 = v936 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v937 : US3 option = None
            let _v937 = ref v937 
            match v762 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v938 : int64 = x
            let v939 : US3 = US3_0(v938)
            v939 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v937.Value <- x
            let v940 : US3 option = _v937.Value 
            let v951 : US3 = US3_1
            let v952 : US3 = v940 |> Option.defaultValue v951 
            let v992 : System.DateTime =
                match v952 with
                | US3_1 -> (* None *)
                    let v988 : System.DateTime = System.DateTime.Now
                    v988
                | US3_0(v956) -> (* Some *)
                    let v957 : System.DateTime = System.DateTime.Now
                    let v960 : (System.DateTime -> int64) = _.Ticks
                    let v961 : int64 = v960 v957
                    let v964 : int64 = v961 - v956
                    let v965 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v966 : System.TimeSpan = v965 v964
                    let v969 : (System.TimeSpan -> int32) = _.Hours
                    let v970 : int32 = v969 v966
                    let v973 : (System.TimeSpan -> int32) = _.Minutes
                    let v974 : int32 = v973 v966
                    let v977 : (System.TimeSpan -> int32) = _.Seconds
                    let v978 : int32 = v977 v966
                    let v981 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v982 : int32 = v981 v966
                    let v985 : System.DateTime = System.DateTime (1, 1, 1, v970, v974, v978, v982)
                    v985
            let v993 : string = method7()
            let v996 : (string -> string) = v992.ToString
            let v997 : string = v996 v993
            let _v773 = v997 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1000 : US3 option = None
            let _v1000 = ref v1000 
            match v762 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v1001 : int64 = x
            let v1002 : US3 = US3_0(v1001)
            v1002 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v1000.Value <- x
            let v1003 : US3 option = _v1000.Value 
            let v1014 : US3 = US3_1
            let v1015 : US3 = v1003 |> Option.defaultValue v1014 
            let v1055 : System.DateTime =
                match v1015 with
                | US3_1 -> (* None *)
                    let v1051 : System.DateTime = System.DateTime.Now
                    v1051
                | US3_0(v1019) -> (* Some *)
                    let v1020 : System.DateTime = System.DateTime.Now
                    let v1023 : (System.DateTime -> int64) = _.Ticks
                    let v1024 : int64 = v1023 v1020
                    let v1027 : int64 = v1024 - v1019
                    let v1028 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v1029 : System.TimeSpan = v1028 v1027
                    let v1032 : (System.TimeSpan -> int32) = _.Hours
                    let v1033 : int32 = v1032 v1029
                    let v1036 : (System.TimeSpan -> int32) = _.Minutes
                    let v1037 : int32 = v1036 v1029
                    let v1040 : (System.TimeSpan -> int32) = _.Seconds
                    let v1041 : int32 = v1040 v1029
                    let v1044 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v1045 : int32 = v1044 v1029
                    let v1048 : System.DateTime = System.DateTime (1, 1, 1, v1033, v1037, v1041, v1045)
                    v1048
            let v1056 : string = method7()
            let v1059 : (string -> string) = v1055.ToString
            let v1060 : string = v1059 v1056
            let _v773 = v1060 
            #endif
#else
            let v1063 : US3 option = None
            let _v1063 = ref v1063 
            match v762 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v1064 : int64 = x
            let v1065 : US3 = US3_0(v1064)
            v1065 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v1063.Value <- x
            let v1066 : US3 option = _v1063.Value 
            let v1077 : US3 = US3_1
            let v1078 : US3 = v1066 |> Option.defaultValue v1077 
            let v1118 : System.DateTime =
                match v1078 with
                | US3_1 -> (* None *)
                    let v1114 : System.DateTime = System.DateTime.Now
                    v1114
                | US3_0(v1082) -> (* Some *)
                    let v1083 : System.DateTime = System.DateTime.Now
                    let v1086 : (System.DateTime -> int64) = _.Ticks
                    let v1087 : int64 = v1086 v1083
                    let v1090 : int64 = v1087 - v1082
                    let v1091 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v1092 : System.TimeSpan = v1091 v1090
                    let v1095 : (System.TimeSpan -> int32) = _.Hours
                    let v1096 : int32 = v1095 v1092
                    let v1099 : (System.TimeSpan -> int32) = _.Minutes
                    let v1100 : int32 = v1099 v1092
                    let v1103 : (System.TimeSpan -> int32) = _.Seconds
                    let v1104 : int32 = v1103 v1092
                    let v1107 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v1108 : int32 = v1107 v1092
                    let v1111 : System.DateTime = System.DateTime (1, 1, 1, v1096, v1100, v1104, v1108)
                    v1111
            let v1119 : string = method7()
            let v1122 : (string -> string) = v1118.ToString
            let v1123 : string = v1122 v1119
            let _v773 = v1123 
            #endif
            let v1126 : string = _v773 
            let v1191 : string = "Critical"
            let v1192 : (unit -> string) = v1191.ToLower
            let v1193 : string = v1192 ()
            let v1196 : string = v1193.PadLeft (7, ' ')
            let v1210 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1211 : string = "inline_colorization::color_bright_red"
            let v1212 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1211 
            let v1213 : string = "&*$0"
            let v1214 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1196 v1213 
            let v1215 : string = "inline_colorization::color_reset"
            let v1216 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1215 
            let v1217 : string = "\"{v1212}{v1214}{v1216}\""
            let v1218 : string = @$"format!(" + v1217 + ")"
            let v1219 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1218 
            let v1220 : string = "fable_library_rust::String_::fromString($0)"
            let v1221 : string = Fable.Core.RustInterop.emitRustExpr v1219 v1220 
            let _v1210 = v1221 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1222 : string = "inline_colorization::color_bright_red"
            let v1223 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1222 
            let v1224 : string = "&*$0"
            let v1225 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1196 v1224 
            let v1226 : string = "inline_colorization::color_reset"
            let v1227 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1226 
            let v1228 : string = "\"{v1223}{v1225}{v1227}\""
            let v1229 : string = @$"format!(" + v1228 + ")"
            let v1230 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1229 
            let v1231 : string = "fable_library_rust::String_::fromString($0)"
            let v1232 : string = Fable.Core.RustInterop.emitRustExpr v1230 v1231 
            let _v1210 = v1232 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1233 : string = "inline_colorization::color_bright_red"
            let v1234 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1233 
            let v1235 : string = "&*$0"
            let v1236 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1196 v1235 
            let v1237 : string = "inline_colorization::color_reset"
            let v1238 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1237 
            let v1239 : string = "\"{v1234}{v1236}{v1238}\""
            let v1240 : string = @$"format!(" + v1239 + ")"
            let v1241 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1240 
            let v1242 : string = "fable_library_rust::String_::fromString($0)"
            let v1243 : string = Fable.Core.RustInterop.emitRustExpr v1241 v1242 
            let _v1210 = v1243 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1244 : string = "\u001b[91m"
            let v1245 : string = method8()
            let v1246 : string = v1244 + v1196 
            let v1247 : string = v1246 + v1245 
            let _v1210 = v1247 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1248 : string = "\u001b[91m"
            let v1249 : string = method8()
            let v1250 : string = v1248 + v1196 
            let v1251 : string = v1250 + v1249 
            let _v1210 = v1251 
            #endif
#else
            let v1252 : string = "\u001b[91m"
            let v1253 : string = method8()
            let v1254 : string = v1252 + v1196 
            let v1255 : string = v1254 + v1253 
            let _v1210 = v1255 
            #endif
            let v1256 : string = _v1210 
            let v1262 : int64 = v758.l0
            let v1263 : string = method9()
            let v1264 : Mut4 = {l0 = v1263} : Mut4
            let v1265 : string = "{ "
            let v1266 : string = $"{v1265}"
            let v1269 : string = v1264.l0
            let v1270 : string = v1269 + v1266 
            v1264.l0 <- v1270
            let v1271 : string = "dir"
            let v1272 : string = $"{v1271}"
            let v1275 : string = v1264.l0
            let v1276 : string = v1275 + v1272 
            v1264.l0 <- v1276
            let v1277 : string = " = "
            let v1278 : string = $"{v1277}"
            let v1281 : string = v1264.l0
            let v1282 : string = v1281 + v1278 
            v1264.l0 <- v1282
            let v1283 : string = $"{v2}"
            let v1286 : string = v1264.l0
            let v1287 : string = v1286 + v1283 
            v1264.l0 <- v1287
            let v1288 : string = "; "
            let v1289 : string = $"{v1288}"
            let v1292 : string = v1264.l0
            let v1293 : string = v1292 + v1289 
            v1264.l0 <- v1293
            let v1294 : string = "error"
            let v1295 : string = $"{v1294}"
            let v1298 : string = v1264.l0
            let v1299 : string = v1298 + v1295 
            v1264.l0 <- v1299
            let v1300 : string = $"{v1277}"
            let v1303 : string = v1264.l0
            let v1304 : string = v1303 + v1300 
            v1264.l0 <- v1304
            let v1305 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1306 : string = "format!(\"{:#?}\", $0)"
            let v1307 : std_string_String = Fable.Core.RustInterop.emitRustExpr v683 v1306 
            let v1308 : string = "fable_library_rust::String_::fromString($0)"
            let v1309 : string = Fable.Core.RustInterop.emitRustExpr v1307 v1308 
            let _v1305 = v1309 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1310 : string = "format!(\"{:#?}\", $0)"
            let v1311 : std_string_String = Fable.Core.RustInterop.emitRustExpr v683 v1310 
            let v1312 : string = "fable_library_rust::String_::fromString($0)"
            let v1313 : string = Fable.Core.RustInterop.emitRustExpr v1311 v1312 
            let _v1305 = v1313 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1314 : string = "format!(\"{:#?}\", $0)"
            let v1315 : std_string_String = Fable.Core.RustInterop.emitRustExpr v683 v1314 
            let v1316 : string = "fable_library_rust::String_::fromString($0)"
            let v1317 : string = Fable.Core.RustInterop.emitRustExpr v1315 v1316 
            let _v1305 = v1317 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1318 : string = $"%A{v683}"
            let _v1305 = v1318 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1321 : string = $"%A{v683}"
            let _v1305 = v1321 
            #endif
#else
            let v1324 : string = $"%A{v683}"
            let _v1305 = v1324 
            #endif
            let v1327 : string = _v1305 
            let v1332 : string = $"{v1327}"
            let v1335 : string = v1264.l0
            let v1336 : string = v1335 + v1332 
            v1264.l0 <- v1336
            let v1337 : string = " }"
            let v1338 : string = $"{v1337}"
            let v1341 : string = v1264.l0
            let v1342 : string = v1341 + v1338 
            v1264.l0 <- v1342
            let v1343 : string = v1264.l0
            let v1344 : (unit -> string) = closure10()
            let v1345 : string = $"{v1126} {v1256} #{v1262} %s{v1344 ()} / {v1343}"
            let v1348 : char list = []
            let v1349 : (char list -> (char [])) = List.toArray
            let v1350 : (char []) = v1349 v1348
            let v1353 : string = v1345.TrimStart v1350 
            let v1371 : char list = []
            let v1372 : char list = '/' :: v1371 
            let v1375 : char list = ' ' :: v1372 
            let v1378 : (char list -> (char [])) = List.toArray
            let v1379 : (char []) = v1378 v1375
            let v1382 : string = v1353.TrimEnd v1379 
            let v1400 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1401 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v1382 v1401 
            let _v1400 = () 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1402 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v1382 v1402 
            let _v1400 = () 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1403 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v1382 v1403 
            let _v1400 = () 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            System.Console.WriteLine v1382 
            let _v1400 = () 
            #endif
#if FABLE_COMPILER_PYTHON
            System.Console.WriteLine v1382 
            let _v1400 = () 
            #endif
#else
            System.Console.WriteLine v1382 
            let _v1400 = () 
            #endif
            _v1400 
            let v1404 : (string -> unit) = v697.l0
            v1404 v1382
    | US13_0 -> (* Ok *)
        let v11 : bool = State.trace_state.IsNone
        if v11 then
            let v12 : US0 = US0_0
            let struct (v13 : Mut0, v14 : Mut1, v15 : Mut2, v16 : Mut3, v17 : int64 option) = method1(v12)
            let v18 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v13, v14, v15, v16, v17) 
            State.trace_state <- v18 
            ()
        let struct (v23 : Mut0, v24 : Mut1, v25 : Mut2, v26 : Mut3, v27 : int64 option) = State.trace_state.Value
        let v38 : bool = State.trace_state.IsNone
        if v38 then
            let v39 : US0 = US0_0
            let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : int64 option) = method1(v39)
            let v45 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v40, v41, v42, v43, v44) 
            State.trace_state <- v45 
            ()
        let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : int64 option) = State.trace_state.Value
        let v65 : US0 = v53.l0
        let v66 : bool = v52.l0
        let v67 : bool = v66 = false
        let v70 : bool =
            if v67 then
                false
            else
                let v68 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v65
                let v69 : bool = 0 >= v68
                v69
        if v70 then
            let v71 : int64 = v23.l0
            let v72 : int64 = v71 + 1L
            v23.l0 <- v72
            let v73 : bool = State.trace_state.IsNone
            if v73 then
                let v74 : US0 = US0_0
                let struct (v75 : Mut0, v76 : Mut1, v77 : Mut2, v78 : Mut3, v79 : int64 option) = method1(v74)
                let v80 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v75, v76, v77, v78, v79) 
                State.trace_state <- v80 
                ()
            let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = State.trace_state.Value
            let v100 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v101 : US3 option = None
            let _v101 = ref v101 
            match v89 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v102 : int64 = x
            let v103 : US3 = US3_0(v102)
            v103 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v101.Value <- x
            let v104 : US3 option = _v101.Value 
            let v115 : US3 = US3_1
            let v116 : US3 = v104 |> Option.defaultValue v115 
            let v156 : System.DateTime =
                match v116 with
                | US3_1 -> (* None *)
                    let v152 : System.DateTime = System.DateTime.Now
                    v152
                | US3_0(v120) -> (* Some *)
                    let v121 : System.DateTime = System.DateTime.Now
                    let v124 : (System.DateTime -> int64) = _.Ticks
                    let v125 : int64 = v124 v121
                    let v128 : int64 = v125 - v120
                    let v129 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v130 : System.TimeSpan = v129 v128
                    let v133 : (System.TimeSpan -> int32) = _.Hours
                    let v134 : int32 = v133 v130
                    let v137 : (System.TimeSpan -> int32) = _.Minutes
                    let v138 : int32 = v137 v130
                    let v141 : (System.TimeSpan -> int32) = _.Seconds
                    let v142 : int32 = v141 v130
                    let v145 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v146 : int32 = v145 v130
                    let v149 : System.DateTime = System.DateTime (1, 1, 1, v134, v138, v142, v146)
                    v149
            let v157 : string = method6()
            let v160 : (string -> string) = v156.ToString
            let v161 : string = v160 v157
            let _v100 = v161 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v164 : US3 option = None
            let _v164 = ref v164 
            match v89 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v165 : int64 = x
            let v166 : US3 = US3_0(v165)
            v166 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v164.Value <- x
            let v167 : US3 option = _v164.Value 
            let v178 : US3 = US3_1
            let v179 : US3 = v167 |> Option.defaultValue v178 
            let v219 : System.DateTime =
                match v179 with
                | US3_1 -> (* None *)
                    let v215 : System.DateTime = System.DateTime.Now
                    v215
                | US3_0(v183) -> (* Some *)
                    let v184 : System.DateTime = System.DateTime.Now
                    let v187 : (System.DateTime -> int64) = _.Ticks
                    let v188 : int64 = v187 v184
                    let v191 : int64 = v188 - v183
                    let v192 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v193 : System.TimeSpan = v192 v191
                    let v196 : (System.TimeSpan -> int32) = _.Hours
                    let v197 : int32 = v196 v193
                    let v200 : (System.TimeSpan -> int32) = _.Minutes
                    let v201 : int32 = v200 v193
                    let v204 : (System.TimeSpan -> int32) = _.Seconds
                    let v205 : int32 = v204 v193
                    let v208 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v209 : int32 = v208 v193
                    let v212 : System.DateTime = System.DateTime (1, 1, 1, v197, v201, v205, v209)
                    v212
            let v220 : string = method6()
            let v223 : (string -> string) = v219.ToString
            let v224 : string = v223 v220
            let _v100 = v224 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v227 : string = $"near_sdk::env::block_timestamp()"
            let v228 : uint64 = Fable.Core.RustInterop.emitRustExpr () v227 
            let v229 : US3 option = None
            let _v229 = ref v229 
            match v89 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v230 : int64 = x
            let v231 : US3 = US3_0(v230)
            v231 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v229.Value <- x
            let v232 : US3 option = _v229.Value 
            let v243 : US3 = US3_1
            let v244 : US3 = v232 |> Option.defaultValue v243 
            let v253 : uint64 =
                match v244 with
                | US3_1 -> (* None *)
                    v228
                | US3_0(v248) -> (* Some *)
                    let v249 : (int64 -> uint64) = uint64
                    let v250 : uint64 = v249 v248
                    let v251 : uint64 = v228 - v250
                    v251
            let v254 : uint64 = v253 / 1000000000UL
            let v255 : uint64 = v254 % 60UL
            let v256 : uint64 = v254 / 60UL
            let v257 : uint64 = v256 % 60UL
            let v258 : uint64 = v254 / 3600UL
            let v259 : uint64 = v258 % 24UL
            let v260 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
            let v261 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v259, v257, v255) v260 
            let v262 : string = "fable_library_rust::String_::fromString($0)"
            let v263 : string = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let _v100 = v263 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v264 : US3 option = None
            let _v264 = ref v264 
            match v89 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v265 : int64 = x
            let v266 : US3 = US3_0(v265)
            v266 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v264.Value <- x
            let v267 : US3 option = _v264.Value 
            let v278 : US3 = US3_1
            let v279 : US3 = v267 |> Option.defaultValue v278 
            let v319 : System.DateTime =
                match v279 with
                | US3_1 -> (* None *)
                    let v315 : System.DateTime = System.DateTime.Now
                    v315
                | US3_0(v283) -> (* Some *)
                    let v284 : System.DateTime = System.DateTime.Now
                    let v287 : (System.DateTime -> int64) = _.Ticks
                    let v288 : int64 = v287 v284
                    let v291 : int64 = v288 - v283
                    let v292 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v293 : System.TimeSpan = v292 v291
                    let v296 : (System.TimeSpan -> int32) = _.Hours
                    let v297 : int32 = v296 v293
                    let v300 : (System.TimeSpan -> int32) = _.Minutes
                    let v301 : int32 = v300 v293
                    let v304 : (System.TimeSpan -> int32) = _.Seconds
                    let v305 : int32 = v304 v293
                    let v308 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v309 : int32 = v308 v293
                    let v312 : System.DateTime = System.DateTime (1, 1, 1, v297, v301, v305, v309)
                    v312
            let v320 : string = method7()
            let v323 : (string -> string) = v319.ToString
            let v324 : string = v323 v320
            let _v100 = v324 
            #endif
#if FABLE_COMPILER_PYTHON
            let v327 : US3 option = None
            let _v327 = ref v327 
            match v89 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v328 : int64 = x
            let v329 : US3 = US3_0(v328)
            v329 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v327.Value <- x
            let v330 : US3 option = _v327.Value 
            let v341 : US3 = US3_1
            let v342 : US3 = v330 |> Option.defaultValue v341 
            let v382 : System.DateTime =
                match v342 with
                | US3_1 -> (* None *)
                    let v378 : System.DateTime = System.DateTime.Now
                    v378
                | US3_0(v346) -> (* Some *)
                    let v347 : System.DateTime = System.DateTime.Now
                    let v350 : (System.DateTime -> int64) = _.Ticks
                    let v351 : int64 = v350 v347
                    let v354 : int64 = v351 - v346
                    let v355 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v356 : System.TimeSpan = v355 v354
                    let v359 : (System.TimeSpan -> int32) = _.Hours
                    let v360 : int32 = v359 v356
                    let v363 : (System.TimeSpan -> int32) = _.Minutes
                    let v364 : int32 = v363 v356
                    let v367 : (System.TimeSpan -> int32) = _.Seconds
                    let v368 : int32 = v367 v356
                    let v371 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v372 : int32 = v371 v356
                    let v375 : System.DateTime = System.DateTime (1, 1, 1, v360, v364, v368, v372)
                    v375
            let v383 : string = method7()
            let v386 : (string -> string) = v382.ToString
            let v387 : string = v386 v383
            let _v100 = v387 
            #endif
#else
            let v390 : US3 option = None
            let _v390 = ref v390 
            match v89 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v391 : int64 = x
            let v392 : US3 = US3_0(v391)
            v392 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v390.Value <- x
            let v393 : US3 option = _v390.Value 
            let v404 : US3 = US3_1
            let v405 : US3 = v393 |> Option.defaultValue v404 
            let v445 : System.DateTime =
                match v405 with
                | US3_1 -> (* None *)
                    let v441 : System.DateTime = System.DateTime.Now
                    v441
                | US3_0(v409) -> (* Some *)
                    let v410 : System.DateTime = System.DateTime.Now
                    let v413 : (System.DateTime -> int64) = _.Ticks
                    let v414 : int64 = v413 v410
                    let v417 : int64 = v414 - v409
                    let v418 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v419 : System.TimeSpan = v418 v417
                    let v422 : (System.TimeSpan -> int32) = _.Hours
                    let v423 : int32 = v422 v419
                    let v426 : (System.TimeSpan -> int32) = _.Minutes
                    let v427 : int32 = v426 v419
                    let v430 : (System.TimeSpan -> int32) = _.Seconds
                    let v431 : int32 = v430 v419
                    let v434 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v435 : int32 = v434 v419
                    let v438 : System.DateTime = System.DateTime (1, 1, 1, v423, v427, v431, v435)
                    v438
            let v446 : string = method7()
            let v449 : (string -> string) = v445.ToString
            let v450 : string = v449 v446
            let _v100 = v450 
            #endif
            let v453 : string = _v100 
            let v518 : string = "Verbose"
            let v519 : (unit -> string) = v518.ToLower
            let v520 : string = v519 ()
            let v523 : string = v520.PadLeft (7, ' ')
            let v537 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v538 : string = "inline_colorization::color_bright_black"
            let v539 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v538 
            let v540 : string = "&*$0"
            let v541 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v523 v540 
            let v542 : string = "inline_colorization::color_reset"
            let v543 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v542 
            let v544 : string = "\"{v539}{v541}{v543}\""
            let v545 : string = @$"format!(" + v544 + ")"
            let v546 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v545 
            let v547 : string = "fable_library_rust::String_::fromString($0)"
            let v548 : string = Fable.Core.RustInterop.emitRustExpr v546 v547 
            let _v537 = v548 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v549 : string = "inline_colorization::color_bright_black"
            let v550 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v549 
            let v551 : string = "&*$0"
            let v552 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v523 v551 
            let v553 : string = "inline_colorization::color_reset"
            let v554 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v553 
            let v555 : string = "\"{v550}{v552}{v554}\""
            let v556 : string = @$"format!(" + v555 + ")"
            let v557 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v556 
            let v558 : string = "fable_library_rust::String_::fromString($0)"
            let v559 : string = Fable.Core.RustInterop.emitRustExpr v557 v558 
            let _v537 = v559 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v560 : string = "inline_colorization::color_bright_black"
            let v561 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v560 
            let v562 : string = "&*$0"
            let v563 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v523 v562 
            let v564 : string = "inline_colorization::color_reset"
            let v565 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v564 
            let v566 : string = "\"{v561}{v563}{v565}\""
            let v567 : string = @$"format!(" + v566 + ")"
            let v568 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v567 
            let v569 : string = "fable_library_rust::String_::fromString($0)"
            let v570 : string = Fable.Core.RustInterop.emitRustExpr v568 v569 
            let _v537 = v570 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v571 : string = "\u001b[90m"
            let v572 : string = method8()
            let v573 : string = v571 + v523 
            let v574 : string = v573 + v572 
            let _v537 = v574 
            #endif
#if FABLE_COMPILER_PYTHON
            let v575 : string = "\u001b[90m"
            let v576 : string = method8()
            let v577 : string = v575 + v523 
            let v578 : string = v577 + v576 
            let _v537 = v578 
            #endif
#else
            let v579 : string = "\u001b[90m"
            let v580 : string = method8()
            let v581 : string = v579 + v523 
            let v582 : string = v581 + v580 
            let _v537 = v582 
            #endif
            let v583 : string = _v537 
            let v589 : int64 = v85.l0
            let v590 : string = method9()
            let v591 : Mut4 = {l0 = v590} : Mut4
            let v592 : string = "{ "
            let v593 : string = $"{v592}"
            let v596 : string = v591.l0
            let v597 : string = v596 + v593 
            v591.l0 <- v597
            let v598 : string = "dir"
            let v599 : string = $"{v598}"
            let v602 : string = v591.l0
            let v603 : string = v602 + v599 
            v591.l0 <- v603
            let v604 : string = " = "
            let v605 : string = $"{v604}"
            let v608 : string = v591.l0
            let v609 : string = v608 + v605 
            v591.l0 <- v609
            let v610 : string = $"{v2}"
            let v613 : string = v591.l0
            let v614 : string = v613 + v610 
            v591.l0 <- v614
            let v615 : string = " }"
            let v616 : string = $"{v615}"
            let v619 : string = v591.l0
            let v620 : string = v619 + v616 
            v591.l0 <- v620
            let v621 : string = v591.l0
            let v622 : (unit -> string) = closure11()
            let v623 : string = $"{v453} {v583} #{v589} %s{v622 ()} / {v621}"
            let v626 : char list = []
            let v627 : (char list -> (char [])) = List.toArray
            let v628 : (char []) = v627 v626
            let v631 : string = v623.TrimStart v628 
            let v649 : char list = []
            let v650 : char list = '/' :: v649 
            let v653 : char list = ' ' :: v650 
            let v656 : (char list -> (char [])) = List.toArray
            let v657 : (char []) = v656 v653
            let v660 : string = v631.TrimEnd v657 
            let v678 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v679 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v660 v679 
            let _v678 = () 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v680 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v660 v680 
            let _v678 = () 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v681 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v660 v681 
            let _v678 = () 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            System.Console.WriteLine v660 
            let _v678 = () 
            #endif
#if FABLE_COMPILER_PYTHON
            System.Console.WriteLine v660 
            let _v678 = () 
            #endif
#else
            System.Console.WriteLine v660 
            let _v678 = () 
            #endif
            _v678 
            let v682 : (string -> unit) = v24.l0
            v682 v660
    let v1405 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1406 : (unit -> unit) = method31(v2)
    let v1407 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v1406 "$0()" )
    let _v1405 = v1407 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1408 : (unit -> unit) = method31(v2)
    let v1409 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v1408 "$0()" )
    let _v1405 = v1409 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1410 : (unit -> unit) = method31(v2)
    let v1411 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v1410 "$0()" )
    let _v1405 = v1411 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1412 : (unit -> unit) = method34(v2)
    let v1413 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v1412 () }
    let _v1405 = v1413 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1414 : (unit -> unit) = method34(v2)
    let v1415 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v1414 () }
    let _v1405 = v1415 
    #endif
#else
    let v1416 : (unit -> unit) = method34(v2)
    let v1417 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v1416 () }
    let _v1405 = v1417 
    #endif
    let v1418 : System.IDisposable = _v1405 
    let _v1 = v1418 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1422 : System.IDisposable = null |> unbox<System.IDisposable>
    let _v1 = v1422 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1425 : System.IDisposable = null |> unbox<System.IDisposable>
    let _v1 = v1425 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1428 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1429 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v1428 = v1429 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1432 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v1428 = v1432 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1435 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v1428 = v1435 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1438 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v1428 = v1438 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1441 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v1428 = v1441 
    #endif
#else
    let v1444 : (string -> System.IO.DirectoryInfo) = System.IO.Directory.CreateDirectory
    let v1445 : System.IO.DirectoryInfo = v1444 v0
    let _v1428 = v1445 
    #endif
    let v1446 : System.IO.DirectoryInfo = _v1428 
    let v1451 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1452 : bool = null |> unbox<bool>
    let _v1451 = v1452 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1455 : bool = null |> unbox<bool>
    let _v1451 = v1455 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1458 : bool = null |> unbox<bool>
    let _v1451 = v1458 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1461 : bool = null |> unbox<bool>
    let _v1451 = v1461 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1464 : bool = null |> unbox<bool>
    let _v1451 = v1464 
    #endif
#else
    let v1467 : bool = v1446.Exists
    let _v1451 = v1467 
    #endif
    let v1468 : bool = _v1451 
    let v1473 : bool = v1468 = false
    if v1473 then
        let v1474 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1475 : System.DateTime = null |> unbox<System.DateTime>
        let _v1474 = v1475 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1478 : System.DateTime = null |> unbox<System.DateTime>
        let _v1474 = v1478 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1481 : System.DateTime = null |> unbox<System.DateTime>
        let _v1474 = v1481 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v1484 : System.DateTime = null |> unbox<System.DateTime>
        let _v1474 = v1484 
        #endif
#if FABLE_COMPILER_PYTHON
        let v1487 : System.DateTime = null |> unbox<System.DateTime>
        let _v1474 = v1487 
        #endif
#else
        let v1490 : System.DateTime = v1446.CreationTime
        let _v1474 = v1490 
        #endif
        let v1491 : System.DateTime = _v1474 
        let v1496 : obj = {| Exists = v1468; CreationTime = v1491 |}
        let v1497 : string = $"%A{v1496}"
        let v1500 : bool = State.trace_state.IsNone
        if v1500 then
            let v1501 : US0 = US0_0
            let struct (v1502 : Mut0, v1503 : Mut1, v1504 : Mut2, v1505 : Mut3, v1506 : int64 option) = method1(v1501)
            let v1507 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v1502, v1503, v1504, v1505, v1506) 
            State.trace_state <- v1507 
            ()
        let struct (v1512 : Mut0, v1513 : Mut1, v1514 : Mut2, v1515 : Mut3, v1516 : int64 option) = State.trace_state.Value
        let v1527 : bool = State.trace_state.IsNone
        if v1527 then
            let v1528 : US0 = US0_0
            let struct (v1529 : Mut0, v1530 : Mut1, v1531 : Mut2, v1532 : Mut3, v1533 : int64 option) = method1(v1528)
            let v1534 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v1529, v1530, v1531, v1532, v1533) 
            State.trace_state <- v1534 
            ()
        let struct (v1539 : Mut0, v1540 : Mut1, v1541 : Mut2, v1542 : Mut3, v1543 : int64 option) = State.trace_state.Value
        let v1554 : US0 = v1542.l0
        let v1555 : bool = v1541.l0
        let v1556 : bool = v1555 = false
        let v1559 : bool =
            if v1556 then
                false
            else
                let v1557 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v1554
                let v1558 : bool = 1 >= v1557
                v1558
        if v1559 then
            let v1560 : int64 = v1512.l0
            let v1561 : int64 = v1560 + 1L
            v1512.l0 <- v1561
            let v1562 : bool = State.trace_state.IsNone
            if v1562 then
                let v1563 : US0 = US0_0
                let struct (v1564 : Mut0, v1565 : Mut1, v1566 : Mut2, v1567 : Mut3, v1568 : int64 option) = method1(v1563)
                let v1569 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v1564, v1565, v1566, v1567, v1568) 
                State.trace_state <- v1569 
                ()
            let struct (v1574 : Mut0, v1575 : Mut1, v1576 : Mut2, v1577 : Mut3, v1578 : int64 option) = State.trace_state.Value
            let v1589 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1590 : US3 option = None
            let _v1590 = ref v1590 
            match v1578 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v1591 : int64 = x
            let v1592 : US3 = US3_0(v1591)
            v1592 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v1590.Value <- x
            let v1593 : US3 option = _v1590.Value 
            let v1604 : US3 = US3_1
            let v1605 : US3 = v1593 |> Option.defaultValue v1604 
            let v1645 : System.DateTime =
                match v1605 with
                | US3_1 -> (* None *)
                    let v1641 : System.DateTime = System.DateTime.Now
                    v1641
                | US3_0(v1609) -> (* Some *)
                    let v1610 : System.DateTime = System.DateTime.Now
                    let v1613 : (System.DateTime -> int64) = _.Ticks
                    let v1614 : int64 = v1613 v1610
                    let v1617 : int64 = v1614 - v1609
                    let v1618 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v1619 : System.TimeSpan = v1618 v1617
                    let v1622 : (System.TimeSpan -> int32) = _.Hours
                    let v1623 : int32 = v1622 v1619
                    let v1626 : (System.TimeSpan -> int32) = _.Minutes
                    let v1627 : int32 = v1626 v1619
                    let v1630 : (System.TimeSpan -> int32) = _.Seconds
                    let v1631 : int32 = v1630 v1619
                    let v1634 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v1635 : int32 = v1634 v1619
                    let v1638 : System.DateTime = System.DateTime (1, 1, 1, v1623, v1627, v1631, v1635)
                    v1638
            let v1646 : string = method6()
            let v1649 : (string -> string) = v1645.ToString
            let v1650 : string = v1649 v1646
            let _v1589 = v1650 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1653 : US3 option = None
            let _v1653 = ref v1653 
            match v1578 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v1654 : int64 = x
            let v1655 : US3 = US3_0(v1654)
            v1655 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v1653.Value <- x
            let v1656 : US3 option = _v1653.Value 
            let v1667 : US3 = US3_1
            let v1668 : US3 = v1656 |> Option.defaultValue v1667 
            let v1708 : System.DateTime =
                match v1668 with
                | US3_1 -> (* None *)
                    let v1704 : System.DateTime = System.DateTime.Now
                    v1704
                | US3_0(v1672) -> (* Some *)
                    let v1673 : System.DateTime = System.DateTime.Now
                    let v1676 : (System.DateTime -> int64) = _.Ticks
                    let v1677 : int64 = v1676 v1673
                    let v1680 : int64 = v1677 - v1672
                    let v1681 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v1682 : System.TimeSpan = v1681 v1680
                    let v1685 : (System.TimeSpan -> int32) = _.Hours
                    let v1686 : int32 = v1685 v1682
                    let v1689 : (System.TimeSpan -> int32) = _.Minutes
                    let v1690 : int32 = v1689 v1682
                    let v1693 : (System.TimeSpan -> int32) = _.Seconds
                    let v1694 : int32 = v1693 v1682
                    let v1697 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v1698 : int32 = v1697 v1682
                    let v1701 : System.DateTime = System.DateTime (1, 1, 1, v1686, v1690, v1694, v1698)
                    v1701
            let v1709 : string = method6()
            let v1712 : (string -> string) = v1708.ToString
            let v1713 : string = v1712 v1709
            let _v1589 = v1713 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1716 : string = $"near_sdk::env::block_timestamp()"
            let v1717 : uint64 = Fable.Core.RustInterop.emitRustExpr () v1716 
            let v1718 : US3 option = None
            let _v1718 = ref v1718 
            match v1578 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v1719 : int64 = x
            let v1720 : US3 = US3_0(v1719)
            v1720 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v1718.Value <- x
            let v1721 : US3 option = _v1718.Value 
            let v1732 : US3 = US3_1
            let v1733 : US3 = v1721 |> Option.defaultValue v1732 
            let v1742 : uint64 =
                match v1733 with
                | US3_1 -> (* None *)
                    v1717
                | US3_0(v1737) -> (* Some *)
                    let v1738 : (int64 -> uint64) = uint64
                    let v1739 : uint64 = v1738 v1737
                    let v1740 : uint64 = v1717 - v1739
                    v1740
            let v1743 : uint64 = v1742 / 1000000000UL
            let v1744 : uint64 = v1743 % 60UL
            let v1745 : uint64 = v1743 / 60UL
            let v1746 : uint64 = v1745 % 60UL
            let v1747 : uint64 = v1743 / 3600UL
            let v1748 : uint64 = v1747 % 24UL
            let v1749 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
            let v1750 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v1748, v1746, v1744) v1749 
            let v1751 : string = "fable_library_rust::String_::fromString($0)"
            let v1752 : string = Fable.Core.RustInterop.emitRustExpr v1750 v1751 
            let _v1589 = v1752 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1753 : US3 option = None
            let _v1753 = ref v1753 
            match v1578 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v1754 : int64 = x
            let v1755 : US3 = US3_0(v1754)
            v1755 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v1753.Value <- x
            let v1756 : US3 option = _v1753.Value 
            let v1767 : US3 = US3_1
            let v1768 : US3 = v1756 |> Option.defaultValue v1767 
            let v1808 : System.DateTime =
                match v1768 with
                | US3_1 -> (* None *)
                    let v1804 : System.DateTime = System.DateTime.Now
                    v1804
                | US3_0(v1772) -> (* Some *)
                    let v1773 : System.DateTime = System.DateTime.Now
                    let v1776 : (System.DateTime -> int64) = _.Ticks
                    let v1777 : int64 = v1776 v1773
                    let v1780 : int64 = v1777 - v1772
                    let v1781 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v1782 : System.TimeSpan = v1781 v1780
                    let v1785 : (System.TimeSpan -> int32) = _.Hours
                    let v1786 : int32 = v1785 v1782
                    let v1789 : (System.TimeSpan -> int32) = _.Minutes
                    let v1790 : int32 = v1789 v1782
                    let v1793 : (System.TimeSpan -> int32) = _.Seconds
                    let v1794 : int32 = v1793 v1782
                    let v1797 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v1798 : int32 = v1797 v1782
                    let v1801 : System.DateTime = System.DateTime (1, 1, 1, v1786, v1790, v1794, v1798)
                    v1801
            let v1809 : string = method7()
            let v1812 : (string -> string) = v1808.ToString
            let v1813 : string = v1812 v1809
            let _v1589 = v1813 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1816 : US3 option = None
            let _v1816 = ref v1816 
            match v1578 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v1817 : int64 = x
            let v1818 : US3 = US3_0(v1817)
            v1818 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v1816.Value <- x
            let v1819 : US3 option = _v1816.Value 
            let v1830 : US3 = US3_1
            let v1831 : US3 = v1819 |> Option.defaultValue v1830 
            let v1871 : System.DateTime =
                match v1831 with
                | US3_1 -> (* None *)
                    let v1867 : System.DateTime = System.DateTime.Now
                    v1867
                | US3_0(v1835) -> (* Some *)
                    let v1836 : System.DateTime = System.DateTime.Now
                    let v1839 : (System.DateTime -> int64) = _.Ticks
                    let v1840 : int64 = v1839 v1836
                    let v1843 : int64 = v1840 - v1835
                    let v1844 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v1845 : System.TimeSpan = v1844 v1843
                    let v1848 : (System.TimeSpan -> int32) = _.Hours
                    let v1849 : int32 = v1848 v1845
                    let v1852 : (System.TimeSpan -> int32) = _.Minutes
                    let v1853 : int32 = v1852 v1845
                    let v1856 : (System.TimeSpan -> int32) = _.Seconds
                    let v1857 : int32 = v1856 v1845
                    let v1860 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v1861 : int32 = v1860 v1845
                    let v1864 : System.DateTime = System.DateTime (1, 1, 1, v1849, v1853, v1857, v1861)
                    v1864
            let v1872 : string = method7()
            let v1875 : (string -> string) = v1871.ToString
            let v1876 : string = v1875 v1872
            let _v1589 = v1876 
            #endif
#else
            let v1879 : US3 option = None
            let _v1879 = ref v1879 
            match v1578 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v1880 : int64 = x
            let v1881 : US3 = US3_0(v1880)
            v1881 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v1879.Value <- x
            let v1882 : US3 option = _v1879.Value 
            let v1893 : US3 = US3_1
            let v1894 : US3 = v1882 |> Option.defaultValue v1893 
            let v1934 : System.DateTime =
                match v1894 with
                | US3_1 -> (* None *)
                    let v1930 : System.DateTime = System.DateTime.Now
                    v1930
                | US3_0(v1898) -> (* Some *)
                    let v1899 : System.DateTime = System.DateTime.Now
                    let v1902 : (System.DateTime -> int64) = _.Ticks
                    let v1903 : int64 = v1902 v1899
                    let v1906 : int64 = v1903 - v1898
                    let v1907 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v1908 : System.TimeSpan = v1907 v1906
                    let v1911 : (System.TimeSpan -> int32) = _.Hours
                    let v1912 : int32 = v1911 v1908
                    let v1915 : (System.TimeSpan -> int32) = _.Minutes
                    let v1916 : int32 = v1915 v1908
                    let v1919 : (System.TimeSpan -> int32) = _.Seconds
                    let v1920 : int32 = v1919 v1908
                    let v1923 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v1924 : int32 = v1923 v1908
                    let v1927 : System.DateTime = System.DateTime (1, 1, 1, v1912, v1916, v1920, v1924)
                    v1927
            let v1935 : string = method7()
            let v1938 : (string -> string) = v1934.ToString
            let v1939 : string = v1938 v1935
            let _v1589 = v1939 
            #endif
            let v1942 : string = _v1589 
            let v2007 : string = "Debug"
            let v2008 : (unit -> string) = v2007.ToLower
            let v2009 : string = v2008 ()
            let v2012 : string = v2009.PadLeft (7, ' ')
            let v2026 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v2027 : string = "inline_colorization::color_bright_blue"
            let v2028 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v2027 
            let v2029 : string = "&*$0"
            let v2030 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2012 v2029 
            let v2031 : string = "inline_colorization::color_reset"
            let v2032 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v2031 
            let v2033 : string = "\"{v2028}{v2030}{v2032}\""
            let v2034 : string = @$"format!(" + v2033 + ")"
            let v2035 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v2034 
            let v2036 : string = "fable_library_rust::String_::fromString($0)"
            let v2037 : string = Fable.Core.RustInterop.emitRustExpr v2035 v2036 
            let _v2026 = v2037 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v2038 : string = "inline_colorization::color_bright_blue"
            let v2039 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v2038 
            let v2040 : string = "&*$0"
            let v2041 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2012 v2040 
            let v2042 : string = "inline_colorization::color_reset"
            let v2043 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v2042 
            let v2044 : string = "\"{v2039}{v2041}{v2043}\""
            let v2045 : string = @$"format!(" + v2044 + ")"
            let v2046 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v2045 
            let v2047 : string = "fable_library_rust::String_::fromString($0)"
            let v2048 : string = Fable.Core.RustInterop.emitRustExpr v2046 v2047 
            let _v2026 = v2048 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v2049 : string = "inline_colorization::color_bright_blue"
            let v2050 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v2049 
            let v2051 : string = "&*$0"
            let v2052 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2012 v2051 
            let v2053 : string = "inline_colorization::color_reset"
            let v2054 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v2053 
            let v2055 : string = "\"{v2050}{v2052}{v2054}\""
            let v2056 : string = @$"format!(" + v2055 + ")"
            let v2057 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v2056 
            let v2058 : string = "fable_library_rust::String_::fromString($0)"
            let v2059 : string = Fable.Core.RustInterop.emitRustExpr v2057 v2058 
            let _v2026 = v2059 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v2060 : string = "\u001b[94m"
            let v2061 : string = method8()
            let v2062 : string = v2060 + v2012 
            let v2063 : string = v2062 + v2061 
            let _v2026 = v2063 
            #endif
#if FABLE_COMPILER_PYTHON
            let v2064 : string = "\u001b[94m"
            let v2065 : string = method8()
            let v2066 : string = v2064 + v2012 
            let v2067 : string = v2066 + v2065 
            let _v2026 = v2067 
            #endif
#else
            let v2068 : string = "\u001b[94m"
            let v2069 : string = method8()
            let v2070 : string = v2068 + v2012 
            let v2071 : string = v2070 + v2069 
            let _v2026 = v2071 
            #endif
            let v2072 : string = _v2026 
            let v2078 : int64 = v1574.l0
            let v2079 : string = method9()
            let v2080 : Mut4 = {l0 = v2079} : Mut4
            let v2081 : string = "{ "
            let v2082 : string = $"{v2081}"
            let v2085 : string = v2080.l0
            let v2086 : string = v2085 + v2082 
            v2080.l0 <- v2086
            let v2087 : string = "dir"
            let v2088 : string = $"{v2087}"
            let v2091 : string = v2080.l0
            let v2092 : string = v2091 + v2088 
            v2080.l0 <- v2092
            let v2093 : string = " = "
            let v2094 : string = $"{v2093}"
            let v2097 : string = v2080.l0
            let v2098 : string = v2097 + v2094 
            v2080.l0 <- v2098
            let v2099 : string = $"{v0}"
            let v2102 : string = v2080.l0
            let v2103 : string = v2102 + v2099 
            v2080.l0 <- v2103
            let v2104 : string = "; "
            let v2105 : string = $"{v2104}"
            let v2108 : string = v2080.l0
            let v2109 : string = v2108 + v2105 
            v2080.l0 <- v2109
            let v2110 : string = "result"
            let v2111 : string = $"{v2110}"
            let v2114 : string = v2080.l0
            let v2115 : string = v2114 + v2111 
            v2080.l0 <- v2115
            let v2116 : string = $"{v2093}"
            let v2119 : string = v2080.l0
            let v2120 : string = v2119 + v2116 
            v2080.l0 <- v2120
            let v2121 : string = $"{v1497}"
            let v2124 : string = v2080.l0
            let v2125 : string = v2124 + v2121 
            v2080.l0 <- v2125
            let v2126 : string = " }"
            let v2127 : string = $"{v2126}"
            let v2130 : string = v2080.l0
            let v2131 : string = v2130 + v2127 
            v2080.l0 <- v2131
            let v2132 : string = v2080.l0
            let v2133 : (unit -> string) = closure13()
            let v2134 : string = $"{v1942} {v2072} #{v2078} %s{v2133 ()} / {v2132}"
            let v2137 : char list = []
            let v2138 : (char list -> (char [])) = List.toArray
            let v2139 : (char []) = v2138 v2137
            let v2142 : string = v2134.TrimStart v2139 
            let v2160 : char list = []
            let v2161 : char list = '/' :: v2160 
            let v2164 : char list = ' ' :: v2161 
            let v2167 : (char list -> (char [])) = List.toArray
            let v2168 : (char []) = v2167 v2164
            let v2171 : string = v2142.TrimEnd v2168 
            let v2189 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v2190 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v2171 v2190 
            let _v2189 = () 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v2191 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v2171 v2191 
            let _v2189 = () 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v2192 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v2171 v2192 
            let _v2189 = () 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            System.Console.WriteLine v2171 
            let _v2189 = () 
            #endif
#if FABLE_COMPILER_PYTHON
            System.Console.WriteLine v2171 
            let _v2189 = () 
            #endif
#else
            System.Console.WriteLine v2171 
            let _v2189 = () 
            #endif
            _v2189 
            let v2193 : (string -> unit) = v1513.l0
            v2193 v2171
    let v2194 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2195 : (unit -> unit) = method35(v0)
    let v2196 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v2195 "$0()" )
    let _v2194 = v2196 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2197 : (unit -> unit) = method35(v0)
    let v2198 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v2197 "$0()" )
    let _v2194 = v2198 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2199 : (unit -> unit) = method35(v0)
    let v2200 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v2199 "$0()" )
    let _v2194 = v2200 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2201 : (unit -> unit) = method38(v0)
    let v2202 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v2201 () }
    let _v2194 = v2202 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2203 : (unit -> unit) = method38(v0)
    let v2204 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v2203 () }
    let _v2194 = v2204 
    #endif
#else
    let v2205 : (unit -> unit) = method38(v0)
    let v2206 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v2205 () }
    let _v2194 = v2206 
    #endif
    let v2207 : System.IDisposable = _v2194 
    let _v1 = v2207 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2211 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2212 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v2211 = v2212 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2215 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v2211 = v2215 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2218 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v2211 = v2218 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2221 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v2211 = v2221 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2224 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v2211 = v2224 
    #endif
#else
    let v2227 : (string -> System.IO.DirectoryInfo) = System.IO.Directory.CreateDirectory
    let v2228 : System.IO.DirectoryInfo = v2227 v0
    let _v2211 = v2228 
    #endif
    let v2229 : System.IO.DirectoryInfo = _v2211 
    let v2234 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2235 : bool = null |> unbox<bool>
    let _v2234 = v2235 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2238 : bool = null |> unbox<bool>
    let _v2234 = v2238 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2241 : bool = null |> unbox<bool>
    let _v2234 = v2241 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2244 : bool = null |> unbox<bool>
    let _v2234 = v2244 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2247 : bool = null |> unbox<bool>
    let _v2234 = v2247 
    #endif
#else
    let v2250 : bool = v2229.Exists
    let _v2234 = v2250 
    #endif
    let v2251 : bool = _v2234 
    let v2256 : bool = v2251 = false
    if v2256 then
        let v2257 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v2258 : System.DateTime = null |> unbox<System.DateTime>
        let _v2257 = v2258 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v2261 : System.DateTime = null |> unbox<System.DateTime>
        let _v2257 = v2261 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v2264 : System.DateTime = null |> unbox<System.DateTime>
        let _v2257 = v2264 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v2267 : System.DateTime = null |> unbox<System.DateTime>
        let _v2257 = v2267 
        #endif
#if FABLE_COMPILER_PYTHON
        let v2270 : System.DateTime = null |> unbox<System.DateTime>
        let _v2257 = v2270 
        #endif
#else
        let v2273 : System.DateTime = v2229.CreationTime
        let _v2257 = v2273 
        #endif
        let v2274 : System.DateTime = _v2257 
        let v2279 : obj = {| Exists = v2251; CreationTime = v2274 |}
        let v2280 : string = $"%A{v2279}"
        let v2283 : bool = State.trace_state.IsNone
        if v2283 then
            let v2284 : US0 = US0_0
            let struct (v2285 : Mut0, v2286 : Mut1, v2287 : Mut2, v2288 : Mut3, v2289 : int64 option) = method1(v2284)
            let v2290 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v2285, v2286, v2287, v2288, v2289) 
            State.trace_state <- v2290 
            ()
        let struct (v2295 : Mut0, v2296 : Mut1, v2297 : Mut2, v2298 : Mut3, v2299 : int64 option) = State.trace_state.Value
        let v2310 : bool = State.trace_state.IsNone
        if v2310 then
            let v2311 : US0 = US0_0
            let struct (v2312 : Mut0, v2313 : Mut1, v2314 : Mut2, v2315 : Mut3, v2316 : int64 option) = method1(v2311)
            let v2317 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v2312, v2313, v2314, v2315, v2316) 
            State.trace_state <- v2317 
            ()
        let struct (v2322 : Mut0, v2323 : Mut1, v2324 : Mut2, v2325 : Mut3, v2326 : int64 option) = State.trace_state.Value
        let v2337 : US0 = v2325.l0
        let v2338 : bool = v2324.l0
        let v2339 : bool = v2338 = false
        let v2342 : bool =
            if v2339 then
                false
            else
                let v2340 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v2337
                let v2341 : bool = 1 >= v2340
                v2341
        if v2342 then
            let v2343 : int64 = v2295.l0
            let v2344 : int64 = v2343 + 1L
            v2295.l0 <- v2344
            let v2345 : bool = State.trace_state.IsNone
            if v2345 then
                let v2346 : US0 = US0_0
                let struct (v2347 : Mut0, v2348 : Mut1, v2349 : Mut2, v2350 : Mut3, v2351 : int64 option) = method1(v2346)
                let v2352 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v2347, v2348, v2349, v2350, v2351) 
                State.trace_state <- v2352 
                ()
            let struct (v2357 : Mut0, v2358 : Mut1, v2359 : Mut2, v2360 : Mut3, v2361 : int64 option) = State.trace_state.Value
            let v2372 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v2373 : US3 option = None
            let _v2373 = ref v2373 
            match v2361 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v2374 : int64 = x
            let v2375 : US3 = US3_0(v2374)
            v2375 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v2373.Value <- x
            let v2376 : US3 option = _v2373.Value 
            let v2387 : US3 = US3_1
            let v2388 : US3 = v2376 |> Option.defaultValue v2387 
            let v2428 : System.DateTime =
                match v2388 with
                | US3_1 -> (* None *)
                    let v2424 : System.DateTime = System.DateTime.Now
                    v2424
                | US3_0(v2392) -> (* Some *)
                    let v2393 : System.DateTime = System.DateTime.Now
                    let v2396 : (System.DateTime -> int64) = _.Ticks
                    let v2397 : int64 = v2396 v2393
                    let v2400 : int64 = v2397 - v2392
                    let v2401 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v2402 : System.TimeSpan = v2401 v2400
                    let v2405 : (System.TimeSpan -> int32) = _.Hours
                    let v2406 : int32 = v2405 v2402
                    let v2409 : (System.TimeSpan -> int32) = _.Minutes
                    let v2410 : int32 = v2409 v2402
                    let v2413 : (System.TimeSpan -> int32) = _.Seconds
                    let v2414 : int32 = v2413 v2402
                    let v2417 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v2418 : int32 = v2417 v2402
                    let v2421 : System.DateTime = System.DateTime (1, 1, 1, v2406, v2410, v2414, v2418)
                    v2421
            let v2429 : string = method6()
            let v2432 : (string -> string) = v2428.ToString
            let v2433 : string = v2432 v2429
            let _v2372 = v2433 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v2436 : US3 option = None
            let _v2436 = ref v2436 
            match v2361 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v2437 : int64 = x
            let v2438 : US3 = US3_0(v2437)
            v2438 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v2436.Value <- x
            let v2439 : US3 option = _v2436.Value 
            let v2450 : US3 = US3_1
            let v2451 : US3 = v2439 |> Option.defaultValue v2450 
            let v2491 : System.DateTime =
                match v2451 with
                | US3_1 -> (* None *)
                    let v2487 : System.DateTime = System.DateTime.Now
                    v2487
                | US3_0(v2455) -> (* Some *)
                    let v2456 : System.DateTime = System.DateTime.Now
                    let v2459 : (System.DateTime -> int64) = _.Ticks
                    let v2460 : int64 = v2459 v2456
                    let v2463 : int64 = v2460 - v2455
                    let v2464 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v2465 : System.TimeSpan = v2464 v2463
                    let v2468 : (System.TimeSpan -> int32) = _.Hours
                    let v2469 : int32 = v2468 v2465
                    let v2472 : (System.TimeSpan -> int32) = _.Minutes
                    let v2473 : int32 = v2472 v2465
                    let v2476 : (System.TimeSpan -> int32) = _.Seconds
                    let v2477 : int32 = v2476 v2465
                    let v2480 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v2481 : int32 = v2480 v2465
                    let v2484 : System.DateTime = System.DateTime (1, 1, 1, v2469, v2473, v2477, v2481)
                    v2484
            let v2492 : string = method6()
            let v2495 : (string -> string) = v2491.ToString
            let v2496 : string = v2495 v2492
            let _v2372 = v2496 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v2499 : string = $"near_sdk::env::block_timestamp()"
            let v2500 : uint64 = Fable.Core.RustInterop.emitRustExpr () v2499 
            let v2501 : US3 option = None
            let _v2501 = ref v2501 
            match v2361 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v2502 : int64 = x
            let v2503 : US3 = US3_0(v2502)
            v2503 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v2501.Value <- x
            let v2504 : US3 option = _v2501.Value 
            let v2515 : US3 = US3_1
            let v2516 : US3 = v2504 |> Option.defaultValue v2515 
            let v2525 : uint64 =
                match v2516 with
                | US3_1 -> (* None *)
                    v2500
                | US3_0(v2520) -> (* Some *)
                    let v2521 : (int64 -> uint64) = uint64
                    let v2522 : uint64 = v2521 v2520
                    let v2523 : uint64 = v2500 - v2522
                    v2523
            let v2526 : uint64 = v2525 / 1000000000UL
            let v2527 : uint64 = v2526 % 60UL
            let v2528 : uint64 = v2526 / 60UL
            let v2529 : uint64 = v2528 % 60UL
            let v2530 : uint64 = v2526 / 3600UL
            let v2531 : uint64 = v2530 % 24UL
            let v2532 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
            let v2533 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v2531, v2529, v2527) v2532 
            let v2534 : string = "fable_library_rust::String_::fromString($0)"
            let v2535 : string = Fable.Core.RustInterop.emitRustExpr v2533 v2534 
            let _v2372 = v2535 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v2536 : US3 option = None
            let _v2536 = ref v2536 
            match v2361 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v2537 : int64 = x
            let v2538 : US3 = US3_0(v2537)
            v2538 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v2536.Value <- x
            let v2539 : US3 option = _v2536.Value 
            let v2550 : US3 = US3_1
            let v2551 : US3 = v2539 |> Option.defaultValue v2550 
            let v2591 : System.DateTime =
                match v2551 with
                | US3_1 -> (* None *)
                    let v2587 : System.DateTime = System.DateTime.Now
                    v2587
                | US3_0(v2555) -> (* Some *)
                    let v2556 : System.DateTime = System.DateTime.Now
                    let v2559 : (System.DateTime -> int64) = _.Ticks
                    let v2560 : int64 = v2559 v2556
                    let v2563 : int64 = v2560 - v2555
                    let v2564 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v2565 : System.TimeSpan = v2564 v2563
                    let v2568 : (System.TimeSpan -> int32) = _.Hours
                    let v2569 : int32 = v2568 v2565
                    let v2572 : (System.TimeSpan -> int32) = _.Minutes
                    let v2573 : int32 = v2572 v2565
                    let v2576 : (System.TimeSpan -> int32) = _.Seconds
                    let v2577 : int32 = v2576 v2565
                    let v2580 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v2581 : int32 = v2580 v2565
                    let v2584 : System.DateTime = System.DateTime (1, 1, 1, v2569, v2573, v2577, v2581)
                    v2584
            let v2592 : string = method7()
            let v2595 : (string -> string) = v2591.ToString
            let v2596 : string = v2595 v2592
            let _v2372 = v2596 
            #endif
#if FABLE_COMPILER_PYTHON
            let v2599 : US3 option = None
            let _v2599 = ref v2599 
            match v2361 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v2600 : int64 = x
            let v2601 : US3 = US3_0(v2600)
            v2601 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v2599.Value <- x
            let v2602 : US3 option = _v2599.Value 
            let v2613 : US3 = US3_1
            let v2614 : US3 = v2602 |> Option.defaultValue v2613 
            let v2654 : System.DateTime =
                match v2614 with
                | US3_1 -> (* None *)
                    let v2650 : System.DateTime = System.DateTime.Now
                    v2650
                | US3_0(v2618) -> (* Some *)
                    let v2619 : System.DateTime = System.DateTime.Now
                    let v2622 : (System.DateTime -> int64) = _.Ticks
                    let v2623 : int64 = v2622 v2619
                    let v2626 : int64 = v2623 - v2618
                    let v2627 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v2628 : System.TimeSpan = v2627 v2626
                    let v2631 : (System.TimeSpan -> int32) = _.Hours
                    let v2632 : int32 = v2631 v2628
                    let v2635 : (System.TimeSpan -> int32) = _.Minutes
                    let v2636 : int32 = v2635 v2628
                    let v2639 : (System.TimeSpan -> int32) = _.Seconds
                    let v2640 : int32 = v2639 v2628
                    let v2643 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v2644 : int32 = v2643 v2628
                    let v2647 : System.DateTime = System.DateTime (1, 1, 1, v2632, v2636, v2640, v2644)
                    v2647
            let v2655 : string = method7()
            let v2658 : (string -> string) = v2654.ToString
            let v2659 : string = v2658 v2655
            let _v2372 = v2659 
            #endif
#else
            let v2662 : US3 option = None
            let _v2662 = ref v2662 
            match v2361 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v2663 : int64 = x
            let v2664 : US3 = US3_0(v2663)
            v2664 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v2662.Value <- x
            let v2665 : US3 option = _v2662.Value 
            let v2676 : US3 = US3_1
            let v2677 : US3 = v2665 |> Option.defaultValue v2676 
            let v2717 : System.DateTime =
                match v2677 with
                | US3_1 -> (* None *)
                    let v2713 : System.DateTime = System.DateTime.Now
                    v2713
                | US3_0(v2681) -> (* Some *)
                    let v2682 : System.DateTime = System.DateTime.Now
                    let v2685 : (System.DateTime -> int64) = _.Ticks
                    let v2686 : int64 = v2685 v2682
                    let v2689 : int64 = v2686 - v2681
                    let v2690 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v2691 : System.TimeSpan = v2690 v2689
                    let v2694 : (System.TimeSpan -> int32) = _.Hours
                    let v2695 : int32 = v2694 v2691
                    let v2698 : (System.TimeSpan -> int32) = _.Minutes
                    let v2699 : int32 = v2698 v2691
                    let v2702 : (System.TimeSpan -> int32) = _.Seconds
                    let v2703 : int32 = v2702 v2691
                    let v2706 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v2707 : int32 = v2706 v2691
                    let v2710 : System.DateTime = System.DateTime (1, 1, 1, v2695, v2699, v2703, v2707)
                    v2710
            let v2718 : string = method7()
            let v2721 : (string -> string) = v2717.ToString
            let v2722 : string = v2721 v2718
            let _v2372 = v2722 
            #endif
            let v2725 : string = _v2372 
            let v2790 : string = "Debug"
            let v2791 : (unit -> string) = v2790.ToLower
            let v2792 : string = v2791 ()
            let v2795 : string = v2792.PadLeft (7, ' ')
            let v2809 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v2810 : string = "inline_colorization::color_bright_blue"
            let v2811 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v2810 
            let v2812 : string = "&*$0"
            let v2813 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2795 v2812 
            let v2814 : string = "inline_colorization::color_reset"
            let v2815 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v2814 
            let v2816 : string = "\"{v2811}{v2813}{v2815}\""
            let v2817 : string = @$"format!(" + v2816 + ")"
            let v2818 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v2817 
            let v2819 : string = "fable_library_rust::String_::fromString($0)"
            let v2820 : string = Fable.Core.RustInterop.emitRustExpr v2818 v2819 
            let _v2809 = v2820 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v2821 : string = "inline_colorization::color_bright_blue"
            let v2822 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v2821 
            let v2823 : string = "&*$0"
            let v2824 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2795 v2823 
            let v2825 : string = "inline_colorization::color_reset"
            let v2826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v2825 
            let v2827 : string = "\"{v2822}{v2824}{v2826}\""
            let v2828 : string = @$"format!(" + v2827 + ")"
            let v2829 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v2828 
            let v2830 : string = "fable_library_rust::String_::fromString($0)"
            let v2831 : string = Fable.Core.RustInterop.emitRustExpr v2829 v2830 
            let _v2809 = v2831 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v2832 : string = "inline_colorization::color_bright_blue"
            let v2833 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v2832 
            let v2834 : string = "&*$0"
            let v2835 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2795 v2834 
            let v2836 : string = "inline_colorization::color_reset"
            let v2837 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v2836 
            let v2838 : string = "\"{v2833}{v2835}{v2837}\""
            let v2839 : string = @$"format!(" + v2838 + ")"
            let v2840 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v2839 
            let v2841 : string = "fable_library_rust::String_::fromString($0)"
            let v2842 : string = Fable.Core.RustInterop.emitRustExpr v2840 v2841 
            let _v2809 = v2842 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v2843 : string = "\u001b[94m"
            let v2844 : string = method8()
            let v2845 : string = v2843 + v2795 
            let v2846 : string = v2845 + v2844 
            let _v2809 = v2846 
            #endif
#if FABLE_COMPILER_PYTHON
            let v2847 : string = "\u001b[94m"
            let v2848 : string = method8()
            let v2849 : string = v2847 + v2795 
            let v2850 : string = v2849 + v2848 
            let _v2809 = v2850 
            #endif
#else
            let v2851 : string = "\u001b[94m"
            let v2852 : string = method8()
            let v2853 : string = v2851 + v2795 
            let v2854 : string = v2853 + v2852 
            let _v2809 = v2854 
            #endif
            let v2855 : string = _v2809 
            let v2861 : int64 = v2357.l0
            let v2862 : string = method9()
            let v2863 : Mut4 = {l0 = v2862} : Mut4
            let v2864 : string = "{ "
            let v2865 : string = $"{v2864}"
            let v2868 : string = v2863.l0
            let v2869 : string = v2868 + v2865 
            v2863.l0 <- v2869
            let v2870 : string = "dir"
            let v2871 : string = $"{v2870}"
            let v2874 : string = v2863.l0
            let v2875 : string = v2874 + v2871 
            v2863.l0 <- v2875
            let v2876 : string = " = "
            let v2877 : string = $"{v2876}"
            let v2880 : string = v2863.l0
            let v2881 : string = v2880 + v2877 
            v2863.l0 <- v2881
            let v2882 : string = $"{v0}"
            let v2885 : string = v2863.l0
            let v2886 : string = v2885 + v2882 
            v2863.l0 <- v2886
            let v2887 : string = "; "
            let v2888 : string = $"{v2887}"
            let v2891 : string = v2863.l0
            let v2892 : string = v2891 + v2888 
            v2863.l0 <- v2892
            let v2893 : string = "result"
            let v2894 : string = $"{v2893}"
            let v2897 : string = v2863.l0
            let v2898 : string = v2897 + v2894 
            v2863.l0 <- v2898
            let v2899 : string = $"{v2876}"
            let v2902 : string = v2863.l0
            let v2903 : string = v2902 + v2899 
            v2863.l0 <- v2903
            let v2904 : string = $"{v2280}"
            let v2907 : string = v2863.l0
            let v2908 : string = v2907 + v2904 
            v2863.l0 <- v2908
            let v2909 : string = " }"
            let v2910 : string = $"{v2909}"
            let v2913 : string = v2863.l0
            let v2914 : string = v2913 + v2910 
            v2863.l0 <- v2914
            let v2915 : string = v2863.l0
            let v2916 : (unit -> string) = closure13()
            let v2917 : string = $"{v2725} {v2855} #{v2861} %s{v2916 ()} / {v2915}"
            let v2920 : char list = []
            let v2921 : (char list -> (char [])) = List.toArray
            let v2922 : (char []) = v2921 v2920
            let v2925 : string = v2917.TrimStart v2922 
            let v2943 : char list = []
            let v2944 : char list = '/' :: v2943 
            let v2947 : char list = ' ' :: v2944 
            let v2950 : (char list -> (char [])) = List.toArray
            let v2951 : (char []) = v2950 v2947
            let v2954 : string = v2925.TrimEnd v2951 
            let v2972 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v2973 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v2954 v2973 
            let _v2972 = () 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v2974 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v2954 v2974 
            let _v2972 = () 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v2975 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v2954 v2975 
            let _v2972 = () 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            System.Console.WriteLine v2954 
            let _v2972 = () 
            #endif
#if FABLE_COMPILER_PYTHON
            System.Console.WriteLine v2954 
            let _v2972 = () 
            #endif
#else
            System.Console.WriteLine v2954 
            let _v2972 = () 
            #endif
            _v2972 
            let v2976 : (string -> unit) = v2296.l0
            v2976 v2954
    let v2977 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2978 : (unit -> unit) = method35(v0)
    let v2979 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v2978 "$0()" )
    let _v2977 = v2979 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2980 : (unit -> unit) = method35(v0)
    let v2981 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v2980 "$0()" )
    let _v2977 = v2981 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2982 : (unit -> unit) = method35(v0)
    let v2983 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v2982 "$0()" )
    let _v2977 = v2983 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2984 : (unit -> unit) = method38(v0)
    let v2985 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v2984 () }
    let _v2977 = v2985 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2986 : (unit -> unit) = method38(v0)
    let v2987 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v2986 () }
    let _v2977 = v2987 
    #endif
#else
    let v2988 : (unit -> unit) = method38(v0)
    let v2989 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v2988 () }
    let _v2977 = v2989 
    #endif
    let v2990 : System.IDisposable = _v2977 
    let _v1 = v2990 
    #endif
#else
    let v2994 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2995 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v2994 = v2995 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2998 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v2994 = v2998 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3001 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v2994 = v3001 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3004 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v2994 = v3004 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3007 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let _v2994 = v3007 
    #endif
#else
    let v3010 : (string -> System.IO.DirectoryInfo) = System.IO.Directory.CreateDirectory
    let v3011 : System.IO.DirectoryInfo = v3010 v0
    let _v2994 = v3011 
    #endif
    let v3012 : System.IO.DirectoryInfo = _v2994 
    let v3017 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3018 : bool = null |> unbox<bool>
    let _v3017 = v3018 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3021 : bool = null |> unbox<bool>
    let _v3017 = v3021 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3024 : bool = null |> unbox<bool>
    let _v3017 = v3024 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3027 : bool = null |> unbox<bool>
    let _v3017 = v3027 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3030 : bool = null |> unbox<bool>
    let _v3017 = v3030 
    #endif
#else
    let v3033 : bool = v3012.Exists
    let _v3017 = v3033 
    #endif
    let v3034 : bool = _v3017 
    let v3039 : bool = v3034 = false
    if v3039 then
        let v3040 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v3041 : System.DateTime = null |> unbox<System.DateTime>
        let _v3040 = v3041 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v3044 : System.DateTime = null |> unbox<System.DateTime>
        let _v3040 = v3044 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v3047 : System.DateTime = null |> unbox<System.DateTime>
        let _v3040 = v3047 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v3050 : System.DateTime = null |> unbox<System.DateTime>
        let _v3040 = v3050 
        #endif
#if FABLE_COMPILER_PYTHON
        let v3053 : System.DateTime = null |> unbox<System.DateTime>
        let _v3040 = v3053 
        #endif
#else
        let v3056 : System.DateTime = v3012.CreationTime
        let _v3040 = v3056 
        #endif
        let v3057 : System.DateTime = _v3040 
        let v3062 : obj = {| Exists = v3034; CreationTime = v3057 |}
        let v3063 : string = $"%A{v3062}"
        let v3066 : bool = State.trace_state.IsNone
        if v3066 then
            let v3067 : US0 = US0_0
            let struct (v3068 : Mut0, v3069 : Mut1, v3070 : Mut2, v3071 : Mut3, v3072 : int64 option) = method1(v3067)
            let v3073 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v3068, v3069, v3070, v3071, v3072) 
            State.trace_state <- v3073 
            ()
        let struct (v3078 : Mut0, v3079 : Mut1, v3080 : Mut2, v3081 : Mut3, v3082 : int64 option) = State.trace_state.Value
        let v3093 : bool = State.trace_state.IsNone
        if v3093 then
            let v3094 : US0 = US0_0
            let struct (v3095 : Mut0, v3096 : Mut1, v3097 : Mut2, v3098 : Mut3, v3099 : int64 option) = method1(v3094)
            let v3100 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v3095, v3096, v3097, v3098, v3099) 
            State.trace_state <- v3100 
            ()
        let struct (v3105 : Mut0, v3106 : Mut1, v3107 : Mut2, v3108 : Mut3, v3109 : int64 option) = State.trace_state.Value
        let v3120 : US0 = v3108.l0
        let v3121 : bool = v3107.l0
        let v3122 : bool = v3121 = false
        let v3125 : bool =
            if v3122 then
                false
            else
                let v3123 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v3120
                let v3124 : bool = 1 >= v3123
                v3124
        if v3125 then
            let v3126 : int64 = v3078.l0
            let v3127 : int64 = v3126 + 1L
            v3078.l0 <- v3127
            let v3128 : bool = State.trace_state.IsNone
            if v3128 then
                let v3129 : US0 = US0_0
                let struct (v3130 : Mut0, v3131 : Mut1, v3132 : Mut2, v3133 : Mut3, v3134 : int64 option) = method1(v3129)
                let v3135 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v3130, v3131, v3132, v3133, v3134) 
                State.trace_state <- v3135 
                ()
            let struct (v3140 : Mut0, v3141 : Mut1, v3142 : Mut2, v3143 : Mut3, v3144 : int64 option) = State.trace_state.Value
            let v3155 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v3156 : US3 option = None
            let _v3156 = ref v3156 
            match v3144 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v3157 : int64 = x
            let v3158 : US3 = US3_0(v3157)
            v3158 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v3156.Value <- x
            let v3159 : US3 option = _v3156.Value 
            let v3170 : US3 = US3_1
            let v3171 : US3 = v3159 |> Option.defaultValue v3170 
            let v3211 : System.DateTime =
                match v3171 with
                | US3_1 -> (* None *)
                    let v3207 : System.DateTime = System.DateTime.Now
                    v3207
                | US3_0(v3175) -> (* Some *)
                    let v3176 : System.DateTime = System.DateTime.Now
                    let v3179 : (System.DateTime -> int64) = _.Ticks
                    let v3180 : int64 = v3179 v3176
                    let v3183 : int64 = v3180 - v3175
                    let v3184 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v3185 : System.TimeSpan = v3184 v3183
                    let v3188 : (System.TimeSpan -> int32) = _.Hours
                    let v3189 : int32 = v3188 v3185
                    let v3192 : (System.TimeSpan -> int32) = _.Minutes
                    let v3193 : int32 = v3192 v3185
                    let v3196 : (System.TimeSpan -> int32) = _.Seconds
                    let v3197 : int32 = v3196 v3185
                    let v3200 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v3201 : int32 = v3200 v3185
                    let v3204 : System.DateTime = System.DateTime (1, 1, 1, v3189, v3193, v3197, v3201)
                    v3204
            let v3212 : string = method6()
            let v3215 : (string -> string) = v3211.ToString
            let v3216 : string = v3215 v3212
            let _v3155 = v3216 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v3219 : US3 option = None
            let _v3219 = ref v3219 
            match v3144 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v3220 : int64 = x
            let v3221 : US3 = US3_0(v3220)
            v3221 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v3219.Value <- x
            let v3222 : US3 option = _v3219.Value 
            let v3233 : US3 = US3_1
            let v3234 : US3 = v3222 |> Option.defaultValue v3233 
            let v3274 : System.DateTime =
                match v3234 with
                | US3_1 -> (* None *)
                    let v3270 : System.DateTime = System.DateTime.Now
                    v3270
                | US3_0(v3238) -> (* Some *)
                    let v3239 : System.DateTime = System.DateTime.Now
                    let v3242 : (System.DateTime -> int64) = _.Ticks
                    let v3243 : int64 = v3242 v3239
                    let v3246 : int64 = v3243 - v3238
                    let v3247 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v3248 : System.TimeSpan = v3247 v3246
                    let v3251 : (System.TimeSpan -> int32) = _.Hours
                    let v3252 : int32 = v3251 v3248
                    let v3255 : (System.TimeSpan -> int32) = _.Minutes
                    let v3256 : int32 = v3255 v3248
                    let v3259 : (System.TimeSpan -> int32) = _.Seconds
                    let v3260 : int32 = v3259 v3248
                    let v3263 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v3264 : int32 = v3263 v3248
                    let v3267 : System.DateTime = System.DateTime (1, 1, 1, v3252, v3256, v3260, v3264)
                    v3267
            let v3275 : string = method6()
            let v3278 : (string -> string) = v3274.ToString
            let v3279 : string = v3278 v3275
            let _v3155 = v3279 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v3282 : string = $"near_sdk::env::block_timestamp()"
            let v3283 : uint64 = Fable.Core.RustInterop.emitRustExpr () v3282 
            let v3284 : US3 option = None
            let _v3284 = ref v3284 
            match v3144 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v3285 : int64 = x
            let v3286 : US3 = US3_0(v3285)
            v3286 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v3284.Value <- x
            let v3287 : US3 option = _v3284.Value 
            let v3298 : US3 = US3_1
            let v3299 : US3 = v3287 |> Option.defaultValue v3298 
            let v3308 : uint64 =
                match v3299 with
                | US3_1 -> (* None *)
                    v3283
                | US3_0(v3303) -> (* Some *)
                    let v3304 : (int64 -> uint64) = uint64
                    let v3305 : uint64 = v3304 v3303
                    let v3306 : uint64 = v3283 - v3305
                    v3306
            let v3309 : uint64 = v3308 / 1000000000UL
            let v3310 : uint64 = v3309 % 60UL
            let v3311 : uint64 = v3309 / 60UL
            let v3312 : uint64 = v3311 % 60UL
            let v3313 : uint64 = v3309 / 3600UL
            let v3314 : uint64 = v3313 % 24UL
            let v3315 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
            let v3316 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v3314, v3312, v3310) v3315 
            let v3317 : string = "fable_library_rust::String_::fromString($0)"
            let v3318 : string = Fable.Core.RustInterop.emitRustExpr v3316 v3317 
            let _v3155 = v3318 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v3319 : US3 option = None
            let _v3319 = ref v3319 
            match v3144 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v3320 : int64 = x
            let v3321 : US3 = US3_0(v3320)
            v3321 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v3319.Value <- x
            let v3322 : US3 option = _v3319.Value 
            let v3333 : US3 = US3_1
            let v3334 : US3 = v3322 |> Option.defaultValue v3333 
            let v3374 : System.DateTime =
                match v3334 with
                | US3_1 -> (* None *)
                    let v3370 : System.DateTime = System.DateTime.Now
                    v3370
                | US3_0(v3338) -> (* Some *)
                    let v3339 : System.DateTime = System.DateTime.Now
                    let v3342 : (System.DateTime -> int64) = _.Ticks
                    let v3343 : int64 = v3342 v3339
                    let v3346 : int64 = v3343 - v3338
                    let v3347 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v3348 : System.TimeSpan = v3347 v3346
                    let v3351 : (System.TimeSpan -> int32) = _.Hours
                    let v3352 : int32 = v3351 v3348
                    let v3355 : (System.TimeSpan -> int32) = _.Minutes
                    let v3356 : int32 = v3355 v3348
                    let v3359 : (System.TimeSpan -> int32) = _.Seconds
                    let v3360 : int32 = v3359 v3348
                    let v3363 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v3364 : int32 = v3363 v3348
                    let v3367 : System.DateTime = System.DateTime (1, 1, 1, v3352, v3356, v3360, v3364)
                    v3367
            let v3375 : string = method7()
            let v3378 : (string -> string) = v3374.ToString
            let v3379 : string = v3378 v3375
            let _v3155 = v3379 
            #endif
#if FABLE_COMPILER_PYTHON
            let v3382 : US3 option = None
            let _v3382 = ref v3382 
            match v3144 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v3383 : int64 = x
            let v3384 : US3 = US3_0(v3383)
            v3384 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v3382.Value <- x
            let v3385 : US3 option = _v3382.Value 
            let v3396 : US3 = US3_1
            let v3397 : US3 = v3385 |> Option.defaultValue v3396 
            let v3437 : System.DateTime =
                match v3397 with
                | US3_1 -> (* None *)
                    let v3433 : System.DateTime = System.DateTime.Now
                    v3433
                | US3_0(v3401) -> (* Some *)
                    let v3402 : System.DateTime = System.DateTime.Now
                    let v3405 : (System.DateTime -> int64) = _.Ticks
                    let v3406 : int64 = v3405 v3402
                    let v3409 : int64 = v3406 - v3401
                    let v3410 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v3411 : System.TimeSpan = v3410 v3409
                    let v3414 : (System.TimeSpan -> int32) = _.Hours
                    let v3415 : int32 = v3414 v3411
                    let v3418 : (System.TimeSpan -> int32) = _.Minutes
                    let v3419 : int32 = v3418 v3411
                    let v3422 : (System.TimeSpan -> int32) = _.Seconds
                    let v3423 : int32 = v3422 v3411
                    let v3426 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v3427 : int32 = v3426 v3411
                    let v3430 : System.DateTime = System.DateTime (1, 1, 1, v3415, v3419, v3423, v3427)
                    v3430
            let v3438 : string = method7()
            let v3441 : (string -> string) = v3437.ToString
            let v3442 : string = v3441 v3438
            let _v3155 = v3442 
            #endif
#else
            let v3445 : US3 option = None
            let _v3445 = ref v3445 
            match v3144 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v3446 : int64 = x
            let v3447 : US3 = US3_0(v3446)
            v3447 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v3445.Value <- x
            let v3448 : US3 option = _v3445.Value 
            let v3459 : US3 = US3_1
            let v3460 : US3 = v3448 |> Option.defaultValue v3459 
            let v3500 : System.DateTime =
                match v3460 with
                | US3_1 -> (* None *)
                    let v3496 : System.DateTime = System.DateTime.Now
                    v3496
                | US3_0(v3464) -> (* Some *)
                    let v3465 : System.DateTime = System.DateTime.Now
                    let v3468 : (System.DateTime -> int64) = _.Ticks
                    let v3469 : int64 = v3468 v3465
                    let v3472 : int64 = v3469 - v3464
                    let v3473 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v3474 : System.TimeSpan = v3473 v3472
                    let v3477 : (System.TimeSpan -> int32) = _.Hours
                    let v3478 : int32 = v3477 v3474
                    let v3481 : (System.TimeSpan -> int32) = _.Minutes
                    let v3482 : int32 = v3481 v3474
                    let v3485 : (System.TimeSpan -> int32) = _.Seconds
                    let v3486 : int32 = v3485 v3474
                    let v3489 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v3490 : int32 = v3489 v3474
                    let v3493 : System.DateTime = System.DateTime (1, 1, 1, v3478, v3482, v3486, v3490)
                    v3493
            let v3501 : string = method7()
            let v3504 : (string -> string) = v3500.ToString
            let v3505 : string = v3504 v3501
            let _v3155 = v3505 
            #endif
            let v3508 : string = _v3155 
            let v3573 : string = "Debug"
            let v3574 : (unit -> string) = v3573.ToLower
            let v3575 : string = v3574 ()
            let v3578 : string = v3575.PadLeft (7, ' ')
            let v3592 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v3593 : string = "inline_colorization::color_bright_blue"
            let v3594 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v3593 
            let v3595 : string = "&*$0"
            let v3596 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3578 v3595 
            let v3597 : string = "inline_colorization::color_reset"
            let v3598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v3597 
            let v3599 : string = "\"{v3594}{v3596}{v3598}\""
            let v3600 : string = @$"format!(" + v3599 + ")"
            let v3601 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v3600 
            let v3602 : string = "fable_library_rust::String_::fromString($0)"
            let v3603 : string = Fable.Core.RustInterop.emitRustExpr v3601 v3602 
            let _v3592 = v3603 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v3604 : string = "inline_colorization::color_bright_blue"
            let v3605 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v3604 
            let v3606 : string = "&*$0"
            let v3607 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3578 v3606 
            let v3608 : string = "inline_colorization::color_reset"
            let v3609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v3608 
            let v3610 : string = "\"{v3605}{v3607}{v3609}\""
            let v3611 : string = @$"format!(" + v3610 + ")"
            let v3612 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v3611 
            let v3613 : string = "fable_library_rust::String_::fromString($0)"
            let v3614 : string = Fable.Core.RustInterop.emitRustExpr v3612 v3613 
            let _v3592 = v3614 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v3615 : string = "inline_colorization::color_bright_blue"
            let v3616 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v3615 
            let v3617 : string = "&*$0"
            let v3618 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3578 v3617 
            let v3619 : string = "inline_colorization::color_reset"
            let v3620 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v3619 
            let v3621 : string = "\"{v3616}{v3618}{v3620}\""
            let v3622 : string = @$"format!(" + v3621 + ")"
            let v3623 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v3622 
            let v3624 : string = "fable_library_rust::String_::fromString($0)"
            let v3625 : string = Fable.Core.RustInterop.emitRustExpr v3623 v3624 
            let _v3592 = v3625 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v3626 : string = "\u001b[94m"
            let v3627 : string = method8()
            let v3628 : string = v3626 + v3578 
            let v3629 : string = v3628 + v3627 
            let _v3592 = v3629 
            #endif
#if FABLE_COMPILER_PYTHON
            let v3630 : string = "\u001b[94m"
            let v3631 : string = method8()
            let v3632 : string = v3630 + v3578 
            let v3633 : string = v3632 + v3631 
            let _v3592 = v3633 
            #endif
#else
            let v3634 : string = "\u001b[94m"
            let v3635 : string = method8()
            let v3636 : string = v3634 + v3578 
            let v3637 : string = v3636 + v3635 
            let _v3592 = v3637 
            #endif
            let v3638 : string = _v3592 
            let v3644 : int64 = v3140.l0
            let v3645 : string = method9()
            let v3646 : Mut4 = {l0 = v3645} : Mut4
            let v3647 : string = "{ "
            let v3648 : string = $"{v3647}"
            let v3651 : string = v3646.l0
            let v3652 : string = v3651 + v3648 
            v3646.l0 <- v3652
            let v3653 : string = "dir"
            let v3654 : string = $"{v3653}"
            let v3657 : string = v3646.l0
            let v3658 : string = v3657 + v3654 
            v3646.l0 <- v3658
            let v3659 : string = " = "
            let v3660 : string = $"{v3659}"
            let v3663 : string = v3646.l0
            let v3664 : string = v3663 + v3660 
            v3646.l0 <- v3664
            let v3665 : string = $"{v0}"
            let v3668 : string = v3646.l0
            let v3669 : string = v3668 + v3665 
            v3646.l0 <- v3669
            let v3670 : string = "; "
            let v3671 : string = $"{v3670}"
            let v3674 : string = v3646.l0
            let v3675 : string = v3674 + v3671 
            v3646.l0 <- v3675
            let v3676 : string = "result"
            let v3677 : string = $"{v3676}"
            let v3680 : string = v3646.l0
            let v3681 : string = v3680 + v3677 
            v3646.l0 <- v3681
            let v3682 : string = $"{v3659}"
            let v3685 : string = v3646.l0
            let v3686 : string = v3685 + v3682 
            v3646.l0 <- v3686
            let v3687 : string = $"{v3063}"
            let v3690 : string = v3646.l0
            let v3691 : string = v3690 + v3687 
            v3646.l0 <- v3691
            let v3692 : string = " }"
            let v3693 : string = $"{v3692}"
            let v3696 : string = v3646.l0
            let v3697 : string = v3696 + v3693 
            v3646.l0 <- v3697
            let v3698 : string = v3646.l0
            let v3699 : (unit -> string) = closure13()
            let v3700 : string = $"{v3508} {v3638} #{v3644} %s{v3699 ()} / {v3698}"
            let v3703 : char list = []
            let v3704 : (char list -> (char [])) = List.toArray
            let v3705 : (char []) = v3704 v3703
            let v3708 : string = v3700.TrimStart v3705 
            let v3726 : char list = []
            let v3727 : char list = '/' :: v3726 
            let v3730 : char list = ' ' :: v3727 
            let v3733 : (char list -> (char [])) = List.toArray
            let v3734 : (char []) = v3733 v3730
            let v3737 : string = v3708.TrimEnd v3734 
            let v3755 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v3756 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v3737 v3756 
            let _v3755 = () 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v3757 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v3737 v3757 
            let _v3755 = () 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v3758 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v3737 v3758 
            let _v3755 = () 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            System.Console.WriteLine v3737 
            let _v3755 = () 
            #endif
#if FABLE_COMPILER_PYTHON
            System.Console.WriteLine v3737 
            let _v3755 = () 
            #endif
#else
            System.Console.WriteLine v3737 
            let _v3755 = () 
            #endif
            _v3755 
            let v3759 : (string -> unit) = v3079.l0
            v3759 v3737
    let v3760 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3761 : (unit -> unit) = method35(v0)
    let v3762 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v3761 "$0()" )
    let _v3760 = v3762 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3763 : (unit -> unit) = method35(v0)
    let v3764 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v3763 "$0()" )
    let _v3760 = v3764 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3765 : (unit -> unit) = method35(v0)
    let v3766 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v3765 "$0()" )
    let _v3760 = v3766 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3767 : (unit -> unit) = method38(v0)
    let v3768 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v3767 () }
    let _v3760 = v3768 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3769 : (unit -> unit) = method38(v0)
    let v3770 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v3769 () }
    let _v3760 = v3770 
    #endif
#else
    let v3771 : (unit -> unit) = method38(v0)
    let v3772 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v3771 () }
    let _v3760 = v3772 
    #endif
    let v3773 : System.IDisposable = _v3760 
    let _v1 = v3773 
    #endif
    let v3777 : System.IDisposable = _v1 
    v3777
and method39 (v0 : string) : string =
    v0
and method25 (v0 : string, v1 : string) : unit =
    let v2 : bool = method26(v0, v1)
    let v3 : bool = v2 = false
    if v3 then
        let v4 : string = method24(v0)
        let v5 : bool = method19(v4)
        let v6 : bool = v5 = false
        if v6 then
            let v7 : System.IDisposable = method28(v4)
            ()
        let v8 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v9 : string = "std::fs::write(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v9 
        let _v8 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let _v8 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let _v8 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let _v8 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        let _v8 = () 
        #endif
#else
        let v10 : string = method39(v1)
        System.IO.File.WriteAllText (v0, v10)
        let _v8 = () 
        #endif
        _v8 
        ()
and method41 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : string =
    v0
and method43 (v0 : int32, v1 : Mut5) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and closure18 (v0 : char) (v1 : UH0) : UH0 =
    UH0_1(v0, v1)
and closure17 () (v0 : char) : (UH0 -> UH0) =
    closure18(v0)
and method44 () : (char -> (UH0 -> UH0)) =
    closure17()
and method45 (v0 : UH0, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : struct (System.Text.StringBuilder * int32 * int32) =
    match v0 with
    | UH0_1(v4, v5) -> (* Cons *)
        let v6 : bool = '\n' = v4
        let struct (v9 : int32, v10 : int32) =
            if v6 then
                let v7 : int32 = v2 + 1
                struct (v7, 1)
            else
                let v8 : int32 = v3 + 1
                struct (v2, v8)
        let v19 : System.Text.StringBuilder =
            if v6 then
                let v11 : (unit -> System.Text.StringBuilder) = v1.Clear
                let v12 : System.Text.StringBuilder = v11 ()
                v1
            else
                let v13 : (char -> string) = _.ToString()
                let v14 : string = v13 v4
                let v17 : (string -> System.Text.StringBuilder) = v1.Append
                let v18 : System.Text.StringBuilder = v17 v14
                v1
        method45(v5, v19, v9, v10)
    | UH0_0 -> (* Nil *)
        struct (v1, v2, v3)
and closure16 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US15 =
    let v4 : bool = "" = v0
    if v4 then
        let v5 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v1, v2, v3)}"
        US15_1(v5)
    else
        let v7 : char = v0.[int 0]
        let v8 : bool = v7 = '"'
        if v8 then
            let v9 : (string -> int32) = String.length
            let v10 : int32 = v9 v0
            let v11 : (int32 -> int32) = int32
            let v12 : int32 = v11 1
            let v13 : (int32 -> int32) = int32
            let v14 : int32 = v13 v10
            let v15 : string = v0.[int v12..int v14]
            let v16 : (char -> string) = _.ToString()
            let v17 : string = v16 v7
            let v20 : int32 = v17.Length
            let v21 : (char []) = Array.zeroCreate<char> (v20)
            let v22 : Mut5 = {l0 = 0} : Mut5
            while method43(v20, v22) do
                let v24 : int32 = v22.l0
                let v25 : char = v17.[int v24]
                v21.[int v24] <- v25
                let v26 : int32 = v24 + 1
                v22.l0 <- v26
                ()
            let v27 : char list = v21 |> Array.toList
            let v28 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
            let v29 : (char -> (UH0 -> UH0)) = method44()
            let v30 : (char list -> (UH0 -> UH0)) = v28 v29
            let v31 : (UH0 -> UH0) = v30 v27
            let v32 : UH0 = UH0_0
            let v33 : UH0 = v31 v32
            let struct (v38 : System.Text.StringBuilder, v39 : int32, v40 : int32) = method45(v33, v1, v2, v3)
            US15_0(v7, v15, v38, v39, v40)
        else
            let v42 : (string -> int32) = String.length
            let v43 : int32 = v42 v0
            let v44 : string = "\n"
            let v45 : int32 = v0.IndexOf v44 
            let v46 : int32 = v45 - 1
            let v47 : bool = -2 = v46
            let v48 : int32 =
                if v47 then
                    v43
                else
                    v46
            let v49 : (int32 -> int32) = int32
            let v50 : int32 = v49 0
            let v51 : (int32 -> int32) = int32
            let v52 : int32 = v51 v48
            let v53 : string = v0.[int v50..int v52]
            let v54 : string = $"parsing.p_char / expected: '{'"'}' / line: {v2} / col: {v3}
{v1}{v53}"
            let v55 : int32 = v3 - 1
            let v56 : (int32 -> (string -> string)) = String.replicate
            let v57 : (string -> string) = v56 v55
            let v58 : string = " "
            let v59 : string = v57 v58
            let v62 : string = "^"
            let v63 : string = v59 + v62 
            let v64 : string = $"{v54}
{v63}
"
            US15_1(v64)
and closure19 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US15 =
    let v4 : bool = "" = v0
    if v4 then
        let v5 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v1, v2, v3)}"
        US15_1(v5)
    else
        let v7 : char = v0.[int 0]
        let v8 : bool = v7 = '''
        if v8 then
            let v9 : (string -> int32) = String.length
            let v10 : int32 = v9 v0
            let v11 : (int32 -> int32) = int32
            let v12 : int32 = v11 1
            let v13 : (int32 -> int32) = int32
            let v14 : int32 = v13 v10
            let v15 : string = v0.[int v12..int v14]
            let v16 : (char -> string) = _.ToString()
            let v17 : string = v16 v7
            let v20 : int32 = v17.Length
            let v21 : (char []) = Array.zeroCreate<char> (v20)
            let v22 : Mut5 = {l0 = 0} : Mut5
            while method43(v20, v22) do
                let v24 : int32 = v22.l0
                let v25 : char = v17.[int v24]
                v21.[int v24] <- v25
                let v26 : int32 = v24 + 1
                v22.l0 <- v26
                ()
            let v27 : char list = v21 |> Array.toList
            let v28 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
            let v29 : (char -> (UH0 -> UH0)) = method44()
            let v30 : (char list -> (UH0 -> UH0)) = v28 v29
            let v31 : (UH0 -> UH0) = v30 v27
            let v32 : UH0 = UH0_0
            let v33 : UH0 = v31 v32
            let struct (v38 : System.Text.StringBuilder, v39 : int32, v40 : int32) = method45(v33, v1, v2, v3)
            US15_0(v7, v15, v38, v39, v40)
        else
            let v42 : (string -> int32) = String.length
            let v43 : int32 = v42 v0
            let v44 : string = "\n"
            let v45 : int32 = v0.IndexOf v44 
            let v46 : int32 = v45 - 1
            let v47 : bool = -2 = v46
            let v48 : int32 =
                if v47 then
                    v43
                else
                    v46
            let v49 : (int32 -> int32) = int32
            let v50 : int32 = v49 0
            let v51 : (int32 -> int32) = int32
            let v52 : int32 = v51 v48
            let v53 : string = v0.[int v50..int v52]
            let v54 : string = $"parsing.p_char / expected: '{'''}' / line: {v2} / col: {v3}
{v1}{v53}"
            let v55 : int32 = v3 - 1
            let v56 : (int32 -> (string -> string)) = String.replicate
            let v57 : (string -> string) = v56 v55
            let v58 : string = " "
            let v59 : string = v57 v58
            let v62 : string = "^"
            let v63 : string = v59 + v62 
            let v64 : string = $"{v54}
{v63}
"
            US15_1(v64)
and method46 (v0 : string, v1 : System.Text.StringBuilder, v2 : UH1) : US15 =
    match v2 with
    | UH1_1(v5, v6) -> (* Cons *)
        let v7 : US15 = v5 struct (v0, v1, 1, 1)
        match v7 with
        | US15_1(v13) -> (* Error *)
            method46(v0, v1, v6)
        | US15_0(v8, v9, v10, v11, v12) -> (* Ok *)
            v7
    | UH1_0 -> (* Nil *)
        let v3 : string = "choice / no parsers succeeded"
        US15_1(v3)
and method47 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 2L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v11 : US17 =
            if v3 then
                US17_0('"')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US17_0(''')
                else
                    let v8 : int64 = v5 - 1L
                    US17_1
        let v15 : char =
            match v11 with
            | US17_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US17_0(v12) -> (* Some *)
                v12
        let v16 : bool = v0 = v15
        if v16 then
            true
        else
            let v17 : int64 = v1 + 1L
            method47(v0, v17)
and method48 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US16 =
    let v5 : bool = "" = v1
    let v70 : US15 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = ''' :: v6 
            let v10 : char list = '"' :: v7 
            let v13 : (char list -> (char [])) = List.toArray
            let v14 : (char []) = v13 v10
            let v17 : string = $"parsing.none_of / unexpected end of input / chars: %A{v14} / s: %A{struct (v2, v3, v4)}"
            US15_1(v17)
        else
            let v19 : char = v1.[int 0]
            let v20 : (string -> int32) = String.length
            let v21 : int32 = v20 v1
            let v22 : (int32 -> int32) = int32
            let v23 : int32 = v22 1
            let v24 : (int32 -> int32) = int32
            let v25 : int32 = v24 v21
            let v26 : string = v1.[int v23..int v25]
            let v27 : int64 = 0L
            let v28 : bool = method47(v19, v27)
            let v29 : bool = v28 = false
            if v29 then
                let v30 : (char -> string) = _.ToString()
                let v31 : string = v30 v19
                let v34 : int32 = v31.Length
                let v35 : (char []) = Array.zeroCreate<char> (v34)
                let v36 : Mut5 = {l0 = 0} : Mut5
                while method43(v34, v36) do
                    let v38 : int32 = v36.l0
                    let v39 : char = v31.[int v38]
                    v35.[int v38] <- v39
                    let v40 : int32 = v38 + 1
                    v36.l0 <- v40
                    ()
                let v41 : char list = v35 |> Array.toList
                let v42 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v43 : (char -> (UH0 -> UH0)) = method44()
                let v44 : (char list -> (UH0 -> UH0)) = v42 v43
                let v45 : (UH0 -> UH0) = v44 v41
                let v46 : UH0 = UH0_0
                let v47 : UH0 = v45 v46
                let struct (v52 : System.Text.StringBuilder, v53 : int32, v54 : int32) = method45(v47, v2, v3, v4)
                US15_0(v19, v26, v52, v53, v54)
            else
                let v56 : char list = []
                let v57 : char list = ''' :: v56 
                let v60 : char list = '"' :: v57 
                let v63 : (char list -> (char [])) = List.toArray
                let v64 : (char []) = v63 v60
                let v67 : string = $"parsing.none_of / unexpected char: '{v19}' / chars: %A{v64} / s: %A{struct (v2, v3, v4)}"
                US15_1(v67)
    let v82 : US15 =
        match v70 with
        | US15_1(v79) -> (* Error *)
            US15_1(v79)
        | US15_0(v71, v72, v73, v74, v75) -> (* Ok *)
            let v76 : bool = '\\' = v71
            let v77 : char =
                if v76 then
                    '/'
                else
                    v71
            US15_0(v77, v72, v73, v74, v75)
    match v82 with
    | US15_1(v94) -> (* Error *)
        US16_0(v0, v1, v2, v3, v4)
    | US15_0(v83, v84, v85, v86, v87) -> (* Ok *)
        let v88 : (char -> string) = _.ToString()
        let v89 : string = v88 v83
        let v92 : string = v0 + v89 
        method48(v92, v84, v85, v86, v87)
and method49 (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32, v4 : UH1) : US15 =
    match v4 with
    | UH1_1(v7, v8) -> (* Cons *)
        let v9 : US15 = v7 struct (v0, v1, v2, v3)
        match v9 with
        | US15_1(v15) -> (* Error *)
            method49(v0, v1, v2, v3, v8)
        | US15_0(v10, v11, v12, v13, v14) -> (* Ok *)
            v9
    | UH1_0 -> (* Nil *)
        let v5 : string = "choice / no parsers succeeded"
        US15_1(v5)
and method50 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 3L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v15 : US17 =
            if v3 then
                US17_0('"')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US17_0(''')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US17_0(' ')
                    else
                        let v11 : int64 = v8 - 1L
                        US17_1
        let v19 : char =
            match v15 with
            | US17_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US17_0(v16) -> (* Some *)
                v16
        let v20 : bool = v0 = v19
        if v20 then
            true
        else
            let v21 : int64 = v1 + 1L
            method50(v0, v21)
and method51 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US16 =
    let v5 : bool = "" = v1
    let v76 : US15 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = ' ' :: v6 
            let v10 : char list = ''' :: v7 
            let v13 : char list = '"' :: v10 
            let v16 : (char list -> (char [])) = List.toArray
            let v17 : (char []) = v16 v13
            let v20 : string = $"parsing.none_of / unexpected end of input / chars: %A{v17} / s: %A{struct (v2, v3, v4)}"
            US15_1(v20)
        else
            let v22 : char = v1.[int 0]
            let v23 : (string -> int32) = String.length
            let v24 : int32 = v23 v1
            let v25 : (int32 -> int32) = int32
            let v26 : int32 = v25 1
            let v27 : (int32 -> int32) = int32
            let v28 : int32 = v27 v24
            let v29 : string = v1.[int v26..int v28]
            let v30 : int64 = 0L
            let v31 : bool = method50(v22, v30)
            let v32 : bool = v31 = false
            if v32 then
                let v33 : (char -> string) = _.ToString()
                let v34 : string = v33 v22
                let v37 : int32 = v34.Length
                let v38 : (char []) = Array.zeroCreate<char> (v37)
                let v39 : Mut5 = {l0 = 0} : Mut5
                while method43(v37, v39) do
                    let v41 : int32 = v39.l0
                    let v42 : char = v34.[int v41]
                    v38.[int v41] <- v42
                    let v43 : int32 = v41 + 1
                    v39.l0 <- v43
                    ()
                let v44 : char list = v38 |> Array.toList
                let v45 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v46 : (char -> (UH0 -> UH0)) = method44()
                let v47 : (char list -> (UH0 -> UH0)) = v45 v46
                let v48 : (UH0 -> UH0) = v47 v44
                let v49 : UH0 = UH0_0
                let v50 : UH0 = v48 v49
                let struct (v55 : System.Text.StringBuilder, v56 : int32, v57 : int32) = method45(v50, v2, v3, v4)
                US15_0(v22, v29, v55, v56, v57)
            else
                let v59 : char list = []
                let v60 : char list = ' ' :: v59 
                let v63 : char list = ''' :: v60 
                let v66 : char list = '"' :: v63 
                let v69 : (char list -> (char [])) = List.toArray
                let v70 : (char []) = v69 v66
                let v73 : string = $"parsing.none_of / unexpected char: '{v22}' / chars: %A{v70} / s: %A{struct (v2, v3, v4)}"
                US15_1(v73)
    let v88 : US15 =
        match v76 with
        | US15_1(v85) -> (* Error *)
            US15_1(v85)
        | US15_0(v77, v78, v79, v80, v81) -> (* Ok *)
            let v82 : bool = '\\' = v77
            let v83 : char =
                if v82 then
                    '/'
                else
                    v77
            US15_0(v83, v78, v79, v80, v81)
    match v88 with
    | US15_1(v100) -> (* Error *)
        US16_0(v0, v1, v2, v3, v4)
    | US15_0(v89, v90, v91, v92, v93) -> (* Ok *)
        let v94 : (char -> string) = _.ToString()
        let v95 : string = v94 v89
        let v98 : string = v0 + v95 
        method51(v98, v90, v91, v92, v93)
and method52 (v0 : string, v1 : int32) : int32 =
    let v2 : int32 = v0.Length
    let v3 : bool = v1 >= v2
    if v3 then
        v1
    else
        let v4 : char = v0.[int v1]
        let v5 : bool = v4 = ' '
        if v5 then
            let v6 : int32 = v1 + 1
            method52(v0, v6)
        else
            v1
and method53 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US16 =
    let v5 : bool = "" = v1
    let v42 : US15 =
        if v5 then
            let v6 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v2, v3, v4)}"
            US15_1(v6)
        else
            let v8 : char = v1.[int 0]
            let v9 : (string -> int32) = String.length
            let v10 : int32 = v9 v1
            let v11 : (int32 -> int32) = int32
            let v12 : int32 = v11 1
            let v13 : (int32 -> int32) = int32
            let v14 : int32 = v13 v10
            let v15 : string = v1.[int v12..int v14]
            let v16 : (char -> string) = _.ToString()
            let v17 : string = v16 v8
            let v20 : int32 = v17.Length
            let v21 : (char []) = Array.zeroCreate<char> (v20)
            let v22 : Mut5 = {l0 = 0} : Mut5
            while method43(v20, v22) do
                let v24 : int32 = v22.l0
                let v25 : char = v17.[int v24]
                v21.[int v24] <- v25
                let v26 : int32 = v24 + 1
                v22.l0 <- v26
                ()
            let v27 : char list = v21 |> Array.toList
            let v28 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
            let v29 : (char -> (UH0 -> UH0)) = method44()
            let v30 : (char list -> (UH0 -> UH0)) = v28 v29
            let v31 : (UH0 -> UH0) = v30 v27
            let v32 : UH0 = UH0_0
            let v33 : UH0 = v31 v32
            let struct (v38 : System.Text.StringBuilder, v39 : int32, v40 : int32) = method45(v33, v2, v3, v4)
            US15_0(v8, v15, v38, v39, v40)
    match v42 with
    | US15_1(v54) -> (* Error *)
        US16_0(v0, v1, v2, v3, v4)
    | US15_0(v43, v44, v45, v46, v47) -> (* Ok *)
        let v48 : (char -> string) = _.ToString()
        let v49 : string = v48 v43
        let v52 : string = v0 + v49 
        method53(v52, v44, v45, v46, v47)
and method42 (v0 : string) : US14 =
    let mutable _v0 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v1 : (string -> string option) = Option.ofObj
    let v2 : string option = v1 v0
    v2 
    #else
    Some v0 
    #endif
    |> fun x -> _v0 <- Some x
    let v3 : string option = match _v0 with Some x -> x | None -> failwith "optionm'.of_obj / _v0=None"
    let v6 : string = ""
    let v7 : string = v3 |> Option.defaultValue v6 
    let v10 : (string -> System.Text.StringBuilder) = System.Text.StringBuilder 
    let v11 : System.Text.StringBuilder = v10 v6
    let v12 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US15) = closure16()
    let v13 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US15) = closure19()
    let v14 : UH1 = UH1_0
    let v15 : UH1 = UH1_1(v13, v14)
    let v16 : UH1 = UH1_1(v12, v15)
    let v17 : US15 = method46(v7, v11, v16)
    let v153 : US16 =
        match v17 with
        | US15_1(v150) -> (* Error *)
            US16_1(v150)
        | US15_0(v18, v19, v20, v21, v22) -> (* Ok *)
            let v23 : bool = "" = v19
            let v88 : US15 =
                if v23 then
                    let v24 : char list = []
                    let v25 : char list = ''' :: v24 
                    let v28 : char list = '"' :: v25 
                    let v31 : (char list -> (char [])) = List.toArray
                    let v32 : (char []) = v31 v28
                    let v35 : string = $"parsing.none_of / unexpected end of input / chars: %A{v32} / s: %A{struct (v20, v21, v22)}"
                    US15_1(v35)
                else
                    let v37 : char = v19.[int 0]
                    let v38 : (string -> int32) = String.length
                    let v39 : int32 = v38 v19
                    let v40 : (int32 -> int32) = int32
                    let v41 : int32 = v40 1
                    let v42 : (int32 -> int32) = int32
                    let v43 : int32 = v42 v39
                    let v44 : string = v19.[int v41..int v43]
                    let v45 : int64 = 0L
                    let v46 : bool = method47(v37, v45)
                    let v47 : bool = v46 = false
                    if v47 then
                        let v48 : (char -> string) = _.ToString()
                        let v49 : string = v48 v37
                        let v52 : int32 = v49.Length
                        let v53 : (char []) = Array.zeroCreate<char> (v52)
                        let v54 : Mut5 = {l0 = 0} : Mut5
                        while method43(v52, v54) do
                            let v56 : int32 = v54.l0
                            let v57 : char = v49.[int v56]
                            v53.[int v56] <- v57
                            let v58 : int32 = v56 + 1
                            v54.l0 <- v58
                            ()
                        let v59 : char list = v53 |> Array.toList
                        let v60 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v61 : (char -> (UH0 -> UH0)) = method44()
                        let v62 : (char list -> (UH0 -> UH0)) = v60 v61
                        let v63 : (UH0 -> UH0) = v62 v59
                        let v64 : UH0 = UH0_0
                        let v65 : UH0 = v63 v64
                        let struct (v70 : System.Text.StringBuilder, v71 : int32, v72 : int32) = method45(v65, v20, v21, v22)
                        US15_0(v37, v44, v70, v71, v72)
                    else
                        let v74 : char list = []
                        let v75 : char list = ''' :: v74 
                        let v78 : char list = '"' :: v75 
                        let v81 : (char list -> (char [])) = List.toArray
                        let v82 : (char []) = v81 v78
                        let v85 : string = $"parsing.none_of / unexpected char: '{v37}' / chars: %A{v82} / s: %A{struct (v20, v21, v22)}"
                        US15_1(v85)
            let v100 : US15 =
                match v88 with
                | US15_1(v97) -> (* Error *)
                    US15_1(v97)
                | US15_0(v89, v90, v91, v92, v93) -> (* Ok *)
                    let v94 : bool = '\\' = v89
                    let v95 : char =
                        if v94 then
                            '/'
                        else
                            v89
                    US15_0(v95, v90, v91, v92, v93)
            let v114 : US16 =
                match v100 with
                | US15_1(v101) -> (* Error *)
                    US16_1(v101)
                | US15_0(v103, v104, v105, v106, v107) -> (* Ok *)
                    let v108 : (char -> string) = _.ToString()
                    let v109 : string = v108 v103
                    method48(v109, v104, v105, v106, v107)
            let v124 : US16 =
                match v114 with
                | US16_1(v121) -> (* Error *)
                    US16_0(v6, v19, v20, v21, v22)
                | US16_0(v115, v116, v117, v118, v119) -> (* Ok *)
                    US16_0(v115, v116, v117, v118, v119)
            match v124 with
            | US16_1(v145) -> (* Error *)
                let v146 : string = "between / expected content"
                US16_1(v146)
            | US16_0(v125, v126, v127, v128, v129) -> (* Ok *)
                let v130 : UH1 = UH1_0
                let v131 : UH1 = UH1_1(v13, v130)
                let v132 : UH1 = UH1_1(v12, v131)
                let v133 : US15 = method49(v126, v127, v128, v129, v132)
                match v133 with
                | US15_1(v140) -> (* Error *)
                    let v141 : string = $"between / expected closing delimiter / e: %A{v140} / input: %A{struct (v7, v11, 1, 1)} / rest1: %A{struct (v19, v20, v21, v22)} / rest2: %A{struct (v126, v127, v128, v129)}"
                    US16_1(v141)
                | US15_0(v134, v135, v136, v137, v138) -> (* Ok *)
                    US16_0(v125, v135, v136, v137, v138)
    let v303 : US16 =
        match v153 with
        | US16_1(v159) -> (* Error *)
            let v160 : bool = "" = v7
            let v233 : US15 =
                if v160 then
                    let v161 : char list = []
                    let v162 : char list = ' ' :: v161 
                    let v165 : char list = ''' :: v162 
                    let v168 : char list = '"' :: v165 
                    let v171 : (char list -> (char [])) = List.toArray
                    let v172 : (char []) = v171 v168
                    let v175 : string = $"parsing.none_of / unexpected end of input / chars: %A{v172} / s: %A{struct (v11, 1, 1)}"
                    US15_1(v175)
                else
                    let v177 : char = v7.[int 0]
                    let v178 : (string -> int32) = String.length
                    let v179 : int32 = v178 v7
                    let v180 : (int32 -> int32) = int32
                    let v181 : int32 = v180 1
                    let v182 : (int32 -> int32) = int32
                    let v183 : int32 = v182 v179
                    let v184 : string = v7.[int v181..int v183]
                    let v185 : int64 = 0L
                    let v186 : bool = method50(v177, v185)
                    let v187 : bool = v186 = false
                    if v187 then
                        let v188 : (char -> string) = _.ToString()
                        let v189 : string = v188 v177
                        let v192 : int32 = v189.Length
                        let v193 : (char []) = Array.zeroCreate<char> (v192)
                        let v194 : Mut5 = {l0 = 0} : Mut5
                        while method43(v192, v194) do
                            let v196 : int32 = v194.l0
                            let v197 : char = v189.[int v196]
                            v193.[int v196] <- v197
                            let v198 : int32 = v196 + 1
                            v194.l0 <- v198
                            ()
                        let v199 : char list = v193 |> Array.toList
                        let v200 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v201 : (char -> (UH0 -> UH0)) = method44()
                        let v202 : (char list -> (UH0 -> UH0)) = v200 v201
                        let v203 : (UH0 -> UH0) = v202 v199
                        let v204 : UH0 = UH0_0
                        let v205 : UH0 = v203 v204
                        let v210 : int32 = 1
                        let v211 : int32 = 1
                        let struct (v212 : System.Text.StringBuilder, v213 : int32, v214 : int32) = method45(v205, v11, v210, v211)
                        US15_0(v177, v184, v212, v213, v214)
                    else
                        let v216 : char list = []
                        let v217 : char list = ' ' :: v216 
                        let v220 : char list = ''' :: v217 
                        let v223 : char list = '"' :: v220 
                        let v226 : (char list -> (char [])) = List.toArray
                        let v227 : (char []) = v226 v223
                        let v230 : string = $"parsing.none_of / unexpected char: '{v177}' / chars: %A{v227} / s: %A{struct (v11, 1, 1)}"
                        US15_1(v230)
            let v245 : US15 =
                match v233 with
                | US15_1(v242) -> (* Error *)
                    US15_1(v242)
                | US15_0(v234, v235, v236, v237, v238) -> (* Ok *)
                    let v239 : bool = '\\' = v234
                    let v240 : char =
                        if v239 then
                            '/'
                        else
                            v234
                    US15_0(v240, v235, v236, v237, v238)
            let v259 : US16 =
                match v245 with
                | US15_1(v246) -> (* Error *)
                    US16_1(v246)
                | US15_0(v248, v249, v250, v251, v252) -> (* Ok *)
                    let v253 : (char -> string) = _.ToString()
                    let v254 : string = v253 v248
                    method51(v254, v249, v250, v251, v252)
            match v259 with
            | US16_1(v265) -> (* Error *)
                let v266 : int32 = v7.Length
                let v267 : bool = v266 = 0
                let v271 : US18 =
                    if v267 then
                        US18_0(v7, v11, 1, 1)
                    else
                        let v269 : string = $"parsing.eof / expected end of input / input: %A{v7}"
                        US18_1(v269)
                let v280 : US16 =
                    match v271 with
                    | US18_1(v277) -> (* Error *)
                        US16_1(v277)
                    | US18_0(v272, v273, v274, v275) -> (* Ok *)
                        US16_0(v6, v272, v273, v274, v275)
                match v280 with
                | US16_1(v296) -> (* Error *)
                    US16_1(v296)
                | US16_0(v281, v282, v283, v284, v285) -> (* Ok *)
                    let v286 : int32 = 0
                    let v287 : int32 = method52(v282, v286)
                    let v288 : (string -> int32) = String.length
                    let v289 : int32 = v288 v282
                    let v290 : (int32 -> int32) = int32
                    let v291 : int32 = v290 v287
                    let v292 : (int32 -> int32) = int32
                    let v293 : int32 = v292 v289
                    let v294 : string = v282.[int v291..int v293]
                    US16_0(v281, v294, v283, v284, v285)
            | US16_0(v260, v261, v262, v263, v264) -> (* Ok *)
                v259
        | US16_0(v154, v155, v156, v157, v158) -> (* Ok *)
            v153
    let v471 : US19 =
        match v303 with
        | US16_1(v468) -> (* Error *)
            US19_1(v468)
        | US16_0(v304, v305, v306, v307, v308) -> (* Ok *)
            let v309 : bool = "" = v305
            let v372 : US15 =
                if v309 then
                    let v310 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v306, v307, v308)}"
                    US15_1(v310)
                else
                    let v312 : char = v305.[int 0]
                    let v313 : bool = v312 = ' '
                    if v313 then
                        let v314 : (string -> int32) = String.length
                        let v315 : int32 = v314 v305
                        let v316 : (int32 -> int32) = int32
                        let v317 : int32 = v316 1
                        let v318 : (int32 -> int32) = int32
                        let v319 : int32 = v318 v315
                        let v320 : string = v305.[int v317..int v319]
                        let v321 : (char -> string) = _.ToString()
                        let v322 : string = v321 v312
                        let v325 : int32 = v322.Length
                        let v326 : (char []) = Array.zeroCreate<char> (v325)
                        let v327 : Mut5 = {l0 = 0} : Mut5
                        while method43(v325, v327) do
                            let v329 : int32 = v327.l0
                            let v330 : char = v322.[int v329]
                            v326.[int v329] <- v330
                            let v331 : int32 = v329 + 1
                            v327.l0 <- v331
                            ()
                        let v332 : char list = v326 |> Array.toList
                        let v333 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v334 : (char -> (UH0 -> UH0)) = method44()
                        let v335 : (char list -> (UH0 -> UH0)) = v333 v334
                        let v336 : (UH0 -> UH0) = v335 v332
                        let v337 : UH0 = UH0_0
                        let v338 : UH0 = v336 v337
                        let struct (v343 : System.Text.StringBuilder, v344 : int32, v345 : int32) = method45(v338, v306, v307, v308)
                        US15_0(v312, v320, v343, v344, v345)
                    else
                        let v347 : (string -> int32) = String.length
                        let v348 : int32 = v347 v305
                        let v349 : string = "\n"
                        let v350 : int32 = v305.IndexOf v349 
                        let v351 : int32 = v350 - 1
                        let v352 : bool = -2 = v351
                        let v353 : int32 =
                            if v352 then
                                v348
                            else
                                v351
                        let v354 : (int32 -> int32) = int32
                        let v355 : int32 = v354 0
                        let v356 : (int32 -> int32) = int32
                        let v357 : int32 = v356 v353
                        let v358 : string = v305.[int v355..int v357]
                        let v359 : string = $"parsing.p_char / expected: '{' '}' / line: {v307} / col: {v308}
{v306}{v358}"
                        let v360 : int32 = v308 - 1
                        let v361 : (int32 -> (string -> string)) = String.replicate
                        let v362 : (string -> string) = v361 v360
                        let v363 : string = " "
                        let v364 : string = v362 v363
                        let v367 : string = "^"
                        let v368 : string = v364 + v367 
                        let v369 : string = $"{v359}
{v368}
"
                        US15_1(v369)
            let v384 : US20 =
                match v372 with
                | US15_1(v380) -> (* Error *)
                    let v381 : US17 = US17_1
                    US20_0(v381, v305, v306, v307, v308)
                | US15_0(v373, v374, v375, v376, v377) -> (* Ok *)
                    let v378 : US17 = US17_0(v373)
                    US20_0(v378, v374, v375, v376, v377)
            let v445 : US16 =
                match v384 with
                | US20_1(v442) -> (* Error *)
                    US16_1(v442)
                | US20_0(v385, v386, v387, v388, v389) -> (* Ok *)
                    let v390 : bool = "" = v386
                    let v427 : US15 =
                        if v390 then
                            let v391 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v387, v388, v389)}"
                            US15_1(v391)
                        else
                            let v393 : char = v386.[int 0]
                            let v394 : (string -> int32) = String.length
                            let v395 : int32 = v394 v386
                            let v396 : (int32 -> int32) = int32
                            let v397 : int32 = v396 1
                            let v398 : (int32 -> int32) = int32
                            let v399 : int32 = v398 v395
                            let v400 : string = v386.[int v397..int v399]
                            let v401 : (char -> string) = _.ToString()
                            let v402 : string = v401 v393
                            let v405 : int32 = v402.Length
                            let v406 : (char []) = Array.zeroCreate<char> (v405)
                            let v407 : Mut5 = {l0 = 0} : Mut5
                            while method43(v405, v407) do
                                let v409 : int32 = v407.l0
                                let v410 : char = v402.[int v409]
                                v406.[int v409] <- v410
                                let v411 : int32 = v409 + 1
                                v407.l0 <- v411
                                ()
                            let v412 : char list = v406 |> Array.toList
                            let v413 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                            let v414 : (char -> (UH0 -> UH0)) = method44()
                            let v415 : (char list -> (UH0 -> UH0)) = v413 v414
                            let v416 : (UH0 -> UH0) = v415 v412
                            let v417 : UH0 = UH0_0
                            let v418 : UH0 = v416 v417
                            let struct (v423 : System.Text.StringBuilder, v424 : int32, v425 : int32) = method45(v418, v387, v388, v389)
                            US15_0(v393, v400, v423, v424, v425)
                    match v427 with
                    | US15_1(v428) -> (* Error *)
                        US16_1(v428)
                    | US15_0(v430, v431, v432, v433, v434) -> (* Ok *)
                        let v435 : (char -> string) = _.ToString()
                        let v436 : string = v435 v430
                        method53(v436, v431, v432, v433, v434)
            let v457 : US21 =
                match v445 with
                | US16_1(v453) -> (* Error *)
                    let v454 : US1 = US1_1
                    US21_0(v454, v305, v306, v307, v308)
                | US16_0(v446, v447, v448, v449, v450) -> (* Ok *)
                    let v451 : US1 = US1_0(v446)
                    US21_0(v451, v447, v448, v449, v450)
            match v457 with
            | US21_1(v464) -> (* Error *)
                US19_1(v464)
            | US21_0(v458, v459, v460, v461, v462) -> (* Ok *)
                US19_0(v304, v458, v459, v460, v461, v462)
    match v471 with
    | US19_1(v479) -> (* Error *)
        US14_1(v479)
    | US19_0(v472, v473, v474, v475, v476, v477) -> (* Ok *)
        US14_0(v472, v473)
and method56 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 4L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v19 : US17 =
            if v3 then
                US17_0('\\')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US17_0('`')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US17_0('"')
                    else
                        let v11 : int64 = v8 - 1L
                        let v12 : bool = v11 = 0L
                        if v12 then
                            US17_0(' ')
                        else
                            let v14 : int64 = v11 - 1L
                            US17_1
        let v23 : char =
            match v19 with
            | US17_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US17_0(v20) -> (* Some *)
                v20
        let v24 : bool = v0 = v23
        if v24 then
            true
        else
            let v25 : int64 = v1 + 1L
            method56(v0, v25)
and method57 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US16 =
    let v5 : bool = "" = v1
    let v82 : US15 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = ' ' :: v6 
            let v10 : char list = '"' :: v7 
            let v13 : char list = '`' :: v10 
            let v16 : char list = '\\' :: v13 
            let v19 : (char list -> (char [])) = List.toArray
            let v20 : (char []) = v19 v16
            let v23 : string = $"parsing.none_of / unexpected end of input / chars: %A{v20} / s: %A{struct (v2, v3, v4)}"
            US15_1(v23)
        else
            let v25 : char = v1.[int 0]
            let v26 : (string -> int32) = String.length
            let v27 : int32 = v26 v1
            let v28 : (int32 -> int32) = int32
            let v29 : int32 = v28 1
            let v30 : (int32 -> int32) = int32
            let v31 : int32 = v30 v27
            let v32 : string = v1.[int v29..int v31]
            let v33 : int64 = 0L
            let v34 : bool = method56(v25, v33)
            let v35 : bool = v34 = false
            if v35 then
                let v36 : (char -> string) = _.ToString()
                let v37 : string = v36 v25
                let v40 : int32 = v37.Length
                let v41 : (char []) = Array.zeroCreate<char> (v40)
                let v42 : Mut5 = {l0 = 0} : Mut5
                while method43(v40, v42) do
                    let v44 : int32 = v42.l0
                    let v45 : char = v37.[int v44]
                    v41.[int v44] <- v45
                    let v46 : int32 = v44 + 1
                    v42.l0 <- v46
                    ()
                let v47 : char list = v41 |> Array.toList
                let v48 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v49 : (char -> (UH0 -> UH0)) = method44()
                let v50 : (char list -> (UH0 -> UH0)) = v48 v49
                let v51 : (UH0 -> UH0) = v50 v47
                let v52 : UH0 = UH0_0
                let v53 : UH0 = v51 v52
                let struct (v58 : System.Text.StringBuilder, v59 : int32, v60 : int32) = method45(v53, v2, v3, v4)
                US15_0(v25, v32, v58, v59, v60)
            else
                let v62 : char list = []
                let v63 : char list = ' ' :: v62 
                let v66 : char list = '"' :: v63 
                let v69 : char list = '`' :: v66 
                let v72 : char list = '\\' :: v69 
                let v75 : (char list -> (char [])) = List.toArray
                let v76 : (char []) = v75 v72
                let v79 : string = $"parsing.none_of / unexpected char: '{v25}' / chars: %A{v76} / s: %A{struct (v2, v3, v4)}"
                US15_1(v79)
    match v82 with
    | US15_1(v94) -> (* Error *)
        US16_0(v0, v1, v2, v3, v4)
    | US15_0(v83, v84, v85, v86, v87) -> (* Ok *)
        let v88 : (char -> string) = _.ToString()
        let v89 : string = v88 v83
        let v92 : string = v0 + v89 
        method57(v92, v84, v85, v86, v87)
and method59 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 3L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v15 : US17 =
            if v3 then
                US17_0('\\')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US17_0('`')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US17_0('"')
                    else
                        let v11 : int64 = v8 - 1L
                        US17_1
        let v19 : char =
            match v15 with
            | US17_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US17_0(v16) -> (* Some *)
                v16
        let v20 : bool = v0 = v19
        if v20 then
            true
        else
            let v21 : int64 = v1 + 1L
            method59(v0, v21)
and closure20 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US16 =
    let v4 : bool = "" = v0
    let v67 : US15 =
        if v4 then
            let v5 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v1, v2, v3)}"
            US15_1(v5)
        else
            let v7 : char = v0.[int 0]
            let v8 : bool = v7 = '\\'
            if v8 then
                let v9 : (string -> int32) = String.length
                let v10 : int32 = v9 v0
                let v11 : (int32 -> int32) = int32
                let v12 : int32 = v11 1
                let v13 : (int32 -> int32) = int32
                let v14 : int32 = v13 v10
                let v15 : string = v0.[int v12..int v14]
                let v16 : (char -> string) = _.ToString()
                let v17 : string = v16 v7
                let v20 : int32 = v17.Length
                let v21 : (char []) = Array.zeroCreate<char> (v20)
                let v22 : Mut5 = {l0 = 0} : Mut5
                while method43(v20, v22) do
                    let v24 : int32 = v22.l0
                    let v25 : char = v17.[int v24]
                    v21.[int v24] <- v25
                    let v26 : int32 = v24 + 1
                    v22.l0 <- v26
                    ()
                let v27 : char list = v21 |> Array.toList
                let v28 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v29 : (char -> (UH0 -> UH0)) = method44()
                let v30 : (char list -> (UH0 -> UH0)) = v28 v29
                let v31 : (UH0 -> UH0) = v30 v27
                let v32 : UH0 = UH0_0
                let v33 : UH0 = v31 v32
                let struct (v38 : System.Text.StringBuilder, v39 : int32, v40 : int32) = method45(v33, v1, v2, v3)
                US15_0(v7, v15, v38, v39, v40)
            else
                let v42 : (string -> int32) = String.length
                let v43 : int32 = v42 v0
                let v44 : string = "\n"
                let v45 : int32 = v0.IndexOf v44 
                let v46 : int32 = v45 - 1
                let v47 : bool = -2 = v46
                let v48 : int32 =
                    if v47 then
                        v43
                    else
                        v46
                let v49 : (int32 -> int32) = int32
                let v50 : int32 = v49 0
                let v51 : (int32 -> int32) = int32
                let v52 : int32 = v51 v48
                let v53 : string = v0.[int v50..int v52]
                let v54 : string = $"parsing.p_char / expected: '{'\\'}' / line: {v2} / col: {v3}
{v1}{v53}"
                let v55 : int32 = v3 - 1
                let v56 : (int32 -> (string -> string)) = String.replicate
                let v57 : (string -> string) = v56 v55
                let v58 : string = " "
                let v59 : string = v57 v58
                let v62 : string = "^"
                let v63 : string = v59 + v62 
                let v64 : string = $"{v54}
{v63}
"
                US15_1(v64)
    let v114 : US15 =
        match v67 with
        | US15_1(v111) -> (* Error *)
            US15_1(v111)
        | US15_0(v68, v69, v70, v71, v72) -> (* Ok *)
            let v73 : bool = "" = v69
            if v73 then
                let v74 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v70, v71, v72)}"
                US15_1(v74)
            else
                let v76 : char = v69.[int 0]
                let v77 : (string -> int32) = String.length
                let v78 : int32 = v77 v69
                let v79 : (int32 -> int32) = int32
                let v80 : int32 = v79 1
                let v81 : (int32 -> int32) = int32
                let v82 : int32 = v81 v78
                let v83 : string = v69.[int v80..int v82]
                let v84 : (char -> string) = _.ToString()
                let v85 : string = v84 v76
                let v88 : int32 = v85.Length
                let v89 : (char []) = Array.zeroCreate<char> (v88)
                let v90 : Mut5 = {l0 = 0} : Mut5
                while method43(v88, v90) do
                    let v92 : int32 = v90.l0
                    let v93 : char = v85.[int v92]
                    v89.[int v92] <- v93
                    let v94 : int32 = v92 + 1
                    v90.l0 <- v94
                    ()
                let v95 : char list = v89 |> Array.toList
                let v96 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v97 : (char -> (UH0 -> UH0)) = method44()
                let v98 : (char list -> (UH0 -> UH0)) = v96 v97
                let v99 : (UH0 -> UH0) = v98 v95
                let v100 : UH0 = UH0_0
                let v101 : UH0 = v99 v100
                let struct (v106 : System.Text.StringBuilder, v107 : int32, v108 : int32) = method45(v101, v70, v71, v72)
                US15_0(v76, v83, v106, v107, v108)
    match v114 with
    | US15_1(v122) -> (* Error *)
        US16_1(v122)
    | US15_0(v115, v116, v117, v118, v119) -> (* Ok *)
        let v120 : string = $"{'\\'}{v115}"
        US16_0(v120, v116, v117, v118, v119)
and closure21 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US16 =
    let v4 : bool = "" = v0
    let v67 : US15 =
        if v4 then
            let v5 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v1, v2, v3)}"
            US15_1(v5)
        else
            let v7 : char = v0.[int 0]
            let v8 : bool = v7 = '`'
            if v8 then
                let v9 : (string -> int32) = String.length
                let v10 : int32 = v9 v0
                let v11 : (int32 -> int32) = int32
                let v12 : int32 = v11 1
                let v13 : (int32 -> int32) = int32
                let v14 : int32 = v13 v10
                let v15 : string = v0.[int v12..int v14]
                let v16 : (char -> string) = _.ToString()
                let v17 : string = v16 v7
                let v20 : int32 = v17.Length
                let v21 : (char []) = Array.zeroCreate<char> (v20)
                let v22 : Mut5 = {l0 = 0} : Mut5
                while method43(v20, v22) do
                    let v24 : int32 = v22.l0
                    let v25 : char = v17.[int v24]
                    v21.[int v24] <- v25
                    let v26 : int32 = v24 + 1
                    v22.l0 <- v26
                    ()
                let v27 : char list = v21 |> Array.toList
                let v28 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v29 : (char -> (UH0 -> UH0)) = method44()
                let v30 : (char list -> (UH0 -> UH0)) = v28 v29
                let v31 : (UH0 -> UH0) = v30 v27
                let v32 : UH0 = UH0_0
                let v33 : UH0 = v31 v32
                let struct (v38 : System.Text.StringBuilder, v39 : int32, v40 : int32) = method45(v33, v1, v2, v3)
                US15_0(v7, v15, v38, v39, v40)
            else
                let v42 : (string -> int32) = String.length
                let v43 : int32 = v42 v0
                let v44 : string = "\n"
                let v45 : int32 = v0.IndexOf v44 
                let v46 : int32 = v45 - 1
                let v47 : bool = -2 = v46
                let v48 : int32 =
                    if v47 then
                        v43
                    else
                        v46
                let v49 : (int32 -> int32) = int32
                let v50 : int32 = v49 0
                let v51 : (int32 -> int32) = int32
                let v52 : int32 = v51 v48
                let v53 : string = v0.[int v50..int v52]
                let v54 : string = $"parsing.p_char / expected: '{'`'}' / line: {v2} / col: {v3}
{v1}{v53}"
                let v55 : int32 = v3 - 1
                let v56 : (int32 -> (string -> string)) = String.replicate
                let v57 : (string -> string) = v56 v55
                let v58 : string = " "
                let v59 : string = v57 v58
                let v62 : string = "^"
                let v63 : string = v59 + v62 
                let v64 : string = $"{v54}
{v63}
"
                US15_1(v64)
    let v114 : US15 =
        match v67 with
        | US15_1(v111) -> (* Error *)
            US15_1(v111)
        | US15_0(v68, v69, v70, v71, v72) -> (* Ok *)
            let v73 : bool = "" = v69
            if v73 then
                let v74 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v70, v71, v72)}"
                US15_1(v74)
            else
                let v76 : char = v69.[int 0]
                let v77 : (string -> int32) = String.length
                let v78 : int32 = v77 v69
                let v79 : (int32 -> int32) = int32
                let v80 : int32 = v79 1
                let v81 : (int32 -> int32) = int32
                let v82 : int32 = v81 v78
                let v83 : string = v69.[int v80..int v82]
                let v84 : (char -> string) = _.ToString()
                let v85 : string = v84 v76
                let v88 : int32 = v85.Length
                let v89 : (char []) = Array.zeroCreate<char> (v88)
                let v90 : Mut5 = {l0 = 0} : Mut5
                while method43(v88, v90) do
                    let v92 : int32 = v90.l0
                    let v93 : char = v85.[int v92]
                    v89.[int v92] <- v93
                    let v94 : int32 = v92 + 1
                    v90.l0 <- v94
                    ()
                let v95 : char list = v89 |> Array.toList
                let v96 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v97 : (char -> (UH0 -> UH0)) = method44()
                let v98 : (char list -> (UH0 -> UH0)) = v96 v97
                let v99 : (UH0 -> UH0) = v98 v95
                let v100 : UH0 = UH0_0
                let v101 : UH0 = v99 v100
                let struct (v106 : System.Text.StringBuilder, v107 : int32, v108 : int32) = method45(v101, v70, v71, v72)
                US15_0(v76, v83, v106, v107, v108)
    match v114 with
    | US15_1(v122) -> (* Error *)
        US16_1(v122)
    | US15_0(v115, v116, v117, v118, v119) -> (* Ok *)
        let v120 : string = $"{'`'}{v115}"
        US16_0(v120, v116, v117, v118, v119)
and method60 (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32, v4 : UH3) : US16 =
    match v4 with
    | UH3_1(v7, v8) -> (* Cons *)
        let v9 : US16 = v7 struct (v0, v1, v2, v3)
        match v9 with
        | US16_1(v15) -> (* Error *)
            method60(v0, v1, v2, v3, v8)
        | US16_0(v10, v11, v12, v13, v14) -> (* Ok *)
            v9
    | UH3_0 -> (* Nil *)
        let v5 : string = "choice / no parsers succeeded"
        US16_1(v5)
and method61 (v0 : UH2, v1 : UH2) : UH2 =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : UH2 = UH2_1(v2, v1)
        method61(v3, v4)
    | UH2_0 -> (* Nil *)
        v1
and method58 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US23 =
    let v5 : bool = "" = v1
    let v76 : US15 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = '"' :: v6 
            let v10 : char list = '`' :: v7 
            let v13 : char list = '\\' :: v10 
            let v16 : (char list -> (char [])) = List.toArray
            let v17 : (char []) = v16 v13
            let v20 : string = $"parsing.none_of / unexpected end of input / chars: %A{v17} / s: %A{struct (v2, v3, v4)}"
            US15_1(v20)
        else
            let v22 : char = v1.[int 0]
            let v23 : (string -> int32) = String.length
            let v24 : int32 = v23 v1
            let v25 : (int32 -> int32) = int32
            let v26 : int32 = v25 1
            let v27 : (int32 -> int32) = int32
            let v28 : int32 = v27 v24
            let v29 : string = v1.[int v26..int v28]
            let v30 : int64 = 0L
            let v31 : bool = method59(v22, v30)
            let v32 : bool = v31 = false
            if v32 then
                let v33 : (char -> string) = _.ToString()
                let v34 : string = v33 v22
                let v37 : int32 = v34.Length
                let v38 : (char []) = Array.zeroCreate<char> (v37)
                let v39 : Mut5 = {l0 = 0} : Mut5
                while method43(v37, v39) do
                    let v41 : int32 = v39.l0
                    let v42 : char = v34.[int v41]
                    v38.[int v41] <- v42
                    let v43 : int32 = v41 + 1
                    v39.l0 <- v43
                    ()
                let v44 : char list = v38 |> Array.toList
                let v45 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v46 : (char -> (UH0 -> UH0)) = method44()
                let v47 : (char list -> (UH0 -> UH0)) = v45 v46
                let v48 : (UH0 -> UH0) = v47 v44
                let v49 : UH0 = UH0_0
                let v50 : UH0 = v48 v49
                let struct (v55 : System.Text.StringBuilder, v56 : int32, v57 : int32) = method45(v50, v2, v3, v4)
                US15_0(v22, v29, v55, v56, v57)
            else
                let v59 : char list = []
                let v60 : char list = '"' :: v59 
                let v63 : char list = '`' :: v60 
                let v66 : char list = '\\' :: v63 
                let v69 : (char list -> (char [])) = List.toArray
                let v70 : (char []) = v69 v66
                let v73 : string = $"parsing.none_of / unexpected char: '{v22}' / chars: %A{v70} / s: %A{struct (v2, v3, v4)}"
                US15_1(v73)
    let v90 : US16 =
        match v76 with
        | US15_1(v87) -> (* Error *)
            US16_1(v87)
        | US15_0(v77, v78, v79, v80, v81) -> (* Ok *)
            let v82 : (char -> string) = _.ToString()
            let v83 : string = v82 v77
            US16_0(v83, v78, v79, v80, v81)
    let v104 : US16 =
        match v90 with
        | US16_1(v96) -> (* Error *)
            let v97 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) = closure20()
            let v98 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) = closure21()
            let v99 : UH3 = UH3_0
            let v100 : UH3 = UH3_1(v98, v99)
            let v101 : UH3 = UH3_1(v97, v100)
            method60(v1, v2, v3, v4, v101)
        | US16_0(v91, v92, v93, v94, v95) -> (* Ok *)
            v90
    match v104 with
    | US16_1(v112) -> (* Error *)
        let v113 : UH2 = UH2_0
        let v114 : UH2 = method61(v0, v113)
        US23_0(v114, v1, v2, v3, v4)
    | US16_0(v105, v106, v107, v108, v109) -> (* Ok *)
        let v110 : UH2 = UH2_1(v105, v0)
        method58(v110, v106, v107, v108, v109)
and method62 (v0 : UH2, v1 : string list) : string list =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : string list = method62(v3, v1)
        let v5 : string list = v2 :: v4 
        v5
    | UH2_0 -> (* Nil *)
        v1
and method63 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US23 =
    let v5 : bool = "" = v1
    let v76 : US15 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = '"' :: v6 
            let v10 : char list = '`' :: v7 
            let v13 : char list = '\\' :: v10 
            let v16 : (char list -> (char [])) = List.toArray
            let v17 : (char []) = v16 v13
            let v20 : string = $"parsing.none_of / unexpected end of input / chars: %A{v17} / s: %A{struct (v2, v3, v4)}"
            US15_1(v20)
        else
            let v22 : char = v1.[int 0]
            let v23 : (string -> int32) = String.length
            let v24 : int32 = v23 v1
            let v25 : (int32 -> int32) = int32
            let v26 : int32 = v25 1
            let v27 : (int32 -> int32) = int32
            let v28 : int32 = v27 v24
            let v29 : string = v1.[int v26..int v28]
            let v30 : int64 = 0L
            let v31 : bool = method59(v22, v30)
            let v32 : bool = v31 = false
            if v32 then
                let v33 : (char -> string) = _.ToString()
                let v34 : string = v33 v22
                let v37 : int32 = v34.Length
                let v38 : (char []) = Array.zeroCreate<char> (v37)
                let v39 : Mut5 = {l0 = 0} : Mut5
                while method43(v37, v39) do
                    let v41 : int32 = v39.l0
                    let v42 : char = v34.[int v41]
                    v38.[int v41] <- v42
                    let v43 : int32 = v41 + 1
                    v39.l0 <- v43
                    ()
                let v44 : char list = v38 |> Array.toList
                let v45 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v46 : (char -> (UH0 -> UH0)) = method44()
                let v47 : (char list -> (UH0 -> UH0)) = v45 v46
                let v48 : (UH0 -> UH0) = v47 v44
                let v49 : UH0 = UH0_0
                let v50 : UH0 = v48 v49
                let struct (v55 : System.Text.StringBuilder, v56 : int32, v57 : int32) = method45(v50, v2, v3, v4)
                US15_0(v22, v29, v55, v56, v57)
            else
                let v59 : char list = []
                let v60 : char list = '"' :: v59 
                let v63 : char list = '`' :: v60 
                let v66 : char list = '\\' :: v63 
                let v69 : (char list -> (char [])) = List.toArray
                let v70 : (char []) = v69 v66
                let v73 : string = $"parsing.none_of / unexpected char: '{v22}' / chars: %A{v70} / s: %A{struct (v2, v3, v4)}"
                US15_1(v73)
    let v90 : US16 =
        match v76 with
        | US15_1(v87) -> (* Error *)
            US16_1(v87)
        | US15_0(v77, v78, v79, v80, v81) -> (* Ok *)
            let v82 : (char -> string) = _.ToString()
            let v83 : string = v82 v77
            US16_0(v83, v78, v79, v80, v81)
    match v90 with
    | US16_1(v98) -> (* Error *)
        let v99 : UH2 = UH2_0
        let v100 : UH2 = method61(v0, v99)
        US23_0(v100, v1, v2, v3, v4)
    | US16_0(v91, v92, v93, v94, v95) -> (* Ok *)
        let v96 : UH2 = UH2_1(v91, v0)
        method63(v96, v92, v93, v94, v95)
and method64 (v0 : string, v1 : int32) : int32 =
    let v2 : int32 = v0.Length
    let v3 : bool = v1 >= v2
    if v3 then
        v1
    else
        let v4 : char = v0.[int v1]
        let v5 : bool = v4 = ' '
        if v5 then
            let v6 : int32 = v1 + 1
            method64(v0, v6)
        else
            v1
and method55 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US23 =
    let v5 : bool = "" = v1
    let v82 : US15 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = ' ' :: v6 
            let v10 : char list = '"' :: v7 
            let v13 : char list = '`' :: v10 
            let v16 : char list = '\\' :: v13 
            let v19 : (char list -> (char [])) = List.toArray
            let v20 : (char []) = v19 v16
            let v23 : string = $"parsing.none_of / unexpected end of input / chars: %A{v20} / s: %A{struct (v2, v3, v4)}"
            US15_1(v23)
        else
            let v25 : char = v1.[int 0]
            let v26 : (string -> int32) = String.length
            let v27 : int32 = v26 v1
            let v28 : (int32 -> int32) = int32
            let v29 : int32 = v28 1
            let v30 : (int32 -> int32) = int32
            let v31 : int32 = v30 v27
            let v32 : string = v1.[int v29..int v31]
            let v33 : int64 = 0L
            let v34 : bool = method56(v25, v33)
            let v35 : bool = v34 = false
            if v35 then
                let v36 : (char -> string) = _.ToString()
                let v37 : string = v36 v25
                let v40 : int32 = v37.Length
                let v41 : (char []) = Array.zeroCreate<char> (v40)
                let v42 : Mut5 = {l0 = 0} : Mut5
                while method43(v40, v42) do
                    let v44 : int32 = v42.l0
                    let v45 : char = v37.[int v44]
                    v41.[int v44] <- v45
                    let v46 : int32 = v44 + 1
                    v42.l0 <- v46
                    ()
                let v47 : char list = v41 |> Array.toList
                let v48 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v49 : (char -> (UH0 -> UH0)) = method44()
                let v50 : (char list -> (UH0 -> UH0)) = v48 v49
                let v51 : (UH0 -> UH0) = v50 v47
                let v52 : UH0 = UH0_0
                let v53 : UH0 = v51 v52
                let struct (v58 : System.Text.StringBuilder, v59 : int32, v60 : int32) = method45(v53, v2, v3, v4)
                US15_0(v25, v32, v58, v59, v60)
            else
                let v62 : char list = []
                let v63 : char list = ' ' :: v62 
                let v66 : char list = '"' :: v63 
                let v69 : char list = '`' :: v66 
                let v72 : char list = '\\' :: v69 
                let v75 : (char list -> (char [])) = List.toArray
                let v76 : (char []) = v75 v72
                let v79 : string = $"parsing.none_of / unexpected char: '{v25}' / chars: %A{v76} / s: %A{struct (v2, v3, v4)}"
                US15_1(v79)
    let v96 : US16 =
        match v82 with
        | US15_1(v83) -> (* Error *)
            US16_1(v83)
        | US15_0(v85, v86, v87, v88, v89) -> (* Ok *)
            let v90 : (char -> string) = _.ToString()
            let v91 : string = v90 v85
            method57(v91, v86, v87, v88, v89)
    let v341 : US16 =
        match v96 with
        | US16_1(v102) -> (* Error *)
            let v165 : US15 =
                if v5 then
                    let v103 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v2, v3, v4)}"
                    US15_1(v103)
                else
                    let v105 : char = v1.[int 0]
                    let v106 : bool = v105 = '"'
                    if v106 then
                        let v107 : (string -> int32) = String.length
                        let v108 : int32 = v107 v1
                        let v109 : (int32 -> int32) = int32
                        let v110 : int32 = v109 1
                        let v111 : (int32 -> int32) = int32
                        let v112 : int32 = v111 v108
                        let v113 : string = v1.[int v110..int v112]
                        let v114 : (char -> string) = _.ToString()
                        let v115 : string = v114 v105
                        let v118 : int32 = v115.Length
                        let v119 : (char []) = Array.zeroCreate<char> (v118)
                        let v120 : Mut5 = {l0 = 0} : Mut5
                        while method43(v118, v120) do
                            let v122 : int32 = v120.l0
                            let v123 : char = v115.[int v122]
                            v119.[int v122] <- v123
                            let v124 : int32 = v122 + 1
                            v120.l0 <- v124
                            ()
                        let v125 : char list = v119 |> Array.toList
                        let v126 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v127 : (char -> (UH0 -> UH0)) = method44()
                        let v128 : (char list -> (UH0 -> UH0)) = v126 v127
                        let v129 : (UH0 -> UH0) = v128 v125
                        let v130 : UH0 = UH0_0
                        let v131 : UH0 = v129 v130
                        let struct (v136 : System.Text.StringBuilder, v137 : int32, v138 : int32) = method45(v131, v2, v3, v4)
                        US15_0(v105, v113, v136, v137, v138)
                    else
                        let v140 : (string -> int32) = String.length
                        let v141 : int32 = v140 v1
                        let v142 : string = "\n"
                        let v143 : int32 = v1.IndexOf v142 
                        let v144 : int32 = v143 - 1
                        let v145 : bool = -2 = v144
                        let v146 : int32 =
                            if v145 then
                                v141
                            else
                                v144
                        let v147 : (int32 -> int32) = int32
                        let v148 : int32 = v147 0
                        let v149 : (int32 -> int32) = int32
                        let v150 : int32 = v149 v146
                        let v151 : string = v1.[int v148..int v150]
                        let v152 : string = $"parsing.p_char / expected: '{'"'}' / line: {v3} / col: {v4}
{v2}{v151}"
                        let v153 : int32 = v4 - 1
                        let v154 : (int32 -> (string -> string)) = String.replicate
                        let v155 : (string -> string) = v154 v153
                        let v156 : string = " "
                        let v157 : string = v155 v156
                        let v160 : string = "^"
                        let v161 : string = v157 + v160 
                        let v162 : string = $"{v152}
{v161}
"
                        US15_1(v162)
            let v282 : US16 =
                match v165 with
                | US15_1(v279) -> (* Error *)
                    US16_1(v279)
                | US15_0(v166, v167, v168, v169, v170) -> (* Ok *)
                    let v171 : UH2 = UH2_0
                    let v172 : US23 = method58(v171, v167, v168, v169, v170)
                    let v193 : US16 =
                        match v172 with
                        | US23_1(v190) -> (* Error *)
                            US16_1(v190)
                        | US23_0(v173, v174, v175, v176, v177) -> (* Ok *)
                            let v178 : string list = []
                            let v179 : string list = method62(v173, v178)
                            let v180 : string seq = seq { for i = 0 to v179.Length - 1 do yield v179.[i] }
                            let v183 : (string -> (string seq -> string)) = String.concat
                            let v184 : string = ""
                            let v185 : (string seq -> string) = v183 v184
                            let v186 : string = v185 v180
                            US16_0(v186, v174, v175, v176, v177)
                    match v193 with
                    | US16_1(v274) -> (* Error *)
                        let v275 : string = "between / expected content"
                        US16_1(v275)
                    | US16_0(v194, v195, v196, v197, v198) -> (* Ok *)
                        let v199 : bool = "" = v195
                        let v262 : US15 =
                            if v199 then
                                let v200 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v196, v197, v198)}"
                                US15_1(v200)
                            else
                                let v202 : char = v195.[int 0]
                                let v203 : bool = v202 = '"'
                                if v203 then
                                    let v204 : (string -> int32) = String.length
                                    let v205 : int32 = v204 v195
                                    let v206 : (int32 -> int32) = int32
                                    let v207 : int32 = v206 1
                                    let v208 : (int32 -> int32) = int32
                                    let v209 : int32 = v208 v205
                                    let v210 : string = v195.[int v207..int v209]
                                    let v211 : (char -> string) = _.ToString()
                                    let v212 : string = v211 v202
                                    let v215 : int32 = v212.Length
                                    let v216 : (char []) = Array.zeroCreate<char> (v215)
                                    let v217 : Mut5 = {l0 = 0} : Mut5
                                    while method43(v215, v217) do
                                        let v219 : int32 = v217.l0
                                        let v220 : char = v212.[int v219]
                                        v216.[int v219] <- v220
                                        let v221 : int32 = v219 + 1
                                        v217.l0 <- v221
                                        ()
                                    let v222 : char list = v216 |> Array.toList
                                    let v223 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                                    let v224 : (char -> (UH0 -> UH0)) = method44()
                                    let v225 : (char list -> (UH0 -> UH0)) = v223 v224
                                    let v226 : (UH0 -> UH0) = v225 v222
                                    let v227 : UH0 = UH0_0
                                    let v228 : UH0 = v226 v227
                                    let struct (v233 : System.Text.StringBuilder, v234 : int32, v235 : int32) = method45(v228, v196, v197, v198)
                                    US15_0(v202, v210, v233, v234, v235)
                                else
                                    let v237 : (string -> int32) = String.length
                                    let v238 : int32 = v237 v195
                                    let v239 : string = "\n"
                                    let v240 : int32 = v195.IndexOf v239 
                                    let v241 : int32 = v240 - 1
                                    let v242 : bool = -2 = v241
                                    let v243 : int32 =
                                        if v242 then
                                            v238
                                        else
                                            v241
                                    let v244 : (int32 -> int32) = int32
                                    let v245 : int32 = v244 0
                                    let v246 : (int32 -> int32) = int32
                                    let v247 : int32 = v246 v243
                                    let v248 : string = v195.[int v245..int v247]
                                    let v249 : string = $"parsing.p_char / expected: '{'"'}' / line: {v197} / col: {v198}
{v196}{v248}"
                                    let v250 : int32 = v198 - 1
                                    let v251 : (int32 -> (string -> string)) = String.replicate
                                    let v252 : (string -> string) = v251 v250
                                    let v253 : string = " "
                                    let v254 : string = v252 v253
                                    let v257 : string = "^"
                                    let v258 : string = v254 + v257 
                                    let v259 : string = $"{v249}
{v258}
"
                                    US15_1(v259)
                        match v262 with
                        | US15_1(v269) -> (* Error *)
                            let v270 : string = $"between / expected closing delimiter / e: %A{v269} / input: %A{struct (v1, v2, v3, v4)} / rest1: %A{struct (v167, v168, v169, v170)} / rest2: %A{struct (v195, v196, v197, v198)}"
                            US16_1(v270)
                        | US15_0(v263, v264, v265, v266, v267) -> (* Ok *)
                            US16_0(v194, v264, v265, v266, v267)
            match v282 with
            | US16_1(v288) -> (* Error *)
                let v289 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) = closure20()
                let v290 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) = closure21()
                let v291 : UH3 = UH3_0
                let v292 : UH3 = UH3_1(v290, v291)
                let v293 : UH3 = UH3_1(v289, v292)
                let v294 : US16 = method60(v1, v2, v3, v4, v293)
                let v305 : US16 =
                    match v294 with
                    | US16_1(v302) -> (* Error *)
                        US16_1(v302)
                    | US16_0(v295, v296, v297, v298, v299) -> (* Ok *)
                        let v300 : string = ""
                        US16_0(v300, v296, v297, v298, v299)
                let v316 : US23 =
                    match v305 with
                    | US16_1(v313) -> (* Error *)
                        US23_1(v313)
                    | US16_0(v306, v307, v308, v309, v310) -> (* Ok *)
                        let v311 : UH2 = UH2_0
                        method63(v311, v307, v308, v309, v310)
                match v316 with
                | US23_1(v334) -> (* Error *)
                    US16_1(v334)
                | US23_0(v317, v318, v319, v320, v321) -> (* Ok *)
                    let v322 : string list = []
                    let v323 : string list = method62(v317, v322)
                    let v324 : string seq = seq { for i = 0 to v323.Length - 1 do yield v323.[i] }
                    let v327 : (string -> (string seq -> string)) = String.concat
                    let v328 : string = ""
                    let v329 : (string seq -> string) = v327 v328
                    let v330 : string = v329 v324
                    US16_0(v330, v318, v319, v320, v321)
            | US16_0(v283, v284, v285, v286, v287) -> (* Ok *)
                v282
        | US16_0(v97, v98, v99, v100, v101) -> (* Ok *)
            v96
    match v341 with
    | US16_1(v342) -> (* Error *)
        let v343 : UH2 = UH2_0
        let v344 : UH2 = method61(v0, v343)
        US23_0(v344, v1, v2, v3, v4)
    | US16_0(v346, v347, v348, v349, v350) -> (* Ok *)
        let v351 : int32 = 0
        let v352 : int32 = method64(v347, v351)
        let v353 : bool = 0 = v352
        let v364 : US18 =
            if v353 then
                let v354 : string = "spaces1 / expected at least one space"
                US18_1(v354)
            else
                let v356 : (string -> int32) = String.length
                let v357 : int32 = v356 v347
                let v358 : (int32 -> int32) = int32
                let v359 : int32 = v358 v352
                let v360 : (int32 -> int32) = int32
                let v361 : int32 = v360 v357
                let v362 : string = v347.[int v359..int v361]
                US18_0(v362, v348, v349, v350)
        match v364 with
        | US18_1(v365) -> (* Error *)
            let v366 : UH2 = UH2_0
            let v367 : UH2 = UH2_1(v346, v366)
            let v368 : UH2 = method61(v0, v367)
            US23_0(v368, v347, v348, v349, v350)
        | US18_0(v370, v371, v372, v373) -> (* Ok *)
            let v374 : UH2 = UH2_1(v346, v0)
            method55(v374, v370, v371, v372, v373)
and method54 (v0 : string) : US22 =
    let mutable _v0 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v1 : (string -> string option) = Option.ofObj
    let v2 : string option = v1 v0
    v2 
    #else
    Some v0 
    #endif
    |> fun x -> _v0 <- Some x
    let v3 : string option = match _v0 with Some x -> x | None -> failwith "optionm'.of_obj / _v0=None"
    let v6 : string = ""
    let v7 : string = v3 |> Option.defaultValue v6 
    let v10 : (string -> System.Text.StringBuilder) = System.Text.StringBuilder 
    let v11 : System.Text.StringBuilder = v10 v6
    let v12 : UH2 = UH2_0
    let v13 : int32 = 1
    let v14 : int32 = 1
    let v15 : US23 = method55(v12, v7, v11, v13, v14)
    match v15 with
    | US23_1(v28) -> (* Error *)
        US22_1(v28)
    | US23_0(v16, v17, v18, v19, v20) -> (* Ok *)
        let v21 : string list = []
        let v22 : string list = method62(v16, v21)
        let v23 : (string list -> (string [])) = List.toArray
        let v24 : (string []) = v23 v22
        US22_0(v24)
and closure22 () () : string =
    let v0 : string = $"runtime.execute_with_options"
    v0
and closure23 () (v0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>) : US24 =
    US24_0(v0)
and method65 () : (std_sync_Arc<std_sync_Mutex<std_process_Child option>> -> US24) =
    closure23()
and closure24 () (v0 : std_string_String) : US24 =
    US24_1(v0)
and method66 () : (std_string_String -> US24) =
    closure24()
and closure25 () () : string =
    let v0 : string = $"runtime.execute_with_options / child error"
    v0
and method67 (v0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>) : std_sync_Arc<std_sync_Mutex<std_process_Child option>> =
    v0
and closure26 () (v0 : std_string_String) : US26 =
    US26_0(v0)
and method68 () : (std_string_String -> US26) =
    closure26()
and closure27 () (v0 : std_string_String) : US26 =
    US26_1(v0)
and method69 () : (std_string_String -> US26) =
    closure27()
and closure28 () () : string =
    let v0 : string = $"runtime.stdio_line"
    v0
and closure29 (v0 : string) () : string =
    v0
and method70 (v0 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>>) : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> =
    v0
and closure30 () (v0 : std_sync_mpsc_SendError<std_string_String>) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#else
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
    let v17 : std_string_String = _v1 
    v17
and method71 () : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) =
    closure30()
and method72 (v0 : Result<unit, string>) : Result<unit, string> =
    v0
and method73 (v0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>>) : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> =
    v0
and method74 (v0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>>) : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> =
    v0
and method75 (v0 : std_sync_MutexGuard<std_process_ChildStdin>) : std_sync_MutexGuard<std_process_ChildStdin> =
    v0
and method76 (v0 : std_thread_JoinHandle<Result<unit, string>>) : std_thread_JoinHandle<Result<unit, string>> =
    v0
and closure31 () (v0 : std_process_Output) : US29 =
    US29_0(v0)
and closure32 () (v0 : std_string_String) : US29 =
    US29_1(v0)
and closure33 () () : string =
    let v0 : string = $"runtime.execute_with_options / output error"
    v0
and method77 (v0 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>) : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> =
    v0
and closure34 () () : string =
    let v0 : string = $"runtime.execute_with_options / result"
    v0
and closure35 () () : string =
    let v0 : string = $"runtime.execute_with_options_async"
    v0
and closure37 (v0 : string) () : string =
    v0
and closure36 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>) (v9 : System.Diagnostics.DataReceivedEventArgs) : unit =
    let v10 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v11 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v14 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v23 
    #endif
#else
    let v26 : Async<unit> option = None
    let mutable _v26 = v26 
    async {
    let v27 : string = v9.Data
    let v28 : string = null |> unbox<string>
    let v31 : bool = v27 = v28
    let v32 : bool = v31 <> true
    if v32 then
        let v33 : US31 option = None
        let _v33 = ref v33 
        match v3 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v34 : (struct (int32 * string * bool) -> Async<unit>) = x
        let v35 : US31 = US31_0(v34)
        v35 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v33.Value <- x
        let v36 : US31 option = _v33.Value 
        let v47 : US31 = US31_1
        let v48 : US31 = v36 |> Option.defaultValue v47 
        match v48 with
        | US31_1 -> (* None *)
            ()
        | US31_0(v52) -> (* Some *)
            let v53 : int32 = v7.Id
            let v54 : Async<unit> = v52 struct (v53, v27, false)
            do! v54 
            ()
        let v55 : string = $"> {v27}"
        if v5 then
            let v56 : bool = State.trace_state.IsNone
            if v56 then
                let v57 : US0 = US0_0
                let struct (v58 : Mut0, v59 : Mut1, v60 : Mut2, v61 : Mut3, v62 : int64 option) = method1(v57)
                let v63 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v58, v59, v60, v61, v62) 
                State.trace_state <- v63 
                ()
            let struct (v68 : Mut0, v69 : Mut1, v70 : Mut2, v71 : Mut3, v72 : int64 option) = State.trace_state.Value
            let v83 : bool = State.trace_state.IsNone
            if v83 then
                let v84 : US0 = US0_0
                let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = method1(v84)
                let v90 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v85, v86, v87, v88, v89) 
                State.trace_state <- v90 
                ()
            let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : int64 option) = State.trace_state.Value
            let v110 : US0 = v98.l0
            let v111 : bool = v97.l0
            let v112 : bool = v111 = false
            let v115 : bool =
                if v112 then
                    false
                else
                    let v113 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v110
                    let v114 : bool = 0 >= v113
                    v114
            if v115 then
                let v116 : int64 = v68.l0
                let v117 : int64 = v116 + 1L
                v68.l0 <- v117
                let v118 : bool = State.trace_state.IsNone
                if v118 then
                    let v119 : US0 = US0_0
                    let struct (v120 : Mut0, v121 : Mut1, v122 : Mut2, v123 : Mut3, v124 : int64 option) = method1(v119)
                    let v125 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v120, v121, v122, v123, v124) 
                    State.trace_state <- v125 
                    ()
                let struct (v130 : Mut0, v131 : Mut1, v132 : Mut2, v133 : Mut3, v134 : int64 option) = State.trace_state.Value
                let v145 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v146 : US3 option = None
                let _v146 = ref v146 
                match v134 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v147 : int64 = x
                let v148 : US3 = US3_0(v147)
                v148 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v146.Value <- x
                let v149 : US3 option = _v146.Value 
                let v160 : US3 = US3_1
                let v161 : US3 = v149 |> Option.defaultValue v160 
                let v201 : System.DateTime =
                    match v161 with
                    | US3_1 -> (* None *)
                        let v197 : System.DateTime = System.DateTime.Now
                        v197
                    | US3_0(v165) -> (* Some *)
                        let v166 : System.DateTime = System.DateTime.Now
                        let v169 : (System.DateTime -> int64) = _.Ticks
                        let v170 : int64 = v169 v166
                        let v173 : int64 = v170 - v165
                        let v174 : (int64 -> System.TimeSpan) = System.TimeSpan 
                        let v175 : System.TimeSpan = v174 v173
                        let v178 : (System.TimeSpan -> int32) = _.Hours
                        let v179 : int32 = v178 v175
                        let v182 : (System.TimeSpan -> int32) = _.Minutes
                        let v183 : int32 = v182 v175
                        let v186 : (System.TimeSpan -> int32) = _.Seconds
                        let v187 : int32 = v186 v175
                        let v190 : (System.TimeSpan -> int32) = _.Milliseconds
                        let v191 : int32 = v190 v175
                        let v194 : System.DateTime = System.DateTime (1, 1, 1, v179, v183, v187, v191)
                        v194
                let v202 : string = method6()
                let v205 : (string -> string) = v201.ToString
                let v206 : string = v205 v202
                let _v145 = v206 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v209 : US3 option = None
                let _v209 = ref v209 
                match v134 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v210 : int64 = x
                let v211 : US3 = US3_0(v210)
                v211 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v209.Value <- x
                let v212 : US3 option = _v209.Value 
                let v223 : US3 = US3_1
                let v224 : US3 = v212 |> Option.defaultValue v223 
                let v264 : System.DateTime =
                    match v224 with
                    | US3_1 -> (* None *)
                        let v260 : System.DateTime = System.DateTime.Now
                        v260
                    | US3_0(v228) -> (* Some *)
                        let v229 : System.DateTime = System.DateTime.Now
                        let v232 : (System.DateTime -> int64) = _.Ticks
                        let v233 : int64 = v232 v229
                        let v236 : int64 = v233 - v228
                        let v237 : (int64 -> System.TimeSpan) = System.TimeSpan 
                        let v238 : System.TimeSpan = v237 v236
                        let v241 : (System.TimeSpan -> int32) = _.Hours
                        let v242 : int32 = v241 v238
                        let v245 : (System.TimeSpan -> int32) = _.Minutes
                        let v246 : int32 = v245 v238
                        let v249 : (System.TimeSpan -> int32) = _.Seconds
                        let v250 : int32 = v249 v238
                        let v253 : (System.TimeSpan -> int32) = _.Milliseconds
                        let v254 : int32 = v253 v238
                        let v257 : System.DateTime = System.DateTime (1, 1, 1, v242, v246, v250, v254)
                        v257
                let v265 : string = method6()
                let v268 : (string -> string) = v264.ToString
                let v269 : string = v268 v265
                let _v145 = v269 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v272 : string = $"near_sdk::env::block_timestamp()"
                let v273 : uint64 = Fable.Core.RustInterop.emitRustExpr () v272 
                let v274 : US3 option = None
                let _v274 = ref v274 
                match v134 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v275 : int64 = x
                let v276 : US3 = US3_0(v275)
                v276 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v274.Value <- x
                let v277 : US3 option = _v274.Value 
                let v288 : US3 = US3_1
                let v289 : US3 = v277 |> Option.defaultValue v288 
                let v298 : uint64 =
                    match v289 with
                    | US3_1 -> (* None *)
                        v273
                    | US3_0(v293) -> (* Some *)
                        let v294 : (int64 -> uint64) = uint64
                        let v295 : uint64 = v294 v293
                        let v296 : uint64 = v273 - v295
                        v296
                let v299 : uint64 = v298 / 1000000000UL
                let v300 : uint64 = v299 % 60UL
                let v301 : uint64 = v299 / 60UL
                let v302 : uint64 = v301 % 60UL
                let v303 : uint64 = v299 / 3600UL
                let v304 : uint64 = v303 % 24UL
                let v305 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
                let v306 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v304, v302, v300) v305 
                let v307 : string = "fable_library_rust::String_::fromString($0)"
                let v308 : string = Fable.Core.RustInterop.emitRustExpr v306 v307 
                let _v145 = v308 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v309 : US3 option = None
                let _v309 = ref v309 
                match v134 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v310 : int64 = x
                let v311 : US3 = US3_0(v310)
                v311 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v309.Value <- x
                let v312 : US3 option = _v309.Value 
                let v323 : US3 = US3_1
                let v324 : US3 = v312 |> Option.defaultValue v323 
                let v364 : System.DateTime =
                    match v324 with
                    | US3_1 -> (* None *)
                        let v360 : System.DateTime = System.DateTime.Now
                        v360
                    | US3_0(v328) -> (* Some *)
                        let v329 : System.DateTime = System.DateTime.Now
                        let v332 : (System.DateTime -> int64) = _.Ticks
                        let v333 : int64 = v332 v329
                        let v336 : int64 = v333 - v328
                        let v337 : (int64 -> System.TimeSpan) = System.TimeSpan 
                        let v338 : System.TimeSpan = v337 v336
                        let v341 : (System.TimeSpan -> int32) = _.Hours
                        let v342 : int32 = v341 v338
                        let v345 : (System.TimeSpan -> int32) = _.Minutes
                        let v346 : int32 = v345 v338
                        let v349 : (System.TimeSpan -> int32) = _.Seconds
                        let v350 : int32 = v349 v338
                        let v353 : (System.TimeSpan -> int32) = _.Milliseconds
                        let v354 : int32 = v353 v338
                        let v357 : System.DateTime = System.DateTime (1, 1, 1, v342, v346, v350, v354)
                        v357
                let v365 : string = method7()
                let v368 : (string -> string) = v364.ToString
                let v369 : string = v368 v365
                let _v145 = v369 
                #endif
#if FABLE_COMPILER_PYTHON
                let v372 : US3 option = None
                let _v372 = ref v372 
                match v134 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v373 : int64 = x
                let v374 : US3 = US3_0(v373)
                v374 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v372.Value <- x
                let v375 : US3 option = _v372.Value 
                let v386 : US3 = US3_1
                let v387 : US3 = v375 |> Option.defaultValue v386 
                let v427 : System.DateTime =
                    match v387 with
                    | US3_1 -> (* None *)
                        let v423 : System.DateTime = System.DateTime.Now
                        v423
                    | US3_0(v391) -> (* Some *)
                        let v392 : System.DateTime = System.DateTime.Now
                        let v395 : (System.DateTime -> int64) = _.Ticks
                        let v396 : int64 = v395 v392
                        let v399 : int64 = v396 - v391
                        let v400 : (int64 -> System.TimeSpan) = System.TimeSpan 
                        let v401 : System.TimeSpan = v400 v399
                        let v404 : (System.TimeSpan -> int32) = _.Hours
                        let v405 : int32 = v404 v401
                        let v408 : (System.TimeSpan -> int32) = _.Minutes
                        let v409 : int32 = v408 v401
                        let v412 : (System.TimeSpan -> int32) = _.Seconds
                        let v413 : int32 = v412 v401
                        let v416 : (System.TimeSpan -> int32) = _.Milliseconds
                        let v417 : int32 = v416 v401
                        let v420 : System.DateTime = System.DateTime (1, 1, 1, v405, v409, v413, v417)
                        v420
                let v428 : string = method7()
                let v431 : (string -> string) = v427.ToString
                let v432 : string = v431 v428
                let _v145 = v432 
                #endif
#else
                let v435 : US3 option = None
                let _v435 = ref v435 
                match v134 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v436 : int64 = x
                let v437 : US3 = US3_0(v436)
                v437 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v435.Value <- x
                let v438 : US3 option = _v435.Value 
                let v449 : US3 = US3_1
                let v450 : US3 = v438 |> Option.defaultValue v449 
                let v490 : System.DateTime =
                    match v450 with
                    | US3_1 -> (* None *)
                        let v486 : System.DateTime = System.DateTime.Now
                        v486
                    | US3_0(v454) -> (* Some *)
                        let v455 : System.DateTime = System.DateTime.Now
                        let v458 : (System.DateTime -> int64) = _.Ticks
                        let v459 : int64 = v458 v455
                        let v462 : int64 = v459 - v454
                        let v463 : (int64 -> System.TimeSpan) = System.TimeSpan 
                        let v464 : System.TimeSpan = v463 v462
                        let v467 : (System.TimeSpan -> int32) = _.Hours
                        let v468 : int32 = v467 v464
                        let v471 : (System.TimeSpan -> int32) = _.Minutes
                        let v472 : int32 = v471 v464
                        let v475 : (System.TimeSpan -> int32) = _.Seconds
                        let v476 : int32 = v475 v464
                        let v479 : (System.TimeSpan -> int32) = _.Milliseconds
                        let v480 : int32 = v479 v464
                        let v483 : System.DateTime = System.DateTime (1, 1, 1, v468, v472, v476, v480)
                        v483
                let v491 : string = method7()
                let v494 : (string -> string) = v490.ToString
                let v495 : string = v494 v491
                let _v145 = v495 
                #endif
                let v498 : string = _v145 
                let v563 : string = "Verbose"
                let v564 : (unit -> string) = v563.ToLower
                let v565 : string = v564 ()
                let v568 : string = v565.PadLeft (7, ' ')
                let v582 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v583 : string = "inline_colorization::color_bright_black"
                let v584 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v583 
                let v585 : string = "&*$0"
                let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v568 v585 
                let v587 : string = "inline_colorization::color_reset"
                let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
                let v589 : string = "\"{v584}{v586}{v588}\""
                let v590 : string = @$"format!(" + v589 + ")"
                let v591 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v590 
                let v592 : string = "fable_library_rust::String_::fromString($0)"
                let v593 : string = Fable.Core.RustInterop.emitRustExpr v591 v592 
                let _v582 = v593 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v594 : string = "inline_colorization::color_bright_black"
                let v595 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v594 
                let v596 : string = "&*$0"
                let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v568 v596 
                let v598 : string = "inline_colorization::color_reset"
                let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
                let v600 : string = "\"{v595}{v597}{v599}\""
                let v601 : string = @$"format!(" + v600 + ")"
                let v602 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v601 
                let v603 : string = "fable_library_rust::String_::fromString($0)"
                let v604 : string = Fable.Core.RustInterop.emitRustExpr v602 v603 
                let _v582 = v604 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v605 : string = "inline_colorization::color_bright_black"
                let v606 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v605 
                let v607 : string = "&*$0"
                let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v568 v607 
                let v609 : string = "inline_colorization::color_reset"
                let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v609 
                let v611 : string = "\"{v606}{v608}{v610}\""
                let v612 : string = @$"format!(" + v611 + ")"
                let v613 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v612 
                let v614 : string = "fable_library_rust::String_::fromString($0)"
                let v615 : string = Fable.Core.RustInterop.emitRustExpr v613 v614 
                let _v582 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = "\u001b[90m"
                let v617 : string = method8()
                let v618 : string = v616 + v568 
                let v619 : string = v618 + v617 
                let _v582 = v619 
                #endif
#if FABLE_COMPILER_PYTHON
                let v620 : string = "\u001b[90m"
                let v621 : string = method8()
                let v622 : string = v620 + v568 
                let v623 : string = v622 + v621 
                let _v582 = v623 
                #endif
#else
                let v624 : string = "\u001b[90m"
                let v625 : string = method8()
                let v626 : string = v624 + v568 
                let v627 : string = v626 + v625 
                let _v582 = v627 
                #endif
                let v628 : string = _v582 
                let v634 : int64 = v130.l0
                let v635 : string = method9()
                let v636 : Mut4 = {l0 = v635} : Mut4
                let v637 : string = v636.l0
                let v638 : (unit -> string) = closure37(v55)
                let v639 : string = $"{v498} {v628} #{v634} %s{v638 ()} / {v637}"
                let v642 : char list = []
                let v643 : (char list -> (char [])) = List.toArray
                let v644 : (char []) = v643 v642
                let v647 : string = v639.TrimStart v644 
                let v665 : char list = []
                let v666 : char list = '/' :: v665 
                let v669 : char list = ' ' :: v666 
                let v672 : (char list -> (char [])) = List.toArray
                let v673 : (char []) = v672 v669
                let v676 : string = v647.TrimEnd v673 
                let v694 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v695 : string = @"println!(""{}"", $0)"
                Fable.Core.RustInterop.emitRustExpr v676 v695 
                let _v694 = () 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v696 : string = @"println!(""{}"", $0)"
                Fable.Core.RustInterop.emitRustExpr v676 v696 
                let _v694 = () 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v697 : string = $"near_sdk::log!(\"{{}}\", $0)"
                Fable.Core.RustInterop.emitRustExpr v676 v697 
                let _v694 = () 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                System.Console.WriteLine v676 
                let _v694 = () 
                #endif
#if FABLE_COMPILER_PYTHON
                System.Console.WriteLine v676 
                let _v694 = () 
                #endif
#else
                System.Console.WriteLine v676 
                let _v694 = () 
                #endif
                _v694 
                let v698 : (string -> unit) = v69.l0
                v698 v676
        else
            v55 |> System.Console.WriteLine
            ()
        let v699 : string = ""
        let v700 : string = $"{v699}{v27}{v699}"
        let v701 : (string -> unit) = v8.Push
        v701 v700
    }
    |> fun x -> _v26 <- Some x
    let v702 : Async<unit> = match _v26 with Some x -> x | None -> failwith "async.new_async_unit / _v26=None"
    let _v10 = v702 
    #endif
    let v703 : Async<unit> = _v10 
    let v708 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    let _v708 = () 
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    let _v708 = () 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    let _v708 = () 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    null |> unbox<unit>
    let _v708 = () 
    #endif
#if FABLE_COMPILER_PYTHON
    null |> unbox<unit>
    let _v708 = () 
    #endif
#else
    let v709 : (Async<unit> -> unit) = Async.StartImmediate
    v709 v703
    let _v708 = () 
    #endif
    _v708 
    ()
and closure38 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>) (v9 : System.Diagnostics.DataReceivedEventArgs) : unit =
    let v10 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v11 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v14 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v23 
    #endif
#else
    let v26 : Async<unit> option = None
    let mutable _v26 = v26 
    async {
    let v27 : string = v9.Data
    let v28 : string = null |> unbox<string>
    let v31 : bool = v27 = v28
    let v32 : bool = v31 <> true
    if v32 then
        let v33 : US31 option = None
        let _v33 = ref v33 
        match v3 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v34 : (struct (int32 * string * bool) -> Async<unit>) = x
        let v35 : US31 = US31_0(v34)
        v35 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v33.Value <- x
        let v36 : US31 option = _v33.Value 
        let v47 : US31 = US31_1
        let v48 : US31 = v36 |> Option.defaultValue v47 
        match v48 with
        | US31_1 -> (* None *)
            ()
        | US31_0(v52) -> (* Some *)
            let v53 : int32 = v7.Id
            let v54 : Async<unit> = v52 struct (v53, v27, true)
            do! v54 
            ()
        let v55 : string = $"! {v27}"
        if v5 then
            let v56 : bool = State.trace_state.IsNone
            if v56 then
                let v57 : US0 = US0_0
                let struct (v58 : Mut0, v59 : Mut1, v60 : Mut2, v61 : Mut3, v62 : int64 option) = method1(v57)
                let v63 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v58, v59, v60, v61, v62) 
                State.trace_state <- v63 
                ()
            let struct (v68 : Mut0, v69 : Mut1, v70 : Mut2, v71 : Mut3, v72 : int64 option) = State.trace_state.Value
            let v83 : bool = State.trace_state.IsNone
            if v83 then
                let v84 : US0 = US0_0
                let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = method1(v84)
                let v90 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v85, v86, v87, v88, v89) 
                State.trace_state <- v90 
                ()
            let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : int64 option) = State.trace_state.Value
            let v110 : US0 = v98.l0
            let v111 : bool = v97.l0
            let v112 : bool = v111 = false
            let v115 : bool =
                if v112 then
                    false
                else
                    let v113 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v110
                    let v114 : bool = 0 >= v113
                    v114
            if v115 then
                let v116 : int64 = v68.l0
                let v117 : int64 = v116 + 1L
                v68.l0 <- v117
                let v118 : bool = State.trace_state.IsNone
                if v118 then
                    let v119 : US0 = US0_0
                    let struct (v120 : Mut0, v121 : Mut1, v122 : Mut2, v123 : Mut3, v124 : int64 option) = method1(v119)
                    let v125 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v120, v121, v122, v123, v124) 
                    State.trace_state <- v125 
                    ()
                let struct (v130 : Mut0, v131 : Mut1, v132 : Mut2, v133 : Mut3, v134 : int64 option) = State.trace_state.Value
                let v145 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v146 : US3 option = None
                let _v146 = ref v146 
                match v134 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v147 : int64 = x
                let v148 : US3 = US3_0(v147)
                v148 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v146.Value <- x
                let v149 : US3 option = _v146.Value 
                let v160 : US3 = US3_1
                let v161 : US3 = v149 |> Option.defaultValue v160 
                let v201 : System.DateTime =
                    match v161 with
                    | US3_1 -> (* None *)
                        let v197 : System.DateTime = System.DateTime.Now
                        v197
                    | US3_0(v165) -> (* Some *)
                        let v166 : System.DateTime = System.DateTime.Now
                        let v169 : (System.DateTime -> int64) = _.Ticks
                        let v170 : int64 = v169 v166
                        let v173 : int64 = v170 - v165
                        let v174 : (int64 -> System.TimeSpan) = System.TimeSpan 
                        let v175 : System.TimeSpan = v174 v173
                        let v178 : (System.TimeSpan -> int32) = _.Hours
                        let v179 : int32 = v178 v175
                        let v182 : (System.TimeSpan -> int32) = _.Minutes
                        let v183 : int32 = v182 v175
                        let v186 : (System.TimeSpan -> int32) = _.Seconds
                        let v187 : int32 = v186 v175
                        let v190 : (System.TimeSpan -> int32) = _.Milliseconds
                        let v191 : int32 = v190 v175
                        let v194 : System.DateTime = System.DateTime (1, 1, 1, v179, v183, v187, v191)
                        v194
                let v202 : string = method6()
                let v205 : (string -> string) = v201.ToString
                let v206 : string = v205 v202
                let _v145 = v206 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v209 : US3 option = None
                let _v209 = ref v209 
                match v134 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v210 : int64 = x
                let v211 : US3 = US3_0(v210)
                v211 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v209.Value <- x
                let v212 : US3 option = _v209.Value 
                let v223 : US3 = US3_1
                let v224 : US3 = v212 |> Option.defaultValue v223 
                let v264 : System.DateTime =
                    match v224 with
                    | US3_1 -> (* None *)
                        let v260 : System.DateTime = System.DateTime.Now
                        v260
                    | US3_0(v228) -> (* Some *)
                        let v229 : System.DateTime = System.DateTime.Now
                        let v232 : (System.DateTime -> int64) = _.Ticks
                        let v233 : int64 = v232 v229
                        let v236 : int64 = v233 - v228
                        let v237 : (int64 -> System.TimeSpan) = System.TimeSpan 
                        let v238 : System.TimeSpan = v237 v236
                        let v241 : (System.TimeSpan -> int32) = _.Hours
                        let v242 : int32 = v241 v238
                        let v245 : (System.TimeSpan -> int32) = _.Minutes
                        let v246 : int32 = v245 v238
                        let v249 : (System.TimeSpan -> int32) = _.Seconds
                        let v250 : int32 = v249 v238
                        let v253 : (System.TimeSpan -> int32) = _.Milliseconds
                        let v254 : int32 = v253 v238
                        let v257 : System.DateTime = System.DateTime (1, 1, 1, v242, v246, v250, v254)
                        v257
                let v265 : string = method6()
                let v268 : (string -> string) = v264.ToString
                let v269 : string = v268 v265
                let _v145 = v269 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v272 : string = $"near_sdk::env::block_timestamp()"
                let v273 : uint64 = Fable.Core.RustInterop.emitRustExpr () v272 
                let v274 : US3 option = None
                let _v274 = ref v274 
                match v134 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v275 : int64 = x
                let v276 : US3 = US3_0(v275)
                v276 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v274.Value <- x
                let v277 : US3 option = _v274.Value 
                let v288 : US3 = US3_1
                let v289 : US3 = v277 |> Option.defaultValue v288 
                let v298 : uint64 =
                    match v289 with
                    | US3_1 -> (* None *)
                        v273
                    | US3_0(v293) -> (* Some *)
                        let v294 : (int64 -> uint64) = uint64
                        let v295 : uint64 = v294 v293
                        let v296 : uint64 = v273 - v295
                        v296
                let v299 : uint64 = v298 / 1000000000UL
                let v300 : uint64 = v299 % 60UL
                let v301 : uint64 = v299 / 60UL
                let v302 : uint64 = v301 % 60UL
                let v303 : uint64 = v299 / 3600UL
                let v304 : uint64 = v303 % 24UL
                let v305 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
                let v306 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v304, v302, v300) v305 
                let v307 : string = "fable_library_rust::String_::fromString($0)"
                let v308 : string = Fable.Core.RustInterop.emitRustExpr v306 v307 
                let _v145 = v308 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v309 : US3 option = None
                let _v309 = ref v309 
                match v134 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v310 : int64 = x
                let v311 : US3 = US3_0(v310)
                v311 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v309.Value <- x
                let v312 : US3 option = _v309.Value 
                let v323 : US3 = US3_1
                let v324 : US3 = v312 |> Option.defaultValue v323 
                let v364 : System.DateTime =
                    match v324 with
                    | US3_1 -> (* None *)
                        let v360 : System.DateTime = System.DateTime.Now
                        v360
                    | US3_0(v328) -> (* Some *)
                        let v329 : System.DateTime = System.DateTime.Now
                        let v332 : (System.DateTime -> int64) = _.Ticks
                        let v333 : int64 = v332 v329
                        let v336 : int64 = v333 - v328
                        let v337 : (int64 -> System.TimeSpan) = System.TimeSpan 
                        let v338 : System.TimeSpan = v337 v336
                        let v341 : (System.TimeSpan -> int32) = _.Hours
                        let v342 : int32 = v341 v338
                        let v345 : (System.TimeSpan -> int32) = _.Minutes
                        let v346 : int32 = v345 v338
                        let v349 : (System.TimeSpan -> int32) = _.Seconds
                        let v350 : int32 = v349 v338
                        let v353 : (System.TimeSpan -> int32) = _.Milliseconds
                        let v354 : int32 = v353 v338
                        let v357 : System.DateTime = System.DateTime (1, 1, 1, v342, v346, v350, v354)
                        v357
                let v365 : string = method7()
                let v368 : (string -> string) = v364.ToString
                let v369 : string = v368 v365
                let _v145 = v369 
                #endif
#if FABLE_COMPILER_PYTHON
                let v372 : US3 option = None
                let _v372 = ref v372 
                match v134 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v373 : int64 = x
                let v374 : US3 = US3_0(v373)
                v374 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v372.Value <- x
                let v375 : US3 option = _v372.Value 
                let v386 : US3 = US3_1
                let v387 : US3 = v375 |> Option.defaultValue v386 
                let v427 : System.DateTime =
                    match v387 with
                    | US3_1 -> (* None *)
                        let v423 : System.DateTime = System.DateTime.Now
                        v423
                    | US3_0(v391) -> (* Some *)
                        let v392 : System.DateTime = System.DateTime.Now
                        let v395 : (System.DateTime -> int64) = _.Ticks
                        let v396 : int64 = v395 v392
                        let v399 : int64 = v396 - v391
                        let v400 : (int64 -> System.TimeSpan) = System.TimeSpan 
                        let v401 : System.TimeSpan = v400 v399
                        let v404 : (System.TimeSpan -> int32) = _.Hours
                        let v405 : int32 = v404 v401
                        let v408 : (System.TimeSpan -> int32) = _.Minutes
                        let v409 : int32 = v408 v401
                        let v412 : (System.TimeSpan -> int32) = _.Seconds
                        let v413 : int32 = v412 v401
                        let v416 : (System.TimeSpan -> int32) = _.Milliseconds
                        let v417 : int32 = v416 v401
                        let v420 : System.DateTime = System.DateTime (1, 1, 1, v405, v409, v413, v417)
                        v420
                let v428 : string = method7()
                let v431 : (string -> string) = v427.ToString
                let v432 : string = v431 v428
                let _v145 = v432 
                #endif
#else
                let v435 : US3 option = None
                let _v435 = ref v435 
                match v134 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v436 : int64 = x
                let v437 : US3 = US3_0(v436)
                v437 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v435.Value <- x
                let v438 : US3 option = _v435.Value 
                let v449 : US3 = US3_1
                let v450 : US3 = v438 |> Option.defaultValue v449 
                let v490 : System.DateTime =
                    match v450 with
                    | US3_1 -> (* None *)
                        let v486 : System.DateTime = System.DateTime.Now
                        v486
                    | US3_0(v454) -> (* Some *)
                        let v455 : System.DateTime = System.DateTime.Now
                        let v458 : (System.DateTime -> int64) = _.Ticks
                        let v459 : int64 = v458 v455
                        let v462 : int64 = v459 - v454
                        let v463 : (int64 -> System.TimeSpan) = System.TimeSpan 
                        let v464 : System.TimeSpan = v463 v462
                        let v467 : (System.TimeSpan -> int32) = _.Hours
                        let v468 : int32 = v467 v464
                        let v471 : (System.TimeSpan -> int32) = _.Minutes
                        let v472 : int32 = v471 v464
                        let v475 : (System.TimeSpan -> int32) = _.Seconds
                        let v476 : int32 = v475 v464
                        let v479 : (System.TimeSpan -> int32) = _.Milliseconds
                        let v480 : int32 = v479 v464
                        let v483 : System.DateTime = System.DateTime (1, 1, 1, v468, v472, v476, v480)
                        v483
                let v491 : string = method7()
                let v494 : (string -> string) = v490.ToString
                let v495 : string = v494 v491
                let _v145 = v495 
                #endif
                let v498 : string = _v145 
                let v563 : string = "Verbose"
                let v564 : (unit -> string) = v563.ToLower
                let v565 : string = v564 ()
                let v568 : string = v565.PadLeft (7, ' ')
                let v582 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v583 : string = "inline_colorization::color_bright_black"
                let v584 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v583 
                let v585 : string = "&*$0"
                let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v568 v585 
                let v587 : string = "inline_colorization::color_reset"
                let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
                let v589 : string = "\"{v584}{v586}{v588}\""
                let v590 : string = @$"format!(" + v589 + ")"
                let v591 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v590 
                let v592 : string = "fable_library_rust::String_::fromString($0)"
                let v593 : string = Fable.Core.RustInterop.emitRustExpr v591 v592 
                let _v582 = v593 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v594 : string = "inline_colorization::color_bright_black"
                let v595 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v594 
                let v596 : string = "&*$0"
                let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v568 v596 
                let v598 : string = "inline_colorization::color_reset"
                let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
                let v600 : string = "\"{v595}{v597}{v599}\""
                let v601 : string = @$"format!(" + v600 + ")"
                let v602 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v601 
                let v603 : string = "fable_library_rust::String_::fromString($0)"
                let v604 : string = Fable.Core.RustInterop.emitRustExpr v602 v603 
                let _v582 = v604 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v605 : string = "inline_colorization::color_bright_black"
                let v606 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v605 
                let v607 : string = "&*$0"
                let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v568 v607 
                let v609 : string = "inline_colorization::color_reset"
                let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v609 
                let v611 : string = "\"{v606}{v608}{v610}\""
                let v612 : string = @$"format!(" + v611 + ")"
                let v613 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v612 
                let v614 : string = "fable_library_rust::String_::fromString($0)"
                let v615 : string = Fable.Core.RustInterop.emitRustExpr v613 v614 
                let _v582 = v615 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v616 : string = "\u001b[90m"
                let v617 : string = method8()
                let v618 : string = v616 + v568 
                let v619 : string = v618 + v617 
                let _v582 = v619 
                #endif
#if FABLE_COMPILER_PYTHON
                let v620 : string = "\u001b[90m"
                let v621 : string = method8()
                let v622 : string = v620 + v568 
                let v623 : string = v622 + v621 
                let _v582 = v623 
                #endif
#else
                let v624 : string = "\u001b[90m"
                let v625 : string = method8()
                let v626 : string = v624 + v568 
                let v627 : string = v626 + v625 
                let _v582 = v627 
                #endif
                let v628 : string = _v582 
                let v634 : int64 = v130.l0
                let v635 : string = method9()
                let v636 : Mut4 = {l0 = v635} : Mut4
                let v637 : string = v636.l0
                let v638 : (unit -> string) = closure37(v55)
                let v639 : string = $"{v498} {v628} #{v634} %s{v638 ()} / {v637}"
                let v642 : char list = []
                let v643 : (char list -> (char [])) = List.toArray
                let v644 : (char []) = v643 v642
                let v647 : string = v639.TrimStart v644 
                let v665 : char list = []
                let v666 : char list = '/' :: v665 
                let v669 : char list = ' ' :: v666 
                let v672 : (char list -> (char [])) = List.toArray
                let v673 : (char []) = v672 v669
                let v676 : string = v647.TrimEnd v673 
                let v694 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v695 : string = @"println!(""{}"", $0)"
                Fable.Core.RustInterop.emitRustExpr v676 v695 
                let _v694 = () 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v696 : string = @"println!(""{}"", $0)"
                Fable.Core.RustInterop.emitRustExpr v676 v696 
                let _v694 = () 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v697 : string = $"near_sdk::log!(\"{{}}\", $0)"
                Fable.Core.RustInterop.emitRustExpr v676 v697 
                let _v694 = () 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                System.Console.WriteLine v676 
                let _v694 = () 
                #endif
#if FABLE_COMPILER_PYTHON
                System.Console.WriteLine v676 
                let _v694 = () 
                #endif
#else
                System.Console.WriteLine v676 
                let _v694 = () 
                #endif
                _v694 
                let v698 : (string -> unit) = v69.l0
                v698 v676
        else
            v55 |> System.Console.WriteLine
            ()
        let v699 : string = "\u001b[7;4m"
        let v700 : string = "\u001b[0m"
        let v701 : string = $"{v699}{v27}{v700}"
        let v702 : (string -> unit) = v8.Push
        v702 v701
    }
    |> fun x -> _v26 <- Some x
    let v703 : Async<unit> = match _v26 with Some x -> x | None -> failwith "async.new_async_unit / _v26=None"
    let _v10 = v703 
    #endif
    let v704 : Async<unit> = _v10 
    let v709 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    let _v709 = () 
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    let _v709 = () 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    let _v709 = () 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    null |> unbox<unit>
    let _v709 = () 
    #endif
#if FABLE_COMPILER_PYTHON
    null |> unbox<unit>
    let _v709 = () 
    #endif
#else
    let v710 : (Async<unit> -> unit) = Async.StartImmediate
    v710 v704
    let _v709 = () 
    #endif
    _v709 
    ()
and closure39 (v0 : System.Diagnostics.Process) () : unit =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : bool = null |> unbox<bool>
    let _v1 = v2 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : bool = null |> unbox<bool>
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : bool = null |> unbox<bool>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v11 : bool = null |> unbox<bool>
    let _v1 = v11 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : bool = null |> unbox<bool>
    let _v1 = v14 
    #endif
#else
    let v17 : bool = v0.HasExited
    let _v1 = v17 
    #endif
    let v18 : bool = _v1 
    let v23 : bool = v18 = false
    if v23 then
        let v24 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let _v24 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let _v24 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let _v24 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let _v24 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        let _v24 = () 
        #endif
#else
        let v25 : (unit -> unit) = v0.Kill
        v25 ()
        let _v24 = () 
        #endif
        _v24 
        ()
and closure40 () () : string =
    let v0 : string = $"runtime.execute_with_options_async / WaitForExitAsync"
    v0
and closure41 () () : string =
    let v0 : string = $"runtime.execute_with_options_async"
    v0
and method78 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : Async<struct (int32 * string)> =
    let v7 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v7 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v7 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v14 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v7 = v14 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v17 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v7 = v17 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v7 = v20 
    #endif
#else
    let v23 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v24 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v23 = v24 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v27 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v23 = v27 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v23 = v30 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v23 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v23 = v36 
    #endif
#else
    let v39 : Async<struct (int32 * string)> option = None
    let mutable _v39 = v39 
    async {
    let v40 : US14 = method42(v0)
    let struct (v49 : string, v50 : US1) =
        match v40 with
        | US14_1(v43) -> (* Error *)
            let v44 : string = $"resultm.get / Result value was Error: {v43}"
            failwith<struct (string * US1)> v44
        | US14_0(v41, v42) -> (* Ok *)
            struct (v41, v42)
    let v51 : US1 option = None
    let _v51 = ref v51 
    match v6 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v52 : string = x
    let v53 : US1 = US1_0(v52)
    v53 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v51.Value <- x
    let v54 : US1 option = _v51.Value 
    let v65 : US1 = US1_1
    let v66 : US1 = v54 |> Option.defaultValue v65 
    let v73 : string =
        match v66 with
        | US1_1 -> (* None *)
            let v71 : string = ""
            v71
        | US1_0(v70) -> (* Some *)
            v70
    let v74 : bool = State.trace_state.IsNone
    if v74 then
        let v75 : US0 = US0_0
        let struct (v76 : Mut0, v77 : Mut1, v78 : Mut2, v79 : Mut3, v80 : int64 option) = method1(v75)
        let v81 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v76, v77, v78, v79, v80) 
        State.trace_state <- v81 
        ()
    let struct (v86 : Mut0, v87 : Mut1, v88 : Mut2, v89 : Mut3, v90 : int64 option) = State.trace_state.Value
    let v101 : bool = State.trace_state.IsNone
    if v101 then
        let v102 : US0 = US0_0
        let struct (v103 : Mut0, v104 : Mut1, v105 : Mut2, v106 : Mut3, v107 : int64 option) = method1(v102)
        let v108 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v103, v104, v105, v106, v107) 
        State.trace_state <- v108 
        ()
    let struct (v113 : Mut0, v114 : Mut1, v115 : Mut2, v116 : Mut3, v117 : int64 option) = State.trace_state.Value
    let v128 : US0 = v116.l0
    let v129 : bool = v115.l0
    let v130 : bool = v129 = false
    let v133 : bool =
        if v130 then
            false
        else
            let v131 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v128
            let v132 : bool = 1 >= v131
            v132
    if v133 then
        let v134 : int64 = v86.l0
        let v135 : int64 = v134 + 1L
        v86.l0 <- v135
        let v136 : bool = State.trace_state.IsNone
        if v136 then
            let v137 : US0 = US0_0
            let struct (v138 : Mut0, v139 : Mut1, v140 : Mut2, v141 : Mut3, v142 : int64 option) = method1(v137)
            let v143 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v138, v139, v140, v141, v142) 
            State.trace_state <- v143 
            ()
        let struct (v148 : Mut0, v149 : Mut1, v150 : Mut2, v151 : Mut3, v152 : int64 option) = State.trace_state.Value
        let v163 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v164 : US3 option = None
        let _v164 = ref v164 
        match v152 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v165 : int64 = x
        let v166 : US3 = US3_0(v165)
        v166 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v164.Value <- x
        let v167 : US3 option = _v164.Value 
        let v178 : US3 = US3_1
        let v179 : US3 = v167 |> Option.defaultValue v178 
        let v219 : System.DateTime =
            match v179 with
            | US3_1 -> (* None *)
                let v215 : System.DateTime = System.DateTime.Now
                v215
            | US3_0(v183) -> (* Some *)
                let v184 : System.DateTime = System.DateTime.Now
                let v187 : (System.DateTime -> int64) = _.Ticks
                let v188 : int64 = v187 v184
                let v191 : int64 = v188 - v183
                let v192 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v193 : System.TimeSpan = v192 v191
                let v196 : (System.TimeSpan -> int32) = _.Hours
                let v197 : int32 = v196 v193
                let v200 : (System.TimeSpan -> int32) = _.Minutes
                let v201 : int32 = v200 v193
                let v204 : (System.TimeSpan -> int32) = _.Seconds
                let v205 : int32 = v204 v193
                let v208 : (System.TimeSpan -> int32) = _.Milliseconds
                let v209 : int32 = v208 v193
                let v212 : System.DateTime = System.DateTime (1, 1, 1, v197, v201, v205, v209)
                v212
        let v220 : string = method6()
        let v223 : (string -> string) = v219.ToString
        let v224 : string = v223 v220
        let _v163 = v224 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v227 : US3 option = None
        let _v227 = ref v227 
        match v152 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v228 : int64 = x
        let v229 : US3 = US3_0(v228)
        v229 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v227.Value <- x
        let v230 : US3 option = _v227.Value 
        let v241 : US3 = US3_1
        let v242 : US3 = v230 |> Option.defaultValue v241 
        let v282 : System.DateTime =
            match v242 with
            | US3_1 -> (* None *)
                let v278 : System.DateTime = System.DateTime.Now
                v278
            | US3_0(v246) -> (* Some *)
                let v247 : System.DateTime = System.DateTime.Now
                let v250 : (System.DateTime -> int64) = _.Ticks
                let v251 : int64 = v250 v247
                let v254 : int64 = v251 - v246
                let v255 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v256 : System.TimeSpan = v255 v254
                let v259 : (System.TimeSpan -> int32) = _.Hours
                let v260 : int32 = v259 v256
                let v263 : (System.TimeSpan -> int32) = _.Minutes
                let v264 : int32 = v263 v256
                let v267 : (System.TimeSpan -> int32) = _.Seconds
                let v268 : int32 = v267 v256
                let v271 : (System.TimeSpan -> int32) = _.Milliseconds
                let v272 : int32 = v271 v256
                let v275 : System.DateTime = System.DateTime (1, 1, 1, v260, v264, v268, v272)
                v275
        let v283 : string = method6()
        let v286 : (string -> string) = v282.ToString
        let v287 : string = v286 v283
        let _v163 = v287 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v290 : string = $"near_sdk::env::block_timestamp()"
        let v291 : uint64 = Fable.Core.RustInterop.emitRustExpr () v290 
        let v292 : US3 option = None
        let _v292 = ref v292 
        match v152 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v293 : int64 = x
        let v294 : US3 = US3_0(v293)
        v294 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v292.Value <- x
        let v295 : US3 option = _v292.Value 
        let v306 : US3 = US3_1
        let v307 : US3 = v295 |> Option.defaultValue v306 
        let v316 : uint64 =
            match v307 with
            | US3_1 -> (* None *)
                v291
            | US3_0(v311) -> (* Some *)
                let v312 : (int64 -> uint64) = uint64
                let v313 : uint64 = v312 v311
                let v314 : uint64 = v291 - v313
                v314
        let v317 : uint64 = v316 / 1000000000UL
        let v318 : uint64 = v317 % 60UL
        let v319 : uint64 = v317 / 60UL
        let v320 : uint64 = v319 % 60UL
        let v321 : uint64 = v317 / 3600UL
        let v322 : uint64 = v321 % 24UL
        let v323 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v324 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v322, v320, v318) v323 
        let v325 : string = "fable_library_rust::String_::fromString($0)"
        let v326 : string = Fable.Core.RustInterop.emitRustExpr v324 v325 
        let _v163 = v326 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v327 : US3 option = None
        let _v327 = ref v327 
        match v152 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v328 : int64 = x
        let v329 : US3 = US3_0(v328)
        v329 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v327.Value <- x
        let v330 : US3 option = _v327.Value 
        let v341 : US3 = US3_1
        let v342 : US3 = v330 |> Option.defaultValue v341 
        let v382 : System.DateTime =
            match v342 with
            | US3_1 -> (* None *)
                let v378 : System.DateTime = System.DateTime.Now
                v378
            | US3_0(v346) -> (* Some *)
                let v347 : System.DateTime = System.DateTime.Now
                let v350 : (System.DateTime -> int64) = _.Ticks
                let v351 : int64 = v350 v347
                let v354 : int64 = v351 - v346
                let v355 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v356 : System.TimeSpan = v355 v354
                let v359 : (System.TimeSpan -> int32) = _.Hours
                let v360 : int32 = v359 v356
                let v363 : (System.TimeSpan -> int32) = _.Minutes
                let v364 : int32 = v363 v356
                let v367 : (System.TimeSpan -> int32) = _.Seconds
                let v368 : int32 = v367 v356
                let v371 : (System.TimeSpan -> int32) = _.Milliseconds
                let v372 : int32 = v371 v356
                let v375 : System.DateTime = System.DateTime (1, 1, 1, v360, v364, v368, v372)
                v375
        let v383 : string = method7()
        let v386 : (string -> string) = v382.ToString
        let v387 : string = v386 v383
        let _v163 = v387 
        #endif
#if FABLE_COMPILER_PYTHON
        let v390 : US3 option = None
        let _v390 = ref v390 
        match v152 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v391 : int64 = x
        let v392 : US3 = US3_0(v391)
        v392 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v390.Value <- x
        let v393 : US3 option = _v390.Value 
        let v404 : US3 = US3_1
        let v405 : US3 = v393 |> Option.defaultValue v404 
        let v445 : System.DateTime =
            match v405 with
            | US3_1 -> (* None *)
                let v441 : System.DateTime = System.DateTime.Now
                v441
            | US3_0(v409) -> (* Some *)
                let v410 : System.DateTime = System.DateTime.Now
                let v413 : (System.DateTime -> int64) = _.Ticks
                let v414 : int64 = v413 v410
                let v417 : int64 = v414 - v409
                let v418 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v419 : System.TimeSpan = v418 v417
                let v422 : (System.TimeSpan -> int32) = _.Hours
                let v423 : int32 = v422 v419
                let v426 : (System.TimeSpan -> int32) = _.Minutes
                let v427 : int32 = v426 v419
                let v430 : (System.TimeSpan -> int32) = _.Seconds
                let v431 : int32 = v430 v419
                let v434 : (System.TimeSpan -> int32) = _.Milliseconds
                let v435 : int32 = v434 v419
                let v438 : System.DateTime = System.DateTime (1, 1, 1, v423, v427, v431, v435)
                v438
        let v446 : string = method7()
        let v449 : (string -> string) = v445.ToString
        let v450 : string = v449 v446
        let _v163 = v450 
        #endif
#else
        let v453 : US3 option = None
        let _v453 = ref v453 
        match v152 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v454 : int64 = x
        let v455 : US3 = US3_0(v454)
        v455 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v453.Value <- x
        let v456 : US3 option = _v453.Value 
        let v467 : US3 = US3_1
        let v468 : US3 = v456 |> Option.defaultValue v467 
        let v508 : System.DateTime =
            match v468 with
            | US3_1 -> (* None *)
                let v504 : System.DateTime = System.DateTime.Now
                v504
            | US3_0(v472) -> (* Some *)
                let v473 : System.DateTime = System.DateTime.Now
                let v476 : (System.DateTime -> int64) = _.Ticks
                let v477 : int64 = v476 v473
                let v480 : int64 = v477 - v472
                let v481 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v482 : System.TimeSpan = v481 v480
                let v485 : (System.TimeSpan -> int32) = _.Hours
                let v486 : int32 = v485 v482
                let v489 : (System.TimeSpan -> int32) = _.Minutes
                let v490 : int32 = v489 v482
                let v493 : (System.TimeSpan -> int32) = _.Seconds
                let v494 : int32 = v493 v482
                let v497 : (System.TimeSpan -> int32) = _.Milliseconds
                let v498 : int32 = v497 v482
                let v501 : System.DateTime = System.DateTime (1, 1, 1, v486, v490, v494, v498)
                v501
        let v509 : string = method7()
        let v512 : (string -> string) = v508.ToString
        let v513 : string = v512 v509
        let _v163 = v513 
        #endif
        let v516 : string = _v163 
        let v581 : string = "Debug"
        let v582 : (unit -> string) = v581.ToLower
        let v583 : string = v582 ()
        let v586 : string = v583.PadLeft (7, ' ')
        let v600 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v601 : string = "inline_colorization::color_bright_blue"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "&*$0"
        let v604 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v586 v603 
        let v605 : string = "inline_colorization::color_reset"
        let v606 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "\"{v602}{v604}{v606}\""
        let v608 : string = @$"format!(" + v607 + ")"
        let v609 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "fable_library_rust::String_::fromString($0)"
        let v611 : string = Fable.Core.RustInterop.emitRustExpr v609 v610 
        let _v600 = v611 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v612 : string = "inline_colorization::color_bright_blue"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "&*$0"
        let v615 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v586 v614 
        let v616 : string = "inline_colorization::color_reset"
        let v617 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v616 
        let v618 : string = "\"{v613}{v615}{v617}\""
        let v619 : string = @$"format!(" + v618 + ")"
        let v620 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v619 
        let v621 : string = "fable_library_rust::String_::fromString($0)"
        let v622 : string = Fable.Core.RustInterop.emitRustExpr v620 v621 
        let _v600 = v622 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v623 : string = "inline_colorization::color_bright_blue"
        let v624 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v623 
        let v625 : string = "&*$0"
        let v626 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v586 v625 
        let v627 : string = "inline_colorization::color_reset"
        let v628 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v627 
        let v629 : string = "\"{v624}{v626}{v628}\""
        let v630 : string = @$"format!(" + v629 + ")"
        let v631 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v630 
        let v632 : string = "fable_library_rust::String_::fromString($0)"
        let v633 : string = Fable.Core.RustInterop.emitRustExpr v631 v632 
        let _v600 = v633 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v634 : string = "\u001b[94m"
        let v635 : string = method8()
        let v636 : string = v634 + v586 
        let v637 : string = v636 + v635 
        let _v600 = v637 
        #endif
#if FABLE_COMPILER_PYTHON
        let v638 : string = "\u001b[94m"
        let v639 : string = method8()
        let v640 : string = v638 + v586 
        let v641 : string = v640 + v639 
        let _v600 = v641 
        #endif
#else
        let v642 : string = "\u001b[94m"
        let v643 : string = method8()
        let v644 : string = v642 + v586 
        let v645 : string = v644 + v643 
        let _v600 = v645 
        #endif
        let v646 : string = _v600 
        let v652 : int64 = v148.l0
        let v653 : string = method9()
        let v654 : Mut4 = {l0 = v653} : Mut4
        let v655 : string = "{ "
        let v656 : string = $"{v655}"
        let v659 : string = v654.l0
        let v660 : string = v659 + v656 
        v654.l0 <- v660
        let v661 : string = "options"
        let v662 : string = $"{v661}"
        let v665 : string = v654.l0
        let v666 : string = v665 + v662 
        v654.l0 <- v666
        let v667 : string = " = "
        let v668 : string = $"{v667}"
        let v671 : string = v654.l0
        let v672 : string = v671 + v668 
        v654.l0 <- v672
        let v673 : string = $"{v655}"
        let v676 : string = v654.l0
        let v677 : string = v676 + v673 
        v654.l0 <- v677
        let v678 : string = "command"
        let v679 : string = $"{v678}"
        let v682 : string = v654.l0
        let v683 : string = v682 + v679 
        v654.l0 <- v683
        let v684 : string = $"{v667}"
        let v687 : string = v654.l0
        let v688 : string = v687 + v684 
        v654.l0 <- v688
        let v689 : string = $"{v0}"
        let v692 : string = v654.l0
        let v693 : string = v692 + v689 
        v654.l0 <- v693
        let v694 : string = "; "
        let v695 : string = $"{v694}"
        let v698 : string = v654.l0
        let v699 : string = v698 + v695 
        v654.l0 <- v699
        let v700 : string = "cancellation_token"
        let v701 : string = $"{v700}"
        let v704 : string = v654.l0
        let v705 : string = v704 + v701 
        v654.l0 <- v705
        let v706 : string = $"{v667}"
        let v709 : string = v654.l0
        let v710 : string = v709 + v706 
        v654.l0 <- v710
        let v711 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v712 : string = "format!(\"{:#?}\", $0)"
        let v713 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v712 
        let v714 : string = "fable_library_rust::String_::fromString($0)"
        let v715 : string = Fable.Core.RustInterop.emitRustExpr v713 v714 
        let _v711 = v715 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v716 : string = "format!(\"{:#?}\", $0)"
        let v717 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v716 
        let v718 : string = "fable_library_rust::String_::fromString($0)"
        let v719 : string = Fable.Core.RustInterop.emitRustExpr v717 v718 
        let _v711 = v719 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v720 : string = "format!(\"{:#?}\", $0)"
        let v721 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v720 
        let v722 : string = "fable_library_rust::String_::fromString($0)"
        let v723 : string = Fable.Core.RustInterop.emitRustExpr v721 v722 
        let _v711 = v723 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v724 : string = $"%A{v1}"
        let _v711 = v724 
        #endif
#if FABLE_COMPILER_PYTHON
        let v727 : string = $"%A{v1}"
        let _v711 = v727 
        #endif
#else
        let v730 : string = $"%A{v1}"
        let _v711 = v730 
        #endif
        let v733 : string = _v711 
        let v738 : string = $"{v733}"
        let v741 : string = v654.l0
        let v742 : string = v741 + v738 
        v654.l0 <- v742
        let v743 : string = $"{v694}"
        let v746 : string = v654.l0
        let v747 : string = v746 + v743 
        v654.l0 <- v747
        let v748 : string = "environment_variables"
        let v749 : string = $"{v748}"
        let v752 : string = v654.l0
        let v753 : string = v752 + v749 
        v654.l0 <- v753
        let v754 : string = $"{v667}"
        let v757 : string = v654.l0
        let v758 : string = v757 + v754 
        v654.l0 <- v758
        let v759 : string = $"%A{v2}"
        let v762 : string = $"{v759}"
        let v765 : string = v654.l0
        let v766 : string = v765 + v762 
        v654.l0 <- v766
        let v767 : string = $"{v694}"
        let v770 : string = v654.l0
        let v771 : string = v770 + v767 
        v654.l0 <- v771
        let v772 : string = "on_line"
        let v773 : string = $"{v772}"
        let v776 : string = v654.l0
        let v777 : string = v776 + v773 
        v654.l0 <- v777
        let v778 : string = $"{v667}"
        let v781 : string = v654.l0
        let v782 : string = v781 + v778 
        v654.l0 <- v782
        let v783 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v784 : string = "format!(\"{:#?}\", $0)"
        let v785 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v784 
        let v786 : string = "fable_library_rust::String_::fromString($0)"
        let v787 : string = Fable.Core.RustInterop.emitRustExpr v785 v786 
        let _v783 = v787 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v788 : string = "format!(\"{:#?}\", $0)"
        let v789 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v788 
        let v790 : string = "fable_library_rust::String_::fromString($0)"
        let v791 : string = Fable.Core.RustInterop.emitRustExpr v789 v790 
        let _v783 = v791 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v792 : string = "format!(\"{:#?}\", $0)"
        let v793 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v792 
        let v794 : string = "fable_library_rust::String_::fromString($0)"
        let v795 : string = Fable.Core.RustInterop.emitRustExpr v793 v794 
        let _v783 = v795 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v796 : string = $"%A{v3}"
        let _v783 = v796 
        #endif
#if FABLE_COMPILER_PYTHON
        let v799 : string = $"%A{v3}"
        let _v783 = v799 
        #endif
#else
        let v802 : string = $"%A{v3}"
        let _v783 = v802 
        #endif
        let v805 : string = _v783 
        let v810 : string = $"{v805}"
        let v813 : string = v654.l0
        let v814 : string = v813 + v810 
        v654.l0 <- v814
        let v815 : string = $"{v694}"
        let v818 : string = v654.l0
        let v819 : string = v818 + v815 
        v654.l0 <- v819
        let v820 : string = "stdin"
        let v821 : string = $"{v820}"
        let v824 : string = v654.l0
        let v825 : string = v824 + v821 
        v654.l0 <- v825
        let v826 : string = $"{v667}"
        let v829 : string = v654.l0
        let v830 : string = v829 + v826 
        v654.l0 <- v830
        let v831 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v832 : string = "format!(\"{:#?}\", $0)"
        let v833 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v832 
        let v834 : string = "fable_library_rust::String_::fromString($0)"
        let v835 : string = Fable.Core.RustInterop.emitRustExpr v833 v834 
        let _v831 = v835 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v836 : string = "format!(\"{:#?}\", $0)"
        let v837 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v836 
        let v838 : string = "fable_library_rust::String_::fromString($0)"
        let v839 : string = Fable.Core.RustInterop.emitRustExpr v837 v838 
        let _v831 = v839 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v840 : string = "format!(\"{:#?}\", $0)"
        let v841 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v840 
        let v842 : string = "fable_library_rust::String_::fromString($0)"
        let v843 : string = Fable.Core.RustInterop.emitRustExpr v841 v842 
        let _v831 = v843 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v844 : string = $"%A{v4}"
        let _v831 = v844 
        #endif
#if FABLE_COMPILER_PYTHON
        let v847 : string = $"%A{v4}"
        let _v831 = v847 
        #endif
#else
        let v850 : string = $"%A{v4}"
        let _v831 = v850 
        #endif
        let v853 : string = _v831 
        let v858 : string = $"{v853}"
        let v861 : string = v654.l0
        let v862 : string = v861 + v858 
        v654.l0 <- v862
        let v863 : string = $"{v694}"
        let v866 : string = v654.l0
        let v867 : string = v866 + v863 
        v654.l0 <- v867
        let v868 : string = "trace"
        let v869 : string = $"{v868}"
        let v872 : string = v654.l0
        let v873 : string = v872 + v869 
        v654.l0 <- v873
        let v874 : string = $"{v667}"
        let v877 : string = v654.l0
        let v878 : string = v877 + v874 
        v654.l0 <- v878
        let v881 : string =
            if v5 then
                let v879 : string = "true"
                v879
            else
                let v880 : string = "false"
                v880
        let v882 : string = $"{v881}"
        let v885 : string = v654.l0
        let v886 : string = v885 + v882 
        v654.l0 <- v886
        let v887 : string = $"{v694}"
        let v890 : string = v654.l0
        let v891 : string = v890 + v887 
        v654.l0 <- v891
        let v892 : string = "working_directory"
        let v893 : string = $"{v892}"
        let v896 : string = v654.l0
        let v897 : string = v896 + v893 
        v654.l0 <- v897
        let v898 : string = $"{v667}"
        let v901 : string = v654.l0
        let v902 : string = v901 + v898 
        v654.l0 <- v902
        let v903 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v904 : string = "format!(\"{:#?}\", $0)"
        let v905 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v904 
        let v906 : string = "fable_library_rust::String_::fromString($0)"
        let v907 : string = Fable.Core.RustInterop.emitRustExpr v905 v906 
        let _v903 = v907 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v908 : string = "format!(\"{:#?}\", $0)"
        let v909 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v908 
        let v910 : string = "fable_library_rust::String_::fromString($0)"
        let v911 : string = Fable.Core.RustInterop.emitRustExpr v909 v910 
        let _v903 = v911 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v912 : string = "format!(\"{:#?}\", $0)"
        let v913 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v912 
        let v914 : string = "fable_library_rust::String_::fromString($0)"
        let v915 : string = Fable.Core.RustInterop.emitRustExpr v913 v914 
        let _v903 = v915 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v916 : string = $"%A{v6}"
        let _v903 = v916 
        #endif
#if FABLE_COMPILER_PYTHON
        let v919 : string = $"%A{v6}"
        let _v903 = v919 
        #endif
#else
        let v922 : string = $"%A{v6}"
        let _v903 = v922 
        #endif
        let v925 : string = _v903 
        let v930 : string = $"{v925}"
        let v933 : string = v654.l0
        let v934 : string = v933 + v930 
        v654.l0 <- v934
        let v935 : string = " }"
        let v936 : string = $"{v935}"
        let v939 : string = v654.l0
        let v940 : string = v939 + v936 
        v654.l0 <- v940
        let v941 : string = $"{v935}"
        let v944 : string = v654.l0
        let v945 : string = v944 + v941 
        v654.l0 <- v945
        let v946 : string = v654.l0
        let v947 : (unit -> string) = closure35()
        let v948 : string = $"{v516} {v646} #{v652} %s{v947 ()} / {v946}"
        let v951 : char list = []
        let v952 : (char list -> (char [])) = List.toArray
        let v953 : (char []) = v952 v951
        let v956 : string = v948.TrimStart v953 
        let v974 : char list = []
        let v975 : char list = '/' :: v974 
        let v978 : char list = ' ' :: v975 
        let v981 : (char list -> (char [])) = List.toArray
        let v982 : (char []) = v981 v978
        let v985 : string = v956.TrimEnd v982 
        let v1003 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1004 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v985 v1004 
        let _v1003 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1005 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v985 v1005 
        let _v1003 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1006 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v985 v1006 
        let _v1003 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        System.Console.WriteLine v985 
        let _v1003 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        System.Console.WriteLine v985 
        let _v1003 = () 
        #endif
#else
        System.Console.WriteLine v985 
        let _v1003 = () 
        #endif
        _v1003 
        let v1007 : (string -> unit) = v87.l0
        v1007 v985
    let v1008 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v1012 : string =
        match v50 with
        | US1_1 -> (* None *)
            let v1010 : string = ""
            v1010
        | US1_0(v1009) -> (* Some *)
            v1009
    let start_info = System.Diagnostics.ProcessStartInfo (
      Arguments = v1012,
      StandardOutputEncoding = v1008,
      WorkingDirectory = v73,
      FileName = v49,
      CreateNoWindow = true,
      RedirectStandardError = true,
      RedirectStandardOutput = true,
      UseShellExecute = false
    )
    let v1013 : System.Diagnostics.ProcessStartInfo = start_info
    let v1014 : int32 = v2.Length
    let v1015 : Mut5 = {l0 = 0} : Mut5
    while method43(v1014, v1015) do
        let v1017 : int32 = v1015.l0
        let struct (v1018 : string, v1019 : string) = v2.[int v1017]
        v1013.EnvironmentVariables.[v1018] <- v1019 
        let v1020 : int32 = v1017 + 1
        v1015.l0 <- v1020
        ()
    let v1021 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v1013)
    use v1021 = v1021 
    let v1022 : System.Diagnostics.Process = v1021 
    let v1023 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
    let v1024 : System.Collections.Concurrent.ConcurrentStack<string> = v1023 ()
    let v1025 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure36(v0, v1, v2, v3, v4, v5, v6, v1022, v1024)
    v1022.OutputDataReceived.Add v1025 
    let v1026 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure38(v0, v1, v2, v3, v4, v5, v6, v1022, v1024)
    v1022.ErrorDataReceived.Add v1026 
    let v1027 : (unit -> bool) = v1022.Start
    let v1028 : bool = v1027 ()
    let v1029 : bool = v1028 = false
    if v1029 then
        let v1030 : string = $"runtime.execute_with_options_async / process_start error"
        failwith<unit> v1030
    let v1031 : (unit -> unit) = v1022.BeginErrorReadLine
    v1031 ()
    let v1032 : (unit -> unit) = v1022.BeginOutputReadLine
    v1032 ()
    let v1033 : US32 option = None
    let _v1033 = ref v1033 
    match v1 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v1034 : System.Threading.CancellationToken = x
    let v1035 : US32 = US32_0(v1034)
    v1035 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v1033.Value <- x
    let v1036 : US32 option = _v1033.Value 
    let v1047 : US32 = US32_1
    let v1048 : US32 = v1036 |> Option.defaultValue v1047 
    let v1055 : System.Threading.CancellationToken =
        match v1048 with
        | US32_1 -> (* None *)
            let v1053 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
            v1053
        | US32_0(v1052) -> (* Some *)
            v1052
    let v1056 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1057 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _v1056 = v1057 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1060 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _v1056 = v1060 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1063 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _v1056 = v1063 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1066 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _v1056 = v1066 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1069 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _v1056 = v1069 
    #endif
#else
    let v1072 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1073 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _v1072 = v1073 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1076 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _v1072 = v1076 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1079 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _v1072 = v1079 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1082 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _v1072 = v1082 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1085 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _v1072 = v1085 
    #endif
#else
    let v1088 : Async<System.Threading.CancellationToken> option = None
    let mutable _v1088 = v1088 
    async {
    let v1089 : Async<System.Threading.CancellationToken> = Async.CancellationToken
    let! v1089 = v1089 
    let v1090 : System.Threading.CancellationToken = v1089 
    let v1091 : System.Threading.CancellationToken = Async.DefaultCancellationToken
    let v1092 : (System.Threading.CancellationToken []) = [|v1090; v1091; v1055|]
    let v1093 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
    let v1094 : System.Threading.CancellationTokenSource = v1093 v1092
    let v1095 : System.Threading.CancellationToken = v1094.Token
    return v1095 
    }
    |> fun x -> _v1088 <- Some x
    let v1096 : Async<System.Threading.CancellationToken> = match _v1088 with Some x -> x | None -> failwith "async.new_async_unit / _v1088=None"
    let _v1072 = v1096 
    #endif
    let v1097 : Async<System.Threading.CancellationToken> = _v1072 
    let _v1056 = v1097 
    #endif
    let v1102 : Async<System.Threading.CancellationToken> = _v1056 
    let! v1102 = v1102 
    let v1107 : System.Threading.CancellationToken = v1102 
    let v1108 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v1107.Register
    let v1109 : (unit -> unit) = closure39(v1022)
    let v1110 : System.Threading.CancellationTokenRegistration = v1108 v1109
    use v1110 = v1110 
    let v1111 : System.Threading.CancellationTokenRegistration = v1110 
    let v1112 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1113 : Async<int32> = null |> unbox<Async<int32>>
    let _v1112 = v1113 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1116 : Async<int32> = null |> unbox<Async<int32>>
    let _v1112 = v1116 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1119 : Async<int32> = null |> unbox<Async<int32>>
    let _v1112 = v1119 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1122 : Async<int32> = null |> unbox<Async<int32>>
    let _v1112 = v1122 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1125 : Async<int32> = null |> unbox<Async<int32>>
    let _v1112 = v1125 
    #endif
#else
    let v1128 : Async<int32> option = None
    let mutable _v1128 = v1128 
    async {
    try
    let v1129 : System.Threading.Tasks.Task = v1022.WaitForExitAsync v1107 
    let v1130 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1131 : Async<unit> = null |> unbox<Async<unit>>
    let _v1130 = v1131 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1134 : Async<unit> = null |> unbox<Async<unit>>
    let _v1130 = v1134 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1137 : Async<unit> = null |> unbox<Async<unit>>
    let _v1130 = v1137 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1140 : Async<unit> = null |> unbox<Async<unit>>
    let _v1130 = v1140 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1143 : Async<unit> = null |> unbox<Async<unit>>
    let _v1130 = v1143 
    #endif
#else
    let v1146 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
    let v1147 : Async<unit> = v1146 v1129
    let _v1130 = v1147 
    #endif
    let v1148 : Async<unit> = _v1130 
    do! v1148 
    let v1153 : int32 = v1022.ExitCode
    return v1153 
    with ex ->
    let v1154 : exn = ex
    let v1155 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1156 : string = $"%A{v1154}"
    let _v1155 = v1156 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1159 : string = $"%A{v1154}"
    let _v1155 = v1159 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1162 : string = $"%A{v1154}"
    let _v1155 = v1162 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1165 : string = $"%A{v1154}"
    let _v1155 = v1165 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1168 : string = $"%A{v1154}"
    let _v1155 = v1168 
    #endif
#else
    let v1171 : string = $"{v1154.GetType ()}: {v1154.Message}"
    let _v1155 = v1171 
    #endif
    let v1172 : string = _v1155 
    let v1177 : (string -> unit) = v1024.Push
    v1177 v1172
    let v1178 : System.Threading.Tasks.TaskCanceledException = v1154 |> unbox<System.Threading.Tasks.TaskCanceledException>
    let v1181 : bool = State.trace_state.IsNone
    if v1181 then
        let v1182 : US0 = US0_0
        let struct (v1183 : Mut0, v1184 : Mut1, v1185 : Mut2, v1186 : Mut3, v1187 : int64 option) = method1(v1182)
        let v1188 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v1183, v1184, v1185, v1186, v1187) 
        State.trace_state <- v1188 
        ()
    let struct (v1193 : Mut0, v1194 : Mut1, v1195 : Mut2, v1196 : Mut3, v1197 : int64 option) = State.trace_state.Value
    let v1208 : bool = State.trace_state.IsNone
    if v1208 then
        let v1209 : US0 = US0_0
        let struct (v1210 : Mut0, v1211 : Mut1, v1212 : Mut2, v1213 : Mut3, v1214 : int64 option) = method1(v1209)
        let v1215 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v1210, v1211, v1212, v1213, v1214) 
        State.trace_state <- v1215 
        ()
    let struct (v1220 : Mut0, v1221 : Mut1, v1222 : Mut2, v1223 : Mut3, v1224 : int64 option) = State.trace_state.Value
    let v1235 : US0 = v1223.l0
    let v1236 : bool = v1222.l0
    let v1237 : bool = v1236 = false
    let v1240 : bool =
        if v1237 then
            false
        else
            let v1238 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v1235
            let v1239 : bool = 3 >= v1238
            v1239
    if v1240 then
        let v1241 : int64 = v1193.l0
        let v1242 : int64 = v1241 + 1L
        v1193.l0 <- v1242
        let v1243 : bool = State.trace_state.IsNone
        if v1243 then
            let v1244 : US0 = US0_0
            let struct (v1245 : Mut0, v1246 : Mut1, v1247 : Mut2, v1248 : Mut3, v1249 : int64 option) = method1(v1244)
            let v1250 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v1245, v1246, v1247, v1248, v1249) 
            State.trace_state <- v1250 
            ()
        let struct (v1255 : Mut0, v1256 : Mut1, v1257 : Mut2, v1258 : Mut3, v1259 : int64 option) = State.trace_state.Value
        let v1270 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1271 : US3 option = None
        let _v1271 = ref v1271 
        match v1259 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v1272 : int64 = x
        let v1273 : US3 = US3_0(v1272)
        v1273 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v1271.Value <- x
        let v1274 : US3 option = _v1271.Value 
        let v1285 : US3 = US3_1
        let v1286 : US3 = v1274 |> Option.defaultValue v1285 
        let v1326 : System.DateTime =
            match v1286 with
            | US3_1 -> (* None *)
                let v1322 : System.DateTime = System.DateTime.Now
                v1322
            | US3_0(v1290) -> (* Some *)
                let v1291 : System.DateTime = System.DateTime.Now
                let v1294 : (System.DateTime -> int64) = _.Ticks
                let v1295 : int64 = v1294 v1291
                let v1298 : int64 = v1295 - v1290
                let v1299 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v1300 : System.TimeSpan = v1299 v1298
                let v1303 : (System.TimeSpan -> int32) = _.Hours
                let v1304 : int32 = v1303 v1300
                let v1307 : (System.TimeSpan -> int32) = _.Minutes
                let v1308 : int32 = v1307 v1300
                let v1311 : (System.TimeSpan -> int32) = _.Seconds
                let v1312 : int32 = v1311 v1300
                let v1315 : (System.TimeSpan -> int32) = _.Milliseconds
                let v1316 : int32 = v1315 v1300
                let v1319 : System.DateTime = System.DateTime (1, 1, 1, v1304, v1308, v1312, v1316)
                v1319
        let v1327 : string = method6()
        let v1330 : (string -> string) = v1326.ToString
        let v1331 : string = v1330 v1327
        let _v1270 = v1331 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1334 : US3 option = None
        let _v1334 = ref v1334 
        match v1259 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v1335 : int64 = x
        let v1336 : US3 = US3_0(v1335)
        v1336 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v1334.Value <- x
        let v1337 : US3 option = _v1334.Value 
        let v1348 : US3 = US3_1
        let v1349 : US3 = v1337 |> Option.defaultValue v1348 
        let v1389 : System.DateTime =
            match v1349 with
            | US3_1 -> (* None *)
                let v1385 : System.DateTime = System.DateTime.Now
                v1385
            | US3_0(v1353) -> (* Some *)
                let v1354 : System.DateTime = System.DateTime.Now
                let v1357 : (System.DateTime -> int64) = _.Ticks
                let v1358 : int64 = v1357 v1354
                let v1361 : int64 = v1358 - v1353
                let v1362 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v1363 : System.TimeSpan = v1362 v1361
                let v1366 : (System.TimeSpan -> int32) = _.Hours
                let v1367 : int32 = v1366 v1363
                let v1370 : (System.TimeSpan -> int32) = _.Minutes
                let v1371 : int32 = v1370 v1363
                let v1374 : (System.TimeSpan -> int32) = _.Seconds
                let v1375 : int32 = v1374 v1363
                let v1378 : (System.TimeSpan -> int32) = _.Milliseconds
                let v1379 : int32 = v1378 v1363
                let v1382 : System.DateTime = System.DateTime (1, 1, 1, v1367, v1371, v1375, v1379)
                v1382
        let v1390 : string = method6()
        let v1393 : (string -> string) = v1389.ToString
        let v1394 : string = v1393 v1390
        let _v1270 = v1394 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1397 : string = $"near_sdk::env::block_timestamp()"
        let v1398 : uint64 = Fable.Core.RustInterop.emitRustExpr () v1397 
        let v1399 : US3 option = None
        let _v1399 = ref v1399 
        match v1259 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v1400 : int64 = x
        let v1401 : US3 = US3_0(v1400)
        v1401 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v1399.Value <- x
        let v1402 : US3 option = _v1399.Value 
        let v1413 : US3 = US3_1
        let v1414 : US3 = v1402 |> Option.defaultValue v1413 
        let v1423 : uint64 =
            match v1414 with
            | US3_1 -> (* None *)
                v1398
            | US3_0(v1418) -> (* Some *)
                let v1419 : (int64 -> uint64) = uint64
                let v1420 : uint64 = v1419 v1418
                let v1421 : uint64 = v1398 - v1420
                v1421
        let v1424 : uint64 = v1423 / 1000000000UL
        let v1425 : uint64 = v1424 % 60UL
        let v1426 : uint64 = v1424 / 60UL
        let v1427 : uint64 = v1426 % 60UL
        let v1428 : uint64 = v1424 / 3600UL
        let v1429 : uint64 = v1428 % 24UL
        let v1430 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v1431 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v1429, v1427, v1425) v1430 
        let v1432 : string = "fable_library_rust::String_::fromString($0)"
        let v1433 : string = Fable.Core.RustInterop.emitRustExpr v1431 v1432 
        let _v1270 = v1433 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v1434 : US3 option = None
        let _v1434 = ref v1434 
        match v1259 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v1435 : int64 = x
        let v1436 : US3 = US3_0(v1435)
        v1436 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v1434.Value <- x
        let v1437 : US3 option = _v1434.Value 
        let v1448 : US3 = US3_1
        let v1449 : US3 = v1437 |> Option.defaultValue v1448 
        let v1489 : System.DateTime =
            match v1449 with
            | US3_1 -> (* None *)
                let v1485 : System.DateTime = System.DateTime.Now
                v1485
            | US3_0(v1453) -> (* Some *)
                let v1454 : System.DateTime = System.DateTime.Now
                let v1457 : (System.DateTime -> int64) = _.Ticks
                let v1458 : int64 = v1457 v1454
                let v1461 : int64 = v1458 - v1453
                let v1462 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v1463 : System.TimeSpan = v1462 v1461
                let v1466 : (System.TimeSpan -> int32) = _.Hours
                let v1467 : int32 = v1466 v1463
                let v1470 : (System.TimeSpan -> int32) = _.Minutes
                let v1471 : int32 = v1470 v1463
                let v1474 : (System.TimeSpan -> int32) = _.Seconds
                let v1475 : int32 = v1474 v1463
                let v1478 : (System.TimeSpan -> int32) = _.Milliseconds
                let v1479 : int32 = v1478 v1463
                let v1482 : System.DateTime = System.DateTime (1, 1, 1, v1467, v1471, v1475, v1479)
                v1482
        let v1490 : string = method7()
        let v1493 : (string -> string) = v1489.ToString
        let v1494 : string = v1493 v1490
        let _v1270 = v1494 
        #endif
#if FABLE_COMPILER_PYTHON
        let v1497 : US3 option = None
        let _v1497 = ref v1497 
        match v1259 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v1498 : int64 = x
        let v1499 : US3 = US3_0(v1498)
        v1499 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v1497.Value <- x
        let v1500 : US3 option = _v1497.Value 
        let v1511 : US3 = US3_1
        let v1512 : US3 = v1500 |> Option.defaultValue v1511 
        let v1552 : System.DateTime =
            match v1512 with
            | US3_1 -> (* None *)
                let v1548 : System.DateTime = System.DateTime.Now
                v1548
            | US3_0(v1516) -> (* Some *)
                let v1517 : System.DateTime = System.DateTime.Now
                let v1520 : (System.DateTime -> int64) = _.Ticks
                let v1521 : int64 = v1520 v1517
                let v1524 : int64 = v1521 - v1516
                let v1525 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v1526 : System.TimeSpan = v1525 v1524
                let v1529 : (System.TimeSpan -> int32) = _.Hours
                let v1530 : int32 = v1529 v1526
                let v1533 : (System.TimeSpan -> int32) = _.Minutes
                let v1534 : int32 = v1533 v1526
                let v1537 : (System.TimeSpan -> int32) = _.Seconds
                let v1538 : int32 = v1537 v1526
                let v1541 : (System.TimeSpan -> int32) = _.Milliseconds
                let v1542 : int32 = v1541 v1526
                let v1545 : System.DateTime = System.DateTime (1, 1, 1, v1530, v1534, v1538, v1542)
                v1545
        let v1553 : string = method7()
        let v1556 : (string -> string) = v1552.ToString
        let v1557 : string = v1556 v1553
        let _v1270 = v1557 
        #endif
#else
        let v1560 : US3 option = None
        let _v1560 = ref v1560 
        match v1259 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v1561 : int64 = x
        let v1562 : US3 = US3_0(v1561)
        v1562 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v1560.Value <- x
        let v1563 : US3 option = _v1560.Value 
        let v1574 : US3 = US3_1
        let v1575 : US3 = v1563 |> Option.defaultValue v1574 
        let v1615 : System.DateTime =
            match v1575 with
            | US3_1 -> (* None *)
                let v1611 : System.DateTime = System.DateTime.Now
                v1611
            | US3_0(v1579) -> (* Some *)
                let v1580 : System.DateTime = System.DateTime.Now
                let v1583 : (System.DateTime -> int64) = _.Ticks
                let v1584 : int64 = v1583 v1580
                let v1587 : int64 = v1584 - v1579
                let v1588 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v1589 : System.TimeSpan = v1588 v1587
                let v1592 : (System.TimeSpan -> int32) = _.Hours
                let v1593 : int32 = v1592 v1589
                let v1596 : (System.TimeSpan -> int32) = _.Minutes
                let v1597 : int32 = v1596 v1589
                let v1600 : (System.TimeSpan -> int32) = _.Seconds
                let v1601 : int32 = v1600 v1589
                let v1604 : (System.TimeSpan -> int32) = _.Milliseconds
                let v1605 : int32 = v1604 v1589
                let v1608 : System.DateTime = System.DateTime (1, 1, 1, v1593, v1597, v1601, v1605)
                v1608
        let v1616 : string = method7()
        let v1619 : (string -> string) = v1615.ToString
        let v1620 : string = v1619 v1616
        let _v1270 = v1620 
        #endif
        let v1623 : string = _v1270 
        let v1688 : string = "Warning"
        let v1689 : (unit -> string) = v1688.ToLower
        let v1690 : string = v1689 ()
        let v1693 : string = v1690.PadLeft (7, ' ')
        let v1707 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1708 : string = "inline_colorization::color_yellow"
        let v1709 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1708 
        let v1710 : string = "&*$0"
        let v1711 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1693 v1710 
        let v1712 : string = "inline_colorization::color_reset"
        let v1713 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1712 
        let v1714 : string = "\"{v1709}{v1711}{v1713}\""
        let v1715 : string = @$"format!(" + v1714 + ")"
        let v1716 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1715 
        let v1717 : string = "fable_library_rust::String_::fromString($0)"
        let v1718 : string = Fable.Core.RustInterop.emitRustExpr v1716 v1717 
        let _v1707 = v1718 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1719 : string = "inline_colorization::color_yellow"
        let v1720 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1719 
        let v1721 : string = "&*$0"
        let v1722 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1693 v1721 
        let v1723 : string = "inline_colorization::color_reset"
        let v1724 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1723 
        let v1725 : string = "\"{v1720}{v1722}{v1724}\""
        let v1726 : string = @$"format!(" + v1725 + ")"
        let v1727 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1726 
        let v1728 : string = "fable_library_rust::String_::fromString($0)"
        let v1729 : string = Fable.Core.RustInterop.emitRustExpr v1727 v1728 
        let _v1707 = v1729 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1730 : string = "inline_colorization::color_yellow"
        let v1731 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1730 
        let v1732 : string = "&*$0"
        let v1733 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1693 v1732 
        let v1734 : string = "inline_colorization::color_reset"
        let v1735 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1734 
        let v1736 : string = "\"{v1731}{v1733}{v1735}\""
        let v1737 : string = @$"format!(" + v1736 + ")"
        let v1738 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1737 
        let v1739 : string = "fable_library_rust::String_::fromString($0)"
        let v1740 : string = Fable.Core.RustInterop.emitRustExpr v1738 v1739 
        let _v1707 = v1740 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v1741 : string = "\u001b[93m"
        let v1742 : string = method8()
        let v1743 : string = v1741 + v1693 
        let v1744 : string = v1743 + v1742 
        let _v1707 = v1744 
        #endif
#if FABLE_COMPILER_PYTHON
        let v1745 : string = "\u001b[93m"
        let v1746 : string = method8()
        let v1747 : string = v1745 + v1693 
        let v1748 : string = v1747 + v1746 
        let _v1707 = v1748 
        #endif
#else
        let v1749 : string = "\u001b[93m"
        let v1750 : string = method8()
        let v1751 : string = v1749 + v1693 
        let v1752 : string = v1751 + v1750 
        let _v1707 = v1752 
        #endif
        let v1753 : string = _v1707 
        let v1759 : int64 = v1255.l0
        let v1760 : string = method9()
        let v1761 : Mut4 = {l0 = v1760} : Mut4
        let v1762 : string = "{ "
        let v1763 : string = $"{v1762}"
        let v1766 : string = v1761.l0
        let v1767 : string = v1766 + v1763 
        v1761.l0 <- v1767
        let v1768 : string = "ex"
        let v1769 : string = $"{v1768}"
        let v1772 : string = v1761.l0
        let v1773 : string = v1772 + v1769 
        v1761.l0 <- v1773
        let v1774 : string = " = "
        let v1775 : string = $"{v1774}"
        let v1778 : string = v1761.l0
        let v1779 : string = v1778 + v1775 
        v1761.l0 <- v1779
        let v1780 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1781 : string = "format!(\"{:#?}\", $0)"
        let v1782 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1178 v1781 
        let v1783 : string = "fable_library_rust::String_::fromString($0)"
        let v1784 : string = Fable.Core.RustInterop.emitRustExpr v1782 v1783 
        let _v1780 = v1784 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1785 : string = "format!(\"{:#?}\", $0)"
        let v1786 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1178 v1785 
        let v1787 : string = "fable_library_rust::String_::fromString($0)"
        let v1788 : string = Fable.Core.RustInterop.emitRustExpr v1786 v1787 
        let _v1780 = v1788 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1789 : string = "format!(\"{:#?}\", $0)"
        let v1790 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1178 v1789 
        let v1791 : string = "fable_library_rust::String_::fromString($0)"
        let v1792 : string = Fable.Core.RustInterop.emitRustExpr v1790 v1791 
        let _v1780 = v1792 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v1793 : string = $"%A{v1178}"
        let _v1780 = v1793 
        #endif
#if FABLE_COMPILER_PYTHON
        let v1796 : string = $"%A{v1178}"
        let _v1780 = v1796 
        #endif
#else
        let v1799 : string = $"%A{v1178}"
        let _v1780 = v1799 
        #endif
        let v1802 : string = _v1780 
        let v1807 : string = $"{v1802}"
        let v1810 : string = v1761.l0
        let v1811 : string = v1810 + v1807 
        v1761.l0 <- v1811
        let v1812 : string = " }"
        let v1813 : string = $"{v1812}"
        let v1816 : string = v1761.l0
        let v1817 : string = v1816 + v1813 
        v1761.l0 <- v1817
        let v1818 : string = v1761.l0
        let v1819 : (unit -> string) = closure40()
        let v1820 : string = $"{v1623} {v1753} #{v1759} %s{v1819 ()} / {v1818}"
        let v1823 : char list = []
        let v1824 : (char list -> (char [])) = List.toArray
        let v1825 : (char []) = v1824 v1823
        let v1828 : string = v1820.TrimStart v1825 
        let v1846 : char list = []
        let v1847 : char list = '/' :: v1846 
        let v1850 : char list = ' ' :: v1847 
        let v1853 : (char list -> (char [])) = List.toArray
        let v1854 : (char []) = v1853 v1850
        let v1857 : string = v1828.TrimEnd v1854 
        let v1875 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1876 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v1857 v1876 
        let _v1875 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1877 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v1857 v1877 
        let _v1875 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1878 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v1857 v1878 
        let _v1875 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        System.Console.WriteLine v1857 
        let _v1875 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        System.Console.WriteLine v1857 
        let _v1875 = () 
        #endif
#else
        System.Console.WriteLine v1857 
        let _v1875 = () 
        #endif
        _v1875 
        let v1879 : (string -> unit) = v1194.l0
        v1879 v1857
    return -2147483648 
    (*
    *)
    }
    |> fun x -> _v1128 <- Some x
    let v1880 : Async<int32> = match _v1128 with Some x -> x | None -> failwith "async.new_async_unit / _v1128=None"
    let _v1112 = v1880 
    #endif
    let v1881 : Async<int32> = _v1112 
    let! v1881 = v1881 
    let v1886 : int32 = v1881 
    let v1887 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.rev
    let v1888 : string seq = v1887 v1024
    let v1891 : (string -> (string seq -> string)) = String.concat
    let v1892 : string = "\n"
    let v1893 : (string seq -> string) = v1891 v1892
    let v1894 : string = v1893 v1888
    let v1897 : bool = State.trace_state.IsNone
    if v1897 then
        let v1898 : US0 = US0_0
        let struct (v1899 : Mut0, v1900 : Mut1, v1901 : Mut2, v1902 : Mut3, v1903 : int64 option) = method1(v1898)
        let v1904 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v1899, v1900, v1901, v1902, v1903) 
        State.trace_state <- v1904 
        ()
    let struct (v1909 : Mut0, v1910 : Mut1, v1911 : Mut2, v1912 : Mut3, v1913 : int64 option) = State.trace_state.Value
    let v1924 : bool = State.trace_state.IsNone
    if v1924 then
        let v1925 : US0 = US0_0
        let struct (v1926 : Mut0, v1927 : Mut1, v1928 : Mut2, v1929 : Mut3, v1930 : int64 option) = method1(v1925)
        let v1931 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v1926, v1927, v1928, v1929, v1930) 
        State.trace_state <- v1931 
        ()
    let struct (v1936 : Mut0, v1937 : Mut1, v1938 : Mut2, v1939 : Mut3, v1940 : int64 option) = State.trace_state.Value
    let v1951 : US0 = v1939.l0
    let v1952 : bool = v1938.l0
    let v1953 : bool = v1952 = false
    let v1956 : bool =
        if v1953 then
            false
        else
            let v1954 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v1951
            let v1955 : bool = 1 >= v1954
            v1955
    if v1956 then
        let v1957 : int64 = v1909.l0
        let v1958 : int64 = v1957 + 1L
        v1909.l0 <- v1958
        let v1959 : bool = State.trace_state.IsNone
        if v1959 then
            let v1960 : US0 = US0_0
            let struct (v1961 : Mut0, v1962 : Mut1, v1963 : Mut2, v1964 : Mut3, v1965 : int64 option) = method1(v1960)
            let v1966 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v1961, v1962, v1963, v1964, v1965) 
            State.trace_state <- v1966 
            ()
        let struct (v1971 : Mut0, v1972 : Mut1, v1973 : Mut2, v1974 : Mut3, v1975 : int64 option) = State.trace_state.Value
        let v1986 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1987 : US3 option = None
        let _v1987 = ref v1987 
        match v1975 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v1988 : int64 = x
        let v1989 : US3 = US3_0(v1988)
        v1989 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v1987.Value <- x
        let v1990 : US3 option = _v1987.Value 
        let v2001 : US3 = US3_1
        let v2002 : US3 = v1990 |> Option.defaultValue v2001 
        let v2042 : System.DateTime =
            match v2002 with
            | US3_1 -> (* None *)
                let v2038 : System.DateTime = System.DateTime.Now
                v2038
            | US3_0(v2006) -> (* Some *)
                let v2007 : System.DateTime = System.DateTime.Now
                let v2010 : (System.DateTime -> int64) = _.Ticks
                let v2011 : int64 = v2010 v2007
                let v2014 : int64 = v2011 - v2006
                let v2015 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v2016 : System.TimeSpan = v2015 v2014
                let v2019 : (System.TimeSpan -> int32) = _.Hours
                let v2020 : int32 = v2019 v2016
                let v2023 : (System.TimeSpan -> int32) = _.Minutes
                let v2024 : int32 = v2023 v2016
                let v2027 : (System.TimeSpan -> int32) = _.Seconds
                let v2028 : int32 = v2027 v2016
                let v2031 : (System.TimeSpan -> int32) = _.Milliseconds
                let v2032 : int32 = v2031 v2016
                let v2035 : System.DateTime = System.DateTime (1, 1, 1, v2020, v2024, v2028, v2032)
                v2035
        let v2043 : string = method6()
        let v2046 : (string -> string) = v2042.ToString
        let v2047 : string = v2046 v2043
        let _v1986 = v2047 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v2050 : US3 option = None
        let _v2050 = ref v2050 
        match v1975 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v2051 : int64 = x
        let v2052 : US3 = US3_0(v2051)
        v2052 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v2050.Value <- x
        let v2053 : US3 option = _v2050.Value 
        let v2064 : US3 = US3_1
        let v2065 : US3 = v2053 |> Option.defaultValue v2064 
        let v2105 : System.DateTime =
            match v2065 with
            | US3_1 -> (* None *)
                let v2101 : System.DateTime = System.DateTime.Now
                v2101
            | US3_0(v2069) -> (* Some *)
                let v2070 : System.DateTime = System.DateTime.Now
                let v2073 : (System.DateTime -> int64) = _.Ticks
                let v2074 : int64 = v2073 v2070
                let v2077 : int64 = v2074 - v2069
                let v2078 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v2079 : System.TimeSpan = v2078 v2077
                let v2082 : (System.TimeSpan -> int32) = _.Hours
                let v2083 : int32 = v2082 v2079
                let v2086 : (System.TimeSpan -> int32) = _.Minutes
                let v2087 : int32 = v2086 v2079
                let v2090 : (System.TimeSpan -> int32) = _.Seconds
                let v2091 : int32 = v2090 v2079
                let v2094 : (System.TimeSpan -> int32) = _.Milliseconds
                let v2095 : int32 = v2094 v2079
                let v2098 : System.DateTime = System.DateTime (1, 1, 1, v2083, v2087, v2091, v2095)
                v2098
        let v2106 : string = method6()
        let v2109 : (string -> string) = v2105.ToString
        let v2110 : string = v2109 v2106
        let _v1986 = v2110 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v2113 : string = $"near_sdk::env::block_timestamp()"
        let v2114 : uint64 = Fable.Core.RustInterop.emitRustExpr () v2113 
        let v2115 : US3 option = None
        let _v2115 = ref v2115 
        match v1975 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v2116 : int64 = x
        let v2117 : US3 = US3_0(v2116)
        v2117 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v2115.Value <- x
        let v2118 : US3 option = _v2115.Value 
        let v2129 : US3 = US3_1
        let v2130 : US3 = v2118 |> Option.defaultValue v2129 
        let v2139 : uint64 =
            match v2130 with
            | US3_1 -> (* None *)
                v2114
            | US3_0(v2134) -> (* Some *)
                let v2135 : (int64 -> uint64) = uint64
                let v2136 : uint64 = v2135 v2134
                let v2137 : uint64 = v2114 - v2136
                v2137
        let v2140 : uint64 = v2139 / 1000000000UL
        let v2141 : uint64 = v2140 % 60UL
        let v2142 : uint64 = v2140 / 60UL
        let v2143 : uint64 = v2142 % 60UL
        let v2144 : uint64 = v2140 / 3600UL
        let v2145 : uint64 = v2144 % 24UL
        let v2146 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v2147 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v2145, v2143, v2141) v2146 
        let v2148 : string = "fable_library_rust::String_::fromString($0)"
        let v2149 : string = Fable.Core.RustInterop.emitRustExpr v2147 v2148 
        let _v1986 = v2149 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v2150 : US3 option = None
        let _v2150 = ref v2150 
        match v1975 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v2151 : int64 = x
        let v2152 : US3 = US3_0(v2151)
        v2152 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v2150.Value <- x
        let v2153 : US3 option = _v2150.Value 
        let v2164 : US3 = US3_1
        let v2165 : US3 = v2153 |> Option.defaultValue v2164 
        let v2205 : System.DateTime =
            match v2165 with
            | US3_1 -> (* None *)
                let v2201 : System.DateTime = System.DateTime.Now
                v2201
            | US3_0(v2169) -> (* Some *)
                let v2170 : System.DateTime = System.DateTime.Now
                let v2173 : (System.DateTime -> int64) = _.Ticks
                let v2174 : int64 = v2173 v2170
                let v2177 : int64 = v2174 - v2169
                let v2178 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v2179 : System.TimeSpan = v2178 v2177
                let v2182 : (System.TimeSpan -> int32) = _.Hours
                let v2183 : int32 = v2182 v2179
                let v2186 : (System.TimeSpan -> int32) = _.Minutes
                let v2187 : int32 = v2186 v2179
                let v2190 : (System.TimeSpan -> int32) = _.Seconds
                let v2191 : int32 = v2190 v2179
                let v2194 : (System.TimeSpan -> int32) = _.Milliseconds
                let v2195 : int32 = v2194 v2179
                let v2198 : System.DateTime = System.DateTime (1, 1, 1, v2183, v2187, v2191, v2195)
                v2198
        let v2206 : string = method7()
        let v2209 : (string -> string) = v2205.ToString
        let v2210 : string = v2209 v2206
        let _v1986 = v2210 
        #endif
#if FABLE_COMPILER_PYTHON
        let v2213 : US3 option = None
        let _v2213 = ref v2213 
        match v1975 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v2214 : int64 = x
        let v2215 : US3 = US3_0(v2214)
        v2215 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v2213.Value <- x
        let v2216 : US3 option = _v2213.Value 
        let v2227 : US3 = US3_1
        let v2228 : US3 = v2216 |> Option.defaultValue v2227 
        let v2268 : System.DateTime =
            match v2228 with
            | US3_1 -> (* None *)
                let v2264 : System.DateTime = System.DateTime.Now
                v2264
            | US3_0(v2232) -> (* Some *)
                let v2233 : System.DateTime = System.DateTime.Now
                let v2236 : (System.DateTime -> int64) = _.Ticks
                let v2237 : int64 = v2236 v2233
                let v2240 : int64 = v2237 - v2232
                let v2241 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v2242 : System.TimeSpan = v2241 v2240
                let v2245 : (System.TimeSpan -> int32) = _.Hours
                let v2246 : int32 = v2245 v2242
                let v2249 : (System.TimeSpan -> int32) = _.Minutes
                let v2250 : int32 = v2249 v2242
                let v2253 : (System.TimeSpan -> int32) = _.Seconds
                let v2254 : int32 = v2253 v2242
                let v2257 : (System.TimeSpan -> int32) = _.Milliseconds
                let v2258 : int32 = v2257 v2242
                let v2261 : System.DateTime = System.DateTime (1, 1, 1, v2246, v2250, v2254, v2258)
                v2261
        let v2269 : string = method7()
        let v2272 : (string -> string) = v2268.ToString
        let v2273 : string = v2272 v2269
        let _v1986 = v2273 
        #endif
#else
        let v2276 : US3 option = None
        let _v2276 = ref v2276 
        match v1975 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v2277 : int64 = x
        let v2278 : US3 = US3_0(v2277)
        v2278 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v2276.Value <- x
        let v2279 : US3 option = _v2276.Value 
        let v2290 : US3 = US3_1
        let v2291 : US3 = v2279 |> Option.defaultValue v2290 
        let v2331 : System.DateTime =
            match v2291 with
            | US3_1 -> (* None *)
                let v2327 : System.DateTime = System.DateTime.Now
                v2327
            | US3_0(v2295) -> (* Some *)
                let v2296 : System.DateTime = System.DateTime.Now
                let v2299 : (System.DateTime -> int64) = _.Ticks
                let v2300 : int64 = v2299 v2296
                let v2303 : int64 = v2300 - v2295
                let v2304 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v2305 : System.TimeSpan = v2304 v2303
                let v2308 : (System.TimeSpan -> int32) = _.Hours
                let v2309 : int32 = v2308 v2305
                let v2312 : (System.TimeSpan -> int32) = _.Minutes
                let v2313 : int32 = v2312 v2305
                let v2316 : (System.TimeSpan -> int32) = _.Seconds
                let v2317 : int32 = v2316 v2305
                let v2320 : (System.TimeSpan -> int32) = _.Milliseconds
                let v2321 : int32 = v2320 v2305
                let v2324 : System.DateTime = System.DateTime (1, 1, 1, v2309, v2313, v2317, v2321)
                v2324
        let v2332 : string = method7()
        let v2335 : (string -> string) = v2331.ToString
        let v2336 : string = v2335 v2332
        let _v1986 = v2336 
        #endif
        let v2339 : string = _v1986 
        let v2404 : string = "Debug"
        let v2405 : (unit -> string) = v2404.ToLower
        let v2406 : string = v2405 ()
        let v2409 : string = v2406.PadLeft (7, ' ')
        let v2423 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v2424 : string = "inline_colorization::color_bright_blue"
        let v2425 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v2424 
        let v2426 : string = "&*$0"
        let v2427 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2409 v2426 
        let v2428 : string = "inline_colorization::color_reset"
        let v2429 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v2428 
        let v2430 : string = "\"{v2425}{v2427}{v2429}\""
        let v2431 : string = @$"format!(" + v2430 + ")"
        let v2432 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v2431 
        let v2433 : string = "fable_library_rust::String_::fromString($0)"
        let v2434 : string = Fable.Core.RustInterop.emitRustExpr v2432 v2433 
        let _v2423 = v2434 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v2435 : string = "inline_colorization::color_bright_blue"
        let v2436 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v2435 
        let v2437 : string = "&*$0"
        let v2438 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2409 v2437 
        let v2439 : string = "inline_colorization::color_reset"
        let v2440 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v2439 
        let v2441 : string = "\"{v2436}{v2438}{v2440}\""
        let v2442 : string = @$"format!(" + v2441 + ")"
        let v2443 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v2442 
        let v2444 : string = "fable_library_rust::String_::fromString($0)"
        let v2445 : string = Fable.Core.RustInterop.emitRustExpr v2443 v2444 
        let _v2423 = v2445 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v2446 : string = "inline_colorization::color_bright_blue"
        let v2447 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v2446 
        let v2448 : string = "&*$0"
        let v2449 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2409 v2448 
        let v2450 : string = "inline_colorization::color_reset"
        let v2451 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v2450 
        let v2452 : string = "\"{v2447}{v2449}{v2451}\""
        let v2453 : string = @$"format!(" + v2452 + ")"
        let v2454 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v2453 
        let v2455 : string = "fable_library_rust::String_::fromString($0)"
        let v2456 : string = Fable.Core.RustInterop.emitRustExpr v2454 v2455 
        let _v2423 = v2456 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v2457 : string = "\u001b[94m"
        let v2458 : string = method8()
        let v2459 : string = v2457 + v2409 
        let v2460 : string = v2459 + v2458 
        let _v2423 = v2460 
        #endif
#if FABLE_COMPILER_PYTHON
        let v2461 : string = "\u001b[94m"
        let v2462 : string = method8()
        let v2463 : string = v2461 + v2409 
        let v2464 : string = v2463 + v2462 
        let _v2423 = v2464 
        #endif
#else
        let v2465 : string = "\u001b[94m"
        let v2466 : string = method8()
        let v2467 : string = v2465 + v2409 
        let v2468 : string = v2467 + v2466 
        let _v2423 = v2468 
        #endif
        let v2469 : string = _v2423 
        let v2475 : int64 = v1971.l0
        let v2476 : int32 = v1894.Length
        let v2477 : string = method9()
        let v2478 : Mut4 = {l0 = v2477} : Mut4
        let v2479 : string = "{ "
        let v2480 : string = $"{v2479}"
        let v2483 : string = v2478.l0
        let v2484 : string = v2483 + v2480 
        v2478.l0 <- v2484
        let v2485 : string = "exit_code"
        let v2486 : string = $"{v2485}"
        let v2489 : string = v2478.l0
        let v2490 : string = v2489 + v2486 
        v2478.l0 <- v2490
        let v2491 : string = " = "
        let v2492 : string = $"{v2491}"
        let v2495 : string = v2478.l0
        let v2496 : string = v2495 + v2492 
        v2478.l0 <- v2496
        let v2497 : string = $"{v1886}"
        let v2500 : string = v2478.l0
        let v2501 : string = v2500 + v2497 
        v2478.l0 <- v2501
        let v2502 : string = "; "
        let v2503 : string = $"{v2502}"
        let v2506 : string = v2478.l0
        let v2507 : string = v2506 + v2503 
        v2478.l0 <- v2507
        let v2508 : string = "output_length"
        let v2509 : string = $"{v2508}"
        let v2512 : string = v2478.l0
        let v2513 : string = v2512 + v2509 
        v2478.l0 <- v2513
        let v2514 : string = $"{v2491}"
        let v2517 : string = v2478.l0
        let v2518 : string = v2517 + v2514 
        v2478.l0 <- v2518
        let v2519 : string = $"{v2476}"
        let v2522 : string = v2478.l0
        let v2523 : string = v2522 + v2519 
        v2478.l0 <- v2523
        let v2524 : string = " }"
        let v2525 : string = $"{v2524}"
        let v2528 : string = v2478.l0
        let v2529 : string = v2528 + v2525 
        v2478.l0 <- v2529
        let v2530 : string = v2478.l0
        let v2531 : (unit -> string) = closure41()
        let v2532 : string = $"{v2339} {v2469} #{v2475} %s{v2531 ()} / {v2530}"
        let v2535 : char list = []
        let v2536 : (char list -> (char [])) = List.toArray
        let v2537 : (char []) = v2536 v2535
        let v2540 : string = v2532.TrimStart v2537 
        let v2558 : char list = []
        let v2559 : char list = '/' :: v2558 
        let v2562 : char list = ' ' :: v2559 
        let v2565 : (char list -> (char [])) = List.toArray
        let v2566 : (char []) = v2565 v2562
        let v2569 : string = v2540.TrimEnd v2566 
        let v2587 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v2588 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v2569 v2588 
        let _v2587 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v2589 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v2569 v2589 
        let _v2587 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v2590 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v2569 v2590 
        let _v2587 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        System.Console.WriteLine v2569 
        let _v2587 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        System.Console.WriteLine v2569 
        let _v2587 = () 
        #endif
#else
        System.Console.WriteLine v2569 
        let _v2587 = () 
        #endif
        _v2587 
        let v2591 : (string -> unit) = v1910.l0
        v2591 v2569
    return struct (v1886, v1894) 
    }
    |> fun x -> _v39 <- Some x
    let v2592 : Async<struct (int32 * string)> = match _v39 with Some x -> x | None -> failwith "async.new_async_unit / _v39=None"
    let _v23 = v2592 
    #endif
    let v2593 : Async<struct (int32 * string)> = _v23 
    let _v7 = v2593 
    #endif
    let v2598 : Async<struct (int32 * string)> = _v7 
    v2598
and method40 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : struct (int32 * string) =
    let v7 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = method41(v0, v1, v2, v3, v4, v5, v6)
    let v9 : US14 = method42(v8)
    let struct (v18 : string, v19 : US1) =
        match v9 with
        | US14_1(v12) -> (* Error *)
            let v13 : string = $"resultm.get / Result value was Error: {v12}"
            failwith<struct (string * US1)> v13
        | US14_0(v10, v11) -> (* Ok *)
            struct (v10, v11)
    let v23 : string =
        match v19 with
        | US1_1 -> (* None *)
            let v21 : string = ""
            v21
        | US1_0(v20) -> (* Some *)
            v20
    let v24 : US22 = method54(v23)
    let v30 : (string []) =
        match v24 with
        | US22_1(v26) -> (* Error *)
            let v27 : string = $"resultm.get / Result value was Error: {v26}"
            failwith<(string [])> v27
        | US22_0(v25) -> (* Ok *)
            v25
    let v31 : string = "$0.to_vec()"
    let v32 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v30 v31 
    let v33 : string = "true; let _result : Vec<_> = v32.into_iter().map(|x| { //"
    let v34 : bool = Fable.Core.RustInterop.emitRustExpr () v33 
    let v35 : string = "x"
    let v36 : string = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "&*$0"
    let v38 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "String::from($0)"
    let v40 : std_string_String = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = "true; $0 }).collect::<Vec<_>>()"
    let v42 : bool = Fable.Core.RustInterop.emitRustExpr v40 v41 
    let v43 : string = "_result"
    let v44 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v43 
    let v45 : bool = State.trace_state.IsNone
    if v45 then
        let v46 : US0 = US0_0
        let struct (v47 : Mut0, v48 : Mut1, v49 : Mut2, v50 : Mut3, v51 : int64 option) = method1(v46)
        let v52 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v47, v48, v49, v50, v51) 
        State.trace_state <- v52 
        ()
    let struct (v57 : Mut0, v58 : Mut1, v59 : Mut2, v60 : Mut3, v61 : int64 option) = State.trace_state.Value
    let v72 : bool = State.trace_state.IsNone
    if v72 then
        let v73 : US0 = US0_0
        let struct (v74 : Mut0, v75 : Mut1, v76 : Mut2, v77 : Mut3, v78 : int64 option) = method1(v73)
        let v79 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v74, v75, v76, v77, v78) 
        State.trace_state <- v79 
        ()
    let struct (v84 : Mut0, v85 : Mut1, v86 : Mut2, v87 : Mut3, v88 : int64 option) = State.trace_state.Value
    let v99 : US0 = v87.l0
    let v100 : bool = v86.l0
    let v101 : bool = v100 = false
    let v104 : bool =
        if v101 then
            false
        else
            let v102 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v99
            let v103 : bool = 1 >= v102
            v103
    if v104 then
        let v105 : int64 = v57.l0
        let v106 : int64 = v105 + 1L
        v57.l0 <- v106
        let v107 : bool = State.trace_state.IsNone
        if v107 then
            let v108 : US0 = US0_0
            let struct (v109 : Mut0, v110 : Mut1, v111 : Mut2, v112 : Mut3, v113 : int64 option) = method1(v108)
            let v114 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v109, v110, v111, v112, v113) 
            State.trace_state <- v114 
            ()
        let struct (v119 : Mut0, v120 : Mut1, v121 : Mut2, v122 : Mut3, v123 : int64 option) = State.trace_state.Value
        let v134 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v135 : US3 option = None
        let _v135 = ref v135 
        match v123 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v136 : int64 = x
        let v137 : US3 = US3_0(v136)
        v137 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v135.Value <- x
        let v138 : US3 option = _v135.Value 
        let v149 : US3 = US3_1
        let v150 : US3 = v138 |> Option.defaultValue v149 
        let v190 : System.DateTime =
            match v150 with
            | US3_1 -> (* None *)
                let v186 : System.DateTime = System.DateTime.Now
                v186
            | US3_0(v154) -> (* Some *)
                let v155 : System.DateTime = System.DateTime.Now
                let v158 : (System.DateTime -> int64) = _.Ticks
                let v159 : int64 = v158 v155
                let v162 : int64 = v159 - v154
                let v163 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v164 : System.TimeSpan = v163 v162
                let v167 : (System.TimeSpan -> int32) = _.Hours
                let v168 : int32 = v167 v164
                let v171 : (System.TimeSpan -> int32) = _.Minutes
                let v172 : int32 = v171 v164
                let v175 : (System.TimeSpan -> int32) = _.Seconds
                let v176 : int32 = v175 v164
                let v179 : (System.TimeSpan -> int32) = _.Milliseconds
                let v180 : int32 = v179 v164
                let v183 : System.DateTime = System.DateTime (1, 1, 1, v168, v172, v176, v180)
                v183
        let v191 : string = method6()
        let v194 : (string -> string) = v190.ToString
        let v195 : string = v194 v191
        let _v134 = v195 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v198 : US3 option = None
        let _v198 = ref v198 
        match v123 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v199 : int64 = x
        let v200 : US3 = US3_0(v199)
        v200 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v198.Value <- x
        let v201 : US3 option = _v198.Value 
        let v212 : US3 = US3_1
        let v213 : US3 = v201 |> Option.defaultValue v212 
        let v253 : System.DateTime =
            match v213 with
            | US3_1 -> (* None *)
                let v249 : System.DateTime = System.DateTime.Now
                v249
            | US3_0(v217) -> (* Some *)
                let v218 : System.DateTime = System.DateTime.Now
                let v221 : (System.DateTime -> int64) = _.Ticks
                let v222 : int64 = v221 v218
                let v225 : int64 = v222 - v217
                let v226 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v227 : System.TimeSpan = v226 v225
                let v230 : (System.TimeSpan -> int32) = _.Hours
                let v231 : int32 = v230 v227
                let v234 : (System.TimeSpan -> int32) = _.Minutes
                let v235 : int32 = v234 v227
                let v238 : (System.TimeSpan -> int32) = _.Seconds
                let v239 : int32 = v238 v227
                let v242 : (System.TimeSpan -> int32) = _.Milliseconds
                let v243 : int32 = v242 v227
                let v246 : System.DateTime = System.DateTime (1, 1, 1, v231, v235, v239, v243)
                v246
        let v254 : string = method6()
        let v257 : (string -> string) = v253.ToString
        let v258 : string = v257 v254
        let _v134 = v258 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v261 : string = $"near_sdk::env::block_timestamp()"
        let v262 : uint64 = Fable.Core.RustInterop.emitRustExpr () v261 
        let v263 : US3 option = None
        let _v263 = ref v263 
        match v123 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v264 : int64 = x
        let v265 : US3 = US3_0(v264)
        v265 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v263.Value <- x
        let v266 : US3 option = _v263.Value 
        let v277 : US3 = US3_1
        let v278 : US3 = v266 |> Option.defaultValue v277 
        let v287 : uint64 =
            match v278 with
            | US3_1 -> (* None *)
                v262
            | US3_0(v282) -> (* Some *)
                let v283 : (int64 -> uint64) = uint64
                let v284 : uint64 = v283 v282
                let v285 : uint64 = v262 - v284
                v285
        let v288 : uint64 = v287 / 1000000000UL
        let v289 : uint64 = v288 % 60UL
        let v290 : uint64 = v288 / 60UL
        let v291 : uint64 = v290 % 60UL
        let v292 : uint64 = v288 / 3600UL
        let v293 : uint64 = v292 % 24UL
        let v294 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v295 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v293, v291, v289) v294 
        let v296 : string = "fable_library_rust::String_::fromString($0)"
        let v297 : string = Fable.Core.RustInterop.emitRustExpr v295 v296 
        let _v134 = v297 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v298 : US3 option = None
        let _v298 = ref v298 
        match v123 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v299 : int64 = x
        let v300 : US3 = US3_0(v299)
        v300 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v298.Value <- x
        let v301 : US3 option = _v298.Value 
        let v312 : US3 = US3_1
        let v313 : US3 = v301 |> Option.defaultValue v312 
        let v353 : System.DateTime =
            match v313 with
            | US3_1 -> (* None *)
                let v349 : System.DateTime = System.DateTime.Now
                v349
            | US3_0(v317) -> (* Some *)
                let v318 : System.DateTime = System.DateTime.Now
                let v321 : (System.DateTime -> int64) = _.Ticks
                let v322 : int64 = v321 v318
                let v325 : int64 = v322 - v317
                let v326 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v327 : System.TimeSpan = v326 v325
                let v330 : (System.TimeSpan -> int32) = _.Hours
                let v331 : int32 = v330 v327
                let v334 : (System.TimeSpan -> int32) = _.Minutes
                let v335 : int32 = v334 v327
                let v338 : (System.TimeSpan -> int32) = _.Seconds
                let v339 : int32 = v338 v327
                let v342 : (System.TimeSpan -> int32) = _.Milliseconds
                let v343 : int32 = v342 v327
                let v346 : System.DateTime = System.DateTime (1, 1, 1, v331, v335, v339, v343)
                v346
        let v354 : string = method7()
        let v357 : (string -> string) = v353.ToString
        let v358 : string = v357 v354
        let _v134 = v358 
        #endif
#if FABLE_COMPILER_PYTHON
        let v361 : US3 option = None
        let _v361 = ref v361 
        match v123 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v362 : int64 = x
        let v363 : US3 = US3_0(v362)
        v363 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v361.Value <- x
        let v364 : US3 option = _v361.Value 
        let v375 : US3 = US3_1
        let v376 : US3 = v364 |> Option.defaultValue v375 
        let v416 : System.DateTime =
            match v376 with
            | US3_1 -> (* None *)
                let v412 : System.DateTime = System.DateTime.Now
                v412
            | US3_0(v380) -> (* Some *)
                let v381 : System.DateTime = System.DateTime.Now
                let v384 : (System.DateTime -> int64) = _.Ticks
                let v385 : int64 = v384 v381
                let v388 : int64 = v385 - v380
                let v389 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v390 : System.TimeSpan = v389 v388
                let v393 : (System.TimeSpan -> int32) = _.Hours
                let v394 : int32 = v393 v390
                let v397 : (System.TimeSpan -> int32) = _.Minutes
                let v398 : int32 = v397 v390
                let v401 : (System.TimeSpan -> int32) = _.Seconds
                let v402 : int32 = v401 v390
                let v405 : (System.TimeSpan -> int32) = _.Milliseconds
                let v406 : int32 = v405 v390
                let v409 : System.DateTime = System.DateTime (1, 1, 1, v394, v398, v402, v406)
                v409
        let v417 : string = method7()
        let v420 : (string -> string) = v416.ToString
        let v421 : string = v420 v417
        let _v134 = v421 
        #endif
#else
        let v424 : US3 option = None
        let _v424 = ref v424 
        match v123 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v425 : int64 = x
        let v426 : US3 = US3_0(v425)
        v426 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v424.Value <- x
        let v427 : US3 option = _v424.Value 
        let v438 : US3 = US3_1
        let v439 : US3 = v427 |> Option.defaultValue v438 
        let v479 : System.DateTime =
            match v439 with
            | US3_1 -> (* None *)
                let v475 : System.DateTime = System.DateTime.Now
                v475
            | US3_0(v443) -> (* Some *)
                let v444 : System.DateTime = System.DateTime.Now
                let v447 : (System.DateTime -> int64) = _.Ticks
                let v448 : int64 = v447 v444
                let v451 : int64 = v448 - v443
                let v452 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v453 : System.TimeSpan = v452 v451
                let v456 : (System.TimeSpan -> int32) = _.Hours
                let v457 : int32 = v456 v453
                let v460 : (System.TimeSpan -> int32) = _.Minutes
                let v461 : int32 = v460 v453
                let v464 : (System.TimeSpan -> int32) = _.Seconds
                let v465 : int32 = v464 v453
                let v468 : (System.TimeSpan -> int32) = _.Milliseconds
                let v469 : int32 = v468 v453
                let v472 : System.DateTime = System.DateTime (1, 1, 1, v457, v461, v465, v469)
                v472
        let v480 : string = method7()
        let v483 : (string -> string) = v479.ToString
        let v484 : string = v483 v480
        let _v134 = v484 
        #endif
        let v487 : string = _v134 
        let v552 : string = "Debug"
        let v553 : (unit -> string) = v552.ToLower
        let v554 : string = v553 ()
        let v557 : string = v554.PadLeft (7, ' ')
        let v571 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v572 : string = "inline_colorization::color_bright_blue"
        let v573 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v572 
        let v574 : string = "&*$0"
        let v575 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v557 v574 
        let v576 : string = "inline_colorization::color_reset"
        let v577 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v576 
        let v578 : string = "\"{v573}{v575}{v577}\""
        let v579 : string = @$"format!(" + v578 + ")"
        let v580 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v579 
        let v581 : string = "fable_library_rust::String_::fromString($0)"
        let v582 : string = Fable.Core.RustInterop.emitRustExpr v580 v581 
        let _v571 = v582 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v583 : string = "inline_colorization::color_bright_blue"
        let v584 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v583 
        let v585 : string = "&*$0"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v557 v585 
        let v587 : string = "inline_colorization::color_reset"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "\"{v584}{v586}{v588}\""
        let v590 : string = @$"format!(" + v589 + ")"
        let v591 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "fable_library_rust::String_::fromString($0)"
        let v593 : string = Fable.Core.RustInterop.emitRustExpr v591 v592 
        let _v571 = v593 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v594 : string = "inline_colorization::color_bright_blue"
        let v595 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "&*$0"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v557 v596 
        let v598 : string = "inline_colorization::color_reset"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "\"{v595}{v597}{v599}\""
        let v601 : string = @$"format!(" + v600 + ")"
        let v602 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "fable_library_rust::String_::fromString($0)"
        let v604 : string = Fable.Core.RustInterop.emitRustExpr v602 v603 
        let _v571 = v604 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v605 : string = "\u001b[94m"
        let v606 : string = method8()
        let v607 : string = v605 + v557 
        let v608 : string = v607 + v606 
        let _v571 = v608 
        #endif
#if FABLE_COMPILER_PYTHON
        let v609 : string = "\u001b[94m"
        let v610 : string = method8()
        let v611 : string = v609 + v557 
        let v612 : string = v611 + v610 
        let _v571 = v612 
        #endif
#else
        let v613 : string = "\u001b[94m"
        let v614 : string = method8()
        let v615 : string = v613 + v557 
        let v616 : string = v615 + v614 
        let _v571 = v616 
        #endif
        let v617 : string = _v571 
        let v623 : int64 = v119.l0
        let v624 : string = method9()
        let v625 : Mut4 = {l0 = v624} : Mut4
        let v626 : string = "{ "
        let v627 : string = $"{v626}"
        let v630 : string = v625.l0
        let v631 : string = v630 + v627 
        v625.l0 <- v631
        let v632 : string = "file_name"
        let v633 : string = $"{v632}"
        let v636 : string = v625.l0
        let v637 : string = v636 + v633 
        v625.l0 <- v637
        let v638 : string = " = "
        let v639 : string = $"{v638}"
        let v642 : string = v625.l0
        let v643 : string = v642 + v639 
        v625.l0 <- v643
        let v644 : string = $"{v18}"
        let v647 : string = v625.l0
        let v648 : string = v647 + v644 
        v625.l0 <- v648
        let v649 : string = "; "
        let v650 : string = $"{v649}"
        let v653 : string = v625.l0
        let v654 : string = v653 + v650 
        v625.l0 <- v654
        let v655 : string = "arguments"
        let v656 : string = $"{v655}"
        let v659 : string = v625.l0
        let v660 : string = v659 + v656 
        v625.l0 <- v660
        let v661 : string = $"{v638}"
        let v664 : string = v625.l0
        let v665 : string = v664 + v661 
        v625.l0 <- v665
        let v666 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v667 : string = "format!(\"{:#?}\", $0)"
        let v668 : std_string_String = Fable.Core.RustInterop.emitRustExpr v44 v667 
        let v669 : string = "fable_library_rust::String_::fromString($0)"
        let v670 : string = Fable.Core.RustInterop.emitRustExpr v668 v669 
        let _v666 = v670 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v671 : string = "format!(\"{:#?}\", $0)"
        let v672 : std_string_String = Fable.Core.RustInterop.emitRustExpr v44 v671 
        let v673 : string = "fable_library_rust::String_::fromString($0)"
        let v674 : string = Fable.Core.RustInterop.emitRustExpr v672 v673 
        let _v666 = v674 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v675 : string = "format!(\"{:#?}\", $0)"
        let v676 : std_string_String = Fable.Core.RustInterop.emitRustExpr v44 v675 
        let v677 : string = "fable_library_rust::String_::fromString($0)"
        let v678 : string = Fable.Core.RustInterop.emitRustExpr v676 v677 
        let _v666 = v678 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v679 : string = $"%A{v44}"
        let _v666 = v679 
        #endif
#if FABLE_COMPILER_PYTHON
        let v682 : string = $"%A{v44}"
        let _v666 = v682 
        #endif
#else
        let v685 : string = $"%A{v44}"
        let _v666 = v685 
        #endif
        let v688 : string = _v666 
        let v693 : string = $"{v688}"
        let v696 : string = v625.l0
        let v697 : string = v696 + v693 
        v625.l0 <- v697
        let v698 : string = $"{v649}"
        let v701 : string = v625.l0
        let v702 : string = v701 + v698 
        v625.l0 <- v702
        let v703 : string = "options"
        let v704 : string = $"{v703}"
        let v707 : string = v625.l0
        let v708 : string = v707 + v704 
        v625.l0 <- v708
        let v709 : string = $"{v638}"
        let v712 : string = v625.l0
        let v713 : string = v712 + v709 
        v625.l0 <- v713
        let v714 : string = $"{v626}"
        let v717 : string = v625.l0
        let v718 : string = v717 + v714 
        v625.l0 <- v718
        let v719 : string = "command"
        let v720 : string = $"{v719}"
        let v723 : string = v625.l0
        let v724 : string = v723 + v720 
        v625.l0 <- v724
        let v725 : string = $"{v638}"
        let v728 : string = v625.l0
        let v729 : string = v728 + v725 
        v625.l0 <- v729
        let v730 : string = $"{v0}"
        let v733 : string = v625.l0
        let v734 : string = v733 + v730 
        v625.l0 <- v734
        let v735 : string = $"{v649}"
        let v738 : string = v625.l0
        let v739 : string = v738 + v735 
        v625.l0 <- v739
        let v740 : string = "cancellation_token"
        let v741 : string = $"{v740}"
        let v744 : string = v625.l0
        let v745 : string = v744 + v741 
        v625.l0 <- v745
        let v746 : string = $"{v638}"
        let v749 : string = v625.l0
        let v750 : string = v749 + v746 
        v625.l0 <- v750
        let v751 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v752 : string = "format!(\"{:#?}\", $0)"
        let v753 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v752 
        let v754 : string = "fable_library_rust::String_::fromString($0)"
        let v755 : string = Fable.Core.RustInterop.emitRustExpr v753 v754 
        let _v751 = v755 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v756 : string = "format!(\"{:#?}\", $0)"
        let v757 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v756 
        let v758 : string = "fable_library_rust::String_::fromString($0)"
        let v759 : string = Fable.Core.RustInterop.emitRustExpr v757 v758 
        let _v751 = v759 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v760 : string = "format!(\"{:#?}\", $0)"
        let v761 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v760 
        let v762 : string = "fable_library_rust::String_::fromString($0)"
        let v763 : string = Fable.Core.RustInterop.emitRustExpr v761 v762 
        let _v751 = v763 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v764 : string = $"%A{v1}"
        let _v751 = v764 
        #endif
#if FABLE_COMPILER_PYTHON
        let v767 : string = $"%A{v1}"
        let _v751 = v767 
        #endif
#else
        let v770 : string = $"%A{v1}"
        let _v751 = v770 
        #endif
        let v773 : string = _v751 
        let v778 : string = $"{v773}"
        let v781 : string = v625.l0
        let v782 : string = v781 + v778 
        v625.l0 <- v782
        let v783 : string = $"{v649}"
        let v786 : string = v625.l0
        let v787 : string = v786 + v783 
        v625.l0 <- v787
        let v788 : string = "environment_variables"
        let v789 : string = $"{v788}"
        let v792 : string = v625.l0
        let v793 : string = v792 + v789 
        v625.l0 <- v793
        let v794 : string = $"{v638}"
        let v797 : string = v625.l0
        let v798 : string = v797 + v794 
        v625.l0 <- v798
        let v799 : string = $"%A{v2}"
        let v802 : string = $"{v799}"
        let v805 : string = v625.l0
        let v806 : string = v805 + v802 
        v625.l0 <- v806
        let v807 : string = $"{v649}"
        let v810 : string = v625.l0
        let v811 : string = v810 + v807 
        v625.l0 <- v811
        let v812 : string = "on_line"
        let v813 : string = $"{v812}"
        let v816 : string = v625.l0
        let v817 : string = v816 + v813 
        v625.l0 <- v817
        let v818 : string = $"{v638}"
        let v821 : string = v625.l0
        let v822 : string = v821 + v818 
        v625.l0 <- v822
        let v823 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v824 : string = "format!(\"{:#?}\", $0)"
        let v825 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v824 
        let v826 : string = "fable_library_rust::String_::fromString($0)"
        let v827 : string = Fable.Core.RustInterop.emitRustExpr v825 v826 
        let _v823 = v827 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v828 : string = "format!(\"{:#?}\", $0)"
        let v829 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v828 
        let v830 : string = "fable_library_rust::String_::fromString($0)"
        let v831 : string = Fable.Core.RustInterop.emitRustExpr v829 v830 
        let _v823 = v831 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v832 : string = "format!(\"{:#?}\", $0)"
        let v833 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v832 
        let v834 : string = "fable_library_rust::String_::fromString($0)"
        let v835 : string = Fable.Core.RustInterop.emitRustExpr v833 v834 
        let _v823 = v835 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v836 : string = $"%A{v3}"
        let _v823 = v836 
        #endif
#if FABLE_COMPILER_PYTHON
        let v839 : string = $"%A{v3}"
        let _v823 = v839 
        #endif
#else
        let v842 : string = $"%A{v3}"
        let _v823 = v842 
        #endif
        let v845 : string = _v823 
        let v850 : string = $"{v845}"
        let v853 : string = v625.l0
        let v854 : string = v853 + v850 
        v625.l0 <- v854
        let v855 : string = $"{v649}"
        let v858 : string = v625.l0
        let v859 : string = v858 + v855 
        v625.l0 <- v859
        let v860 : string = "stdin"
        let v861 : string = $"{v860}"
        let v864 : string = v625.l0
        let v865 : string = v864 + v861 
        v625.l0 <- v865
        let v866 : string = $"{v638}"
        let v869 : string = v625.l0
        let v870 : string = v869 + v866 
        v625.l0 <- v870
        let v871 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v872 : string = "format!(\"{:#?}\", $0)"
        let v873 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v872 
        let v874 : string = "fable_library_rust::String_::fromString($0)"
        let v875 : string = Fable.Core.RustInterop.emitRustExpr v873 v874 
        let _v871 = v875 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v876 : string = "format!(\"{:#?}\", $0)"
        let v877 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v876 
        let v878 : string = "fable_library_rust::String_::fromString($0)"
        let v879 : string = Fable.Core.RustInterop.emitRustExpr v877 v878 
        let _v871 = v879 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v880 : string = "format!(\"{:#?}\", $0)"
        let v881 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v880 
        let v882 : string = "fable_library_rust::String_::fromString($0)"
        let v883 : string = Fable.Core.RustInterop.emitRustExpr v881 v882 
        let _v871 = v883 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v884 : string = $"%A{v4}"
        let _v871 = v884 
        #endif
#if FABLE_COMPILER_PYTHON
        let v887 : string = $"%A{v4}"
        let _v871 = v887 
        #endif
#else
        let v890 : string = $"%A{v4}"
        let _v871 = v890 
        #endif
        let v893 : string = _v871 
        let v898 : string = $"{v893}"
        let v901 : string = v625.l0
        let v902 : string = v901 + v898 
        v625.l0 <- v902
        let v903 : string = $"{v649}"
        let v906 : string = v625.l0
        let v907 : string = v906 + v903 
        v625.l0 <- v907
        let v908 : string = "trace"
        let v909 : string = $"{v908}"
        let v912 : string = v625.l0
        let v913 : string = v912 + v909 
        v625.l0 <- v913
        let v914 : string = $"{v638}"
        let v917 : string = v625.l0
        let v918 : string = v917 + v914 
        v625.l0 <- v918
        let v921 : string =
            if v5 then
                let v919 : string = "true"
                v919
            else
                let v920 : string = "false"
                v920
        let v922 : string = $"{v921}"
        let v925 : string = v625.l0
        let v926 : string = v925 + v922 
        v625.l0 <- v926
        let v927 : string = $"{v649}"
        let v930 : string = v625.l0
        let v931 : string = v930 + v927 
        v625.l0 <- v931
        let v932 : string = "working_directory"
        let v933 : string = $"{v932}"
        let v936 : string = v625.l0
        let v937 : string = v936 + v933 
        v625.l0 <- v937
        let v938 : string = $"{v638}"
        let v941 : string = v625.l0
        let v942 : string = v941 + v938 
        v625.l0 <- v942
        let v943 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v944 : string = "format!(\"{:#?}\", $0)"
        let v945 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v944 
        let v946 : string = "fable_library_rust::String_::fromString($0)"
        let v947 : string = Fable.Core.RustInterop.emitRustExpr v945 v946 
        let _v943 = v947 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v948 : string = "format!(\"{:#?}\", $0)"
        let v949 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v948 
        let v950 : string = "fable_library_rust::String_::fromString($0)"
        let v951 : string = Fable.Core.RustInterop.emitRustExpr v949 v950 
        let _v943 = v951 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v952 : string = "format!(\"{:#?}\", $0)"
        let v953 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v952 
        let v954 : string = "fable_library_rust::String_::fromString($0)"
        let v955 : string = Fable.Core.RustInterop.emitRustExpr v953 v954 
        let _v943 = v955 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v956 : string = $"%A{v6}"
        let _v943 = v956 
        #endif
#if FABLE_COMPILER_PYTHON
        let v959 : string = $"%A{v6}"
        let _v943 = v959 
        #endif
#else
        let v962 : string = $"%A{v6}"
        let _v943 = v962 
        #endif
        let v965 : string = _v943 
        let v970 : string = $"{v965}"
        let v973 : string = v625.l0
        let v974 : string = v973 + v970 
        v625.l0 <- v974
        let v975 : string = " }"
        let v976 : string = $"{v975}"
        let v979 : string = v625.l0
        let v980 : string = v979 + v976 
        v625.l0 <- v980
        let v981 : string = $"{v975}"
        let v984 : string = v625.l0
        let v985 : string = v984 + v981 
        v625.l0 <- v985
        let v986 : string = v625.l0
        let v987 : (unit -> string) = closure22()
        let v988 : string = $"{v487} {v617} #{v623} %s{v987 ()} / {v986}"
        let v991 : char list = []
        let v992 : (char list -> (char [])) = List.toArray
        let v993 : (char []) = v992 v991
        let v996 : string = v988.TrimStart v993 
        let v1014 : char list = []
        let v1015 : char list = '/' :: v1014 
        let v1018 : char list = ' ' :: v1015 
        let v1021 : (char list -> (char [])) = List.toArray
        let v1022 : (char []) = v1021 v1018
        let v1025 : string = v996.TrimEnd v1022 
        let v1043 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v1044 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v1025 v1044 
        let _v1043 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v1045 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v1025 v1045 
        let _v1043 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v1046 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v1025 v1046 
        let _v1043 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        System.Console.WriteLine v1025 
        let _v1043 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        System.Console.WriteLine v1025 
        let _v1043 = () 
        #endif
#else
        System.Console.WriteLine v1025 
        let _v1043 = () 
        #endif
        _v1043 
        let v1047 : (string -> unit) = v58.l0
        v1047 v1025
    let v1048 : bool = true
    let mutable _v1048 : (int32 * string) option = None 
    (
    (fun () ->
    (fun () ->
    let v1049 : string = "std::process::Command::new(&*$0)"
    let v1050 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v18 v1049 
    let v1051 : string = "true; let mut v1050 = v1050"
    let v1052 : bool = Fable.Core.RustInterop.emitRustExpr () v1051 
    let v1053 : string = "std::process::Command::args(&mut $0, &*$1)"
    let v1054 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr struct (v1050, v44) v1053 
    let v1055 : string = "std::process::Stdio::piped()"
    let v1056 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v1055 
    let v1057 : string = "std::process::Command::stdout($0, std::process::Stdio::piped())"
    let v1058 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr v1054 v1057 
    let v1059 : string = "std::process::Stdio::piped()"
    let v1060 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v1059 
    let v1061 : string = "std::process::Command::stderr($0, std::process::Stdio::piped())"
    let v1062 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr v1058 v1061 
    let v1063 : string = "std::process::Stdio::piped()"
    let v1064 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v1063 
    let v1065 : string = "std::process::Command::stdin($0, std::process::Stdio::piped())"
    let v1066 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr v1062 v1065 
    let v1067 : US1 option = None
    let _v1067 = ref v1067 
    match v6 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v1068 : string = x
    let v1069 : US1 = US1_0(v1068)
    v1069 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v1067.Value <- x
    let v1070 : US1 option = _v1067.Value 
    let v1081 : US1 = US1_1
    let v1082 : US1 = v1070 |> Option.defaultValue v1081 
    let v1090 : Ref<Mut<std_process_Command>> =
        match v1082 with
        | US1_1 -> (* None *)
            v1066
        | US1_0(v1086) -> (* Some *)
            let v1087 : string = "std::process::Command::current_dir(v1066, &*$0)"
            let v1088 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr v1086 v1087 
            v1088
    let v1091 : uint64 = System.Convert.ToUInt64 v2.Length
    let v1092 : bool = v1091 = 0UL
    let v1108 : Ref<Mut<std_process_Command>> =
        if v1092 then
            v1090
        else
            let v1093 : string = "$0.to_vec()"
            let v1094 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v2 v1093 
            let v1095 : string = "true; let _result = $0.into_iter().fold(v1090, |acc, x| { //"
            let v1096 : bool = Fable.Core.RustInterop.emitRustExpr v1094 v1095 
            let v1097 : string = "acc"
            let v1098 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr () v1097 
            let v1099 : string = "x"
            let struct (v1100 : string, v1101 : string) = Fable.Core.RustInterop.emitRustExpr () v1099 
            let v1102 : string = "std::process::Command::env(v1098, &*$0, &*$1)"
            let v1103 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr struct (v1100, v1101) v1102 
            let v1104 : string = "true; $0 })"
            let v1105 : bool = Fable.Core.RustInterop.emitRustExpr v1103 v1104 
            let v1106 : string = "_result"
            let v1107 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr () v1106 
            v1107
    let v1109 : string = "std::process::Command::spawn($0)"
    let v1110 : Result<std_process_Child, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1108 v1109 
    let v1111 : (std_io_Error -> std_string_String) = method30()
    let v1112 : string = "$0.map_err(|x| $1(x))"
    let v1113 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1110, v1111) v1112 
    let v1114 : string = "true; let _result = $0.map(|x| { //"
    let v1115 : bool = Fable.Core.RustInterop.emitRustExpr v1113 v1114 
    let v1116 : string = "x"
    let v1117 : std_process_Child = Fable.Core.RustInterop.emitRustExpr () v1116 
    let v1118 : std_process_Child option = Some v1117 
    let v1121 : string = "std::sync::Mutex::new($0)"
    let v1122 : std_sync_Mutex<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1118 v1121 
    let v1123 : string = "std::sync::Arc::new($0)"
    let v1124 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v1122 v1123 
    let v1125 : string = "true; $0 })"
    let v1126 : bool = Fable.Core.RustInterop.emitRustExpr v1124 v1125 
    let v1127 : string = "_result"
    let v1128 : Result<std_sync_Arc<std_sync_Mutex<std_process_Child option>>, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v1127 
    let v1129 : (std_sync_Arc<std_sync_Mutex<std_process_Child option>> -> US24) = method65()
    let v1130 : (std_string_String -> US24) = method66()
    let v1131 : string = "match v1128 { Ok(x) => $0(x), Err(e) => $1(e) }"
    let v1132 : US24 = Fable.Core.RustInterop.emitRustExpr struct (v1129, v1130) v1131 
    let struct (v5625 : int32, v5626 : US5, v5627 : US25) =
        match v1132 with
        | US24_1(v4920) -> (* Error *)
            let v4921 : bool = State.trace_state.IsNone
            if v4921 then
                let v4922 : US0 = US0_0
                let struct (v4923 : Mut0, v4924 : Mut1, v4925 : Mut2, v4926 : Mut3, v4927 : int64 option) = method1(v4922)
                let v4928 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v4923, v4924, v4925, v4926, v4927) 
                State.trace_state <- v4928 
                ()
            let struct (v4933 : Mut0, v4934 : Mut1, v4935 : Mut2, v4936 : Mut3, v4937 : int64 option) = State.trace_state.Value
            let v4948 : bool = State.trace_state.IsNone
            if v4948 then
                let v4949 : US0 = US0_0
                let struct (v4950 : Mut0, v4951 : Mut1, v4952 : Mut2, v4953 : Mut3, v4954 : int64 option) = method1(v4949)
                let v4955 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v4950, v4951, v4952, v4953, v4954) 
                State.trace_state <- v4955 
                ()
            let struct (v4960 : Mut0, v4961 : Mut1, v4962 : Mut2, v4963 : Mut3, v4964 : int64 option) = State.trace_state.Value
            let v4975 : US0 = v4963.l0
            let v4976 : bool = v4962.l0
            let v4977 : bool = v4976 = false
            let v4980 : bool =
                if v4977 then
                    false
                else
                    let v4978 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v4975
                    let v4979 : bool = 4 >= v4978
                    v4979
            if v4980 then
                let v4981 : int64 = v4933.l0
                let v4982 : int64 = v4981 + 1L
                v4933.l0 <- v4982
                let v4983 : bool = State.trace_state.IsNone
                if v4983 then
                    let v4984 : US0 = US0_0
                    let struct (v4985 : Mut0, v4986 : Mut1, v4987 : Mut2, v4988 : Mut3, v4989 : int64 option) = method1(v4984)
                    let v4990 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v4985, v4986, v4987, v4988, v4989) 
                    State.trace_state <- v4990 
                    ()
                let struct (v4995 : Mut0, v4996 : Mut1, v4997 : Mut2, v4998 : Mut3, v4999 : int64 option) = State.trace_state.Value
                let v5010 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v5011 : US3 option = None
                let _v5011 = ref v5011 
                match v4999 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v5012 : int64 = x
                let v5013 : US3 = US3_0(v5012)
                v5013 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v5011.Value <- x
                let v5014 : US3 option = _v5011.Value 
                let v5025 : US3 = US3_1
                let v5026 : US3 = v5014 |> Option.defaultValue v5025 
                let v5066 : System.DateTime =
                    match v5026 with
                    | US3_1 -> (* None *)
                        let v5062 : System.DateTime = System.DateTime.Now
                        v5062
                    | US3_0(v5030) -> (* Some *)
                        let v5031 : System.DateTime = System.DateTime.Now
                        let v5034 : (System.DateTime -> int64) = _.Ticks
                        let v5035 : int64 = v5034 v5031
                        let v5038 : int64 = v5035 - v5030
                        let v5039 : (int64 -> System.TimeSpan) = System.TimeSpan 
                        let v5040 : System.TimeSpan = v5039 v5038
                        let v5043 : (System.TimeSpan -> int32) = _.Hours
                        let v5044 : int32 = v5043 v5040
                        let v5047 : (System.TimeSpan -> int32) = _.Minutes
                        let v5048 : int32 = v5047 v5040
                        let v5051 : (System.TimeSpan -> int32) = _.Seconds
                        let v5052 : int32 = v5051 v5040
                        let v5055 : (System.TimeSpan -> int32) = _.Milliseconds
                        let v5056 : int32 = v5055 v5040
                        let v5059 : System.DateTime = System.DateTime (1, 1, 1, v5044, v5048, v5052, v5056)
                        v5059
                let v5067 : string = method6()
                let v5070 : (string -> string) = v5066.ToString
                let v5071 : string = v5070 v5067
                let _v5010 = v5071 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v5074 : US3 option = None
                let _v5074 = ref v5074 
                match v4999 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v5075 : int64 = x
                let v5076 : US3 = US3_0(v5075)
                v5076 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v5074.Value <- x
                let v5077 : US3 option = _v5074.Value 
                let v5088 : US3 = US3_1
                let v5089 : US3 = v5077 |> Option.defaultValue v5088 
                let v5129 : System.DateTime =
                    match v5089 with
                    | US3_1 -> (* None *)
                        let v5125 : System.DateTime = System.DateTime.Now
                        v5125
                    | US3_0(v5093) -> (* Some *)
                        let v5094 : System.DateTime = System.DateTime.Now
                        let v5097 : (System.DateTime -> int64) = _.Ticks
                        let v5098 : int64 = v5097 v5094
                        let v5101 : int64 = v5098 - v5093
                        let v5102 : (int64 -> System.TimeSpan) = System.TimeSpan 
                        let v5103 : System.TimeSpan = v5102 v5101
                        let v5106 : (System.TimeSpan -> int32) = _.Hours
                        let v5107 : int32 = v5106 v5103
                        let v5110 : (System.TimeSpan -> int32) = _.Minutes
                        let v5111 : int32 = v5110 v5103
                        let v5114 : (System.TimeSpan -> int32) = _.Seconds
                        let v5115 : int32 = v5114 v5103
                        let v5118 : (System.TimeSpan -> int32) = _.Milliseconds
                        let v5119 : int32 = v5118 v5103
                        let v5122 : System.DateTime = System.DateTime (1, 1, 1, v5107, v5111, v5115, v5119)
                        v5122
                let v5130 : string = method6()
                let v5133 : (string -> string) = v5129.ToString
                let v5134 : string = v5133 v5130
                let _v5010 = v5134 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v5137 : string = $"near_sdk::env::block_timestamp()"
                let v5138 : uint64 = Fable.Core.RustInterop.emitRustExpr () v5137 
                let v5139 : US3 option = None
                let _v5139 = ref v5139 
                match v4999 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v5140 : int64 = x
                let v5141 : US3 = US3_0(v5140)
                v5141 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v5139.Value <- x
                let v5142 : US3 option = _v5139.Value 
                let v5153 : US3 = US3_1
                let v5154 : US3 = v5142 |> Option.defaultValue v5153 
                let v5163 : uint64 =
                    match v5154 with
                    | US3_1 -> (* None *)
                        v5138
                    | US3_0(v5158) -> (* Some *)
                        let v5159 : (int64 -> uint64) = uint64
                        let v5160 : uint64 = v5159 v5158
                        let v5161 : uint64 = v5138 - v5160
                        v5161
                let v5164 : uint64 = v5163 / 1000000000UL
                let v5165 : uint64 = v5164 % 60UL
                let v5166 : uint64 = v5164 / 60UL
                let v5167 : uint64 = v5166 % 60UL
                let v5168 : uint64 = v5164 / 3600UL
                let v5169 : uint64 = v5168 % 24UL
                let v5170 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
                let v5171 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v5169, v5167, v5165) v5170 
                let v5172 : string = "fable_library_rust::String_::fromString($0)"
                let v5173 : string = Fable.Core.RustInterop.emitRustExpr v5171 v5172 
                let _v5010 = v5173 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v5174 : US3 option = None
                let _v5174 = ref v5174 
                match v4999 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v5175 : int64 = x
                let v5176 : US3 = US3_0(v5175)
                v5176 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v5174.Value <- x
                let v5177 : US3 option = _v5174.Value 
                let v5188 : US3 = US3_1
                let v5189 : US3 = v5177 |> Option.defaultValue v5188 
                let v5229 : System.DateTime =
                    match v5189 with
                    | US3_1 -> (* None *)
                        let v5225 : System.DateTime = System.DateTime.Now
                        v5225
                    | US3_0(v5193) -> (* Some *)
                        let v5194 : System.DateTime = System.DateTime.Now
                        let v5197 : (System.DateTime -> int64) = _.Ticks
                        let v5198 : int64 = v5197 v5194
                        let v5201 : int64 = v5198 - v5193
                        let v5202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                        let v5203 : System.TimeSpan = v5202 v5201
                        let v5206 : (System.TimeSpan -> int32) = _.Hours
                        let v5207 : int32 = v5206 v5203
                        let v5210 : (System.TimeSpan -> int32) = _.Minutes
                        let v5211 : int32 = v5210 v5203
                        let v5214 : (System.TimeSpan -> int32) = _.Seconds
                        let v5215 : int32 = v5214 v5203
                        let v5218 : (System.TimeSpan -> int32) = _.Milliseconds
                        let v5219 : int32 = v5218 v5203
                        let v5222 : System.DateTime = System.DateTime (1, 1, 1, v5207, v5211, v5215, v5219)
                        v5222
                let v5230 : string = method7()
                let v5233 : (string -> string) = v5229.ToString
                let v5234 : string = v5233 v5230
                let _v5010 = v5234 
                #endif
#if FABLE_COMPILER_PYTHON
                let v5237 : US3 option = None
                let _v5237 = ref v5237 
                match v4999 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v5238 : int64 = x
                let v5239 : US3 = US3_0(v5238)
                v5239 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v5237.Value <- x
                let v5240 : US3 option = _v5237.Value 
                let v5251 : US3 = US3_1
                let v5252 : US3 = v5240 |> Option.defaultValue v5251 
                let v5292 : System.DateTime =
                    match v5252 with
                    | US3_1 -> (* None *)
                        let v5288 : System.DateTime = System.DateTime.Now
                        v5288
                    | US3_0(v5256) -> (* Some *)
                        let v5257 : System.DateTime = System.DateTime.Now
                        let v5260 : (System.DateTime -> int64) = _.Ticks
                        let v5261 : int64 = v5260 v5257
                        let v5264 : int64 = v5261 - v5256
                        let v5265 : (int64 -> System.TimeSpan) = System.TimeSpan 
                        let v5266 : System.TimeSpan = v5265 v5264
                        let v5269 : (System.TimeSpan -> int32) = _.Hours
                        let v5270 : int32 = v5269 v5266
                        let v5273 : (System.TimeSpan -> int32) = _.Minutes
                        let v5274 : int32 = v5273 v5266
                        let v5277 : (System.TimeSpan -> int32) = _.Seconds
                        let v5278 : int32 = v5277 v5266
                        let v5281 : (System.TimeSpan -> int32) = _.Milliseconds
                        let v5282 : int32 = v5281 v5266
                        let v5285 : System.DateTime = System.DateTime (1, 1, 1, v5270, v5274, v5278, v5282)
                        v5285
                let v5293 : string = method7()
                let v5296 : (string -> string) = v5292.ToString
                let v5297 : string = v5296 v5293
                let _v5010 = v5297 
                #endif
#else
                let v5300 : US3 option = None
                let _v5300 = ref v5300 
                match v4999 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v5301 : int64 = x
                let v5302 : US3 = US3_0(v5301)
                v5302 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v5300.Value <- x
                let v5303 : US3 option = _v5300.Value 
                let v5314 : US3 = US3_1
                let v5315 : US3 = v5303 |> Option.defaultValue v5314 
                let v5355 : System.DateTime =
                    match v5315 with
                    | US3_1 -> (* None *)
                        let v5351 : System.DateTime = System.DateTime.Now
                        v5351
                    | US3_0(v5319) -> (* Some *)
                        let v5320 : System.DateTime = System.DateTime.Now
                        let v5323 : (System.DateTime -> int64) = _.Ticks
                        let v5324 : int64 = v5323 v5320
                        let v5327 : int64 = v5324 - v5319
                        let v5328 : (int64 -> System.TimeSpan) = System.TimeSpan 
                        let v5329 : System.TimeSpan = v5328 v5327
                        let v5332 : (System.TimeSpan -> int32) = _.Hours
                        let v5333 : int32 = v5332 v5329
                        let v5336 : (System.TimeSpan -> int32) = _.Minutes
                        let v5337 : int32 = v5336 v5329
                        let v5340 : (System.TimeSpan -> int32) = _.Seconds
                        let v5341 : int32 = v5340 v5329
                        let v5344 : (System.TimeSpan -> int32) = _.Milliseconds
                        let v5345 : int32 = v5344 v5329
                        let v5348 : System.DateTime = System.DateTime (1, 1, 1, v5333, v5337, v5341, v5345)
                        v5348
                let v5356 : string = method7()
                let v5359 : (string -> string) = v5355.ToString
                let v5360 : string = v5359 v5356
                let _v5010 = v5360 
                #endif
                let v5363 : string = _v5010 
                let v5428 : string = "Critical"
                let v5429 : (unit -> string) = v5428.ToLower
                let v5430 : string = v5429 ()
                let v5433 : string = v5430.PadLeft (7, ' ')
                let v5447 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v5448 : string = "inline_colorization::color_bright_red"
                let v5449 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v5448 
                let v5450 : string = "&*$0"
                let v5451 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5433 v5450 
                let v5452 : string = "inline_colorization::color_reset"
                let v5453 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v5452 
                let v5454 : string = "\"{v5449}{v5451}{v5453}\""
                let v5455 : string = @$"format!(" + v5454 + ")"
                let v5456 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v5455 
                let v5457 : string = "fable_library_rust::String_::fromString($0)"
                let v5458 : string = Fable.Core.RustInterop.emitRustExpr v5456 v5457 
                let _v5447 = v5458 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v5459 : string = "inline_colorization::color_bright_red"
                let v5460 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v5459 
                let v5461 : string = "&*$0"
                let v5462 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5433 v5461 
                let v5463 : string = "inline_colorization::color_reset"
                let v5464 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v5463 
                let v5465 : string = "\"{v5460}{v5462}{v5464}\""
                let v5466 : string = @$"format!(" + v5465 + ")"
                let v5467 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v5466 
                let v5468 : string = "fable_library_rust::String_::fromString($0)"
                let v5469 : string = Fable.Core.RustInterop.emitRustExpr v5467 v5468 
                let _v5447 = v5469 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v5470 : string = "inline_colorization::color_bright_red"
                let v5471 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v5470 
                let v5472 : string = "&*$0"
                let v5473 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5433 v5472 
                let v5474 : string = "inline_colorization::color_reset"
                let v5475 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v5474 
                let v5476 : string = "\"{v5471}{v5473}{v5475}\""
                let v5477 : string = @$"format!(" + v5476 + ")"
                let v5478 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v5477 
                let v5479 : string = "fable_library_rust::String_::fromString($0)"
                let v5480 : string = Fable.Core.RustInterop.emitRustExpr v5478 v5479 
                let _v5447 = v5480 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v5481 : string = "\u001b[91m"
                let v5482 : string = method8()
                let v5483 : string = v5481 + v5433 
                let v5484 : string = v5483 + v5482 
                let _v5447 = v5484 
                #endif
#if FABLE_COMPILER_PYTHON
                let v5485 : string = "\u001b[91m"
                let v5486 : string = method8()
                let v5487 : string = v5485 + v5433 
                let v5488 : string = v5487 + v5486 
                let _v5447 = v5488 
                #endif
#else
                let v5489 : string = "\u001b[91m"
                let v5490 : string = method8()
                let v5491 : string = v5489 + v5433 
                let v5492 : string = v5491 + v5490 
                let _v5447 = v5492 
                #endif
                let v5493 : string = _v5447 
                let v5499 : int64 = v4995.l0
                let v5500 : string = method9()
                let v5501 : Mut4 = {l0 = v5500} : Mut4
                let v5502 : string = "{ "
                let v5503 : string = $"{v5502}"
                let v5506 : string = v5501.l0
                let v5507 : string = v5506 + v5503 
                v5501.l0 <- v5507
                let v5508 : string = "error"
                let v5509 : string = $"{v5508}"
                let v5512 : string = v5501.l0
                let v5513 : string = v5512 + v5509 
                v5501.l0 <- v5513
                let v5514 : string = " = "
                let v5515 : string = $"{v5514}"
                let v5518 : string = v5501.l0
                let v5519 : string = v5518 + v5515 
                v5501.l0 <- v5519
                let v5520 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v5521 : string = "format!(\"{:#?}\", $0)"
                let v5522 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4920 v5521 
                let v5523 : string = "fable_library_rust::String_::fromString($0)"
                let v5524 : string = Fable.Core.RustInterop.emitRustExpr v5522 v5523 
                let _v5520 = v5524 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v5525 : string = "format!(\"{:#?}\", $0)"
                let v5526 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4920 v5525 
                let v5527 : string = "fable_library_rust::String_::fromString($0)"
                let v5528 : string = Fable.Core.RustInterop.emitRustExpr v5526 v5527 
                let _v5520 = v5528 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v5529 : string = "format!(\"{:#?}\", $0)"
                let v5530 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4920 v5529 
                let v5531 : string = "fable_library_rust::String_::fromString($0)"
                let v5532 : string = Fable.Core.RustInterop.emitRustExpr v5530 v5531 
                let _v5520 = v5532 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v5533 : string = $"%A{v4920}"
                let _v5520 = v5533 
                #endif
#if FABLE_COMPILER_PYTHON
                let v5536 : string = $"%A{v4920}"
                let _v5520 = v5536 
                #endif
#else
                let v5539 : string = $"%A{v4920}"
                let _v5520 = v5539 
                #endif
                let v5542 : string = _v5520 
                let v5547 : string = $"{v5542}"
                let v5550 : string = v5501.l0
                let v5551 : string = v5550 + v5547 
                v5501.l0 <- v5551
                let v5552 : string = " }"
                let v5553 : string = $"{v5552}"
                let v5556 : string = v5501.l0
                let v5557 : string = v5556 + v5553 
                v5501.l0 <- v5557
                let v5558 : string = v5501.l0
                let v5559 : (unit -> string) = closure25()
                let v5560 : string = $"{v5363} {v5493} #{v5499} %s{v5559 ()} / {v5558}"
                let v5563 : char list = []
                let v5564 : (char list -> (char [])) = List.toArray
                let v5565 : (char []) = v5564 v5563
                let v5568 : string = v5560.TrimStart v5565 
                let v5586 : char list = []
                let v5587 : char list = '/' :: v5586 
                let v5590 : char list = ' ' :: v5587 
                let v5593 : (char list -> (char [])) = List.toArray
                let v5594 : (char []) = v5593 v5590
                let v5597 : string = v5568.TrimEnd v5594 
                let v5615 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v5616 : string = @"println!(""{}"", $0)"
                Fable.Core.RustInterop.emitRustExpr v5597 v5616 
                let _v5615 = () 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v5617 : string = @"println!(""{}"", $0)"
                Fable.Core.RustInterop.emitRustExpr v5597 v5617 
                let _v5615 = () 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v5618 : string = $"near_sdk::log!(\"{{}}\", $0)"
                Fable.Core.RustInterop.emitRustExpr v5597 v5618 
                let _v5615 = () 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                System.Console.WriteLine v5597 
                let _v5615 = () 
                #endif
#if FABLE_COMPILER_PYTHON
                System.Console.WriteLine v5597 
                let _v5615 = () 
                #endif
#else
                System.Console.WriteLine v5597 
                let _v5615 = () 
                #endif
                _v5615 
                let v5619 : (string -> unit) = v4934.l0
                v5619 v5597
            let v5620 : US5 = US5_0(v4920)
            let v5621 : US25 = US25_1
            struct (-1, v5620, v5621)
        | US24_0(v1133) -> (* Ok *)
            let v1134 : string = "true; let _result = (|| { // rust.capture"
            let v1135 : bool = Fable.Core.RustInterop.emitRustExpr () v1134 
            let v1136 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = method67(v1133)
            let v1137 : string = "v1136.lock()"
            let v1138 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v1137 
            let v1139 : string = "$0.unwrap()"
            let v1140 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1138 v1139 
            let v1141 : string = "true; let mut v1140 = v1140"
            let v1142 : bool = Fable.Core.RustInterop.emitRustExpr () v1141 
            let v1143 : string = "&mut $0"
            let v1144 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v1140 v1143 
            let v1145 : string = "$0.as_mut()"
            let v1146 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v1144 v1145 
            let v1147 : string = "$0.unwrap()"
            let v1148 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v1146 v1147 
            let v1149 : string = "&mut v1148.stdout"
            let v1150 : Ref<Mut<std_process_ChildStdout option>> = Fable.Core.RustInterop.emitRustExpr () v1149 
            let v1151 : string = "Option::take($0)"
            let v1152 : std_process_ChildStdout option = Fable.Core.RustInterop.emitRustExpr v1150 v1151 
            let v1153 : string = "$0.unwrap()"
            let v1154 : std_process_ChildStdout = Fable.Core.RustInterop.emitRustExpr v1152 v1153 
            let v1155 : string = "true; $0 })()"
            let v1156 : bool = Fable.Core.RustInterop.emitRustExpr v1154 v1155 
            let v1157 : string = "_result"
            let v1158 : std_process_ChildStdout = Fable.Core.RustInterop.emitRustExpr () v1157 
            let v1159 : string = "true; let _result = (|| { // rust.capture"
            let v1160 : bool = Fable.Core.RustInterop.emitRustExpr () v1159 
            let v1161 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = method67(v1133)
            let v1162 : string = "v1161.lock()"
            let v1163 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v1162 
            let v1164 : string = "$0.unwrap()"
            let v1165 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1163 v1164 
            let v1166 : string = "true; let mut v1165 = v1165"
            let v1167 : bool = Fable.Core.RustInterop.emitRustExpr () v1166 
            let v1168 : string = "&mut $0"
            let v1169 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v1165 v1168 
            let v1170 : string = "$0.as_mut()"
            let v1171 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v1169 v1170 
            let v1172 : string = "$0.unwrap()"
            let v1173 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v1171 v1172 
            let v1174 : string = "&mut v1173.stderr"
            let v1175 : Ref<Mut<std_process_ChildStderr option>> = Fable.Core.RustInterop.emitRustExpr () v1174 
            let v1176 : string = "Option::take($0)"
            let v1177 : std_process_ChildStderr option = Fable.Core.RustInterop.emitRustExpr v1175 v1176 
            let v1178 : string = "$0.unwrap()"
            let v1179 : std_process_ChildStderr = Fable.Core.RustInterop.emitRustExpr v1177 v1178 
            let v1180 : string = "true; $0 })()"
            let v1181 : bool = Fable.Core.RustInterop.emitRustExpr v1179 v1180 
            let v1182 : string = "_result"
            let v1183 : std_process_ChildStderr = Fable.Core.RustInterop.emitRustExpr () v1182 
            let v1184 : string = "true; let _result = (|| { // rust.capture"
            let v1185 : bool = Fable.Core.RustInterop.emitRustExpr () v1184 
            let v1186 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = method67(v1133)
            let v1187 : string = "v1186.lock()"
            let v1188 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v1187 
            let v1189 : string = "$0.unwrap()"
            let v1190 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1188 v1189 
            let v1191 : string = "true; let mut v1190 = v1190"
            let v1192 : bool = Fable.Core.RustInterop.emitRustExpr () v1191 
            let v1193 : string = "&mut $0"
            let v1194 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v1190 v1193 
            let v1195 : string = "$0.as_mut()"
            let v1196 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v1194 v1195 
            let v1197 : string = "$0.unwrap()"
            let v1198 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v1196 v1197 
            let v1199 : string = "&mut $0.stdin"
            let v1200 : Ref<Mut<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v1198 v1199 
            let v1201 : string = "Option::take($0)"
            let v1202 : std_process_ChildStdin option = Fable.Core.RustInterop.emitRustExpr v1200 v1201 
            let v1203 : string = "$0.unwrap()"
            let v1204 : std_process_ChildStdin = Fable.Core.RustInterop.emitRustExpr v1202 v1203 
            let v1205 : std_process_ChildStdin option = Some v1204 
            let v1208 : string = "std::sync::Mutex::new($0)"
            let v1209 : std_sync_Mutex<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v1205 v1208 
            let v1210 : string = "std::sync::Arc::new($0)"
            let v1211 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v1209 v1210 
            let v1212 : string = "true; $0 })()"
            let v1213 : bool = Fable.Core.RustInterop.emitRustExpr v1211 v1212 
            let v1214 : string = "_result"
            let v1215 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr () v1214 
            let v1216 : string = "{ let (sender, receiver) = std::sync::mpsc::channel(); (sender, std::sync::Arc::new(receiver)) }"
            let struct (v1217 : std_sync_mpsc_Sender<std_string_String>, v1218 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) = Fable.Core.RustInterop.emitRustExpr () v1216 
            let v1219 : string = "std::sync::Mutex::new($0)"
            let v1220 : std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v1217 v1219 
            let v1221 : string = "std::sync::Arc::new($0)"
            let v1222 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1220 v1221 
            let v1223 : string = "std::sync::Mutex::new($0)"
            let v1224 : std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v1217 v1223 
            let v1225 : string = "std::sync::Arc::new($0)"
            let v1226 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1224 v1225 
            let v1227 : string = "std::sync::Mutex::new($0)"
            let v1228 : std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1218 v1227 
            let v1229 : string = "std::sync::Arc::new($0)"
            let v1230 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr v1228 v1229 
            let v1231 : string = "true; let __result = std::thread::spawn(move || { //"
            let v1232 : bool = Fable.Core.RustInterop.emitRustExpr () v1231 
            let v1233 : string = "encoding_rs_io::DecodeReaderBytesBuilder::new().utf8_passthru(true).build($0)"
            let v1234 : encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr v1158 v1233 
            let v1235 : string = "std::io::BufReader::new(v1234)"
            let v1236 : std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr () v1235 
            let v1237 : string = "std::io::BufRead::lines(v1236)"
            let v1238 : std_io_Lines<std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v1237 
            let v1239 : string = "true; let mut v1238 = v1238; let _result = v1238.try_for_each(|x| { //"
            let v1240 : bool = Fable.Core.RustInterop.emitRustExpr () v1239 
            let v1241 : string = "x"
            let v1242 : Result<std_string_String, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v1241 
            let v1243 : string = "$0.clone()"
            let v1244 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1222 v1243 
            let v1245 : (std_io_Error -> std_string_String) = method30()
            let v1246 : string = "$0.map_err(|x| $1(x))"
            let v1247 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1242, v1245) v1246 
            let v1248 : (std_string_String -> US26) = method68()
            let v1249 : (std_string_String -> US26) = method69()
            let v1250 : string = "match v1247 { Ok(x) => $0(x), Err(e) => $1(e) }"
            let v1251 : US26 = Fable.Core.RustInterop.emitRustExpr struct (v1248, v1249) v1250 
            let v2619 : std_string_String =
                match v1251 with
                | US26_1(v1913) -> (* Error *)
                    let v1914 : bool = State.trace_state.IsNone
                    if v1914 then
                        let v1915 : US0 = US0_0
                        let struct (v1916 : Mut0, v1917 : Mut1, v1918 : Mut2, v1919 : Mut3, v1920 : int64 option) = method1(v1915)
                        let v1921 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v1916, v1917, v1918, v1919, v1920) 
                        State.trace_state <- v1921 
                        ()
                    let struct (v1926 : Mut0, v1927 : Mut1, v1928 : Mut2, v1929 : Mut3, v1930 : int64 option) = State.trace_state.Value
                    let v1941 : bool = State.trace_state.IsNone
                    if v1941 then
                        let v1942 : US0 = US0_0
                        let struct (v1943 : Mut0, v1944 : Mut1, v1945 : Mut2, v1946 : Mut3, v1947 : int64 option) = method1(v1942)
                        let v1948 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v1943, v1944, v1945, v1946, v1947) 
                        State.trace_state <- v1948 
                        ()
                    let struct (v1953 : Mut0, v1954 : Mut1, v1955 : Mut2, v1956 : Mut3, v1957 : int64 option) = State.trace_state.Value
                    let v1968 : US0 = v1956.l0
                    let v1969 : bool = v1955.l0
                    let v1970 : bool = v1969 = false
                    let v1973 : bool =
                        if v1970 then
                            false
                        else
                            let v1971 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v1968
                            let v1972 : bool = 4 >= v1971
                            v1972
                    if v1973 then
                        let v1974 : int64 = v1926.l0
                        let v1975 : int64 = v1974 + 1L
                        v1926.l0 <- v1975
                        let v1976 : bool = State.trace_state.IsNone
                        if v1976 then
                            let v1977 : US0 = US0_0
                            let struct (v1978 : Mut0, v1979 : Mut1, v1980 : Mut2, v1981 : Mut3, v1982 : int64 option) = method1(v1977)
                            let v1983 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v1978, v1979, v1980, v1981, v1982) 
                            State.trace_state <- v1983 
                            ()
                        let struct (v1988 : Mut0, v1989 : Mut1, v1990 : Mut2, v1991 : Mut3, v1992 : int64 option) = State.trace_state.Value
                        let v2003 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2004 : US3 option = None
                        let _v2004 = ref v2004 
                        match v1992 with
                        | Some x -> (
                        (fun () ->
                        (fun () ->
                        let v2005 : int64 = x
                        let v2006 : US3 = US3_0(v2005)
                        v2006 
                        )
                        |> fun x -> x () |> Some
                        ) () ) | None -> None
                        |> fun x -> _v2004.Value <- x
                        let v2007 : US3 option = _v2004.Value 
                        let v2018 : US3 = US3_1
                        let v2019 : US3 = v2007 |> Option.defaultValue v2018 
                        let v2059 : System.DateTime =
                            match v2019 with
                            | US3_1 -> (* None *)
                                let v2055 : System.DateTime = System.DateTime.Now
                                v2055
                            | US3_0(v2023) -> (* Some *)
                                let v2024 : System.DateTime = System.DateTime.Now
                                let v2027 : (System.DateTime -> int64) = _.Ticks
                                let v2028 : int64 = v2027 v2024
                                let v2031 : int64 = v2028 - v2023
                                let v2032 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                let v2033 : System.TimeSpan = v2032 v2031
                                let v2036 : (System.TimeSpan -> int32) = _.Hours
                                let v2037 : int32 = v2036 v2033
                                let v2040 : (System.TimeSpan -> int32) = _.Minutes
                                let v2041 : int32 = v2040 v2033
                                let v2044 : (System.TimeSpan -> int32) = _.Seconds
                                let v2045 : int32 = v2044 v2033
                                let v2048 : (System.TimeSpan -> int32) = _.Milliseconds
                                let v2049 : int32 = v2048 v2033
                                let v2052 : System.DateTime = System.DateTime (1, 1, 1, v2037, v2041, v2045, v2049)
                                v2052
                        let v2060 : string = method6()
                        let v2063 : (string -> string) = v2059.ToString
                        let v2064 : string = v2063 v2060
                        let _v2003 = v2064 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2067 : US3 option = None
                        let _v2067 = ref v2067 
                        match v1992 with
                        | Some x -> (
                        (fun () ->
                        (fun () ->
                        let v2068 : int64 = x
                        let v2069 : US3 = US3_0(v2068)
                        v2069 
                        )
                        |> fun x -> x () |> Some
                        ) () ) | None -> None
                        |> fun x -> _v2067.Value <- x
                        let v2070 : US3 option = _v2067.Value 
                        let v2081 : US3 = US3_1
                        let v2082 : US3 = v2070 |> Option.defaultValue v2081 
                        let v2122 : System.DateTime =
                            match v2082 with
                            | US3_1 -> (* None *)
                                let v2118 : System.DateTime = System.DateTime.Now
                                v2118
                            | US3_0(v2086) -> (* Some *)
                                let v2087 : System.DateTime = System.DateTime.Now
                                let v2090 : (System.DateTime -> int64) = _.Ticks
                                let v2091 : int64 = v2090 v2087
                                let v2094 : int64 = v2091 - v2086
                                let v2095 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                let v2096 : System.TimeSpan = v2095 v2094
                                let v2099 : (System.TimeSpan -> int32) = _.Hours
                                let v2100 : int32 = v2099 v2096
                                let v2103 : (System.TimeSpan -> int32) = _.Minutes
                                let v2104 : int32 = v2103 v2096
                                let v2107 : (System.TimeSpan -> int32) = _.Seconds
                                let v2108 : int32 = v2107 v2096
                                let v2111 : (System.TimeSpan -> int32) = _.Milliseconds
                                let v2112 : int32 = v2111 v2096
                                let v2115 : System.DateTime = System.DateTime (1, 1, 1, v2100, v2104, v2108, v2112)
                                v2115
                        let v2123 : string = method6()
                        let v2126 : (string -> string) = v2122.ToString
                        let v2127 : string = v2126 v2123
                        let _v2003 = v2127 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2130 : string = $"near_sdk::env::block_timestamp()"
                        let v2131 : uint64 = Fable.Core.RustInterop.emitRustExpr () v2130 
                        let v2132 : US3 option = None
                        let _v2132 = ref v2132 
                        match v1992 with
                        | Some x -> (
                        (fun () ->
                        (fun () ->
                        let v2133 : int64 = x
                        let v2134 : US3 = US3_0(v2133)
                        v2134 
                        )
                        |> fun x -> x () |> Some
                        ) () ) | None -> None
                        |> fun x -> _v2132.Value <- x
                        let v2135 : US3 option = _v2132.Value 
                        let v2146 : US3 = US3_1
                        let v2147 : US3 = v2135 |> Option.defaultValue v2146 
                        let v2156 : uint64 =
                            match v2147 with
                            | US3_1 -> (* None *)
                                v2131
                            | US3_0(v2151) -> (* Some *)
                                let v2152 : (int64 -> uint64) = uint64
                                let v2153 : uint64 = v2152 v2151
                                let v2154 : uint64 = v2131 - v2153
                                v2154
                        let v2157 : uint64 = v2156 / 1000000000UL
                        let v2158 : uint64 = v2157 % 60UL
                        let v2159 : uint64 = v2157 / 60UL
                        let v2160 : uint64 = v2159 % 60UL
                        let v2161 : uint64 = v2157 / 3600UL
                        let v2162 : uint64 = v2161 % 24UL
                        let v2163 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
                        let v2164 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v2162, v2160, v2158) v2163 
                        let v2165 : string = "fable_library_rust::String_::fromString($0)"
                        let v2166 : string = Fable.Core.RustInterop.emitRustExpr v2164 v2165 
                        let _v2003 = v2166 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2167 : US3 option = None
                        let _v2167 = ref v2167 
                        match v1992 with
                        | Some x -> (
                        (fun () ->
                        (fun () ->
                        let v2168 : int64 = x
                        let v2169 : US3 = US3_0(v2168)
                        v2169 
                        )
                        |> fun x -> x () |> Some
                        ) () ) | None -> None
                        |> fun x -> _v2167.Value <- x
                        let v2170 : US3 option = _v2167.Value 
                        let v2181 : US3 = US3_1
                        let v2182 : US3 = v2170 |> Option.defaultValue v2181 
                        let v2222 : System.DateTime =
                            match v2182 with
                            | US3_1 -> (* None *)
                                let v2218 : System.DateTime = System.DateTime.Now
                                v2218
                            | US3_0(v2186) -> (* Some *)
                                let v2187 : System.DateTime = System.DateTime.Now
                                let v2190 : (System.DateTime -> int64) = _.Ticks
                                let v2191 : int64 = v2190 v2187
                                let v2194 : int64 = v2191 - v2186
                                let v2195 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                let v2196 : System.TimeSpan = v2195 v2194
                                let v2199 : (System.TimeSpan -> int32) = _.Hours
                                let v2200 : int32 = v2199 v2196
                                let v2203 : (System.TimeSpan -> int32) = _.Minutes
                                let v2204 : int32 = v2203 v2196
                                let v2207 : (System.TimeSpan -> int32) = _.Seconds
                                let v2208 : int32 = v2207 v2196
                                let v2211 : (System.TimeSpan -> int32) = _.Milliseconds
                                let v2212 : int32 = v2211 v2196
                                let v2215 : System.DateTime = System.DateTime (1, 1, 1, v2200, v2204, v2208, v2212)
                                v2215
                        let v2223 : string = method7()
                        let v2226 : (string -> string) = v2222.ToString
                        let v2227 : string = v2226 v2223
                        let _v2003 = v2227 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2230 : US3 option = None
                        let _v2230 = ref v2230 
                        match v1992 with
                        | Some x -> (
                        (fun () ->
                        (fun () ->
                        let v2231 : int64 = x
                        let v2232 : US3 = US3_0(v2231)
                        v2232 
                        )
                        |> fun x -> x () |> Some
                        ) () ) | None -> None
                        |> fun x -> _v2230.Value <- x
                        let v2233 : US3 option = _v2230.Value 
                        let v2244 : US3 = US3_1
                        let v2245 : US3 = v2233 |> Option.defaultValue v2244 
                        let v2285 : System.DateTime =
                            match v2245 with
                            | US3_1 -> (* None *)
                                let v2281 : System.DateTime = System.DateTime.Now
                                v2281
                            | US3_0(v2249) -> (* Some *)
                                let v2250 : System.DateTime = System.DateTime.Now
                                let v2253 : (System.DateTime -> int64) = _.Ticks
                                let v2254 : int64 = v2253 v2250
                                let v2257 : int64 = v2254 - v2249
                                let v2258 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                let v2259 : System.TimeSpan = v2258 v2257
                                let v2262 : (System.TimeSpan -> int32) = _.Hours
                                let v2263 : int32 = v2262 v2259
                                let v2266 : (System.TimeSpan -> int32) = _.Minutes
                                let v2267 : int32 = v2266 v2259
                                let v2270 : (System.TimeSpan -> int32) = _.Seconds
                                let v2271 : int32 = v2270 v2259
                                let v2274 : (System.TimeSpan -> int32) = _.Milliseconds
                                let v2275 : int32 = v2274 v2259
                                let v2278 : System.DateTime = System.DateTime (1, 1, 1, v2263, v2267, v2271, v2275)
                                v2278
                        let v2286 : string = method7()
                        let v2289 : (string -> string) = v2285.ToString
                        let v2290 : string = v2289 v2286
                        let _v2003 = v2290 
                        #endif
#else
                        let v2293 : US3 option = None
                        let _v2293 = ref v2293 
                        match v1992 with
                        | Some x -> (
                        (fun () ->
                        (fun () ->
                        let v2294 : int64 = x
                        let v2295 : US3 = US3_0(v2294)
                        v2295 
                        )
                        |> fun x -> x () |> Some
                        ) () ) | None -> None
                        |> fun x -> _v2293.Value <- x
                        let v2296 : US3 option = _v2293.Value 
                        let v2307 : US3 = US3_1
                        let v2308 : US3 = v2296 |> Option.defaultValue v2307 
                        let v2348 : System.DateTime =
                            match v2308 with
                            | US3_1 -> (* None *)
                                let v2344 : System.DateTime = System.DateTime.Now
                                v2344
                            | US3_0(v2312) -> (* Some *)
                                let v2313 : System.DateTime = System.DateTime.Now
                                let v2316 : (System.DateTime -> int64) = _.Ticks
                                let v2317 : int64 = v2316 v2313
                                let v2320 : int64 = v2317 - v2312
                                let v2321 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                let v2322 : System.TimeSpan = v2321 v2320
                                let v2325 : (System.TimeSpan -> int32) = _.Hours
                                let v2326 : int32 = v2325 v2322
                                let v2329 : (System.TimeSpan -> int32) = _.Minutes
                                let v2330 : int32 = v2329 v2322
                                let v2333 : (System.TimeSpan -> int32) = _.Seconds
                                let v2334 : int32 = v2333 v2322
                                let v2337 : (System.TimeSpan -> int32) = _.Milliseconds
                                let v2338 : int32 = v2337 v2322
                                let v2341 : System.DateTime = System.DateTime (1, 1, 1, v2326, v2330, v2334, v2338)
                                v2341
                        let v2349 : string = method7()
                        let v2352 : (string -> string) = v2348.ToString
                        let v2353 : string = v2352 v2349
                        let _v2003 = v2353 
                        #endif
                        let v2356 : string = _v2003 
                        let v2421 : string = "Critical"
                        let v2422 : (unit -> string) = v2421.ToLower
                        let v2423 : string = v2422 ()
                        let v2426 : string = v2423.PadLeft (7, ' ')
                        let v2440 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2441 : string = "inline_colorization::color_bright_red"
                        let v2442 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v2441 
                        let v2443 : string = "&*$0"
                        let v2444 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2426 v2443 
                        let v2445 : string = "inline_colorization::color_reset"
                        let v2446 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v2445 
                        let v2447 : string = "\"{v2442}{v2444}{v2446}\""
                        let v2448 : string = @$"format!(" + v2447 + ")"
                        let v2449 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v2448 
                        let v2450 : string = "fable_library_rust::String_::fromString($0)"
                        let v2451 : string = Fable.Core.RustInterop.emitRustExpr v2449 v2450 
                        let _v2440 = v2451 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2452 : string = "inline_colorization::color_bright_red"
                        let v2453 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v2452 
                        let v2454 : string = "&*$0"
                        let v2455 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2426 v2454 
                        let v2456 : string = "inline_colorization::color_reset"
                        let v2457 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v2456 
                        let v2458 : string = "\"{v2453}{v2455}{v2457}\""
                        let v2459 : string = @$"format!(" + v2458 + ")"
                        let v2460 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v2459 
                        let v2461 : string = "fable_library_rust::String_::fromString($0)"
                        let v2462 : string = Fable.Core.RustInterop.emitRustExpr v2460 v2461 
                        let _v2440 = v2462 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2463 : string = "inline_colorization::color_bright_red"
                        let v2464 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v2463 
                        let v2465 : string = "&*$0"
                        let v2466 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2426 v2465 
                        let v2467 : string = "inline_colorization::color_reset"
                        let v2468 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v2467 
                        let v2469 : string = "\"{v2464}{v2466}{v2468}\""
                        let v2470 : string = @$"format!(" + v2469 + ")"
                        let v2471 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v2470 
                        let v2472 : string = "fable_library_rust::String_::fromString($0)"
                        let v2473 : string = Fable.Core.RustInterop.emitRustExpr v2471 v2472 
                        let _v2440 = v2473 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2474 : string = "\u001b[91m"
                        let v2475 : string = method8()
                        let v2476 : string = v2474 + v2426 
                        let v2477 : string = v2476 + v2475 
                        let _v2440 = v2477 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2478 : string = "\u001b[91m"
                        let v2479 : string = method8()
                        let v2480 : string = v2478 + v2426 
                        let v2481 : string = v2480 + v2479 
                        let _v2440 = v2481 
                        #endif
#else
                        let v2482 : string = "\u001b[91m"
                        let v2483 : string = method8()
                        let v2484 : string = v2482 + v2426 
                        let v2485 : string = v2484 + v2483 
                        let _v2440 = v2485 
                        #endif
                        let v2486 : string = _v2440 
                        let v2492 : int64 = v1988.l0
                        let v2493 : string = method9()
                        let v2494 : Mut4 = {l0 = v2493} : Mut4
                        let v2495 : string = "{ "
                        let v2496 : string = $"{v2495}"
                        let v2499 : string = v2494.l0
                        let v2500 : string = v2499 + v2496 
                        v2494.l0 <- v2500
                        let v2501 : string = "e"
                        let v2502 : string = $"{v2501}"
                        let v2505 : string = v2494.l0
                        let v2506 : string = v2505 + v2502 
                        v2494.l0 <- v2506
                        let v2507 : string = " = "
                        let v2508 : string = $"{v2507}"
                        let v2511 : string = v2494.l0
                        let v2512 : string = v2511 + v2508 
                        v2494.l0 <- v2512
                        let v2513 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2514 : string = "format!(\"{:#?}\", $0)"
                        let v2515 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1913 v2514 
                        let v2516 : string = "fable_library_rust::String_::fromString($0)"
                        let v2517 : string = Fable.Core.RustInterop.emitRustExpr v2515 v2516 
                        let _v2513 = v2517 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2518 : string = "format!(\"{:#?}\", $0)"
                        let v2519 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1913 v2518 
                        let v2520 : string = "fable_library_rust::String_::fromString($0)"
                        let v2521 : string = Fable.Core.RustInterop.emitRustExpr v2519 v2520 
                        let _v2513 = v2521 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2522 : string = "format!(\"{:#?}\", $0)"
                        let v2523 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1913 v2522 
                        let v2524 : string = "fable_library_rust::String_::fromString($0)"
                        let v2525 : string = Fable.Core.RustInterop.emitRustExpr v2523 v2524 
                        let _v2513 = v2525 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2526 : string = $"%A{v1913}"
                        let _v2513 = v2526 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2529 : string = $"%A{v1913}"
                        let _v2513 = v2529 
                        #endif
#else
                        let v2532 : string = $"%A{v1913}"
                        let _v2513 = v2532 
                        #endif
                        let v2535 : string = _v2513 
                        let v2540 : string = $"{v2535}"
                        let v2543 : string = v2494.l0
                        let v2544 : string = v2543 + v2540 
                        v2494.l0 <- v2544
                        let v2545 : string = " }"
                        let v2546 : string = $"{v2545}"
                        let v2549 : string = v2494.l0
                        let v2550 : string = v2549 + v2546 
                        v2494.l0 <- v2550
                        let v2551 : string = v2494.l0
                        let v2552 : (unit -> string) = closure28()
                        let v2553 : string = $"{v2356} {v2486} #{v2492} %s{v2552 ()} / {v2551}"
                        let v2556 : char list = []
                        let v2557 : (char list -> (char [])) = List.toArray
                        let v2558 : (char []) = v2557 v2556
                        let v2561 : string = v2553.TrimStart v2558 
                        let v2579 : char list = []
                        let v2580 : char list = '/' :: v2579 
                        let v2583 : char list = ' ' :: v2580 
                        let v2586 : (char list -> (char [])) = List.toArray
                        let v2587 : (char []) = v2586 v2583
                        let v2590 : string = v2561.TrimEnd v2587 
                        let v2608 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2609 : string = @"println!(""{}"", $0)"
                        Fable.Core.RustInterop.emitRustExpr v2590 v2609 
                        let _v2608 = () 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2610 : string = @"println!(""{}"", $0)"
                        Fable.Core.RustInterop.emitRustExpr v2590 v2610 
                        let _v2608 = () 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2611 : string = $"near_sdk::log!(\"{{}}\", $0)"
                        Fable.Core.RustInterop.emitRustExpr v2590 v2611 
                        let _v2608 = () 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        System.Console.WriteLine v2590 
                        let _v2608 = () 
                        #endif
#if FABLE_COMPILER_PYTHON
                        System.Console.WriteLine v2590 
                        let _v2608 = () 
                        #endif
#else
                        System.Console.WriteLine v2590 
                        let _v2608 = () 
                        #endif
                        _v2608 
                        let v2612 : (string -> unit) = v1927.l0
                        v2612 v2590
                    let v2613 : string = $"\u001b[4;7m{v1913}\u001b[0m"
                    let v2614 : string = "&*$0"
                    let v2615 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2613 v2614 
                    let v2616 : string = "String::from($0)"
                    let v2617 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2615 v2616 
                    v2617
                | US26_0(v1252) -> (* Ok *)
                    let v1253 : string = "fable_library_rust::String_::fromString($0)"
                    let v1254 : string = Fable.Core.RustInterop.emitRustExpr v1252 v1253 
                    let v1255 : string = "encoding_rs::UTF_8"
                    let v1256 : Ref<encoding_rs_Encoding> = Fable.Core.RustInterop.emitRustExpr () v1255 
                    let v1257 : string = "$0.encode(&*$1).0"
                    let v1258 : std_borrow_Cow<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v1256, v1254) v1257 
                    let v1259 : string = "$0.as_ref()"
                    let v1260 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr v1258 v1259 
                    let v1261 : string = "std::str::from_utf8($0)"
                    let v1262 : Result<Ref<Str>, std_str_Utf8Error> = Fable.Core.RustInterop.emitRustExpr v1260 v1261 
                    let v1263 : string = "$0.unwrap()"
                    let v1264 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1262 v1263 
                    let v1265 : string = "String::from($0)"
                    let v1266 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1264 v1265 
                    let v1267 : string = "fable_library_rust::String_::fromString($0)"
                    let v1268 : string = Fable.Core.RustInterop.emitRustExpr v1266 v1267 
                    let v1269 : string = $"> {v1268}"
                    if v5 then
                        let v1270 : bool = State.trace_state.IsNone
                        if v1270 then
                            let v1271 : US0 = US0_0
                            let struct (v1272 : Mut0, v1273 : Mut1, v1274 : Mut2, v1275 : Mut3, v1276 : int64 option) = method1(v1271)
                            let v1277 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v1272, v1273, v1274, v1275, v1276) 
                            State.trace_state <- v1277 
                            ()
                        let struct (v1282 : Mut0, v1283 : Mut1, v1284 : Mut2, v1285 : Mut3, v1286 : int64 option) = State.trace_state.Value
                        let v1297 : bool = State.trace_state.IsNone
                        if v1297 then
                            let v1298 : US0 = US0_0
                            let struct (v1299 : Mut0, v1300 : Mut1, v1301 : Mut2, v1302 : Mut3, v1303 : int64 option) = method1(v1298)
                            let v1304 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v1299, v1300, v1301, v1302, v1303) 
                            State.trace_state <- v1304 
                            ()
                        let struct (v1309 : Mut0, v1310 : Mut1, v1311 : Mut2, v1312 : Mut3, v1313 : int64 option) = State.trace_state.Value
                        let v1324 : US0 = v1312.l0
                        let v1325 : bool = v1311.l0
                        let v1326 : bool = v1325 = false
                        let v1329 : bool =
                            if v1326 then
                                false
                            else
                                let v1327 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v1324
                                let v1328 : bool = 0 >= v1327
                                v1328
                        if v1329 then
                            let v1330 : int64 = v1282.l0
                            let v1331 : int64 = v1330 + 1L
                            v1282.l0 <- v1331
                            let v1332 : bool = State.trace_state.IsNone
                            if v1332 then
                                let v1333 : US0 = US0_0
                                let struct (v1334 : Mut0, v1335 : Mut1, v1336 : Mut2, v1337 : Mut3, v1338 : int64 option) = method1(v1333)
                                let v1339 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v1334, v1335, v1336, v1337, v1338) 
                                State.trace_state <- v1339 
                                ()
                            let struct (v1344 : Mut0, v1345 : Mut1, v1346 : Mut2, v1347 : Mut3, v1348 : int64 option) = State.trace_state.Value
                            let v1359 : unit = ()
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v1360 : US3 option = None
                            let _v1360 = ref v1360 
                            match v1348 with
                            | Some x -> (
                            (fun () ->
                            (fun () ->
                            let v1361 : int64 = x
                            let v1362 : US3 = US3_0(v1361)
                            v1362 
                            )
                            |> fun x -> x () |> Some
                            ) () ) | None -> None
                            |> fun x -> _v1360.Value <- x
                            let v1363 : US3 option = _v1360.Value 
                            let v1374 : US3 = US3_1
                            let v1375 : US3 = v1363 |> Option.defaultValue v1374 
                            let v1415 : System.DateTime =
                                match v1375 with
                                | US3_1 -> (* None *)
                                    let v1411 : System.DateTime = System.DateTime.Now
                                    v1411
                                | US3_0(v1379) -> (* Some *)
                                    let v1380 : System.DateTime = System.DateTime.Now
                                    let v1383 : (System.DateTime -> int64) = _.Ticks
                                    let v1384 : int64 = v1383 v1380
                                    let v1387 : int64 = v1384 - v1379
                                    let v1388 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                    let v1389 : System.TimeSpan = v1388 v1387
                                    let v1392 : (System.TimeSpan -> int32) = _.Hours
                                    let v1393 : int32 = v1392 v1389
                                    let v1396 : (System.TimeSpan -> int32) = _.Minutes
                                    let v1397 : int32 = v1396 v1389
                                    let v1400 : (System.TimeSpan -> int32) = _.Seconds
                                    let v1401 : int32 = v1400 v1389
                                    let v1404 : (System.TimeSpan -> int32) = _.Milliseconds
                                    let v1405 : int32 = v1404 v1389
                                    let v1408 : System.DateTime = System.DateTime (1, 1, 1, v1393, v1397, v1401, v1405)
                                    v1408
                            let v1416 : string = method6()
                            let v1419 : (string -> string) = v1415.ToString
                            let v1420 : string = v1419 v1416
                            let _v1359 = v1420 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v1423 : US3 option = None
                            let _v1423 = ref v1423 
                            match v1348 with
                            | Some x -> (
                            (fun () ->
                            (fun () ->
                            let v1424 : int64 = x
                            let v1425 : US3 = US3_0(v1424)
                            v1425 
                            )
                            |> fun x -> x () |> Some
                            ) () ) | None -> None
                            |> fun x -> _v1423.Value <- x
                            let v1426 : US3 option = _v1423.Value 
                            let v1437 : US3 = US3_1
                            let v1438 : US3 = v1426 |> Option.defaultValue v1437 
                            let v1478 : System.DateTime =
                                match v1438 with
                                | US3_1 -> (* None *)
                                    let v1474 : System.DateTime = System.DateTime.Now
                                    v1474
                                | US3_0(v1442) -> (* Some *)
                                    let v1443 : System.DateTime = System.DateTime.Now
                                    let v1446 : (System.DateTime -> int64) = _.Ticks
                                    let v1447 : int64 = v1446 v1443
                                    let v1450 : int64 = v1447 - v1442
                                    let v1451 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                    let v1452 : System.TimeSpan = v1451 v1450
                                    let v1455 : (System.TimeSpan -> int32) = _.Hours
                                    let v1456 : int32 = v1455 v1452
                                    let v1459 : (System.TimeSpan -> int32) = _.Minutes
                                    let v1460 : int32 = v1459 v1452
                                    let v1463 : (System.TimeSpan -> int32) = _.Seconds
                                    let v1464 : int32 = v1463 v1452
                                    let v1467 : (System.TimeSpan -> int32) = _.Milliseconds
                                    let v1468 : int32 = v1467 v1452
                                    let v1471 : System.DateTime = System.DateTime (1, 1, 1, v1456, v1460, v1464, v1468)
                                    v1471
                            let v1479 : string = method6()
                            let v1482 : (string -> string) = v1478.ToString
                            let v1483 : string = v1482 v1479
                            let _v1359 = v1483 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v1486 : string = $"near_sdk::env::block_timestamp()"
                            let v1487 : uint64 = Fable.Core.RustInterop.emitRustExpr () v1486 
                            let v1488 : US3 option = None
                            let _v1488 = ref v1488 
                            match v1348 with
                            | Some x -> (
                            (fun () ->
                            (fun () ->
                            let v1489 : int64 = x
                            let v1490 : US3 = US3_0(v1489)
                            v1490 
                            )
                            |> fun x -> x () |> Some
                            ) () ) | None -> None
                            |> fun x -> _v1488.Value <- x
                            let v1491 : US3 option = _v1488.Value 
                            let v1502 : US3 = US3_1
                            let v1503 : US3 = v1491 |> Option.defaultValue v1502 
                            let v1512 : uint64 =
                                match v1503 with
                                | US3_1 -> (* None *)
                                    v1487
                                | US3_0(v1507) -> (* Some *)
                                    let v1508 : (int64 -> uint64) = uint64
                                    let v1509 : uint64 = v1508 v1507
                                    let v1510 : uint64 = v1487 - v1509
                                    v1510
                            let v1513 : uint64 = v1512 / 1000000000UL
                            let v1514 : uint64 = v1513 % 60UL
                            let v1515 : uint64 = v1513 / 60UL
                            let v1516 : uint64 = v1515 % 60UL
                            let v1517 : uint64 = v1513 / 3600UL
                            let v1518 : uint64 = v1517 % 24UL
                            let v1519 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
                            let v1520 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v1518, v1516, v1514) v1519 
                            let v1521 : string = "fable_library_rust::String_::fromString($0)"
                            let v1522 : string = Fable.Core.RustInterop.emitRustExpr v1520 v1521 
                            let _v1359 = v1522 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v1523 : US3 option = None
                            let _v1523 = ref v1523 
                            match v1348 with
                            | Some x -> (
                            (fun () ->
                            (fun () ->
                            let v1524 : int64 = x
                            let v1525 : US3 = US3_0(v1524)
                            v1525 
                            )
                            |> fun x -> x () |> Some
                            ) () ) | None -> None
                            |> fun x -> _v1523.Value <- x
                            let v1526 : US3 option = _v1523.Value 
                            let v1537 : US3 = US3_1
                            let v1538 : US3 = v1526 |> Option.defaultValue v1537 
                            let v1578 : System.DateTime =
                                match v1538 with
                                | US3_1 -> (* None *)
                                    let v1574 : System.DateTime = System.DateTime.Now
                                    v1574
                                | US3_0(v1542) -> (* Some *)
                                    let v1543 : System.DateTime = System.DateTime.Now
                                    let v1546 : (System.DateTime -> int64) = _.Ticks
                                    let v1547 : int64 = v1546 v1543
                                    let v1550 : int64 = v1547 - v1542
                                    let v1551 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                    let v1552 : System.TimeSpan = v1551 v1550
                                    let v1555 : (System.TimeSpan -> int32) = _.Hours
                                    let v1556 : int32 = v1555 v1552
                                    let v1559 : (System.TimeSpan -> int32) = _.Minutes
                                    let v1560 : int32 = v1559 v1552
                                    let v1563 : (System.TimeSpan -> int32) = _.Seconds
                                    let v1564 : int32 = v1563 v1552
                                    let v1567 : (System.TimeSpan -> int32) = _.Milliseconds
                                    let v1568 : int32 = v1567 v1552
                                    let v1571 : System.DateTime = System.DateTime (1, 1, 1, v1556, v1560, v1564, v1568)
                                    v1571
                            let v1579 : string = method7()
                            let v1582 : (string -> string) = v1578.ToString
                            let v1583 : string = v1582 v1579
                            let _v1359 = v1583 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v1586 : US3 option = None
                            let _v1586 = ref v1586 
                            match v1348 with
                            | Some x -> (
                            (fun () ->
                            (fun () ->
                            let v1587 : int64 = x
                            let v1588 : US3 = US3_0(v1587)
                            v1588 
                            )
                            |> fun x -> x () |> Some
                            ) () ) | None -> None
                            |> fun x -> _v1586.Value <- x
                            let v1589 : US3 option = _v1586.Value 
                            let v1600 : US3 = US3_1
                            let v1601 : US3 = v1589 |> Option.defaultValue v1600 
                            let v1641 : System.DateTime =
                                match v1601 with
                                | US3_1 -> (* None *)
                                    let v1637 : System.DateTime = System.DateTime.Now
                                    v1637
                                | US3_0(v1605) -> (* Some *)
                                    let v1606 : System.DateTime = System.DateTime.Now
                                    let v1609 : (System.DateTime -> int64) = _.Ticks
                                    let v1610 : int64 = v1609 v1606
                                    let v1613 : int64 = v1610 - v1605
                                    let v1614 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                    let v1615 : System.TimeSpan = v1614 v1613
                                    let v1618 : (System.TimeSpan -> int32) = _.Hours
                                    let v1619 : int32 = v1618 v1615
                                    let v1622 : (System.TimeSpan -> int32) = _.Minutes
                                    let v1623 : int32 = v1622 v1615
                                    let v1626 : (System.TimeSpan -> int32) = _.Seconds
                                    let v1627 : int32 = v1626 v1615
                                    let v1630 : (System.TimeSpan -> int32) = _.Milliseconds
                                    let v1631 : int32 = v1630 v1615
                                    let v1634 : System.DateTime = System.DateTime (1, 1, 1, v1619, v1623, v1627, v1631)
                                    v1634
                            let v1642 : string = method7()
                            let v1645 : (string -> string) = v1641.ToString
                            let v1646 : string = v1645 v1642
                            let _v1359 = v1646 
                            #endif
#else
                            let v1649 : US3 option = None
                            let _v1649 = ref v1649 
                            match v1348 with
                            | Some x -> (
                            (fun () ->
                            (fun () ->
                            let v1650 : int64 = x
                            let v1651 : US3 = US3_0(v1650)
                            v1651 
                            )
                            |> fun x -> x () |> Some
                            ) () ) | None -> None
                            |> fun x -> _v1649.Value <- x
                            let v1652 : US3 option = _v1649.Value 
                            let v1663 : US3 = US3_1
                            let v1664 : US3 = v1652 |> Option.defaultValue v1663 
                            let v1704 : System.DateTime =
                                match v1664 with
                                | US3_1 -> (* None *)
                                    let v1700 : System.DateTime = System.DateTime.Now
                                    v1700
                                | US3_0(v1668) -> (* Some *)
                                    let v1669 : System.DateTime = System.DateTime.Now
                                    let v1672 : (System.DateTime -> int64) = _.Ticks
                                    let v1673 : int64 = v1672 v1669
                                    let v1676 : int64 = v1673 - v1668
                                    let v1677 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                    let v1678 : System.TimeSpan = v1677 v1676
                                    let v1681 : (System.TimeSpan -> int32) = _.Hours
                                    let v1682 : int32 = v1681 v1678
                                    let v1685 : (System.TimeSpan -> int32) = _.Minutes
                                    let v1686 : int32 = v1685 v1678
                                    let v1689 : (System.TimeSpan -> int32) = _.Seconds
                                    let v1690 : int32 = v1689 v1678
                                    let v1693 : (System.TimeSpan -> int32) = _.Milliseconds
                                    let v1694 : int32 = v1693 v1678
                                    let v1697 : System.DateTime = System.DateTime (1, 1, 1, v1682, v1686, v1690, v1694)
                                    v1697
                            let v1705 : string = method7()
                            let v1708 : (string -> string) = v1704.ToString
                            let v1709 : string = v1708 v1705
                            let _v1359 = v1709 
                            #endif
                            let v1712 : string = _v1359 
                            let v1777 : string = "Verbose"
                            let v1778 : (unit -> string) = v1777.ToLower
                            let v1779 : string = v1778 ()
                            let v1782 : string = v1779.PadLeft (7, ' ')
                            let v1796 : unit = ()
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v1797 : string = "inline_colorization::color_bright_black"
                            let v1798 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1797 
                            let v1799 : string = "&*$0"
                            let v1800 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1782 v1799 
                            let v1801 : string = "inline_colorization::color_reset"
                            let v1802 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1801 
                            let v1803 : string = "\"{v1798}{v1800}{v1802}\""
                            let v1804 : string = @$"format!(" + v1803 + ")"
                            let v1805 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1804 
                            let v1806 : string = "fable_library_rust::String_::fromString($0)"
                            let v1807 : string = Fable.Core.RustInterop.emitRustExpr v1805 v1806 
                            let _v1796 = v1807 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v1808 : string = "inline_colorization::color_bright_black"
                            let v1809 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1808 
                            let v1810 : string = "&*$0"
                            let v1811 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1782 v1810 
                            let v1812 : string = "inline_colorization::color_reset"
                            let v1813 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1812 
                            let v1814 : string = "\"{v1809}{v1811}{v1813}\""
                            let v1815 : string = @$"format!(" + v1814 + ")"
                            let v1816 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1815 
                            let v1817 : string = "fable_library_rust::String_::fromString($0)"
                            let v1818 : string = Fable.Core.RustInterop.emitRustExpr v1816 v1817 
                            let _v1796 = v1818 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v1819 : string = "inline_colorization::color_bright_black"
                            let v1820 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1819 
                            let v1821 : string = "&*$0"
                            let v1822 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1782 v1821 
                            let v1823 : string = "inline_colorization::color_reset"
                            let v1824 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1823 
                            let v1825 : string = "\"{v1820}{v1822}{v1824}\""
                            let v1826 : string = @$"format!(" + v1825 + ")"
                            let v1827 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1826 
                            let v1828 : string = "fable_library_rust::String_::fromString($0)"
                            let v1829 : string = Fable.Core.RustInterop.emitRustExpr v1827 v1828 
                            let _v1796 = v1829 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v1830 : string = "\u001b[90m"
                            let v1831 : string = method8()
                            let v1832 : string = v1830 + v1782 
                            let v1833 : string = v1832 + v1831 
                            let _v1796 = v1833 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v1834 : string = "\u001b[90m"
                            let v1835 : string = method8()
                            let v1836 : string = v1834 + v1782 
                            let v1837 : string = v1836 + v1835 
                            let _v1796 = v1837 
                            #endif
#else
                            let v1838 : string = "\u001b[90m"
                            let v1839 : string = method8()
                            let v1840 : string = v1838 + v1782 
                            let v1841 : string = v1840 + v1839 
                            let _v1796 = v1841 
                            #endif
                            let v1842 : string = _v1796 
                            let v1848 : int64 = v1344.l0
                            let v1849 : string = method9()
                            let v1850 : Mut4 = {l0 = v1849} : Mut4
                            let v1851 : string = v1850.l0
                            let v1852 : (unit -> string) = closure29(v1269)
                            let v1853 : string = $"{v1712} {v1842} #{v1848} %s{v1852 ()} / {v1851}"
                            let v1856 : char list = []
                            let v1857 : (char list -> (char [])) = List.toArray
                            let v1858 : (char []) = v1857 v1856
                            let v1861 : string = v1853.TrimStart v1858 
                            let v1879 : char list = []
                            let v1880 : char list = '/' :: v1879 
                            let v1883 : char list = ' ' :: v1880 
                            let v1886 : (char list -> (char [])) = List.toArray
                            let v1887 : (char []) = v1886 v1883
                            let v1890 : string = v1861.TrimEnd v1887 
                            let v1908 : unit = ()
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v1909 : string = @"println!(""{}"", $0)"
                            Fable.Core.RustInterop.emitRustExpr v1890 v1909 
                            let _v1908 = () 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v1910 : string = @"println!(""{}"", $0)"
                            Fable.Core.RustInterop.emitRustExpr v1890 v1910 
                            let _v1908 = () 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v1911 : string = $"near_sdk::log!(\"{{}}\", $0)"
                            Fable.Core.RustInterop.emitRustExpr v1890 v1911 
                            let _v1908 = () 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            System.Console.WriteLine v1890 
                            let _v1908 = () 
                            #endif
#if FABLE_COMPILER_PYTHON
                            System.Console.WriteLine v1890 
                            let _v1908 = () 
                            #endif
#else
                            System.Console.WriteLine v1890 
                            let _v1908 = () 
                            #endif
                            _v1908 
                            let v1912 : (string -> unit) = v1283.l0
                            v1912 v1890
                    else
                        v1269 |> System.Console.WriteLine
                        ()
                    v1266
            let v2620 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = method70(v1244)
            let v2621 : string = "v2620.lock()"
            let v2622 : Result<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v2621 
            let v2623 : string = "$0.unwrap()"
            let v2624 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v2622 v2623 
            let v2625 : string = "&$0"
            let v2626 : Ref<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v2624 v2625 
            let v2627 : string = "$0.send($1)"
            let v2628 : Result<unit, std_sync_mpsc_SendError<std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v2626, v2619) v2627 
            let v2629 : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) = method71()
            let v2630 : string = "$0.map_err(|x| $1(x))"
            let v2631 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v2628, v2629) v2630 
            let v2632 : string = "$0"
            let v2633 : core_ops_Try<unit> = Fable.Core.RustInterop.emitRustExpr v2631 v2632 
            let v2634 : string = "true; $0 }); //"
            let v2635 : bool = Fable.Core.RustInterop.emitRustExpr v2633 v2634 
            let v2636 : string = "_result.map_err(|x| x.into())"
            let v2637 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr () v2636 
            let v2638 : Result<unit, string> = method72(v2637)
            let v2639 : string = ""
            let v2640 : string = "}"
            let v2641 : string = v2639 + v2640 
            let v2642 : string = "v2638 " + v2641 + "); " + v2639 + " // rust.fix_closure'"
            Fable.Core.RustInterop.emitRustExpr () v2642 
            let v2643 : string = "__result"
            let v2644 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v2643 
            let v2645 : string = "true; let __result = std::thread::spawn(move || { //"
            let v2646 : bool = Fable.Core.RustInterop.emitRustExpr () v2645 
            let v2647 : string = "encoding_rs_io::DecodeReaderBytesBuilder::new().utf8_passthru(true).build($0)"
            let v2648 : encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr v1183 v2647 
            let v2649 : string = "std::io::BufReader::new(v2648)"
            let v2650 : std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr () v2649 
            let v2651 : string = "std::io::BufRead::lines(v2650)"
            let v2652 : std_io_Lines<std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v2651 
            let v2653 : string = "true; let mut v2652 = v2652; let _result = v2652.try_for_each(|x| { //"
            let v2654 : bool = Fable.Core.RustInterop.emitRustExpr () v2653 
            let v2655 : string = "x"
            let v2656 : Result<std_string_String, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v2655 
            let v2657 : string = "$0.clone()"
            let v2658 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1226 v2657 
            let v2659 : (std_io_Error -> std_string_String) = method30()
            let v2660 : string = "$0.map_err(|x| $1(x))"
            let v2661 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v2656, v2659) v2660 
            let v2662 : (std_string_String -> US26) = method68()
            let v2663 : (std_string_String -> US26) = method69()
            let v2664 : string = "match v2661 { Ok(x) => $0(x), Err(e) => $1(e) }"
            let v2665 : US26 = Fable.Core.RustInterop.emitRustExpr struct (v2662, v2663) v2664 
            let v4034 : std_string_String =
                match v2665 with
                | US26_1(v3330) -> (* Error *)
                    let v3331 : bool = State.trace_state.IsNone
                    if v3331 then
                        let v3332 : US0 = US0_0
                        let struct (v3333 : Mut0, v3334 : Mut1, v3335 : Mut2, v3336 : Mut3, v3337 : int64 option) = method1(v3332)
                        let v3338 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v3333, v3334, v3335, v3336, v3337) 
                        State.trace_state <- v3338 
                        ()
                    let struct (v3343 : Mut0, v3344 : Mut1, v3345 : Mut2, v3346 : Mut3, v3347 : int64 option) = State.trace_state.Value
                    let v3358 : bool = State.trace_state.IsNone
                    if v3358 then
                        let v3359 : US0 = US0_0
                        let struct (v3360 : Mut0, v3361 : Mut1, v3362 : Mut2, v3363 : Mut3, v3364 : int64 option) = method1(v3359)
                        let v3365 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v3360, v3361, v3362, v3363, v3364) 
                        State.trace_state <- v3365 
                        ()
                    let struct (v3370 : Mut0, v3371 : Mut1, v3372 : Mut2, v3373 : Mut3, v3374 : int64 option) = State.trace_state.Value
                    let v3385 : US0 = v3373.l0
                    let v3386 : bool = v3372.l0
                    let v3387 : bool = v3386 = false
                    let v3390 : bool =
                        if v3387 then
                            false
                        else
                            let v3388 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v3385
                            let v3389 : bool = 4 >= v3388
                            v3389
                    if v3390 then
                        let v3391 : int64 = v3343.l0
                        let v3392 : int64 = v3391 + 1L
                        v3343.l0 <- v3392
                        let v3393 : bool = State.trace_state.IsNone
                        if v3393 then
                            let v3394 : US0 = US0_0
                            let struct (v3395 : Mut0, v3396 : Mut1, v3397 : Mut2, v3398 : Mut3, v3399 : int64 option) = method1(v3394)
                            let v3400 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v3395, v3396, v3397, v3398, v3399) 
                            State.trace_state <- v3400 
                            ()
                        let struct (v3405 : Mut0, v3406 : Mut1, v3407 : Mut2, v3408 : Mut3, v3409 : int64 option) = State.trace_state.Value
                        let v3420 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v3421 : US3 option = None
                        let _v3421 = ref v3421 
                        match v3409 with
                        | Some x -> (
                        (fun () ->
                        (fun () ->
                        let v3422 : int64 = x
                        let v3423 : US3 = US3_0(v3422)
                        v3423 
                        )
                        |> fun x -> x () |> Some
                        ) () ) | None -> None
                        |> fun x -> _v3421.Value <- x
                        let v3424 : US3 option = _v3421.Value 
                        let v3435 : US3 = US3_1
                        let v3436 : US3 = v3424 |> Option.defaultValue v3435 
                        let v3476 : System.DateTime =
                            match v3436 with
                            | US3_1 -> (* None *)
                                let v3472 : System.DateTime = System.DateTime.Now
                                v3472
                            | US3_0(v3440) -> (* Some *)
                                let v3441 : System.DateTime = System.DateTime.Now
                                let v3444 : (System.DateTime -> int64) = _.Ticks
                                let v3445 : int64 = v3444 v3441
                                let v3448 : int64 = v3445 - v3440
                                let v3449 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                let v3450 : System.TimeSpan = v3449 v3448
                                let v3453 : (System.TimeSpan -> int32) = _.Hours
                                let v3454 : int32 = v3453 v3450
                                let v3457 : (System.TimeSpan -> int32) = _.Minutes
                                let v3458 : int32 = v3457 v3450
                                let v3461 : (System.TimeSpan -> int32) = _.Seconds
                                let v3462 : int32 = v3461 v3450
                                let v3465 : (System.TimeSpan -> int32) = _.Milliseconds
                                let v3466 : int32 = v3465 v3450
                                let v3469 : System.DateTime = System.DateTime (1, 1, 1, v3454, v3458, v3462, v3466)
                                v3469
                        let v3477 : string = method6()
                        let v3480 : (string -> string) = v3476.ToString
                        let v3481 : string = v3480 v3477
                        let _v3420 = v3481 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v3484 : US3 option = None
                        let _v3484 = ref v3484 
                        match v3409 with
                        | Some x -> (
                        (fun () ->
                        (fun () ->
                        let v3485 : int64 = x
                        let v3486 : US3 = US3_0(v3485)
                        v3486 
                        )
                        |> fun x -> x () |> Some
                        ) () ) | None -> None
                        |> fun x -> _v3484.Value <- x
                        let v3487 : US3 option = _v3484.Value 
                        let v3498 : US3 = US3_1
                        let v3499 : US3 = v3487 |> Option.defaultValue v3498 
                        let v3539 : System.DateTime =
                            match v3499 with
                            | US3_1 -> (* None *)
                                let v3535 : System.DateTime = System.DateTime.Now
                                v3535
                            | US3_0(v3503) -> (* Some *)
                                let v3504 : System.DateTime = System.DateTime.Now
                                let v3507 : (System.DateTime -> int64) = _.Ticks
                                let v3508 : int64 = v3507 v3504
                                let v3511 : int64 = v3508 - v3503
                                let v3512 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                let v3513 : System.TimeSpan = v3512 v3511
                                let v3516 : (System.TimeSpan -> int32) = _.Hours
                                let v3517 : int32 = v3516 v3513
                                let v3520 : (System.TimeSpan -> int32) = _.Minutes
                                let v3521 : int32 = v3520 v3513
                                let v3524 : (System.TimeSpan -> int32) = _.Seconds
                                let v3525 : int32 = v3524 v3513
                                let v3528 : (System.TimeSpan -> int32) = _.Milliseconds
                                let v3529 : int32 = v3528 v3513
                                let v3532 : System.DateTime = System.DateTime (1, 1, 1, v3517, v3521, v3525, v3529)
                                v3532
                        let v3540 : string = method6()
                        let v3543 : (string -> string) = v3539.ToString
                        let v3544 : string = v3543 v3540
                        let _v3420 = v3544 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v3547 : string = $"near_sdk::env::block_timestamp()"
                        let v3548 : uint64 = Fable.Core.RustInterop.emitRustExpr () v3547 
                        let v3549 : US3 option = None
                        let _v3549 = ref v3549 
                        match v3409 with
                        | Some x -> (
                        (fun () ->
                        (fun () ->
                        let v3550 : int64 = x
                        let v3551 : US3 = US3_0(v3550)
                        v3551 
                        )
                        |> fun x -> x () |> Some
                        ) () ) | None -> None
                        |> fun x -> _v3549.Value <- x
                        let v3552 : US3 option = _v3549.Value 
                        let v3563 : US3 = US3_1
                        let v3564 : US3 = v3552 |> Option.defaultValue v3563 
                        let v3573 : uint64 =
                            match v3564 with
                            | US3_1 -> (* None *)
                                v3548
                            | US3_0(v3568) -> (* Some *)
                                let v3569 : (int64 -> uint64) = uint64
                                let v3570 : uint64 = v3569 v3568
                                let v3571 : uint64 = v3548 - v3570
                                v3571
                        let v3574 : uint64 = v3573 / 1000000000UL
                        let v3575 : uint64 = v3574 % 60UL
                        let v3576 : uint64 = v3574 / 60UL
                        let v3577 : uint64 = v3576 % 60UL
                        let v3578 : uint64 = v3574 / 3600UL
                        let v3579 : uint64 = v3578 % 24UL
                        let v3580 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
                        let v3581 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v3579, v3577, v3575) v3580 
                        let v3582 : string = "fable_library_rust::String_::fromString($0)"
                        let v3583 : string = Fable.Core.RustInterop.emitRustExpr v3581 v3582 
                        let _v3420 = v3583 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v3584 : US3 option = None
                        let _v3584 = ref v3584 
                        match v3409 with
                        | Some x -> (
                        (fun () ->
                        (fun () ->
                        let v3585 : int64 = x
                        let v3586 : US3 = US3_0(v3585)
                        v3586 
                        )
                        |> fun x -> x () |> Some
                        ) () ) | None -> None
                        |> fun x -> _v3584.Value <- x
                        let v3587 : US3 option = _v3584.Value 
                        let v3598 : US3 = US3_1
                        let v3599 : US3 = v3587 |> Option.defaultValue v3598 
                        let v3639 : System.DateTime =
                            match v3599 with
                            | US3_1 -> (* None *)
                                let v3635 : System.DateTime = System.DateTime.Now
                                v3635
                            | US3_0(v3603) -> (* Some *)
                                let v3604 : System.DateTime = System.DateTime.Now
                                let v3607 : (System.DateTime -> int64) = _.Ticks
                                let v3608 : int64 = v3607 v3604
                                let v3611 : int64 = v3608 - v3603
                                let v3612 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                let v3613 : System.TimeSpan = v3612 v3611
                                let v3616 : (System.TimeSpan -> int32) = _.Hours
                                let v3617 : int32 = v3616 v3613
                                let v3620 : (System.TimeSpan -> int32) = _.Minutes
                                let v3621 : int32 = v3620 v3613
                                let v3624 : (System.TimeSpan -> int32) = _.Seconds
                                let v3625 : int32 = v3624 v3613
                                let v3628 : (System.TimeSpan -> int32) = _.Milliseconds
                                let v3629 : int32 = v3628 v3613
                                let v3632 : System.DateTime = System.DateTime (1, 1, 1, v3617, v3621, v3625, v3629)
                                v3632
                        let v3640 : string = method7()
                        let v3643 : (string -> string) = v3639.ToString
                        let v3644 : string = v3643 v3640
                        let _v3420 = v3644 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v3647 : US3 option = None
                        let _v3647 = ref v3647 
                        match v3409 with
                        | Some x -> (
                        (fun () ->
                        (fun () ->
                        let v3648 : int64 = x
                        let v3649 : US3 = US3_0(v3648)
                        v3649 
                        )
                        |> fun x -> x () |> Some
                        ) () ) | None -> None
                        |> fun x -> _v3647.Value <- x
                        let v3650 : US3 option = _v3647.Value 
                        let v3661 : US3 = US3_1
                        let v3662 : US3 = v3650 |> Option.defaultValue v3661 
                        let v3702 : System.DateTime =
                            match v3662 with
                            | US3_1 -> (* None *)
                                let v3698 : System.DateTime = System.DateTime.Now
                                v3698
                            | US3_0(v3666) -> (* Some *)
                                let v3667 : System.DateTime = System.DateTime.Now
                                let v3670 : (System.DateTime -> int64) = _.Ticks
                                let v3671 : int64 = v3670 v3667
                                let v3674 : int64 = v3671 - v3666
                                let v3675 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                let v3676 : System.TimeSpan = v3675 v3674
                                let v3679 : (System.TimeSpan -> int32) = _.Hours
                                let v3680 : int32 = v3679 v3676
                                let v3683 : (System.TimeSpan -> int32) = _.Minutes
                                let v3684 : int32 = v3683 v3676
                                let v3687 : (System.TimeSpan -> int32) = _.Seconds
                                let v3688 : int32 = v3687 v3676
                                let v3691 : (System.TimeSpan -> int32) = _.Milliseconds
                                let v3692 : int32 = v3691 v3676
                                let v3695 : System.DateTime = System.DateTime (1, 1, 1, v3680, v3684, v3688, v3692)
                                v3695
                        let v3703 : string = method7()
                        let v3706 : (string -> string) = v3702.ToString
                        let v3707 : string = v3706 v3703
                        let _v3420 = v3707 
                        #endif
#else
                        let v3710 : US3 option = None
                        let _v3710 = ref v3710 
                        match v3409 with
                        | Some x -> (
                        (fun () ->
                        (fun () ->
                        let v3711 : int64 = x
                        let v3712 : US3 = US3_0(v3711)
                        v3712 
                        )
                        |> fun x -> x () |> Some
                        ) () ) | None -> None
                        |> fun x -> _v3710.Value <- x
                        let v3713 : US3 option = _v3710.Value 
                        let v3724 : US3 = US3_1
                        let v3725 : US3 = v3713 |> Option.defaultValue v3724 
                        let v3765 : System.DateTime =
                            match v3725 with
                            | US3_1 -> (* None *)
                                let v3761 : System.DateTime = System.DateTime.Now
                                v3761
                            | US3_0(v3729) -> (* Some *)
                                let v3730 : System.DateTime = System.DateTime.Now
                                let v3733 : (System.DateTime -> int64) = _.Ticks
                                let v3734 : int64 = v3733 v3730
                                let v3737 : int64 = v3734 - v3729
                                let v3738 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                let v3739 : System.TimeSpan = v3738 v3737
                                let v3742 : (System.TimeSpan -> int32) = _.Hours
                                let v3743 : int32 = v3742 v3739
                                let v3746 : (System.TimeSpan -> int32) = _.Minutes
                                let v3747 : int32 = v3746 v3739
                                let v3750 : (System.TimeSpan -> int32) = _.Seconds
                                let v3751 : int32 = v3750 v3739
                                let v3754 : (System.TimeSpan -> int32) = _.Milliseconds
                                let v3755 : int32 = v3754 v3739
                                let v3758 : System.DateTime = System.DateTime (1, 1, 1, v3743, v3747, v3751, v3755)
                                v3758
                        let v3766 : string = method7()
                        let v3769 : (string -> string) = v3765.ToString
                        let v3770 : string = v3769 v3766
                        let _v3420 = v3770 
                        #endif
                        let v3773 : string = _v3420 
                        let v3838 : string = "Critical"
                        let v3839 : (unit -> string) = v3838.ToLower
                        let v3840 : string = v3839 ()
                        let v3843 : string = v3840.PadLeft (7, ' ')
                        let v3857 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v3858 : string = "inline_colorization::color_bright_red"
                        let v3859 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v3858 
                        let v3860 : string = "&*$0"
                        let v3861 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3843 v3860 
                        let v3862 : string = "inline_colorization::color_reset"
                        let v3863 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v3862 
                        let v3864 : string = "\"{v3859}{v3861}{v3863}\""
                        let v3865 : string = @$"format!(" + v3864 + ")"
                        let v3866 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v3865 
                        let v3867 : string = "fable_library_rust::String_::fromString($0)"
                        let v3868 : string = Fable.Core.RustInterop.emitRustExpr v3866 v3867 
                        let _v3857 = v3868 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v3869 : string = "inline_colorization::color_bright_red"
                        let v3870 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v3869 
                        let v3871 : string = "&*$0"
                        let v3872 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3843 v3871 
                        let v3873 : string = "inline_colorization::color_reset"
                        let v3874 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v3873 
                        let v3875 : string = "\"{v3870}{v3872}{v3874}\""
                        let v3876 : string = @$"format!(" + v3875 + ")"
                        let v3877 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v3876 
                        let v3878 : string = "fable_library_rust::String_::fromString($0)"
                        let v3879 : string = Fable.Core.RustInterop.emitRustExpr v3877 v3878 
                        let _v3857 = v3879 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v3880 : string = "inline_colorization::color_bright_red"
                        let v3881 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v3880 
                        let v3882 : string = "&*$0"
                        let v3883 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3843 v3882 
                        let v3884 : string = "inline_colorization::color_reset"
                        let v3885 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v3884 
                        let v3886 : string = "\"{v3881}{v3883}{v3885}\""
                        let v3887 : string = @$"format!(" + v3886 + ")"
                        let v3888 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v3887 
                        let v3889 : string = "fable_library_rust::String_::fromString($0)"
                        let v3890 : string = Fable.Core.RustInterop.emitRustExpr v3888 v3889 
                        let _v3857 = v3890 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v3891 : string = "\u001b[91m"
                        let v3892 : string = method8()
                        let v3893 : string = v3891 + v3843 
                        let v3894 : string = v3893 + v3892 
                        let _v3857 = v3894 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v3895 : string = "\u001b[91m"
                        let v3896 : string = method8()
                        let v3897 : string = v3895 + v3843 
                        let v3898 : string = v3897 + v3896 
                        let _v3857 = v3898 
                        #endif
#else
                        let v3899 : string = "\u001b[91m"
                        let v3900 : string = method8()
                        let v3901 : string = v3899 + v3843 
                        let v3902 : string = v3901 + v3900 
                        let _v3857 = v3902 
                        #endif
                        let v3903 : string = _v3857 
                        let v3909 : int64 = v3405.l0
                        let v3910 : string = method9()
                        let v3911 : Mut4 = {l0 = v3910} : Mut4
                        let v3912 : string = "{ "
                        let v3913 : string = $"{v3912}"
                        let v3916 : string = v3911.l0
                        let v3917 : string = v3916 + v3913 
                        v3911.l0 <- v3917
                        let v3918 : string = "e"
                        let v3919 : string = $"{v3918}"
                        let v3922 : string = v3911.l0
                        let v3923 : string = v3922 + v3919 
                        v3911.l0 <- v3923
                        let v3924 : string = " = "
                        let v3925 : string = $"{v3924}"
                        let v3928 : string = v3911.l0
                        let v3929 : string = v3928 + v3925 
                        v3911.l0 <- v3929
                        let v3930 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v3931 : string = "format!(\"{:#?}\", $0)"
                        let v3932 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3330 v3931 
                        let v3933 : string = "fable_library_rust::String_::fromString($0)"
                        let v3934 : string = Fable.Core.RustInterop.emitRustExpr v3932 v3933 
                        let _v3930 = v3934 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v3935 : string = "format!(\"{:#?}\", $0)"
                        let v3936 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3330 v3935 
                        let v3937 : string = "fable_library_rust::String_::fromString($0)"
                        let v3938 : string = Fable.Core.RustInterop.emitRustExpr v3936 v3937 
                        let _v3930 = v3938 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v3939 : string = "format!(\"{:#?}\", $0)"
                        let v3940 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3330 v3939 
                        let v3941 : string = "fable_library_rust::String_::fromString($0)"
                        let v3942 : string = Fable.Core.RustInterop.emitRustExpr v3940 v3941 
                        let _v3930 = v3942 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v3943 : string = $"%A{v3330}"
                        let _v3930 = v3943 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v3946 : string = $"%A{v3330}"
                        let _v3930 = v3946 
                        #endif
#else
                        let v3949 : string = $"%A{v3330}"
                        let _v3930 = v3949 
                        #endif
                        let v3952 : string = _v3930 
                        let v3957 : string = $"{v3952}"
                        let v3960 : string = v3911.l0
                        let v3961 : string = v3960 + v3957 
                        v3911.l0 <- v3961
                        let v3962 : string = " }"
                        let v3963 : string = $"{v3962}"
                        let v3966 : string = v3911.l0
                        let v3967 : string = v3966 + v3963 
                        v3911.l0 <- v3967
                        let v3968 : string = v3911.l0
                        let v3969 : (unit -> string) = closure28()
                        let v3970 : string = $"{v3773} {v3903} #{v3909} %s{v3969 ()} / {v3968}"
                        let v3973 : char list = []
                        let v3974 : (char list -> (char [])) = List.toArray
                        let v3975 : (char []) = v3974 v3973
                        let v3978 : string = v3970.TrimStart v3975 
                        let v3995 : char list = []
                        let v3996 : char list = '/' :: v3995 
                        let v3999 : char list = ' ' :: v3996 
                        let v4002 : (char list -> (char [])) = List.toArray
                        let v4003 : (char []) = v4002 v3999
                        let v4006 : string = v3978.TrimEnd v4003 
                        let v4023 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v4024 : string = @"println!(""{}"", $0)"
                        Fable.Core.RustInterop.emitRustExpr v4006 v4024 
                        let _v4023 = () 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v4025 : string = @"println!(""{}"", $0)"
                        Fable.Core.RustInterop.emitRustExpr v4006 v4025 
                        let _v4023 = () 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v4026 : string = $"near_sdk::log!(\"{{}}\", $0)"
                        Fable.Core.RustInterop.emitRustExpr v4006 v4026 
                        let _v4023 = () 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        System.Console.WriteLine v4006 
                        let _v4023 = () 
                        #endif
#if FABLE_COMPILER_PYTHON
                        System.Console.WriteLine v4006 
                        let _v4023 = () 
                        #endif
#else
                        System.Console.WriteLine v4006 
                        let _v4023 = () 
                        #endif
                        _v4023 
                        let v4027 : (string -> unit) = v3344.l0
                        v4027 v4006
                    let v4028 : string = $"\u001b[4;7m{v3330}\u001b[0m"
                    let v4029 : string = "&*$0"
                    let v4030 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4028 v4029 
                    let v4031 : string = "String::from($0)"
                    let v4032 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4030 v4031 
                    v4032
                | US26_0(v2666) -> (* Ok *)
                    let v2667 : string = "fable_library_rust::String_::fromString($0)"
                    let v2668 : string = Fable.Core.RustInterop.emitRustExpr v2666 v2667 
                    let v2669 : string = "encoding_rs::UTF_8"
                    let v2670 : Ref<encoding_rs_Encoding> = Fable.Core.RustInterop.emitRustExpr () v2669 
                    let v2671 : string = "$0.encode(&*$1).0"
                    let v2672 : std_borrow_Cow<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v2670, v2668) v2671 
                    let v2673 : string = "$0.as_ref()"
                    let v2674 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr v2672 v2673 
                    let v2675 : string = "std::str::from_utf8($0)"
                    let v2676 : Result<Ref<Str>, std_str_Utf8Error> = Fable.Core.RustInterop.emitRustExpr v2674 v2675 
                    let v2677 : string = "$0.unwrap()"
                    let v2678 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2676 v2677 
                    let v2679 : string = "String::from($0)"
                    let v2680 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2678 v2679 
                    let v2681 : string = "fable_library_rust::String_::fromString($0)"
                    let v2682 : string = Fable.Core.RustInterop.emitRustExpr v2680 v2681 
                    let v2683 : string = $"! {v2682}"
                    if v5 then
                        let v2684 : bool = State.trace_state.IsNone
                        if v2684 then
                            let v2685 : US0 = US0_0
                            let struct (v2686 : Mut0, v2687 : Mut1, v2688 : Mut2, v2689 : Mut3, v2690 : int64 option) = method1(v2685)
                            let v2691 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v2686, v2687, v2688, v2689, v2690) 
                            State.trace_state <- v2691 
                            ()
                        let struct (v2696 : Mut0, v2697 : Mut1, v2698 : Mut2, v2699 : Mut3, v2700 : int64 option) = State.trace_state.Value
                        let v2711 : bool = State.trace_state.IsNone
                        if v2711 then
                            let v2712 : US0 = US0_0
                            let struct (v2713 : Mut0, v2714 : Mut1, v2715 : Mut2, v2716 : Mut3, v2717 : int64 option) = method1(v2712)
                            let v2718 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v2713, v2714, v2715, v2716, v2717) 
                            State.trace_state <- v2718 
                            ()
                        let struct (v2723 : Mut0, v2724 : Mut1, v2725 : Mut2, v2726 : Mut3, v2727 : int64 option) = State.trace_state.Value
                        let v2738 : US0 = v2726.l0
                        let v2739 : bool = v2725.l0
                        let v2740 : bool = v2739 = false
                        let v2743 : bool =
                            if v2740 then
                                false
                            else
                                let v2741 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v2738
                                let v2742 : bool = 0 >= v2741
                                v2742
                        if v2743 then
                            let v2744 : int64 = v2696.l0
                            let v2745 : int64 = v2744 + 1L
                            v2696.l0 <- v2745
                            let v2746 : bool = State.trace_state.IsNone
                            if v2746 then
                                let v2747 : US0 = US0_0
                                let struct (v2748 : Mut0, v2749 : Mut1, v2750 : Mut2, v2751 : Mut3, v2752 : int64 option) = method1(v2747)
                                let v2753 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v2748, v2749, v2750, v2751, v2752) 
                                State.trace_state <- v2753 
                                ()
                            let struct (v2758 : Mut0, v2759 : Mut1, v2760 : Mut2, v2761 : Mut3, v2762 : int64 option) = State.trace_state.Value
                            let v2773 : unit = ()
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v2774 : US3 option = None
                            let _v2774 = ref v2774 
                            match v2762 with
                            | Some x -> (
                            (fun () ->
                            (fun () ->
                            let v2775 : int64 = x
                            let v2776 : US3 = US3_0(v2775)
                            v2776 
                            )
                            |> fun x -> x () |> Some
                            ) () ) | None -> None
                            |> fun x -> _v2774.Value <- x
                            let v2777 : US3 option = _v2774.Value 
                            let v2788 : US3 = US3_1
                            let v2789 : US3 = v2777 |> Option.defaultValue v2788 
                            let v2829 : System.DateTime =
                                match v2789 with
                                | US3_1 -> (* None *)
                                    let v2825 : System.DateTime = System.DateTime.Now
                                    v2825
                                | US3_0(v2793) -> (* Some *)
                                    let v2794 : System.DateTime = System.DateTime.Now
                                    let v2797 : (System.DateTime -> int64) = _.Ticks
                                    let v2798 : int64 = v2797 v2794
                                    let v2801 : int64 = v2798 - v2793
                                    let v2802 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                    let v2803 : System.TimeSpan = v2802 v2801
                                    let v2806 : (System.TimeSpan -> int32) = _.Hours
                                    let v2807 : int32 = v2806 v2803
                                    let v2810 : (System.TimeSpan -> int32) = _.Minutes
                                    let v2811 : int32 = v2810 v2803
                                    let v2814 : (System.TimeSpan -> int32) = _.Seconds
                                    let v2815 : int32 = v2814 v2803
                                    let v2818 : (System.TimeSpan -> int32) = _.Milliseconds
                                    let v2819 : int32 = v2818 v2803
                                    let v2822 : System.DateTime = System.DateTime (1, 1, 1, v2807, v2811, v2815, v2819)
                                    v2822
                            let v2830 : string = method6()
                            let v2833 : (string -> string) = v2829.ToString
                            let v2834 : string = v2833 v2830
                            let _v2773 = v2834 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v2837 : US3 option = None
                            let _v2837 = ref v2837 
                            match v2762 with
                            | Some x -> (
                            (fun () ->
                            (fun () ->
                            let v2838 : int64 = x
                            let v2839 : US3 = US3_0(v2838)
                            v2839 
                            )
                            |> fun x -> x () |> Some
                            ) () ) | None -> None
                            |> fun x -> _v2837.Value <- x
                            let v2840 : US3 option = _v2837.Value 
                            let v2851 : US3 = US3_1
                            let v2852 : US3 = v2840 |> Option.defaultValue v2851 
                            let v2892 : System.DateTime =
                                match v2852 with
                                | US3_1 -> (* None *)
                                    let v2888 : System.DateTime = System.DateTime.Now
                                    v2888
                                | US3_0(v2856) -> (* Some *)
                                    let v2857 : System.DateTime = System.DateTime.Now
                                    let v2860 : (System.DateTime -> int64) = _.Ticks
                                    let v2861 : int64 = v2860 v2857
                                    let v2864 : int64 = v2861 - v2856
                                    let v2865 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                    let v2866 : System.TimeSpan = v2865 v2864
                                    let v2869 : (System.TimeSpan -> int32) = _.Hours
                                    let v2870 : int32 = v2869 v2866
                                    let v2873 : (System.TimeSpan -> int32) = _.Minutes
                                    let v2874 : int32 = v2873 v2866
                                    let v2877 : (System.TimeSpan -> int32) = _.Seconds
                                    let v2878 : int32 = v2877 v2866
                                    let v2881 : (System.TimeSpan -> int32) = _.Milliseconds
                                    let v2882 : int32 = v2881 v2866
                                    let v2885 : System.DateTime = System.DateTime (1, 1, 1, v2870, v2874, v2878, v2882)
                                    v2885
                            let v2893 : string = method6()
                            let v2896 : (string -> string) = v2892.ToString
                            let v2897 : string = v2896 v2893
                            let _v2773 = v2897 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v2900 : string = $"near_sdk::env::block_timestamp()"
                            let v2901 : uint64 = Fable.Core.RustInterop.emitRustExpr () v2900 
                            let v2902 : US3 option = None
                            let _v2902 = ref v2902 
                            match v2762 with
                            | Some x -> (
                            (fun () ->
                            (fun () ->
                            let v2903 : int64 = x
                            let v2904 : US3 = US3_0(v2903)
                            v2904 
                            )
                            |> fun x -> x () |> Some
                            ) () ) | None -> None
                            |> fun x -> _v2902.Value <- x
                            let v2905 : US3 option = _v2902.Value 
                            let v2916 : US3 = US3_1
                            let v2917 : US3 = v2905 |> Option.defaultValue v2916 
                            let v2926 : uint64 =
                                match v2917 with
                                | US3_1 -> (* None *)
                                    v2901
                                | US3_0(v2921) -> (* Some *)
                                    let v2922 : (int64 -> uint64) = uint64
                                    let v2923 : uint64 = v2922 v2921
                                    let v2924 : uint64 = v2901 - v2923
                                    v2924
                            let v2927 : uint64 = v2926 / 1000000000UL
                            let v2928 : uint64 = v2927 % 60UL
                            let v2929 : uint64 = v2927 / 60UL
                            let v2930 : uint64 = v2929 % 60UL
                            let v2931 : uint64 = v2927 / 3600UL
                            let v2932 : uint64 = v2931 % 24UL
                            let v2933 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
                            let v2934 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v2932, v2930, v2928) v2933 
                            let v2935 : string = "fable_library_rust::String_::fromString($0)"
                            let v2936 : string = Fable.Core.RustInterop.emitRustExpr v2934 v2935 
                            let _v2773 = v2936 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v2937 : US3 option = None
                            let _v2937 = ref v2937 
                            match v2762 with
                            | Some x -> (
                            (fun () ->
                            (fun () ->
                            let v2938 : int64 = x
                            let v2939 : US3 = US3_0(v2938)
                            v2939 
                            )
                            |> fun x -> x () |> Some
                            ) () ) | None -> None
                            |> fun x -> _v2937.Value <- x
                            let v2940 : US3 option = _v2937.Value 
                            let v2951 : US3 = US3_1
                            let v2952 : US3 = v2940 |> Option.defaultValue v2951 
                            let v2992 : System.DateTime =
                                match v2952 with
                                | US3_1 -> (* None *)
                                    let v2988 : System.DateTime = System.DateTime.Now
                                    v2988
                                | US3_0(v2956) -> (* Some *)
                                    let v2957 : System.DateTime = System.DateTime.Now
                                    let v2960 : (System.DateTime -> int64) = _.Ticks
                                    let v2961 : int64 = v2960 v2957
                                    let v2964 : int64 = v2961 - v2956
                                    let v2965 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                    let v2966 : System.TimeSpan = v2965 v2964
                                    let v2969 : (System.TimeSpan -> int32) = _.Hours
                                    let v2970 : int32 = v2969 v2966
                                    let v2973 : (System.TimeSpan -> int32) = _.Minutes
                                    let v2974 : int32 = v2973 v2966
                                    let v2977 : (System.TimeSpan -> int32) = _.Seconds
                                    let v2978 : int32 = v2977 v2966
                                    let v2981 : (System.TimeSpan -> int32) = _.Milliseconds
                                    let v2982 : int32 = v2981 v2966
                                    let v2985 : System.DateTime = System.DateTime (1, 1, 1, v2970, v2974, v2978, v2982)
                                    v2985
                            let v2993 : string = method7()
                            let v2996 : (string -> string) = v2992.ToString
                            let v2997 : string = v2996 v2993
                            let _v2773 = v2997 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v3000 : US3 option = None
                            let _v3000 = ref v3000 
                            match v2762 with
                            | Some x -> (
                            (fun () ->
                            (fun () ->
                            let v3001 : int64 = x
                            let v3002 : US3 = US3_0(v3001)
                            v3002 
                            )
                            |> fun x -> x () |> Some
                            ) () ) | None -> None
                            |> fun x -> _v3000.Value <- x
                            let v3003 : US3 option = _v3000.Value 
                            let v3014 : US3 = US3_1
                            let v3015 : US3 = v3003 |> Option.defaultValue v3014 
                            let v3055 : System.DateTime =
                                match v3015 with
                                | US3_1 -> (* None *)
                                    let v3051 : System.DateTime = System.DateTime.Now
                                    v3051
                                | US3_0(v3019) -> (* Some *)
                                    let v3020 : System.DateTime = System.DateTime.Now
                                    let v3023 : (System.DateTime -> int64) = _.Ticks
                                    let v3024 : int64 = v3023 v3020
                                    let v3027 : int64 = v3024 - v3019
                                    let v3028 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                    let v3029 : System.TimeSpan = v3028 v3027
                                    let v3032 : (System.TimeSpan -> int32) = _.Hours
                                    let v3033 : int32 = v3032 v3029
                                    let v3036 : (System.TimeSpan -> int32) = _.Minutes
                                    let v3037 : int32 = v3036 v3029
                                    let v3040 : (System.TimeSpan -> int32) = _.Seconds
                                    let v3041 : int32 = v3040 v3029
                                    let v3044 : (System.TimeSpan -> int32) = _.Milliseconds
                                    let v3045 : int32 = v3044 v3029
                                    let v3048 : System.DateTime = System.DateTime (1, 1, 1, v3033, v3037, v3041, v3045)
                                    v3048
                            let v3056 : string = method7()
                            let v3059 : (string -> string) = v3055.ToString
                            let v3060 : string = v3059 v3056
                            let _v2773 = v3060 
                            #endif
#else
                            let v3063 : US3 option = None
                            let _v3063 = ref v3063 
                            match v2762 with
                            | Some x -> (
                            (fun () ->
                            (fun () ->
                            let v3064 : int64 = x
                            let v3065 : US3 = US3_0(v3064)
                            v3065 
                            )
                            |> fun x -> x () |> Some
                            ) () ) | None -> None
                            |> fun x -> _v3063.Value <- x
                            let v3066 : US3 option = _v3063.Value 
                            let v3077 : US3 = US3_1
                            let v3078 : US3 = v3066 |> Option.defaultValue v3077 
                            let v3118 : System.DateTime =
                                match v3078 with
                                | US3_1 -> (* None *)
                                    let v3114 : System.DateTime = System.DateTime.Now
                                    v3114
                                | US3_0(v3082) -> (* Some *)
                                    let v3083 : System.DateTime = System.DateTime.Now
                                    let v3086 : (System.DateTime -> int64) = _.Ticks
                                    let v3087 : int64 = v3086 v3083
                                    let v3090 : int64 = v3087 - v3082
                                    let v3091 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                    let v3092 : System.TimeSpan = v3091 v3090
                                    let v3095 : (System.TimeSpan -> int32) = _.Hours
                                    let v3096 : int32 = v3095 v3092
                                    let v3099 : (System.TimeSpan -> int32) = _.Minutes
                                    let v3100 : int32 = v3099 v3092
                                    let v3103 : (System.TimeSpan -> int32) = _.Seconds
                                    let v3104 : int32 = v3103 v3092
                                    let v3107 : (System.TimeSpan -> int32) = _.Milliseconds
                                    let v3108 : int32 = v3107 v3092
                                    let v3111 : System.DateTime = System.DateTime (1, 1, 1, v3096, v3100, v3104, v3108)
                                    v3111
                            let v3119 : string = method7()
                            let v3122 : (string -> string) = v3118.ToString
                            let v3123 : string = v3122 v3119
                            let _v2773 = v3123 
                            #endif
                            let v3126 : string = _v2773 
                            let v3191 : string = "Verbose"
                            let v3192 : (unit -> string) = v3191.ToLower
                            let v3193 : string = v3192 ()
                            let v3196 : string = v3193.PadLeft (7, ' ')
                            let v3210 : unit = ()
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v3211 : string = "inline_colorization::color_bright_black"
                            let v3212 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v3211 
                            let v3213 : string = "&*$0"
                            let v3214 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3196 v3213 
                            let v3215 : string = "inline_colorization::color_reset"
                            let v3216 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v3215 
                            let v3217 : string = "\"{v3212}{v3214}{v3216}\""
                            let v3218 : string = @$"format!(" + v3217 + ")"
                            let v3219 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v3218 
                            let v3220 : string = "fable_library_rust::String_::fromString($0)"
                            let v3221 : string = Fable.Core.RustInterop.emitRustExpr v3219 v3220 
                            let _v3210 = v3221 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v3222 : string = "inline_colorization::color_bright_black"
                            let v3223 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v3222 
                            let v3224 : string = "&*$0"
                            let v3225 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3196 v3224 
                            let v3226 : string = "inline_colorization::color_reset"
                            let v3227 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v3226 
                            let v3228 : string = "\"{v3223}{v3225}{v3227}\""
                            let v3229 : string = @$"format!(" + v3228 + ")"
                            let v3230 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v3229 
                            let v3231 : string = "fable_library_rust::String_::fromString($0)"
                            let v3232 : string = Fable.Core.RustInterop.emitRustExpr v3230 v3231 
                            let _v3210 = v3232 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v3233 : string = "inline_colorization::color_bright_black"
                            let v3234 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v3233 
                            let v3235 : string = "&*$0"
                            let v3236 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3196 v3235 
                            let v3237 : string = "inline_colorization::color_reset"
                            let v3238 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v3237 
                            let v3239 : string = "\"{v3234}{v3236}{v3238}\""
                            let v3240 : string = @$"format!(" + v3239 + ")"
                            let v3241 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v3240 
                            let v3242 : string = "fable_library_rust::String_::fromString($0)"
                            let v3243 : string = Fable.Core.RustInterop.emitRustExpr v3241 v3242 
                            let _v3210 = v3243 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v3244 : string = "\u001b[90m"
                            let v3245 : string = method8()
                            let v3246 : string = v3244 + v3196 
                            let v3247 : string = v3246 + v3245 
                            let _v3210 = v3247 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v3248 : string = "\u001b[90m"
                            let v3249 : string = method8()
                            let v3250 : string = v3248 + v3196 
                            let v3251 : string = v3250 + v3249 
                            let _v3210 = v3251 
                            #endif
#else
                            let v3252 : string = "\u001b[90m"
                            let v3253 : string = method8()
                            let v3254 : string = v3252 + v3196 
                            let v3255 : string = v3254 + v3253 
                            let _v3210 = v3255 
                            #endif
                            let v3256 : string = _v3210 
                            let v3262 : int64 = v2758.l0
                            let v3263 : string = method9()
                            let v3264 : Mut4 = {l0 = v3263} : Mut4
                            let v3265 : string = v3264.l0
                            let v3266 : (unit -> string) = closure29(v2683)
                            let v3267 : string = $"{v3126} {v3256} #{v3262} %s{v3266 ()} / {v3265}"
                            let v3270 : char list = []
                            let v3271 : (char list -> (char [])) = List.toArray
                            let v3272 : (char []) = v3271 v3270
                            let v3275 : string = v3267.TrimStart v3272 
                            let v3292 : char list = []
                            let v3293 : char list = '/' :: v3292 
                            let v3296 : char list = ' ' :: v3293 
                            let v3299 : (char list -> (char [])) = List.toArray
                            let v3300 : (char []) = v3299 v3296
                            let v3303 : string = v3275.TrimEnd v3300 
                            let v3320 : unit = ()
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v3321 : string = @"println!(""{}"", $0)"
                            Fable.Core.RustInterop.emitRustExpr v3303 v3321 
                            let _v3320 = () 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v3322 : string = @"println!(""{}"", $0)"
                            Fable.Core.RustInterop.emitRustExpr v3303 v3322 
                            let _v3320 = () 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v3323 : string = $"near_sdk::log!(\"{{}}\", $0)"
                            Fable.Core.RustInterop.emitRustExpr v3303 v3323 
                            let _v3320 = () 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            System.Console.WriteLine v3303 
                            let _v3320 = () 
                            #endif
#if FABLE_COMPILER_PYTHON
                            System.Console.WriteLine v3303 
                            let _v3320 = () 
                            #endif
#else
                            System.Console.WriteLine v3303 
                            let _v3320 = () 
                            #endif
                            _v3320 
                            let v3324 : (string -> unit) = v2697.l0
                            v3324 v3303
                    else
                        v2683 |> System.Console.WriteLine
                        ()
                    let v3325 : string = $"\u001b[4;7m{v2680}\u001b[0m"
                    let v3326 : string = "&*$0"
                    let v3327 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3325 v3326 
                    let v3328 : string = "String::from($0)"
                    let v3329 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3327 v3328 
                    v3329
            let v4035 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = method70(v2658)
            let v4036 : string = "v4035.lock()"
            let v4037 : Result<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v4036 
            let v4038 : string = "$0.unwrap()"
            let v4039 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v4037 v4038 
            let v4040 : string = "&$0"
            let v4041 : Ref<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v4039 v4040 
            let v4042 : string = "$0.send($1)"
            let v4043 : Result<unit, std_sync_mpsc_SendError<std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v4041, v4034) v4042 
            let v4044 : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) = method71()
            let v4045 : string = "$0.map_err(|x| $1(x))"
            let v4046 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v4043, v4044) v4045 
            let v4047 : string = "$0"
            let v4048 : core_ops_Try<unit> = Fable.Core.RustInterop.emitRustExpr v4046 v4047 
            let v4049 : string = "true; $0 }); //"
            let v4050 : bool = Fable.Core.RustInterop.emitRustExpr v4048 v4049 
            let v4051 : string = "_result.map_err(|x| x.into())"
            let v4052 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr () v4051 
            let v4053 : Result<unit, string> = method72(v4052)
            let v4054 : string = v2639 + v2640 
            let v4055 : string = "v4053 " + v4054 + "); " + v2639 + " // rust.fix_closure'"
            Fable.Core.RustInterop.emitRustExpr () v4055 
            let v4056 : string = "__result"
            let v4057 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v4056 
            let v4058 : US27 option = None
            let _v4058 = ref v4058 
            match v4 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v4059 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) = x
            let v4060 : US27 = US27_0(v4059)
            v4060 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v4058.Value <- x
            let v4061 : US27 option = _v4058.Value 
            let v4072 : US27 = US27_1
            let v4073 : US27 = v4061 |> Option.defaultValue v4072 
            match v4073 with
            | US27_1 -> (* None *)
                ()
            | US27_0(v4077) -> (* Some *)
                let v4078 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = method73(v1215)
                let v4079 : string = "v4078.lock()"
                let v4080 : Result<std_sync_MutexGuard<std_process_ChildStdin option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_ChildStdin option>>> = Fable.Core.RustInterop.emitRustExpr () v4079 
                let v4081 : string = "$0.unwrap()"
                let v4082 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v4080 v4081 
                let v4083 : string = "true; let mut v4082 = v4082"
                let v4084 : bool = Fable.Core.RustInterop.emitRustExpr () v4083 
                let v4085 : string = "&mut $0"
                let v4086 : Ref<Mut<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v4082 v4085 
                let v4087 : string = "Option::take($0)"
                let v4088 : std_process_ChildStdin option = Fable.Core.RustInterop.emitRustExpr v4086 v4087 
                let v4089 : string = "true; let _result = v4088.map(|x| { //"
                let v4090 : bool = Fable.Core.RustInterop.emitRustExpr () v4089 
                let v4091 : string = "x"
                let v4092 : std_process_ChildStdin = Fable.Core.RustInterop.emitRustExpr () v4091 
                let v4093 : string = "std::sync::Mutex::new($0)"
                let v4094 : std_sync_Mutex<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v4092 v4093 
                let v4095 : string = "std::sync::Arc::new($0)"
                let v4096 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = Fable.Core.RustInterop.emitRustExpr v4094 v4095 
                let v4097 : string = "true; $0 })"
                let v4098 : bool = Fable.Core.RustInterop.emitRustExpr v4096 v4097 
                let v4099 : string = "_result"
                let v4100 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> option = Fable.Core.RustInterop.emitRustExpr () v4099 
                let v4101 : US28 option = None
                let _v4101 = ref v4101 
                match v4100 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v4102 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = x
                let v4103 : US28 = US28_0(v4102)
                v4103 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v4101.Value <- x
                let v4104 : US28 option = _v4101.Value 
                let v4115 : US28 = US28_1
                let v4116 : US28 = v4104 |> Option.defaultValue v4115 
                match v4116 with
                | US28_1 -> (* None *)
                    ()
                | US28_0(v4120) -> (* Some *)
                    v4077 v4120
                    let v4121 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = method74(v4120)
                    let v4122 : string = "v4121.lock()"
                    let v4123 : Result<std_sync_MutexGuard<std_process_ChildStdin>, std_sync_PoisonError<std_sync_MutexGuard<std_process_ChildStdin>>> = Fable.Core.RustInterop.emitRustExpr () v4122 
                    let v4124 : string = "$0.unwrap()"
                    let v4125 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v4123 v4124 
                    let v4126 : std_sync_MutexGuard<std_process_ChildStdin> = method75(v4125)
                    let v4127 : string = "true; let mut v4126 = v4126"
                    let v4128 : bool = Fable.Core.RustInterop.emitRustExpr () v4127 
                    let v4129 : string = "true; std::io::Write::flush(&mut *$0).unwrap()"
                    let v4130 : bool = Fable.Core.RustInterop.emitRustExpr v4126 v4129 
                    ()
            let v4131 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = method67(v1133)
            let v4132 : string = "v4131.lock()"
            let v4133 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v4132 
            let v4134 : string = "$0.unwrap()"
            let v4135 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v4133 v4134 
            let v4136 : string = "true; let mut v4135 = v4135"
            let v4137 : bool = Fable.Core.RustInterop.emitRustExpr () v4136 
            let v4138 : string = "&mut $0"
            let v4139 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v4135 v4138 
            let v4140 : string = "Option::take($0)"
            let v4141 : std_process_Child option = Fable.Core.RustInterop.emitRustExpr v4139 v4140 
            let v4142 : string = "$0.unwrap()"
            let v4143 : std_process_Child = Fable.Core.RustInterop.emitRustExpr v4141 v4142 
            let v4144 : string = "$0.wait_with_output()"
            let v4145 : Result<std_process_Output, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v4143 v4144 
            let v4146 : (std_io_Error -> std_string_String) = method30()
            let v4147 : string = "$0.map_err(|x| $1(x))"
            let v4148 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v4145, v4146) v4147 
            let v4149 : std_thread_JoinHandle<Result<unit, string>> = method76(v4057)
            let v4150 : string = "v4149"
            let v4151 : string = v4150 + v2639 
            let v4152 : string = v4151 + v2639 
            let v4153 : std_thread_JoinHandle<Result<unit, string>> = method76(v2644)
            let v4154 : string = "v4153"
            let v4155 : string = ", "
            let v4156 : string = v4154 + v4155 
            let v4157 : string = v4156 + v4152 
            let v4158 : string = "vec![" + v4157 + "]"
            let v4159 : Vec<std_thread_JoinHandle<Result<unit, string>>> = Fable.Core.RustInterop.emitRustExpr () v4158 
            let v4160 : string = "true; v4159.into_iter().for_each(|x| { //"
            let v4161 : bool = Fable.Core.RustInterop.emitRustExpr () v4160 
            let v4162 : string = "x"
            let v4163 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v4162 
            let v4164 : string = "std::thread::JoinHandle::join($0)"
            let v4165 : Result<Result<unit, string>, Box<LifetimeRef<Dyn<LifetimeJoin<core_any_Any, LifetimeRef<LifetimeJoin<StaticLifetime, Send<StaticLifetime>>>>>>>> = Fable.Core.RustInterop.emitRustExpr v4163 v4164 
            let v4166 : string = "$0.unwrap()"
            let v4167 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v4165 v4166 
            let v4168 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v4167 v4168 
            let v4169 : string = "true; () }}); { //"
            let v4170 : bool = Fable.Core.RustInterop.emitRustExpr () v4169 
            let v4171 : (std_process_Output -> US29) = closure31()
            let v4172 : (std_string_String -> US29) = closure32()
            let v4173 : US29 = match v4148 with Ok x -> v4171 x | Error x -> v4172 x
            match v4173 with
            | US29_1(v4214) -> (* Error *)
                let v4215 : bool = State.trace_state.IsNone
                if v4215 then
                    let v4216 : US0 = US0_0
                    let struct (v4217 : Mut0, v4218 : Mut1, v4219 : Mut2, v4220 : Mut3, v4221 : int64 option) = method1(v4216)
                    let v4222 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v4217, v4218, v4219, v4220, v4221) 
                    State.trace_state <- v4222 
                    ()
                let struct (v4227 : Mut0, v4228 : Mut1, v4229 : Mut2, v4230 : Mut3, v4231 : int64 option) = State.trace_state.Value
                let v4242 : bool = State.trace_state.IsNone
                if v4242 then
                    let v4243 : US0 = US0_0
                    let struct (v4244 : Mut0, v4245 : Mut1, v4246 : Mut2, v4247 : Mut3, v4248 : int64 option) = method1(v4243)
                    let v4249 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v4244, v4245, v4246, v4247, v4248) 
                    State.trace_state <- v4249 
                    ()
                let struct (v4254 : Mut0, v4255 : Mut1, v4256 : Mut2, v4257 : Mut3, v4258 : int64 option) = State.trace_state.Value
                let v4269 : US0 = v4257.l0
                let v4270 : bool = v4256.l0
                let v4271 : bool = v4270 = false
                let v4274 : bool =
                    if v4271 then
                        false
                    else
                        let v4272 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v4269
                        let v4273 : bool = 4 >= v4272
                        v4273
                if v4274 then
                    let v4275 : int64 = v4227.l0
                    let v4276 : int64 = v4275 + 1L
                    v4227.l0 <- v4276
                    let v4277 : bool = State.trace_state.IsNone
                    if v4277 then
                        let v4278 : US0 = US0_0
                        let struct (v4279 : Mut0, v4280 : Mut1, v4281 : Mut2, v4282 : Mut3, v4283 : int64 option) = method1(v4278)
                        let v4284 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v4279, v4280, v4281, v4282, v4283) 
                        State.trace_state <- v4284 
                        ()
                    let struct (v4289 : Mut0, v4290 : Mut1, v4291 : Mut2, v4292 : Mut3, v4293 : int64 option) = State.trace_state.Value
                    let v4304 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4305 : US3 option = None
                    let _v4305 = ref v4305 
                    match v4293 with
                    | Some x -> (
                    (fun () ->
                    (fun () ->
                    let v4306 : int64 = x
                    let v4307 : US3 = US3_0(v4306)
                    v4307 
                    )
                    |> fun x -> x () |> Some
                    ) () ) | None -> None
                    |> fun x -> _v4305.Value <- x
                    let v4308 : US3 option = _v4305.Value 
                    let v4319 : US3 = US3_1
                    let v4320 : US3 = v4308 |> Option.defaultValue v4319 
                    let v4360 : System.DateTime =
                        match v4320 with
                        | US3_1 -> (* None *)
                            let v4356 : System.DateTime = System.DateTime.Now
                            v4356
                        | US3_0(v4324) -> (* Some *)
                            let v4325 : System.DateTime = System.DateTime.Now
                            let v4328 : (System.DateTime -> int64) = _.Ticks
                            let v4329 : int64 = v4328 v4325
                            let v4332 : int64 = v4329 - v4324
                            let v4333 : (int64 -> System.TimeSpan) = System.TimeSpan 
                            let v4334 : System.TimeSpan = v4333 v4332
                            let v4337 : (System.TimeSpan -> int32) = _.Hours
                            let v4338 : int32 = v4337 v4334
                            let v4341 : (System.TimeSpan -> int32) = _.Minutes
                            let v4342 : int32 = v4341 v4334
                            let v4345 : (System.TimeSpan -> int32) = _.Seconds
                            let v4346 : int32 = v4345 v4334
                            let v4349 : (System.TimeSpan -> int32) = _.Milliseconds
                            let v4350 : int32 = v4349 v4334
                            let v4353 : System.DateTime = System.DateTime (1, 1, 1, v4338, v4342, v4346, v4350)
                            v4353
                    let v4361 : string = method6()
                    let v4364 : (string -> string) = v4360.ToString
                    let v4365 : string = v4364 v4361
                    let _v4304 = v4365 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4368 : US3 option = None
                    let _v4368 = ref v4368 
                    match v4293 with
                    | Some x -> (
                    (fun () ->
                    (fun () ->
                    let v4369 : int64 = x
                    let v4370 : US3 = US3_0(v4369)
                    v4370 
                    )
                    |> fun x -> x () |> Some
                    ) () ) | None -> None
                    |> fun x -> _v4368.Value <- x
                    let v4371 : US3 option = _v4368.Value 
                    let v4382 : US3 = US3_1
                    let v4383 : US3 = v4371 |> Option.defaultValue v4382 
                    let v4423 : System.DateTime =
                        match v4383 with
                        | US3_1 -> (* None *)
                            let v4419 : System.DateTime = System.DateTime.Now
                            v4419
                        | US3_0(v4387) -> (* Some *)
                            let v4388 : System.DateTime = System.DateTime.Now
                            let v4391 : (System.DateTime -> int64) = _.Ticks
                            let v4392 : int64 = v4391 v4388
                            let v4395 : int64 = v4392 - v4387
                            let v4396 : (int64 -> System.TimeSpan) = System.TimeSpan 
                            let v4397 : System.TimeSpan = v4396 v4395
                            let v4400 : (System.TimeSpan -> int32) = _.Hours
                            let v4401 : int32 = v4400 v4397
                            let v4404 : (System.TimeSpan -> int32) = _.Minutes
                            let v4405 : int32 = v4404 v4397
                            let v4408 : (System.TimeSpan -> int32) = _.Seconds
                            let v4409 : int32 = v4408 v4397
                            let v4412 : (System.TimeSpan -> int32) = _.Milliseconds
                            let v4413 : int32 = v4412 v4397
                            let v4416 : System.DateTime = System.DateTime (1, 1, 1, v4401, v4405, v4409, v4413)
                            v4416
                    let v4424 : string = method6()
                    let v4427 : (string -> string) = v4423.ToString
                    let v4428 : string = v4427 v4424
                    let _v4304 = v4428 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4431 : string = $"near_sdk::env::block_timestamp()"
                    let v4432 : uint64 = Fable.Core.RustInterop.emitRustExpr () v4431 
                    let v4433 : US3 option = None
                    let _v4433 = ref v4433 
                    match v4293 with
                    | Some x -> (
                    (fun () ->
                    (fun () ->
                    let v4434 : int64 = x
                    let v4435 : US3 = US3_0(v4434)
                    v4435 
                    )
                    |> fun x -> x () |> Some
                    ) () ) | None -> None
                    |> fun x -> _v4433.Value <- x
                    let v4436 : US3 option = _v4433.Value 
                    let v4447 : US3 = US3_1
                    let v4448 : US3 = v4436 |> Option.defaultValue v4447 
                    let v4457 : uint64 =
                        match v4448 with
                        | US3_1 -> (* None *)
                            v4432
                        | US3_0(v4452) -> (* Some *)
                            let v4453 : (int64 -> uint64) = uint64
                            let v4454 : uint64 = v4453 v4452
                            let v4455 : uint64 = v4432 - v4454
                            v4455
                    let v4458 : uint64 = v4457 / 1000000000UL
                    let v4459 : uint64 = v4458 % 60UL
                    let v4460 : uint64 = v4458 / 60UL
                    let v4461 : uint64 = v4460 % 60UL
                    let v4462 : uint64 = v4458 / 3600UL
                    let v4463 : uint64 = v4462 % 24UL
                    let v4464 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
                    let v4465 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v4463, v4461, v4459) v4464 
                    let v4466 : string = "fable_library_rust::String_::fromString($0)"
                    let v4467 : string = Fable.Core.RustInterop.emitRustExpr v4465 v4466 
                    let _v4304 = v4467 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4468 : US3 option = None
                    let _v4468 = ref v4468 
                    match v4293 with
                    | Some x -> (
                    (fun () ->
                    (fun () ->
                    let v4469 : int64 = x
                    let v4470 : US3 = US3_0(v4469)
                    v4470 
                    )
                    |> fun x -> x () |> Some
                    ) () ) | None -> None
                    |> fun x -> _v4468.Value <- x
                    let v4471 : US3 option = _v4468.Value 
                    let v4482 : US3 = US3_1
                    let v4483 : US3 = v4471 |> Option.defaultValue v4482 
                    let v4523 : System.DateTime =
                        match v4483 with
                        | US3_1 -> (* None *)
                            let v4519 : System.DateTime = System.DateTime.Now
                            v4519
                        | US3_0(v4487) -> (* Some *)
                            let v4488 : System.DateTime = System.DateTime.Now
                            let v4491 : (System.DateTime -> int64) = _.Ticks
                            let v4492 : int64 = v4491 v4488
                            let v4495 : int64 = v4492 - v4487
                            let v4496 : (int64 -> System.TimeSpan) = System.TimeSpan 
                            let v4497 : System.TimeSpan = v4496 v4495
                            let v4500 : (System.TimeSpan -> int32) = _.Hours
                            let v4501 : int32 = v4500 v4497
                            let v4504 : (System.TimeSpan -> int32) = _.Minutes
                            let v4505 : int32 = v4504 v4497
                            let v4508 : (System.TimeSpan -> int32) = _.Seconds
                            let v4509 : int32 = v4508 v4497
                            let v4512 : (System.TimeSpan -> int32) = _.Milliseconds
                            let v4513 : int32 = v4512 v4497
                            let v4516 : System.DateTime = System.DateTime (1, 1, 1, v4501, v4505, v4509, v4513)
                            v4516
                    let v4524 : string = method7()
                    let v4527 : (string -> string) = v4523.ToString
                    let v4528 : string = v4527 v4524
                    let _v4304 = v4528 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4531 : US3 option = None
                    let _v4531 = ref v4531 
                    match v4293 with
                    | Some x -> (
                    (fun () ->
                    (fun () ->
                    let v4532 : int64 = x
                    let v4533 : US3 = US3_0(v4532)
                    v4533 
                    )
                    |> fun x -> x () |> Some
                    ) () ) | None -> None
                    |> fun x -> _v4531.Value <- x
                    let v4534 : US3 option = _v4531.Value 
                    let v4545 : US3 = US3_1
                    let v4546 : US3 = v4534 |> Option.defaultValue v4545 
                    let v4586 : System.DateTime =
                        match v4546 with
                        | US3_1 -> (* None *)
                            let v4582 : System.DateTime = System.DateTime.Now
                            v4582
                        | US3_0(v4550) -> (* Some *)
                            let v4551 : System.DateTime = System.DateTime.Now
                            let v4554 : (System.DateTime -> int64) = _.Ticks
                            let v4555 : int64 = v4554 v4551
                            let v4558 : int64 = v4555 - v4550
                            let v4559 : (int64 -> System.TimeSpan) = System.TimeSpan 
                            let v4560 : System.TimeSpan = v4559 v4558
                            let v4563 : (System.TimeSpan -> int32) = _.Hours
                            let v4564 : int32 = v4563 v4560
                            let v4567 : (System.TimeSpan -> int32) = _.Minutes
                            let v4568 : int32 = v4567 v4560
                            let v4571 : (System.TimeSpan -> int32) = _.Seconds
                            let v4572 : int32 = v4571 v4560
                            let v4575 : (System.TimeSpan -> int32) = _.Milliseconds
                            let v4576 : int32 = v4575 v4560
                            let v4579 : System.DateTime = System.DateTime (1, 1, 1, v4564, v4568, v4572, v4576)
                            v4579
                    let v4587 : string = method7()
                    let v4590 : (string -> string) = v4586.ToString
                    let v4591 : string = v4590 v4587
                    let _v4304 = v4591 
                    #endif
#else
                    let v4594 : US3 option = None
                    let _v4594 = ref v4594 
                    match v4293 with
                    | Some x -> (
                    (fun () ->
                    (fun () ->
                    let v4595 : int64 = x
                    let v4596 : US3 = US3_0(v4595)
                    v4596 
                    )
                    |> fun x -> x () |> Some
                    ) () ) | None -> None
                    |> fun x -> _v4594.Value <- x
                    let v4597 : US3 option = _v4594.Value 
                    let v4608 : US3 = US3_1
                    let v4609 : US3 = v4597 |> Option.defaultValue v4608 
                    let v4649 : System.DateTime =
                        match v4609 with
                        | US3_1 -> (* None *)
                            let v4645 : System.DateTime = System.DateTime.Now
                            v4645
                        | US3_0(v4613) -> (* Some *)
                            let v4614 : System.DateTime = System.DateTime.Now
                            let v4617 : (System.DateTime -> int64) = _.Ticks
                            let v4618 : int64 = v4617 v4614
                            let v4621 : int64 = v4618 - v4613
                            let v4622 : (int64 -> System.TimeSpan) = System.TimeSpan 
                            let v4623 : System.TimeSpan = v4622 v4621
                            let v4626 : (System.TimeSpan -> int32) = _.Hours
                            let v4627 : int32 = v4626 v4623
                            let v4630 : (System.TimeSpan -> int32) = _.Minutes
                            let v4631 : int32 = v4630 v4623
                            let v4634 : (System.TimeSpan -> int32) = _.Seconds
                            let v4635 : int32 = v4634 v4623
                            let v4638 : (System.TimeSpan -> int32) = _.Milliseconds
                            let v4639 : int32 = v4638 v4623
                            let v4642 : System.DateTime = System.DateTime (1, 1, 1, v4627, v4631, v4635, v4639)
                            v4642
                    let v4650 : string = method7()
                    let v4653 : (string -> string) = v4649.ToString
                    let v4654 : string = v4653 v4650
                    let _v4304 = v4654 
                    #endif
                    let v4657 : string = _v4304 
                    let v4722 : string = "Critical"
                    let v4723 : (unit -> string) = v4722.ToLower
                    let v4724 : string = v4723 ()
                    let v4727 : string = v4724.PadLeft (7, ' ')
                    let v4741 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4742 : string = "inline_colorization::color_bright_red"
                    let v4743 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v4742 
                    let v4744 : string = "&*$0"
                    let v4745 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4727 v4744 
                    let v4746 : string = "inline_colorization::color_reset"
                    let v4747 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v4746 
                    let v4748 : string = "\"{v4743}{v4745}{v4747}\""
                    let v4749 : string = @$"format!(" + v4748 + ")"
                    let v4750 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v4749 
                    let v4751 : string = "fable_library_rust::String_::fromString($0)"
                    let v4752 : string = Fable.Core.RustInterop.emitRustExpr v4750 v4751 
                    let _v4741 = v4752 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4753 : string = "inline_colorization::color_bright_red"
                    let v4754 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v4753 
                    let v4755 : string = "&*$0"
                    let v4756 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4727 v4755 
                    let v4757 : string = "inline_colorization::color_reset"
                    let v4758 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v4757 
                    let v4759 : string = "\"{v4754}{v4756}{v4758}\""
                    let v4760 : string = @$"format!(" + v4759 + ")"
                    let v4761 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v4760 
                    let v4762 : string = "fable_library_rust::String_::fromString($0)"
                    let v4763 : string = Fable.Core.RustInterop.emitRustExpr v4761 v4762 
                    let _v4741 = v4763 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4764 : string = "inline_colorization::color_bright_red"
                    let v4765 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v4764 
                    let v4766 : string = "&*$0"
                    let v4767 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4727 v4766 
                    let v4768 : string = "inline_colorization::color_reset"
                    let v4769 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v4768 
                    let v4770 : string = "\"{v4765}{v4767}{v4769}\""
                    let v4771 : string = @$"format!(" + v4770 + ")"
                    let v4772 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v4771 
                    let v4773 : string = "fable_library_rust::String_::fromString($0)"
                    let v4774 : string = Fable.Core.RustInterop.emitRustExpr v4772 v4773 
                    let _v4741 = v4774 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4775 : string = "\u001b[91m"
                    let v4776 : string = method8()
                    let v4777 : string = v4775 + v4727 
                    let v4778 : string = v4777 + v4776 
                    let _v4741 = v4778 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4779 : string = "\u001b[91m"
                    let v4780 : string = method8()
                    let v4781 : string = v4779 + v4727 
                    let v4782 : string = v4781 + v4780 
                    let _v4741 = v4782 
                    #endif
#else
                    let v4783 : string = "\u001b[91m"
                    let v4784 : string = method8()
                    let v4785 : string = v4783 + v4727 
                    let v4786 : string = v4785 + v4784 
                    let _v4741 = v4786 
                    #endif
                    let v4787 : string = _v4741 
                    let v4793 : int64 = v4289.l0
                    let v4794 : string = method9()
                    let v4795 : Mut4 = {l0 = v4794} : Mut4
                    let v4796 : string = "{ "
                    let v4797 : string = $"{v4796}"
                    let v4800 : string = v4795.l0
                    let v4801 : string = v4800 + v4797 
                    v4795.l0 <- v4801
                    let v4802 : string = "error"
                    let v4803 : string = $"{v4802}"
                    let v4806 : string = v4795.l0
                    let v4807 : string = v4806 + v4803 
                    v4795.l0 <- v4807
                    let v4808 : string = " = "
                    let v4809 : string = $"{v4808}"
                    let v4812 : string = v4795.l0
                    let v4813 : string = v4812 + v4809 
                    v4795.l0 <- v4813
                    let v4814 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4815 : string = "format!(\"{:#?}\", $0)"
                    let v4816 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4214 v4815 
                    let v4817 : string = "fable_library_rust::String_::fromString($0)"
                    let v4818 : string = Fable.Core.RustInterop.emitRustExpr v4816 v4817 
                    let _v4814 = v4818 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4819 : string = "format!(\"{:#?}\", $0)"
                    let v4820 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4214 v4819 
                    let v4821 : string = "fable_library_rust::String_::fromString($0)"
                    let v4822 : string = Fable.Core.RustInterop.emitRustExpr v4820 v4821 
                    let _v4814 = v4822 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4823 : string = "format!(\"{:#?}\", $0)"
                    let v4824 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4214 v4823 
                    let v4825 : string = "fable_library_rust::String_::fromString($0)"
                    let v4826 : string = Fable.Core.RustInterop.emitRustExpr v4824 v4825 
                    let _v4814 = v4826 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4827 : string = $"%A{v4214}"
                    let _v4814 = v4827 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4830 : string = $"%A{v4214}"
                    let _v4814 = v4830 
                    #endif
#else
                    let v4833 : string = $"%A{v4214}"
                    let _v4814 = v4833 
                    #endif
                    let v4836 : string = _v4814 
                    let v4841 : string = $"{v4836}"
                    let v4844 : string = v4795.l0
                    let v4845 : string = v4844 + v4841 
                    v4795.l0 <- v4845
                    let v4846 : string = " }"
                    let v4847 : string = $"{v4846}"
                    let v4850 : string = v4795.l0
                    let v4851 : string = v4850 + v4847 
                    v4795.l0 <- v4851
                    let v4852 : string = v4795.l0
                    let v4853 : (unit -> string) = closure33()
                    let v4854 : string = $"{v4657} {v4787} #{v4793} %s{v4853 ()} / {v4852}"
                    let v4857 : char list = []
                    let v4858 : (char list -> (char [])) = List.toArray
                    let v4859 : (char []) = v4858 v4857
                    let v4862 : string = v4854.TrimStart v4859 
                    let v4879 : char list = []
                    let v4880 : char list = '/' :: v4879 
                    let v4883 : char list = ' ' :: v4880 
                    let v4886 : (char list -> (char [])) = List.toArray
                    let v4887 : (char []) = v4886 v4883
                    let v4890 : string = v4862.TrimEnd v4887 
                    let v4907 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4908 : string = @"println!(""{}"", $0)"
                    Fable.Core.RustInterop.emitRustExpr v4890 v4908 
                    let _v4907 = () 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4909 : string = @"println!(""{}"", $0)"
                    Fable.Core.RustInterop.emitRustExpr v4890 v4909 
                    let _v4907 = () 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4910 : string = $"near_sdk::log!(\"{{}}\", $0)"
                    Fable.Core.RustInterop.emitRustExpr v4890 v4910 
                    let _v4907 = () 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    System.Console.WriteLine v4890 
                    let _v4907 = () 
                    #endif
#if FABLE_COMPILER_PYTHON
                    System.Console.WriteLine v4890 
                    let _v4907 = () 
                    #endif
#else
                    System.Console.WriteLine v4890 
                    let _v4907 = () 
                    #endif
                    _v4907 
                    let v4911 : (string -> unit) = v4228.l0
                    v4911 v4890
                let v4912 : US5 = US5_0(v4214)
                let v4913 : US25 = US25_1
                struct (-2, v4912, v4913)
            | US29_0(v4174) -> (* Ok *)
                let v4175 : string = "$0.status"
                let v4176 : std_process_ExitStatus = Fable.Core.RustInterop.emitRustExpr v4174 v4175 
                let v4177 : string = "$0.code()"
                let v4178 : int32 option = Fable.Core.RustInterop.emitRustExpr v4176 v4177 
                let v4179 : US30 option = None
                let _v4179 = ref v4179 
                match v4178 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v4180 : int32 = x
                let v4181 : US30 = US30_0(v4180)
                v4181 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v4179.Value <- x
                let v4182 : US30 option = _v4179.Value 
                let v4193 : US30 = US30_1
                let v4194 : US30 = v4182 |> Option.defaultValue v4193 
                match v4194 with
                | US30_1 -> (* None *)
                    let v4201 : string = "&*$0"
                    let v4202 : string = "runtime.execute_with_options / exit_code=None"
                    let v4203 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4202 v4201 
                    let v4204 : string = "String::from($0)"
                    let v4205 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4203 v4204 
                    let v4206 : US5 = US5_0(v4205)
                    let v4207 : US25 = US25_0(v1230)
                    struct (-1, v4206, v4207)
                | US30_0(v4198) -> (* Some *)
                    let v4199 : US5 = US5_1
                    let v4200 : US25 = US25_0(v1230)
                    struct (v4198, v4199, v4200)
    let v5634 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option =
        match v5627 with
        | US25_1 -> (* None *)
            let v5632 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option = None
            v5632
        | US25_0(v5628) -> (* Some *)
            let v5629 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option = Some v5628 
            v5629
    let v5635 : string = "true; let _result = v5634.map(|x| { //"
    let v5636 : bool = Fable.Core.RustInterop.emitRustExpr () v5635 
    let v5637 : string = "x"
    let v5638 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v5637 
    let v5639 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = method77(v5638)
    let v5640 : string = "v5639.lock()"
    let v5641 : Result<std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v5640 
    let v5642 : string = "$0.unwrap()"
    let v5643 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v5641 v5642 
    let v5644 : string = "v5643.iter()"
    let v5645 : _ = Fable.Core.RustInterop.emitRustExpr () v5644 
    let v5646 : string = "v5645.collect::<Vec<_>>()"
    let v5647 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v5646 
    let v5648 : string = "true; let _result : Vec<_> = v5647.into_iter().map(|x| { //"
    let v5649 : bool = Fable.Core.RustInterop.emitRustExpr () v5648 
    let v5650 : string = "x"
    let v5651 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v5650 
    let v5652 : string = "fable_library_rust::String_::fromString($0)"
    let v5653 : string = Fable.Core.RustInterop.emitRustExpr v5651 v5652 
    let v5654 : string = "true; $0 }).collect::<Vec<_>>()"
    let v5655 : bool = Fable.Core.RustInterop.emitRustExpr v5653 v5654 
    let v5656 : string = "_result"
    let v5657 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v5656 
    let v5658 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v5659 : (string []) = Fable.Core.RustInterop.emitRustExpr v5657 v5658 
    let v5660 : string seq = v5659 |> Seq.ofArray
    let v5663 : (string -> (string seq -> string)) = String.concat
    let v5664 : string = "\n"
    let v5665 : (string seq -> string) = v5663 v5664
    let v5666 : string = v5665 v5660
    let v5669 : string = "true; $0 })"
    let v5670 : bool = Fable.Core.RustInterop.emitRustExpr v5666 v5669 
    let v5671 : string = "_result"
    let v5672 : string option = Fable.Core.RustInterop.emitRustExpr () v5671 
    let v5679 : US1 =
        match v5626 with
        | US5_1 -> (* None *)
            US1_1
        | US5_0(v5673) -> (* Some *)
            let v5674 : string = "fable_library_rust::String_::fromString($0)"
            let v5675 : string = Fable.Core.RustInterop.emitRustExpr v5673 v5674 
            US1_0(v5675)
    let v5683 : string =
        match v5679 with
        | US1_1 -> (* None *)
            let v5681 : string = ""
            v5681
        | US1_0(v5680) -> (* Some *)
            v5680
    let v5684 : string = v5672 |> Option.defaultValue v5683 
    let v5687 : bool = State.trace_state.IsNone
    if v5687 then
        let v5688 : US0 = US0_0
        let struct (v5689 : Mut0, v5690 : Mut1, v5691 : Mut2, v5692 : Mut3, v5693 : int64 option) = method1(v5688)
        let v5694 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v5689, v5690, v5691, v5692, v5693) 
        State.trace_state <- v5694 
        ()
    let struct (v5699 : Mut0, v5700 : Mut1, v5701 : Mut2, v5702 : Mut3, v5703 : int64 option) = State.trace_state.Value
    let v5714 : bool = State.trace_state.IsNone
    if v5714 then
        let v5715 : US0 = US0_0
        let struct (v5716 : Mut0, v5717 : Mut1, v5718 : Mut2, v5719 : Mut3, v5720 : int64 option) = method1(v5715)
        let v5721 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v5716, v5717, v5718, v5719, v5720) 
        State.trace_state <- v5721 
        ()
    let struct (v5726 : Mut0, v5727 : Mut1, v5728 : Mut2, v5729 : Mut3, v5730 : int64 option) = State.trace_state.Value
    let v5741 : US0 = v5729.l0
    let v5742 : bool = v5728.l0
    let v5743 : bool = v5742 = false
    let v5746 : bool =
        if v5743 then
            false
        else
            let v5744 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v5741
            let v5745 : bool = 0 >= v5744
            v5745
    if v5746 then
        let v5747 : int64 = v5699.l0
        let v5748 : int64 = v5747 + 1L
        v5699.l0 <- v5748
        let v5749 : bool = State.trace_state.IsNone
        if v5749 then
            let v5750 : US0 = US0_0
            let struct (v5751 : Mut0, v5752 : Mut1, v5753 : Mut2, v5754 : Mut3, v5755 : int64 option) = method1(v5750)
            let v5756 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v5751, v5752, v5753, v5754, v5755) 
            State.trace_state <- v5756 
            ()
        let struct (v5761 : Mut0, v5762 : Mut1, v5763 : Mut2, v5764 : Mut3, v5765 : int64 option) = State.trace_state.Value
        let v5776 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v5777 : US3 option = None
        let _v5777 = ref v5777 
        match v5765 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v5778 : int64 = x
        let v5779 : US3 = US3_0(v5778)
        v5779 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v5777.Value <- x
        let v5780 : US3 option = _v5777.Value 
        let v5791 : US3 = US3_1
        let v5792 : US3 = v5780 |> Option.defaultValue v5791 
        let v5832 : System.DateTime =
            match v5792 with
            | US3_1 -> (* None *)
                let v5828 : System.DateTime = System.DateTime.Now
                v5828
            | US3_0(v5796) -> (* Some *)
                let v5797 : System.DateTime = System.DateTime.Now
                let v5800 : (System.DateTime -> int64) = _.Ticks
                let v5801 : int64 = v5800 v5797
                let v5804 : int64 = v5801 - v5796
                let v5805 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v5806 : System.TimeSpan = v5805 v5804
                let v5809 : (System.TimeSpan -> int32) = _.Hours
                let v5810 : int32 = v5809 v5806
                let v5813 : (System.TimeSpan -> int32) = _.Minutes
                let v5814 : int32 = v5813 v5806
                let v5817 : (System.TimeSpan -> int32) = _.Seconds
                let v5818 : int32 = v5817 v5806
                let v5821 : (System.TimeSpan -> int32) = _.Milliseconds
                let v5822 : int32 = v5821 v5806
                let v5825 : System.DateTime = System.DateTime (1, 1, 1, v5810, v5814, v5818, v5822)
                v5825
        let v5833 : string = method6()
        let v5836 : (string -> string) = v5832.ToString
        let v5837 : string = v5836 v5833
        let _v5776 = v5837 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v5840 : US3 option = None
        let _v5840 = ref v5840 
        match v5765 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v5841 : int64 = x
        let v5842 : US3 = US3_0(v5841)
        v5842 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v5840.Value <- x
        let v5843 : US3 option = _v5840.Value 
        let v5854 : US3 = US3_1
        let v5855 : US3 = v5843 |> Option.defaultValue v5854 
        let v5895 : System.DateTime =
            match v5855 with
            | US3_1 -> (* None *)
                let v5891 : System.DateTime = System.DateTime.Now
                v5891
            | US3_0(v5859) -> (* Some *)
                let v5860 : System.DateTime = System.DateTime.Now
                let v5863 : (System.DateTime -> int64) = _.Ticks
                let v5864 : int64 = v5863 v5860
                let v5867 : int64 = v5864 - v5859
                let v5868 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v5869 : System.TimeSpan = v5868 v5867
                let v5872 : (System.TimeSpan -> int32) = _.Hours
                let v5873 : int32 = v5872 v5869
                let v5876 : (System.TimeSpan -> int32) = _.Minutes
                let v5877 : int32 = v5876 v5869
                let v5880 : (System.TimeSpan -> int32) = _.Seconds
                let v5881 : int32 = v5880 v5869
                let v5884 : (System.TimeSpan -> int32) = _.Milliseconds
                let v5885 : int32 = v5884 v5869
                let v5888 : System.DateTime = System.DateTime (1, 1, 1, v5873, v5877, v5881, v5885)
                v5888
        let v5896 : string = method6()
        let v5899 : (string -> string) = v5895.ToString
        let v5900 : string = v5899 v5896
        let _v5776 = v5900 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v5903 : string = $"near_sdk::env::block_timestamp()"
        let v5904 : uint64 = Fable.Core.RustInterop.emitRustExpr () v5903 
        let v5905 : US3 option = None
        let _v5905 = ref v5905 
        match v5765 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v5906 : int64 = x
        let v5907 : US3 = US3_0(v5906)
        v5907 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v5905.Value <- x
        let v5908 : US3 option = _v5905.Value 
        let v5919 : US3 = US3_1
        let v5920 : US3 = v5908 |> Option.defaultValue v5919 
        let v5929 : uint64 =
            match v5920 with
            | US3_1 -> (* None *)
                v5904
            | US3_0(v5924) -> (* Some *)
                let v5925 : (int64 -> uint64) = uint64
                let v5926 : uint64 = v5925 v5924
                let v5927 : uint64 = v5904 - v5926
                v5927
        let v5930 : uint64 = v5929 / 1000000000UL
        let v5931 : uint64 = v5930 % 60UL
        let v5932 : uint64 = v5930 / 60UL
        let v5933 : uint64 = v5932 % 60UL
        let v5934 : uint64 = v5930 / 3600UL
        let v5935 : uint64 = v5934 % 24UL
        let v5936 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v5937 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v5935, v5933, v5931) v5936 
        let v5938 : string = "fable_library_rust::String_::fromString($0)"
        let v5939 : string = Fable.Core.RustInterop.emitRustExpr v5937 v5938 
        let _v5776 = v5939 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v5940 : US3 option = None
        let _v5940 = ref v5940 
        match v5765 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v5941 : int64 = x
        let v5942 : US3 = US3_0(v5941)
        v5942 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v5940.Value <- x
        let v5943 : US3 option = _v5940.Value 
        let v5954 : US3 = US3_1
        let v5955 : US3 = v5943 |> Option.defaultValue v5954 
        let v5995 : System.DateTime =
            match v5955 with
            | US3_1 -> (* None *)
                let v5991 : System.DateTime = System.DateTime.Now
                v5991
            | US3_0(v5959) -> (* Some *)
                let v5960 : System.DateTime = System.DateTime.Now
                let v5963 : (System.DateTime -> int64) = _.Ticks
                let v5964 : int64 = v5963 v5960
                let v5967 : int64 = v5964 - v5959
                let v5968 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v5969 : System.TimeSpan = v5968 v5967
                let v5972 : (System.TimeSpan -> int32) = _.Hours
                let v5973 : int32 = v5972 v5969
                let v5976 : (System.TimeSpan -> int32) = _.Minutes
                let v5977 : int32 = v5976 v5969
                let v5980 : (System.TimeSpan -> int32) = _.Seconds
                let v5981 : int32 = v5980 v5969
                let v5984 : (System.TimeSpan -> int32) = _.Milliseconds
                let v5985 : int32 = v5984 v5969
                let v5988 : System.DateTime = System.DateTime (1, 1, 1, v5973, v5977, v5981, v5985)
                v5988
        let v5996 : string = method7()
        let v5999 : (string -> string) = v5995.ToString
        let v6000 : string = v5999 v5996
        let _v5776 = v6000 
        #endif
#if FABLE_COMPILER_PYTHON
        let v6003 : US3 option = None
        let _v6003 = ref v6003 
        match v5765 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v6004 : int64 = x
        let v6005 : US3 = US3_0(v6004)
        v6005 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v6003.Value <- x
        let v6006 : US3 option = _v6003.Value 
        let v6017 : US3 = US3_1
        let v6018 : US3 = v6006 |> Option.defaultValue v6017 
        let v6058 : System.DateTime =
            match v6018 with
            | US3_1 -> (* None *)
                let v6054 : System.DateTime = System.DateTime.Now
                v6054
            | US3_0(v6022) -> (* Some *)
                let v6023 : System.DateTime = System.DateTime.Now
                let v6026 : (System.DateTime -> int64) = _.Ticks
                let v6027 : int64 = v6026 v6023
                let v6030 : int64 = v6027 - v6022
                let v6031 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v6032 : System.TimeSpan = v6031 v6030
                let v6035 : (System.TimeSpan -> int32) = _.Hours
                let v6036 : int32 = v6035 v6032
                let v6039 : (System.TimeSpan -> int32) = _.Minutes
                let v6040 : int32 = v6039 v6032
                let v6043 : (System.TimeSpan -> int32) = _.Seconds
                let v6044 : int32 = v6043 v6032
                let v6047 : (System.TimeSpan -> int32) = _.Milliseconds
                let v6048 : int32 = v6047 v6032
                let v6051 : System.DateTime = System.DateTime (1, 1, 1, v6036, v6040, v6044, v6048)
                v6051
        let v6059 : string = method7()
        let v6062 : (string -> string) = v6058.ToString
        let v6063 : string = v6062 v6059
        let _v5776 = v6063 
        #endif
#else
        let v6066 : US3 option = None
        let _v6066 = ref v6066 
        match v5765 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v6067 : int64 = x
        let v6068 : US3 = US3_0(v6067)
        v6068 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v6066.Value <- x
        let v6069 : US3 option = _v6066.Value 
        let v6080 : US3 = US3_1
        let v6081 : US3 = v6069 |> Option.defaultValue v6080 
        let v6121 : System.DateTime =
            match v6081 with
            | US3_1 -> (* None *)
                let v6117 : System.DateTime = System.DateTime.Now
                v6117
            | US3_0(v6085) -> (* Some *)
                let v6086 : System.DateTime = System.DateTime.Now
                let v6089 : (System.DateTime -> int64) = _.Ticks
                let v6090 : int64 = v6089 v6086
                let v6093 : int64 = v6090 - v6085
                let v6094 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v6095 : System.TimeSpan = v6094 v6093
                let v6098 : (System.TimeSpan -> int32) = _.Hours
                let v6099 : int32 = v6098 v6095
                let v6102 : (System.TimeSpan -> int32) = _.Minutes
                let v6103 : int32 = v6102 v6095
                let v6106 : (System.TimeSpan -> int32) = _.Seconds
                let v6107 : int32 = v6106 v6095
                let v6110 : (System.TimeSpan -> int32) = _.Milliseconds
                let v6111 : int32 = v6110 v6095
                let v6114 : System.DateTime = System.DateTime (1, 1, 1, v6099, v6103, v6107, v6111)
                v6114
        let v6122 : string = method7()
        let v6125 : (string -> string) = v6121.ToString
        let v6126 : string = v6125 v6122
        let _v5776 = v6126 
        #endif
        let v6129 : string = _v5776 
        let v6194 : string = "Verbose"
        let v6195 : (unit -> string) = v6194.ToLower
        let v6196 : string = v6195 ()
        let v6199 : string = v6196.PadLeft (7, ' ')
        let v6213 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v6214 : string = "inline_colorization::color_bright_black"
        let v6215 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v6214 
        let v6216 : string = "&*$0"
        let v6217 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6199 v6216 
        let v6218 : string = "inline_colorization::color_reset"
        let v6219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v6218 
        let v6220 : string = "\"{v6215}{v6217}{v6219}\""
        let v6221 : string = @$"format!(" + v6220 + ")"
        let v6222 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v6221 
        let v6223 : string = "fable_library_rust::String_::fromString($0)"
        let v6224 : string = Fable.Core.RustInterop.emitRustExpr v6222 v6223 
        let _v6213 = v6224 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v6225 : string = "inline_colorization::color_bright_black"
        let v6226 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v6225 
        let v6227 : string = "&*$0"
        let v6228 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6199 v6227 
        let v6229 : string = "inline_colorization::color_reset"
        let v6230 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v6229 
        let v6231 : string = "\"{v6226}{v6228}{v6230}\""
        let v6232 : string = @$"format!(" + v6231 + ")"
        let v6233 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v6232 
        let v6234 : string = "fable_library_rust::String_::fromString($0)"
        let v6235 : string = Fable.Core.RustInterop.emitRustExpr v6233 v6234 
        let _v6213 = v6235 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v6236 : string = "inline_colorization::color_bright_black"
        let v6237 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v6236 
        let v6238 : string = "&*$0"
        let v6239 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6199 v6238 
        let v6240 : string = "inline_colorization::color_reset"
        let v6241 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v6240 
        let v6242 : string = "\"{v6237}{v6239}{v6241}\""
        let v6243 : string = @$"format!(" + v6242 + ")"
        let v6244 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v6243 
        let v6245 : string = "fable_library_rust::String_::fromString($0)"
        let v6246 : string = Fable.Core.RustInterop.emitRustExpr v6244 v6245 
        let _v6213 = v6246 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v6247 : string = "\u001b[90m"
        let v6248 : string = method8()
        let v6249 : string = v6247 + v6199 
        let v6250 : string = v6249 + v6248 
        let _v6213 = v6250 
        #endif
#if FABLE_COMPILER_PYTHON
        let v6251 : string = "\u001b[90m"
        let v6252 : string = method8()
        let v6253 : string = v6251 + v6199 
        let v6254 : string = v6253 + v6252 
        let _v6213 = v6254 
        #endif
#else
        let v6255 : string = "\u001b[90m"
        let v6256 : string = method8()
        let v6257 : string = v6255 + v6199 
        let v6258 : string = v6257 + v6256 
        let _v6213 = v6258 
        #endif
        let v6259 : string = _v6213 
        let v6265 : int64 = v5761.l0
        let v6266 : int32 = v5684.Length
        let v6267 : string = method9()
        let v6268 : Mut4 = {l0 = v6267} : Mut4
        let v6269 : string = "{ "
        let v6270 : string = $"{v6269}"
        let v6273 : string = v6268.l0
        let v6274 : string = v6273 + v6270 
        v6268.l0 <- v6274
        let v6275 : string = "exit_code"
        let v6276 : string = $"{v6275}"
        let v6279 : string = v6268.l0
        let v6280 : string = v6279 + v6276 
        v6268.l0 <- v6280
        let v6281 : string = " = "
        let v6282 : string = $"{v6281}"
        let v6285 : string = v6268.l0
        let v6286 : string = v6285 + v6282 
        v6268.l0 <- v6286
        let v6287 : string = $"{v5625}"
        let v6290 : string = v6268.l0
        let v6291 : string = v6290 + v6287 
        v6268.l0 <- v6291
        let v6292 : string = "; "
        let v6293 : string = $"{v6292}"
        let v6296 : string = v6268.l0
        let v6297 : string = v6296 + v6293 
        v6268.l0 <- v6297
        let v6298 : string = "std_trace_length"
        let v6299 : string = $"{v6298}"
        let v6302 : string = v6268.l0
        let v6303 : string = v6302 + v6299 
        v6268.l0 <- v6303
        let v6304 : string = $"{v6281}"
        let v6307 : string = v6268.l0
        let v6308 : string = v6307 + v6304 
        v6268.l0 <- v6308
        let v6309 : string = $"{v6266}"
        let v6312 : string = v6268.l0
        let v6313 : string = v6312 + v6309 
        v6268.l0 <- v6313
        let v6314 : string = " }"
        let v6315 : string = $"{v6314}"
        let v6318 : string = v6268.l0
        let v6319 : string = v6318 + v6315 
        v6268.l0 <- v6319
        let v6320 : string = v6268.l0
        let v6321 : (unit -> string) = closure34()
        let v6322 : string = $"{v6129} {v6259} #{v6265} %s{v6321 ()} / {v6320}"
        let v6325 : char list = []
        let v6326 : (char list -> (char [])) = List.toArray
        let v6327 : (char []) = v6326 v6325
        let v6330 : string = v6322.TrimStart v6327 
        let v6348 : char list = []
        let v6349 : char list = '/' :: v6348 
        let v6352 : char list = ' ' :: v6349 
        let v6355 : (char list -> (char [])) = List.toArray
        let v6356 : (char []) = v6355 v6352
        let v6359 : string = v6330.TrimEnd v6356 
        let v6377 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v6378 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v6359 v6378 
        let _v6377 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v6379 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v6359 v6379 
        let _v6377 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v6380 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v6359 v6380 
        let _v6377 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        System.Console.WriteLine v6359 
        let _v6377 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        System.Console.WriteLine v6359 
        let _v6377 = () 
        #endif
#else
        System.Console.WriteLine v6359 
        let _v6377 = () 
        #endif
        _v6377 
        let v6381 : (string -> unit) = v5700.l0
        v6381 v6359
    let v6382 : (int32 * string) = v5625, v5684 
    v6382 
    )
    |> fun x -> x ()
    ) () )
    |> fun x -> _v1048 <- Some x
    let v6383 : (int32 * string) = match _v1048 with Some x -> x | None -> failwith "base.capture / _v1048=None"
    let (a, b) = v6383 
    let v6384 : int32 = a
    let v6385 : string = b
    let _v7 = struct (v6384, v6385) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let struct (v6390 : int32, v6391 : string) = null |> unbox<struct (int32 * string)>
    let _v7 = struct (v6390, v6391) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let struct (v6396 : int32, v6397 : string) = null |> unbox<struct (int32 * string)>
    let _v7 = struct (v6396, v6397) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v6402 : int32, v6403 : string) = null |> unbox<struct (int32 * string)>
    let _v7 = struct (v6402, v6403) 
    #endif
#if FABLE_COMPILER_PYTHON
    let struct (v6408 : int32, v6409 : string) = null |> unbox<struct (int32 * string)>
    let _v7 = struct (v6408, v6409) 
    #endif
#else
    let v6414 : Async<struct (int32 * string)> = method78(v0, v1, v2, v3, v4, v5, v6)
    let v6415 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let struct (v6416 : int32, v6417 : string) = null |> unbox<struct (int32 * string)>
    let _v6415 = struct (v6416, v6417) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let struct (v6422 : int32, v6423 : string) = null |> unbox<struct (int32 * string)>
    let _v6415 = struct (v6422, v6423) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let struct (v6428 : int32, v6429 : string) = null |> unbox<struct (int32 * string)>
    let _v6415 = struct (v6428, v6429) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v6434 : int32, v6435 : string) = null |> unbox<struct (int32 * string)>
    let _v6415 = struct (v6434, v6435) 
    #endif
#if FABLE_COMPILER_PYTHON
    let struct (v6440 : int32, v6441 : string) = null |> unbox<struct (int32 * string)>
    let _v6415 = struct (v6440, v6441) 
    #endif
#else
    let v6446 : (Async<struct (int32 * string)> -> struct (int32 * string)) = Async.RunSynchronously
    let struct (v6447 : int32, v6448 : string) = v6446 v6414
    let _v6415 = struct (v6447, v6448) 
    #endif
    let struct (v6449 : int32, v6450 : string) = _v6415 
    let _v7 = struct (v6449, v6450) 
    #endif
    let struct (v6459 : int32, v6460 : string) = _v7 
    struct (v6459, v6460)
and closure42 () () : string =
    let v0 : string = "spiral_builder.process_cuda / env install error"
    v0
and closure43 () (v0 : string) : US1 =
    US1_0(v0)
and closure44 (v0 : string) () : string =
    let v1 : string = "\n"
    let v2 : (string []) = v0.Split v1 
    let v3 : string seq = v2 |> Seq.ofArray
    let v6 : (string -> (string seq -> string)) = String.concat
    let v7 : (string seq -> string) = v6 v1
    v7 v3
and closure46 () () : string =
    let v0 : string = "spiral_builder.process_cuda / Exception"
    v0
and closure45 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US1 =
    let v4 : bool = State.trace_state.IsNone
    if v4 then
        let v5 : US0 = US0_0
        let struct (v6 : Mut0, v7 : Mut1, v8 : Mut2, v9 : Mut3, v10 : int64 option) = method1(v5)
        let v11 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v6, v7, v8, v9, v10) 
        State.trace_state <- v11 
        ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : bool = State.trace_state.IsNone
    if v31 then
        let v32 : US0 = US0_0
        let struct (v33 : Mut0, v34 : Mut1, v35 : Mut2, v36 : Mut3, v37 : int64 option) = method1(v32)
        let v38 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v33, v34, v35, v36, v37) 
        State.trace_state <- v38 
        ()
    let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : int64 option) = State.trace_state.Value
    let v58 : US0 = v46.l0
    let v59 : bool = v45.l0
    let v60 : bool = v59 = false
    let v63 : bool =
        if v60 then
            false
        else
            let v61 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v58
            let v62 : bool = 4 >= v61
            v62
    if v63 then
        let v64 : int64 = v16.l0
        let v65 : int64 = v64 + 1L
        v16.l0 <- v65
        let v66 : bool = State.trace_state.IsNone
        if v66 then
            let v67 : US0 = US0_0
            let struct (v68 : Mut0, v69 : Mut1, v70 : Mut2, v71 : Mut3, v72 : int64 option) = method1(v67)
            let v73 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v68, v69, v70, v71, v72) 
            State.trace_state <- v73 
            ()
        let struct (v78 : Mut0, v79 : Mut1, v80 : Mut2, v81 : Mut3, v82 : int64 option) = State.trace_state.Value
        let v93 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v94 : US3 option = None
        let _v94 = ref v94 
        match v82 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v95 : int64 = x
        let v96 : US3 = US3_0(v95)
        v96 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v94.Value <- x
        let v97 : US3 option = _v94.Value 
        let v108 : US3 = US3_1
        let v109 : US3 = v97 |> Option.defaultValue v108 
        let v149 : System.DateTime =
            match v109 with
            | US3_1 -> (* None *)
                let v145 : System.DateTime = System.DateTime.Now
                v145
            | US3_0(v113) -> (* Some *)
                let v114 : System.DateTime = System.DateTime.Now
                let v117 : (System.DateTime -> int64) = _.Ticks
                let v118 : int64 = v117 v114
                let v121 : int64 = v118 - v113
                let v122 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v123 : System.TimeSpan = v122 v121
                let v126 : (System.TimeSpan -> int32) = _.Hours
                let v127 : int32 = v126 v123
                let v130 : (System.TimeSpan -> int32) = _.Minutes
                let v131 : int32 = v130 v123
                let v134 : (System.TimeSpan -> int32) = _.Seconds
                let v135 : int32 = v134 v123
                let v138 : (System.TimeSpan -> int32) = _.Milliseconds
                let v139 : int32 = v138 v123
                let v142 : System.DateTime = System.DateTime (1, 1, 1, v127, v131, v135, v139)
                v142
        let v150 : string = method6()
        let v153 : (string -> string) = v149.ToString
        let v154 : string = v153 v150
        let _v93 = v154 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v157 : US3 option = None
        let _v157 = ref v157 
        match v82 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v158 : int64 = x
        let v159 : US3 = US3_0(v158)
        v159 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v157.Value <- x
        let v160 : US3 option = _v157.Value 
        let v171 : US3 = US3_1
        let v172 : US3 = v160 |> Option.defaultValue v171 
        let v212 : System.DateTime =
            match v172 with
            | US3_1 -> (* None *)
                let v208 : System.DateTime = System.DateTime.Now
                v208
            | US3_0(v176) -> (* Some *)
                let v177 : System.DateTime = System.DateTime.Now
                let v180 : (System.DateTime -> int64) = _.Ticks
                let v181 : int64 = v180 v177
                let v184 : int64 = v181 - v176
                let v185 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v186 : System.TimeSpan = v185 v184
                let v189 : (System.TimeSpan -> int32) = _.Hours
                let v190 : int32 = v189 v186
                let v193 : (System.TimeSpan -> int32) = _.Minutes
                let v194 : int32 = v193 v186
                let v197 : (System.TimeSpan -> int32) = _.Seconds
                let v198 : int32 = v197 v186
                let v201 : (System.TimeSpan -> int32) = _.Milliseconds
                let v202 : int32 = v201 v186
                let v205 : System.DateTime = System.DateTime (1, 1, 1, v190, v194, v198, v202)
                v205
        let v213 : string = method6()
        let v216 : (string -> string) = v212.ToString
        let v217 : string = v216 v213
        let _v93 = v217 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v220 : string = $"near_sdk::env::block_timestamp()"
        let v221 : uint64 = Fable.Core.RustInterop.emitRustExpr () v220 
        let v222 : US3 option = None
        let _v222 = ref v222 
        match v82 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v223 : int64 = x
        let v224 : US3 = US3_0(v223)
        v224 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v222.Value <- x
        let v225 : US3 option = _v222.Value 
        let v236 : US3 = US3_1
        let v237 : US3 = v225 |> Option.defaultValue v236 
        let v246 : uint64 =
            match v237 with
            | US3_1 -> (* None *)
                v221
            | US3_0(v241) -> (* Some *)
                let v242 : (int64 -> uint64) = uint64
                let v243 : uint64 = v242 v241
                let v244 : uint64 = v221 - v243
                v244
        let v247 : uint64 = v246 / 1000000000UL
        let v248 : uint64 = v247 % 60UL
        let v249 : uint64 = v247 / 60UL
        let v250 : uint64 = v249 % 60UL
        let v251 : uint64 = v247 / 3600UL
        let v252 : uint64 = v251 % 24UL
        let v253 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v254 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v252, v250, v248) v253 
        let v255 : string = "fable_library_rust::String_::fromString($0)"
        let v256 : string = Fable.Core.RustInterop.emitRustExpr v254 v255 
        let _v93 = v256 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v257 : US3 option = None
        let _v257 = ref v257 
        match v82 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v258 : int64 = x
        let v259 : US3 = US3_0(v258)
        v259 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v257.Value <- x
        let v260 : US3 option = _v257.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v312 : System.DateTime =
            match v272 with
            | US3_1 -> (* None *)
                let v308 : System.DateTime = System.DateTime.Now
                v308
            | US3_0(v276) -> (* Some *)
                let v277 : System.DateTime = System.DateTime.Now
                let v280 : (System.DateTime -> int64) = _.Ticks
                let v281 : int64 = v280 v277
                let v284 : int64 = v281 - v276
                let v285 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v286 : System.TimeSpan = v285 v284
                let v289 : (System.TimeSpan -> int32) = _.Hours
                let v290 : int32 = v289 v286
                let v293 : (System.TimeSpan -> int32) = _.Minutes
                let v294 : int32 = v293 v286
                let v297 : (System.TimeSpan -> int32) = _.Seconds
                let v298 : int32 = v297 v286
                let v301 : (System.TimeSpan -> int32) = _.Milliseconds
                let v302 : int32 = v301 v286
                let v305 : System.DateTime = System.DateTime (1, 1, 1, v290, v294, v298, v302)
                v305
        let v313 : string = method7()
        let v316 : (string -> string) = v312.ToString
        let v317 : string = v316 v313
        let _v93 = v317 
        #endif
#if FABLE_COMPILER_PYTHON
        let v320 : US3 option = None
        let _v320 = ref v320 
        match v82 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v321 : int64 = x
        let v322 : US3 = US3_0(v321)
        v322 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v320.Value <- x
        let v323 : US3 option = _v320.Value 
        let v334 : US3 = US3_1
        let v335 : US3 = v323 |> Option.defaultValue v334 
        let v375 : System.DateTime =
            match v335 with
            | US3_1 -> (* None *)
                let v371 : System.DateTime = System.DateTime.Now
                v371
            | US3_0(v339) -> (* Some *)
                let v340 : System.DateTime = System.DateTime.Now
                let v343 : (System.DateTime -> int64) = _.Ticks
                let v344 : int64 = v343 v340
                let v347 : int64 = v344 - v339
                let v348 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v349 : System.TimeSpan = v348 v347
                let v352 : (System.TimeSpan -> int32) = _.Hours
                let v353 : int32 = v352 v349
                let v356 : (System.TimeSpan -> int32) = _.Minutes
                let v357 : int32 = v356 v349
                let v360 : (System.TimeSpan -> int32) = _.Seconds
                let v361 : int32 = v360 v349
                let v364 : (System.TimeSpan -> int32) = _.Milliseconds
                let v365 : int32 = v364 v349
                let v368 : System.DateTime = System.DateTime (1, 1, 1, v353, v357, v361, v365)
                v368
        let v376 : string = method7()
        let v379 : (string -> string) = v375.ToString
        let v380 : string = v379 v376
        let _v93 = v380 
        #endif
#else
        let v383 : US3 option = None
        let _v383 = ref v383 
        match v82 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v384 : int64 = x
        let v385 : US3 = US3_0(v384)
        v385 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v383.Value <- x
        let v386 : US3 option = _v383.Value 
        let v397 : US3 = US3_1
        let v398 : US3 = v386 |> Option.defaultValue v397 
        let v438 : System.DateTime =
            match v398 with
            | US3_1 -> (* None *)
                let v434 : System.DateTime = System.DateTime.Now
                v434
            | US3_0(v402) -> (* Some *)
                let v403 : System.DateTime = System.DateTime.Now
                let v406 : (System.DateTime -> int64) = _.Ticks
                let v407 : int64 = v406 v403
                let v410 : int64 = v407 - v402
                let v411 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v412 : System.TimeSpan = v411 v410
                let v415 : (System.TimeSpan -> int32) = _.Hours
                let v416 : int32 = v415 v412
                let v419 : (System.TimeSpan -> int32) = _.Minutes
                let v420 : int32 = v419 v412
                let v423 : (System.TimeSpan -> int32) = _.Seconds
                let v424 : int32 = v423 v412
                let v427 : (System.TimeSpan -> int32) = _.Milliseconds
                let v428 : int32 = v427 v412
                let v431 : System.DateTime = System.DateTime (1, 1, 1, v416, v420, v424, v428)
                v431
        let v439 : string = method7()
        let v442 : (string -> string) = v438.ToString
        let v443 : string = v442 v439
        let _v93 = v443 
        #endif
        let v446 : string = _v93 
        let v511 : string = "Critical"
        let v512 : (unit -> string) = v511.ToLower
        let v513 : string = v512 ()
        let v516 : string = v513.PadLeft (7, ' ')
        let v530 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v531 : string = "inline_colorization::color_bright_red"
        let v532 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v531 
        let v533 : string = "&*$0"
        let v534 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v516 v533 
        let v535 : string = "inline_colorization::color_reset"
        let v536 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v535 
        let v537 : string = "\"{v532}{v534}{v536}\""
        let v538 : string = @$"format!(" + v537 + ")"
        let v539 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v538 
        let v540 : string = "fable_library_rust::String_::fromString($0)"
        let v541 : string = Fable.Core.RustInterop.emitRustExpr v539 v540 
        let _v530 = v541 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v542 : string = "inline_colorization::color_bright_red"
        let v543 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v542 
        let v544 : string = "&*$0"
        let v545 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v516 v544 
        let v546 : string = "inline_colorization::color_reset"
        let v547 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v546 
        let v548 : string = "\"{v543}{v545}{v547}\""
        let v549 : string = @$"format!(" + v548 + ")"
        let v550 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v549 
        let v551 : string = "fable_library_rust::String_::fromString($0)"
        let v552 : string = Fable.Core.RustInterop.emitRustExpr v550 v551 
        let _v530 = v552 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v553 : string = "inline_colorization::color_bright_red"
        let v554 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v553 
        let v555 : string = "&*$0"
        let v556 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v516 v555 
        let v557 : string = "inline_colorization::color_reset"
        let v558 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v557 
        let v559 : string = "\"{v554}{v556}{v558}\""
        let v560 : string = @$"format!(" + v559 + ")"
        let v561 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v560 
        let v562 : string = "fable_library_rust::String_::fromString($0)"
        let v563 : string = Fable.Core.RustInterop.emitRustExpr v561 v562 
        let _v530 = v563 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v564 : string = "\u001b[91m"
        let v565 : string = method8()
        let v566 : string = v564 + v516 
        let v567 : string = v566 + v565 
        let _v530 = v567 
        #endif
#if FABLE_COMPILER_PYTHON
        let v568 : string = "\u001b[91m"
        let v569 : string = method8()
        let v570 : string = v568 + v516 
        let v571 : string = v570 + v569 
        let _v530 = v571 
        #endif
#else
        let v572 : string = "\u001b[91m"
        let v573 : string = method8()
        let v574 : string = v572 + v516 
        let v575 : string = v574 + v573 
        let _v530 = v575 
        #endif
        let v576 : string = _v530 
        let v582 : int64 = v78.l0
        let v583 : string = method9()
        let v584 : Mut4 = {l0 = v583} : Mut4
        let v585 : string = "{ "
        let v586 : string = $"{v585}"
        let v589 : string = v584.l0
        let v590 : string = v589 + v586 
        v584.l0 <- v590
        let v591 : string = "ex"
        let v592 : string = $"{v591}"
        let v595 : string = v584.l0
        let v596 : string = v595 + v592 
        v584.l0 <- v596
        let v597 : string = " = "
        let v598 : string = $"{v597}"
        let v601 : string = v584.l0
        let v602 : string = v601 + v598 
        v584.l0 <- v602
        let v603 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v604 : string = "format!(\"{:#?}\", $0)"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v603 = v607 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v608 : string = "format!(\"{:#?}\", $0)"
        let v609 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v608 
        let v610 : string = "fable_library_rust::String_::fromString($0)"
        let v611 : string = Fable.Core.RustInterop.emitRustExpr v609 v610 
        let _v603 = v611 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v612 : string = "format!(\"{:#?}\", $0)"
        let v613 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v612 
        let v614 : string = "fable_library_rust::String_::fromString($0)"
        let v615 : string = Fable.Core.RustInterop.emitRustExpr v613 v614 
        let _v603 = v615 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v616 : string = $"%A{v3}"
        let _v603 = v616 
        #endif
#if FABLE_COMPILER_PYTHON
        let v619 : string = $"%A{v3}"
        let _v603 = v619 
        #endif
#else
        let v622 : string = $"%A{v3}"
        let _v603 = v622 
        #endif
        let v625 : string = _v603 
        let v630 : string = $"{v625}"
        let v633 : string = v584.l0
        let v634 : string = v633 + v630 
        v584.l0 <- v634
        let v635 : string = "; "
        let v636 : string = $"{v635}"
        let v639 : string = v584.l0
        let v640 : string = v639 + v636 
        v584.l0 <- v640
        let v641 : string = "run_result"
        let v642 : string = $"{v641}"
        let v645 : string = v584.l0
        let v646 : string = v645 + v642 
        v584.l0 <- v646
        let v647 : string = $"{v597}"
        let v650 : string = v584.l0
        let v651 : string = v650 + v647 
        v584.l0 <- v651
        let v652 : string = $"{v1}"
        let v655 : string = v584.l0
        let v656 : string = v655 + v652 
        v584.l0 <- v656
        let v657 : string = $"{v635}"
        let v660 : string = v584.l0
        let v661 : string = v660 + v657 
        v584.l0 <- v661
        let v662 : string = "new_code_path"
        let v663 : string = $"{v662}"
        let v666 : string = v584.l0
        let v667 : string = v666 + v663 
        v584.l0 <- v667
        let v668 : string = $"{v597}"
        let v671 : string = v584.l0
        let v672 : string = v671 + v668 
        v584.l0 <- v672
        let v673 : string = $"{v0}"
        let v676 : string = v584.l0
        let v677 : string = v676 + v673 
        v584.l0 <- v677
        let v678 : string = $"{v635}"
        let v681 : string = v584.l0
        let v682 : string = v681 + v678 
        v584.l0 <- v682
        let v683 : string = "external_command"
        let v684 : string = $"{v683}"
        let v687 : string = v584.l0
        let v688 : string = v687 + v684 
        v584.l0 <- v688
        let v689 : string = $"{v597}"
        let v692 : string = v584.l0
        let v693 : string = v692 + v689 
        v584.l0 <- v693
        let v694 : string = $"{v2}"
        let v697 : string = v584.l0
        let v698 : string = v697 + v694 
        v584.l0 <- v698
        let v699 : string = " }"
        let v700 : string = $"{v699}"
        let v703 : string = v584.l0
        let v704 : string = v703 + v700 
        v584.l0 <- v704
        let v705 : string = v584.l0
        let v706 : (unit -> string) = closure46()
        let v707 : string = $"{v446} {v576} #{v582} %s{v706 ()} / {v705}"
        let v710 : char list = []
        let v711 : (char list -> (char [])) = List.toArray
        let v712 : (char []) = v711 v710
        let v715 : string = v707.TrimStart v712 
        let v733 : char list = []
        let v734 : char list = '/' :: v733 
        let v737 : char list = ' ' :: v734 
        let v740 : (char list -> (char [])) = List.toArray
        let v741 : (char []) = v740 v737
        let v744 : string = v715.TrimEnd v741 
        let v762 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v763 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v744 v763 
        let _v762 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v764 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v744 v764 
        let _v762 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v765 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v744 v765 
        let _v762 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        System.Console.WriteLine v744 
        let _v762 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        System.Console.WriteLine v744 
        let _v762 = () 
        #endif
#else
        System.Console.WriteLine v744 
        let _v762 = () 
        #endif
        _v762 
        let v766 : (string -> unit) = v17.l0
        v766 v744
    US1_1
and closure47 () () : string =
    let v0 : string = "spiral_builder.process_cuda / error"
    v0
and closure48 () struct (v0 : string, v1 : string) : (std_string_String * std_string_String) =
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v6 
    let v8 : string = "String::from($0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : (std_string_String * std_string_String) = v5, v9 
    v10
and method79 () : string =
    let v0 : string = "fs-path"
    v0
and method80 () : string =
    let v0 : string = "command"
    v0
and method81 () : string =
    let v0 : string = "path"
    v0
and method86 (v0 : string) : string =
    v0
and method85 (v0 : string) : string =
    let v1 : bool = v0 = ""
    if v1 then
        let v2 : string = ""
        v2
    else
        let v3 : string = "^\\\\\\\\\\?\\\\"
        let v4 : string = ""
        let v5 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v6 : string = $"regex::Regex::new(&$0)"
        let v7 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v3 v6 
        let v8 : string = "$0.unwrap()"
        let v9 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v7 v8 
        let v10 : string = method86(v0)
        let v11 : string = $"$0.replace_all(&*$1, &*$2)"
        let v12 : std_borrow_Cow<Str> = Fable.Core.RustInterop.emitRustExpr struct (v9, v10, v4) v11 
        let v13 : string = "String::from($0)"
        let v14 : std_string_String = Fable.Core.RustInterop.emitRustExpr v12 v13 
        let v15 : string = "fable_library_rust::String_::fromString($0)"
        let v16 : string = Fable.Core.RustInterop.emitRustExpr v14 v15 
        let _v5 = v16 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v17 : string = null |> unbox<string>
        let _v5 = v17 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v20 : string = null |> unbox<string>
        let _v5 = v20 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v23 : string = null |> unbox<string>
        let _v5 = v23 
        #endif
#if FABLE_COMPILER_PYTHON
        let v26 : string = null |> unbox<string>
        let _v5 = v26 
        #endif
#else
        let v29 : string = System.Text.RegularExpressions.Regex.Replace (v0, v3, v4)
        let _v5 = v29 
        #endif
        let v30 : string = _v5 
        let v35 : string = $"{v30.[0] |> string |> _.ToLower()}{v30.[1..]}"
        let v36 : string = "\\"
        let v37 : string = "/"
        let v38 : string = v35.Replace (v36, v37)
        v38
and method87 (v0 : int32, v1 : Mut6) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and method88 () : char =
    let v0 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1 : string = "std::path::MAIN_SEPARATOR"
    let v2 : char = Fable.Core.RustInterop.emitRustExpr () v1 
    let _v0 = v2 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3 : char = System.IO.Path.DirectorySeparatorChar
    let _v0 = v3 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4 : char = System.IO.Path.DirectorySeparatorChar
    let _v0 = v4 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v5 : char = System.IO.Path.DirectorySeparatorChar
    let _v0 = v5 
    #endif
#if FABLE_COMPILER_PYTHON
    let v6 : char = System.IO.Path.DirectorySeparatorChar
    let _v0 = v6 
    #endif
#else
    let v7 : char = System.IO.Path.DirectorySeparatorChar
    let _v0 = v7 
    #endif
    let v8 : char = _v0 
    v8
and method84 (v0 : string) : string =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "std::path::PathBuf::from($0)"
    let v7 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "$0.exists()"
    let v9 : bool = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : bool = v9 = false
    let v116 : string =
        if v10 then
            let v11 : string = method23()
            let v12 : string = method15(v11, v0)
            let v13 : string = method85(v12)
            let v14 : string = "/"
            let v15 : (string []) = v13.Split v14 
            let v16 : (string []) = [||]
            let v17 : int32 = v15.Length
            let v18 : Mut6 = {l0 = 0; l1 = 0; l2 = v16} : Mut6
            while method87(v17, v18) do
                let v20 : int32 = v18.l0
                let v21 : int32 =  -v20
                let v22 : int32 = v21 + v17
                let v23 : int32 = v22 - 1
                let struct (v24 : int32, v25 : (string [])) = v18.l1, v18.l2
                let v26 : string = v15.[int v23]
                let v27 : bool = ".." = v26
                let struct (v69 : int32, v70 : (string [])) =
                    if v27 then
                        let v28 : int32 = v24 + 1
                        struct (v28, v25)
                    else
                        let v29 : bool = "." = v26
                        if v29 then
                            struct (v24, v25)
                        else
                            let v30 : bool = 0 = v24
                            if v30 then
                                let v31 : string = ":"
                                let v32 : bool = v26.EndsWith v31 
                                if v32 then
                                    let v33 : string = $"{v11.[0]}:"
                                    let v34 : (string []) = [|v33|]
                                    let v35 : int32 = v34.Length
                                    let v36 : int32 = v25.Length
                                    let v37 : int32 = v35 + v36
                                    let v38 : (string []) = Array.zeroCreate<string> (v37)
                                    let v39 : Mut5 = {l0 = 0} : Mut5
                                    while method43(v37, v39) do
                                        let v41 : int32 = v39.l0
                                        let v42 : bool = v41 < v35
                                        let v46 : string =
                                            if v42 then
                                                let v43 : string = v34.[int v41]
                                                v43
                                            else
                                                let v44 : int32 = v41 - v35
                                                let v45 : string = v25.[int v44]
                                                v45
                                        v38.[int v41] <- v46
                                        let v47 : int32 = v41 + 1
                                        v39.l0 <- v47
                                        ()
                                    struct (0, v38)
                                else
                                    let v48 : (string []) = [|v26|]
                                    let v49 : int32 = v48.Length
                                    let v50 : int32 = v25.Length
                                    let v51 : int32 = v49 + v50
                                    let v52 : (string []) = Array.zeroCreate<string> (v51)
                                    let v53 : Mut5 = {l0 = 0} : Mut5
                                    while method43(v51, v53) do
                                        let v55 : int32 = v53.l0
                                        let v56 : bool = v55 < v49
                                        let v60 : string =
                                            if v56 then
                                                let v57 : string = v48.[int v55]
                                                v57
                                            else
                                                let v58 : int32 = v55 - v49
                                                let v59 : string = v25.[int v58]
                                                v59
                                        v52.[int v55] <- v60
                                        let v61 : int32 = v55 + 1
                                        v53.l0 <- v61
                                        ()
                                    struct (0, v52)
                            else
                                let v64 : int32 = v24 - 1
                                struct (v64, v25)
                let v71 : int32 = v20 + 1
                v18.l0 <- v71
                v18.l1 <- v69
                v18.l2 <- v70
                ()
            let struct (v72 : int32, v73 : (string [])) = v18.l1, v18.l2
            let v74 : string seq = seq { for i = 0 to v73.Length - 1 do yield v73.[i] }
            let v77 : char = method88()
            let v78 : (char -> string) = _.ToString()
            let v79 : string = v78 v77
            let v82 : (string -> (string seq -> string)) = String.concat
            let v83 : (string seq -> string) = v82 v79
            v83 v74
        else
            let v87 : string = "std::fs::canonicalize(&*$0)"
            let v88 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v87 
            let v89 : string = "$0.unwrap()"
            let v90 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v88 v89 
            let v91 : string = "$0.display()"
            let v92 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v90 v91 
            let v93 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v94 : string = "format!(\"{}\", $0)"
            let v95 : std_string_String = Fable.Core.RustInterop.emitRustExpr v92 v94 
            let _v93 = v95 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v96 : string = "format!(\"{}\", $0)"
            let v97 : std_string_String = Fable.Core.RustInterop.emitRustExpr v92 v96 
            let _v93 = v97 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v98 : string = "format!(\"{}\", $0)"
            let v99 : std_string_String = Fable.Core.RustInterop.emitRustExpr v92 v98 
            let _v93 = v99 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v100 : std_string_String = null |> unbox<std_string_String>
            let _v93 = v100 
            #endif
#if FABLE_COMPILER_PYTHON
            let v103 : std_string_String = null |> unbox<std_string_String>
            let _v93 = v103 
            #endif
#else
            let v106 : std_string_String = null |> unbox<std_string_String>
            let _v93 = v106 
            #endif
            let v109 : std_string_String = _v93 
            let v114 : string = "fable_library_rust::String_::fromString($0)"
            let v115 : string = Fable.Core.RustInterop.emitRustExpr v109 v114 
            v115
    let _v1 = v116 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v117 : string = null |> unbox<string>
    let _v1 = v117 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v120 : string = null |> unbox<string>
    let _v1 = v120 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v123 : string = null |> unbox<string>
    let _v1 = v123 
    #endif
#if FABLE_COMPILER_PYTHON
    let v126 : string = null |> unbox<string>
    let _v1 = v126 
    #endif
#else
    let v129 : (string -> string) = System.IO.Path.GetFullPath
    let v130 : string = v129 v0
    let _v1 = v130 
    #endif
    let v131 : string = _v1 
    v131
and method83 (v0 : string) : string =
    let v1 : string = method84(v0)
    method85(v1)
and method82 (v0 : string) : string =
    let v1 : string = method23()
    let v2 : string = method15(v1, v0)
    method83(v2)
and closure49 () (v0 : std_string_String) : string =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    method82(v2)
and method89 () : string =
    let v0 : string = "retries"
    v0
and method90 () : string =
    let v0 : string = "working-directory"
    v0
and closure50 () () : string =
    let v0 : string = "spiral_builder.run / repl error"
    v0
and method91 (v0 : string option, v1 : uint8, v2 : string, v3 : uint8) : struct (int32 * string) =
    let v4 : System.Threading.CancellationToken option = None
    let v5 : (struct (string * string) []) = [||]
    let v6 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v7 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v8 : string option = None
    let v9 : string = $"dotnet repl --exit-after-run --run \"{v2}\" --output-path \"{v2}.ipynb\""
    let v10 : string = "TRACE_LEVEL"
    let v11 : string = "Verbose"
    let v12 : string = "AUTOMATION"
    let v13 : string = "True"
    let v14 : (struct (string * string) []) = [|struct (v10, v11); struct (v12, v13)|]
    let v15 : bool = false
    let struct (v16 : int32, v17 : string) = method40(v9, v4, v14, v6, v7, v15, v0)
    let v18 : bool = v16 = 0
    let v20 : bool =
        if v18 then
            true
        else
            let v19 : bool = v3 >= v1
            v19
    if v20 then
        struct (v16, v17)
    else
        let v21 : bool = State.trace_state.IsNone
        if v21 then
            let v22 : US0 = US0_0
            let struct (v23 : Mut0, v24 : Mut1, v25 : Mut2, v26 : Mut3, v27 : int64 option) = method1(v22)
            let v28 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v23, v24, v25, v26, v27) 
            State.trace_state <- v28 
            ()
        let struct (v33 : Mut0, v34 : Mut1, v35 : Mut2, v36 : Mut3, v37 : int64 option) = State.trace_state.Value
        let v48 : bool = State.trace_state.IsNone
        if v48 then
            let v49 : US0 = US0_0
            let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : int64 option) = method1(v49)
            let v55 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v50, v51, v52, v53, v54) 
            State.trace_state <- v55 
            ()
        let struct (v60 : Mut0, v61 : Mut1, v62 : Mut2, v63 : Mut3, v64 : int64 option) = State.trace_state.Value
        let v75 : US0 = v63.l0
        let v76 : bool = v62.l0
        let v77 : bool = v76 = false
        let v80 : bool =
            if v77 then
                false
            else
                let v78 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v75
                let v79 : bool = 1 >= v78
                v79
        if v80 then
            let v81 : int64 = v33.l0
            let v82 : int64 = v81 + 1L
            v33.l0 <- v82
            let v83 : bool = State.trace_state.IsNone
            if v83 then
                let v84 : US0 = US0_0
                let struct (v85 : Mut0, v86 : Mut1, v87 : Mut2, v88 : Mut3, v89 : int64 option) = method1(v84)
                let v90 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v85, v86, v87, v88, v89) 
                State.trace_state <- v90 
                ()
            let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : int64 option) = State.trace_state.Value
            let v110 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v111 : US3 option = None
            let _v111 = ref v111 
            match v99 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v112 : int64 = x
            let v113 : US3 = US3_0(v112)
            v113 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v111.Value <- x
            let v114 : US3 option = _v111.Value 
            let v125 : US3 = US3_1
            let v126 : US3 = v114 |> Option.defaultValue v125 
            let v166 : System.DateTime =
                match v126 with
                | US3_1 -> (* None *)
                    let v162 : System.DateTime = System.DateTime.Now
                    v162
                | US3_0(v130) -> (* Some *)
                    let v131 : System.DateTime = System.DateTime.Now
                    let v134 : (System.DateTime -> int64) = _.Ticks
                    let v135 : int64 = v134 v131
                    let v138 : int64 = v135 - v130
                    let v139 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v140 : System.TimeSpan = v139 v138
                    let v143 : (System.TimeSpan -> int32) = _.Hours
                    let v144 : int32 = v143 v140
                    let v147 : (System.TimeSpan -> int32) = _.Minutes
                    let v148 : int32 = v147 v140
                    let v151 : (System.TimeSpan -> int32) = _.Seconds
                    let v152 : int32 = v151 v140
                    let v155 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v156 : int32 = v155 v140
                    let v159 : System.DateTime = System.DateTime (1, 1, 1, v144, v148, v152, v156)
                    v159
            let v167 : string = method6()
            let v170 : (string -> string) = v166.ToString
            let v171 : string = v170 v167
            let _v110 = v171 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v174 : US3 option = None
            let _v174 = ref v174 
            match v99 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v175 : int64 = x
            let v176 : US3 = US3_0(v175)
            v176 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v174.Value <- x
            let v177 : US3 option = _v174.Value 
            let v188 : US3 = US3_1
            let v189 : US3 = v177 |> Option.defaultValue v188 
            let v229 : System.DateTime =
                match v189 with
                | US3_1 -> (* None *)
                    let v225 : System.DateTime = System.DateTime.Now
                    v225
                | US3_0(v193) -> (* Some *)
                    let v194 : System.DateTime = System.DateTime.Now
                    let v197 : (System.DateTime -> int64) = _.Ticks
                    let v198 : int64 = v197 v194
                    let v201 : int64 = v198 - v193
                    let v202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v203 : System.TimeSpan = v202 v201
                    let v206 : (System.TimeSpan -> int32) = _.Hours
                    let v207 : int32 = v206 v203
                    let v210 : (System.TimeSpan -> int32) = _.Minutes
                    let v211 : int32 = v210 v203
                    let v214 : (System.TimeSpan -> int32) = _.Seconds
                    let v215 : int32 = v214 v203
                    let v218 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v219 : int32 = v218 v203
                    let v222 : System.DateTime = System.DateTime (1, 1, 1, v207, v211, v215, v219)
                    v222
            let v230 : string = method6()
            let v233 : (string -> string) = v229.ToString
            let v234 : string = v233 v230
            let _v110 = v234 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v237 : string = $"near_sdk::env::block_timestamp()"
            let v238 : uint64 = Fable.Core.RustInterop.emitRustExpr () v237 
            let v239 : US3 option = None
            let _v239 = ref v239 
            match v99 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v240 : int64 = x
            let v241 : US3 = US3_0(v240)
            v241 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v239.Value <- x
            let v242 : US3 option = _v239.Value 
            let v253 : US3 = US3_1
            let v254 : US3 = v242 |> Option.defaultValue v253 
            let v263 : uint64 =
                match v254 with
                | US3_1 -> (* None *)
                    v238
                | US3_0(v258) -> (* Some *)
                    let v259 : (int64 -> uint64) = uint64
                    let v260 : uint64 = v259 v258
                    let v261 : uint64 = v238 - v260
                    v261
            let v264 : uint64 = v263 / 1000000000UL
            let v265 : uint64 = v264 % 60UL
            let v266 : uint64 = v264 / 60UL
            let v267 : uint64 = v266 % 60UL
            let v268 : uint64 = v264 / 3600UL
            let v269 : uint64 = v268 % 24UL
            let v270 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
            let v271 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v269, v267, v265) v270 
            let v272 : string = "fable_library_rust::String_::fromString($0)"
            let v273 : string = Fable.Core.RustInterop.emitRustExpr v271 v272 
            let _v110 = v273 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v274 : US3 option = None
            let _v274 = ref v274 
            match v99 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v275 : int64 = x
            let v276 : US3 = US3_0(v275)
            v276 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v274.Value <- x
            let v277 : US3 option = _v274.Value 
            let v288 : US3 = US3_1
            let v289 : US3 = v277 |> Option.defaultValue v288 
            let v329 : System.DateTime =
                match v289 with
                | US3_1 -> (* None *)
                    let v325 : System.DateTime = System.DateTime.Now
                    v325
                | US3_0(v293) -> (* Some *)
                    let v294 : System.DateTime = System.DateTime.Now
                    let v297 : (System.DateTime -> int64) = _.Ticks
                    let v298 : int64 = v297 v294
                    let v301 : int64 = v298 - v293
                    let v302 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v303 : System.TimeSpan = v302 v301
                    let v306 : (System.TimeSpan -> int32) = _.Hours
                    let v307 : int32 = v306 v303
                    let v310 : (System.TimeSpan -> int32) = _.Minutes
                    let v311 : int32 = v310 v303
                    let v314 : (System.TimeSpan -> int32) = _.Seconds
                    let v315 : int32 = v314 v303
                    let v318 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v319 : int32 = v318 v303
                    let v322 : System.DateTime = System.DateTime (1, 1, 1, v307, v311, v315, v319)
                    v322
            let v330 : string = method7()
            let v333 : (string -> string) = v329.ToString
            let v334 : string = v333 v330
            let _v110 = v334 
            #endif
#if FABLE_COMPILER_PYTHON
            let v337 : US3 option = None
            let _v337 = ref v337 
            match v99 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v338 : int64 = x
            let v339 : US3 = US3_0(v338)
            v339 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v337.Value <- x
            let v340 : US3 option = _v337.Value 
            let v351 : US3 = US3_1
            let v352 : US3 = v340 |> Option.defaultValue v351 
            let v392 : System.DateTime =
                match v352 with
                | US3_1 -> (* None *)
                    let v388 : System.DateTime = System.DateTime.Now
                    v388
                | US3_0(v356) -> (* Some *)
                    let v357 : System.DateTime = System.DateTime.Now
                    let v360 : (System.DateTime -> int64) = _.Ticks
                    let v361 : int64 = v360 v357
                    let v364 : int64 = v361 - v356
                    let v365 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v366 : System.TimeSpan = v365 v364
                    let v369 : (System.TimeSpan -> int32) = _.Hours
                    let v370 : int32 = v369 v366
                    let v373 : (System.TimeSpan -> int32) = _.Minutes
                    let v374 : int32 = v373 v366
                    let v377 : (System.TimeSpan -> int32) = _.Seconds
                    let v378 : int32 = v377 v366
                    let v381 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v382 : int32 = v381 v366
                    let v385 : System.DateTime = System.DateTime (1, 1, 1, v370, v374, v378, v382)
                    v385
            let v393 : string = method7()
            let v396 : (string -> string) = v392.ToString
            let v397 : string = v396 v393
            let _v110 = v397 
            #endif
#else
            let v400 : US3 option = None
            let _v400 = ref v400 
            match v99 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v401 : int64 = x
            let v402 : US3 = US3_0(v401)
            v402 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v400.Value <- x
            let v403 : US3 option = _v400.Value 
            let v414 : US3 = US3_1
            let v415 : US3 = v403 |> Option.defaultValue v414 
            let v455 : System.DateTime =
                match v415 with
                | US3_1 -> (* None *)
                    let v451 : System.DateTime = System.DateTime.Now
                    v451
                | US3_0(v419) -> (* Some *)
                    let v420 : System.DateTime = System.DateTime.Now
                    let v423 : (System.DateTime -> int64) = _.Ticks
                    let v424 : int64 = v423 v420
                    let v427 : int64 = v424 - v419
                    let v428 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v429 : System.TimeSpan = v428 v427
                    let v432 : (System.TimeSpan -> int32) = _.Hours
                    let v433 : int32 = v432 v429
                    let v436 : (System.TimeSpan -> int32) = _.Minutes
                    let v437 : int32 = v436 v429
                    let v440 : (System.TimeSpan -> int32) = _.Seconds
                    let v441 : int32 = v440 v429
                    let v444 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v445 : int32 = v444 v429
                    let v448 : System.DateTime = System.DateTime (1, 1, 1, v433, v437, v441, v445)
                    v448
            let v456 : string = method7()
            let v459 : (string -> string) = v455.ToString
            let v460 : string = v459 v456
            let _v110 = v460 
            #endif
            let v463 : string = _v110 
            let v528 : string = "Debug"
            let v529 : (unit -> string) = v528.ToLower
            let v530 : string = v529 ()
            let v533 : string = v530.PadLeft (7, ' ')
            let v547 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v548 : string = "inline_colorization::color_bright_blue"
            let v549 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v548 
            let v550 : string = "&*$0"
            let v551 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v533 v550 
            let v552 : string = "inline_colorization::color_reset"
            let v553 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v552 
            let v554 : string = "\"{v549}{v551}{v553}\""
            let v555 : string = @$"format!(" + v554 + ")"
            let v556 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v555 
            let v557 : string = "fable_library_rust::String_::fromString($0)"
            let v558 : string = Fable.Core.RustInterop.emitRustExpr v556 v557 
            let _v547 = v558 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v559 : string = "inline_colorization::color_bright_blue"
            let v560 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v559 
            let v561 : string = "&*$0"
            let v562 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v533 v561 
            let v563 : string = "inline_colorization::color_reset"
            let v564 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v563 
            let v565 : string = "\"{v560}{v562}{v564}\""
            let v566 : string = @$"format!(" + v565 + ")"
            let v567 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v566 
            let v568 : string = "fable_library_rust::String_::fromString($0)"
            let v569 : string = Fable.Core.RustInterop.emitRustExpr v567 v568 
            let _v547 = v569 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v570 : string = "inline_colorization::color_bright_blue"
            let v571 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v570 
            let v572 : string = "&*$0"
            let v573 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v533 v572 
            let v574 : string = "inline_colorization::color_reset"
            let v575 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v574 
            let v576 : string = "\"{v571}{v573}{v575}\""
            let v577 : string = @$"format!(" + v576 + ")"
            let v578 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v577 
            let v579 : string = "fable_library_rust::String_::fromString($0)"
            let v580 : string = Fable.Core.RustInterop.emitRustExpr v578 v579 
            let _v547 = v580 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v581 : string = "\u001b[94m"
            let v582 : string = method8()
            let v583 : string = v581 + v533 
            let v584 : string = v583 + v582 
            let _v547 = v584 
            #endif
#if FABLE_COMPILER_PYTHON
            let v585 : string = "\u001b[94m"
            let v586 : string = method8()
            let v587 : string = v585 + v533 
            let v588 : string = v587 + v586 
            let _v547 = v588 
            #endif
#else
            let v589 : string = "\u001b[94m"
            let v590 : string = method8()
            let v591 : string = v589 + v533 
            let v592 : string = v591 + v590 
            let _v547 = v592 
            #endif
            let v593 : string = _v547 
            let v599 : int64 = v95.l0
            let v600 : string = $"{v3}/{v1}"
            let v601 : string = method9()
            let v602 : Mut4 = {l0 = v601} : Mut4
            let v603 : string = "{ "
            let v604 : string = $"{v603}"
            let v607 : string = v602.l0
            let v608 : string = v607 + v604 
            v602.l0 <- v608
            let v609 : string = "exit_code"
            let v610 : string = $"{v609}"
            let v613 : string = v602.l0
            let v614 : string = v613 + v610 
            v602.l0 <- v614
            let v615 : string = " = "
            let v616 : string = $"{v615}"
            let v619 : string = v602.l0
            let v620 : string = v619 + v616 
            v602.l0 <- v620
            let v621 : string = $"{v16}"
            let v624 : string = v602.l0
            let v625 : string = v624 + v621 
            v602.l0 <- v625
            let v626 : string = "; "
            let v627 : string = $"{v626}"
            let v630 : string = v602.l0
            let v631 : string = v630 + v627 
            v602.l0 <- v631
            let v632 : string = "repl_result"
            let v633 : string = $"{v632}"
            let v636 : string = v602.l0
            let v637 : string = v636 + v633 
            v602.l0 <- v637
            let v638 : string = $"{v615}"
            let v641 : string = v602.l0
            let v642 : string = v641 + v638 
            v602.l0 <- v642
            let v643 : string = $"{v17}"
            let v646 : string = v602.l0
            let v647 : string = v646 + v643 
            v602.l0 <- v647
            let v648 : string = $"{v626}"
            let v651 : string = v602.l0
            let v652 : string = v651 + v648 
            v602.l0 <- v652
            let v653 : string = "retry"
            let v654 : string = $"{v653}"
            let v657 : string = v602.l0
            let v658 : string = v657 + v654 
            v602.l0 <- v658
            let v659 : string = $"{v615}"
            let v662 : string = v602.l0
            let v663 : string = v662 + v659 
            v602.l0 <- v663
            let v664 : string = $"{v600}"
            let v667 : string = v602.l0
            let v668 : string = v667 + v664 
            v602.l0 <- v668
            let v669 : string = " }"
            let v670 : string = $"{v669}"
            let v673 : string = v602.l0
            let v674 : string = v673 + v670 
            v602.l0 <- v674
            let v675 : string = v602.l0
            let v676 : (unit -> string) = closure50()
            let v677 : string = $"{v463} {v593} #{v599} %s{v676 ()} / {v675}"
            let v680 : char list = []
            let v681 : (char list -> (char [])) = List.toArray
            let v682 : (char []) = v681 v680
            let v685 : string = v677.TrimStart v682 
            let v703 : char list = []
            let v704 : char list = '/' :: v703 
            let v707 : char list = ' ' :: v704 
            let v710 : (char list -> (char [])) = List.toArray
            let v711 : (char []) = v710 v707
            let v714 : string = v685.TrimEnd v711 
            let v732 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v733 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v714 v733 
            let _v732 = () 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v734 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v714 v734 
            let _v732 = () 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v735 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v714 v735 
            let _v732 = () 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            System.Console.WriteLine v714 
            let _v732 = () 
            #endif
#if FABLE_COMPILER_PYTHON
            System.Console.WriteLine v714 
            let _v732 = () 
            #endif
#else
            System.Console.WriteLine v714 
            let _v732 = () 
            #endif
            _v732 
            let v736 : (string -> unit) = v34.l0
            v736 v714
        let v737 : uint8 = v3 + 1uy
        method91(v0, v1, v2, v737)
and closure51 () () : string =
    let v0 : string = "spiral_builder.run / dib / jupyter nbconvert"
    v0
and closure52 () () : string =
    let v0 : string = "spiral_builder.run / dib / html cell ids"
    v0
and closure53 () () : string =
    let v0 : string = "spiral_builder.run / dib"
    v0
and method92 () : string =
    let v0 : string = "wasm"
    v0
and method93 () : string =
    let v0 : string = "contract"
    v0
and method95 () : string =
    let v0 : string = ""
    v0
and method96 () : string =
    let v0 : string = ""
    v0
and method94 (v0 : string) : string =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v3 : (System.Text.Encoding -> (string -> (uint8 []))) = _.GetBytes
    let v4 : (string -> (uint8 [])) = v3 v2
    let v5 : (uint8 []) = v4 v0
    let v6 : string = "$0.to_vec()"
    let v7 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "std::io::Cursor::new(v7)"
    let v9 : std_io_Cursor<Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "std::io::BufReader::new(v9)"
    let v11 : std_io_BufReader<std_io_Cursor<Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr () v10 
    let v12 : string = "true; let mut v11 = v11"
    let v13 : bool = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = "let result : sha2::Sha256 = sha2::Digest::new()"
    Fable.Core.RustInterop.emitRustExpr () v14 
    let v15 : string = "result"
    let v16 : sha2_Sha256 = Fable.Core.RustInterop.emitRustExpr () v15 
    let v17 : string = "true; let mut v16 = v16"
    let v18 : bool = Fable.Core.RustInterop.emitRustExpr () v17 
    let v19 : unativeint = 0 |> unativeint 
    let v22 : string = "[$0; 1024]"
    let v23 : Slice'<uint8> = Fable.Core.RustInterop.emitRustExpr 0uy v22 
    let v24 : string = "true; loop { // rust.loop"
    let v25 : bool = Fable.Core.RustInterop.emitRustExpr () v24 
    let v26 : string = "true; let mut v23 = v23"
    let v27 : bool = Fable.Core.RustInterop.emitRustExpr () v26 
    let v28 : string = "std::io::Read::read(&mut v11, &mut v23)"
    let v29 : Result<unativeint, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v28 
    let v30 : string = "$0.unwrap()"
    let v31 : unativeint = Fable.Core.RustInterop.emitRustExpr v29 v30 
    let v32 : bool = v31 = v19 
    if v32 then
        let v35 : string = "true; break"
        let v36 : bool = Fable.Core.RustInterop.emitRustExpr () v35 
        ()
    let v37 : string = "v23.len()"
    let v38 : unativeint = Fable.Core.RustInterop.emitRustExpr () v37 
    let v39 : uint8 = v38 |> uint8 
    let v42 : unativeint = v31 |> unativeint 
    let v45 : unativeint = v42 |> unbox<unativeint>
    let v48 : bool = v45 = v38 
    let v55 : Ref<Slice'<uint8>> =
        if v48 then
            let v51 : string = "&v23[v19..]"
            let v52 : Ref<Slice'<uint8>> = Fable.Core.RustInterop.emitRustExpr () v51 
            v52
        else
            let v53 : string = "&v23[$0..$1]"
            let v54 : Ref<Slice'<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v19, v42) v53 
            v54
    let v56 : string = "sha2::Digest::update(&mut v16, v55)"
    Fable.Core.RustInterop.emitRustExpr () v56 
    let v57 : string = "true; } // rust.loop"
    let v58 : bool = Fable.Core.RustInterop.emitRustExpr () v57 
    let v59 : string = "true; } // rust.loop"
    let v60 : bool = Fable.Core.RustInterop.emitRustExpr () v59 
    let v61 : string = "true; } // rust.loop"
    let v62 : bool = Fable.Core.RustInterop.emitRustExpr () v61 
    let v63 : string = "true; { // rust.loop"
    let v64 : bool = Fable.Core.RustInterop.emitRustExpr () v63 
    let v65 : string = "true; { // rust.loop"
    let v66 : bool = Fable.Core.RustInterop.emitRustExpr () v65 
    let v67 : string = "&sha2::Digest::finalize(v16)"
    let v68 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr () v67 
    let v69 : string = "$0.iter().map(|x| *x).collect::<Vec<_>>()"
    let v70 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v68 v69 
    let v71 : string = "true; let _result : Vec<_> = v70.into_iter().map(|x| { //"
    let v72 : bool = Fable.Core.RustInterop.emitRustExpr () v71 
    let v73 : string = "x"
    let v74 : uint8 = Fable.Core.RustInterop.emitRustExpr () v73 
    let v75 : string = "format!(\"{:02x}\", $0)"
    let v76 : std_string_String = Fable.Core.RustInterop.emitRustExpr v74 v75 
    let v77 : string = "fable_library_rust::String_::fromString($0)"
    let v78 : string = Fable.Core.RustInterop.emitRustExpr v76 v77 
    let v79 : string = "true; $0 }).collect::<Vec<_>>()"
    let v80 : bool = Fable.Core.RustInterop.emitRustExpr v78 v79 
    let v81 : string = "_result"
    let v82 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v81 
    let v83 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v84 : (string []) = Fable.Core.RustInterop.emitRustExpr v82 v83 
    let v85 : string seq = seq { for i = 0 to v84.Length - 1 do yield v84.[i] }
    let v88 : string = method95()
    let v89 : (string -> (string seq -> string)) = String.concat
    let v90 : (string seq -> string) = v89 v88
    let v91 : string = v90 v85
    let v94 : Result<string, std_io_Error> = Ok v91 
    let v95 : string = "$0.unwrap()"
    let v96 : string = Fable.Core.RustInterop.emitRustExpr v94 v95 
    let _v1 = v96 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v97 : string = null |> unbox<string>
    let _v1 = v97 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v100 : string = null |> unbox<string>
    let _v1 = v100 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v103 : string = "crypto"
    let v104 : ICryptoCreateHash = Fable.Core.JsInterop.importAll v103 
    let v105 : string = "v104.createHash($0)"
    let v106 : string = "sha256"
    let v107 : obj = Fable.Core.JsInterop.emitJsExpr v106 v105 
    let v108 : string = "$0.update($1, 'utf8')"
    let v109 : obj = Fable.Core.JsInterop.emitJsExpr struct (v107, v0) v108 
    let v110 : string = "$0.digest($1)"
    let v111 : string = "hex"
    let v112 : string = Fable.Core.JsInterop.emitJsExpr struct (v109, v111) v110 
    let _v1 = v112 
    #endif
#if FABLE_COMPILER_PYTHON
    let v113 : string = "hashlib"
    let v114 : IHashlibSha256 = Fable.Core.PyInterop.importAll v113 
    let v115 : string = "v114.sha256()"
    let v116 : obj = Fable.Core.PyInterop.emitPyExpr () v115 
    let v119 : string = "$0.encode($1)"
    let v120 : string = "utf-8"
    let v121 : string = Fable.Core.PyInterop.emitPyExpr struct (v0, v120) v119 
    let v124 : string = "v116.update($0)"
    Fable.Core.PyInterop.emitPyExpr v121 v124 
    let v125 : string = "v116.hexdigest()"
    let v126 : string = Fable.Core.PyInterop.emitPyExpr () v125 
    let _v1 = v126 
    #endif
#else
    let v129 : (unit -> System.Security.Cryptography.SHA256) = System.Security.Cryptography.SHA256.Create
    let v130 : System.Security.Cryptography.SHA256 = v129 ()
    use v130 = v130 
    let v131 : System.Security.Cryptography.SHA256 = v130 
    let v132 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v133 : (System.Text.Encoding -> (string -> (uint8 []))) = _.GetBytes
    let v134 : (string -> (uint8 [])) = v133 v132
    let v135 : (uint8 []) = v134 v0
    let v136 : ((uint8 []) -> (uint8 [])) = v131.ComputeHash
    let v137 : (uint8 []) = v136 v135
    let v138 : int32 = v137.Length
    let v139 : (string []) = Array.zeroCreate<string> (v138)
    let v140 : Mut5 = {l0 = 0} : Mut5
    while method43(v138, v140) do
        let v142 : int32 = v140.l0
        let v143 : uint8 = v137.[int v142]
        let v144 : (string -> string) = v143.ToString
        let v145 : string = "x2"
        let v146 : string = v144 v145
        v139.[int v142] <- v146
        let v147 : int32 = v142 + 1
        v140.l0 <- v147
        ()
    let v148 : string seq = seq { for i = 0 to v139.Length - 1 do yield v139.[i] }
    let v151 : string = method96()
    let v152 : (string -> (string seq -> string)) = String.concat
    let v153 : (string seq -> string) = v152 v151
    let v154 : string = v153 v148
    let _v1 = v154 
    #endif
    let v157 : string = _v1 
    v157
and method98 () : string =
    let v0 : string = "hh:mm"
    v0
and method99 () : string =
    let v0 : string = "yyyyMMdd-HHmm-ssff-ffff-f"
    v0
and method100 () : string =
    let v0 : string = "hhmm"
    v0
and method97 (v0 : System.Guid, v1 : System.DateTime) : System.Guid =
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : System.DateTime = System.DateTime (1970, 1, 1, 0, 0, 0, System.DateTimeKind.Utc)
    let v6 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v7 : System.DateTime = v6 v3
    let v10 : System.DateTimeKind = System.DateTimeKind.Local
    let v11 : System.DateTime = System.DateTime.SpecifyKind (v1, v10)
    let v12 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v13 : System.DateTime = v12 v11
    let v16 : (System.DateTime -> int64) = _.Ticks
    let v17 : int64 = v16 v13
    let v20 : (System.DateTime -> int64) = _.Ticks
    let v21 : int64 = v20 v7
    let v24 : int64 = v17 - v21
    let v25 : int64 = v24 / 10L
    let v26 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v27 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v25 v26 
    let v28 : US35 option = None
    let _v28 = ref v28 
    match v27 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v29 : chrono_DateTime<chrono_Utc> = x
    let v30 : US35 = US35_0(v29)
    v30 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v28.Value <- x
    let v31 : US35 option = _v28.Value 
    let v42 : US35 = US35_1
    let v43 : US35 = v31 |> Option.defaultValue v42 
    let v63 : US1 =
        match v43 with
        | US35_1 -> (* None *)
            US1_1
        | US35_0(v47) -> (* Some *)
            let v48 : string = "$0.naive_utc()"
            let v49 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v47 v48 
            let v50 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
            let v51 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v49 v50 
            let v52 : string = "%Y%m%d-%H%M-%S%f"
            let v53 : string = "r#\"" + v52 + "\"#"
            let v54 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v53 
            let v55 : string = "$0.format($1).to_string()"
            let v56 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v51, v54) v55 
            let v57 : string = "fable_library_rust::String_::fromString($0)"
            let v58 : string = Fable.Core.RustInterop.emitRustExpr v56 v57 
            let v59 : string = $"{v58.[0..17]}-{v58.[18..21]}-{v58.[22]}"
            US1_0(v59)
    let v67 : string =
        match v63 with
        | US1_1 -> (* None *)
            let v65 : string = ""
            v65
        | US1_0(v64) -> (* Some *)
            v64
    let v68 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v69 : string = "0i64.into()"
    let v70 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v69 
    let _v68 = v70 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v71 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v68 = v71 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v74 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v68 = v74 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v77 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v68 = v77 
    #endif
#if FABLE_COMPILER_PYTHON
    let v80 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v68 = v80 
    #endif
#else
    let v83 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v68 = v83 
    #endif
    let v84 : System.TimeZoneInfo = _v68 
    let v89 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v90 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v91 : System.TimeSpan = v90 ()
    let _v89 = v91 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v94 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v95 : System.TimeSpan = v94 ()
    let _v89 = v95 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v98 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v99 : System.TimeSpan = v98 ()
    let _v89 = v99 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v102 : US10 = US10_0
    let v103 : US11 = US11_3(v102)
    let v104 : string = $"date_time.get_utc_offset / target: {v103}"
    let v105 : System.TimeSpan = failwith<System.TimeSpan> v104
    let _v89 = v105 
    #endif
#if FABLE_COMPILER_PYTHON
    let v106 : US10 = US10_0
    let v107 : US11 = US11_4(v106)
    let v108 : string = $"date_time.get_utc_offset / target: {v107}"
    let v109 : System.TimeSpan = failwith<System.TimeSpan> v108
    let _v89 = v109 
    #endif
#else
    let v110 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v111 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v112 : string = "0i64.into()"
    let v113 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v112 
    let _v111 = v113 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v114 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v111 = v114 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v117 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v111 = v117 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v120 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v111 = v120 
    #endif
#if FABLE_COMPILER_PYTHON
    let v123 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v111 = v123 
    #endif
#else
    let v126 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v111 = v126 
    #endif
    let v127 : System.TimeZoneInfo = _v111 
    let v132 : (System.DateTime -> System.TimeSpan) = v110 v127
    let v133 : System.TimeSpan = v132 v13
    let _v89 = v133 
    #endif
    let v134 : System.TimeSpan = _v89 
    let v140 : (System.TimeSpan -> int32) = _.Hours
    let v141 : int32 = v140 v134
    let v144 : bool = v141 > 0
    let v145 : uint8 =
        if v144 then
            1uy
        else
            0uy
    let v146 : string = method98()
    let v147 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v148 : string = v134.ToString v146 
    let _v147 = v148 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v149 : string = v134.ToString v146 
    let _v147 = v149 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v150 : string = v134.ToString v146 
    let _v147 = v150 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v151 : string = v134.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v147 = v151 
    #endif
#if FABLE_COMPILER_PYTHON
    let v152 : string = v134.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v147 = v152 
    #endif
#else
    let v153 : string = v134.ToString v146 
    let _v147 = v153 
    #endif
    let v154 : string = _v147 
    let v157 : string = $"{v145}{v154.[0..1]}{v154.[3..4]}"
    let v158 : (System.Guid -> string) = _.ToString()
    let v159 : string = v158 v0
    let v162 : System.Guid = System.Guid $"{v67}{v157}{v159.[v67.Length + v157.Length..]}"
    let _v2 = v162 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v163 : System.DateTime = System.DateTime (1970, 1, 1, 0, 0, 0, System.DateTimeKind.Utc)
    let v166 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v167 : System.DateTime = v166 v163
    let v170 : System.DateTimeKind = System.DateTimeKind.Local
    let v171 : System.DateTime = System.DateTime.SpecifyKind (v1, v170)
    let v172 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v173 : System.DateTime = v172 v171
    let v176 : (System.DateTime -> int64) = _.Ticks
    let v177 : int64 = v176 v173
    let v180 : (System.DateTime -> int64) = _.Ticks
    let v181 : int64 = v180 v167
    let v184 : int64 = v177 - v181
    let v185 : int64 = v184 / 10L
    let v186 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v187 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v185 v186 
    let v188 : US35 option = None
    let _v188 = ref v188 
    match v187 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v189 : chrono_DateTime<chrono_Utc> = x
    let v190 : US35 = US35_0(v189)
    v190 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v188.Value <- x
    let v191 : US35 option = _v188.Value 
    let v202 : US35 = US35_1
    let v203 : US35 = v191 |> Option.defaultValue v202 
    let v223 : US1 =
        match v203 with
        | US35_1 -> (* None *)
            US1_1
        | US35_0(v207) -> (* Some *)
            let v208 : string = "$0.naive_utc()"
            let v209 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v207 v208 
            let v210 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
            let v211 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v209 v210 
            let v212 : string = "%Y%m%d-%H%M-%S%f"
            let v213 : string = "r#\"" + v212 + "\"#"
            let v214 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v213 
            let v215 : string = "$0.format($1).to_string()"
            let v216 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v211, v214) v215 
            let v217 : string = "fable_library_rust::String_::fromString($0)"
            let v218 : string = Fable.Core.RustInterop.emitRustExpr v216 v217 
            let v219 : string = $"{v218.[0..17]}-{v218.[18..21]}-{v218.[22]}"
            US1_0(v219)
    let v227 : string =
        match v223 with
        | US1_1 -> (* None *)
            let v225 : string = ""
            v225
        | US1_0(v224) -> (* Some *)
            v224
    let v228 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v229 : string = "0i64.into()"
    let v230 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v229 
    let _v228 = v230 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v231 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v228 = v231 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v234 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v228 = v234 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v237 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v228 = v237 
    #endif
#if FABLE_COMPILER_PYTHON
    let v240 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v228 = v240 
    #endif
#else
    let v243 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v228 = v243 
    #endif
    let v244 : System.TimeZoneInfo = _v228 
    let v249 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v250 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v251 : System.TimeSpan = v250 ()
    let _v249 = v251 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v254 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v255 : System.TimeSpan = v254 ()
    let _v249 = v255 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v258 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v259 : System.TimeSpan = v258 ()
    let _v249 = v259 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v262 : US10 = US10_0
    let v263 : US11 = US11_3(v262)
    let v264 : string = $"date_time.get_utc_offset / target: {v263}"
    let v265 : System.TimeSpan = failwith<System.TimeSpan> v264
    let _v249 = v265 
    #endif
#if FABLE_COMPILER_PYTHON
    let v266 : US10 = US10_0
    let v267 : US11 = US11_4(v266)
    let v268 : string = $"date_time.get_utc_offset / target: {v267}"
    let v269 : System.TimeSpan = failwith<System.TimeSpan> v268
    let _v249 = v269 
    #endif
#else
    let v270 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v271 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v272 : string = "0i64.into()"
    let v273 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v272 
    let _v271 = v273 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v274 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v271 = v274 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v277 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v271 = v277 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v280 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v271 = v280 
    #endif
#if FABLE_COMPILER_PYTHON
    let v283 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v271 = v283 
    #endif
#else
    let v286 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v271 = v286 
    #endif
    let v287 : System.TimeZoneInfo = _v271 
    let v292 : (System.DateTime -> System.TimeSpan) = v270 v287
    let v293 : System.TimeSpan = v292 v173
    let _v249 = v293 
    #endif
    let v294 : System.TimeSpan = _v249 
    let v300 : (System.TimeSpan -> int32) = _.Hours
    let v301 : int32 = v300 v294
    let v304 : bool = v301 > 0
    let v305 : uint8 =
        if v304 then
            1uy
        else
            0uy
    let v306 : string = method98()
    let v307 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v308 : string = v294.ToString v306 
    let _v307 = v308 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v309 : string = v294.ToString v306 
    let _v307 = v309 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v310 : string = v294.ToString v306 
    let _v307 = v310 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v311 : string = v294.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v307 = v311 
    #endif
#if FABLE_COMPILER_PYTHON
    let v312 : string = v294.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v307 = v312 
    #endif
#else
    let v313 : string = v294.ToString v306 
    let _v307 = v313 
    #endif
    let v314 : string = _v307 
    let v317 : string = $"{v305}{v314.[0..1]}{v314.[3..4]}"
    let v318 : (System.Guid -> string) = _.ToString()
    let v319 : string = v318 v0
    let v322 : System.Guid = System.Guid $"{v227}{v317}{v319.[v227.Length + v317.Length..]}"
    let _v2 = v322 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v323 : System.Guid = null |> unbox<System.Guid>
    let _v2 = v323 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v326 : string = method99()
    let v327 : (string -> string) = v1.ToString
    let v328 : string = v327 v326
    let v331 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v332 : string = "0i64.into()"
    let v333 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v332 
    let _v331 = v333 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v334 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v331 = v334 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v337 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v331 = v337 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v340 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v331 = v340 
    #endif
#if FABLE_COMPILER_PYTHON
    let v343 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v331 = v343 
    #endif
#else
    let v346 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v331 = v346 
    #endif
    let v347 : System.TimeZoneInfo = _v331 
    let v352 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v353 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v354 : System.TimeSpan = v353 ()
    let _v352 = v354 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v357 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v358 : System.TimeSpan = v357 ()
    let _v352 = v358 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v361 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v362 : System.TimeSpan = v361 ()
    let _v352 = v362 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v365 : US10 = US10_0
    let v366 : US11 = US11_3(v365)
    let v367 : string = $"date_time.get_utc_offset / target: {v366}"
    let v368 : System.TimeSpan = failwith<System.TimeSpan> v367
    let _v352 = v368 
    #endif
#if FABLE_COMPILER_PYTHON
    let v369 : US10 = US10_0
    let v370 : US11 = US11_4(v369)
    let v371 : string = $"date_time.get_utc_offset / target: {v370}"
    let v372 : System.TimeSpan = failwith<System.TimeSpan> v371
    let _v352 = v372 
    #endif
#else
    let v373 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v374 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v375 : string = "0i64.into()"
    let v376 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v375 
    let _v374 = v376 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v377 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v374 = v377 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v380 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v374 = v380 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v383 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v374 = v383 
    #endif
#if FABLE_COMPILER_PYTHON
    let v386 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v374 = v386 
    #endif
#else
    let v389 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v374 = v389 
    #endif
    let v390 : System.TimeZoneInfo = _v374 
    let v395 : (System.DateTime -> System.TimeSpan) = v373 v390
    let v396 : System.TimeSpan = v395 v1
    let _v352 = v396 
    #endif
    let v397 : System.TimeSpan = _v352 
    let v403 : (System.TimeSpan -> int32) = _.Hours
    let v404 : int32 = v403 v397
    let v407 : bool = v404 > 0
    let v408 : uint8 =
        if v407 then
            1uy
        else
            0uy
    let v409 : string = method100()
    let v410 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v411 : string = v397.ToString v409 
    let _v410 = v411 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v412 : string = v397.ToString v409 
    let _v410 = v412 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v413 : string = v397.ToString v409 
    let _v410 = v413 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v414 : string = v397.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v410 = v414 
    #endif
#if FABLE_COMPILER_PYTHON
    let v415 : string = v397.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v410 = v415 
    #endif
#else
    let v416 : string = v397.ToString v409 
    let _v410 = v416 
    #endif
    let v417 : string = _v410 
    let v420 : string = $"{v408}{v417}"
    let v421 : (System.Guid -> string) = _.ToString()
    let v422 : string = v421 v0
    let v425 : System.Guid = System.Guid $"{v328}{v420}{v422.[v328.Length + v420.Length..]}"
    let _v2 = v425 
    #endif
#if FABLE_COMPILER_PYTHON
    let v426 : string = method99()
    let v427 : (string -> string) = v1.ToString
    let v428 : string = v427 v426
    let v431 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v432 : string = "0i64.into()"
    let v433 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v432 
    let _v431 = v433 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v434 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v431 = v434 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v437 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v431 = v437 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v440 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v431 = v440 
    #endif
#if FABLE_COMPILER_PYTHON
    let v443 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v431 = v443 
    #endif
#else
    let v446 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v431 = v446 
    #endif
    let v447 : System.TimeZoneInfo = _v431 
    let v452 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v453 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v454 : System.TimeSpan = v453 ()
    let _v452 = v454 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v457 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v458 : System.TimeSpan = v457 ()
    let _v452 = v458 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v461 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v462 : System.TimeSpan = v461 ()
    let _v452 = v462 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v465 : US10 = US10_0
    let v466 : US11 = US11_3(v465)
    let v467 : string = $"date_time.get_utc_offset / target: {v466}"
    let v468 : System.TimeSpan = failwith<System.TimeSpan> v467
    let _v452 = v468 
    #endif
#if FABLE_COMPILER_PYTHON
    let v469 : US10 = US10_0
    let v470 : US11 = US11_4(v469)
    let v471 : string = $"date_time.get_utc_offset / target: {v470}"
    let v472 : System.TimeSpan = failwith<System.TimeSpan> v471
    let _v452 = v472 
    #endif
#else
    let v473 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v474 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v475 : string = "0i64.into()"
    let v476 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v475 
    let _v474 = v476 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v477 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v474 = v477 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v480 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v474 = v480 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v483 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v474 = v483 
    #endif
#if FABLE_COMPILER_PYTHON
    let v486 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v474 = v486 
    #endif
#else
    let v489 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v474 = v489 
    #endif
    let v490 : System.TimeZoneInfo = _v474 
    let v495 : (System.DateTime -> System.TimeSpan) = v473 v490
    let v496 : System.TimeSpan = v495 v1
    let _v452 = v496 
    #endif
    let v497 : System.TimeSpan = _v452 
    let v503 : (System.TimeSpan -> int32) = _.Hours
    let v504 : int32 = v503 v497
    let v507 : bool = v504 > 0
    let v508 : uint8 =
        if v507 then
            1uy
        else
            0uy
    let v509 : string = method100()
    let v510 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v511 : string = v497.ToString v509 
    let _v510 = v511 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v512 : string = v497.ToString v509 
    let _v510 = v512 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v513 : string = v497.ToString v509 
    let _v510 = v513 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v514 : string = v497.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v510 = v514 
    #endif
#if FABLE_COMPILER_PYTHON
    let v515 : string = v497.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v510 = v515 
    #endif
#else
    let v516 : string = v497.ToString v509 
    let _v510 = v516 
    #endif
    let v517 : string = _v510 
    let v520 : string = $"{v508}{v517}"
    let v521 : (System.Guid -> string) = _.ToString()
    let v522 : string = v521 v0
    let v525 : System.Guid = System.Guid $"{v428}{v520}{v522.[v428.Length + v520.Length..]}"
    let _v2 = v525 
    #endif
#else
    let v526 : string = method99()
    let v527 : (string -> string) = v1.ToString
    let v528 : string = v527 v526
    let v531 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v532 : string = "0i64.into()"
    let v533 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v532 
    let _v531 = v533 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v534 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v531 = v534 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v537 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v531 = v537 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v540 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v531 = v540 
    #endif
#if FABLE_COMPILER_PYTHON
    let v543 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v531 = v543 
    #endif
#else
    let v546 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v531 = v546 
    #endif
    let v547 : System.TimeZoneInfo = _v531 
    let v552 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v553 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v554 : System.TimeSpan = v553 ()
    let _v552 = v554 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v557 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v558 : System.TimeSpan = v557 ()
    let _v552 = v558 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v561 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v562 : System.TimeSpan = v561 ()
    let _v552 = v562 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v565 : US10 = US10_0
    let v566 : US11 = US11_3(v565)
    let v567 : string = $"date_time.get_utc_offset / target: {v566}"
    let v568 : System.TimeSpan = failwith<System.TimeSpan> v567
    let _v552 = v568 
    #endif
#if FABLE_COMPILER_PYTHON
    let v569 : US10 = US10_0
    let v570 : US11 = US11_4(v569)
    let v571 : string = $"date_time.get_utc_offset / target: {v570}"
    let v572 : System.TimeSpan = failwith<System.TimeSpan> v571
    let _v552 = v572 
    #endif
#else
    let v573 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v574 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v575 : string = "0i64.into()"
    let v576 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v575 
    let _v574 = v576 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v577 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v574 = v577 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v580 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v574 = v580 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v583 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v574 = v583 
    #endif
#if FABLE_COMPILER_PYTHON
    let v586 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v574 = v586 
    #endif
#else
    let v589 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v574 = v589 
    #endif
    let v590 : System.TimeZoneInfo = _v574 
    let v595 : (System.DateTime -> System.TimeSpan) = v573 v590
    let v596 : System.TimeSpan = v595 v1
    let _v552 = v596 
    #endif
    let v597 : System.TimeSpan = _v552 
    let v603 : (System.TimeSpan -> int32) = _.Hours
    let v604 : int32 = v603 v597
    let v607 : bool = v604 > 0
    let v608 : uint8 =
        if v607 then
            1uy
        else
            0uy
    let v609 : string = method100()
    let v610 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v611 : string = v597.ToString v609 
    let _v610 = v611 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v612 : string = v597.ToString v609 
    let _v610 = v612 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v613 : string = v597.ToString v609 
    let _v610 = v613 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v614 : string = v597.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v610 = v614 
    #endif
#if FABLE_COMPILER_PYTHON
    let v615 : string = v597.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v610 = v615 
    #endif
#else
    let v616 : string = v597.ToString v609 
    let _v610 = v616 
    #endif
    let v617 : string = _v610 
    let v620 : string = $"{v608}{v617}"
    let v621 : (System.Guid -> string) = _.ToString()
    let v622 : string = v621 v0
    let v625 : System.Guid = System.Guid $"{v528}{v620}{v622.[v528.Length + v620.Length..]}"
    let _v2 = v625 
    #endif
    let v626 : System.Guid = _v2 
    v626
and method101 (v0 : string, v1 : string) : unit =
    let v2 : bool = method19(v0)
    let v3 : bool = v2 = false
    if v3 then
        let v4 : System.IDisposable = method28(v0)
        ()
    let v5 : string = method24(v1)
    let v6 : bool = method19(v5)
    let v7 : bool = v6 = false
    if v7 then
        let v8 : System.IDisposable = method28(v5)
        ()
    let v9 : bool = method19(v1)
    let v14 : bool =
        if v9 then
            let v10 : string = "std::fs::read_link(&*$0)"
            let v11 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1 v10 
            let v12 : string = "v11.is_err()"
            let v13 : bool = Fable.Core.RustInterop.emitRustExpr () v12 
            v13
        else
            false
    if v14 then
        let v15 : bool = true
        method32(v15, v1)
    let v16 : bool = method19(v1)
    let v17 : bool = v16 = false
    if v17 then
        let v18 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v19 : bool = true
        let mutable _v19 : unit option = None 
        
#if _FREEBSD
        let v20 : string = "std::os::unix::fs::symlink(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v20 
        () 
        #endif
#if _LINUX
        let v21 : string = "std::os::unix::fs::symlink(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v21 
        () 
        #endif
#if _OSX
        let v22 : string = "std::os::unix::fs::symlink(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v22 
        () 
        #endif
#if _WINDOWS
        let v23 : string = "std::os::windows::fs::symlink_dir(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v23 
        () 
        #endif
        |> fun x -> _v19 <- Some x
        match _v19 with Some x -> x | None -> failwith "runtime.run_platform / _v19=None"
        let _v18 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let _v18 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let _v18 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let _v18 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        let _v18 = () 
        #endif
#else
        let v24 : System.IO.FileSystemInfo = System.IO.Directory.CreateSymbolicLink (v1, v0)
        let _v18 = () 
        #endif
        _v18 
        ()
and closure54 () () : string =
    let v0 : string = "common.retry_fn' / loop"
    v0
and method104 (v0 : uint8, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option, v8 : uint8) : struct (int32 * string) =
    let struct (v9 : int32, v10 : string) = method40(v1, v2, v3, v4, v5, v6, v7)
    let v11 : bool = v9 = 0
    let v14 : US36 =
        if v11 then
            US36_0(v9, v10)
        else
            US36_1(v9, v10)
    let struct (v22 : bool, v23 : int32, v24 : string) =
        match v14 with
        | US36_1(v17, v18) -> (* Error *)
            struct (true, v17, v18)
        | US36_0(v15, v16) -> (* Ok *)
            struct (false, v15, v16)
    let v25 : bool = v22 = false
    let v27 : bool =
        if v25 then
            true
        else
            let v26 : bool = v8 >= v0
            v26
    if v27 then
        struct (v23, v24)
    else
        let v28 : bool = State.trace_state.IsNone
        if v28 then
            let v29 : US0 = US0_0
            let struct (v30 : Mut0, v31 : Mut1, v32 : Mut2, v33 : Mut3, v34 : int64 option) = method1(v29)
            let v35 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v30, v31, v32, v33, v34) 
            State.trace_state <- v35 
            ()
        let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : int64 option) = State.trace_state.Value
        let v55 : bool = State.trace_state.IsNone
        if v55 then
            let v56 : US0 = US0_0
            let struct (v57 : Mut0, v58 : Mut1, v59 : Mut2, v60 : Mut3, v61 : int64 option) = method1(v56)
            let v62 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v57, v58, v59, v60, v61) 
            State.trace_state <- v62 
            ()
        let struct (v67 : Mut0, v68 : Mut1, v69 : Mut2, v70 : Mut3, v71 : int64 option) = State.trace_state.Value
        let v82 : US0 = v70.l0
        let v83 : bool = v69.l0
        let v84 : bool = v83 = false
        let v87 : bool =
            if v84 then
                false
            else
                let v85 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v82
                let v86 : bool = 1 >= v85
                v86
        if v87 then
            let v88 : int64 = v40.l0
            let v89 : int64 = v88 + 1L
            v40.l0 <- v89
            let v90 : bool = State.trace_state.IsNone
            if v90 then
                let v91 : US0 = US0_0
                let struct (v92 : Mut0, v93 : Mut1, v94 : Mut2, v95 : Mut3, v96 : int64 option) = method1(v91)
                let v97 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v92, v93, v94, v95, v96) 
                State.trace_state <- v97 
                ()
            let struct (v102 : Mut0, v103 : Mut1, v104 : Mut2, v105 : Mut3, v106 : int64 option) = State.trace_state.Value
            let v117 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v118 : US3 option = None
            let _v118 = ref v118 
            match v106 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v119 : int64 = x
            let v120 : US3 = US3_0(v119)
            v120 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v118.Value <- x
            let v121 : US3 option = _v118.Value 
            let v132 : US3 = US3_1
            let v133 : US3 = v121 |> Option.defaultValue v132 
            let v173 : System.DateTime =
                match v133 with
                | US3_1 -> (* None *)
                    let v169 : System.DateTime = System.DateTime.Now
                    v169
                | US3_0(v137) -> (* Some *)
                    let v138 : System.DateTime = System.DateTime.Now
                    let v141 : (System.DateTime -> int64) = _.Ticks
                    let v142 : int64 = v141 v138
                    let v145 : int64 = v142 - v137
                    let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v147 : System.TimeSpan = v146 v145
                    let v150 : (System.TimeSpan -> int32) = _.Hours
                    let v151 : int32 = v150 v147
                    let v154 : (System.TimeSpan -> int32) = _.Minutes
                    let v155 : int32 = v154 v147
                    let v158 : (System.TimeSpan -> int32) = _.Seconds
                    let v159 : int32 = v158 v147
                    let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v163 : int32 = v162 v147
                    let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                    v166
            let v174 : string = method6()
            let v177 : (string -> string) = v173.ToString
            let v178 : string = v177 v174
            let _v117 = v178 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v181 : US3 option = None
            let _v181 = ref v181 
            match v106 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v182 : int64 = x
            let v183 : US3 = US3_0(v182)
            v183 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v181.Value <- x
            let v184 : US3 option = _v181.Value 
            let v195 : US3 = US3_1
            let v196 : US3 = v184 |> Option.defaultValue v195 
            let v236 : System.DateTime =
                match v196 with
                | US3_1 -> (* None *)
                    let v232 : System.DateTime = System.DateTime.Now
                    v232
                | US3_0(v200) -> (* Some *)
                    let v201 : System.DateTime = System.DateTime.Now
                    let v204 : (System.DateTime -> int64) = _.Ticks
                    let v205 : int64 = v204 v201
                    let v208 : int64 = v205 - v200
                    let v209 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v210 : System.TimeSpan = v209 v208
                    let v213 : (System.TimeSpan -> int32) = _.Hours
                    let v214 : int32 = v213 v210
                    let v217 : (System.TimeSpan -> int32) = _.Minutes
                    let v218 : int32 = v217 v210
                    let v221 : (System.TimeSpan -> int32) = _.Seconds
                    let v222 : int32 = v221 v210
                    let v225 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v226 : int32 = v225 v210
                    let v229 : System.DateTime = System.DateTime (1, 1, 1, v214, v218, v222, v226)
                    v229
            let v237 : string = method6()
            let v240 : (string -> string) = v236.ToString
            let v241 : string = v240 v237
            let _v117 = v241 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v244 : string = $"near_sdk::env::block_timestamp()"
            let v245 : uint64 = Fable.Core.RustInterop.emitRustExpr () v244 
            let v246 : US3 option = None
            let _v246 = ref v246 
            match v106 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v247 : int64 = x
            let v248 : US3 = US3_0(v247)
            v248 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v246.Value <- x
            let v249 : US3 option = _v246.Value 
            let v260 : US3 = US3_1
            let v261 : US3 = v249 |> Option.defaultValue v260 
            let v270 : uint64 =
                match v261 with
                | US3_1 -> (* None *)
                    v245
                | US3_0(v265) -> (* Some *)
                    let v266 : (int64 -> uint64) = uint64
                    let v267 : uint64 = v266 v265
                    let v268 : uint64 = v245 - v267
                    v268
            let v271 : uint64 = v270 / 1000000000UL
            let v272 : uint64 = v271 % 60UL
            let v273 : uint64 = v271 / 60UL
            let v274 : uint64 = v273 % 60UL
            let v275 : uint64 = v271 / 3600UL
            let v276 : uint64 = v275 % 24UL
            let v277 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
            let v278 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v276, v274, v272) v277 
            let v279 : string = "fable_library_rust::String_::fromString($0)"
            let v280 : string = Fable.Core.RustInterop.emitRustExpr v278 v279 
            let _v117 = v280 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v281 : US3 option = None
            let _v281 = ref v281 
            match v106 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v282 : int64 = x
            let v283 : US3 = US3_0(v282)
            v283 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v281.Value <- x
            let v284 : US3 option = _v281.Value 
            let v295 : US3 = US3_1
            let v296 : US3 = v284 |> Option.defaultValue v295 
            let v336 : System.DateTime =
                match v296 with
                | US3_1 -> (* None *)
                    let v332 : System.DateTime = System.DateTime.Now
                    v332
                | US3_0(v300) -> (* Some *)
                    let v301 : System.DateTime = System.DateTime.Now
                    let v304 : (System.DateTime -> int64) = _.Ticks
                    let v305 : int64 = v304 v301
                    let v308 : int64 = v305 - v300
                    let v309 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v310 : System.TimeSpan = v309 v308
                    let v313 : (System.TimeSpan -> int32) = _.Hours
                    let v314 : int32 = v313 v310
                    let v317 : (System.TimeSpan -> int32) = _.Minutes
                    let v318 : int32 = v317 v310
                    let v321 : (System.TimeSpan -> int32) = _.Seconds
                    let v322 : int32 = v321 v310
                    let v325 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v326 : int32 = v325 v310
                    let v329 : System.DateTime = System.DateTime (1, 1, 1, v314, v318, v322, v326)
                    v329
            let v337 : string = method7()
            let v340 : (string -> string) = v336.ToString
            let v341 : string = v340 v337
            let _v117 = v341 
            #endif
#if FABLE_COMPILER_PYTHON
            let v344 : US3 option = None
            let _v344 = ref v344 
            match v106 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v345 : int64 = x
            let v346 : US3 = US3_0(v345)
            v346 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v344.Value <- x
            let v347 : US3 option = _v344.Value 
            let v358 : US3 = US3_1
            let v359 : US3 = v347 |> Option.defaultValue v358 
            let v399 : System.DateTime =
                match v359 with
                | US3_1 -> (* None *)
                    let v395 : System.DateTime = System.DateTime.Now
                    v395
                | US3_0(v363) -> (* Some *)
                    let v364 : System.DateTime = System.DateTime.Now
                    let v367 : (System.DateTime -> int64) = _.Ticks
                    let v368 : int64 = v367 v364
                    let v371 : int64 = v368 - v363
                    let v372 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v373 : System.TimeSpan = v372 v371
                    let v376 : (System.TimeSpan -> int32) = _.Hours
                    let v377 : int32 = v376 v373
                    let v380 : (System.TimeSpan -> int32) = _.Minutes
                    let v381 : int32 = v380 v373
                    let v384 : (System.TimeSpan -> int32) = _.Seconds
                    let v385 : int32 = v384 v373
                    let v388 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v389 : int32 = v388 v373
                    let v392 : System.DateTime = System.DateTime (1, 1, 1, v377, v381, v385, v389)
                    v392
            let v400 : string = method7()
            let v403 : (string -> string) = v399.ToString
            let v404 : string = v403 v400
            let _v117 = v404 
            #endif
#else
            let v407 : US3 option = None
            let _v407 = ref v407 
            match v106 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v408 : int64 = x
            let v409 : US3 = US3_0(v408)
            v409 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v407.Value <- x
            let v410 : US3 option = _v407.Value 
            let v421 : US3 = US3_1
            let v422 : US3 = v410 |> Option.defaultValue v421 
            let v462 : System.DateTime =
                match v422 with
                | US3_1 -> (* None *)
                    let v458 : System.DateTime = System.DateTime.Now
                    v458
                | US3_0(v426) -> (* Some *)
                    let v427 : System.DateTime = System.DateTime.Now
                    let v430 : (System.DateTime -> int64) = _.Ticks
                    let v431 : int64 = v430 v427
                    let v434 : int64 = v431 - v426
                    let v435 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v436 : System.TimeSpan = v435 v434
                    let v439 : (System.TimeSpan -> int32) = _.Hours
                    let v440 : int32 = v439 v436
                    let v443 : (System.TimeSpan -> int32) = _.Minutes
                    let v444 : int32 = v443 v436
                    let v447 : (System.TimeSpan -> int32) = _.Seconds
                    let v448 : int32 = v447 v436
                    let v451 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v452 : int32 = v451 v436
                    let v455 : System.DateTime = System.DateTime (1, 1, 1, v440, v444, v448, v452)
                    v455
            let v463 : string = method7()
            let v466 : (string -> string) = v462.ToString
            let v467 : string = v466 v463
            let _v117 = v467 
            #endif
            let v470 : string = _v117 
            let v535 : string = "Debug"
            let v536 : (unit -> string) = v535.ToLower
            let v537 : string = v536 ()
            let v540 : string = v537.PadLeft (7, ' ')
            let v554 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v555 : string = "inline_colorization::color_bright_blue"
            let v556 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v555 
            let v557 : string = "&*$0"
            let v558 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v540 v557 
            let v559 : string = "inline_colorization::color_reset"
            let v560 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v559 
            let v561 : string = "\"{v556}{v558}{v560}\""
            let v562 : string = @$"format!(" + v561 + ")"
            let v563 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v562 
            let v564 : string = "fable_library_rust::String_::fromString($0)"
            let v565 : string = Fable.Core.RustInterop.emitRustExpr v563 v564 
            let _v554 = v565 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v566 : string = "inline_colorization::color_bright_blue"
            let v567 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v566 
            let v568 : string = "&*$0"
            let v569 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v540 v568 
            let v570 : string = "inline_colorization::color_reset"
            let v571 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v570 
            let v572 : string = "\"{v567}{v569}{v571}\""
            let v573 : string = @$"format!(" + v572 + ")"
            let v574 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v573 
            let v575 : string = "fable_library_rust::String_::fromString($0)"
            let v576 : string = Fable.Core.RustInterop.emitRustExpr v574 v575 
            let _v554 = v576 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v577 : string = "inline_colorization::color_bright_blue"
            let v578 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v577 
            let v579 : string = "&*$0"
            let v580 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v540 v579 
            let v581 : string = "inline_colorization::color_reset"
            let v582 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v581 
            let v583 : string = "\"{v578}{v580}{v582}\""
            let v584 : string = @$"format!(" + v583 + ")"
            let v585 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v584 
            let v586 : string = "fable_library_rust::String_::fromString($0)"
            let v587 : string = Fable.Core.RustInterop.emitRustExpr v585 v586 
            let _v554 = v587 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v588 : string = "\u001b[94m"
            let v589 : string = method8()
            let v590 : string = v588 + v540 
            let v591 : string = v590 + v589 
            let _v554 = v591 
            #endif
#if FABLE_COMPILER_PYTHON
            let v592 : string = "\u001b[94m"
            let v593 : string = method8()
            let v594 : string = v592 + v540 
            let v595 : string = v594 + v593 
            let _v554 = v595 
            #endif
#else
            let v596 : string = "\u001b[94m"
            let v597 : string = method8()
            let v598 : string = v596 + v540 
            let v599 : string = v598 + v597 
            let _v554 = v599 
            #endif
            let v600 : string = _v554 
            let v606 : int64 = v102.l0
            let v607 : string = $"{v8}/{v0}"
            let v608 : string = method9()
            let v609 : Mut4 = {l0 = v608} : Mut4
            let v610 : string = "{ "
            let v611 : string = $"{v610}"
            let v614 : string = v609.l0
            let v615 : string = v614 + v611 
            v609.l0 <- v615
            let v616 : string = "is_error"
            let v617 : string = $"{v616}"
            let v620 : string = v609.l0
            let v621 : string = v620 + v617 
            v609.l0 <- v621
            let v622 : string = " = "
            let v623 : string = $"{v622}"
            let v626 : string = v609.l0
            let v627 : string = v626 + v623 
            v609.l0 <- v627
            let v630 : string =
                if v22 then
                    let v628 : string = "true"
                    v628
                else
                    let v629 : string = "false"
                    v629
            let v631 : string = $"{v630}"
            let v634 : string = v609.l0
            let v635 : string = v634 + v631 
            v609.l0 <- v635
            let v636 : string = "; "
            let v637 : string = $"{v636}"
            let v640 : string = v609.l0
            let v641 : string = v640 + v637 
            v609.l0 <- v641
            let v642 : string = "retry"
            let v643 : string = $"{v642}"
            let v646 : string = v609.l0
            let v647 : string = v646 + v643 
            v609.l0 <- v647
            let v648 : string = $"{v622}"
            let v651 : string = v609.l0
            let v652 : string = v651 + v648 
            v609.l0 <- v652
            let v653 : string = $"{v607}"
            let v656 : string = v609.l0
            let v657 : string = v656 + v653 
            v609.l0 <- v657
            let v658 : string = $"{v636}"
            let v661 : string = v609.l0
            let v662 : string = v661 + v658 
            v609.l0 <- v662
            let v663 : string = "result"
            let v664 : string = $"{v663}"
            let v667 : string = v609.l0
            let v668 : string = v667 + v664 
            v609.l0 <- v668
            let v669 : string = $"{v622}"
            let v672 : string = v609.l0
            let v673 : string = v672 + v669 
            v609.l0 <- v673
            let v674 : string = $"{v23}"
            let v677 : string = v609.l0
            let v678 : string = v677 + v674 
            v609.l0 <- v678
            let v679 : string = ", "
            let v680 : string = $"{v679}"
            let v683 : string = v609.l0
            let v684 : string = v683 + v680 
            v609.l0 <- v684
            let v685 : string = $"{v24}"
            let v688 : string = v609.l0
            let v689 : string = v688 + v685 
            v609.l0 <- v689
            let v690 : string = " }"
            let v691 : string = $"{v690}"
            let v694 : string = v609.l0
            let v695 : string = v694 + v691 
            v609.l0 <- v695
            let v696 : string = v609.l0
            let v697 : (unit -> string) = closure54()
            let v698 : string = $"{v470} {v600} #{v606} %s{v697 ()} / {v696}"
            let v701 : char list = []
            let v702 : (char list -> (char [])) = List.toArray
            let v703 : (char []) = v702 v701
            let v706 : string = v698.TrimStart v703 
            let v724 : char list = []
            let v725 : char list = '/' :: v724 
            let v728 : char list = ' ' :: v725 
            let v731 : (char list -> (char [])) = List.toArray
            let v732 : (char []) = v731 v728
            let v735 : string = v706.TrimEnd v732 
            let v753 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v754 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v735 v754 
            let _v753 = () 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v755 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v735 v755 
            let _v753 = () 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v756 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v735 v756 
            let _v753 = () 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            System.Console.WriteLine v735 
            let _v753 = () 
            #endif
#if FABLE_COMPILER_PYTHON
            System.Console.WriteLine v735 
            let _v753 = () 
            #endif
#else
            System.Console.WriteLine v735 
            let _v753 = () 
            #endif
            _v753 
            let v757 : (string -> unit) = v41.l0
            v757 v735
        let v758 : uint8 = v8 + 1uy
        method104(v0, v1, v2, v3, v4, v5, v6, v7, v758)
and method103 (v0 : uint8, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option) : struct (int32 * string) =
    let v8 : uint8 = 1uy
    method104(v0, v1, v2, v3, v4, v5, v6, v7, v8)
and method102 (v0 : US33, v1 : string, v2 : string, v3 : string, v4 : US12) : struct (int32 * string) =
    let v5 : System.Threading.CancellationToken option = None
    let v6 : (struct (string * string) []) = [||]
    let v7 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v8 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v9 : string option = None
    let v10 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "cfg!(windows)"
    let v12 : bool = Fable.Core.RustInterop.emitRustExpr () v11 
    let _v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "cfg!(windows)"
    let v14 : bool = Fable.Core.RustInterop.emitRustExpr () v13 
    let _v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "cfg!(windows)"
    let v16 : bool = Fable.Core.RustInterop.emitRustExpr () v15 
    let _v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v17 : US10 = US10_0
    let v18 : US11 = US11_3(v17)
    let v19 : string = $"platform.is_windows / target: {v18}"
    let v20 : bool = failwith<bool> v19
    let _v10 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v21 : US10 = US10_0
    let v22 : US11 = US11_4(v21)
    let v23 : string = $"platform.is_windows / target: {v22}"
    let v24 : bool = failwith<bool> v23
    let _v10 = v24 
    #endif
#else
    let v25 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
    let v26 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
    let v27 : bool = v26 v25
    let _v10 = v27 
    #endif
    let v28 : bool = _v10 
    let v36 : string =
        if v28 then
            let v34 : string = "_WINDOWS"
            v34
        else
            let v35 : string = "_LINUX"
            v35
    let v37 : string = $" --define {v36}"
    let v67 : string =
        match v0 with
        | US33_1 -> (* None *)
            let v65 : string = ""
            v65
        | US33_0(v38) -> (* Some *)
            let v39 : bool =
                match v38 with
                | US34_0 -> (* Wasm *)
                    true
                | _ ->
                    false
            let v43 : US1 =
                if v39 then
                    let v40 : string = "Wasm"
                    US1_0(v40)
                else
                    US1_1
            let v57 : US1 =
                match v43 with
                | US1_1 -> (* None *)
                    let v46 : bool =
                        match v38 with
                        | US34_1 -> (* Contract *)
                            true
                        | _ ->
                            false
                    let v50 : US1 =
                        if v46 then
                            let v47 : string = "Contract"
                            US1_0(v47)
                        else
                            US1_1
                    match v50 with
                    | US1_1 -> (* None *)
                        US1_1
                    | US1_0(v51) -> (* Some *)
                        US1_0(v51)
                | US1_0(v44) -> (* Some *)
                    US1_0(v44)
            let v61 : string =
                match v57 with
                | US1_1 -> (* None *)
                    failwith<string> "Option does not have a value."
                | US1_0(v58) -> (* Some *)
                    v58
            let v62 : (unit -> string) = v61.ToUpper
            let v63 : string = v62 ()
            let v64 : string = $" --define {v63}"
            v64
    let v68 : string = $"dotnet fable \"{v3}\" --optimize --lang {v2} --extension .{v2} --outDir \"{v1}\"{v37}{v67}"
    let v74 : Result<string, string> =
        match v4 with
        | US12_1(v71) -> (* Error *)
            let v72 : Result<string, string> = Error v71 
            v72
        | US12_0(v69) -> (* Ok *)
            let v70 : Result<string, string> = Ok v69 
            v70
    let v75 : string = "v74.ok()"
    let v76 : string option = Fable.Core.RustInterop.emitRustExpr () v75 
    let v77 : uint8 = 3uy
    let v78 : bool = true
    method103(v77, v68, v5, v6, v7, v8, v78, v76)
and closure55 () () : string =
    let v0 : string = "spiral_builder.process_rust / dotnet fable error"
    v0
and closure56 () (v0 : std_string_String) : bool =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "near-sdk"
    let v4 : bool = v2.Contains v3 
    v4
and method105 () : (std_string_String -> bool) =
    closure56()
and method106 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method107 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method108 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method110 () : string =
    let v0 : string = "a"
    v0
and method109 (v0 : US12, v1 : string, v2 : uint8) : struct (int32 * string) =
    let v3 : System.Threading.CancellationToken option = None
    let v4 : (struct (string * string) []) = [||]
    let v5 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v6 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v7 : string option = None
    let v8 : string = $"cargo fmt --manifest-path \"{v1}\" --"
    let v14 : Result<string, string> =
        match v0 with
        | US12_1(v11) -> (* Error *)
            let v12 : Result<string, string> = Error v11 
            v12
        | US12_0(v9) -> (* Ok *)
            let v10 : Result<string, string> = Ok v9 
            v10
    let v15 : string = "v14.ok()"
    let v16 : string option = Fable.Core.RustInterop.emitRustExpr () v15 
    let v17 : bool = true
    let struct (v18 : int32, v19 : string) = method40(v8, v3, v4, v5, v6, v17, v16)
    let v20 : string = "failed to load manifest for workspace member"
    let v21 : bool = v19.Contains v20 
    let v24 : bool = v21 = false
    let v183 : US36 =
        if v24 then
            let v25 : bool = v18 = 0
            if v25 then
                US36_0(v18, v19)
            else
                US36_1(v18, v19)
        else
            let v29 : string = $"regex::Regex::new(&$0)"
            let v30 : string = "failed to read `(?<a>.*?Cargo.toml)`"
            let v31 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v30 v29 
            let v32 : string = "$0.unwrap()"
            let v33 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v31 v32 
            let v34 : string = "&*$0"
            let v35 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v19 v34 
            let v36 : string = "String::from($0)"
            let v37 : std_string_String = Fable.Core.RustInterop.emitRustExpr v35 v36 
            let v38 : string = "true; let _result = (move || { // rust.capture_move"
            let v39 : bool = Fable.Core.RustInterop.emitRustExpr () v38 
            let v40 : string = "Box::new($0)"
            let v41 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v37 v40 
            let v42 : string = "Box::leak($0)"
            let v43 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v41 v42 
            let v44 : string = $"v33.captures_iter(v43)"
            let v45 : regex_CaptureMatches = Fable.Core.RustInterop.emitRustExpr () v44 
            let v46 : string = "true; let _result : Vec<_> = v45.map(|x| { //"
            let v47 : bool = Fable.Core.RustInterop.emitRustExpr () v46 
            let v48 : string = $"x"
            let v49 : regex_Captures<StaticLifetime> = Fable.Core.RustInterop.emitRustExpr () v48 
            let v50 : string = "Box::new($0)"
            let v51 : Box<regex_Captures<StaticLifetime>> = Fable.Core.RustInterop.emitRustExpr v49 v50 
            let v52 : string = "Box::leak($0)"
            let v53 : Ref<Lifetime<StaticLifetime, Mut<regex_Captures<StaticLifetime>>>> = Fable.Core.RustInterop.emitRustExpr v51 v52 
            let v54 : string = $"$0.capture_names()"
            let v55 : regex_CaptureNames = Fable.Core.RustInterop.emitRustExpr v33 v54 
            let v56 : string = "true; let _result : std::collections::HashMap<_, _> = v55.map(|x| { //"
            let v57 : bool = Fable.Core.RustInterop.emitRustExpr () v56 
            let v58 : string = "x.unwrap_or(\"\").to_string().into()"
            let v59 : string = Fable.Core.RustInterop.emitRustExpr () v58 
            let v60 : string = "$0.clone()"
            let v61 : string = Fable.Core.RustInterop.emitRustExpr v59 v60 
            let v62 : string = $"v53.name(&$0).map(|x| x.as_str()).unwrap_or(\"\").to_string().into()"
            let v63 : string = Fable.Core.RustInterop.emitRustExpr v59 v62 
            let v64 : (string * string) = v61, v63 
            let v65 : string = "true; $0 }).map(|x| std::sync::Arc::try_unwrap(x).unwrap_or_else(|x| (*x).clone())).collect()"
            let v66 : bool = Fable.Core.RustInterop.emitRustExpr v64 v65 
            let v67 : string = "_result"
            let v68 : std_collections_HashMap<string, string> = Fable.Core.RustInterop.emitRustExpr () v67 
            let v69 : string = "true; $0 }).collect::<Vec<_>>()"
            let v70 : bool = Fable.Core.RustInterop.emitRustExpr v68 v69 
            let v71 : string = "_result"
            let v72 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v71 
            let v73 : string = "true; $0 })()"
            let v74 : bool = Fable.Core.RustInterop.emitRustExpr v72 v73 
            let v75 : string = "_result"
            let v76 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v75 
            let v77 : string = "fable_library_rust::NativeArray_::array_from($0)"
            let v78 : (std_collections_HashMap<string, string> []) = Fable.Core.RustInterop.emitRustExpr v76 v77 
            let v79 : std_collections_HashMap<string, string> option = v78 |> Array.tryItem 0 
            let v80 : US37 option = None
            let _v80 = ref v80 
            match v79 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v81 : std_collections_HashMap<string, string> = x
            let v82 : US37 = US37_0(v81)
            v82 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v80.Value <- x
            let v83 : US37 option = _v80.Value 
            let v94 : US37 = US37_1
            let v95 : US37 = v83 |> Option.defaultValue v94 
            let v125 : US38 =
                match v95 with
                | US37_1 -> (* None *)
                    US38_1
                | US37_0(v99) -> (* Some *)
                    let v100 : string = method110()
                    let v101 : string = "std::collections::HashMap::get(&$0, &v100).map(|x| x).cloned()"
                    let v102 : string option = Fable.Core.RustInterop.emitRustExpr v99 v101 
                    let v103 : US1 option = None
                    let _v103 = ref v103 
                    match v102 with
                    | Some x -> (
                    (fun () ->
                    (fun () ->
                    let v104 : string = x
                    let v105 : US1 = US1_0(v104)
                    v105 
                    )
                    |> fun x -> x () |> Some
                    ) () ) | None -> None
                    |> fun x -> _v103.Value <- x
                    let v106 : US1 option = _v103.Value 
                    let v117 : US1 = US1_1
                    let v118 : US1 = v106 |> Option.defaultValue v117 
                    US38_0(v118)
            let v132 : US1 =
                match v125 with
                | US38_0(v126) -> (* Some *)
                    match v126 with
                    | US1_0(v127) -> (* Some *)
                        US1_0(v127)
                    | _ ->
                        US1_1
                | _ ->
                    US1_1
            match v132 with
            | US1_1 -> (* None *)
                US36_1(v18, v19)
            | US1_0(v134) -> (* Some *)
                let v135 : bool = method27(v134)
                let v136 : bool = v135 = false
                if v136 then
                    let v137 : string = method24(v134)
                    let v138 : System.IDisposable = method28(v137)
                    let v139 : System.DateTime = System.DateTime.Now
                    let v142 : (unit -> System.Guid) = System.Guid.NewGuid
                    let v143 : System.Guid = v142 ()
                    let v146 : System.Guid = method97(v143, v139)
                    let v147 : (System.Guid -> string) = _.ToString()
                    let v148 : string = v147 v146
                    let v151 : string = $"[package]"
                    let v152 : string = $"name = \"spiral_builder_{v148}\""
                    let v153 : string = "\n"
                    let v154 : string = v151 + v153 
                    let v155 : string = v154 + v152 
                    let v156 : string = $"version = \"0.0.1\""
                    let v157 : string = v155 + v153 
                    let v158 : string = v157 + v156 
                    let v159 : string = $"edition = \"2021\""
                    let v160 : string = v158 + v153 
                    let v161 : string = v160 + v159 
                    let v162 : string = $""
                    let v163 : string = v161 + v153 
                    let v164 : string = v163 + v162 
                    let v165 : string = $"[[bin]]"
                    let v166 : string = v164 + v153 
                    let v167 : string = v166 + v165 
                    let v168 : string = $"name = \"spiral_builder_{v148}\""
                    let v169 : string = v167 + v153 
                    let v170 : string = v169 + v168 
                    let v171 : string = $"path = \"spiral_builder.rs\""
                    let v172 : string = v170 + v153 
                    let v173 : string = v172 + v171 
                    let v174 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v175 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                    Fable.Core.RustInterop.emitRustExpr struct (v134, v173) v175 
                    let _v174 = () 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let _v174 = () 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let _v174 = () 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let _v174 = () 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let _v174 = () 
                    #endif
#else
                    let v176 : string = method39(v173)
                    System.IO.File.WriteAllText (v134, v176)
                    let _v174 = () 
                    #endif
                    _v174 
                    ()
                let v177 : bool = v18 = 0
                if v177 then
                    US36_0(v18, v19)
                else
                    US36_1(v18, v19)
    let struct (v191 : bool, v192 : int32, v193 : string) =
        match v183 with
        | US36_1(v186, v187) -> (* Error *)
            struct (true, v186, v187)
        | US36_0(v184, v185) -> (* Ok *)
            struct (false, v184, v185)
    let v194 : bool = v191 = false
    let v196 : bool =
        if v194 then
            true
        else
            let v195 : bool = v2 >= 3uy
            v195
    if v196 then
        struct (v192, v193)
    else
        let v197 : bool = State.trace_state.IsNone
        if v197 then
            let v198 : US0 = US0_0
            let struct (v199 : Mut0, v200 : Mut1, v201 : Mut2, v202 : Mut3, v203 : int64 option) = method1(v198)
            let v204 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v199, v200, v201, v202, v203) 
            State.trace_state <- v204 
            ()
        let struct (v209 : Mut0, v210 : Mut1, v211 : Mut2, v212 : Mut3, v213 : int64 option) = State.trace_state.Value
        let v224 : bool = State.trace_state.IsNone
        if v224 then
            let v225 : US0 = US0_0
            let struct (v226 : Mut0, v227 : Mut1, v228 : Mut2, v229 : Mut3, v230 : int64 option) = method1(v225)
            let v231 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v226, v227, v228, v229, v230) 
            State.trace_state <- v231 
            ()
        let struct (v236 : Mut0, v237 : Mut1, v238 : Mut2, v239 : Mut3, v240 : int64 option) = State.trace_state.Value
        let v251 : US0 = v239.l0
        let v252 : bool = v238.l0
        let v253 : bool = v252 = false
        let v256 : bool =
            if v253 then
                false
            else
                let v254 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v251
                let v255 : bool = 1 >= v254
                v255
        if v256 then
            let v257 : int64 = v209.l0
            let v258 : int64 = v257 + 1L
            v209.l0 <- v258
            let v259 : bool = State.trace_state.IsNone
            if v259 then
                let v260 : US0 = US0_0
                let struct (v261 : Mut0, v262 : Mut1, v263 : Mut2, v264 : Mut3, v265 : int64 option) = method1(v260)
                let v266 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v261, v262, v263, v264, v265) 
                State.trace_state <- v266 
                ()
            let struct (v271 : Mut0, v272 : Mut1, v273 : Mut2, v274 : Mut3, v275 : int64 option) = State.trace_state.Value
            let v286 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v287 : US3 option = None
            let _v287 = ref v287 
            match v275 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v288 : int64 = x
            let v289 : US3 = US3_0(v288)
            v289 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v287.Value <- x
            let v290 : US3 option = _v287.Value 
            let v301 : US3 = US3_1
            let v302 : US3 = v290 |> Option.defaultValue v301 
            let v342 : System.DateTime =
                match v302 with
                | US3_1 -> (* None *)
                    let v338 : System.DateTime = System.DateTime.Now
                    v338
                | US3_0(v306) -> (* Some *)
                    let v307 : System.DateTime = System.DateTime.Now
                    let v310 : (System.DateTime -> int64) = _.Ticks
                    let v311 : int64 = v310 v307
                    let v314 : int64 = v311 - v306
                    let v315 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v316 : System.TimeSpan = v315 v314
                    let v319 : (System.TimeSpan -> int32) = _.Hours
                    let v320 : int32 = v319 v316
                    let v323 : (System.TimeSpan -> int32) = _.Minutes
                    let v324 : int32 = v323 v316
                    let v327 : (System.TimeSpan -> int32) = _.Seconds
                    let v328 : int32 = v327 v316
                    let v331 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v332 : int32 = v331 v316
                    let v335 : System.DateTime = System.DateTime (1, 1, 1, v320, v324, v328, v332)
                    v335
            let v343 : string = method6()
            let v346 : (string -> string) = v342.ToString
            let v347 : string = v346 v343
            let _v286 = v347 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v350 : US3 option = None
            let _v350 = ref v350 
            match v275 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v351 : int64 = x
            let v352 : US3 = US3_0(v351)
            v352 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v350.Value <- x
            let v353 : US3 option = _v350.Value 
            let v364 : US3 = US3_1
            let v365 : US3 = v353 |> Option.defaultValue v364 
            let v405 : System.DateTime =
                match v365 with
                | US3_1 -> (* None *)
                    let v401 : System.DateTime = System.DateTime.Now
                    v401
                | US3_0(v369) -> (* Some *)
                    let v370 : System.DateTime = System.DateTime.Now
                    let v373 : (System.DateTime -> int64) = _.Ticks
                    let v374 : int64 = v373 v370
                    let v377 : int64 = v374 - v369
                    let v378 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v379 : System.TimeSpan = v378 v377
                    let v382 : (System.TimeSpan -> int32) = _.Hours
                    let v383 : int32 = v382 v379
                    let v386 : (System.TimeSpan -> int32) = _.Minutes
                    let v387 : int32 = v386 v379
                    let v390 : (System.TimeSpan -> int32) = _.Seconds
                    let v391 : int32 = v390 v379
                    let v394 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v395 : int32 = v394 v379
                    let v398 : System.DateTime = System.DateTime (1, 1, 1, v383, v387, v391, v395)
                    v398
            let v406 : string = method6()
            let v409 : (string -> string) = v405.ToString
            let v410 : string = v409 v406
            let _v286 = v410 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v413 : string = $"near_sdk::env::block_timestamp()"
            let v414 : uint64 = Fable.Core.RustInterop.emitRustExpr () v413 
            let v415 : US3 option = None
            let _v415 = ref v415 
            match v275 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v416 : int64 = x
            let v417 : US3 = US3_0(v416)
            v417 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v415.Value <- x
            let v418 : US3 option = _v415.Value 
            let v429 : US3 = US3_1
            let v430 : US3 = v418 |> Option.defaultValue v429 
            let v439 : uint64 =
                match v430 with
                | US3_1 -> (* None *)
                    v414
                | US3_0(v434) -> (* Some *)
                    let v435 : (int64 -> uint64) = uint64
                    let v436 : uint64 = v435 v434
                    let v437 : uint64 = v414 - v436
                    v437
            let v440 : uint64 = v439 / 1000000000UL
            let v441 : uint64 = v440 % 60UL
            let v442 : uint64 = v440 / 60UL
            let v443 : uint64 = v442 % 60UL
            let v444 : uint64 = v440 / 3600UL
            let v445 : uint64 = v444 % 24UL
            let v446 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
            let v447 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v445, v443, v441) v446 
            let v448 : string = "fable_library_rust::String_::fromString($0)"
            let v449 : string = Fable.Core.RustInterop.emitRustExpr v447 v448 
            let _v286 = v449 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v450 : US3 option = None
            let _v450 = ref v450 
            match v275 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v451 : int64 = x
            let v452 : US3 = US3_0(v451)
            v452 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v450.Value <- x
            let v453 : US3 option = _v450.Value 
            let v464 : US3 = US3_1
            let v465 : US3 = v453 |> Option.defaultValue v464 
            let v505 : System.DateTime =
                match v465 with
                | US3_1 -> (* None *)
                    let v501 : System.DateTime = System.DateTime.Now
                    v501
                | US3_0(v469) -> (* Some *)
                    let v470 : System.DateTime = System.DateTime.Now
                    let v473 : (System.DateTime -> int64) = _.Ticks
                    let v474 : int64 = v473 v470
                    let v477 : int64 = v474 - v469
                    let v478 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v479 : System.TimeSpan = v478 v477
                    let v482 : (System.TimeSpan -> int32) = _.Hours
                    let v483 : int32 = v482 v479
                    let v486 : (System.TimeSpan -> int32) = _.Minutes
                    let v487 : int32 = v486 v479
                    let v490 : (System.TimeSpan -> int32) = _.Seconds
                    let v491 : int32 = v490 v479
                    let v494 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v495 : int32 = v494 v479
                    let v498 : System.DateTime = System.DateTime (1, 1, 1, v483, v487, v491, v495)
                    v498
            let v506 : string = method7()
            let v509 : (string -> string) = v505.ToString
            let v510 : string = v509 v506
            let _v286 = v510 
            #endif
#if FABLE_COMPILER_PYTHON
            let v513 : US3 option = None
            let _v513 = ref v513 
            match v275 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v514 : int64 = x
            let v515 : US3 = US3_0(v514)
            v515 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v513.Value <- x
            let v516 : US3 option = _v513.Value 
            let v527 : US3 = US3_1
            let v528 : US3 = v516 |> Option.defaultValue v527 
            let v568 : System.DateTime =
                match v528 with
                | US3_1 -> (* None *)
                    let v564 : System.DateTime = System.DateTime.Now
                    v564
                | US3_0(v532) -> (* Some *)
                    let v533 : System.DateTime = System.DateTime.Now
                    let v536 : (System.DateTime -> int64) = _.Ticks
                    let v537 : int64 = v536 v533
                    let v540 : int64 = v537 - v532
                    let v541 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v542 : System.TimeSpan = v541 v540
                    let v545 : (System.TimeSpan -> int32) = _.Hours
                    let v546 : int32 = v545 v542
                    let v549 : (System.TimeSpan -> int32) = _.Minutes
                    let v550 : int32 = v549 v542
                    let v553 : (System.TimeSpan -> int32) = _.Seconds
                    let v554 : int32 = v553 v542
                    let v557 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v558 : int32 = v557 v542
                    let v561 : System.DateTime = System.DateTime (1, 1, 1, v546, v550, v554, v558)
                    v561
            let v569 : string = method7()
            let v572 : (string -> string) = v568.ToString
            let v573 : string = v572 v569
            let _v286 = v573 
            #endif
#else
            let v576 : US3 option = None
            let _v576 = ref v576 
            match v275 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v577 : int64 = x
            let v578 : US3 = US3_0(v577)
            v578 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v576.Value <- x
            let v579 : US3 option = _v576.Value 
            let v590 : US3 = US3_1
            let v591 : US3 = v579 |> Option.defaultValue v590 
            let v631 : System.DateTime =
                match v591 with
                | US3_1 -> (* None *)
                    let v627 : System.DateTime = System.DateTime.Now
                    v627
                | US3_0(v595) -> (* Some *)
                    let v596 : System.DateTime = System.DateTime.Now
                    let v599 : (System.DateTime -> int64) = _.Ticks
                    let v600 : int64 = v599 v596
                    let v603 : int64 = v600 - v595
                    let v604 : (int64 -> System.TimeSpan) = System.TimeSpan 
                    let v605 : System.TimeSpan = v604 v603
                    let v608 : (System.TimeSpan -> int32) = _.Hours
                    let v609 : int32 = v608 v605
                    let v612 : (System.TimeSpan -> int32) = _.Minutes
                    let v613 : int32 = v612 v605
                    let v616 : (System.TimeSpan -> int32) = _.Seconds
                    let v617 : int32 = v616 v605
                    let v620 : (System.TimeSpan -> int32) = _.Milliseconds
                    let v621 : int32 = v620 v605
                    let v624 : System.DateTime = System.DateTime (1, 1, 1, v609, v613, v617, v621)
                    v624
            let v632 : string = method7()
            let v635 : (string -> string) = v631.ToString
            let v636 : string = v635 v632
            let _v286 = v636 
            #endif
            let v639 : string = _v286 
            let v704 : string = "Debug"
            let v705 : (unit -> string) = v704.ToLower
            let v706 : string = v705 ()
            let v709 : string = v706.PadLeft (7, ' ')
            let v723 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v724 : string = "inline_colorization::color_bright_blue"
            let v725 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v724 
            let v726 : string = "&*$0"
            let v727 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v709 v726 
            let v728 : string = "inline_colorization::color_reset"
            let v729 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v728 
            let v730 : string = "\"{v725}{v727}{v729}\""
            let v731 : string = @$"format!(" + v730 + ")"
            let v732 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v731 
            let v733 : string = "fable_library_rust::String_::fromString($0)"
            let v734 : string = Fable.Core.RustInterop.emitRustExpr v732 v733 
            let _v723 = v734 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v735 : string = "inline_colorization::color_bright_blue"
            let v736 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v735 
            let v737 : string = "&*$0"
            let v738 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v709 v737 
            let v739 : string = "inline_colorization::color_reset"
            let v740 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v739 
            let v741 : string = "\"{v736}{v738}{v740}\""
            let v742 : string = @$"format!(" + v741 + ")"
            let v743 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v742 
            let v744 : string = "fable_library_rust::String_::fromString($0)"
            let v745 : string = Fable.Core.RustInterop.emitRustExpr v743 v744 
            let _v723 = v745 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v746 : string = "inline_colorization::color_bright_blue"
            let v747 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v746 
            let v748 : string = "&*$0"
            let v749 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v709 v748 
            let v750 : string = "inline_colorization::color_reset"
            let v751 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v750 
            let v752 : string = "\"{v747}{v749}{v751}\""
            let v753 : string = @$"format!(" + v752 + ")"
            let v754 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v753 
            let v755 : string = "fable_library_rust::String_::fromString($0)"
            let v756 : string = Fable.Core.RustInterop.emitRustExpr v754 v755 
            let _v723 = v756 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v757 : string = "\u001b[94m"
            let v758 : string = method8()
            let v759 : string = v757 + v709 
            let v760 : string = v759 + v758 
            let _v723 = v760 
            #endif
#if FABLE_COMPILER_PYTHON
            let v761 : string = "\u001b[94m"
            let v762 : string = method8()
            let v763 : string = v761 + v709 
            let v764 : string = v763 + v762 
            let _v723 = v764 
            #endif
#else
            let v765 : string = "\u001b[94m"
            let v766 : string = method8()
            let v767 : string = v765 + v709 
            let v768 : string = v767 + v766 
            let _v723 = v768 
            #endif
            let v769 : string = _v723 
            let v775 : int64 = v271.l0
            let v776 : string = $"{v2}/{3uy}"
            let v777 : string = method9()
            let v778 : Mut4 = {l0 = v777} : Mut4
            let v779 : string = "{ "
            let v780 : string = $"{v779}"
            let v783 : string = v778.l0
            let v784 : string = v783 + v780 
            v778.l0 <- v784
            let v785 : string = "is_error"
            let v786 : string = $"{v785}"
            let v789 : string = v778.l0
            let v790 : string = v789 + v786 
            v778.l0 <- v790
            let v791 : string = " = "
            let v792 : string = $"{v791}"
            let v795 : string = v778.l0
            let v796 : string = v795 + v792 
            v778.l0 <- v796
            let v799 : string =
                if v191 then
                    let v797 : string = "true"
                    v797
                else
                    let v798 : string = "false"
                    v798
            let v800 : string = $"{v799}"
            let v803 : string = v778.l0
            let v804 : string = v803 + v800 
            v778.l0 <- v804
            let v805 : string = "; "
            let v806 : string = $"{v805}"
            let v809 : string = v778.l0
            let v810 : string = v809 + v806 
            v778.l0 <- v810
            let v811 : string = "retry"
            let v812 : string = $"{v811}"
            let v815 : string = v778.l0
            let v816 : string = v815 + v812 
            v778.l0 <- v816
            let v817 : string = $"{v791}"
            let v820 : string = v778.l0
            let v821 : string = v820 + v817 
            v778.l0 <- v821
            let v822 : string = $"{v776}"
            let v825 : string = v778.l0
            let v826 : string = v825 + v822 
            v778.l0 <- v826
            let v827 : string = $"{v805}"
            let v830 : string = v778.l0
            let v831 : string = v830 + v827 
            v778.l0 <- v831
            let v832 : string = "result"
            let v833 : string = $"{v832}"
            let v836 : string = v778.l0
            let v837 : string = v836 + v833 
            v778.l0 <- v837
            let v838 : string = $"{v791}"
            let v841 : string = v778.l0
            let v842 : string = v841 + v838 
            v778.l0 <- v842
            let v843 : string = $"{v192}"
            let v846 : string = v778.l0
            let v847 : string = v846 + v843 
            v778.l0 <- v847
            let v848 : string = ", "
            let v849 : string = $"{v848}"
            let v852 : string = v778.l0
            let v853 : string = v852 + v849 
            v778.l0 <- v853
            let v854 : string = $"{v193}"
            let v857 : string = v778.l0
            let v858 : string = v857 + v854 
            v778.l0 <- v858
            let v859 : string = " }"
            let v860 : string = $"{v859}"
            let v863 : string = v778.l0
            let v864 : string = v863 + v860 
            v778.l0 <- v864
            let v865 : string = v778.l0
            let v866 : (unit -> string) = closure54()
            let v867 : string = $"{v639} {v769} #{v775} %s{v866 ()} / {v865}"
            let v870 : char list = []
            let v871 : (char list -> (char [])) = List.toArray
            let v872 : (char []) = v871 v870
            let v875 : string = v867.TrimStart v872 
            let v893 : char list = []
            let v894 : char list = '/' :: v893 
            let v897 : char list = ' ' :: v894 
            let v900 : (char list -> (char [])) = List.toArray
            let v901 : (char []) = v900 v897
            let v904 : string = v875.TrimEnd v901 
            let v922 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v923 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v904 v923 
            let _v922 = () 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v924 : string = @"println!(""{}"", $0)"
            Fable.Core.RustInterop.emitRustExpr v904 v924 
            let _v922 = () 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v925 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v904 v925 
            let _v922 = () 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            System.Console.WriteLine v904 
            let _v922 = () 
            #endif
#if FABLE_COMPILER_PYTHON
            System.Console.WriteLine v904 
            let _v922 = () 
            #endif
#else
            System.Console.WriteLine v904 
            let _v922 = () 
            #endif
            _v922 
            let v926 : (string -> unit) = v210.l0
            v926 v904
        let v927 : uint8 = v2 + 1uy
        method109(v0, v1, v927)
and closure57 () () : string =
    let v0 : string = "spiral_builder.process_rust / cargo fmt error"
    v0
and closure59 () (v0 : string) : bool =
    let v1 : string = "profile [optimized] target"
    let v2 : bool = v0.Contains v1 
    let v5 : bool = v2 = false
    if v5 then
        let v6 : string = "profile [unoptimized] target"
        let v7 : bool = v0.Contains v6 
        let v10 : bool = v7 = false
        if v10 then
            let v11 : string = "profile [unoptimized + debuginfo] target"
            let v12 : bool = v0.Contains v11 
            let v15 : bool = v12 = false
            v15
        else
            false
    else
        false
and closure58 (v0 : string) () : string =
    let v1 : string = "\n"
    let v2 : (string []) = v0.Split v1 
    let v3 : (string -> bool) = closure59()
    let v4 : (string []) = v2 |> Array.skipWhile v3 
    let v5 : (string []) = v4 |> Array.skip 2 
    let v6 : string seq = v5 |> Seq.ofArray
    let v9 : (string -> (string seq -> string)) = String.concat
    let v10 : (string seq -> string) = v9 v1
    v10 v6
and closure61 () () : string =
    let v0 : string = "spiral_builder.process_rust / Exception"
    v0
and closure60 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US1 =
    let v4 : bool = State.trace_state.IsNone
    if v4 then
        let v5 : US0 = US0_0
        let struct (v6 : Mut0, v7 : Mut1, v8 : Mut2, v9 : Mut3, v10 : int64 option) = method1(v5)
        let v11 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v6, v7, v8, v9, v10) 
        State.trace_state <- v11 
        ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : bool = State.trace_state.IsNone
    if v31 then
        let v32 : US0 = US0_0
        let struct (v33 : Mut0, v34 : Mut1, v35 : Mut2, v36 : Mut3, v37 : int64 option) = method1(v32)
        let v38 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v33, v34, v35, v36, v37) 
        State.trace_state <- v38 
        ()
    let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : int64 option) = State.trace_state.Value
    let v58 : US0 = v46.l0
    let v59 : bool = v45.l0
    let v60 : bool = v59 = false
    let v63 : bool =
        if v60 then
            false
        else
            let v61 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v58
            let v62 : bool = 4 >= v61
            v62
    if v63 then
        let v64 : int64 = v16.l0
        let v65 : int64 = v64 + 1L
        v16.l0 <- v65
        let v66 : bool = State.trace_state.IsNone
        if v66 then
            let v67 : US0 = US0_0
            let struct (v68 : Mut0, v69 : Mut1, v70 : Mut2, v71 : Mut3, v72 : int64 option) = method1(v67)
            let v73 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v68, v69, v70, v71, v72) 
            State.trace_state <- v73 
            ()
        let struct (v78 : Mut0, v79 : Mut1, v80 : Mut2, v81 : Mut3, v82 : int64 option) = State.trace_state.Value
        let v93 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v94 : US3 option = None
        let _v94 = ref v94 
        match v82 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v95 : int64 = x
        let v96 : US3 = US3_0(v95)
        v96 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v94.Value <- x
        let v97 : US3 option = _v94.Value 
        let v108 : US3 = US3_1
        let v109 : US3 = v97 |> Option.defaultValue v108 
        let v149 : System.DateTime =
            match v109 with
            | US3_1 -> (* None *)
                let v145 : System.DateTime = System.DateTime.Now
                v145
            | US3_0(v113) -> (* Some *)
                let v114 : System.DateTime = System.DateTime.Now
                let v117 : (System.DateTime -> int64) = _.Ticks
                let v118 : int64 = v117 v114
                let v121 : int64 = v118 - v113
                let v122 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v123 : System.TimeSpan = v122 v121
                let v126 : (System.TimeSpan -> int32) = _.Hours
                let v127 : int32 = v126 v123
                let v130 : (System.TimeSpan -> int32) = _.Minutes
                let v131 : int32 = v130 v123
                let v134 : (System.TimeSpan -> int32) = _.Seconds
                let v135 : int32 = v134 v123
                let v138 : (System.TimeSpan -> int32) = _.Milliseconds
                let v139 : int32 = v138 v123
                let v142 : System.DateTime = System.DateTime (1, 1, 1, v127, v131, v135, v139)
                v142
        let v150 : string = method6()
        let v153 : (string -> string) = v149.ToString
        let v154 : string = v153 v150
        let _v93 = v154 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v157 : US3 option = None
        let _v157 = ref v157 
        match v82 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v158 : int64 = x
        let v159 : US3 = US3_0(v158)
        v159 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v157.Value <- x
        let v160 : US3 option = _v157.Value 
        let v171 : US3 = US3_1
        let v172 : US3 = v160 |> Option.defaultValue v171 
        let v212 : System.DateTime =
            match v172 with
            | US3_1 -> (* None *)
                let v208 : System.DateTime = System.DateTime.Now
                v208
            | US3_0(v176) -> (* Some *)
                let v177 : System.DateTime = System.DateTime.Now
                let v180 : (System.DateTime -> int64) = _.Ticks
                let v181 : int64 = v180 v177
                let v184 : int64 = v181 - v176
                let v185 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v186 : System.TimeSpan = v185 v184
                let v189 : (System.TimeSpan -> int32) = _.Hours
                let v190 : int32 = v189 v186
                let v193 : (System.TimeSpan -> int32) = _.Minutes
                let v194 : int32 = v193 v186
                let v197 : (System.TimeSpan -> int32) = _.Seconds
                let v198 : int32 = v197 v186
                let v201 : (System.TimeSpan -> int32) = _.Milliseconds
                let v202 : int32 = v201 v186
                let v205 : System.DateTime = System.DateTime (1, 1, 1, v190, v194, v198, v202)
                v205
        let v213 : string = method6()
        let v216 : (string -> string) = v212.ToString
        let v217 : string = v216 v213
        let _v93 = v217 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v220 : string = $"near_sdk::env::block_timestamp()"
        let v221 : uint64 = Fable.Core.RustInterop.emitRustExpr () v220 
        let v222 : US3 option = None
        let _v222 = ref v222 
        match v82 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v223 : int64 = x
        let v224 : US3 = US3_0(v223)
        v224 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v222.Value <- x
        let v225 : US3 option = _v222.Value 
        let v236 : US3 = US3_1
        let v237 : US3 = v225 |> Option.defaultValue v236 
        let v246 : uint64 =
            match v237 with
            | US3_1 -> (* None *)
                v221
            | US3_0(v241) -> (* Some *)
                let v242 : (int64 -> uint64) = uint64
                let v243 : uint64 = v242 v241
                let v244 : uint64 = v221 - v243
                v244
        let v247 : uint64 = v246 / 1000000000UL
        let v248 : uint64 = v247 % 60UL
        let v249 : uint64 = v247 / 60UL
        let v250 : uint64 = v249 % 60UL
        let v251 : uint64 = v247 / 3600UL
        let v252 : uint64 = v251 % 24UL
        let v253 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v254 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v252, v250, v248) v253 
        let v255 : string = "fable_library_rust::String_::fromString($0)"
        let v256 : string = Fable.Core.RustInterop.emitRustExpr v254 v255 
        let _v93 = v256 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v257 : US3 option = None
        let _v257 = ref v257 
        match v82 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v258 : int64 = x
        let v259 : US3 = US3_0(v258)
        v259 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v257.Value <- x
        let v260 : US3 option = _v257.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v312 : System.DateTime =
            match v272 with
            | US3_1 -> (* None *)
                let v308 : System.DateTime = System.DateTime.Now
                v308
            | US3_0(v276) -> (* Some *)
                let v277 : System.DateTime = System.DateTime.Now
                let v280 : (System.DateTime -> int64) = _.Ticks
                let v281 : int64 = v280 v277
                let v284 : int64 = v281 - v276
                let v285 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v286 : System.TimeSpan = v285 v284
                let v289 : (System.TimeSpan -> int32) = _.Hours
                let v290 : int32 = v289 v286
                let v293 : (System.TimeSpan -> int32) = _.Minutes
                let v294 : int32 = v293 v286
                let v297 : (System.TimeSpan -> int32) = _.Seconds
                let v298 : int32 = v297 v286
                let v301 : (System.TimeSpan -> int32) = _.Milliseconds
                let v302 : int32 = v301 v286
                let v305 : System.DateTime = System.DateTime (1, 1, 1, v290, v294, v298, v302)
                v305
        let v313 : string = method7()
        let v316 : (string -> string) = v312.ToString
        let v317 : string = v316 v313
        let _v93 = v317 
        #endif
#if FABLE_COMPILER_PYTHON
        let v320 : US3 option = None
        let _v320 = ref v320 
        match v82 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v321 : int64 = x
        let v322 : US3 = US3_0(v321)
        v322 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v320.Value <- x
        let v323 : US3 option = _v320.Value 
        let v334 : US3 = US3_1
        let v335 : US3 = v323 |> Option.defaultValue v334 
        let v375 : System.DateTime =
            match v335 with
            | US3_1 -> (* None *)
                let v371 : System.DateTime = System.DateTime.Now
                v371
            | US3_0(v339) -> (* Some *)
                let v340 : System.DateTime = System.DateTime.Now
                let v343 : (System.DateTime -> int64) = _.Ticks
                let v344 : int64 = v343 v340
                let v347 : int64 = v344 - v339
                let v348 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v349 : System.TimeSpan = v348 v347
                let v352 : (System.TimeSpan -> int32) = _.Hours
                let v353 : int32 = v352 v349
                let v356 : (System.TimeSpan -> int32) = _.Minutes
                let v357 : int32 = v356 v349
                let v360 : (System.TimeSpan -> int32) = _.Seconds
                let v361 : int32 = v360 v349
                let v364 : (System.TimeSpan -> int32) = _.Milliseconds
                let v365 : int32 = v364 v349
                let v368 : System.DateTime = System.DateTime (1, 1, 1, v353, v357, v361, v365)
                v368
        let v376 : string = method7()
        let v379 : (string -> string) = v375.ToString
        let v380 : string = v379 v376
        let _v93 = v380 
        #endif
#else
        let v383 : US3 option = None
        let _v383 = ref v383 
        match v82 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v384 : int64 = x
        let v385 : US3 = US3_0(v384)
        v385 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v383.Value <- x
        let v386 : US3 option = _v383.Value 
        let v397 : US3 = US3_1
        let v398 : US3 = v386 |> Option.defaultValue v397 
        let v438 : System.DateTime =
            match v398 with
            | US3_1 -> (* None *)
                let v434 : System.DateTime = System.DateTime.Now
                v434
            | US3_0(v402) -> (* Some *)
                let v403 : System.DateTime = System.DateTime.Now
                let v406 : (System.DateTime -> int64) = _.Ticks
                let v407 : int64 = v406 v403
                let v410 : int64 = v407 - v402
                let v411 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v412 : System.TimeSpan = v411 v410
                let v415 : (System.TimeSpan -> int32) = _.Hours
                let v416 : int32 = v415 v412
                let v419 : (System.TimeSpan -> int32) = _.Minutes
                let v420 : int32 = v419 v412
                let v423 : (System.TimeSpan -> int32) = _.Seconds
                let v424 : int32 = v423 v412
                let v427 : (System.TimeSpan -> int32) = _.Milliseconds
                let v428 : int32 = v427 v412
                let v431 : System.DateTime = System.DateTime (1, 1, 1, v416, v420, v424, v428)
                v431
        let v439 : string = method7()
        let v442 : (string -> string) = v438.ToString
        let v443 : string = v442 v439
        let _v93 = v443 
        #endif
        let v446 : string = _v93 
        let v511 : string = "Critical"
        let v512 : (unit -> string) = v511.ToLower
        let v513 : string = v512 ()
        let v516 : string = v513.PadLeft (7, ' ')
        let v530 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v531 : string = "inline_colorization::color_bright_red"
        let v532 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v531 
        let v533 : string = "&*$0"
        let v534 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v516 v533 
        let v535 : string = "inline_colorization::color_reset"
        let v536 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v535 
        let v537 : string = "\"{v532}{v534}{v536}\""
        let v538 : string = @$"format!(" + v537 + ")"
        let v539 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v538 
        let v540 : string = "fable_library_rust::String_::fromString($0)"
        let v541 : string = Fable.Core.RustInterop.emitRustExpr v539 v540 
        let _v530 = v541 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v542 : string = "inline_colorization::color_bright_red"
        let v543 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v542 
        let v544 : string = "&*$0"
        let v545 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v516 v544 
        let v546 : string = "inline_colorization::color_reset"
        let v547 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v546 
        let v548 : string = "\"{v543}{v545}{v547}\""
        let v549 : string = @$"format!(" + v548 + ")"
        let v550 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v549 
        let v551 : string = "fable_library_rust::String_::fromString($0)"
        let v552 : string = Fable.Core.RustInterop.emitRustExpr v550 v551 
        let _v530 = v552 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v553 : string = "inline_colorization::color_bright_red"
        let v554 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v553 
        let v555 : string = "&*$0"
        let v556 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v516 v555 
        let v557 : string = "inline_colorization::color_reset"
        let v558 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v557 
        let v559 : string = "\"{v554}{v556}{v558}\""
        let v560 : string = @$"format!(" + v559 + ")"
        let v561 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v560 
        let v562 : string = "fable_library_rust::String_::fromString($0)"
        let v563 : string = Fable.Core.RustInterop.emitRustExpr v561 v562 
        let _v530 = v563 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v564 : string = "\u001b[91m"
        let v565 : string = method8()
        let v566 : string = v564 + v516 
        let v567 : string = v566 + v565 
        let _v530 = v567 
        #endif
#if FABLE_COMPILER_PYTHON
        let v568 : string = "\u001b[91m"
        let v569 : string = method8()
        let v570 : string = v568 + v516 
        let v571 : string = v570 + v569 
        let _v530 = v571 
        #endif
#else
        let v572 : string = "\u001b[91m"
        let v573 : string = method8()
        let v574 : string = v572 + v516 
        let v575 : string = v574 + v573 
        let _v530 = v575 
        #endif
        let v576 : string = _v530 
        let v582 : int64 = v78.l0
        let v583 : string = method9()
        let v584 : Mut4 = {l0 = v583} : Mut4
        let v585 : string = "{ "
        let v586 : string = $"{v585}"
        let v589 : string = v584.l0
        let v590 : string = v589 + v586 
        v584.l0 <- v590
        let v591 : string = "ex"
        let v592 : string = $"{v591}"
        let v595 : string = v584.l0
        let v596 : string = v595 + v592 
        v584.l0 <- v596
        let v597 : string = " = "
        let v598 : string = $"{v597}"
        let v601 : string = v584.l0
        let v602 : string = v601 + v598 
        v584.l0 <- v602
        let v603 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v604 : string = "format!(\"{:#?}\", $0)"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v603 = v607 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v608 : string = "format!(\"{:#?}\", $0)"
        let v609 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v608 
        let v610 : string = "fable_library_rust::String_::fromString($0)"
        let v611 : string = Fable.Core.RustInterop.emitRustExpr v609 v610 
        let _v603 = v611 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v612 : string = "format!(\"{:#?}\", $0)"
        let v613 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v612 
        let v614 : string = "fable_library_rust::String_::fromString($0)"
        let v615 : string = Fable.Core.RustInterop.emitRustExpr v613 v614 
        let _v603 = v615 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v616 : string = $"%A{v3}"
        let _v603 = v616 
        #endif
#if FABLE_COMPILER_PYTHON
        let v619 : string = $"%A{v3}"
        let _v603 = v619 
        #endif
#else
        let v622 : string = $"%A{v3}"
        let _v603 = v622 
        #endif
        let v625 : string = _v603 
        let v630 : string = $"{v625}"
        let v633 : string = v584.l0
        let v634 : string = v633 + v630 
        v584.l0 <- v634
        let v635 : string = "; "
        let v636 : string = $"{v635}"
        let v639 : string = v584.l0
        let v640 : string = v639 + v636 
        v584.l0 <- v640
        let v641 : string = "cargo_result"
        let v642 : string = $"{v641}"
        let v645 : string = v584.l0
        let v646 : string = v645 + v642 
        v584.l0 <- v646
        let v647 : string = $"{v597}"
        let v650 : string = v584.l0
        let v651 : string = v650 + v647 
        v584.l0 <- v651
        let v652 : string = $"{v1}"
        let v655 : string = v584.l0
        let v656 : string = v655 + v652 
        v584.l0 <- v656
        let v657 : string = $"{v635}"
        let v660 : string = v584.l0
        let v661 : string = v660 + v657 
        v584.l0 <- v661
        let v662 : string = "new_code_path"
        let v663 : string = $"{v662}"
        let v666 : string = v584.l0
        let v667 : string = v666 + v663 
        v584.l0 <- v667
        let v668 : string = $"{v597}"
        let v671 : string = v584.l0
        let v672 : string = v671 + v668 
        v584.l0 <- v672
        let v673 : string = $"{v0}"
        let v676 : string = v584.l0
        let v677 : string = v676 + v673 
        v584.l0 <- v677
        let v678 : string = $"{v635}"
        let v681 : string = v584.l0
        let v682 : string = v681 + v678 
        v584.l0 <- v682
        let v683 : string = "external_command"
        let v684 : string = $"{v683}"
        let v687 : string = v584.l0
        let v688 : string = v687 + v684 
        v584.l0 <- v688
        let v689 : string = $"{v597}"
        let v692 : string = v584.l0
        let v693 : string = v692 + v689 
        v584.l0 <- v693
        let v694 : string = $"{v2}"
        let v697 : string = v584.l0
        let v698 : string = v697 + v694 
        v584.l0 <- v698
        let v699 : string = " }"
        let v700 : string = $"{v699}"
        let v703 : string = v584.l0
        let v704 : string = v703 + v700 
        v584.l0 <- v704
        let v705 : string = v584.l0
        let v706 : (unit -> string) = closure61()
        let v707 : string = $"{v446} {v576} #{v582} %s{v706 ()} / {v705}"
        let v710 : char list = []
        let v711 : (char list -> (char [])) = List.toArray
        let v712 : (char []) = v711 v710
        let v715 : string = v707.TrimStart v712 
        let v733 : char list = []
        let v734 : char list = '/' :: v733 
        let v737 : char list = ' ' :: v734 
        let v740 : (char list -> (char [])) = List.toArray
        let v741 : (char []) = v740 v737
        let v744 : string = v715.TrimEnd v741 
        let v762 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v763 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v744 v763 
        let _v762 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v764 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v744 v764 
        let _v762 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v765 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v744 v765 
        let _v762 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        System.Console.WriteLine v744 
        let _v762 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        System.Console.WriteLine v744 
        let _v762 = () 
        #endif
#else
        System.Console.WriteLine v744 
        let _v762 = () 
        #endif
        _v762 
        let v766 : (string -> unit) = v17.l0
        v766 v744
    US1_1
and closure62 () () : string =
    let v0 : string = "spiral_builder.process_rust / error"
    v0
and closure63 () () : string =
    let v0 : string = "spiral_builder.process_rust / wasm error"
    v0
and closure64 () () : string =
    let v0 : string = "spiral_builder.process_rust / error"
    v0
and closure65 () () : string =
    let v0 : string = "spiral_builder.process_rust / cleanup"
    v0
and method111 (v0 : UH4) : unit =
    match v0 with
    | UH4_1(v1, v2, v3) -> (* Cons *)
        let v4 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v5 : string = "std::fs::remove_file(&*$0).unwrap()"
        Fable.Core.RustInterop.emitRustExpr v1 v5 
        let _v4 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let _v4 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let _v4 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let _v4 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        let _v4 = () 
        #endif
#else
        let v6 : (string -> unit) = System.IO.File.Delete
        v6 v1
        let _v4 = () 
        #endif
        _v4 
        method111(v3)
    | UH4_0 -> (* Nil *)
        ()
and method114 (v0 : async_walkdir_DirEntry) : async_walkdir_DirEntry =
    v0
and closure67 () (v0 : std_fs_FileType) : US40 =
    US40_0(v0)
and closure68 () (v0 : std_string_String) : US40 =
    US40_1(v0)
and method115 (v0 : std_fs_FileType) : std_fs_FileType =
    v0
and method116 (v0 : US39) : US39 =
    v0
and method113 (v0 : async_walkdir_DirEntry) : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<US39>>, Send<Dyn<std_future_Future<US39>>>>>> =
    let v1 : string = "let __result = Box::pin(async move { //"
    Fable.Core.RustInterop.emitRustExpr () v1 
    let v2 : async_walkdir_DirEntry = method114(v0)
    let v3 : string = "Box::pin(async_walkdir::DirEntry::file_type(&v2))"
    let v4 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<Result<std_fs_FileType, std_io_Error>>>, Send<Dyn<std_future_Future<Result<std_fs_FileType, std_io_Error>>>>>>> = Fable.Core.RustInterop.emitRustExpr () v3 
    let v5 : string = "v4.await"
    let v6 : Result<std_fs_FileType, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v5 
    let v7 : (std_io_Error -> std_string_String) = method30()
    let v8 : string = "$0.map_err(|x| $1(x))"
    let v9 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v6, v7) v8 
    let v10 : (std_fs_FileType -> US40) = closure67()
    let v11 : (std_string_String -> US40) = closure68()
    let v12 : US40 = match v9 with Ok x -> v10 x | Error x -> v11 x
    let v22 : US39 =
        match v12 with
        | US40_0(v13) -> (* Ok *)
            let v14 : std_fs_FileType = method115(v13)
            let v15 : string = "std::fs::FileType::is_dir(&v14)"
            let v16 : bool = Fable.Core.RustInterop.emitRustExpr () v15 
            let v17 : bool = v16 = false
            if v17 then
                US39_0
            else
                US39_2
        | _ ->
            US39_2
    let v23 : US39 = method116(v22)
    let v24 : string = ""
    let v25 : string = "}"
    let v26 : string = v24 + v25 
    let v27 : string = v26 + v25 
    let v28 : string = "{"
    let v29 : string = v24 + v28 
    let v30 : string = "v23 " + v27 + "); " + v29 + " // rust.fix_closure'"
    Fable.Core.RustInterop.emitRustExpr () v30 
    let v31 : string = "__result"
    let v32 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<US39>>, Send<Dyn<std_future_Future<US39>>>>>> = Fable.Core.RustInterop.emitRustExpr () v31 
    v32
and method117 (v0 : async_walkdir_Filtering) : async_walkdir_Filtering =
    v0
and method112 (v0 : async_walkdir_DirEntry) : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> =
    let v1 : string = "let __result = Box::pin(async { //"
    Fable.Core.RustInterop.emitRustExpr () v1 
    let v2 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<US39>>, Send<Dyn<std_future_Future<US39>>>>>> = method113(v0)
    let v3 : string = "v2.await"
    let v4 : US39 = Fable.Core.RustInterop.emitRustExpr () v3 
    let v13 : async_walkdir_Filtering =
        match v4 with
        | US39_2 -> (* Continue *)
            let v9 : string = "async_walkdir::Filtering::Continue"
            let v10 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v9 
            v10
        | US39_0 -> (* Ignore *)
            let v5 : string = "async_walkdir::Filtering::Ignore"
            let v6 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v5 
            v6
        | US39_1 -> (* IgnoreDir *)
            let v7 : string = "async_walkdir::Filtering::IgnoreDir"
            let v8 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v7 
            v8
    let v14 : async_walkdir_Filtering = method117(v13)
    let v15 : string = ""
    let v16 : string = "}"
    let v17 : string = v15 + v16 
    let v18 : string = v17 + v16 
    let v19 : string = "{"
    let v20 : string = v15 + v19 
    let v21 : string = "v14 " + v18 + "); " + v20 + " // rust.fix_closure'"
    Fable.Core.RustInterop.emitRustExpr () v21 
    let v22 : string = "__result"
    let v23 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> = Fable.Core.RustInterop.emitRustExpr () v22 
    v23
and closure66 () (v0 : async_walkdir_DirEntry) : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> =
    method112(v0)
and closure70 () (v0 : async_walkdir_Error) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#else
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
    let v17 : std_string_String = _v1 
    v17
and method119 () : (async_walkdir_Error -> std_string_String) =
    closure70()
and closure71 () (v0 : async_walkdir_DirEntry) : US41 =
    US41_0(v0)
and closure72 () (v0 : std_string_String) : US41 =
    US41_1(v0)
and closure73 () () : string =
    let v0 : string = "spiral_builder.process_typescript / stream_filter_map"
    v0
and closure69 () (v0 : Result<async_walkdir_DirEntry, async_walkdir_Error>) : struct (string * string) option =
    let v1 : (async_walkdir_Error -> std_string_String) = method119()
    let v2 : string = "$0.map_err(|x| $1(x))"
    let v3 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v2 
    let v4 : (async_walkdir_DirEntry -> US41) = closure71()
    let v5 : (std_string_String -> US41) = closure72()
    let v6 : US41 = match v3 with Ok x -> v4 x | Error x -> v5 x
    let v847 : US42 =
        match v6 with
        | US41_1(v145) -> (* Error *)
            let v146 : bool = State.trace_state.IsNone
            if v146 then
                let v147 : US0 = US0_0
                let struct (v148 : Mut0, v149 : Mut1, v150 : Mut2, v151 : Mut3, v152 : int64 option) = method1(v147)
                let v153 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v148, v149, v150, v151, v152) 
                State.trace_state <- v153 
                ()
            let struct (v158 : Mut0, v159 : Mut1, v160 : Mut2, v161 : Mut3, v162 : int64 option) = State.trace_state.Value
            let v173 : bool = State.trace_state.IsNone
            if v173 then
                let v174 : US0 = US0_0
                let struct (v175 : Mut0, v176 : Mut1, v177 : Mut2, v178 : Mut3, v179 : int64 option) = method1(v174)
                let v180 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v175, v176, v177, v178, v179) 
                State.trace_state <- v180 
                ()
            let struct (v185 : Mut0, v186 : Mut1, v187 : Mut2, v188 : Mut3, v189 : int64 option) = State.trace_state.Value
            let v200 : US0 = v188.l0
            let v201 : bool = v187.l0
            let v202 : bool = v201 = false
            let v205 : bool =
                if v202 then
                    false
                else
                    let v203 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v200
                    let v204 : bool = 4 >= v203
                    v204
            if v205 then
                let v206 : int64 = v158.l0
                let v207 : int64 = v206 + 1L
                v158.l0 <- v207
                let v208 : bool = State.trace_state.IsNone
                if v208 then
                    let v209 : US0 = US0_0
                    let struct (v210 : Mut0, v211 : Mut1, v212 : Mut2, v213 : Mut3, v214 : int64 option) = method1(v209)
                    let v215 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v210, v211, v212, v213, v214) 
                    State.trace_state <- v215 
                    ()
                let struct (v220 : Mut0, v221 : Mut1, v222 : Mut2, v223 : Mut3, v224 : int64 option) = State.trace_state.Value
                let v235 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v236 : US3 option = None
                let _v236 = ref v236 
                match v224 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v237 : int64 = x
                let v238 : US3 = US3_0(v237)
                v238 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v236.Value <- x
                let v239 : US3 option = _v236.Value 
                let v250 : US3 = US3_1
                let v251 : US3 = v239 |> Option.defaultValue v250 
                let v291 : System.DateTime =
                    match v251 with
                    | US3_1 -> (* None *)
                        let v287 : System.DateTime = System.DateTime.Now
                        v287
                    | US3_0(v255) -> (* Some *)
                        let v256 : System.DateTime = System.DateTime.Now
                        let v259 : (System.DateTime -> int64) = _.Ticks
                        let v260 : int64 = v259 v256
                        let v263 : int64 = v260 - v255
                        let v264 : (int64 -> System.TimeSpan) = System.TimeSpan 
                        let v265 : System.TimeSpan = v264 v263
                        let v268 : (System.TimeSpan -> int32) = _.Hours
                        let v269 : int32 = v268 v265
                        let v272 : (System.TimeSpan -> int32) = _.Minutes
                        let v273 : int32 = v272 v265
                        let v276 : (System.TimeSpan -> int32) = _.Seconds
                        let v277 : int32 = v276 v265
                        let v280 : (System.TimeSpan -> int32) = _.Milliseconds
                        let v281 : int32 = v280 v265
                        let v284 : System.DateTime = System.DateTime (1, 1, 1, v269, v273, v277, v281)
                        v284
                let v292 : string = method6()
                let v295 : (string -> string) = v291.ToString
                let v296 : string = v295 v292
                let _v235 = v296 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v299 : US3 option = None
                let _v299 = ref v299 
                match v224 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v300 : int64 = x
                let v301 : US3 = US3_0(v300)
                v301 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v299.Value <- x
                let v302 : US3 option = _v299.Value 
                let v313 : US3 = US3_1
                let v314 : US3 = v302 |> Option.defaultValue v313 
                let v354 : System.DateTime =
                    match v314 with
                    | US3_1 -> (* None *)
                        let v350 : System.DateTime = System.DateTime.Now
                        v350
                    | US3_0(v318) -> (* Some *)
                        let v319 : System.DateTime = System.DateTime.Now
                        let v322 : (System.DateTime -> int64) = _.Ticks
                        let v323 : int64 = v322 v319
                        let v326 : int64 = v323 - v318
                        let v327 : (int64 -> System.TimeSpan) = System.TimeSpan 
                        let v328 : System.TimeSpan = v327 v326
                        let v331 : (System.TimeSpan -> int32) = _.Hours
                        let v332 : int32 = v331 v328
                        let v335 : (System.TimeSpan -> int32) = _.Minutes
                        let v336 : int32 = v335 v328
                        let v339 : (System.TimeSpan -> int32) = _.Seconds
                        let v340 : int32 = v339 v328
                        let v343 : (System.TimeSpan -> int32) = _.Milliseconds
                        let v344 : int32 = v343 v328
                        let v347 : System.DateTime = System.DateTime (1, 1, 1, v332, v336, v340, v344)
                        v347
                let v355 : string = method6()
                let v358 : (string -> string) = v354.ToString
                let v359 : string = v358 v355
                let _v235 = v359 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v362 : string = $"near_sdk::env::block_timestamp()"
                let v363 : uint64 = Fable.Core.RustInterop.emitRustExpr () v362 
                let v364 : US3 option = None
                let _v364 = ref v364 
                match v224 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v365 : int64 = x
                let v366 : US3 = US3_0(v365)
                v366 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v364.Value <- x
                let v367 : US3 option = _v364.Value 
                let v378 : US3 = US3_1
                let v379 : US3 = v367 |> Option.defaultValue v378 
                let v388 : uint64 =
                    match v379 with
                    | US3_1 -> (* None *)
                        v363
                    | US3_0(v383) -> (* Some *)
                        let v384 : (int64 -> uint64) = uint64
                        let v385 : uint64 = v384 v383
                        let v386 : uint64 = v363 - v385
                        v386
                let v389 : uint64 = v388 / 1000000000UL
                let v390 : uint64 = v389 % 60UL
                let v391 : uint64 = v389 / 60UL
                let v392 : uint64 = v391 % 60UL
                let v393 : uint64 = v389 / 3600UL
                let v394 : uint64 = v393 % 24UL
                let v395 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
                let v396 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v394, v392, v390) v395 
                let v397 : string = "fable_library_rust::String_::fromString($0)"
                let v398 : string = Fable.Core.RustInterop.emitRustExpr v396 v397 
                let _v235 = v398 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v399 : US3 option = None
                let _v399 = ref v399 
                match v224 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v400 : int64 = x
                let v401 : US3 = US3_0(v400)
                v401 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v399.Value <- x
                let v402 : US3 option = _v399.Value 
                let v413 : US3 = US3_1
                let v414 : US3 = v402 |> Option.defaultValue v413 
                let v454 : System.DateTime =
                    match v414 with
                    | US3_1 -> (* None *)
                        let v450 : System.DateTime = System.DateTime.Now
                        v450
                    | US3_0(v418) -> (* Some *)
                        let v419 : System.DateTime = System.DateTime.Now
                        let v422 : (System.DateTime -> int64) = _.Ticks
                        let v423 : int64 = v422 v419
                        let v426 : int64 = v423 - v418
                        let v427 : (int64 -> System.TimeSpan) = System.TimeSpan 
                        let v428 : System.TimeSpan = v427 v426
                        let v431 : (System.TimeSpan -> int32) = _.Hours
                        let v432 : int32 = v431 v428
                        let v435 : (System.TimeSpan -> int32) = _.Minutes
                        let v436 : int32 = v435 v428
                        let v439 : (System.TimeSpan -> int32) = _.Seconds
                        let v440 : int32 = v439 v428
                        let v443 : (System.TimeSpan -> int32) = _.Milliseconds
                        let v444 : int32 = v443 v428
                        let v447 : System.DateTime = System.DateTime (1, 1, 1, v432, v436, v440, v444)
                        v447
                let v455 : string = method7()
                let v458 : (string -> string) = v454.ToString
                let v459 : string = v458 v455
                let _v235 = v459 
                #endif
#if FABLE_COMPILER_PYTHON
                let v462 : US3 option = None
                let _v462 = ref v462 
                match v224 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v463 : int64 = x
                let v464 : US3 = US3_0(v463)
                v464 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v462.Value <- x
                let v465 : US3 option = _v462.Value 
                let v476 : US3 = US3_1
                let v477 : US3 = v465 |> Option.defaultValue v476 
                let v517 : System.DateTime =
                    match v477 with
                    | US3_1 -> (* None *)
                        let v513 : System.DateTime = System.DateTime.Now
                        v513
                    | US3_0(v481) -> (* Some *)
                        let v482 : System.DateTime = System.DateTime.Now
                        let v485 : (System.DateTime -> int64) = _.Ticks
                        let v486 : int64 = v485 v482
                        let v489 : int64 = v486 - v481
                        let v490 : (int64 -> System.TimeSpan) = System.TimeSpan 
                        let v491 : System.TimeSpan = v490 v489
                        let v494 : (System.TimeSpan -> int32) = _.Hours
                        let v495 : int32 = v494 v491
                        let v498 : (System.TimeSpan -> int32) = _.Minutes
                        let v499 : int32 = v498 v491
                        let v502 : (System.TimeSpan -> int32) = _.Seconds
                        let v503 : int32 = v502 v491
                        let v506 : (System.TimeSpan -> int32) = _.Milliseconds
                        let v507 : int32 = v506 v491
                        let v510 : System.DateTime = System.DateTime (1, 1, 1, v495, v499, v503, v507)
                        v510
                let v518 : string = method7()
                let v521 : (string -> string) = v517.ToString
                let v522 : string = v521 v518
                let _v235 = v522 
                #endif
#else
                let v525 : US3 option = None
                let _v525 = ref v525 
                match v224 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v526 : int64 = x
                let v527 : US3 = US3_0(v526)
                v527 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v525.Value <- x
                let v528 : US3 option = _v525.Value 
                let v539 : US3 = US3_1
                let v540 : US3 = v528 |> Option.defaultValue v539 
                let v580 : System.DateTime =
                    match v540 with
                    | US3_1 -> (* None *)
                        let v576 : System.DateTime = System.DateTime.Now
                        v576
                    | US3_0(v544) -> (* Some *)
                        let v545 : System.DateTime = System.DateTime.Now
                        let v548 : (System.DateTime -> int64) = _.Ticks
                        let v549 : int64 = v548 v545
                        let v552 : int64 = v549 - v544
                        let v553 : (int64 -> System.TimeSpan) = System.TimeSpan 
                        let v554 : System.TimeSpan = v553 v552
                        let v557 : (System.TimeSpan -> int32) = _.Hours
                        let v558 : int32 = v557 v554
                        let v561 : (System.TimeSpan -> int32) = _.Minutes
                        let v562 : int32 = v561 v554
                        let v565 : (System.TimeSpan -> int32) = _.Seconds
                        let v566 : int32 = v565 v554
                        let v569 : (System.TimeSpan -> int32) = _.Milliseconds
                        let v570 : int32 = v569 v554
                        let v573 : System.DateTime = System.DateTime (1, 1, 1, v558, v562, v566, v570)
                        v573
                let v581 : string = method7()
                let v584 : (string -> string) = v580.ToString
                let v585 : string = v584 v581
                let _v235 = v585 
                #endif
                let v588 : string = _v235 
                let v653 : string = "Critical"
                let v654 : (unit -> string) = v653.ToLower
                let v655 : string = v654 ()
                let v658 : string = v655.PadLeft (7, ' ')
                let v672 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v673 : string = "inline_colorization::color_bright_red"
                let v674 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v673 
                let v675 : string = "&*$0"
                let v676 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v658 v675 
                let v677 : string = "inline_colorization::color_reset"
                let v678 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v677 
                let v679 : string = "\"{v674}{v676}{v678}\""
                let v680 : string = @$"format!(" + v679 + ")"
                let v681 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v680 
                let v682 : string = "fable_library_rust::String_::fromString($0)"
                let v683 : string = Fable.Core.RustInterop.emitRustExpr v681 v682 
                let _v672 = v683 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v684 : string = "inline_colorization::color_bright_red"
                let v685 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v684 
                let v686 : string = "&*$0"
                let v687 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v658 v686 
                let v688 : string = "inline_colorization::color_reset"
                let v689 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v688 
                let v690 : string = "\"{v685}{v687}{v689}\""
                let v691 : string = @$"format!(" + v690 + ")"
                let v692 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v691 
                let v693 : string = "fable_library_rust::String_::fromString($0)"
                let v694 : string = Fable.Core.RustInterop.emitRustExpr v692 v693 
                let _v672 = v694 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v695 : string = "inline_colorization::color_bright_red"
                let v696 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v695 
                let v697 : string = "&*$0"
                let v698 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v658 v697 
                let v699 : string = "inline_colorization::color_reset"
                let v700 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v699 
                let v701 : string = "\"{v696}{v698}{v700}\""
                let v702 : string = @$"format!(" + v701 + ")"
                let v703 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v702 
                let v704 : string = "fable_library_rust::String_::fromString($0)"
                let v705 : string = Fable.Core.RustInterop.emitRustExpr v703 v704 
                let _v672 = v705 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v706 : string = "\u001b[91m"
                let v707 : string = method8()
                let v708 : string = v706 + v658 
                let v709 : string = v708 + v707 
                let _v672 = v709 
                #endif
#if FABLE_COMPILER_PYTHON
                let v710 : string = "\u001b[91m"
                let v711 : string = method8()
                let v712 : string = v710 + v658 
                let v713 : string = v712 + v711 
                let _v672 = v713 
                #endif
#else
                let v714 : string = "\u001b[91m"
                let v715 : string = method8()
                let v716 : string = v714 + v658 
                let v717 : string = v716 + v715 
                let _v672 = v717 
                #endif
                let v718 : string = _v672 
                let v724 : int64 = v220.l0
                let v725 : string = method9()
                let v726 : Mut4 = {l0 = v725} : Mut4
                let v727 : string = "{ "
                let v728 : string = $"{v727}"
                let v731 : string = v726.l0
                let v732 : string = v731 + v728 
                v726.l0 <- v732
                let v733 : string = "error"
                let v734 : string = $"{v733}"
                let v737 : string = v726.l0
                let v738 : string = v737 + v734 
                v726.l0 <- v738
                let v739 : string = " = "
                let v740 : string = $"{v739}"
                let v743 : string = v726.l0
                let v744 : string = v743 + v740 
                v726.l0 <- v744
                let v745 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v746 : string = "format!(\"{:#?}\", $0)"
                let v747 : std_string_String = Fable.Core.RustInterop.emitRustExpr v145 v746 
                let v748 : string = "fable_library_rust::String_::fromString($0)"
                let v749 : string = Fable.Core.RustInterop.emitRustExpr v747 v748 
                let _v745 = v749 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v750 : string = "format!(\"{:#?}\", $0)"
                let v751 : std_string_String = Fable.Core.RustInterop.emitRustExpr v145 v750 
                let v752 : string = "fable_library_rust::String_::fromString($0)"
                let v753 : string = Fable.Core.RustInterop.emitRustExpr v751 v752 
                let _v745 = v753 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v754 : string = "format!(\"{:#?}\", $0)"
                let v755 : std_string_String = Fable.Core.RustInterop.emitRustExpr v145 v754 
                let v756 : string = "fable_library_rust::String_::fromString($0)"
                let v757 : string = Fable.Core.RustInterop.emitRustExpr v755 v756 
                let _v745 = v757 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v758 : string = $"%A{v145}"
                let _v745 = v758 
                #endif
#if FABLE_COMPILER_PYTHON
                let v761 : string = $"%A{v145}"
                let _v745 = v761 
                #endif
#else
                let v764 : string = $"%A{v145}"
                let _v745 = v764 
                #endif
                let v767 : string = _v745 
                let v772 : string = $"{v767}"
                let v775 : string = v726.l0
                let v776 : string = v775 + v772 
                v726.l0 <- v776
                let v777 : string = " }"
                let v778 : string = $"{v777}"
                let v781 : string = v726.l0
                let v782 : string = v781 + v778 
                v726.l0 <- v782
                let v783 : string = v726.l0
                let v784 : (unit -> string) = closure73()
                let v785 : string = $"{v588} {v718} #{v724} %s{v784 ()} / {v783}"
                let v788 : char list = []
                let v789 : (char list -> (char [])) = List.toArray
                let v790 : (char []) = v789 v788
                let v793 : string = v785.TrimStart v790 
                let v811 : char list = []
                let v812 : char list = '/' :: v811 
                let v815 : char list = ' ' :: v812 
                let v818 : (char list -> (char [])) = List.toArray
                let v819 : (char []) = v818 v815
                let v822 : string = v793.TrimEnd v819 
                let v840 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v841 : string = @"println!(""{}"", $0)"
                Fable.Core.RustInterop.emitRustExpr v822 v841 
                let _v840 = () 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v842 : string = @"println!(""{}"", $0)"
                Fable.Core.RustInterop.emitRustExpr v822 v842 
                let _v840 = () 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v843 : string = $"near_sdk::log!(\"{{}}\", $0)"
                Fable.Core.RustInterop.emitRustExpr v822 v843 
                let _v840 = () 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                System.Console.WriteLine v822 
                let _v840 = () 
                #endif
#if FABLE_COMPILER_PYTHON
                System.Console.WriteLine v822 
                let _v840 = () 
                #endif
#else
                System.Console.WriteLine v822 
                let _v840 = () 
                #endif
                _v840 
                let v844 : (string -> unit) = v159.l0
                v844 v822
            US42_1
        | US41_0(v7) -> (* Ok *)
            let v8 : string = "async_walkdir::DirEntry::path(&$0)"
            let v9 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v7 v8 
            let v10 : string = "$0.display()"
            let v11 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v9 v10 
            let v12 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v13 : string = "format!(\"{}\", $0)"
            let v14 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11 v13 
            let _v12 = v14 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v15 : string = "format!(\"{}\", $0)"
            let v16 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11 v15 
            let _v12 = v16 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v17 : string = "format!(\"{}\", $0)"
            let v18 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11 v17 
            let _v12 = v18 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v19 : std_string_String = null |> unbox<std_string_String>
            let _v12 = v19 
            #endif
#if FABLE_COMPILER_PYTHON
            let v22 : std_string_String = null |> unbox<std_string_String>
            let _v12 = v22 
            #endif
#else
            let v25 : std_string_String = null |> unbox<std_string_String>
            let _v12 = v25 
            #endif
            let v28 : std_string_String = _v12 
            let v33 : string = "fable_library_rust::String_::fromString($0)"
            let v34 : string = Fable.Core.RustInterop.emitRustExpr v28 v33 
            let v35 : string = "ts"
            let v36 : string = $"fable-library-{v35}\.(?<a>[\d.]+)$"
            let v37 : string = $"regex::Regex::new(&$0)"
            let v38 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v36 v37 
            let v39 : string = "$0.unwrap()"
            let v40 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v38 v39 
            let v41 : string = "&*$0"
            let v42 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v34 v41 
            let v43 : string = "String::from($0)"
            let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v42 v43 
            let v45 : string = "true; let _result = (move || { // rust.capture_move"
            let v46 : bool = Fable.Core.RustInterop.emitRustExpr () v45 
            let v47 : string = "Box::new($0)"
            let v48 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v44 v47 
            let v49 : string = "Box::leak($0)"
            let v50 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v48 v49 
            let v51 : string = $"v40.captures_iter(v50)"
            let v52 : regex_CaptureMatches = Fable.Core.RustInterop.emitRustExpr () v51 
            let v53 : string = "true; let _result : Vec<_> = v52.map(|x| { //"
            let v54 : bool = Fable.Core.RustInterop.emitRustExpr () v53 
            let v55 : string = $"x"
            let v56 : regex_Captures<StaticLifetime> = Fable.Core.RustInterop.emitRustExpr () v55 
            let v57 : string = "Box::new($0)"
            let v58 : Box<regex_Captures<StaticLifetime>> = Fable.Core.RustInterop.emitRustExpr v56 v57 
            let v59 : string = "Box::leak($0)"
            let v60 : Ref<Lifetime<StaticLifetime, Mut<regex_Captures<StaticLifetime>>>> = Fable.Core.RustInterop.emitRustExpr v58 v59 
            let v61 : string = $"$0.capture_names()"
            let v62 : regex_CaptureNames = Fable.Core.RustInterop.emitRustExpr v40 v61 
            let v63 : string = "true; let _result : std::collections::HashMap<_, _> = v62.map(|x| { //"
            let v64 : bool = Fable.Core.RustInterop.emitRustExpr () v63 
            let v65 : string = "x.unwrap_or(\"\").to_string().into()"
            let v66 : string = Fable.Core.RustInterop.emitRustExpr () v65 
            let v67 : string = "$0.clone()"
            let v68 : string = Fable.Core.RustInterop.emitRustExpr v66 v67 
            let v69 : string = $"v60.name(&$0).map(|x| x.as_str()).unwrap_or(\"\").to_string().into()"
            let v70 : string = Fable.Core.RustInterop.emitRustExpr v66 v69 
            let v71 : (string * string) = v68, v70 
            let v72 : string = "true; $0 }).map(|x| std::sync::Arc::try_unwrap(x).unwrap_or_else(|x| (*x).clone())).collect()"
            let v73 : bool = Fable.Core.RustInterop.emitRustExpr v71 v72 
            let v74 : string = "_result"
            let v75 : std_collections_HashMap<string, string> = Fable.Core.RustInterop.emitRustExpr () v74 
            let v76 : string = "true; $0 }).collect::<Vec<_>>()"
            let v77 : bool = Fable.Core.RustInterop.emitRustExpr v75 v76 
            let v78 : string = "_result"
            let v79 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v78 
            let v80 : string = "true; $0 })()"
            let v81 : bool = Fable.Core.RustInterop.emitRustExpr v79 v80 
            let v82 : string = "_result"
            let v83 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v82 
            let v84 : string = "fable_library_rust::NativeArray_::array_from($0)"
            let v85 : (std_collections_HashMap<string, string> []) = Fable.Core.RustInterop.emitRustExpr v83 v84 
            let v86 : std_collections_HashMap<string, string> option = v85 |> Array.tryItem 0 
            let v87 : US37 option = None
            let _v87 = ref v87 
            match v86 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v88 : std_collections_HashMap<string, string> = x
            let v89 : US37 = US37_0(v88)
            v89 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v87.Value <- x
            let v90 : US37 option = _v87.Value 
            let v101 : US37 = US37_1
            let v102 : US37 = v90 |> Option.defaultValue v101 
            let v132 : US38 =
                match v102 with
                | US37_1 -> (* None *)
                    US38_1
                | US37_0(v106) -> (* Some *)
                    let v107 : string = method110()
                    let v108 : string = "std::collections::HashMap::get(&$0, &v107).map(|x| x).cloned()"
                    let v109 : string option = Fable.Core.RustInterop.emitRustExpr v106 v108 
                    let v110 : US1 option = None
                    let _v110 = ref v110 
                    match v109 with
                    | Some x -> (
                    (fun () ->
                    (fun () ->
                    let v111 : string = x
                    let v112 : US1 = US1_0(v111)
                    v112 
                    )
                    |> fun x -> x () |> Some
                    ) () ) | None -> None
                    |> fun x -> _v110.Value <- x
                    let v113 : US1 option = _v110.Value 
                    let v124 : US1 = US1_1
                    let v125 : US1 = v113 |> Option.defaultValue v124 
                    US38_0(v125)
            let v139 : US1 =
                match v132 with
                | US38_0(v133) -> (* Some *)
                    match v133 with
                    | US1_0(v134) -> (* Some *)
                        US1_0(v134)
                    | _ ->
                        US1_1
                | _ ->
                    US1_1
            match v139 with
            | US1_1 -> (* None *)
                US42_1
            | US1_0(v141) -> (* Some *)
                US42_0(v34, v141)
    match v847 with
    | US42_1 -> (* None *)
        let v853 : struct (string * string) option = None
        v853
    | US42_0(v848, v849) -> (* Some *)
        let v850 : struct (string * string) option = Some struct (v848, v849) 
        v850
and method118 () : (Result<async_walkdir_DirEntry, async_walkdir_Error> -> struct (string * string) option) =
    closure69()
and closure74 () struct (v0 : string, v1 : string) : struct (string * string) =
    struct (v0, v1)
and closure75 () () : string =
    let v0 : string = "spiral_builder.process_typescript"
    v0
and closure76 () () : string =
    let v0 : string = $"spiral_builder.process_typescript"
    v0
and closure77 () () : string =
    let v0 : string = "spiral_builder.process_typescript"
    v0
and method120 (v0 : UH5, v1 : UH5) : UH5 =
    match v0 with
    | UH5_1(v2, v3, v4) -> (* Cons *)
        let v5 : UH5 = method120(v4, v1)
        UH5_1(v2, v3, v5)
    | UH5_0 -> (* Nil *)
        v1
and method121 (v0 : UH5, v1 : struct (string * string) list) : struct (string * string) list =
    match v0 with
    | UH5_1(v2, v3, v4) -> (* Cons *)
        let v5 : struct (string * string) list = method121(v4, v1)
        let v6 : struct (string * string) list = struct (v2, v3) :: v5 
        v6
    | UH5_0 -> (* Nil *)
        v1
and closure78 (v0 : string) () : string =
    let v1 : string = "\n"
    let v2 : (string []) = v0.Split v1 
    let v3 : string seq = v2 |> Seq.ofArray
    let v6 : (string -> (string seq -> string)) = String.concat
    let v7 : (string seq -> string) = v6 v1
    v7 v3
and closure80 () () : string =
    let v0 : string = "spiral_builder.process_typescript / Exception"
    v0
and closure79 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US1 =
    let v4 : bool = State.trace_state.IsNone
    if v4 then
        let v5 : US0 = US0_0
        let struct (v6 : Mut0, v7 : Mut1, v8 : Mut2, v9 : Mut3, v10 : int64 option) = method1(v5)
        let v11 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v6, v7, v8, v9, v10) 
        State.trace_state <- v11 
        ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : bool = State.trace_state.IsNone
    if v31 then
        let v32 : US0 = US0_0
        let struct (v33 : Mut0, v34 : Mut1, v35 : Mut2, v36 : Mut3, v37 : int64 option) = method1(v32)
        let v38 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v33, v34, v35, v36, v37) 
        State.trace_state <- v38 
        ()
    let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : int64 option) = State.trace_state.Value
    let v58 : US0 = v46.l0
    let v59 : bool = v45.l0
    let v60 : bool = v59 = false
    let v63 : bool =
        if v60 then
            false
        else
            let v61 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v58
            let v62 : bool = 4 >= v61
            v62
    if v63 then
        let v64 : int64 = v16.l0
        let v65 : int64 = v64 + 1L
        v16.l0 <- v65
        let v66 : bool = State.trace_state.IsNone
        if v66 then
            let v67 : US0 = US0_0
            let struct (v68 : Mut0, v69 : Mut1, v70 : Mut2, v71 : Mut3, v72 : int64 option) = method1(v67)
            let v73 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v68, v69, v70, v71, v72) 
            State.trace_state <- v73 
            ()
        let struct (v78 : Mut0, v79 : Mut1, v80 : Mut2, v81 : Mut3, v82 : int64 option) = State.trace_state.Value
        let v93 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v94 : US3 option = None
        let _v94 = ref v94 
        match v82 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v95 : int64 = x
        let v96 : US3 = US3_0(v95)
        v96 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v94.Value <- x
        let v97 : US3 option = _v94.Value 
        let v108 : US3 = US3_1
        let v109 : US3 = v97 |> Option.defaultValue v108 
        let v149 : System.DateTime =
            match v109 with
            | US3_1 -> (* None *)
                let v145 : System.DateTime = System.DateTime.Now
                v145
            | US3_0(v113) -> (* Some *)
                let v114 : System.DateTime = System.DateTime.Now
                let v117 : (System.DateTime -> int64) = _.Ticks
                let v118 : int64 = v117 v114
                let v121 : int64 = v118 - v113
                let v122 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v123 : System.TimeSpan = v122 v121
                let v126 : (System.TimeSpan -> int32) = _.Hours
                let v127 : int32 = v126 v123
                let v130 : (System.TimeSpan -> int32) = _.Minutes
                let v131 : int32 = v130 v123
                let v134 : (System.TimeSpan -> int32) = _.Seconds
                let v135 : int32 = v134 v123
                let v138 : (System.TimeSpan -> int32) = _.Milliseconds
                let v139 : int32 = v138 v123
                let v142 : System.DateTime = System.DateTime (1, 1, 1, v127, v131, v135, v139)
                v142
        let v150 : string = method6()
        let v153 : (string -> string) = v149.ToString
        let v154 : string = v153 v150
        let _v93 = v154 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v157 : US3 option = None
        let _v157 = ref v157 
        match v82 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v158 : int64 = x
        let v159 : US3 = US3_0(v158)
        v159 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v157.Value <- x
        let v160 : US3 option = _v157.Value 
        let v171 : US3 = US3_1
        let v172 : US3 = v160 |> Option.defaultValue v171 
        let v212 : System.DateTime =
            match v172 with
            | US3_1 -> (* None *)
                let v208 : System.DateTime = System.DateTime.Now
                v208
            | US3_0(v176) -> (* Some *)
                let v177 : System.DateTime = System.DateTime.Now
                let v180 : (System.DateTime -> int64) = _.Ticks
                let v181 : int64 = v180 v177
                let v184 : int64 = v181 - v176
                let v185 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v186 : System.TimeSpan = v185 v184
                let v189 : (System.TimeSpan -> int32) = _.Hours
                let v190 : int32 = v189 v186
                let v193 : (System.TimeSpan -> int32) = _.Minutes
                let v194 : int32 = v193 v186
                let v197 : (System.TimeSpan -> int32) = _.Seconds
                let v198 : int32 = v197 v186
                let v201 : (System.TimeSpan -> int32) = _.Milliseconds
                let v202 : int32 = v201 v186
                let v205 : System.DateTime = System.DateTime (1, 1, 1, v190, v194, v198, v202)
                v205
        let v213 : string = method6()
        let v216 : (string -> string) = v212.ToString
        let v217 : string = v216 v213
        let _v93 = v217 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v220 : string = $"near_sdk::env::block_timestamp()"
        let v221 : uint64 = Fable.Core.RustInterop.emitRustExpr () v220 
        let v222 : US3 option = None
        let _v222 = ref v222 
        match v82 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v223 : int64 = x
        let v224 : US3 = US3_0(v223)
        v224 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v222.Value <- x
        let v225 : US3 option = _v222.Value 
        let v236 : US3 = US3_1
        let v237 : US3 = v225 |> Option.defaultValue v236 
        let v246 : uint64 =
            match v237 with
            | US3_1 -> (* None *)
                v221
            | US3_0(v241) -> (* Some *)
                let v242 : (int64 -> uint64) = uint64
                let v243 : uint64 = v242 v241
                let v244 : uint64 = v221 - v243
                v244
        let v247 : uint64 = v246 / 1000000000UL
        let v248 : uint64 = v247 % 60UL
        let v249 : uint64 = v247 / 60UL
        let v250 : uint64 = v249 % 60UL
        let v251 : uint64 = v247 / 3600UL
        let v252 : uint64 = v251 % 24UL
        let v253 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v254 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v252, v250, v248) v253 
        let v255 : string = "fable_library_rust::String_::fromString($0)"
        let v256 : string = Fable.Core.RustInterop.emitRustExpr v254 v255 
        let _v93 = v256 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v257 : US3 option = None
        let _v257 = ref v257 
        match v82 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v258 : int64 = x
        let v259 : US3 = US3_0(v258)
        v259 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v257.Value <- x
        let v260 : US3 option = _v257.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v312 : System.DateTime =
            match v272 with
            | US3_1 -> (* None *)
                let v308 : System.DateTime = System.DateTime.Now
                v308
            | US3_0(v276) -> (* Some *)
                let v277 : System.DateTime = System.DateTime.Now
                let v280 : (System.DateTime -> int64) = _.Ticks
                let v281 : int64 = v280 v277
                let v284 : int64 = v281 - v276
                let v285 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v286 : System.TimeSpan = v285 v284
                let v289 : (System.TimeSpan -> int32) = _.Hours
                let v290 : int32 = v289 v286
                let v293 : (System.TimeSpan -> int32) = _.Minutes
                let v294 : int32 = v293 v286
                let v297 : (System.TimeSpan -> int32) = _.Seconds
                let v298 : int32 = v297 v286
                let v301 : (System.TimeSpan -> int32) = _.Milliseconds
                let v302 : int32 = v301 v286
                let v305 : System.DateTime = System.DateTime (1, 1, 1, v290, v294, v298, v302)
                v305
        let v313 : string = method7()
        let v316 : (string -> string) = v312.ToString
        let v317 : string = v316 v313
        let _v93 = v317 
        #endif
#if FABLE_COMPILER_PYTHON
        let v320 : US3 option = None
        let _v320 = ref v320 
        match v82 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v321 : int64 = x
        let v322 : US3 = US3_0(v321)
        v322 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v320.Value <- x
        let v323 : US3 option = _v320.Value 
        let v334 : US3 = US3_1
        let v335 : US3 = v323 |> Option.defaultValue v334 
        let v375 : System.DateTime =
            match v335 with
            | US3_1 -> (* None *)
                let v371 : System.DateTime = System.DateTime.Now
                v371
            | US3_0(v339) -> (* Some *)
                let v340 : System.DateTime = System.DateTime.Now
                let v343 : (System.DateTime -> int64) = _.Ticks
                let v344 : int64 = v343 v340
                let v347 : int64 = v344 - v339
                let v348 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v349 : System.TimeSpan = v348 v347
                let v352 : (System.TimeSpan -> int32) = _.Hours
                let v353 : int32 = v352 v349
                let v356 : (System.TimeSpan -> int32) = _.Minutes
                let v357 : int32 = v356 v349
                let v360 : (System.TimeSpan -> int32) = _.Seconds
                let v361 : int32 = v360 v349
                let v364 : (System.TimeSpan -> int32) = _.Milliseconds
                let v365 : int32 = v364 v349
                let v368 : System.DateTime = System.DateTime (1, 1, 1, v353, v357, v361, v365)
                v368
        let v376 : string = method7()
        let v379 : (string -> string) = v375.ToString
        let v380 : string = v379 v376
        let _v93 = v380 
        #endif
#else
        let v383 : US3 option = None
        let _v383 = ref v383 
        match v82 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v384 : int64 = x
        let v385 : US3 = US3_0(v384)
        v385 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v383.Value <- x
        let v386 : US3 option = _v383.Value 
        let v397 : US3 = US3_1
        let v398 : US3 = v386 |> Option.defaultValue v397 
        let v438 : System.DateTime =
            match v398 with
            | US3_1 -> (* None *)
                let v434 : System.DateTime = System.DateTime.Now
                v434
            | US3_0(v402) -> (* Some *)
                let v403 : System.DateTime = System.DateTime.Now
                let v406 : (System.DateTime -> int64) = _.Ticks
                let v407 : int64 = v406 v403
                let v410 : int64 = v407 - v402
                let v411 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v412 : System.TimeSpan = v411 v410
                let v415 : (System.TimeSpan -> int32) = _.Hours
                let v416 : int32 = v415 v412
                let v419 : (System.TimeSpan -> int32) = _.Minutes
                let v420 : int32 = v419 v412
                let v423 : (System.TimeSpan -> int32) = _.Seconds
                let v424 : int32 = v423 v412
                let v427 : (System.TimeSpan -> int32) = _.Milliseconds
                let v428 : int32 = v427 v412
                let v431 : System.DateTime = System.DateTime (1, 1, 1, v416, v420, v424, v428)
                v431
        let v439 : string = method7()
        let v442 : (string -> string) = v438.ToString
        let v443 : string = v442 v439
        let _v93 = v443 
        #endif
        let v446 : string = _v93 
        let v511 : string = "Critical"
        let v512 : (unit -> string) = v511.ToLower
        let v513 : string = v512 ()
        let v516 : string = v513.PadLeft (7, ' ')
        let v530 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v531 : string = "inline_colorization::color_bright_red"
        let v532 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v531 
        let v533 : string = "&*$0"
        let v534 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v516 v533 
        let v535 : string = "inline_colorization::color_reset"
        let v536 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v535 
        let v537 : string = "\"{v532}{v534}{v536}\""
        let v538 : string = @$"format!(" + v537 + ")"
        let v539 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v538 
        let v540 : string = "fable_library_rust::String_::fromString($0)"
        let v541 : string = Fable.Core.RustInterop.emitRustExpr v539 v540 
        let _v530 = v541 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v542 : string = "inline_colorization::color_bright_red"
        let v543 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v542 
        let v544 : string = "&*$0"
        let v545 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v516 v544 
        let v546 : string = "inline_colorization::color_reset"
        let v547 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v546 
        let v548 : string = "\"{v543}{v545}{v547}\""
        let v549 : string = @$"format!(" + v548 + ")"
        let v550 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v549 
        let v551 : string = "fable_library_rust::String_::fromString($0)"
        let v552 : string = Fable.Core.RustInterop.emitRustExpr v550 v551 
        let _v530 = v552 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v553 : string = "inline_colorization::color_bright_red"
        let v554 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v553 
        let v555 : string = "&*$0"
        let v556 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v516 v555 
        let v557 : string = "inline_colorization::color_reset"
        let v558 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v557 
        let v559 : string = "\"{v554}{v556}{v558}\""
        let v560 : string = @$"format!(" + v559 + ")"
        let v561 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v560 
        let v562 : string = "fable_library_rust::String_::fromString($0)"
        let v563 : string = Fable.Core.RustInterop.emitRustExpr v561 v562 
        let _v530 = v563 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v564 : string = "\u001b[91m"
        let v565 : string = method8()
        let v566 : string = v564 + v516 
        let v567 : string = v566 + v565 
        let _v530 = v567 
        #endif
#if FABLE_COMPILER_PYTHON
        let v568 : string = "\u001b[91m"
        let v569 : string = method8()
        let v570 : string = v568 + v516 
        let v571 : string = v570 + v569 
        let _v530 = v571 
        #endif
#else
        let v572 : string = "\u001b[91m"
        let v573 : string = method8()
        let v574 : string = v572 + v516 
        let v575 : string = v574 + v573 
        let _v530 = v575 
        #endif
        let v576 : string = _v530 
        let v582 : int64 = v78.l0
        let v583 : string = method9()
        let v584 : Mut4 = {l0 = v583} : Mut4
        let v585 : string = "{ "
        let v586 : string = $"{v585}"
        let v589 : string = v584.l0
        let v590 : string = v589 + v586 
        v584.l0 <- v590
        let v591 : string = "ex"
        let v592 : string = $"{v591}"
        let v595 : string = v584.l0
        let v596 : string = v595 + v592 
        v584.l0 <- v596
        let v597 : string = " = "
        let v598 : string = $"{v597}"
        let v601 : string = v584.l0
        let v602 : string = v601 + v598 
        v584.l0 <- v602
        let v603 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v604 : string = "format!(\"{:#?}\", $0)"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v603 = v607 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v608 : string = "format!(\"{:#?}\", $0)"
        let v609 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v608 
        let v610 : string = "fable_library_rust::String_::fromString($0)"
        let v611 : string = Fable.Core.RustInterop.emitRustExpr v609 v610 
        let _v603 = v611 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v612 : string = "format!(\"{:#?}\", $0)"
        let v613 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v612 
        let v614 : string = "fable_library_rust::String_::fromString($0)"
        let v615 : string = Fable.Core.RustInterop.emitRustExpr v613 v614 
        let _v603 = v615 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v616 : string = $"%A{v3}"
        let _v603 = v616 
        #endif
#if FABLE_COMPILER_PYTHON
        let v619 : string = $"%A{v3}"
        let _v603 = v619 
        #endif
#else
        let v622 : string = $"%A{v3}"
        let _v603 = v622 
        #endif
        let v625 : string = _v603 
        let v630 : string = $"{v625}"
        let v633 : string = v584.l0
        let v634 : string = v633 + v630 
        v584.l0 <- v634
        let v635 : string = "; "
        let v636 : string = $"{v635}"
        let v639 : string = v584.l0
        let v640 : string = v639 + v636 
        v584.l0 <- v640
        let v641 : string = "new_code_path"
        let v642 : string = $"{v641}"
        let v645 : string = v584.l0
        let v646 : string = v645 + v642 
        v584.l0 <- v646
        let v647 : string = $"{v597}"
        let v650 : string = v584.l0
        let v651 : string = v650 + v647 
        v584.l0 <- v651
        let v652 : string = $"{v0}"
        let v655 : string = v584.l0
        let v656 : string = v655 + v652 
        v584.l0 <- v656
        let v657 : string = $"{v635}"
        let v660 : string = v584.l0
        let v661 : string = v660 + v657 
        v584.l0 <- v661
        let v662 : string = "external_command"
        let v663 : string = $"{v662}"
        let v666 : string = v584.l0
        let v667 : string = v666 + v663 
        v584.l0 <- v667
        let v668 : string = $"{v597}"
        let v671 : string = v584.l0
        let v672 : string = v671 + v668 
        v584.l0 <- v672
        let v673 : string = $"{v2}"
        let v676 : string = v584.l0
        let v677 : string = v676 + v673 
        v584.l0 <- v677
        let v678 : string = $"{v635}"
        let v681 : string = v584.l0
        let v682 : string = v681 + v678 
        v584.l0 <- v682
        let v683 : string = "run_result"
        let v684 : string = $"{v683}"
        let v687 : string = v584.l0
        let v688 : string = v687 + v684 
        v584.l0 <- v688
        let v689 : string = $"{v597}"
        let v692 : string = v584.l0
        let v693 : string = v692 + v689 
        v584.l0 <- v693
        let v694 : string = $"{v1}"
        let v697 : string = v584.l0
        let v698 : string = v697 + v694 
        v584.l0 <- v698
        let v699 : string = " }"
        let v700 : string = $"{v699}"
        let v703 : string = v584.l0
        let v704 : string = v703 + v700 
        v584.l0 <- v704
        let v705 : string = v584.l0
        let v706 : (unit -> string) = closure80()
        let v707 : string = $"{v446} {v576} #{v582} %s{v706 ()} / {v705}"
        let v710 : char list = []
        let v711 : (char list -> (char [])) = List.toArray
        let v712 : (char []) = v711 v710
        let v715 : string = v707.TrimStart v712 
        let v733 : char list = []
        let v734 : char list = '/' :: v733 
        let v737 : char list = ' ' :: v734 
        let v740 : (char list -> (char [])) = List.toArray
        let v741 : (char []) = v740 v737
        let v744 : string = v715.TrimEnd v741 
        let v762 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v763 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v744 v763 
        let _v762 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v764 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v744 v764 
        let _v762 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v765 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v744 v765 
        let _v762 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        System.Console.WriteLine v744 
        let _v762 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        System.Console.WriteLine v744 
        let _v762 = () 
        #endif
#else
        System.Console.WriteLine v744 
        let _v762 = () 
        #endif
        _v762 
        let v766 : (string -> unit) = v17.l0
        v766 v744
    US1_1
and closure81 () () : string =
    let v0 : string = "spiral_builder.process_typescript / error"
    v0
and closure82 () () : string =
    let v0 : string = $"spiral_builder.process_python"
    v0
and closure83 () () : string =
    let v0 : string = "spiral_builder.process_python"
    v0
and closure84 (v0 : string) () : string =
    let v1 : string = "\n"
    let v2 : (string []) = v0.Split v1 
    let v3 : string seq = v2 |> Seq.ofArray
    let v6 : (string -> (string seq -> string)) = String.concat
    let v7 : (string seq -> string) = v6 v1
    v7 v3
and closure86 () () : string =
    let v0 : string = "spiral_builder.process_python / Exception"
    v0
and closure85 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US1 =
    let v4 : bool = State.trace_state.IsNone
    if v4 then
        let v5 : US0 = US0_0
        let struct (v6 : Mut0, v7 : Mut1, v8 : Mut2, v9 : Mut3, v10 : int64 option) = method1(v5)
        let v11 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v6, v7, v8, v9, v10) 
        State.trace_state <- v11 
        ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : int64 option) = State.trace_state.Value
    let v31 : bool = State.trace_state.IsNone
    if v31 then
        let v32 : US0 = US0_0
        let struct (v33 : Mut0, v34 : Mut1, v35 : Mut2, v36 : Mut3, v37 : int64 option) = method1(v32)
        let v38 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v33, v34, v35, v36, v37) 
        State.trace_state <- v38 
        ()
    let struct (v43 : Mut0, v44 : Mut1, v45 : Mut2, v46 : Mut3, v47 : int64 option) = State.trace_state.Value
    let v58 : US0 = v46.l0
    let v59 : bool = v45.l0
    let v60 : bool = v59 = false
    let v63 : bool =
        if v60 then
            false
        else
            let v61 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v58
            let v62 : bool = 4 >= v61
            v62
    if v63 then
        let v64 : int64 = v16.l0
        let v65 : int64 = v64 + 1L
        v16.l0 <- v65
        let v66 : bool = State.trace_state.IsNone
        if v66 then
            let v67 : US0 = US0_0
            let struct (v68 : Mut0, v69 : Mut1, v70 : Mut2, v71 : Mut3, v72 : int64 option) = method1(v67)
            let v73 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v68, v69, v70, v71, v72) 
            State.trace_state <- v73 
            ()
        let struct (v78 : Mut0, v79 : Mut1, v80 : Mut2, v81 : Mut3, v82 : int64 option) = State.trace_state.Value
        let v93 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v94 : US3 option = None
        let _v94 = ref v94 
        match v82 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v95 : int64 = x
        let v96 : US3 = US3_0(v95)
        v96 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v94.Value <- x
        let v97 : US3 option = _v94.Value 
        let v108 : US3 = US3_1
        let v109 : US3 = v97 |> Option.defaultValue v108 
        let v149 : System.DateTime =
            match v109 with
            | US3_1 -> (* None *)
                let v145 : System.DateTime = System.DateTime.Now
                v145
            | US3_0(v113) -> (* Some *)
                let v114 : System.DateTime = System.DateTime.Now
                let v117 : (System.DateTime -> int64) = _.Ticks
                let v118 : int64 = v117 v114
                let v121 : int64 = v118 - v113
                let v122 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v123 : System.TimeSpan = v122 v121
                let v126 : (System.TimeSpan -> int32) = _.Hours
                let v127 : int32 = v126 v123
                let v130 : (System.TimeSpan -> int32) = _.Minutes
                let v131 : int32 = v130 v123
                let v134 : (System.TimeSpan -> int32) = _.Seconds
                let v135 : int32 = v134 v123
                let v138 : (System.TimeSpan -> int32) = _.Milliseconds
                let v139 : int32 = v138 v123
                let v142 : System.DateTime = System.DateTime (1, 1, 1, v127, v131, v135, v139)
                v142
        let v150 : string = method6()
        let v153 : (string -> string) = v149.ToString
        let v154 : string = v153 v150
        let _v93 = v154 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v157 : US3 option = None
        let _v157 = ref v157 
        match v82 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v158 : int64 = x
        let v159 : US3 = US3_0(v158)
        v159 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v157.Value <- x
        let v160 : US3 option = _v157.Value 
        let v171 : US3 = US3_1
        let v172 : US3 = v160 |> Option.defaultValue v171 
        let v212 : System.DateTime =
            match v172 with
            | US3_1 -> (* None *)
                let v208 : System.DateTime = System.DateTime.Now
                v208
            | US3_0(v176) -> (* Some *)
                let v177 : System.DateTime = System.DateTime.Now
                let v180 : (System.DateTime -> int64) = _.Ticks
                let v181 : int64 = v180 v177
                let v184 : int64 = v181 - v176
                let v185 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v186 : System.TimeSpan = v185 v184
                let v189 : (System.TimeSpan -> int32) = _.Hours
                let v190 : int32 = v189 v186
                let v193 : (System.TimeSpan -> int32) = _.Minutes
                let v194 : int32 = v193 v186
                let v197 : (System.TimeSpan -> int32) = _.Seconds
                let v198 : int32 = v197 v186
                let v201 : (System.TimeSpan -> int32) = _.Milliseconds
                let v202 : int32 = v201 v186
                let v205 : System.DateTime = System.DateTime (1, 1, 1, v190, v194, v198, v202)
                v205
        let v213 : string = method6()
        let v216 : (string -> string) = v212.ToString
        let v217 : string = v216 v213
        let _v93 = v217 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v220 : string = $"near_sdk::env::block_timestamp()"
        let v221 : uint64 = Fable.Core.RustInterop.emitRustExpr () v220 
        let v222 : US3 option = None
        let _v222 = ref v222 
        match v82 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v223 : int64 = x
        let v224 : US3 = US3_0(v223)
        v224 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v222.Value <- x
        let v225 : US3 option = _v222.Value 
        let v236 : US3 = US3_1
        let v237 : US3 = v225 |> Option.defaultValue v236 
        let v246 : uint64 =
            match v237 with
            | US3_1 -> (* None *)
                v221
            | US3_0(v241) -> (* Some *)
                let v242 : (int64 -> uint64) = uint64
                let v243 : uint64 = v242 v241
                let v244 : uint64 = v221 - v243
                v244
        let v247 : uint64 = v246 / 1000000000UL
        let v248 : uint64 = v247 % 60UL
        let v249 : uint64 = v247 / 60UL
        let v250 : uint64 = v249 % 60UL
        let v251 : uint64 = v247 / 3600UL
        let v252 : uint64 = v251 % 24UL
        let v253 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v254 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v252, v250, v248) v253 
        let v255 : string = "fable_library_rust::String_::fromString($0)"
        let v256 : string = Fable.Core.RustInterop.emitRustExpr v254 v255 
        let _v93 = v256 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v257 : US3 option = None
        let _v257 = ref v257 
        match v82 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v258 : int64 = x
        let v259 : US3 = US3_0(v258)
        v259 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v257.Value <- x
        let v260 : US3 option = _v257.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v312 : System.DateTime =
            match v272 with
            | US3_1 -> (* None *)
                let v308 : System.DateTime = System.DateTime.Now
                v308
            | US3_0(v276) -> (* Some *)
                let v277 : System.DateTime = System.DateTime.Now
                let v280 : (System.DateTime -> int64) = _.Ticks
                let v281 : int64 = v280 v277
                let v284 : int64 = v281 - v276
                let v285 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v286 : System.TimeSpan = v285 v284
                let v289 : (System.TimeSpan -> int32) = _.Hours
                let v290 : int32 = v289 v286
                let v293 : (System.TimeSpan -> int32) = _.Minutes
                let v294 : int32 = v293 v286
                let v297 : (System.TimeSpan -> int32) = _.Seconds
                let v298 : int32 = v297 v286
                let v301 : (System.TimeSpan -> int32) = _.Milliseconds
                let v302 : int32 = v301 v286
                let v305 : System.DateTime = System.DateTime (1, 1, 1, v290, v294, v298, v302)
                v305
        let v313 : string = method7()
        let v316 : (string -> string) = v312.ToString
        let v317 : string = v316 v313
        let _v93 = v317 
        #endif
#if FABLE_COMPILER_PYTHON
        let v320 : US3 option = None
        let _v320 = ref v320 
        match v82 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v321 : int64 = x
        let v322 : US3 = US3_0(v321)
        v322 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v320.Value <- x
        let v323 : US3 option = _v320.Value 
        let v334 : US3 = US3_1
        let v335 : US3 = v323 |> Option.defaultValue v334 
        let v375 : System.DateTime =
            match v335 with
            | US3_1 -> (* None *)
                let v371 : System.DateTime = System.DateTime.Now
                v371
            | US3_0(v339) -> (* Some *)
                let v340 : System.DateTime = System.DateTime.Now
                let v343 : (System.DateTime -> int64) = _.Ticks
                let v344 : int64 = v343 v340
                let v347 : int64 = v344 - v339
                let v348 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v349 : System.TimeSpan = v348 v347
                let v352 : (System.TimeSpan -> int32) = _.Hours
                let v353 : int32 = v352 v349
                let v356 : (System.TimeSpan -> int32) = _.Minutes
                let v357 : int32 = v356 v349
                let v360 : (System.TimeSpan -> int32) = _.Seconds
                let v361 : int32 = v360 v349
                let v364 : (System.TimeSpan -> int32) = _.Milliseconds
                let v365 : int32 = v364 v349
                let v368 : System.DateTime = System.DateTime (1, 1, 1, v353, v357, v361, v365)
                v368
        let v376 : string = method7()
        let v379 : (string -> string) = v375.ToString
        let v380 : string = v379 v376
        let _v93 = v380 
        #endif
#else
        let v383 : US3 option = None
        let _v383 = ref v383 
        match v82 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v384 : int64 = x
        let v385 : US3 = US3_0(v384)
        v385 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v383.Value <- x
        let v386 : US3 option = _v383.Value 
        let v397 : US3 = US3_1
        let v398 : US3 = v386 |> Option.defaultValue v397 
        let v438 : System.DateTime =
            match v398 with
            | US3_1 -> (* None *)
                let v434 : System.DateTime = System.DateTime.Now
                v434
            | US3_0(v402) -> (* Some *)
                let v403 : System.DateTime = System.DateTime.Now
                let v406 : (System.DateTime -> int64) = _.Ticks
                let v407 : int64 = v406 v403
                let v410 : int64 = v407 - v402
                let v411 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v412 : System.TimeSpan = v411 v410
                let v415 : (System.TimeSpan -> int32) = _.Hours
                let v416 : int32 = v415 v412
                let v419 : (System.TimeSpan -> int32) = _.Minutes
                let v420 : int32 = v419 v412
                let v423 : (System.TimeSpan -> int32) = _.Seconds
                let v424 : int32 = v423 v412
                let v427 : (System.TimeSpan -> int32) = _.Milliseconds
                let v428 : int32 = v427 v412
                let v431 : System.DateTime = System.DateTime (1, 1, 1, v416, v420, v424, v428)
                v431
        let v439 : string = method7()
        let v442 : (string -> string) = v438.ToString
        let v443 : string = v442 v439
        let _v93 = v443 
        #endif
        let v446 : string = _v93 
        let v511 : string = "Critical"
        let v512 : (unit -> string) = v511.ToLower
        let v513 : string = v512 ()
        let v516 : string = v513.PadLeft (7, ' ')
        let v530 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v531 : string = "inline_colorization::color_bright_red"
        let v532 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v531 
        let v533 : string = "&*$0"
        let v534 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v516 v533 
        let v535 : string = "inline_colorization::color_reset"
        let v536 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v535 
        let v537 : string = "\"{v532}{v534}{v536}\""
        let v538 : string = @$"format!(" + v537 + ")"
        let v539 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v538 
        let v540 : string = "fable_library_rust::String_::fromString($0)"
        let v541 : string = Fable.Core.RustInterop.emitRustExpr v539 v540 
        let _v530 = v541 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v542 : string = "inline_colorization::color_bright_red"
        let v543 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v542 
        let v544 : string = "&*$0"
        let v545 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v516 v544 
        let v546 : string = "inline_colorization::color_reset"
        let v547 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v546 
        let v548 : string = "\"{v543}{v545}{v547}\""
        let v549 : string = @$"format!(" + v548 + ")"
        let v550 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v549 
        let v551 : string = "fable_library_rust::String_::fromString($0)"
        let v552 : string = Fable.Core.RustInterop.emitRustExpr v550 v551 
        let _v530 = v552 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v553 : string = "inline_colorization::color_bright_red"
        let v554 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v553 
        let v555 : string = "&*$0"
        let v556 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v516 v555 
        let v557 : string = "inline_colorization::color_reset"
        let v558 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v557 
        let v559 : string = "\"{v554}{v556}{v558}\""
        let v560 : string = @$"format!(" + v559 + ")"
        let v561 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v560 
        let v562 : string = "fable_library_rust::String_::fromString($0)"
        let v563 : string = Fable.Core.RustInterop.emitRustExpr v561 v562 
        let _v530 = v563 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v564 : string = "\u001b[91m"
        let v565 : string = method8()
        let v566 : string = v564 + v516 
        let v567 : string = v566 + v565 
        let _v530 = v567 
        #endif
#if FABLE_COMPILER_PYTHON
        let v568 : string = "\u001b[91m"
        let v569 : string = method8()
        let v570 : string = v568 + v516 
        let v571 : string = v570 + v569 
        let _v530 = v571 
        #endif
#else
        let v572 : string = "\u001b[91m"
        let v573 : string = method8()
        let v574 : string = v572 + v516 
        let v575 : string = v574 + v573 
        let _v530 = v575 
        #endif
        let v576 : string = _v530 
        let v582 : int64 = v78.l0
        let v583 : string = method9()
        let v584 : Mut4 = {l0 = v583} : Mut4
        let v585 : string = "{ "
        let v586 : string = $"{v585}"
        let v589 : string = v584.l0
        let v590 : string = v589 + v586 
        v584.l0 <- v590
        let v591 : string = "ex"
        let v592 : string = $"{v591}"
        let v595 : string = v584.l0
        let v596 : string = v595 + v592 
        v584.l0 <- v596
        let v597 : string = " = "
        let v598 : string = $"{v597}"
        let v601 : string = v584.l0
        let v602 : string = v601 + v598 
        v584.l0 <- v602
        let v603 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v604 : string = "format!(\"{:#?}\", $0)"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v603 = v607 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v608 : string = "format!(\"{:#?}\", $0)"
        let v609 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v608 
        let v610 : string = "fable_library_rust::String_::fromString($0)"
        let v611 : string = Fable.Core.RustInterop.emitRustExpr v609 v610 
        let _v603 = v611 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v612 : string = "format!(\"{:#?}\", $0)"
        let v613 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v612 
        let v614 : string = "fable_library_rust::String_::fromString($0)"
        let v615 : string = Fable.Core.RustInterop.emitRustExpr v613 v614 
        let _v603 = v615 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v616 : string = $"%A{v3}"
        let _v603 = v616 
        #endif
#if FABLE_COMPILER_PYTHON
        let v619 : string = $"%A{v3}"
        let _v603 = v619 
        #endif
#else
        let v622 : string = $"%A{v3}"
        let _v603 = v622 
        #endif
        let v625 : string = _v603 
        let v630 : string = $"{v625}"
        let v633 : string = v584.l0
        let v634 : string = v633 + v630 
        v584.l0 <- v634
        let v635 : string = "; "
        let v636 : string = $"{v635}"
        let v639 : string = v584.l0
        let v640 : string = v639 + v636 
        v584.l0 <- v640
        let v641 : string = "run_result"
        let v642 : string = $"{v641}"
        let v645 : string = v584.l0
        let v646 : string = v645 + v642 
        v584.l0 <- v646
        let v647 : string = $"{v597}"
        let v650 : string = v584.l0
        let v651 : string = v650 + v647 
        v584.l0 <- v651
        let v652 : string = $"{v1}"
        let v655 : string = v584.l0
        let v656 : string = v655 + v652 
        v584.l0 <- v656
        let v657 : string = $"{v635}"
        let v660 : string = v584.l0
        let v661 : string = v660 + v657 
        v584.l0 <- v661
        let v662 : string = "new_code_path"
        let v663 : string = $"{v662}"
        let v666 : string = v584.l0
        let v667 : string = v666 + v663 
        v584.l0 <- v667
        let v668 : string = $"{v597}"
        let v671 : string = v584.l0
        let v672 : string = v671 + v668 
        v584.l0 <- v672
        let v673 : string = $"{v0}"
        let v676 : string = v584.l0
        let v677 : string = v676 + v673 
        v584.l0 <- v677
        let v678 : string = $"{v635}"
        let v681 : string = v584.l0
        let v682 : string = v681 + v678 
        v584.l0 <- v682
        let v683 : string = "external_command"
        let v684 : string = $"{v683}"
        let v687 : string = v584.l0
        let v688 : string = v687 + v684 
        v584.l0 <- v688
        let v689 : string = $"{v597}"
        let v692 : string = v584.l0
        let v693 : string = v692 + v689 
        v584.l0 <- v693
        let v694 : string = $"{v2}"
        let v697 : string = v584.l0
        let v698 : string = v697 + v694 
        v584.l0 <- v698
        let v699 : string = " }"
        let v700 : string = $"{v699}"
        let v703 : string = v584.l0
        let v704 : string = v703 + v700 
        v584.l0 <- v704
        let v705 : string = v584.l0
        let v706 : (unit -> string) = closure86()
        let v707 : string = $"{v446} {v576} #{v582} %s{v706 ()} / {v705}"
        let v710 : char list = []
        let v711 : (char list -> (char [])) = List.toArray
        let v712 : (char []) = v711 v710
        let v715 : string = v707.TrimStart v712 
        let v733 : char list = []
        let v734 : char list = '/' :: v733 
        let v737 : char list = ' ' :: v734 
        let v740 : (char list -> (char [])) = List.toArray
        let v741 : (char []) = v740 v737
        let v744 : string = v715.TrimEnd v741 
        let v762 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v763 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v744 v763 
        let _v762 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v764 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v744 v764 
        let _v762 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v765 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v744 v765 
        let _v762 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        System.Console.WriteLine v744 
        let _v762 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        System.Console.WriteLine v744 
        let _v762 = () 
        #endif
#else
        System.Console.WriteLine v744 
        let _v762 = () 
        #endif
        _v762 
        let v766 : (string -> unit) = v17.l0
        v766 v744
    US1_1
and closure87 () () : string =
    let v0 : string = "spiral_builder.process_python / error"
    v0
and closure88 () () : string =
    let v0 : string = "spiral_builder.run / invalid subcommand"
    v0
and closure89 () struct (v0 : string, v1 : string) : (std_string_String * std_string_String) =
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v6 
    let v8 : string = "String::from($0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : (std_string_String * std_string_String) = v5, v9 
    v10
and closure90 () (v0 : serde_json_Error) : string =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#else
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
    let v17 : std_string_String = _v1 
    let v22 : string = "fable_library_rust::String_::fromString($0)"
    let v23 : string = Fable.Core.RustInterop.emitRustExpr v17 v22 
    v23
and method122 () : (serde_json_Error -> string) =
    closure90()
and method123 (v0 : Result<string, string>) : Result<string, string> =
    v0
and method10 (v0 : US0, v1 : clap_ArgMatches) : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> =
    let v2 : string = "let __result = Box::pin(async move { //"
    Fable.Core.RustInterop.emitRustExpr () v2 
    let v3 : string = "clap::ArgMatches::subcommand(Box::leak(Box::new($0))).map(|(a, b)| ($1(a), b.clone()))"
    let v4 : (Ref<Str> -> std_string_String) = closure4()
    let v5 : struct (std_string_String * clap_ArgMatches) option = Fable.Core.RustInterop.emitRustExpr struct (v1, v4) v3 
    let v6 : US4 option = None
    let _v6 = ref v6 
    match v5 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let struct (v7 : std_string_String, v8 : clap_ArgMatches) = x
    let v9 : US4 = US4_0(v7, v8)
    v9 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v6.Value <- x
    let v10 : US4 option = _v6.Value 
    let v22 : US4 = US4_1
    let v23 : US4 = v10 |> Option.defaultValue v22 
    let v21925 : (struct (string * string) []) =
        match v23 with
        | US4_0(v27, v28) -> (* Some *)
            let v29 : string = "fable_library_rust::String_::fromString($0)"
            let v30 : string = Fable.Core.RustInterop.emitRustExpr v27 v29 
            let v31 : bool = v30 = "cuda"
            if v31 then
                let v32 : string = method11()
                let v33 : string = "&*$0"
                let v34 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v32 v33 
                let v35 : string = "clap::ArgMatches::get_one(&$0, v34).cloned()"
                let v36 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v28 v35 
                let v37 : US5 option = None
                let _v37 = ref v37 
                match v36 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v38 : std_string_String = x
                let v39 : US5 = US5_0(v38)
                v39 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v37.Value <- x
                let v40 : US5 option = _v37.Value 
                let v51 : US5 = US5_1
                let v52 : US5 = v40 |> Option.defaultValue v51 
                let v59 : std_string_String =
                    match v52 with
                    | US5_1 -> (* None *)
                        failwith<std_string_String> "Option does not have a value."
                    | US5_0(v56) -> (* Some *)
                        v56
                let v60 : string = "fable_library_rust::String_::fromString($0)"
                let v61 : string = Fable.Core.RustInterop.emitRustExpr v59 v60 
                let v62 : string = method12()
                let v63 : string = "&*$0"
                let v64 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v62 v63 
                let v65 : string = "clap::ArgMatches::get_one(&$0, v64).cloned()"
                let v66 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v28 v65 
                let v67 : US5 option = None
                let _v67 = ref v67 
                match v66 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v68 : std_string_String = x
                let v69 : US5 = US5_0(v68)
                v69 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v67.Value <- x
                let v70 : US5 option = _v67.Value 
                let v81 : US5 = US5_1
                let v82 : US5 = v70 |> Option.defaultValue v81 
                let v111 : US6 =
                    match v82 with
                    | US5_1 -> (* None *)
                        US6_1
                    | US5_0(v86) -> (* Some *)
                        let v87 : string = "fable_library_rust::String_::fromString($0)"
                        let v88 : string = Fable.Core.RustInterop.emitRustExpr v86 v87 
                        let v89 : bool = "Pip" = v88
                        let v93 : US7 =
                            if v89 then
                                let v90 : US8 = US8_0
                                US7_0(v90)
                            else
                                US7_1
                        let v107 : US7 =
                            match v93 with
                            | US7_1 -> (* None *)
                                let v96 : bool = "Poetry" = v88
                                let v100 : US7 =
                                    if v96 then
                                        let v97 : US8 = US8_1
                                        US7_0(v97)
                                    else
                                        US7_1
                                match v100 with
                                | US7_1 -> (* None *)
                                    US7_1
                                | US7_0(v101) -> (* Some *)
                                    US7_0(v101)
                            | US7_0(v94) -> (* Some *)
                                US7_0(v94)
                        US6_0(v107)
                let v118 : US7 =
                    match v111 with
                    | US6_0(v112) -> (* Some *)
                        match v112 with
                        | US7_0(v113) -> (* Some *)
                            US7_0(v113)
                        | _ ->
                            US7_1
                    | _ ->
                        US7_1
                let v122 : US8 =
                    match v118 with
                    | US7_1 -> (* None *)
                        US8_0
                    | US7_0(v119) -> (* Some *)
                        v119
                let v123 : string = method13()
                let v124 : string = "&*$0"
                let v125 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v123 v124 
                let v126 : string = "clap::ArgMatches::get_many(&$0, v125).map(|x| x.cloned().into_iter().collect())"
                let v127 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr v28 v126 
                let v128 : US9 option = None
                let _v128 = ref v128 
                match v127 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v129 : Vec<std_string_String> = x
                let v130 : US9 = US9_0(v129)
                v130 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v128.Value <- x
                let v131 : US9 option = _v128.Value 
                let v142 : US9 = US9_1
                let v143 : US9 = v131 |> Option.defaultValue v142 
                let v147 : (std_string_String []) = [||]
                let v148 : string = "$0.to_vec()"
                let v149 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v147 v148 
                let v152 : Vec<std_string_String> =
                    match v143 with
                    | US9_1 -> (* None *)
                        v149
                    | US9_0(v150) -> (* Some *)
                        v150
                let v153 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v154 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v155 : string = "std::fs::read(&*$0)"
                let v156 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v61 v155 
                let v157 : string = "$0.unwrap()"
                let v158 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v156 v157 
                let _v154 = v158 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v159 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _v154 = v159 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v162 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _v154 = v162 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v165 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _v154 = v165 
                #endif
#if FABLE_COMPILER_PYTHON
                let v168 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _v154 = v168 
                #endif
#else
                let v171 : (uint8 []) = v61 |> System.IO.File.ReadAllBytes
                let v172 : string = "$0.to_vec()"
                let v173 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v171 v172 
                let _v154 = v173 
                #endif
                let v174 : Vec<uint8> = _v154 
                let v179 : Vec<uint8> = method14(v174)
                let v180 : string = "std::string::String::from_utf8($0)"
                let v181 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v179 v180 
                let v182 : string = "$0.unwrap()"
                let v183 : std_string_String = Fable.Core.RustInterop.emitRustExpr v181 v182 
                let v184 : string = "fable_library_rust::String_::fromString($0)"
                let v185 : string = Fable.Core.RustInterop.emitRustExpr v183 v184 
                let _v153 = v185 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v186 : string = null |> unbox<string>
                let _v153 = v186 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v189 : string = null |> unbox<string>
                let _v153 = v189 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v192 : string = null |> unbox<string>
                let _v153 = v192 
                #endif
#if FABLE_COMPILER_PYTHON
                let v195 : string = null |> unbox<string>
                let _v153 = v195 
                #endif
#else
                let v198 : string = v61 |> System.IO.File.ReadAllText
                let _v153 = v198 
                #endif
                let v199 : string = _v153 
                let v204 : string = __SOURCE_DIRECTORY__
                let v205 : string = "polyglot"
                let v206 : string = ".devcontainer"
                let v207 : string = method15(v205, v206)
                let v208 : US12 = method18(v207, v204)
                let v886 : US1 =
                    match v208 with
                    | US12_1(v211) -> (* Error *)
                        let v212 : bool = State.trace_state.IsNone
                        if v212 then
                            let v213 : US0 = US0_0
                            let struct (v214 : Mut0, v215 : Mut1, v216 : Mut2, v217 : Mut3, v218 : int64 option) = method1(v213)
                            let v219 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v214, v215, v216, v217, v218) 
                            State.trace_state <- v219 
                            ()
                        let struct (v224 : Mut0, v225 : Mut1, v226 : Mut2, v227 : Mut3, v228 : int64 option) = State.trace_state.Value
                        let v239 : bool = State.trace_state.IsNone
                        if v239 then
                            let v240 : US0 = US0_0
                            let struct (v241 : Mut0, v242 : Mut1, v243 : Mut2, v244 : Mut3, v245 : int64 option) = method1(v240)
                            let v246 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v241, v242, v243, v244, v245) 
                            State.trace_state <- v246 
                            ()
                        let struct (v251 : Mut0, v252 : Mut1, v253 : Mut2, v254 : Mut3, v255 : int64 option) = State.trace_state.Value
                        let v266 : US0 = v254.l0
                        let v267 : bool = v253.l0
                        let v268 : bool = v267 = false
                        let v271 : bool =
                            if v268 then
                                false
                            else
                                let v269 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v266
                                let v270 : bool = 3 >= v269
                                v270
                        if v271 then
                            let v272 : int64 = v224.l0
                            let v273 : int64 = v272 + 1L
                            v224.l0 <- v273
                            let v274 : bool = State.trace_state.IsNone
                            if v274 then
                                let v275 : US0 = US0_0
                                let struct (v276 : Mut0, v277 : Mut1, v278 : Mut2, v279 : Mut3, v280 : int64 option) = method1(v275)
                                let v281 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v276, v277, v278, v279, v280) 
                                State.trace_state <- v281 
                                ()
                            let struct (v286 : Mut0, v287 : Mut1, v288 : Mut2, v289 : Mut3, v290 : int64 option) = State.trace_state.Value
                            let v301 : unit = ()
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v302 : US3 option = None
                            let _v302 = ref v302 
                            match v290 with
                            | Some x -> (
                            (fun () ->
                            (fun () ->
                            let v303 : int64 = x
                            let v304 : US3 = US3_0(v303)
                            v304 
                            )
                            |> fun x -> x () |> Some
                            ) () ) | None -> None
                            |> fun x -> _v302.Value <- x
                            let v305 : US3 option = _v302.Value 
                            let v316 : US3 = US3_1
                            let v317 : US3 = v305 |> Option.defaultValue v316 
                            let v357 : System.DateTime =
                                match v317 with
                                | US3_1 -> (* None *)
                                    let v353 : System.DateTime = System.DateTime.Now
                                    v353
                                | US3_0(v321) -> (* Some *)
                                    let v322 : System.DateTime = System.DateTime.Now
                                    let v325 : (System.DateTime -> int64) = _.Ticks
                                    let v326 : int64 = v325 v322
                                    let v329 : int64 = v326 - v321
                                    let v330 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                    let v331 : System.TimeSpan = v330 v329
                                    let v334 : (System.TimeSpan -> int32) = _.Hours
                                    let v335 : int32 = v334 v331
                                    let v338 : (System.TimeSpan -> int32) = _.Minutes
                                    let v339 : int32 = v338 v331
                                    let v342 : (System.TimeSpan -> int32) = _.Seconds
                                    let v343 : int32 = v342 v331
                                    let v346 : (System.TimeSpan -> int32) = _.Milliseconds
                                    let v347 : int32 = v346 v331
                                    let v350 : System.DateTime = System.DateTime (1, 1, 1, v335, v339, v343, v347)
                                    v350
                            let v358 : string = method6()
                            let v361 : (string -> string) = v357.ToString
                            let v362 : string = v361 v358
                            let _v301 = v362 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v365 : US3 option = None
                            let _v365 = ref v365 
                            match v290 with
                            | Some x -> (
                            (fun () ->
                            (fun () ->
                            let v366 : int64 = x
                            let v367 : US3 = US3_0(v366)
                            v367 
                            )
                            |> fun x -> x () |> Some
                            ) () ) | None -> None
                            |> fun x -> _v365.Value <- x
                            let v368 : US3 option = _v365.Value 
                            let v379 : US3 = US3_1
                            let v380 : US3 = v368 |> Option.defaultValue v379 
                            let v420 : System.DateTime =
                                match v380 with
                                | US3_1 -> (* None *)
                                    let v416 : System.DateTime = System.DateTime.Now
                                    v416
                                | US3_0(v384) -> (* Some *)
                                    let v385 : System.DateTime = System.DateTime.Now
                                    let v388 : (System.DateTime -> int64) = _.Ticks
                                    let v389 : int64 = v388 v385
                                    let v392 : int64 = v389 - v384
                                    let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                    let v394 : System.TimeSpan = v393 v392
                                    let v397 : (System.TimeSpan -> int32) = _.Hours
                                    let v398 : int32 = v397 v394
                                    let v401 : (System.TimeSpan -> int32) = _.Minutes
                                    let v402 : int32 = v401 v394
                                    let v405 : (System.TimeSpan -> int32) = _.Seconds
                                    let v406 : int32 = v405 v394
                                    let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                                    let v410 : int32 = v409 v394
                                    let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                                    v413
                            let v421 : string = method6()
                            let v424 : (string -> string) = v420.ToString
                            let v425 : string = v424 v421
                            let _v301 = v425 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v428 : string = $"near_sdk::env::block_timestamp()"
                            let v429 : uint64 = Fable.Core.RustInterop.emitRustExpr () v428 
                            let v430 : US3 option = None
                            let _v430 = ref v430 
                            match v290 with
                            | Some x -> (
                            (fun () ->
                            (fun () ->
                            let v431 : int64 = x
                            let v432 : US3 = US3_0(v431)
                            v432 
                            )
                            |> fun x -> x () |> Some
                            ) () ) | None -> None
                            |> fun x -> _v430.Value <- x
                            let v433 : US3 option = _v430.Value 
                            let v444 : US3 = US3_1
                            let v445 : US3 = v433 |> Option.defaultValue v444 
                            let v454 : uint64 =
                                match v445 with
                                | US3_1 -> (* None *)
                                    v429
                                | US3_0(v449) -> (* Some *)
                                    let v450 : (int64 -> uint64) = uint64
                                    let v451 : uint64 = v450 v449
                                    let v452 : uint64 = v429 - v451
                                    v452
                            let v455 : uint64 = v454 / 1000000000UL
                            let v456 : uint64 = v455 % 60UL
                            let v457 : uint64 = v455 / 60UL
                            let v458 : uint64 = v457 % 60UL
                            let v459 : uint64 = v455 / 3600UL
                            let v460 : uint64 = v459 % 24UL
                            let v461 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
                            let v462 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v460, v458, v456) v461 
                            let v463 : string = "fable_library_rust::String_::fromString($0)"
                            let v464 : string = Fable.Core.RustInterop.emitRustExpr v462 v463 
                            let _v301 = v464 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v465 : US3 option = None
                            let _v465 = ref v465 
                            match v290 with
                            | Some x -> (
                            (fun () ->
                            (fun () ->
                            let v466 : int64 = x
                            let v467 : US3 = US3_0(v466)
                            v467 
                            )
                            |> fun x -> x () |> Some
                            ) () ) | None -> None
                            |> fun x -> _v465.Value <- x
                            let v468 : US3 option = _v465.Value 
                            let v479 : US3 = US3_1
                            let v480 : US3 = v468 |> Option.defaultValue v479 
                            let v520 : System.DateTime =
                                match v480 with
                                | US3_1 -> (* None *)
                                    let v516 : System.DateTime = System.DateTime.Now
                                    v516
                                | US3_0(v484) -> (* Some *)
                                    let v485 : System.DateTime = System.DateTime.Now
                                    let v488 : (System.DateTime -> int64) = _.Ticks
                                    let v489 : int64 = v488 v485
                                    let v492 : int64 = v489 - v484
                                    let v493 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                    let v494 : System.TimeSpan = v493 v492
                                    let v497 : (System.TimeSpan -> int32) = _.Hours
                                    let v498 : int32 = v497 v494
                                    let v501 : (System.TimeSpan -> int32) = _.Minutes
                                    let v502 : int32 = v501 v494
                                    let v505 : (System.TimeSpan -> int32) = _.Seconds
                                    let v506 : int32 = v505 v494
                                    let v509 : (System.TimeSpan -> int32) = _.Milliseconds
                                    let v510 : int32 = v509 v494
                                    let v513 : System.DateTime = System.DateTime (1, 1, 1, v498, v502, v506, v510)
                                    v513
                            let v521 : string = method7()
                            let v524 : (string -> string) = v520.ToString
                            let v525 : string = v524 v521
                            let _v301 = v525 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v528 : US3 option = None
                            let _v528 = ref v528 
                            match v290 with
                            | Some x -> (
                            (fun () ->
                            (fun () ->
                            let v529 : int64 = x
                            let v530 : US3 = US3_0(v529)
                            v530 
                            )
                            |> fun x -> x () |> Some
                            ) () ) | None -> None
                            |> fun x -> _v528.Value <- x
                            let v531 : US3 option = _v528.Value 
                            let v542 : US3 = US3_1
                            let v543 : US3 = v531 |> Option.defaultValue v542 
                            let v583 : System.DateTime =
                                match v543 with
                                | US3_1 -> (* None *)
                                    let v579 : System.DateTime = System.DateTime.Now
                                    v579
                                | US3_0(v547) -> (* Some *)
                                    let v548 : System.DateTime = System.DateTime.Now
                                    let v551 : (System.DateTime -> int64) = _.Ticks
                                    let v552 : int64 = v551 v548
                                    let v555 : int64 = v552 - v547
                                    let v556 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                    let v557 : System.TimeSpan = v556 v555
                                    let v560 : (System.TimeSpan -> int32) = _.Hours
                                    let v561 : int32 = v560 v557
                                    let v564 : (System.TimeSpan -> int32) = _.Minutes
                                    let v565 : int32 = v564 v557
                                    let v568 : (System.TimeSpan -> int32) = _.Seconds
                                    let v569 : int32 = v568 v557
                                    let v572 : (System.TimeSpan -> int32) = _.Milliseconds
                                    let v573 : int32 = v572 v557
                                    let v576 : System.DateTime = System.DateTime (1, 1, 1, v561, v565, v569, v573)
                                    v576
                            let v584 : string = method7()
                            let v587 : (string -> string) = v583.ToString
                            let v588 : string = v587 v584
                            let _v301 = v588 
                            #endif
#else
                            let v591 : US3 option = None
                            let _v591 = ref v591 
                            match v290 with
                            | Some x -> (
                            (fun () ->
                            (fun () ->
                            let v592 : int64 = x
                            let v593 : US3 = US3_0(v592)
                            v593 
                            )
                            |> fun x -> x () |> Some
                            ) () ) | None -> None
                            |> fun x -> _v591.Value <- x
                            let v594 : US3 option = _v591.Value 
                            let v605 : US3 = US3_1
                            let v606 : US3 = v594 |> Option.defaultValue v605 
                            let v646 : System.DateTime =
                                match v606 with
                                | US3_1 -> (* None *)
                                    let v642 : System.DateTime = System.DateTime.Now
                                    v642
                                | US3_0(v610) -> (* Some *)
                                    let v611 : System.DateTime = System.DateTime.Now
                                    let v614 : (System.DateTime -> int64) = _.Ticks
                                    let v615 : int64 = v614 v611
                                    let v618 : int64 = v615 - v610
                                    let v619 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                    let v620 : System.TimeSpan = v619 v618
                                    let v623 : (System.TimeSpan -> int32) = _.Hours
                                    let v624 : int32 = v623 v620
                                    let v627 : (System.TimeSpan -> int32) = _.Minutes
                                    let v628 : int32 = v627 v620
                                    let v631 : (System.TimeSpan -> int32) = _.Seconds
                                    let v632 : int32 = v631 v620
                                    let v635 : (System.TimeSpan -> int32) = _.Milliseconds
                                    let v636 : int32 = v635 v620
                                    let v639 : System.DateTime = System.DateTime (1, 1, 1, v624, v628, v632, v636)
                                    v639
                            let v647 : string = method7()
                            let v650 : (string -> string) = v646.ToString
                            let v651 : string = v650 v647
                            let _v301 = v651 
                            #endif
                            let v654 : string = _v301 
                            let v719 : string = "Warning"
                            let v720 : (unit -> string) = v719.ToLower
                            let v721 : string = v720 ()
                            let v724 : string = v721.PadLeft (7, ' ')
                            let v738 : unit = ()
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v739 : string = "inline_colorization::color_yellow"
                            let v740 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v739 
                            let v741 : string = "&*$0"
                            let v742 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v724 v741 
                            let v743 : string = "inline_colorization::color_reset"
                            let v744 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v743 
                            let v745 : string = "\"{v740}{v742}{v744}\""
                            let v746 : string = @$"format!(" + v745 + ")"
                            let v747 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v746 
                            let v748 : string = "fable_library_rust::String_::fromString($0)"
                            let v749 : string = Fable.Core.RustInterop.emitRustExpr v747 v748 
                            let _v738 = v749 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v750 : string = "inline_colorization::color_yellow"
                            let v751 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v750 
                            let v752 : string = "&*$0"
                            let v753 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v724 v752 
                            let v754 : string = "inline_colorization::color_reset"
                            let v755 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v754 
                            let v756 : string = "\"{v751}{v753}{v755}\""
                            let v757 : string = @$"format!(" + v756 + ")"
                            let v758 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v757 
                            let v759 : string = "fable_library_rust::String_::fromString($0)"
                            let v760 : string = Fable.Core.RustInterop.emitRustExpr v758 v759 
                            let _v738 = v760 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v761 : string = "inline_colorization::color_yellow"
                            let v762 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v761 
                            let v763 : string = "&*$0"
                            let v764 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v724 v763 
                            let v765 : string = "inline_colorization::color_reset"
                            let v766 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v765 
                            let v767 : string = "\"{v762}{v764}{v766}\""
                            let v768 : string = @$"format!(" + v767 + ")"
                            let v769 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v768 
                            let v770 : string = "fable_library_rust::String_::fromString($0)"
                            let v771 : string = Fable.Core.RustInterop.emitRustExpr v769 v770 
                            let _v738 = v771 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v772 : string = "\u001b[93m"
                            let v773 : string = method8()
                            let v774 : string = v772 + v724 
                            let v775 : string = v774 + v773 
                            let _v738 = v775 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v776 : string = "\u001b[93m"
                            let v777 : string = method8()
                            let v778 : string = v776 + v724 
                            let v779 : string = v778 + v777 
                            let _v738 = v779 
                            #endif
#else
                            let v780 : string = "\u001b[93m"
                            let v781 : string = method8()
                            let v782 : string = v780 + v724 
                            let v783 : string = v782 + v781 
                            let _v738 = v783 
                            #endif
                            let v784 : string = _v738 
                            let v790 : int64 = v286.l0
                            let v791 : string = method9()
                            let v792 : Mut4 = {l0 = v791} : Mut4
                            let v793 : string = "{ "
                            let v794 : string = $"{v793}"
                            let v797 : string = v792.l0
                            let v798 : string = v797 + v794 
                            v792.l0 <- v798
                            let v799 : string = "error"
                            let v800 : string = $"{v799}"
                            let v803 : string = v792.l0
                            let v804 : string = v803 + v800 
                            v792.l0 <- v804
                            let v805 : string = " = "
                            let v806 : string = $"{v805}"
                            let v809 : string = v792.l0
                            let v810 : string = v809 + v806 
                            v792.l0 <- v810
                            let v811 : string = $"{v211}"
                            let v814 : string = v792.l0
                            let v815 : string = v814 + v811 
                            v792.l0 <- v815
                            let v816 : string = " }"
                            let v817 : string = $"{v816}"
                            let v820 : string = v792.l0
                            let v821 : string = v820 + v817 
                            v792.l0 <- v821
                            let v822 : string = v792.l0
                            let v823 : (unit -> string) = closure6()
                            let v824 : string = $"{v654} {v784} #{v790} %s{v823 ()} / {v822}"
                            let v827 : char list = []
                            let v828 : (char list -> (char [])) = List.toArray
                            let v829 : (char []) = v828 v827
                            let v832 : string = v824.TrimStart v829 
                            let v850 : char list = []
                            let v851 : char list = '/' :: v850 
                            let v854 : char list = ' ' :: v851 
                            let v857 : (char list -> (char [])) = List.toArray
                            let v858 : (char []) = v857 v854
                            let v861 : string = v832.TrimEnd v858 
                            let v879 : unit = ()
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v880 : string = @"println!(""{}"", $0)"
                            Fable.Core.RustInterop.emitRustExpr v861 v880 
                            let _v879 = () 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v881 : string = @"println!(""{}"", $0)"
                            Fable.Core.RustInterop.emitRustExpr v861 v881 
                            let _v879 = () 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v882 : string = $"near_sdk::log!(\"{{}}\", $0)"
                            Fable.Core.RustInterop.emitRustExpr v861 v882 
                            let _v879 = () 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            System.Console.WriteLine v861 
                            let _v879 = () 
                            #endif
#if FABLE_COMPILER_PYTHON
                            System.Console.WriteLine v861 
                            let _v879 = () 
                            #endif
#else
                            System.Console.WriteLine v861 
                            let _v879 = () 
                            #endif
                            _v879 
                            let v883 : (string -> unit) = v225.l0
                            v883 v861
                        US1_1
                    | US12_0(v209) -> (* Ok *)
                        US1_0(v209)
                let v1571 : US1 =
                    match v886 with
                    | US1_1 -> (* None *)
                        let v889 : string = method23()
                        let v890 : string = method15(v205, v206)
                        let v891 : US12 = method18(v890, v889)
                        match v891 with
                        | US12_1(v894) -> (* Error *)
                            let v895 : bool = State.trace_state.IsNone
                            if v895 then
                                let v896 : US0 = US0_0
                                let struct (v897 : Mut0, v898 : Mut1, v899 : Mut2, v900 : Mut3, v901 : int64 option) = method1(v896)
                                let v902 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v897, v898, v899, v900, v901) 
                                State.trace_state <- v902 
                                ()
                            let struct (v907 : Mut0, v908 : Mut1, v909 : Mut2, v910 : Mut3, v911 : int64 option) = State.trace_state.Value
                            let v922 : bool = State.trace_state.IsNone
                            if v922 then
                                let v923 : US0 = US0_0
                                let struct (v924 : Mut0, v925 : Mut1, v926 : Mut2, v927 : Mut3, v928 : int64 option) = method1(v923)
                                let v929 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v924, v925, v926, v927, v928) 
                                State.trace_state <- v929 
                                ()
                            let struct (v934 : Mut0, v935 : Mut1, v936 : Mut2, v937 : Mut3, v938 : int64 option) = State.trace_state.Value
                            let v949 : US0 = v937.l0
                            let v950 : bool = v936.l0
                            let v951 : bool = v950 = false
                            let v954 : bool =
                                if v951 then
                                    false
                                else
                                    let v952 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v949
                                    let v953 : bool = 3 >= v952
                                    v953
                            if v954 then
                                let v955 : int64 = v907.l0
                                let v956 : int64 = v955 + 1L
                                v907.l0 <- v956
                                let v957 : bool = State.trace_state.IsNone
                                if v957 then
                                    let v958 : US0 = US0_0
                                    let struct (v959 : Mut0, v960 : Mut1, v961 : Mut2, v962 : Mut3, v963 : int64 option) = method1(v958)
                                    let v964 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v959, v960, v961, v962, v963) 
                                    State.trace_state <- v964 
                                    ()
                                let struct (v969 : Mut0, v970 : Mut1, v971 : Mut2, v972 : Mut3, v973 : int64 option) = State.trace_state.Value
                                let v984 : unit = ()
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v985 : US3 option = None
                                let _v985 = ref v985 
                                match v973 with
                                | Some x -> (
                                (fun () ->
                                (fun () ->
                                let v986 : int64 = x
                                let v987 : US3 = US3_0(v986)
                                v987 
                                )
                                |> fun x -> x () |> Some
                                ) () ) | None -> None
                                |> fun x -> _v985.Value <- x
                                let v988 : US3 option = _v985.Value 
                                let v999 : US3 = US3_1
                                let v1000 : US3 = v988 |> Option.defaultValue v999 
                                let v1040 : System.DateTime =
                                    match v1000 with
                                    | US3_1 -> (* None *)
                                        let v1036 : System.DateTime = System.DateTime.Now
                                        v1036
                                    | US3_0(v1004) -> (* Some *)
                                        let v1005 : System.DateTime = System.DateTime.Now
                                        let v1008 : (System.DateTime -> int64) = _.Ticks
                                        let v1009 : int64 = v1008 v1005
                                        let v1012 : int64 = v1009 - v1004
                                        let v1013 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                        let v1014 : System.TimeSpan = v1013 v1012
                                        let v1017 : (System.TimeSpan -> int32) = _.Hours
                                        let v1018 : int32 = v1017 v1014
                                        let v1021 : (System.TimeSpan -> int32) = _.Minutes
                                        let v1022 : int32 = v1021 v1014
                                        let v1025 : (System.TimeSpan -> int32) = _.Seconds
                                        let v1026 : int32 = v1025 v1014
                                        let v1029 : (System.TimeSpan -> int32) = _.Milliseconds
                                        let v1030 : int32 = v1029 v1014
                                        let v1033 : System.DateTime = System.DateTime (1, 1, 1, v1018, v1022, v1026, v1030)
                                        v1033
                                let v1041 : string = method6()
                                let v1044 : (string -> string) = v1040.ToString
                                let v1045 : string = v1044 v1041
                                let _v984 = v1045 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1048 : US3 option = None
                                let _v1048 = ref v1048 
                                match v973 with
                                | Some x -> (
                                (fun () ->
                                (fun () ->
                                let v1049 : int64 = x
                                let v1050 : US3 = US3_0(v1049)
                                v1050 
                                )
                                |> fun x -> x () |> Some
                                ) () ) | None -> None
                                |> fun x -> _v1048.Value <- x
                                let v1051 : US3 option = _v1048.Value 
                                let v1062 : US3 = US3_1
                                let v1063 : US3 = v1051 |> Option.defaultValue v1062 
                                let v1103 : System.DateTime =
                                    match v1063 with
                                    | US3_1 -> (* None *)
                                        let v1099 : System.DateTime = System.DateTime.Now
                                        v1099
                                    | US3_0(v1067) -> (* Some *)
                                        let v1068 : System.DateTime = System.DateTime.Now
                                        let v1071 : (System.DateTime -> int64) = _.Ticks
                                        let v1072 : int64 = v1071 v1068
                                        let v1075 : int64 = v1072 - v1067
                                        let v1076 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                        let v1077 : System.TimeSpan = v1076 v1075
                                        let v1080 : (System.TimeSpan -> int32) = _.Hours
                                        let v1081 : int32 = v1080 v1077
                                        let v1084 : (System.TimeSpan -> int32) = _.Minutes
                                        let v1085 : int32 = v1084 v1077
                                        let v1088 : (System.TimeSpan -> int32) = _.Seconds
                                        let v1089 : int32 = v1088 v1077
                                        let v1092 : (System.TimeSpan -> int32) = _.Milliseconds
                                        let v1093 : int32 = v1092 v1077
                                        let v1096 : System.DateTime = System.DateTime (1, 1, 1, v1081, v1085, v1089, v1093)
                                        v1096
                                let v1104 : string = method6()
                                let v1107 : (string -> string) = v1103.ToString
                                let v1108 : string = v1107 v1104
                                let _v984 = v1108 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1111 : string = $"near_sdk::env::block_timestamp()"
                                let v1112 : uint64 = Fable.Core.RustInterop.emitRustExpr () v1111 
                                let v1113 : US3 option = None
                                let _v1113 = ref v1113 
                                match v973 with
                                | Some x -> (
                                (fun () ->
                                (fun () ->
                                let v1114 : int64 = x
                                let v1115 : US3 = US3_0(v1114)
                                v1115 
                                )
                                |> fun x -> x () |> Some
                                ) () ) | None -> None
                                |> fun x -> _v1113.Value <- x
                                let v1116 : US3 option = _v1113.Value 
                                let v1127 : US3 = US3_1
                                let v1128 : US3 = v1116 |> Option.defaultValue v1127 
                                let v1137 : uint64 =
                                    match v1128 with
                                    | US3_1 -> (* None *)
                                        v1112
                                    | US3_0(v1132) -> (* Some *)
                                        let v1133 : (int64 -> uint64) = uint64
                                        let v1134 : uint64 = v1133 v1132
                                        let v1135 : uint64 = v1112 - v1134
                                        v1135
                                let v1138 : uint64 = v1137 / 1000000000UL
                                let v1139 : uint64 = v1138 % 60UL
                                let v1140 : uint64 = v1138 / 60UL
                                let v1141 : uint64 = v1140 % 60UL
                                let v1142 : uint64 = v1138 / 3600UL
                                let v1143 : uint64 = v1142 % 24UL
                                let v1144 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
                                let v1145 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v1143, v1141, v1139) v1144 
                                let v1146 : string = "fable_library_rust::String_::fromString($0)"
                                let v1147 : string = Fable.Core.RustInterop.emitRustExpr v1145 v1146 
                                let _v984 = v1147 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1148 : US3 option = None
                                let _v1148 = ref v1148 
                                match v973 with
                                | Some x -> (
                                (fun () ->
                                (fun () ->
                                let v1149 : int64 = x
                                let v1150 : US3 = US3_0(v1149)
                                v1150 
                                )
                                |> fun x -> x () |> Some
                                ) () ) | None -> None
                                |> fun x -> _v1148.Value <- x
                                let v1151 : US3 option = _v1148.Value 
                                let v1162 : US3 = US3_1
                                let v1163 : US3 = v1151 |> Option.defaultValue v1162 
                                let v1203 : System.DateTime =
                                    match v1163 with
                                    | US3_1 -> (* None *)
                                        let v1199 : System.DateTime = System.DateTime.Now
                                        v1199
                                    | US3_0(v1167) -> (* Some *)
                                        let v1168 : System.DateTime = System.DateTime.Now
                                        let v1171 : (System.DateTime -> int64) = _.Ticks
                                        let v1172 : int64 = v1171 v1168
                                        let v1175 : int64 = v1172 - v1167
                                        let v1176 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                        let v1177 : System.TimeSpan = v1176 v1175
                                        let v1180 : (System.TimeSpan -> int32) = _.Hours
                                        let v1181 : int32 = v1180 v1177
                                        let v1184 : (System.TimeSpan -> int32) = _.Minutes
                                        let v1185 : int32 = v1184 v1177
                                        let v1188 : (System.TimeSpan -> int32) = _.Seconds
                                        let v1189 : int32 = v1188 v1177
                                        let v1192 : (System.TimeSpan -> int32) = _.Milliseconds
                                        let v1193 : int32 = v1192 v1177
                                        let v1196 : System.DateTime = System.DateTime (1, 1, 1, v1181, v1185, v1189, v1193)
                                        v1196
                                let v1204 : string = method7()
                                let v1207 : (string -> string) = v1203.ToString
                                let v1208 : string = v1207 v1204
                                let _v984 = v1208 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1211 : US3 option = None
                                let _v1211 = ref v1211 
                                match v973 with
                                | Some x -> (
                                (fun () ->
                                (fun () ->
                                let v1212 : int64 = x
                                let v1213 : US3 = US3_0(v1212)
                                v1213 
                                )
                                |> fun x -> x () |> Some
                                ) () ) | None -> None
                                |> fun x -> _v1211.Value <- x
                                let v1214 : US3 option = _v1211.Value 
                                let v1225 : US3 = US3_1
                                let v1226 : US3 = v1214 |> Option.defaultValue v1225 
                                let v1266 : System.DateTime =
                                    match v1226 with
                                    | US3_1 -> (* None *)
                                        let v1262 : System.DateTime = System.DateTime.Now
                                        v1262
                                    | US3_0(v1230) -> (* Some *)
                                        let v1231 : System.DateTime = System.DateTime.Now
                                        let v1234 : (System.DateTime -> int64) = _.Ticks
                                        let v1235 : int64 = v1234 v1231
                                        let v1238 : int64 = v1235 - v1230
                                        let v1239 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                        let v1240 : System.TimeSpan = v1239 v1238
                                        let v1243 : (System.TimeSpan -> int32) = _.Hours
                                        let v1244 : int32 = v1243 v1240
                                        let v1247 : (System.TimeSpan -> int32) = _.Minutes
                                        let v1248 : int32 = v1247 v1240
                                        let v1251 : (System.TimeSpan -> int32) = _.Seconds
                                        let v1252 : int32 = v1251 v1240
                                        let v1255 : (System.TimeSpan -> int32) = _.Milliseconds
                                        let v1256 : int32 = v1255 v1240
                                        let v1259 : System.DateTime = System.DateTime (1, 1, 1, v1244, v1248, v1252, v1256)
                                        v1259
                                let v1267 : string = method7()
                                let v1270 : (string -> string) = v1266.ToString
                                let v1271 : string = v1270 v1267
                                let _v984 = v1271 
                                #endif
#else
                                let v1274 : US3 option = None
                                let _v1274 = ref v1274 
                                match v973 with
                                | Some x -> (
                                (fun () ->
                                (fun () ->
                                let v1275 : int64 = x
                                let v1276 : US3 = US3_0(v1275)
                                v1276 
                                )
                                |> fun x -> x () |> Some
                                ) () ) | None -> None
                                |> fun x -> _v1274.Value <- x
                                let v1277 : US3 option = _v1274.Value 
                                let v1288 : US3 = US3_1
                                let v1289 : US3 = v1277 |> Option.defaultValue v1288 
                                let v1329 : System.DateTime =
                                    match v1289 with
                                    | US3_1 -> (* None *)
                                        let v1325 : System.DateTime = System.DateTime.Now
                                        v1325
                                    | US3_0(v1293) -> (* Some *)
                                        let v1294 : System.DateTime = System.DateTime.Now
                                        let v1297 : (System.DateTime -> int64) = _.Ticks
                                        let v1298 : int64 = v1297 v1294
                                        let v1301 : int64 = v1298 - v1293
                                        let v1302 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                        let v1303 : System.TimeSpan = v1302 v1301
                                        let v1306 : (System.TimeSpan -> int32) = _.Hours
                                        let v1307 : int32 = v1306 v1303
                                        let v1310 : (System.TimeSpan -> int32) = _.Minutes
                                        let v1311 : int32 = v1310 v1303
                                        let v1314 : (System.TimeSpan -> int32) = _.Seconds
                                        let v1315 : int32 = v1314 v1303
                                        let v1318 : (System.TimeSpan -> int32) = _.Milliseconds
                                        let v1319 : int32 = v1318 v1303
                                        let v1322 : System.DateTime = System.DateTime (1, 1, 1, v1307, v1311, v1315, v1319)
                                        v1322
                                let v1330 : string = method7()
                                let v1333 : (string -> string) = v1329.ToString
                                let v1334 : string = v1333 v1330
                                let _v984 = v1334 
                                #endif
                                let v1337 : string = _v984 
                                let v1402 : string = "Warning"
                                let v1403 : (unit -> string) = v1402.ToLower
                                let v1404 : string = v1403 ()
                                let v1407 : string = v1404.PadLeft (7, ' ')
                                let v1421 : unit = ()
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1422 : string = "inline_colorization::color_yellow"
                                let v1423 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1422 
                                let v1424 : string = "&*$0"
                                let v1425 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1407 v1424 
                                let v1426 : string = "inline_colorization::color_reset"
                                let v1427 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1426 
                                let v1428 : string = "\"{v1423}{v1425}{v1427}\""
                                let v1429 : string = @$"format!(" + v1428 + ")"
                                let v1430 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1429 
                                let v1431 : string = "fable_library_rust::String_::fromString($0)"
                                let v1432 : string = Fable.Core.RustInterop.emitRustExpr v1430 v1431 
                                let _v1421 = v1432 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1433 : string = "inline_colorization::color_yellow"
                                let v1434 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1433 
                                let v1435 : string = "&*$0"
                                let v1436 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1407 v1435 
                                let v1437 : string = "inline_colorization::color_reset"
                                let v1438 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1437 
                                let v1439 : string = "\"{v1434}{v1436}{v1438}\""
                                let v1440 : string = @$"format!(" + v1439 + ")"
                                let v1441 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1440 
                                let v1442 : string = "fable_library_rust::String_::fromString($0)"
                                let v1443 : string = Fable.Core.RustInterop.emitRustExpr v1441 v1442 
                                let _v1421 = v1443 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1444 : string = "inline_colorization::color_yellow"
                                let v1445 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1444 
                                let v1446 : string = "&*$0"
                                let v1447 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1407 v1446 
                                let v1448 : string = "inline_colorization::color_reset"
                                let v1449 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1448 
                                let v1450 : string = "\"{v1445}{v1447}{v1449}\""
                                let v1451 : string = @$"format!(" + v1450 + ")"
                                let v1452 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1451 
                                let v1453 : string = "fable_library_rust::String_::fromString($0)"
                                let v1454 : string = Fable.Core.RustInterop.emitRustExpr v1452 v1453 
                                let _v1421 = v1454 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1455 : string = "\u001b[93m"
                                let v1456 : string = method8()
                                let v1457 : string = v1455 + v1407 
                                let v1458 : string = v1457 + v1456 
                                let _v1421 = v1458 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1459 : string = "\u001b[93m"
                                let v1460 : string = method8()
                                let v1461 : string = v1459 + v1407 
                                let v1462 : string = v1461 + v1460 
                                let _v1421 = v1462 
                                #endif
#else
                                let v1463 : string = "\u001b[93m"
                                let v1464 : string = method8()
                                let v1465 : string = v1463 + v1407 
                                let v1466 : string = v1465 + v1464 
                                let _v1421 = v1466 
                                #endif
                                let v1467 : string = _v1421 
                                let v1473 : int64 = v969.l0
                                let v1474 : string = method9()
                                let v1475 : Mut4 = {l0 = v1474} : Mut4
                                let v1476 : string = "{ "
                                let v1477 : string = $"{v1476}"
                                let v1480 : string = v1475.l0
                                let v1481 : string = v1480 + v1477 
                                v1475.l0 <- v1481
                                let v1482 : string = "error"
                                let v1483 : string = $"{v1482}"
                                let v1486 : string = v1475.l0
                                let v1487 : string = v1486 + v1483 
                                v1475.l0 <- v1487
                                let v1488 : string = " = "
                                let v1489 : string = $"{v1488}"
                                let v1492 : string = v1475.l0
                                let v1493 : string = v1492 + v1489 
                                v1475.l0 <- v1493
                                let v1494 : string = $"{v894}"
                                let v1497 : string = v1475.l0
                                let v1498 : string = v1497 + v1494 
                                v1475.l0 <- v1498
                                let v1499 : string = " }"
                                let v1500 : string = $"{v1499}"
                                let v1503 : string = v1475.l0
                                let v1504 : string = v1503 + v1500 
                                v1475.l0 <- v1504
                                let v1505 : string = v1475.l0
                                let v1506 : (unit -> string) = closure6()
                                let v1507 : string = $"{v1337} {v1467} #{v1473} %s{v1506 ()} / {v1505}"
                                let v1510 : char list = []
                                let v1511 : (char list -> (char [])) = List.toArray
                                let v1512 : (char []) = v1511 v1510
                                let v1515 : string = v1507.TrimStart v1512 
                                let v1533 : char list = []
                                let v1534 : char list = '/' :: v1533 
                                let v1537 : char list = ' ' :: v1534 
                                let v1540 : (char list -> (char [])) = List.toArray
                                let v1541 : (char []) = v1540 v1537
                                let v1544 : string = v1515.TrimEnd v1541 
                                let v1562 : unit = ()
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1563 : string = @"println!(""{}"", $0)"
                                Fable.Core.RustInterop.emitRustExpr v1544 v1563 
                                let _v1562 = () 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1564 : string = @"println!(""{}"", $0)"
                                Fable.Core.RustInterop.emitRustExpr v1544 v1564 
                                let _v1562 = () 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1565 : string = $"near_sdk::log!(\"{{}}\", $0)"
                                Fable.Core.RustInterop.emitRustExpr v1544 v1565 
                                let _v1562 = () 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                System.Console.WriteLine v1544 
                                let _v1562 = () 
                                #endif
#if FABLE_COMPILER_PYTHON
                                System.Console.WriteLine v1544 
                                let _v1562 = () 
                                #endif
#else
                                System.Console.WriteLine v1544 
                                let _v1562 = () 
                                #endif
                                _v1562 
                                let v1566 : (string -> unit) = v908.l0
                                v1566 v1544
                            US1_1
                        | US12_0(v892) -> (* Ok *)
                            US1_0(v892)
                    | US1_0(v887) -> (* Some *)
                        US1_0(v887)
                let v1575 : string =
                    match v1571 with
                    | US1_1 -> (* None *)
                        failwith<string> "Option does not have a value."
                    | US1_0(v1572) -> (* Some *)
                        v1572
                let v1576 : string = method15(v1575, v205)
                let v1577 : string = method23()
                let v1578 : (unit -> string) = v1577.ToLower
                let v1579 : string = v1578 ()
                let v1582 : (unit -> string) = v1576.ToLower
                let v1583 : string = v1582 ()
                let v1586 : bool = v1579.StartsWith v1583 
                let v1589 : US12 =
                    if v1586 then
                        US12_1(v1583)
                    else
                        US12_0(v1583)
                let v1595 : Result<string, string> =
                    match v1589 with
                    | US12_1(v1592) -> (* Error *)
                        let v1593 : Result<string, string> = Error v1592 
                        v1593
                    | US12_0(v1590) -> (* Ok *)
                        let v1591 : Result<string, string> = Ok v1590 
                        v1591
                let v1596 : string = "true; let _result = $0.unwrap_or_else(|x| { //"
                let v1597 : bool = Fable.Core.RustInterop.emitRustExpr v1595 v1596 
                let v1598 : string = "x"
                let v1599 : string = Fable.Core.RustInterop.emitRustExpr () v1598 
                let v1600 : string = "true; $0 })"
                let v1601 : bool = Fable.Core.RustInterop.emitRustExpr v1599 v1600 
                let v1602 : string = "_result"
                let v1603 : string = Fable.Core.RustInterop.emitRustExpr () v1602 
                let v1604 : string = method24(v61)
                let v1610 : string =
                    match v122 with
                    | US8_0 -> (* Pip *)
                        let v1605 : string = "requirements.txt"
                        method15(v1604, v1605)
                    | US8_1 -> (* Poetry *)
                        let v1607 : string = "pyproject.toml"
                        method15(v1604, v1607)
                let v1611 : string = "true; let _result : Vec<_> = v152.into_iter().map(|x| { //"
                let v1612 : bool = Fable.Core.RustInterop.emitRustExpr () v1611 
                let v1613 : string = "x"
                let v1614 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1613 
                let v1615 : string = "fable_library_rust::String_::fromString($0)"
                let v1616 : string = Fable.Core.RustInterop.emitRustExpr v1614 v1615 
                let v1617 : string = "="
                let v1618 : bool = v1616.Contains v1617 
                let v1629 : string =
                    if v1618 then
                        v1616
                    else
                        let v1621 : string = "]"
                        let v1622 : bool = v1616.EndsWith v1621 
                        if v1622 then
                            let v1623 : string = $"={{version='*',features=["
                            let v1624 : string = "["
                            let v1625 : string = v1616.Replace (v1624, v1623)
                            let v1626 : string = $"{v1625}}}"
                            v1626
                        else
                            let v1627 : string = $"{v1616}='*'"
                            v1627
                let v1630 : string = "true; $0 }).collect::<Vec<_>>()"
                let v1631 : bool = Fable.Core.RustInterop.emitRustExpr v1629 v1630 
                let v1632 : string = "_result"
                let v1633 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v1632 
                let v1634 : string = "fable_library_rust::NativeArray_::array_from($0)"
                let v1635 : (string []) = Fable.Core.RustInterop.emitRustExpr v1633 v1634 
                let v1636 : string seq = seq { for i = 0 to v1635.Length - 1 do yield v1635.[i] }
                let v1639 : (string -> (string seq -> string)) = String.concat
                let v1640 : string = "\n"
                let v1641 : (string seq -> string) = v1639 v1640
                let v1642 : string = v1641 v1636
                let v1645 : bool = v1642 = ""
                let struct (v1701 : int32, v1702 : string) =
                    if v1645 then
                        let v1646 : string = ""
                        struct (0, v1646)
                    else
                        let v1685 : string =
                            match v122 with
                            | US8_0 -> (* Pip *)
                                v1642
                            | US8_1 -> (* Poetry *)
                                let v1647 : string = $"[tool.poetry]"
                                let v1648 : string = $"name = \"test\""
                                let v1649 : string = v1647 + v1640 
                                let v1650 : string = v1649 + v1648 
                                let v1651 : string = $"version = \"0.0.1\""
                                let v1652 : string = v1650 + v1640 
                                let v1653 : string = v1652 + v1651 
                                let v1654 : string = $"description = \"\""
                                let v1655 : string = v1653 + v1640 
                                let v1656 : string = v1655 + v1654 
                                let v1657 : string = $"authors = []"
                                let v1658 : string = v1656 + v1640 
                                let v1659 : string = v1658 + v1657 
                                let v1660 : string = $""
                                let v1661 : string = v1659 + v1640 
                                let v1662 : string = v1661 + v1660 
                                let v1663 : string = $"[tool.poetry.dependencies]"
                                let v1664 : string = v1662 + v1640 
                                let v1665 : string = v1664 + v1663 
                                let v1666 : string = $"python=\"~3.12\""
                                let v1667 : string = v1665 + v1640 
                                let v1668 : string = v1667 + v1666 
                                let v1669 : string = $"{v1642}"
                                let v1670 : string = v1668 + v1640 
                                let v1671 : string = v1670 + v1669 
                                let v1672 : string = $""
                                let v1673 : string = v1671 + v1640 
                                let v1674 : string = v1673 + v1672 
                                let v1675 : string = $"[build-system]"
                                let v1676 : string = v1674 + v1640 
                                let v1677 : string = v1676 + v1675 
                                let v1678 : string = $"requires = [\"poetry-core\"]"
                                let v1679 : string = v1677 + v1640 
                                let v1680 : string = v1679 + v1678 
                                let v1681 : string = $"build-backend = \"poetry.core.masonry.api\""
                                let v1682 : string = v1680 + v1640 
                                let v1683 : string = v1682 + v1681 
                                v1683
                        method25(v1610, v1685)
                        let v1686 : System.Threading.CancellationToken option = None
                        let v1687 : (struct (string * string) []) = [||]
                        let v1688 : (struct (int32 * string * bool) -> Async<unit>) option = None
                        let v1689 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                        let v1690 : string option = None
                        let v1694 : string =
                            match v122 with
                            | US8_0 -> (* Pip *)
                                let v1691 : string = $"pip install -r requirements.txt"
                                v1691
                            | US8_1 -> (* Poetry *)
                                let v1692 : string = $"poetry install"
                                v1692
                        let v1695 : string option = Some v1604 
                        let v1698 : bool = true
                        method40(v1694, v1686, v1687, v1688, v1689, v1698, v1695)
                let v1703 : bool = v1701 <> 0 
                let struct (v3256 : US1, v3257 : US1, v3258 : US1) =
                    if v1703 then
                        let v1706 : bool = State.trace_state.IsNone
                        if v1706 then
                            let v1707 : US0 = US0_0
                            let struct (v1708 : Mut0, v1709 : Mut1, v1710 : Mut2, v1711 : Mut3, v1712 : int64 option) = method1(v1707)
                            let v1713 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v1708, v1709, v1710, v1711, v1712) 
                            State.trace_state <- v1713 
                            ()
                        let struct (v1718 : Mut0, v1719 : Mut1, v1720 : Mut2, v1721 : Mut3, v1722 : int64 option) = State.trace_state.Value
                        let v1733 : bool = State.trace_state.IsNone
                        if v1733 then
                            let v1734 : US0 = US0_0
                            let struct (v1735 : Mut0, v1736 : Mut1, v1737 : Mut2, v1738 : Mut3, v1739 : int64 option) = method1(v1734)
                            let v1740 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v1735, v1736, v1737, v1738, v1739) 
                            State.trace_state <- v1740 
                            ()
                        let struct (v1745 : Mut0, v1746 : Mut1, v1747 : Mut2, v1748 : Mut3, v1749 : int64 option) = State.trace_state.Value
                        let v1760 : US0 = v1748.l0
                        let v1761 : bool = v1747.l0
                        let v1762 : bool = v1761 = false
                        let v1765 : bool =
                            if v1762 then
                                false
                            else
                                let v1763 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v1760
                                let v1764 : bool = 4 >= v1763
                                v1764
                        if v1765 then
                            let v1766 : int64 = v1718.l0
                            let v1767 : int64 = v1766 + 1L
                            v1718.l0 <- v1767
                            let v1768 : bool = State.trace_state.IsNone
                            if v1768 then
                                let v1769 : US0 = US0_0
                                let struct (v1770 : Mut0, v1771 : Mut1, v1772 : Mut2, v1773 : Mut3, v1774 : int64 option) = method1(v1769)
                                let v1775 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v1770, v1771, v1772, v1773, v1774) 
                                State.trace_state <- v1775 
                                ()
                            let struct (v1780 : Mut0, v1781 : Mut1, v1782 : Mut2, v1783 : Mut3, v1784 : int64 option) = State.trace_state.Value
                            let v1795 : unit = ()
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v1796 : US3 option = None
                            let _v1796 = ref v1796 
                            match v1784 with
                            | Some x -> (
                            (fun () ->
                            (fun () ->
                            let v1797 : int64 = x
                            let v1798 : US3 = US3_0(v1797)
                            v1798 
                            )
                            |> fun x -> x () |> Some
                            ) () ) | None -> None
                            |> fun x -> _v1796.Value <- x
                            let v1799 : US3 option = _v1796.Value 
                            let v1810 : US3 = US3_1
                            let v1811 : US3 = v1799 |> Option.defaultValue v1810 
                            let v1851 : System.DateTime =
                                match v1811 with
                                | US3_1 -> (* None *)
                                    let v1847 : System.DateTime = System.DateTime.Now
                                    v1847
                                | US3_0(v1815) -> (* Some *)
                                    let v1816 : System.DateTime = System.DateTime.Now
                                    let v1819 : (System.DateTime -> int64) = _.Ticks
                                    let v1820 : int64 = v1819 v1816
                                    let v1823 : int64 = v1820 - v1815
                                    let v1824 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                    let v1825 : System.TimeSpan = v1824 v1823
                                    let v1828 : (System.TimeSpan -> int32) = _.Hours
                                    let v1829 : int32 = v1828 v1825
                                    let v1832 : (System.TimeSpan -> int32) = _.Minutes
                                    let v1833 : int32 = v1832 v1825
                                    let v1836 : (System.TimeSpan -> int32) = _.Seconds
                                    let v1837 : int32 = v1836 v1825
                                    let v1840 : (System.TimeSpan -> int32) = _.Milliseconds
                                    let v1841 : int32 = v1840 v1825
                                    let v1844 : System.DateTime = System.DateTime (1, 1, 1, v1829, v1833, v1837, v1841)
                                    v1844
                            let v1852 : string = method6()
                            let v1855 : (string -> string) = v1851.ToString
                            let v1856 : string = v1855 v1852
                            let _v1795 = v1856 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v1859 : US3 option = None
                            let _v1859 = ref v1859 
                            match v1784 with
                            | Some x -> (
                            (fun () ->
                            (fun () ->
                            let v1860 : int64 = x
                            let v1861 : US3 = US3_0(v1860)
                            v1861 
                            )
                            |> fun x -> x () |> Some
                            ) () ) | None -> None
                            |> fun x -> _v1859.Value <- x
                            let v1862 : US3 option = _v1859.Value 
                            let v1873 : US3 = US3_1
                            let v1874 : US3 = v1862 |> Option.defaultValue v1873 
                            let v1914 : System.DateTime =
                                match v1874 with
                                | US3_1 -> (* None *)
                                    let v1910 : System.DateTime = System.DateTime.Now
                                    v1910
                                | US3_0(v1878) -> (* Some *)
                                    let v1879 : System.DateTime = System.DateTime.Now
                                    let v1882 : (System.DateTime -> int64) = _.Ticks
                                    let v1883 : int64 = v1882 v1879
                                    let v1886 : int64 = v1883 - v1878
                                    let v1887 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                    let v1888 : System.TimeSpan = v1887 v1886
                                    let v1891 : (System.TimeSpan -> int32) = _.Hours
                                    let v1892 : int32 = v1891 v1888
                                    let v1895 : (System.TimeSpan -> int32) = _.Minutes
                                    let v1896 : int32 = v1895 v1888
                                    let v1899 : (System.TimeSpan -> int32) = _.Seconds
                                    let v1900 : int32 = v1899 v1888
                                    let v1903 : (System.TimeSpan -> int32) = _.Milliseconds
                                    let v1904 : int32 = v1903 v1888
                                    let v1907 : System.DateTime = System.DateTime (1, 1, 1, v1892, v1896, v1900, v1904)
                                    v1907
                            let v1915 : string = method6()
                            let v1918 : (string -> string) = v1914.ToString
                            let v1919 : string = v1918 v1915
                            let _v1795 = v1919 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v1922 : string = $"near_sdk::env::block_timestamp()"
                            let v1923 : uint64 = Fable.Core.RustInterop.emitRustExpr () v1922 
                            let v1924 : US3 option = None
                            let _v1924 = ref v1924 
                            match v1784 with
                            | Some x -> (
                            (fun () ->
                            (fun () ->
                            let v1925 : int64 = x
                            let v1926 : US3 = US3_0(v1925)
                            v1926 
                            )
                            |> fun x -> x () |> Some
                            ) () ) | None -> None
                            |> fun x -> _v1924.Value <- x
                            let v1927 : US3 option = _v1924.Value 
                            let v1938 : US3 = US3_1
                            let v1939 : US3 = v1927 |> Option.defaultValue v1938 
                            let v1948 : uint64 =
                                match v1939 with
                                | US3_1 -> (* None *)
                                    v1923
                                | US3_0(v1943) -> (* Some *)
                                    let v1944 : (int64 -> uint64) = uint64
                                    let v1945 : uint64 = v1944 v1943
                                    let v1946 : uint64 = v1923 - v1945
                                    v1946
                            let v1949 : uint64 = v1948 / 1000000000UL
                            let v1950 : uint64 = v1949 % 60UL
                            let v1951 : uint64 = v1949 / 60UL
                            let v1952 : uint64 = v1951 % 60UL
                            let v1953 : uint64 = v1949 / 3600UL
                            let v1954 : uint64 = v1953 % 24UL
                            let v1955 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
                            let v1956 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v1954, v1952, v1950) v1955 
                            let v1957 : string = "fable_library_rust::String_::fromString($0)"
                            let v1958 : string = Fable.Core.RustInterop.emitRustExpr v1956 v1957 
                            let _v1795 = v1958 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v1959 : US3 option = None
                            let _v1959 = ref v1959 
                            match v1784 with
                            | Some x -> (
                            (fun () ->
                            (fun () ->
                            let v1960 : int64 = x
                            let v1961 : US3 = US3_0(v1960)
                            v1961 
                            )
                            |> fun x -> x () |> Some
                            ) () ) | None -> None
                            |> fun x -> _v1959.Value <- x
                            let v1962 : US3 option = _v1959.Value 
                            let v1973 : US3 = US3_1
                            let v1974 : US3 = v1962 |> Option.defaultValue v1973 
                            let v2014 : System.DateTime =
                                match v1974 with
                                | US3_1 -> (* None *)
                                    let v2010 : System.DateTime = System.DateTime.Now
                                    v2010
                                | US3_0(v1978) -> (* Some *)
                                    let v1979 : System.DateTime = System.DateTime.Now
                                    let v1982 : (System.DateTime -> int64) = _.Ticks
                                    let v1983 : int64 = v1982 v1979
                                    let v1986 : int64 = v1983 - v1978
                                    let v1987 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                    let v1988 : System.TimeSpan = v1987 v1986
                                    let v1991 : (System.TimeSpan -> int32) = _.Hours
                                    let v1992 : int32 = v1991 v1988
                                    let v1995 : (System.TimeSpan -> int32) = _.Minutes
                                    let v1996 : int32 = v1995 v1988
                                    let v1999 : (System.TimeSpan -> int32) = _.Seconds
                                    let v2000 : int32 = v1999 v1988
                                    let v2003 : (System.TimeSpan -> int32) = _.Milliseconds
                                    let v2004 : int32 = v2003 v1988
                                    let v2007 : System.DateTime = System.DateTime (1, 1, 1, v1992, v1996, v2000, v2004)
                                    v2007
                            let v2015 : string = method7()
                            let v2018 : (string -> string) = v2014.ToString
                            let v2019 : string = v2018 v2015
                            let _v1795 = v2019 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v2022 : US3 option = None
                            let _v2022 = ref v2022 
                            match v1784 with
                            | Some x -> (
                            (fun () ->
                            (fun () ->
                            let v2023 : int64 = x
                            let v2024 : US3 = US3_0(v2023)
                            v2024 
                            )
                            |> fun x -> x () |> Some
                            ) () ) | None -> None
                            |> fun x -> _v2022.Value <- x
                            let v2025 : US3 option = _v2022.Value 
                            let v2036 : US3 = US3_1
                            let v2037 : US3 = v2025 |> Option.defaultValue v2036 
                            let v2077 : System.DateTime =
                                match v2037 with
                                | US3_1 -> (* None *)
                                    let v2073 : System.DateTime = System.DateTime.Now
                                    v2073
                                | US3_0(v2041) -> (* Some *)
                                    let v2042 : System.DateTime = System.DateTime.Now
                                    let v2045 : (System.DateTime -> int64) = _.Ticks
                                    let v2046 : int64 = v2045 v2042
                                    let v2049 : int64 = v2046 - v2041
                                    let v2050 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                    let v2051 : System.TimeSpan = v2050 v2049
                                    let v2054 : (System.TimeSpan -> int32) = _.Hours
                                    let v2055 : int32 = v2054 v2051
                                    let v2058 : (System.TimeSpan -> int32) = _.Minutes
                                    let v2059 : int32 = v2058 v2051
                                    let v2062 : (System.TimeSpan -> int32) = _.Seconds
                                    let v2063 : int32 = v2062 v2051
                                    let v2066 : (System.TimeSpan -> int32) = _.Milliseconds
                                    let v2067 : int32 = v2066 v2051
                                    let v2070 : System.DateTime = System.DateTime (1, 1, 1, v2055, v2059, v2063, v2067)
                                    v2070
                            let v2078 : string = method7()
                            let v2081 : (string -> string) = v2077.ToString
                            let v2082 : string = v2081 v2078
                            let _v1795 = v2082 
                            #endif
#else
                            let v2085 : US3 option = None
                            let _v2085 = ref v2085 
                            match v1784 with
                            | Some x -> (
                            (fun () ->
                            (fun () ->
                            let v2086 : int64 = x
                            let v2087 : US3 = US3_0(v2086)
                            v2087 
                            )
                            |> fun x -> x () |> Some
                            ) () ) | None -> None
                            |> fun x -> _v2085.Value <- x
                            let v2088 : US3 option = _v2085.Value 
                            let v2099 : US3 = US3_1
                            let v2100 : US3 = v2088 |> Option.defaultValue v2099 
                            let v2140 : System.DateTime =
                                match v2100 with
                                | US3_1 -> (* None *)
                                    let v2136 : System.DateTime = System.DateTime.Now
                                    v2136
                                | US3_0(v2104) -> (* Some *)
                                    let v2105 : System.DateTime = System.DateTime.Now
                                    let v2108 : (System.DateTime -> int64) = _.Ticks
                                    let v2109 : int64 = v2108 v2105
                                    let v2112 : int64 = v2109 - v2104
                                    let v2113 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                    let v2114 : System.TimeSpan = v2113 v2112
                                    let v2117 : (System.TimeSpan -> int32) = _.Hours
                                    let v2118 : int32 = v2117 v2114
                                    let v2121 : (System.TimeSpan -> int32) = _.Minutes
                                    let v2122 : int32 = v2121 v2114
                                    let v2125 : (System.TimeSpan -> int32) = _.Seconds
                                    let v2126 : int32 = v2125 v2114
                                    let v2129 : (System.TimeSpan -> int32) = _.Milliseconds
                                    let v2130 : int32 = v2129 v2114
                                    let v2133 : System.DateTime = System.DateTime (1, 1, 1, v2118, v2122, v2126, v2130)
                                    v2133
                            let v2141 : string = method7()
                            let v2144 : (string -> string) = v2140.ToString
                            let v2145 : string = v2144 v2141
                            let _v1795 = v2145 
                            #endif
                            let v2148 : string = _v1795 
                            let v2213 : string = "Critical"
                            let v2214 : (unit -> string) = v2213.ToLower
                            let v2215 : string = v2214 ()
                            let v2218 : string = v2215.PadLeft (7, ' ')
                            let v2232 : unit = ()
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v2233 : string = "inline_colorization::color_bright_red"
                            let v2234 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v2233 
                            let v2235 : string = "&*$0"
                            let v2236 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2218 v2235 
                            let v2237 : string = "inline_colorization::color_reset"
                            let v2238 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v2237 
                            let v2239 : string = "\"{v2234}{v2236}{v2238}\""
                            let v2240 : string = @$"format!(" + v2239 + ")"
                            let v2241 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v2240 
                            let v2242 : string = "fable_library_rust::String_::fromString($0)"
                            let v2243 : string = Fable.Core.RustInterop.emitRustExpr v2241 v2242 
                            let _v2232 = v2243 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v2244 : string = "inline_colorization::color_bright_red"
                            let v2245 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v2244 
                            let v2246 : string = "&*$0"
                            let v2247 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2218 v2246 
                            let v2248 : string = "inline_colorization::color_reset"
                            let v2249 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v2248 
                            let v2250 : string = "\"{v2245}{v2247}{v2249}\""
                            let v2251 : string = @$"format!(" + v2250 + ")"
                            let v2252 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v2251 
                            let v2253 : string = "fable_library_rust::String_::fromString($0)"
                            let v2254 : string = Fable.Core.RustInterop.emitRustExpr v2252 v2253 
                            let _v2232 = v2254 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v2255 : string = "inline_colorization::color_bright_red"
                            let v2256 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v2255 
                            let v2257 : string = "&*$0"
                            let v2258 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2218 v2257 
                            let v2259 : string = "inline_colorization::color_reset"
                            let v2260 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v2259 
                            let v2261 : string = "\"{v2256}{v2258}{v2260}\""
                            let v2262 : string = @$"format!(" + v2261 + ")"
                            let v2263 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v2262 
                            let v2264 : string = "fable_library_rust::String_::fromString($0)"
                            let v2265 : string = Fable.Core.RustInterop.emitRustExpr v2263 v2264 
                            let _v2232 = v2265 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v2266 : string = "\u001b[91m"
                            let v2267 : string = method8()
                            let v2268 : string = v2266 + v2218 
                            let v2269 : string = v2268 + v2267 
                            let _v2232 = v2269 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v2270 : string = "\u001b[91m"
                            let v2271 : string = method8()
                            let v2272 : string = v2270 + v2218 
                            let v2273 : string = v2272 + v2271 
                            let _v2232 = v2273 
                            #endif
#else
                            let v2274 : string = "\u001b[91m"
                            let v2275 : string = method8()
                            let v2276 : string = v2274 + v2218 
                            let v2277 : string = v2276 + v2275 
                            let _v2232 = v2277 
                            #endif
                            let v2278 : string = _v2232 
                            let v2284 : int64 = v1780.l0
                            let v2285 : string = method9()
                            let v2286 : Mut4 = {l0 = v2285} : Mut4
                            let v2287 : string = "{ "
                            let v2288 : string = $"{v2287}"
                            let v2291 : string = v2286.l0
                            let v2292 : string = v2291 + v2288 
                            v2286.l0 <- v2292
                            let v2293 : string = "env"
                            let v2294 : string = $"{v2293}"
                            let v2297 : string = v2286.l0
                            let v2298 : string = v2297 + v2294 
                            v2286.l0 <- v2298
                            let v2299 : string = " = "
                            let v2300 : string = $"{v2299}"
                            let v2303 : string = v2286.l0
                            let v2304 : string = v2303 + v2300 
                            v2286.l0 <- v2304
                            let v2305 : string = $"%A{v122}"
                            let v2308 : string = $"{v2305}"
                            let v2311 : string = v2286.l0
                            let v2312 : string = v2311 + v2308 
                            v2286.l0 <- v2312
                            let v2313 : string = "; "
                            let v2314 : string = $"{v2313}"
                            let v2317 : string = v2286.l0
                            let v2318 : string = v2317 + v2314 
                            v2286.l0 <- v2318
                            let v2319 : string = "exit_code"
                            let v2320 : string = $"{v2319}"
                            let v2323 : string = v2286.l0
                            let v2324 : string = v2323 + v2320 
                            v2286.l0 <- v2324
                            let v2325 : string = $"{v2299}"
                            let v2328 : string = v2286.l0
                            let v2329 : string = v2328 + v2325 
                            v2286.l0 <- v2329
                            let v2330 : string = $"{v1701}"
                            let v2333 : string = v2286.l0
                            let v2334 : string = v2333 + v2330 
                            v2286.l0 <- v2334
                            let v2335 : string = $"{v2313}"
                            let v2338 : string = v2286.l0
                            let v2339 : string = v2338 + v2335 
                            v2286.l0 <- v2339
                            let v2340 : string = "run_result"
                            let v2341 : string = $"{v2340}"
                            let v2344 : string = v2286.l0
                            let v2345 : string = v2344 + v2341 
                            v2286.l0 <- v2345
                            let v2346 : string = $"{v2299}"
                            let v2349 : string = v2286.l0
                            let v2350 : string = v2349 + v2346 
                            v2286.l0 <- v2350
                            let v2351 : string = $"{v1702}"
                            let v2354 : string = v2286.l0
                            let v2355 : string = v2354 + v2351 
                            v2286.l0 <- v2355
                            let v2356 : string = $"{v2313}"
                            let v2359 : string = v2286.l0
                            let v2360 : string = v2359 + v2356 
                            v2286.l0 <- v2360
                            let v2361 : string = "new_code_path"
                            let v2362 : string = $"{v2361}"
                            let v2365 : string = v2286.l0
                            let v2366 : string = v2365 + v2362 
                            v2286.l0 <- v2366
                            let v2367 : string = $"{v2299}"
                            let v2370 : string = v2286.l0
                            let v2371 : string = v2370 + v2367 
                            v2286.l0 <- v2371
                            let v2372 : string = $"{v61}"
                            let v2375 : string = v2286.l0
                            let v2376 : string = v2375 + v2372 
                            v2286.l0 <- v2376
                            let v2377 : string = " }"
                            let v2378 : string = $"{v2377}"
                            let v2381 : string = v2286.l0
                            let v2382 : string = v2381 + v2378 
                            v2286.l0 <- v2382
                            let v2383 : string = v2286.l0
                            let v2384 : (unit -> string) = closure42()
                            let v2385 : string = $"{v2148} {v2278} #{v2284} %s{v2384 ()} / {v2383}"
                            let v2388 : char list = []
                            let v2389 : (char list -> (char [])) = List.toArray
                            let v2390 : (char []) = v2389 v2388
                            let v2393 : string = v2385.TrimStart v2390 
                            let v2411 : char list = []
                            let v2412 : char list = '/' :: v2411 
                            let v2415 : char list = ' ' :: v2412 
                            let v2418 : (char list -> (char [])) = List.toArray
                            let v2419 : (char []) = v2418 v2415
                            let v2422 : string = v2393.TrimEnd v2419 
                            let v2440 : unit = ()
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v2441 : string = @"println!(""{}"", $0)"
                            Fable.Core.RustInterop.emitRustExpr v2422 v2441 
                            let _v2440 = () 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v2442 : string = @"println!(""{}"", $0)"
                            Fable.Core.RustInterop.emitRustExpr v2422 v2442 
                            let _v2440 = () 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v2443 : string = $"near_sdk::log!(\"{{}}\", $0)"
                            Fable.Core.RustInterop.emitRustExpr v2422 v2443 
                            let _v2440 = () 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            System.Console.WriteLine v2422 
                            let _v2440 = () 
                            #endif
#if FABLE_COMPILER_PYTHON
                            System.Console.WriteLine v2422 
                            let _v2440 = () 
                            #endif
#else
                            System.Console.WriteLine v2422 
                            let _v2440 = () 
                            #endif
                            _v2440 
                            let v2444 : (string -> unit) = v1719.l0
                            v2444 v2422
                        let v2445 : string = "py"
                        let v2446 : US1 = US1_0(v2445)
                        let v2447 : US1 = US1_1
                        let v2448 : US1 = US1_1
                        struct (v2446, v2447, v2448)
                    else
                        let v2452 : string =
                            match v122 with
                            | US8_0 -> (* Pip *)
                                let v2449 : string = $"python \"{v61}\""
                                v2449
                            | US8_1 -> (* Poetry *)
                                let v2450 : string = $"poetry run python \"{v61}\""
                                v2450
                        let v2453 : string = "TRACE_LEVEL"
                        let v2454 : string = "Verbose"
                        let v2455 : (struct (string * string) []) = [|struct (v2453, v2454)|]
                        let v2456 : System.Threading.CancellationToken option = None
                        let v2457 : (struct (string * string) []) = [||]
                        let v2458 : (struct (int32 * string * bool) -> Async<unit>) option = None
                        let v2459 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                        let v2460 : string option = None
                        let v2461 : string option = Some v1604 
                        let v2464 : bool = true
                        let struct (v2465 : int32, v2466 : string) = method40(v2452, v2456, v2455, v2458, v2459, v2464, v2461)
                        let v2467 : int32 = v2455.Length
                        let v2468 : (string []) = Array.zeroCreate<string> (v2467)
                        let v2469 : Mut5 = {l0 = 0} : Mut5
                        while method43(v2467, v2469) do
                            let v2471 : int32 = v2469.l0
                            let struct (v2472 : string, v2473 : string) = v2455.[int v2471]
                            let v2474 : string = $"$env:{v2472}=''{v2473}''"
                            v2468.[int v2471] <- v2474
                            let v2475 : int32 = v2471 + 1
                            v2469.l0 <- v2475
                            ()
                        let v2476 : string seq = v2468 |> Seq.ofArray
                        let v2479 : (string -> (string seq -> string)) = String.concat
                        let v2480 : string = ";"
                        let v2481 : (string seq -> string) = v2479 v2480
                        let v2482 : string = v2481 v2476
                        let v2485 : string = $"pwsh -c '{v2482}; {v2452}'"
                        let v2486 : bool = v2465 = 0
                        let v2491 : bool =
                            if v2486 then
                                true
                            else
                                let v2487 : string = "cupy_backends.cuda.api.runtime.CUDARuntimeError: cudaErrorInsufficientDriver"
                                let v2488 : bool = v2466.Contains v2487 
                                v2488
                        let struct (v3253 : US1, v3254 : US1, v3255 : US1) =
                            if v2491 then
                                let v2492 : (string -> US1) = closure43()
                                let v2493 : (unit -> string) = closure44(v2466)
                                let v2494 : (exn -> US1) = closure45(v61, v2466, v2485)
                                let v2495 : US1 = US1_1
                                let result = ref v2495
                                try
                                    result.Value <- v2493 () |> v2492 
                                with ex ->
                                    result.Value <- v2494 ex 
                                let v2496 : US1 = result.Value
                                let v2506 : string option =
                                    match v2496 with
                                    | US1_1 -> (* None *)
                                        let v2504 : string option = None
                                        v2504
                                    | US1_0(v2500) -> (* Some *)
                                        let v2501 : string option = Some v2500 
                                        v2501
                                let v2507 : string = "$0.unwrap()"
                                let v2508 : string = Fable.Core.RustInterop.emitRustExpr v2506 v2507 
                                let v2509 : string = "py"
                                let v2510 : US1 = US1_0(v2509)
                                let v2511 : US1 = US1_0(v199)
                                let v2512 : US1 = US1_0(v2508)
                                struct (v2510, v2511, v2512)
                            else
                                let v2513 : bool = State.trace_state.IsNone
                                if v2513 then
                                    let v2514 : US0 = US0_0
                                    let struct (v2515 : Mut0, v2516 : Mut1, v2517 : Mut2, v2518 : Mut3, v2519 : int64 option) = method1(v2514)
                                    let v2520 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v2515, v2516, v2517, v2518, v2519) 
                                    State.trace_state <- v2520 
                                    ()
                                let struct (v2525 : Mut0, v2526 : Mut1, v2527 : Mut2, v2528 : Mut3, v2529 : int64 option) = State.trace_state.Value
                                let v2540 : bool = State.trace_state.IsNone
                                if v2540 then
                                    let v2541 : US0 = US0_0
                                    let struct (v2542 : Mut0, v2543 : Mut1, v2544 : Mut2, v2545 : Mut3, v2546 : int64 option) = method1(v2541)
                                    let v2547 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v2542, v2543, v2544, v2545, v2546) 
                                    State.trace_state <- v2547 
                                    ()
                                let struct (v2552 : Mut0, v2553 : Mut1, v2554 : Mut2, v2555 : Mut3, v2556 : int64 option) = State.trace_state.Value
                                let v2567 : US0 = v2555.l0
                                let v2568 : bool = v2554.l0
                                let v2569 : bool = v2568 = false
                                let v2572 : bool =
                                    if v2569 then
                                        false
                                    else
                                        let v2570 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v2567
                                        let v2571 : bool = 4 >= v2570
                                        v2571
                                if v2572 then
                                    let v2573 : int64 = v2525.l0
                                    let v2574 : int64 = v2573 + 1L
                                    v2525.l0 <- v2574
                                    let v2575 : bool = State.trace_state.IsNone
                                    if v2575 then
                                        let v2576 : US0 = US0_0
                                        let struct (v2577 : Mut0, v2578 : Mut1, v2579 : Mut2, v2580 : Mut3, v2581 : int64 option) = method1(v2576)
                                        let v2582 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v2577, v2578, v2579, v2580, v2581) 
                                        State.trace_state <- v2582 
                                        ()
                                    let struct (v2587 : Mut0, v2588 : Mut1, v2589 : Mut2, v2590 : Mut3, v2591 : int64 option) = State.trace_state.Value
                                    let v2602 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v2603 : US3 option = None
                                    let _v2603 = ref v2603 
                                    match v2591 with
                                    | Some x -> (
                                    (fun () ->
                                    (fun () ->
                                    let v2604 : int64 = x
                                    let v2605 : US3 = US3_0(v2604)
                                    v2605 
                                    )
                                    |> fun x -> x () |> Some
                                    ) () ) | None -> None
                                    |> fun x -> _v2603.Value <- x
                                    let v2606 : US3 option = _v2603.Value 
                                    let v2617 : US3 = US3_1
                                    let v2618 : US3 = v2606 |> Option.defaultValue v2617 
                                    let v2658 : System.DateTime =
                                        match v2618 with
                                        | US3_1 -> (* None *)
                                            let v2654 : System.DateTime = System.DateTime.Now
                                            v2654
                                        | US3_0(v2622) -> (* Some *)
                                            let v2623 : System.DateTime = System.DateTime.Now
                                            let v2626 : (System.DateTime -> int64) = _.Ticks
                                            let v2627 : int64 = v2626 v2623
                                            let v2630 : int64 = v2627 - v2622
                                            let v2631 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                            let v2632 : System.TimeSpan = v2631 v2630
                                            let v2635 : (System.TimeSpan -> int32) = _.Hours
                                            let v2636 : int32 = v2635 v2632
                                            let v2639 : (System.TimeSpan -> int32) = _.Minutes
                                            let v2640 : int32 = v2639 v2632
                                            let v2643 : (System.TimeSpan -> int32) = _.Seconds
                                            let v2644 : int32 = v2643 v2632
                                            let v2647 : (System.TimeSpan -> int32) = _.Milliseconds
                                            let v2648 : int32 = v2647 v2632
                                            let v2651 : System.DateTime = System.DateTime (1, 1, 1, v2636, v2640, v2644, v2648)
                                            v2651
                                    let v2659 : string = method6()
                                    let v2662 : (string -> string) = v2658.ToString
                                    let v2663 : string = v2662 v2659
                                    let _v2602 = v2663 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v2666 : US3 option = None
                                    let _v2666 = ref v2666 
                                    match v2591 with
                                    | Some x -> (
                                    (fun () ->
                                    (fun () ->
                                    let v2667 : int64 = x
                                    let v2668 : US3 = US3_0(v2667)
                                    v2668 
                                    )
                                    |> fun x -> x () |> Some
                                    ) () ) | None -> None
                                    |> fun x -> _v2666.Value <- x
                                    let v2669 : US3 option = _v2666.Value 
                                    let v2680 : US3 = US3_1
                                    let v2681 : US3 = v2669 |> Option.defaultValue v2680 
                                    let v2721 : System.DateTime =
                                        match v2681 with
                                        | US3_1 -> (* None *)
                                            let v2717 : System.DateTime = System.DateTime.Now
                                            v2717
                                        | US3_0(v2685) -> (* Some *)
                                            let v2686 : System.DateTime = System.DateTime.Now
                                            let v2689 : (System.DateTime -> int64) = _.Ticks
                                            let v2690 : int64 = v2689 v2686
                                            let v2693 : int64 = v2690 - v2685
                                            let v2694 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                            let v2695 : System.TimeSpan = v2694 v2693
                                            let v2698 : (System.TimeSpan -> int32) = _.Hours
                                            let v2699 : int32 = v2698 v2695
                                            let v2702 : (System.TimeSpan -> int32) = _.Minutes
                                            let v2703 : int32 = v2702 v2695
                                            let v2706 : (System.TimeSpan -> int32) = _.Seconds
                                            let v2707 : int32 = v2706 v2695
                                            let v2710 : (System.TimeSpan -> int32) = _.Milliseconds
                                            let v2711 : int32 = v2710 v2695
                                            let v2714 : System.DateTime = System.DateTime (1, 1, 1, v2699, v2703, v2707, v2711)
                                            v2714
                                    let v2722 : string = method6()
                                    let v2725 : (string -> string) = v2721.ToString
                                    let v2726 : string = v2725 v2722
                                    let _v2602 = v2726 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v2729 : string = $"near_sdk::env::block_timestamp()"
                                    let v2730 : uint64 = Fable.Core.RustInterop.emitRustExpr () v2729 
                                    let v2731 : US3 option = None
                                    let _v2731 = ref v2731 
                                    match v2591 with
                                    | Some x -> (
                                    (fun () ->
                                    (fun () ->
                                    let v2732 : int64 = x
                                    let v2733 : US3 = US3_0(v2732)
                                    v2733 
                                    )
                                    |> fun x -> x () |> Some
                                    ) () ) | None -> None
                                    |> fun x -> _v2731.Value <- x
                                    let v2734 : US3 option = _v2731.Value 
                                    let v2745 : US3 = US3_1
                                    let v2746 : US3 = v2734 |> Option.defaultValue v2745 
                                    let v2755 : uint64 =
                                        match v2746 with
                                        | US3_1 -> (* None *)
                                            v2730
                                        | US3_0(v2750) -> (* Some *)
                                            let v2751 : (int64 -> uint64) = uint64
                                            let v2752 : uint64 = v2751 v2750
                                            let v2753 : uint64 = v2730 - v2752
                                            v2753
                                    let v2756 : uint64 = v2755 / 1000000000UL
                                    let v2757 : uint64 = v2756 % 60UL
                                    let v2758 : uint64 = v2756 / 60UL
                                    let v2759 : uint64 = v2758 % 60UL
                                    let v2760 : uint64 = v2756 / 3600UL
                                    let v2761 : uint64 = v2760 % 24UL
                                    let v2762 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
                                    let v2763 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v2761, v2759, v2757) v2762 
                                    let v2764 : string = "fable_library_rust::String_::fromString($0)"
                                    let v2765 : string = Fable.Core.RustInterop.emitRustExpr v2763 v2764 
                                    let _v2602 = v2765 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v2766 : US3 option = None
                                    let _v2766 = ref v2766 
                                    match v2591 with
                                    | Some x -> (
                                    (fun () ->
                                    (fun () ->
                                    let v2767 : int64 = x
                                    let v2768 : US3 = US3_0(v2767)
                                    v2768 
                                    )
                                    |> fun x -> x () |> Some
                                    ) () ) | None -> None
                                    |> fun x -> _v2766.Value <- x
                                    let v2769 : US3 option = _v2766.Value 
                                    let v2780 : US3 = US3_1
                                    let v2781 : US3 = v2769 |> Option.defaultValue v2780 
                                    let v2821 : System.DateTime =
                                        match v2781 with
                                        | US3_1 -> (* None *)
                                            let v2817 : System.DateTime = System.DateTime.Now
                                            v2817
                                        | US3_0(v2785) -> (* Some *)
                                            let v2786 : System.DateTime = System.DateTime.Now
                                            let v2789 : (System.DateTime -> int64) = _.Ticks
                                            let v2790 : int64 = v2789 v2786
                                            let v2793 : int64 = v2790 - v2785
                                            let v2794 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                            let v2795 : System.TimeSpan = v2794 v2793
                                            let v2798 : (System.TimeSpan -> int32) = _.Hours
                                            let v2799 : int32 = v2798 v2795
                                            let v2802 : (System.TimeSpan -> int32) = _.Minutes
                                            let v2803 : int32 = v2802 v2795
                                            let v2806 : (System.TimeSpan -> int32) = _.Seconds
                                            let v2807 : int32 = v2806 v2795
                                            let v2810 : (System.TimeSpan -> int32) = _.Milliseconds
                                            let v2811 : int32 = v2810 v2795
                                            let v2814 : System.DateTime = System.DateTime (1, 1, 1, v2799, v2803, v2807, v2811)
                                            v2814
                                    let v2822 : string = method7()
                                    let v2825 : (string -> string) = v2821.ToString
                                    let v2826 : string = v2825 v2822
                                    let _v2602 = v2826 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v2829 : US3 option = None
                                    let _v2829 = ref v2829 
                                    match v2591 with
                                    | Some x -> (
                                    (fun () ->
                                    (fun () ->
                                    let v2830 : int64 = x
                                    let v2831 : US3 = US3_0(v2830)
                                    v2831 
                                    )
                                    |> fun x -> x () |> Some
                                    ) () ) | None -> None
                                    |> fun x -> _v2829.Value <- x
                                    let v2832 : US3 option = _v2829.Value 
                                    let v2843 : US3 = US3_1
                                    let v2844 : US3 = v2832 |> Option.defaultValue v2843 
                                    let v2884 : System.DateTime =
                                        match v2844 with
                                        | US3_1 -> (* None *)
                                            let v2880 : System.DateTime = System.DateTime.Now
                                            v2880
                                        | US3_0(v2848) -> (* Some *)
                                            let v2849 : System.DateTime = System.DateTime.Now
                                            let v2852 : (System.DateTime -> int64) = _.Ticks
                                            let v2853 : int64 = v2852 v2849
                                            let v2856 : int64 = v2853 - v2848
                                            let v2857 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                            let v2858 : System.TimeSpan = v2857 v2856
                                            let v2861 : (System.TimeSpan -> int32) = _.Hours
                                            let v2862 : int32 = v2861 v2858
                                            let v2865 : (System.TimeSpan -> int32) = _.Minutes
                                            let v2866 : int32 = v2865 v2858
                                            let v2869 : (System.TimeSpan -> int32) = _.Seconds
                                            let v2870 : int32 = v2869 v2858
                                            let v2873 : (System.TimeSpan -> int32) = _.Milliseconds
                                            let v2874 : int32 = v2873 v2858
                                            let v2877 : System.DateTime = System.DateTime (1, 1, 1, v2862, v2866, v2870, v2874)
                                            v2877
                                    let v2885 : string = method7()
                                    let v2888 : (string -> string) = v2884.ToString
                                    let v2889 : string = v2888 v2885
                                    let _v2602 = v2889 
                                    #endif
#else
                                    let v2892 : US3 option = None
                                    let _v2892 = ref v2892 
                                    match v2591 with
                                    | Some x -> (
                                    (fun () ->
                                    (fun () ->
                                    let v2893 : int64 = x
                                    let v2894 : US3 = US3_0(v2893)
                                    v2894 
                                    )
                                    |> fun x -> x () |> Some
                                    ) () ) | None -> None
                                    |> fun x -> _v2892.Value <- x
                                    let v2895 : US3 option = _v2892.Value 
                                    let v2906 : US3 = US3_1
                                    let v2907 : US3 = v2895 |> Option.defaultValue v2906 
                                    let v2947 : System.DateTime =
                                        match v2907 with
                                        | US3_1 -> (* None *)
                                            let v2943 : System.DateTime = System.DateTime.Now
                                            v2943
                                        | US3_0(v2911) -> (* Some *)
                                            let v2912 : System.DateTime = System.DateTime.Now
                                            let v2915 : (System.DateTime -> int64) = _.Ticks
                                            let v2916 : int64 = v2915 v2912
                                            let v2919 : int64 = v2916 - v2911
                                            let v2920 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                            let v2921 : System.TimeSpan = v2920 v2919
                                            let v2924 : (System.TimeSpan -> int32) = _.Hours
                                            let v2925 : int32 = v2924 v2921
                                            let v2928 : (System.TimeSpan -> int32) = _.Minutes
                                            let v2929 : int32 = v2928 v2921
                                            let v2932 : (System.TimeSpan -> int32) = _.Seconds
                                            let v2933 : int32 = v2932 v2921
                                            let v2936 : (System.TimeSpan -> int32) = _.Milliseconds
                                            let v2937 : int32 = v2936 v2921
                                            let v2940 : System.DateTime = System.DateTime (1, 1, 1, v2925, v2929, v2933, v2937)
                                            v2940
                                    let v2948 : string = method7()
                                    let v2951 : (string -> string) = v2947.ToString
                                    let v2952 : string = v2951 v2948
                                    let _v2602 = v2952 
                                    #endif
                                    let v2955 : string = _v2602 
                                    let v3020 : string = "Critical"
                                    let v3021 : (unit -> string) = v3020.ToLower
                                    let v3022 : string = v3021 ()
                                    let v3025 : string = v3022.PadLeft (7, ' ')
                                    let v3039 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v3040 : string = "inline_colorization::color_bright_red"
                                    let v3041 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v3040 
                                    let v3042 : string = "&*$0"
                                    let v3043 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3025 v3042 
                                    let v3044 : string = "inline_colorization::color_reset"
                                    let v3045 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v3044 
                                    let v3046 : string = "\"{v3041}{v3043}{v3045}\""
                                    let v3047 : string = @$"format!(" + v3046 + ")"
                                    let v3048 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v3047 
                                    let v3049 : string = "fable_library_rust::String_::fromString($0)"
                                    let v3050 : string = Fable.Core.RustInterop.emitRustExpr v3048 v3049 
                                    let _v3039 = v3050 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v3051 : string = "inline_colorization::color_bright_red"
                                    let v3052 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v3051 
                                    let v3053 : string = "&*$0"
                                    let v3054 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3025 v3053 
                                    let v3055 : string = "inline_colorization::color_reset"
                                    let v3056 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v3055 
                                    let v3057 : string = "\"{v3052}{v3054}{v3056}\""
                                    let v3058 : string = @$"format!(" + v3057 + ")"
                                    let v3059 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v3058 
                                    let v3060 : string = "fable_library_rust::String_::fromString($0)"
                                    let v3061 : string = Fable.Core.RustInterop.emitRustExpr v3059 v3060 
                                    let _v3039 = v3061 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v3062 : string = "inline_colorization::color_bright_red"
                                    let v3063 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v3062 
                                    let v3064 : string = "&*$0"
                                    let v3065 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3025 v3064 
                                    let v3066 : string = "inline_colorization::color_reset"
                                    let v3067 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v3066 
                                    let v3068 : string = "\"{v3063}{v3065}{v3067}\""
                                    let v3069 : string = @$"format!(" + v3068 + ")"
                                    let v3070 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v3069 
                                    let v3071 : string = "fable_library_rust::String_::fromString($0)"
                                    let v3072 : string = Fable.Core.RustInterop.emitRustExpr v3070 v3071 
                                    let _v3039 = v3072 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v3073 : string = "\u001b[91m"
                                    let v3074 : string = method8()
                                    let v3075 : string = v3073 + v3025 
                                    let v3076 : string = v3075 + v3074 
                                    let _v3039 = v3076 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v3077 : string = "\u001b[91m"
                                    let v3078 : string = method8()
                                    let v3079 : string = v3077 + v3025 
                                    let v3080 : string = v3079 + v3078 
                                    let _v3039 = v3080 
                                    #endif
#else
                                    let v3081 : string = "\u001b[91m"
                                    let v3082 : string = method8()
                                    let v3083 : string = v3081 + v3025 
                                    let v3084 : string = v3083 + v3082 
                                    let _v3039 = v3084 
                                    #endif
                                    let v3085 : string = _v3039 
                                    let v3091 : int64 = v2587.l0
                                    let v3092 : string = method9()
                                    let v3093 : Mut4 = {l0 = v3092} : Mut4
                                    let v3094 : string = "{ "
                                    let v3095 : string = $"{v3094}"
                                    let v3098 : string = v3093.l0
                                    let v3099 : string = v3098 + v3095 
                                    v3093.l0 <- v3099
                                    let v3100 : string = "exit_code"
                                    let v3101 : string = $"{v3100}"
                                    let v3104 : string = v3093.l0
                                    let v3105 : string = v3104 + v3101 
                                    v3093.l0 <- v3105
                                    let v3106 : string = " = "
                                    let v3107 : string = $"{v3106}"
                                    let v3110 : string = v3093.l0
                                    let v3111 : string = v3110 + v3107 
                                    v3093.l0 <- v3111
                                    let v3112 : string = $"{v2465}"
                                    let v3115 : string = v3093.l0
                                    let v3116 : string = v3115 + v3112 
                                    v3093.l0 <- v3116
                                    let v3117 : string = "; "
                                    let v3118 : string = $"{v3117}"
                                    let v3121 : string = v3093.l0
                                    let v3122 : string = v3121 + v3118 
                                    v3093.l0 <- v3122
                                    let v3123 : string = "run_result"
                                    let v3124 : string = $"{v3123}"
                                    let v3127 : string = v3093.l0
                                    let v3128 : string = v3127 + v3124 
                                    v3093.l0 <- v3128
                                    let v3129 : string = $"{v3106}"
                                    let v3132 : string = v3093.l0
                                    let v3133 : string = v3132 + v3129 
                                    v3093.l0 <- v3133
                                    let v3134 : string = $"{v2466}"
                                    let v3137 : string = v3093.l0
                                    let v3138 : string = v3137 + v3134 
                                    v3093.l0 <- v3138
                                    let v3139 : string = $"{v3117}"
                                    let v3142 : string = v3093.l0
                                    let v3143 : string = v3142 + v3139 
                                    v3093.l0 <- v3143
                                    let v3144 : string = "new_code_path"
                                    let v3145 : string = $"{v3144}"
                                    let v3148 : string = v3093.l0
                                    let v3149 : string = v3148 + v3145 
                                    v3093.l0 <- v3149
                                    let v3150 : string = $"{v3106}"
                                    let v3153 : string = v3093.l0
                                    let v3154 : string = v3153 + v3150 
                                    v3093.l0 <- v3154
                                    let v3155 : string = $"{v61}"
                                    let v3158 : string = v3093.l0
                                    let v3159 : string = v3158 + v3155 
                                    v3093.l0 <- v3159
                                    let v3160 : string = $"{v3117}"
                                    let v3163 : string = v3093.l0
                                    let v3164 : string = v3163 + v3160 
                                    v3093.l0 <- v3164
                                    let v3165 : string = "external_command"
                                    let v3166 : string = $"{v3165}"
                                    let v3169 : string = v3093.l0
                                    let v3170 : string = v3169 + v3166 
                                    v3093.l0 <- v3170
                                    let v3171 : string = $"{v3106}"
                                    let v3174 : string = v3093.l0
                                    let v3175 : string = v3174 + v3171 
                                    v3093.l0 <- v3175
                                    let v3176 : string = $"{v2485}"
                                    let v3179 : string = v3093.l0
                                    let v3180 : string = v3179 + v3176 
                                    v3093.l0 <- v3180
                                    let v3181 : string = " }"
                                    let v3182 : string = $"{v3181}"
                                    let v3185 : string = v3093.l0
                                    let v3186 : string = v3185 + v3182 
                                    v3093.l0 <- v3186
                                    let v3187 : string = v3093.l0
                                    let v3188 : (unit -> string) = closure47()
                                    let v3189 : string = $"{v2955} {v3085} #{v3091} %s{v3188 ()} / {v3187}"
                                    let v3192 : char list = []
                                    let v3193 : (char list -> (char [])) = List.toArray
                                    let v3194 : (char []) = v3193 v3192
                                    let v3197 : string = v3189.TrimStart v3194 
                                    let v3215 : char list = []
                                    let v3216 : char list = '/' :: v3215 
                                    let v3219 : char list = ' ' :: v3216 
                                    let v3222 : (char list -> (char [])) = List.toArray
                                    let v3223 : (char []) = v3222 v3219
                                    let v3226 : string = v3197.TrimEnd v3223 
                                    let v3244 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v3245 : string = @"println!(""{}"", $0)"
                                    Fable.Core.RustInterop.emitRustExpr v3226 v3245 
                                    let _v3244 = () 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v3246 : string = @"println!(""{}"", $0)"
                                    Fable.Core.RustInterop.emitRustExpr v3226 v3246 
                                    let _v3244 = () 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v3247 : string = $"near_sdk::log!(\"{{}}\", $0)"
                                    Fable.Core.RustInterop.emitRustExpr v3226 v3247 
                                    let _v3244 = () 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    System.Console.WriteLine v3226 
                                    let _v3244 = () 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    System.Console.WriteLine v3226 
                                    let _v3244 = () 
                                    #endif
#else
                                    System.Console.WriteLine v3226 
                                    let _v3244 = () 
                                    #endif
                                    _v3244 
                                    let v3248 : (string -> unit) = v2526.l0
                                    v3248 v3226
                                let v3249 : string = "py"
                                let v3250 : US1 = US1_0(v3249)
                                let v3251 : US1 = US1_1
                                let v3252 : US1 = US1_1
                                struct (v3250, v3251, v3252)
                        struct (v3253, v3254, v3255)
                let v3262 : string =
                    match v3256 with
                    | US1_1 -> (* None *)
                        let v3260 : string = ""
                        v3260
                    | US1_0(v3259) -> (* Some *)
                        v3259
                let v3263 : string = "extension"
                let v3267 : string =
                    match v3257 with
                    | US1_1 -> (* None *)
                        let v3265 : string = ""
                        v3265
                    | US1_0(v3264) -> (* Some *)
                        v3264
                let v3268 : string = "code"
                let v3272 : string =
                    match v3258 with
                    | US1_1 -> (* None *)
                        let v3270 : string = ""
                        v3270
                    | US1_0(v3269) -> (* Some *)
                        v3269
                let v3273 : string = "output"
                let v3274 : (struct (string * string) []) = [|struct (v3263, v3262); struct (v3268, v3267); struct (v3273, v3272)|]
                let v3275 : string = "$0.to_vec()"
                let v3276 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v3274 v3275 
                let v3277 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                let v3278 : (struct (string * string) -> (std_string_String * std_string_String)) = closure48()
                let v3279 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v3276, v3278) v3277 
                let v3280 : string = "std::collections::BTreeMap::from_iter(v3279.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
                let v3281 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v3280 
                let v3282 : string = "serde_json::to_string(&v3281)"
                let v3283 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v3282 
                let v3284 : string = "$0.unwrap()"
                let v3285 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3283 v3284 
                let v3286 : string = "fable_library_rust::String_::fromString($0)"
                let v3287 : string = Fable.Core.RustInterop.emitRustExpr v3285 v3286 
                let v3288 : string = "command_result"
                [|struct (v3288, v3287)|]
            else
                let v3290 : string = "fable_library_rust::String_::fromString($0)"
                let v3291 : string = Fable.Core.RustInterop.emitRustExpr v27 v3290 
                let v3292 : bool = v3291 = "fable"
                if v3292 then
                    let v3293 : string = method79()
                    let v3294 : string = "&*$0"
                    let v3295 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3293 v3294 
                    let v3296 : string = "clap::ArgMatches::get_one(&$0, v3295).cloned()"
                    let v3297 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v28 v3296 
                    let v3298 : US5 option = None
                    let _v3298 = ref v3298 
                    match v3297 with
                    | Some x -> (
                    (fun () ->
                    (fun () ->
                    let v3299 : std_string_String = x
                    let v3300 : US5 = US5_0(v3299)
                    v3300 
                    )
                    |> fun x -> x () |> Some
                    ) () ) | None -> None
                    |> fun x -> _v3298.Value <- x
                    let v3301 : US5 option = _v3298.Value 
                    let v3312 : US5 = US5_1
                    let v3313 : US5 = v3301 |> Option.defaultValue v3312 
                    let v3320 : std_string_String =
                        match v3313 with
                        | US5_1 -> (* None *)
                            failwith<std_string_String> "Option does not have a value."
                        | US5_0(v3317) -> (* Some *)
                            v3317
                    let v3321 : string = "fable_library_rust::String_::fromString($0)"
                    let v3322 : string = Fable.Core.RustInterop.emitRustExpr v3320 v3321 
                    let v3323 : string = method80()
                    let v3324 : string = "&*$0"
                    let v3325 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3323 v3324 
                    let v3326 : string = "clap::ArgMatches::get_one(&$0, v3325).cloned()"
                    let v3327 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v28 v3326 
                    let v3328 : US5 option = None
                    let _v3328 = ref v3328 
                    match v3327 with
                    | Some x -> (
                    (fun () ->
                    (fun () ->
                    let v3329 : std_string_String = x
                    let v3330 : US5 = US5_0(v3329)
                    v3330 
                    )
                    |> fun x -> x () |> Some
                    ) () ) | None -> None
                    |> fun x -> _v3328.Value <- x
                    let v3331 : US5 option = _v3328.Value 
                    let v3342 : US5 = US5_1
                    let v3343 : US5 = v3331 |> Option.defaultValue v3342 
                    let v3353 : US1 =
                        match v3343 with
                        | US5_1 -> (* None *)
                            US1_1
                        | US5_0(v3347) -> (* Some *)
                            let v3348 : string = "fable_library_rust::String_::fromString($0)"
                            let v3349 : string = Fable.Core.RustInterop.emitRustExpr v3347 v3348 
                            US1_0(v3349)
                    let v3387 : string =
                        match v3353 with
                        | US1_1 -> (* None *)
                            let v3385 : string = "{}"
                            v3385
                        | US1_0(v3354) -> (* Some *)
                            let v3355 : clap_Command = method0()
                            let v3356 : string = $"_ {v3354} --fs-path \"{v3322}\""
                            let v3357 : US22 = method54(v3356)
                            let v3363 : (string []) =
                                match v3357 with
                                | US22_1(v3359) -> (* Error *)
                                    let v3360 : string = $"resultm.get / Result value was Error: {v3359}"
                                    failwith<(string [])> v3360
                                | US22_0(v3358) -> (* Ok *)
                                    v3358
                            let v3364 : string = "$0.to_vec()"
                            let v3365 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v3363 v3364 
                            let v3366 : string = "true; let _result : Vec<_> = v3365.into_iter().map(|x| { //"
                            let v3367 : bool = Fable.Core.RustInterop.emitRustExpr () v3366 
                            let v3368 : string = "x"
                            let v3369 : string = Fable.Core.RustInterop.emitRustExpr () v3368 
                            let v3370 : string = "&*$0"
                            let v3371 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3369 v3370 
                            let v3372 : string = "String::from($0)"
                            let v3373 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3371 v3372 
                            let v3374 : string = "true; $0 }).collect::<Vec<_>>()"
                            let v3375 : bool = Fable.Core.RustInterop.emitRustExpr v3373 v3374 
                            let v3376 : string = "_result"
                            let v3377 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v3376 
                            let v3378 : string = "clap::Command::get_matches_from($0, v3377)"
                            let v3379 : clap_ArgMatches = Fable.Core.RustInterop.emitRustExpr v3355 v3378 
                            let v3380 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = method10(v0, v3379)
                            let v3381 : string = "v3380.await"
                            let v3382 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr () v3381 
                            let v3383 : string = "$0.unwrap()"
                            let v3384 : string = Fable.Core.RustInterop.emitRustExpr v3382 v3383 
                            v3384
                    let v3388 : string = "command_result"
                    [|struct (v3388, v3387)|]
                else
                    let v3390 : string = "fable_library_rust::String_::fromString($0)"
                    let v3391 : string = Fable.Core.RustInterop.emitRustExpr v27 v3390 
                    let v3392 : bool = v3391 = "dib"
                    if v3392 then
                        let v3393 : string = method81()
                        let v3394 : string = "&*$0"
                        let v3395 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3393 v3394 
                        let v3396 : string = "clap::ArgMatches::get_one(&$0, v3395).cloned()"
                        let v3397 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v28 v3396 
                        let v3398 : (std_string_String -> string) = closure49()
                        let v3399 : string option = v3397 |> Option.map v3398 
                        let v3419 : string = "$0.unwrap()"
                        let v3420 : string = Fable.Core.RustInterop.emitRustExpr v3399 v3419 
                        let v3421 : string = method89()
                        let v3422 : string = "&*$0"
                        let v3423 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3421 v3422 
                        let v3424 : string = "clap::ArgMatches::get_one(&$0, v3423).cloned()"
                        let v3425 : uint8 option = Fable.Core.RustInterop.emitRustExpr v28 v3424 
                        let v3426 : uint8 = v3425 |> Option.defaultValue 1uy 
                        let v3429 : string = method90()
                        let v3430 : string = "&*$0"
                        let v3431 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3429 v3430 
                        let v3432 : string = "clap::ArgMatches::get_one(&$0, v3431).cloned()"
                        let v3433 : string option = Fable.Core.RustInterop.emitRustExpr v28 v3432 
                        let v3434 : uint8 = 1uy
                        let struct (v3435 : int32, v3436 : string) = method91(v3433, v3426, v3420, v3434)
                        let v3437 : bool = v3435 <> 0 
                        let struct (v4977 : int32, v4978 : string) =
                            if v3437 then
                                struct (v3435, v3436)
                            else
                                let v3440 : System.Threading.CancellationToken option = None
                                let v3441 : (struct (string * string) []) = [||]
                                let v3442 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                let v3443 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                let v3444 : string option = None
                                let v3445 : string = $"jupyter nbconvert \"{v3420}.ipynb\" --to html --HTMLExporter.theme=dark"
                                let v3446 : bool = true
                                let struct (v3447 : int32, v3448 : string) = method40(v3445, v3440, v3441, v3442, v3443, v3446, v3444)
                                let v3449 : bool = State.trace_state.IsNone
                                if v3449 then
                                    let v3450 : US0 = US0_0
                                    let struct (v3451 : Mut0, v3452 : Mut1, v3453 : Mut2, v3454 : Mut3, v3455 : int64 option) = method1(v3450)
                                    let v3456 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v3451, v3452, v3453, v3454, v3455) 
                                    State.trace_state <- v3456 
                                    ()
                                let struct (v3461 : Mut0, v3462 : Mut1, v3463 : Mut2, v3464 : Mut3, v3465 : int64 option) = State.trace_state.Value
                                let v3476 : bool = State.trace_state.IsNone
                                if v3476 then
                                    let v3477 : US0 = US0_0
                                    let struct (v3478 : Mut0, v3479 : Mut1, v3480 : Mut2, v3481 : Mut3, v3482 : int64 option) = method1(v3477)
                                    let v3483 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v3478, v3479, v3480, v3481, v3482) 
                                    State.trace_state <- v3483 
                                    ()
                                let struct (v3488 : Mut0, v3489 : Mut1, v3490 : Mut2, v3491 : Mut3, v3492 : int64 option) = State.trace_state.Value
                                let v3503 : US0 = v3491.l0
                                let v3504 : bool = v3490.l0
                                let v3505 : bool = v3504 = false
                                let v3508 : bool =
                                    if v3505 then
                                        false
                                    else
                                        let v3506 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v3503
                                        let v3507 : bool = 1 >= v3506
                                        v3507
                                if v3508 then
                                    let v3509 : int64 = v3461.l0
                                    let v3510 : int64 = v3509 + 1L
                                    v3461.l0 <- v3510
                                    let v3511 : bool = State.trace_state.IsNone
                                    if v3511 then
                                        let v3512 : US0 = US0_0
                                        let struct (v3513 : Mut0, v3514 : Mut1, v3515 : Mut2, v3516 : Mut3, v3517 : int64 option) = method1(v3512)
                                        let v3518 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v3513, v3514, v3515, v3516, v3517) 
                                        State.trace_state <- v3518 
                                        ()
                                    let struct (v3523 : Mut0, v3524 : Mut1, v3525 : Mut2, v3526 : Mut3, v3527 : int64 option) = State.trace_state.Value
                                    let v3538 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v3539 : US3 option = None
                                    let _v3539 = ref v3539 
                                    match v3527 with
                                    | Some x -> (
                                    (fun () ->
                                    (fun () ->
                                    let v3540 : int64 = x
                                    let v3541 : US3 = US3_0(v3540)
                                    v3541 
                                    )
                                    |> fun x -> x () |> Some
                                    ) () ) | None -> None
                                    |> fun x -> _v3539.Value <- x
                                    let v3542 : US3 option = _v3539.Value 
                                    let v3553 : US3 = US3_1
                                    let v3554 : US3 = v3542 |> Option.defaultValue v3553 
                                    let v3594 : System.DateTime =
                                        match v3554 with
                                        | US3_1 -> (* None *)
                                            let v3590 : System.DateTime = System.DateTime.Now
                                            v3590
                                        | US3_0(v3558) -> (* Some *)
                                            let v3559 : System.DateTime = System.DateTime.Now
                                            let v3562 : (System.DateTime -> int64) = _.Ticks
                                            let v3563 : int64 = v3562 v3559
                                            let v3566 : int64 = v3563 - v3558
                                            let v3567 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                            let v3568 : System.TimeSpan = v3567 v3566
                                            let v3571 : (System.TimeSpan -> int32) = _.Hours
                                            let v3572 : int32 = v3571 v3568
                                            let v3575 : (System.TimeSpan -> int32) = _.Minutes
                                            let v3576 : int32 = v3575 v3568
                                            let v3579 : (System.TimeSpan -> int32) = _.Seconds
                                            let v3580 : int32 = v3579 v3568
                                            let v3583 : (System.TimeSpan -> int32) = _.Milliseconds
                                            let v3584 : int32 = v3583 v3568
                                            let v3587 : System.DateTime = System.DateTime (1, 1, 1, v3572, v3576, v3580, v3584)
                                            v3587
                                    let v3595 : string = method6()
                                    let v3598 : (string -> string) = v3594.ToString
                                    let v3599 : string = v3598 v3595
                                    let _v3538 = v3599 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v3602 : US3 option = None
                                    let _v3602 = ref v3602 
                                    match v3527 with
                                    | Some x -> (
                                    (fun () ->
                                    (fun () ->
                                    let v3603 : int64 = x
                                    let v3604 : US3 = US3_0(v3603)
                                    v3604 
                                    )
                                    |> fun x -> x () |> Some
                                    ) () ) | None -> None
                                    |> fun x -> _v3602.Value <- x
                                    let v3605 : US3 option = _v3602.Value 
                                    let v3616 : US3 = US3_1
                                    let v3617 : US3 = v3605 |> Option.defaultValue v3616 
                                    let v3657 : System.DateTime =
                                        match v3617 with
                                        | US3_1 -> (* None *)
                                            let v3653 : System.DateTime = System.DateTime.Now
                                            v3653
                                        | US3_0(v3621) -> (* Some *)
                                            let v3622 : System.DateTime = System.DateTime.Now
                                            let v3625 : (System.DateTime -> int64) = _.Ticks
                                            let v3626 : int64 = v3625 v3622
                                            let v3629 : int64 = v3626 - v3621
                                            let v3630 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                            let v3631 : System.TimeSpan = v3630 v3629
                                            let v3634 : (System.TimeSpan -> int32) = _.Hours
                                            let v3635 : int32 = v3634 v3631
                                            let v3638 : (System.TimeSpan -> int32) = _.Minutes
                                            let v3639 : int32 = v3638 v3631
                                            let v3642 : (System.TimeSpan -> int32) = _.Seconds
                                            let v3643 : int32 = v3642 v3631
                                            let v3646 : (System.TimeSpan -> int32) = _.Milliseconds
                                            let v3647 : int32 = v3646 v3631
                                            let v3650 : System.DateTime = System.DateTime (1, 1, 1, v3635, v3639, v3643, v3647)
                                            v3650
                                    let v3658 : string = method6()
                                    let v3661 : (string -> string) = v3657.ToString
                                    let v3662 : string = v3661 v3658
                                    let _v3538 = v3662 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v3665 : string = $"near_sdk::env::block_timestamp()"
                                    let v3666 : uint64 = Fable.Core.RustInterop.emitRustExpr () v3665 
                                    let v3667 : US3 option = None
                                    let _v3667 = ref v3667 
                                    match v3527 with
                                    | Some x -> (
                                    (fun () ->
                                    (fun () ->
                                    let v3668 : int64 = x
                                    let v3669 : US3 = US3_0(v3668)
                                    v3669 
                                    )
                                    |> fun x -> x () |> Some
                                    ) () ) | None -> None
                                    |> fun x -> _v3667.Value <- x
                                    let v3670 : US3 option = _v3667.Value 
                                    let v3681 : US3 = US3_1
                                    let v3682 : US3 = v3670 |> Option.defaultValue v3681 
                                    let v3691 : uint64 =
                                        match v3682 with
                                        | US3_1 -> (* None *)
                                            v3666
                                        | US3_0(v3686) -> (* Some *)
                                            let v3687 : (int64 -> uint64) = uint64
                                            let v3688 : uint64 = v3687 v3686
                                            let v3689 : uint64 = v3666 - v3688
                                            v3689
                                    let v3692 : uint64 = v3691 / 1000000000UL
                                    let v3693 : uint64 = v3692 % 60UL
                                    let v3694 : uint64 = v3692 / 60UL
                                    let v3695 : uint64 = v3694 % 60UL
                                    let v3696 : uint64 = v3692 / 3600UL
                                    let v3697 : uint64 = v3696 % 24UL
                                    let v3698 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
                                    let v3699 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v3697, v3695, v3693) v3698 
                                    let v3700 : string = "fable_library_rust::String_::fromString($0)"
                                    let v3701 : string = Fable.Core.RustInterop.emitRustExpr v3699 v3700 
                                    let _v3538 = v3701 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v3702 : US3 option = None
                                    let _v3702 = ref v3702 
                                    match v3527 with
                                    | Some x -> (
                                    (fun () ->
                                    (fun () ->
                                    let v3703 : int64 = x
                                    let v3704 : US3 = US3_0(v3703)
                                    v3704 
                                    )
                                    |> fun x -> x () |> Some
                                    ) () ) | None -> None
                                    |> fun x -> _v3702.Value <- x
                                    let v3705 : US3 option = _v3702.Value 
                                    let v3716 : US3 = US3_1
                                    let v3717 : US3 = v3705 |> Option.defaultValue v3716 
                                    let v3757 : System.DateTime =
                                        match v3717 with
                                        | US3_1 -> (* None *)
                                            let v3753 : System.DateTime = System.DateTime.Now
                                            v3753
                                        | US3_0(v3721) -> (* Some *)
                                            let v3722 : System.DateTime = System.DateTime.Now
                                            let v3725 : (System.DateTime -> int64) = _.Ticks
                                            let v3726 : int64 = v3725 v3722
                                            let v3729 : int64 = v3726 - v3721
                                            let v3730 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                            let v3731 : System.TimeSpan = v3730 v3729
                                            let v3734 : (System.TimeSpan -> int32) = _.Hours
                                            let v3735 : int32 = v3734 v3731
                                            let v3738 : (System.TimeSpan -> int32) = _.Minutes
                                            let v3739 : int32 = v3738 v3731
                                            let v3742 : (System.TimeSpan -> int32) = _.Seconds
                                            let v3743 : int32 = v3742 v3731
                                            let v3746 : (System.TimeSpan -> int32) = _.Milliseconds
                                            let v3747 : int32 = v3746 v3731
                                            let v3750 : System.DateTime = System.DateTime (1, 1, 1, v3735, v3739, v3743, v3747)
                                            v3750
                                    let v3758 : string = method7()
                                    let v3761 : (string -> string) = v3757.ToString
                                    let v3762 : string = v3761 v3758
                                    let _v3538 = v3762 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v3765 : US3 option = None
                                    let _v3765 = ref v3765 
                                    match v3527 with
                                    | Some x -> (
                                    (fun () ->
                                    (fun () ->
                                    let v3766 : int64 = x
                                    let v3767 : US3 = US3_0(v3766)
                                    v3767 
                                    )
                                    |> fun x -> x () |> Some
                                    ) () ) | None -> None
                                    |> fun x -> _v3765.Value <- x
                                    let v3768 : US3 option = _v3765.Value 
                                    let v3779 : US3 = US3_1
                                    let v3780 : US3 = v3768 |> Option.defaultValue v3779 
                                    let v3820 : System.DateTime =
                                        match v3780 with
                                        | US3_1 -> (* None *)
                                            let v3816 : System.DateTime = System.DateTime.Now
                                            v3816
                                        | US3_0(v3784) -> (* Some *)
                                            let v3785 : System.DateTime = System.DateTime.Now
                                            let v3788 : (System.DateTime -> int64) = _.Ticks
                                            let v3789 : int64 = v3788 v3785
                                            let v3792 : int64 = v3789 - v3784
                                            let v3793 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                            let v3794 : System.TimeSpan = v3793 v3792
                                            let v3797 : (System.TimeSpan -> int32) = _.Hours
                                            let v3798 : int32 = v3797 v3794
                                            let v3801 : (System.TimeSpan -> int32) = _.Minutes
                                            let v3802 : int32 = v3801 v3794
                                            let v3805 : (System.TimeSpan -> int32) = _.Seconds
                                            let v3806 : int32 = v3805 v3794
                                            let v3809 : (System.TimeSpan -> int32) = _.Milliseconds
                                            let v3810 : int32 = v3809 v3794
                                            let v3813 : System.DateTime = System.DateTime (1, 1, 1, v3798, v3802, v3806, v3810)
                                            v3813
                                    let v3821 : string = method7()
                                    let v3824 : (string -> string) = v3820.ToString
                                    let v3825 : string = v3824 v3821
                                    let _v3538 = v3825 
                                    #endif
#else
                                    let v3828 : US3 option = None
                                    let _v3828 = ref v3828 
                                    match v3527 with
                                    | Some x -> (
                                    (fun () ->
                                    (fun () ->
                                    let v3829 : int64 = x
                                    let v3830 : US3 = US3_0(v3829)
                                    v3830 
                                    )
                                    |> fun x -> x () |> Some
                                    ) () ) | None -> None
                                    |> fun x -> _v3828.Value <- x
                                    let v3831 : US3 option = _v3828.Value 
                                    let v3842 : US3 = US3_1
                                    let v3843 : US3 = v3831 |> Option.defaultValue v3842 
                                    let v3883 : System.DateTime =
                                        match v3843 with
                                        | US3_1 -> (* None *)
                                            let v3879 : System.DateTime = System.DateTime.Now
                                            v3879
                                        | US3_0(v3847) -> (* Some *)
                                            let v3848 : System.DateTime = System.DateTime.Now
                                            let v3851 : (System.DateTime -> int64) = _.Ticks
                                            let v3852 : int64 = v3851 v3848
                                            let v3855 : int64 = v3852 - v3847
                                            let v3856 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                            let v3857 : System.TimeSpan = v3856 v3855
                                            let v3860 : (System.TimeSpan -> int32) = _.Hours
                                            let v3861 : int32 = v3860 v3857
                                            let v3864 : (System.TimeSpan -> int32) = _.Minutes
                                            let v3865 : int32 = v3864 v3857
                                            let v3868 : (System.TimeSpan -> int32) = _.Seconds
                                            let v3869 : int32 = v3868 v3857
                                            let v3872 : (System.TimeSpan -> int32) = _.Milliseconds
                                            let v3873 : int32 = v3872 v3857
                                            let v3876 : System.DateTime = System.DateTime (1, 1, 1, v3861, v3865, v3869, v3873)
                                            v3876
                                    let v3884 : string = method7()
                                    let v3887 : (string -> string) = v3883.ToString
                                    let v3888 : string = v3887 v3884
                                    let _v3538 = v3888 
                                    #endif
                                    let v3891 : string = _v3538 
                                    let v3956 : string = "Debug"
                                    let v3957 : (unit -> string) = v3956.ToLower
                                    let v3958 : string = v3957 ()
                                    let v3961 : string = v3958.PadLeft (7, ' ')
                                    let v3975 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v3976 : string = "inline_colorization::color_bright_blue"
                                    let v3977 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v3976 
                                    let v3978 : string = "&*$0"
                                    let v3979 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3961 v3978 
                                    let v3980 : string = "inline_colorization::color_reset"
                                    let v3981 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v3980 
                                    let v3982 : string = "\"{v3977}{v3979}{v3981}\""
                                    let v3983 : string = @$"format!(" + v3982 + ")"
                                    let v3984 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v3983 
                                    let v3985 : string = "fable_library_rust::String_::fromString($0)"
                                    let v3986 : string = Fable.Core.RustInterop.emitRustExpr v3984 v3985 
                                    let _v3975 = v3986 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v3987 : string = "inline_colorization::color_bright_blue"
                                    let v3988 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v3987 
                                    let v3989 : string = "&*$0"
                                    let v3990 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3961 v3989 
                                    let v3991 : string = "inline_colorization::color_reset"
                                    let v3992 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v3991 
                                    let v3993 : string = "\"{v3988}{v3990}{v3992}\""
                                    let v3994 : string = @$"format!(" + v3993 + ")"
                                    let v3995 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v3994 
                                    let v3996 : string = "fable_library_rust::String_::fromString($0)"
                                    let v3997 : string = Fable.Core.RustInterop.emitRustExpr v3995 v3996 
                                    let _v3975 = v3997 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v3998 : string = "inline_colorization::color_bright_blue"
                                    let v3999 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v3998 
                                    let v4000 : string = "&*$0"
                                    let v4001 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3961 v4000 
                                    let v4002 : string = "inline_colorization::color_reset"
                                    let v4003 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v4002 
                                    let v4004 : string = "\"{v3999}{v4001}{v4003}\""
                                    let v4005 : string = @$"format!(" + v4004 + ")"
                                    let v4006 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v4005 
                                    let v4007 : string = "fable_library_rust::String_::fromString($0)"
                                    let v4008 : string = Fable.Core.RustInterop.emitRustExpr v4006 v4007 
                                    let _v3975 = v4008 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v4009 : string = "\u001b[94m"
                                    let v4010 : string = method8()
                                    let v4011 : string = v4009 + v3961 
                                    let v4012 : string = v4011 + v4010 
                                    let _v3975 = v4012 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v4013 : string = "\u001b[94m"
                                    let v4014 : string = method8()
                                    let v4015 : string = v4013 + v3961 
                                    let v4016 : string = v4015 + v4014 
                                    let _v3975 = v4016 
                                    #endif
#else
                                    let v4017 : string = "\u001b[94m"
                                    let v4018 : string = method8()
                                    let v4019 : string = v4017 + v3961 
                                    let v4020 : string = v4019 + v4018 
                                    let _v3975 = v4020 
                                    #endif
                                    let v4021 : string = _v3975 
                                    let v4027 : int64 = v3523.l0
                                    let v4028 : int32 = v3448.Length
                                    let v4029 : string = method9()
                                    let v4030 : Mut4 = {l0 = v4029} : Mut4
                                    let v4031 : string = "{ "
                                    let v4032 : string = $"{v4031}"
                                    let v4035 : string = v4030.l0
                                    let v4036 : string = v4035 + v4032 
                                    v4030.l0 <- v4036
                                    let v4037 : string = "exit_code"
                                    let v4038 : string = $"{v4037}"
                                    let v4041 : string = v4030.l0
                                    let v4042 : string = v4041 + v4038 
                                    v4030.l0 <- v4042
                                    let v4043 : string = " = "
                                    let v4044 : string = $"{v4043}"
                                    let v4047 : string = v4030.l0
                                    let v4048 : string = v4047 + v4044 
                                    v4030.l0 <- v4048
                                    let v4049 : string = $"{v3447}"
                                    let v4052 : string = v4030.l0
                                    let v4053 : string = v4052 + v4049 
                                    v4030.l0 <- v4053
                                    let v4054 : string = "; "
                                    let v4055 : string = $"{v4054}"
                                    let v4058 : string = v4030.l0
                                    let v4059 : string = v4058 + v4055 
                                    v4030.l0 <- v4059
                                    let v4060 : string = "jupyter_result_length"
                                    let v4061 : string = $"{v4060}"
                                    let v4064 : string = v4030.l0
                                    let v4065 : string = v4064 + v4061 
                                    v4030.l0 <- v4065
                                    let v4066 : string = $"{v4043}"
                                    let v4069 : string = v4030.l0
                                    let v4070 : string = v4069 + v4066 
                                    v4030.l0 <- v4070
                                    let v4071 : string = $"{v4028}"
                                    let v4074 : string = v4030.l0
                                    let v4075 : string = v4074 + v4071 
                                    v4030.l0 <- v4075
                                    let v4076 : string = " }"
                                    let v4077 : string = $"{v4076}"
                                    let v4080 : string = v4030.l0
                                    let v4081 : string = v4080 + v4077 
                                    v4030.l0 <- v4081
                                    let v4082 : string = v4030.l0
                                    let v4083 : (unit -> string) = closure51()
                                    let v4084 : string = $"{v3891} {v4021} #{v4027} %s{v4083 ()} / {v4082}"
                                    let v4087 : char list = []
                                    let v4088 : (char list -> (char [])) = List.toArray
                                    let v4089 : (char []) = v4088 v4087
                                    let v4092 : string = v4084.TrimStart v4089 
                                    let v4110 : char list = []
                                    let v4111 : char list = '/' :: v4110 
                                    let v4114 : char list = ' ' :: v4111 
                                    let v4117 : (char list -> (char [])) = List.toArray
                                    let v4118 : (char []) = v4117 v4114
                                    let v4121 : string = v4092.TrimEnd v4118 
                                    let v4139 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v4140 : string = @"println!(""{}"", $0)"
                                    Fable.Core.RustInterop.emitRustExpr v4121 v4140 
                                    let _v4139 = () 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v4141 : string = @"println!(""{}"", $0)"
                                    Fable.Core.RustInterop.emitRustExpr v4121 v4141 
                                    let _v4139 = () 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v4142 : string = $"near_sdk::log!(\"{{}}\", $0)"
                                    Fable.Core.RustInterop.emitRustExpr v4121 v4142 
                                    let _v4139 = () 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    System.Console.WriteLine v4121 
                                    let _v4139 = () 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    System.Console.WriteLine v4121 
                                    let _v4139 = () 
                                    #endif
#else
                                    System.Console.WriteLine v4121 
                                    let _v4139 = () 
                                    #endif
                                    _v4139 
                                    let v4143 : (string -> unit) = v3462.l0
                                    v4143 v4121
                                let v4144 : bool = v3447 <> 0 
                                if v4144 then
                                    let v4147 : string = $"repl_result: {v3436}

jupyter_result: {v3448}"
                                    struct (v3447, v4147)
                                else
                                    let v4148 : string = "'"
                                    let v4149 : string = "''"
                                    let v4150 : string = v3420.Replace (v4148, v4149)
                                    let v4151 : System.Threading.CancellationToken option = None
                                    let v4152 : (struct (string * string) []) = [||]
                                    let v4153 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                    let v4154 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                    let v4155 : string option = None
                                    let v4156 : string = $"pwsh -c \"$counter = 1; $path = '{v4150}.html'; (Get-Content $path -Raw) -replace '(id=\\\"cell-id=)[a-fA-F0-9]{{8}}', {{ $_.Groups[1].Value + $counter++ }} | Set-Content $path\""
                                    let v4157 : bool = true
                                    let struct (v4158 : int32, v4159 : string) = method40(v4156, v4151, v4152, v4153, v4154, v4157, v4155)
                                    let v4160 : bool = State.trace_state.IsNone
                                    if v4160 then
                                        let v4161 : US0 = US0_0
                                        let struct (v4162 : Mut0, v4163 : Mut1, v4164 : Mut2, v4165 : Mut3, v4166 : int64 option) = method1(v4161)
                                        let v4167 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v4162, v4163, v4164, v4165, v4166) 
                                        State.trace_state <- v4167 
                                        ()
                                    let struct (v4172 : Mut0, v4173 : Mut1, v4174 : Mut2, v4175 : Mut3, v4176 : int64 option) = State.trace_state.Value
                                    let v4187 : bool = State.trace_state.IsNone
                                    if v4187 then
                                        let v4188 : US0 = US0_0
                                        let struct (v4189 : Mut0, v4190 : Mut1, v4191 : Mut2, v4192 : Mut3, v4193 : int64 option) = method1(v4188)
                                        let v4194 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v4189, v4190, v4191, v4192, v4193) 
                                        State.trace_state <- v4194 
                                        ()
                                    let struct (v4199 : Mut0, v4200 : Mut1, v4201 : Mut2, v4202 : Mut3, v4203 : int64 option) = State.trace_state.Value
                                    let v4214 : US0 = v4202.l0
                                    let v4215 : bool = v4201.l0
                                    let v4216 : bool = v4215 = false
                                    let v4219 : bool =
                                        if v4216 then
                                            false
                                        else
                                            let v4217 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v4214
                                            let v4218 : bool = 1 >= v4217
                                            v4218
                                    if v4219 then
                                        let v4220 : int64 = v4172.l0
                                        let v4221 : int64 = v4220 + 1L
                                        v4172.l0 <- v4221
                                        let v4222 : bool = State.trace_state.IsNone
                                        if v4222 then
                                            let v4223 : US0 = US0_0
                                            let struct (v4224 : Mut0, v4225 : Mut1, v4226 : Mut2, v4227 : Mut3, v4228 : int64 option) = method1(v4223)
                                            let v4229 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v4224, v4225, v4226, v4227, v4228) 
                                            State.trace_state <- v4229 
                                            ()
                                        let struct (v4234 : Mut0, v4235 : Mut1, v4236 : Mut2, v4237 : Mut3, v4238 : int64 option) = State.trace_state.Value
                                        let v4249 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v4250 : US3 option = None
                                        let _v4250 = ref v4250 
                                        match v4238 with
                                        | Some x -> (
                                        (fun () ->
                                        (fun () ->
                                        let v4251 : int64 = x
                                        let v4252 : US3 = US3_0(v4251)
                                        v4252 
                                        )
                                        |> fun x -> x () |> Some
                                        ) () ) | None -> None
                                        |> fun x -> _v4250.Value <- x
                                        let v4253 : US3 option = _v4250.Value 
                                        let v4264 : US3 = US3_1
                                        let v4265 : US3 = v4253 |> Option.defaultValue v4264 
                                        let v4305 : System.DateTime =
                                            match v4265 with
                                            | US3_1 -> (* None *)
                                                let v4301 : System.DateTime = System.DateTime.Now
                                                v4301
                                            | US3_0(v4269) -> (* Some *)
                                                let v4270 : System.DateTime = System.DateTime.Now
                                                let v4273 : (System.DateTime -> int64) = _.Ticks
                                                let v4274 : int64 = v4273 v4270
                                                let v4277 : int64 = v4274 - v4269
                                                let v4278 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                let v4279 : System.TimeSpan = v4278 v4277
                                                let v4282 : (System.TimeSpan -> int32) = _.Hours
                                                let v4283 : int32 = v4282 v4279
                                                let v4286 : (System.TimeSpan -> int32) = _.Minutes
                                                let v4287 : int32 = v4286 v4279
                                                let v4290 : (System.TimeSpan -> int32) = _.Seconds
                                                let v4291 : int32 = v4290 v4279
                                                let v4294 : (System.TimeSpan -> int32) = _.Milliseconds
                                                let v4295 : int32 = v4294 v4279
                                                let v4298 : System.DateTime = System.DateTime (1, 1, 1, v4283, v4287, v4291, v4295)
                                                v4298
                                        let v4306 : string = method6()
                                        let v4309 : (string -> string) = v4305.ToString
                                        let v4310 : string = v4309 v4306
                                        let _v4249 = v4310 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v4313 : US3 option = None
                                        let _v4313 = ref v4313 
                                        match v4238 with
                                        | Some x -> (
                                        (fun () ->
                                        (fun () ->
                                        let v4314 : int64 = x
                                        let v4315 : US3 = US3_0(v4314)
                                        v4315 
                                        )
                                        |> fun x -> x () |> Some
                                        ) () ) | None -> None
                                        |> fun x -> _v4313.Value <- x
                                        let v4316 : US3 option = _v4313.Value 
                                        let v4327 : US3 = US3_1
                                        let v4328 : US3 = v4316 |> Option.defaultValue v4327 
                                        let v4368 : System.DateTime =
                                            match v4328 with
                                            | US3_1 -> (* None *)
                                                let v4364 : System.DateTime = System.DateTime.Now
                                                v4364
                                            | US3_0(v4332) -> (* Some *)
                                                let v4333 : System.DateTime = System.DateTime.Now
                                                let v4336 : (System.DateTime -> int64) = _.Ticks
                                                let v4337 : int64 = v4336 v4333
                                                let v4340 : int64 = v4337 - v4332
                                                let v4341 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                let v4342 : System.TimeSpan = v4341 v4340
                                                let v4345 : (System.TimeSpan -> int32) = _.Hours
                                                let v4346 : int32 = v4345 v4342
                                                let v4349 : (System.TimeSpan -> int32) = _.Minutes
                                                let v4350 : int32 = v4349 v4342
                                                let v4353 : (System.TimeSpan -> int32) = _.Seconds
                                                let v4354 : int32 = v4353 v4342
                                                let v4357 : (System.TimeSpan -> int32) = _.Milliseconds
                                                let v4358 : int32 = v4357 v4342
                                                let v4361 : System.DateTime = System.DateTime (1, 1, 1, v4346, v4350, v4354, v4358)
                                                v4361
                                        let v4369 : string = method6()
                                        let v4372 : (string -> string) = v4368.ToString
                                        let v4373 : string = v4372 v4369
                                        let _v4249 = v4373 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v4376 : string = $"near_sdk::env::block_timestamp()"
                                        let v4377 : uint64 = Fable.Core.RustInterop.emitRustExpr () v4376 
                                        let v4378 : US3 option = None
                                        let _v4378 = ref v4378 
                                        match v4238 with
                                        | Some x -> (
                                        (fun () ->
                                        (fun () ->
                                        let v4379 : int64 = x
                                        let v4380 : US3 = US3_0(v4379)
                                        v4380 
                                        )
                                        |> fun x -> x () |> Some
                                        ) () ) | None -> None
                                        |> fun x -> _v4378.Value <- x
                                        let v4381 : US3 option = _v4378.Value 
                                        let v4392 : US3 = US3_1
                                        let v4393 : US3 = v4381 |> Option.defaultValue v4392 
                                        let v4402 : uint64 =
                                            match v4393 with
                                            | US3_1 -> (* None *)
                                                v4377
                                            | US3_0(v4397) -> (* Some *)
                                                let v4398 : (int64 -> uint64) = uint64
                                                let v4399 : uint64 = v4398 v4397
                                                let v4400 : uint64 = v4377 - v4399
                                                v4400
                                        let v4403 : uint64 = v4402 / 1000000000UL
                                        let v4404 : uint64 = v4403 % 60UL
                                        let v4405 : uint64 = v4403 / 60UL
                                        let v4406 : uint64 = v4405 % 60UL
                                        let v4407 : uint64 = v4403 / 3600UL
                                        let v4408 : uint64 = v4407 % 24UL
                                        let v4409 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
                                        let v4410 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v4408, v4406, v4404) v4409 
                                        let v4411 : string = "fable_library_rust::String_::fromString($0)"
                                        let v4412 : string = Fable.Core.RustInterop.emitRustExpr v4410 v4411 
                                        let _v4249 = v4412 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v4413 : US3 option = None
                                        let _v4413 = ref v4413 
                                        match v4238 with
                                        | Some x -> (
                                        (fun () ->
                                        (fun () ->
                                        let v4414 : int64 = x
                                        let v4415 : US3 = US3_0(v4414)
                                        v4415 
                                        )
                                        |> fun x -> x () |> Some
                                        ) () ) | None -> None
                                        |> fun x -> _v4413.Value <- x
                                        let v4416 : US3 option = _v4413.Value 
                                        let v4427 : US3 = US3_1
                                        let v4428 : US3 = v4416 |> Option.defaultValue v4427 
                                        let v4468 : System.DateTime =
                                            match v4428 with
                                            | US3_1 -> (* None *)
                                                let v4464 : System.DateTime = System.DateTime.Now
                                                v4464
                                            | US3_0(v4432) -> (* Some *)
                                                let v4433 : System.DateTime = System.DateTime.Now
                                                let v4436 : (System.DateTime -> int64) = _.Ticks
                                                let v4437 : int64 = v4436 v4433
                                                let v4440 : int64 = v4437 - v4432
                                                let v4441 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                let v4442 : System.TimeSpan = v4441 v4440
                                                let v4445 : (System.TimeSpan -> int32) = _.Hours
                                                let v4446 : int32 = v4445 v4442
                                                let v4449 : (System.TimeSpan -> int32) = _.Minutes
                                                let v4450 : int32 = v4449 v4442
                                                let v4453 : (System.TimeSpan -> int32) = _.Seconds
                                                let v4454 : int32 = v4453 v4442
                                                let v4457 : (System.TimeSpan -> int32) = _.Milliseconds
                                                let v4458 : int32 = v4457 v4442
                                                let v4461 : System.DateTime = System.DateTime (1, 1, 1, v4446, v4450, v4454, v4458)
                                                v4461
                                        let v4469 : string = method7()
                                        let v4472 : (string -> string) = v4468.ToString
                                        let v4473 : string = v4472 v4469
                                        let _v4249 = v4473 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v4476 : US3 option = None
                                        let _v4476 = ref v4476 
                                        match v4238 with
                                        | Some x -> (
                                        (fun () ->
                                        (fun () ->
                                        let v4477 : int64 = x
                                        let v4478 : US3 = US3_0(v4477)
                                        v4478 
                                        )
                                        |> fun x -> x () |> Some
                                        ) () ) | None -> None
                                        |> fun x -> _v4476.Value <- x
                                        let v4479 : US3 option = _v4476.Value 
                                        let v4490 : US3 = US3_1
                                        let v4491 : US3 = v4479 |> Option.defaultValue v4490 
                                        let v4531 : System.DateTime =
                                            match v4491 with
                                            | US3_1 -> (* None *)
                                                let v4527 : System.DateTime = System.DateTime.Now
                                                v4527
                                            | US3_0(v4495) -> (* Some *)
                                                let v4496 : System.DateTime = System.DateTime.Now
                                                let v4499 : (System.DateTime -> int64) = _.Ticks
                                                let v4500 : int64 = v4499 v4496
                                                let v4503 : int64 = v4500 - v4495
                                                let v4504 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                let v4505 : System.TimeSpan = v4504 v4503
                                                let v4508 : (System.TimeSpan -> int32) = _.Hours
                                                let v4509 : int32 = v4508 v4505
                                                let v4512 : (System.TimeSpan -> int32) = _.Minutes
                                                let v4513 : int32 = v4512 v4505
                                                let v4516 : (System.TimeSpan -> int32) = _.Seconds
                                                let v4517 : int32 = v4516 v4505
                                                let v4520 : (System.TimeSpan -> int32) = _.Milliseconds
                                                let v4521 : int32 = v4520 v4505
                                                let v4524 : System.DateTime = System.DateTime (1, 1, 1, v4509, v4513, v4517, v4521)
                                                v4524
                                        let v4532 : string = method7()
                                        let v4535 : (string -> string) = v4531.ToString
                                        let v4536 : string = v4535 v4532
                                        let _v4249 = v4536 
                                        #endif
#else
                                        let v4539 : US3 option = None
                                        let _v4539 = ref v4539 
                                        match v4238 with
                                        | Some x -> (
                                        (fun () ->
                                        (fun () ->
                                        let v4540 : int64 = x
                                        let v4541 : US3 = US3_0(v4540)
                                        v4541 
                                        )
                                        |> fun x -> x () |> Some
                                        ) () ) | None -> None
                                        |> fun x -> _v4539.Value <- x
                                        let v4542 : US3 option = _v4539.Value 
                                        let v4553 : US3 = US3_1
                                        let v4554 : US3 = v4542 |> Option.defaultValue v4553 
                                        let v4594 : System.DateTime =
                                            match v4554 with
                                            | US3_1 -> (* None *)
                                                let v4590 : System.DateTime = System.DateTime.Now
                                                v4590
                                            | US3_0(v4558) -> (* Some *)
                                                let v4559 : System.DateTime = System.DateTime.Now
                                                let v4562 : (System.DateTime -> int64) = _.Ticks
                                                let v4563 : int64 = v4562 v4559
                                                let v4566 : int64 = v4563 - v4558
                                                let v4567 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                let v4568 : System.TimeSpan = v4567 v4566
                                                let v4571 : (System.TimeSpan -> int32) = _.Hours
                                                let v4572 : int32 = v4571 v4568
                                                let v4575 : (System.TimeSpan -> int32) = _.Minutes
                                                let v4576 : int32 = v4575 v4568
                                                let v4579 : (System.TimeSpan -> int32) = _.Seconds
                                                let v4580 : int32 = v4579 v4568
                                                let v4583 : (System.TimeSpan -> int32) = _.Milliseconds
                                                let v4584 : int32 = v4583 v4568
                                                let v4587 : System.DateTime = System.DateTime (1, 1, 1, v4572, v4576, v4580, v4584)
                                                v4587
                                        let v4595 : string = method7()
                                        let v4598 : (string -> string) = v4594.ToString
                                        let v4599 : string = v4598 v4595
                                        let _v4249 = v4599 
                                        #endif
                                        let v4602 : string = _v4249 
                                        let v4667 : string = "Debug"
                                        let v4668 : (unit -> string) = v4667.ToLower
                                        let v4669 : string = v4668 ()
                                        let v4672 : string = v4669.PadLeft (7, ' ')
                                        let v4686 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v4687 : string = "inline_colorization::color_bright_blue"
                                        let v4688 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v4687 
                                        let v4689 : string = "&*$0"
                                        let v4690 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4672 v4689 
                                        let v4691 : string = "inline_colorization::color_reset"
                                        let v4692 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v4691 
                                        let v4693 : string = "\"{v4688}{v4690}{v4692}\""
                                        let v4694 : string = @$"format!(" + v4693 + ")"
                                        let v4695 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v4694 
                                        let v4696 : string = "fable_library_rust::String_::fromString($0)"
                                        let v4697 : string = Fable.Core.RustInterop.emitRustExpr v4695 v4696 
                                        let _v4686 = v4697 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v4698 : string = "inline_colorization::color_bright_blue"
                                        let v4699 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v4698 
                                        let v4700 : string = "&*$0"
                                        let v4701 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4672 v4700 
                                        let v4702 : string = "inline_colorization::color_reset"
                                        let v4703 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v4702 
                                        let v4704 : string = "\"{v4699}{v4701}{v4703}\""
                                        let v4705 : string = @$"format!(" + v4704 + ")"
                                        let v4706 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v4705 
                                        let v4707 : string = "fable_library_rust::String_::fromString($0)"
                                        let v4708 : string = Fable.Core.RustInterop.emitRustExpr v4706 v4707 
                                        let _v4686 = v4708 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v4709 : string = "inline_colorization::color_bright_blue"
                                        let v4710 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v4709 
                                        let v4711 : string = "&*$0"
                                        let v4712 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4672 v4711 
                                        let v4713 : string = "inline_colorization::color_reset"
                                        let v4714 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v4713 
                                        let v4715 : string = "\"{v4710}{v4712}{v4714}\""
                                        let v4716 : string = @$"format!(" + v4715 + ")"
                                        let v4717 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v4716 
                                        let v4718 : string = "fable_library_rust::String_::fromString($0)"
                                        let v4719 : string = Fable.Core.RustInterop.emitRustExpr v4717 v4718 
                                        let _v4686 = v4719 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v4720 : string = "\u001b[94m"
                                        let v4721 : string = method8()
                                        let v4722 : string = v4720 + v4672 
                                        let v4723 : string = v4722 + v4721 
                                        let _v4686 = v4723 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v4724 : string = "\u001b[94m"
                                        let v4725 : string = method8()
                                        let v4726 : string = v4724 + v4672 
                                        let v4727 : string = v4726 + v4725 
                                        let _v4686 = v4727 
                                        #endif
#else
                                        let v4728 : string = "\u001b[94m"
                                        let v4729 : string = method8()
                                        let v4730 : string = v4728 + v4672 
                                        let v4731 : string = v4730 + v4729 
                                        let _v4686 = v4731 
                                        #endif
                                        let v4732 : string = _v4686 
                                        let v4738 : int64 = v4234.l0
                                        let v4739 : int32 = v4159.Length
                                        let v4740 : string = method9()
                                        let v4741 : Mut4 = {l0 = v4740} : Mut4
                                        let v4742 : string = "{ "
                                        let v4743 : string = $"{v4742}"
                                        let v4746 : string = v4741.l0
                                        let v4747 : string = v4746 + v4743 
                                        v4741.l0 <- v4747
                                        let v4748 : string = "exit_code"
                                        let v4749 : string = $"{v4748}"
                                        let v4752 : string = v4741.l0
                                        let v4753 : string = v4752 + v4749 
                                        v4741.l0 <- v4753
                                        let v4754 : string = " = "
                                        let v4755 : string = $"{v4754}"
                                        let v4758 : string = v4741.l0
                                        let v4759 : string = v4758 + v4755 
                                        v4741.l0 <- v4759
                                        let v4760 : string = $"{v4158}"
                                        let v4763 : string = v4741.l0
                                        let v4764 : string = v4763 + v4760 
                                        v4741.l0 <- v4764
                                        let v4765 : string = "; "
                                        let v4766 : string = $"{v4765}"
                                        let v4769 : string = v4741.l0
                                        let v4770 : string = v4769 + v4766 
                                        v4741.l0 <- v4770
                                        let v4771 : string = "pwsh_replace_html_result_length"
                                        let v4772 : string = $"{v4771}"
                                        let v4775 : string = v4741.l0
                                        let v4776 : string = v4775 + v4772 
                                        v4741.l0 <- v4776
                                        let v4777 : string = $"{v4754}"
                                        let v4780 : string = v4741.l0
                                        let v4781 : string = v4780 + v4777 
                                        v4741.l0 <- v4781
                                        let v4782 : string = $"{v4739}"
                                        let v4785 : string = v4741.l0
                                        let v4786 : string = v4785 + v4782 
                                        v4741.l0 <- v4786
                                        let v4787 : string = " }"
                                        let v4788 : string = $"{v4787}"
                                        let v4791 : string = v4741.l0
                                        let v4792 : string = v4791 + v4788 
                                        v4741.l0 <- v4792
                                        let v4793 : string = v4741.l0
                                        let v4794 : (unit -> string) = closure52()
                                        let v4795 : string = $"{v4602} {v4732} #{v4738} %s{v4794 ()} / {v4793}"
                                        let v4798 : char list = []
                                        let v4799 : (char list -> (char [])) = List.toArray
                                        let v4800 : (char []) = v4799 v4798
                                        let v4803 : string = v4795.TrimStart v4800 
                                        let v4821 : char list = []
                                        let v4822 : char list = '/' :: v4821 
                                        let v4825 : char list = ' ' :: v4822 
                                        let v4828 : (char list -> (char [])) = List.toArray
                                        let v4829 : (char []) = v4828 v4825
                                        let v4832 : string = v4803.TrimEnd v4829 
                                        let v4850 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v4851 : string = @"println!(""{}"", $0)"
                                        Fable.Core.RustInterop.emitRustExpr v4832 v4851 
                                        let _v4850 = () 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v4852 : string = @"println!(""{}"", $0)"
                                        Fable.Core.RustInterop.emitRustExpr v4832 v4852 
                                        let _v4850 = () 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v4853 : string = $"near_sdk::log!(\"{{}}\", $0)"
                                        Fable.Core.RustInterop.emitRustExpr v4832 v4853 
                                        let _v4850 = () 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        System.Console.WriteLine v4832 
                                        let _v4850 = () 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        System.Console.WriteLine v4832 
                                        let _v4850 = () 
                                        #endif
#else
                                        System.Console.WriteLine v4832 
                                        let _v4850 = () 
                                        #endif
                                        _v4850 
                                        let v4854 : (string -> unit) = v4173.l0
                                        v4854 v4832
                                    let v4855 : string = $"{v3420}.html"
                                    let v4856 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v4857 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v4858 : string = "std::fs::read(&*$0)"
                                    let v4859 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v4855 v4858 
                                    let v4860 : string = "$0.unwrap()"
                                    let v4861 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4859 v4860 
                                    let _v4857 = v4861 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v4862 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v4857 = v4862 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v4865 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v4857 = v4865 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v4868 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v4857 = v4868 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v4871 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v4857 = v4871 
                                    #endif
#else
                                    let v4874 : (uint8 []) = v4855 |> System.IO.File.ReadAllBytes
                                    let v4875 : string = "$0.to_vec()"
                                    let v4876 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4874 v4875 
                                    let _v4857 = v4876 
                                    #endif
                                    let v4877 : Vec<uint8> = _v4857 
                                    let v4882 : Vec<uint8> = method14(v4877)
                                    let v4883 : string = "std::string::String::from_utf8($0)"
                                    let v4884 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v4882 v4883 
                                    let v4885 : string = "$0.unwrap()"
                                    let v4886 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4884 v4885 
                                    let v4887 : string = "fable_library_rust::String_::fromString($0)"
                                    let v4888 : string = Fable.Core.RustInterop.emitRustExpr v4886 v4887 
                                    let _v4856 = v4888 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v4889 : string = null |> unbox<string>
                                    let _v4856 = v4889 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v4892 : string = null |> unbox<string>
                                    let _v4856 = v4892 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v4895 : string = null |> unbox<string>
                                    let _v4856 = v4895 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v4898 : string = null |> unbox<string>
                                    let _v4856 = v4898 
                                    #endif
#else
                                    let v4901 : string = v4855 |> System.IO.File.ReadAllText
                                    let _v4856 = v4901 
                                    #endif
                                    let v4902 : string = _v4856 
                                    let v4907 : string = "\r\n"
                                    let v4908 : string = "\n"
                                    let v4909 : string = v4902.Replace (v4907, v4908)
                                    let v4910 : string = $"{v3420}.html"
                                    let v4911 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v4912 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                    Fable.Core.RustInterop.emitRustExpr struct (v4910, v4909) v4912 
                                    let _v4911 = () 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let _v4911 = () 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let _v4911 = () 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let _v4911 = () 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let _v4911 = () 
                                    #endif
#else
                                    let v4913 : string = method39(v4909)
                                    System.IO.File.WriteAllText (v4910, v4913)
                                    let _v4911 = () 
                                    #endif
                                    _v4911 
                                    let v4914 : string = $"{v3420}.ipynb"
                                    let v4915 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v4916 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v4917 : string = "std::fs::read(&*$0)"
                                    let v4918 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v4914 v4917 
                                    let v4919 : string = "$0.unwrap()"
                                    let v4920 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4918 v4919 
                                    let _v4916 = v4920 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v4921 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v4916 = v4921 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v4924 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v4916 = v4924 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v4927 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v4916 = v4927 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v4930 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v4916 = v4930 
                                    #endif
#else
                                    let v4933 : (uint8 []) = v4914 |> System.IO.File.ReadAllBytes
                                    let v4934 : string = "$0.to_vec()"
                                    let v4935 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4933 v4934 
                                    let _v4916 = v4935 
                                    #endif
                                    let v4936 : Vec<uint8> = _v4916 
                                    let v4941 : Vec<uint8> = method14(v4936)
                                    let v4942 : string = "std::string::String::from_utf8($0)"
                                    let v4943 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v4941 v4942 
                                    let v4944 : string = "$0.unwrap()"
                                    let v4945 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4943 v4944 
                                    let v4946 : string = "fable_library_rust::String_::fromString($0)"
                                    let v4947 : string = Fable.Core.RustInterop.emitRustExpr v4945 v4946 
                                    let _v4915 = v4947 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v4948 : string = null |> unbox<string>
                                    let _v4915 = v4948 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v4951 : string = null |> unbox<string>
                                    let _v4915 = v4951 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v4954 : string = null |> unbox<string>
                                    let _v4915 = v4954 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v4957 : string = null |> unbox<string>
                                    let _v4915 = v4957 
                                    #endif
#else
                                    let v4960 : string = v4914 |> System.IO.File.ReadAllText
                                    let _v4915 = v4960 
                                    #endif
                                    let v4961 : string = _v4915 
                                    let v4966 : string = v4961.Replace (v4907, v4908)
                                    let v4967 : string = "\\r\\n"
                                    let v4968 : string = "\\n"
                                    let v4969 : string = v4966.Replace (v4967, v4968)
                                    let v4970 : string = $"{v3420}.ipynb"
                                    let v4971 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v4972 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                    Fable.Core.RustInterop.emitRustExpr struct (v4970, v4969) v4972 
                                    let _v4971 = () 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let _v4971 = () 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let _v4971 = () 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let _v4971 = () 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let _v4971 = () 
                                    #endif
#else
                                    let v4973 : string = method39(v4969)
                                    System.IO.File.WriteAllText (v4970, v4973)
                                    let _v4971 = () 
                                    #endif
                                    _v4971 
                                    let v4974 : string = $"repl_result: {v3436}

jupyter_result: {v3448}

pwsh_replace_html_result: {v4159}"
                                    struct (v4158, v4974)
                        let v4979 : bool = State.trace_state.IsNone
                        if v4979 then
                            let v4980 : US0 = US0_0
                            let struct (v4981 : Mut0, v4982 : Mut1, v4983 : Mut2, v4984 : Mut3, v4985 : int64 option) = method1(v4980)
                            let v4986 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v4981, v4982, v4983, v4984, v4985) 
                            State.trace_state <- v4986 
                            ()
                        let struct (v4991 : Mut0, v4992 : Mut1, v4993 : Mut2, v4994 : Mut3, v4995 : int64 option) = State.trace_state.Value
                        let v5006 : bool = State.trace_state.IsNone
                        if v5006 then
                            let v5007 : US0 = US0_0
                            let struct (v5008 : Mut0, v5009 : Mut1, v5010 : Mut2, v5011 : Mut3, v5012 : int64 option) = method1(v5007)
                            let v5013 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v5008, v5009, v5010, v5011, v5012) 
                            State.trace_state <- v5013 
                            ()
                        let struct (v5018 : Mut0, v5019 : Mut1, v5020 : Mut2, v5021 : Mut3, v5022 : int64 option) = State.trace_state.Value
                        let v5033 : US0 = v5021.l0
                        let v5034 : bool = v5020.l0
                        let v5035 : bool = v5034 = false
                        let v5038 : bool =
                            if v5035 then
                                false
                            else
                                let v5036 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v5033
                                let v5037 : bool = 1 >= v5036
                                v5037
                        if v5038 then
                            let v5039 : int64 = v4991.l0
                            let v5040 : int64 = v5039 + 1L
                            v4991.l0 <- v5040
                            let v5041 : bool = State.trace_state.IsNone
                            if v5041 then
                                let v5042 : US0 = US0_0
                                let struct (v5043 : Mut0, v5044 : Mut1, v5045 : Mut2, v5046 : Mut3, v5047 : int64 option) = method1(v5042)
                                let v5048 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v5043, v5044, v5045, v5046, v5047) 
                                State.trace_state <- v5048 
                                ()
                            let struct (v5053 : Mut0, v5054 : Mut1, v5055 : Mut2, v5056 : Mut3, v5057 : int64 option) = State.trace_state.Value
                            let v5068 : unit = ()
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v5069 : US3 option = None
                            let _v5069 = ref v5069 
                            match v5057 with
                            | Some x -> (
                            (fun () ->
                            (fun () ->
                            let v5070 : int64 = x
                            let v5071 : US3 = US3_0(v5070)
                            v5071 
                            )
                            |> fun x -> x () |> Some
                            ) () ) | None -> None
                            |> fun x -> _v5069.Value <- x
                            let v5072 : US3 option = _v5069.Value 
                            let v5083 : US3 = US3_1
                            let v5084 : US3 = v5072 |> Option.defaultValue v5083 
                            let v5124 : System.DateTime =
                                match v5084 with
                                | US3_1 -> (* None *)
                                    let v5120 : System.DateTime = System.DateTime.Now
                                    v5120
                                | US3_0(v5088) -> (* Some *)
                                    let v5089 : System.DateTime = System.DateTime.Now
                                    let v5092 : (System.DateTime -> int64) = _.Ticks
                                    let v5093 : int64 = v5092 v5089
                                    let v5096 : int64 = v5093 - v5088
                                    let v5097 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                    let v5098 : System.TimeSpan = v5097 v5096
                                    let v5101 : (System.TimeSpan -> int32) = _.Hours
                                    let v5102 : int32 = v5101 v5098
                                    let v5105 : (System.TimeSpan -> int32) = _.Minutes
                                    let v5106 : int32 = v5105 v5098
                                    let v5109 : (System.TimeSpan -> int32) = _.Seconds
                                    let v5110 : int32 = v5109 v5098
                                    let v5113 : (System.TimeSpan -> int32) = _.Milliseconds
                                    let v5114 : int32 = v5113 v5098
                                    let v5117 : System.DateTime = System.DateTime (1, 1, 1, v5102, v5106, v5110, v5114)
                                    v5117
                            let v5125 : string = method6()
                            let v5128 : (string -> string) = v5124.ToString
                            let v5129 : string = v5128 v5125
                            let _v5068 = v5129 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v5132 : US3 option = None
                            let _v5132 = ref v5132 
                            match v5057 with
                            | Some x -> (
                            (fun () ->
                            (fun () ->
                            let v5133 : int64 = x
                            let v5134 : US3 = US3_0(v5133)
                            v5134 
                            )
                            |> fun x -> x () |> Some
                            ) () ) | None -> None
                            |> fun x -> _v5132.Value <- x
                            let v5135 : US3 option = _v5132.Value 
                            let v5146 : US3 = US3_1
                            let v5147 : US3 = v5135 |> Option.defaultValue v5146 
                            let v5187 : System.DateTime =
                                match v5147 with
                                | US3_1 -> (* None *)
                                    let v5183 : System.DateTime = System.DateTime.Now
                                    v5183
                                | US3_0(v5151) -> (* Some *)
                                    let v5152 : System.DateTime = System.DateTime.Now
                                    let v5155 : (System.DateTime -> int64) = _.Ticks
                                    let v5156 : int64 = v5155 v5152
                                    let v5159 : int64 = v5156 - v5151
                                    let v5160 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                    let v5161 : System.TimeSpan = v5160 v5159
                                    let v5164 : (System.TimeSpan -> int32) = _.Hours
                                    let v5165 : int32 = v5164 v5161
                                    let v5168 : (System.TimeSpan -> int32) = _.Minutes
                                    let v5169 : int32 = v5168 v5161
                                    let v5172 : (System.TimeSpan -> int32) = _.Seconds
                                    let v5173 : int32 = v5172 v5161
                                    let v5176 : (System.TimeSpan -> int32) = _.Milliseconds
                                    let v5177 : int32 = v5176 v5161
                                    let v5180 : System.DateTime = System.DateTime (1, 1, 1, v5165, v5169, v5173, v5177)
                                    v5180
                            let v5188 : string = method6()
                            let v5191 : (string -> string) = v5187.ToString
                            let v5192 : string = v5191 v5188
                            let _v5068 = v5192 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v5195 : string = $"near_sdk::env::block_timestamp()"
                            let v5196 : uint64 = Fable.Core.RustInterop.emitRustExpr () v5195 
                            let v5197 : US3 option = None
                            let _v5197 = ref v5197 
                            match v5057 with
                            | Some x -> (
                            (fun () ->
                            (fun () ->
                            let v5198 : int64 = x
                            let v5199 : US3 = US3_0(v5198)
                            v5199 
                            )
                            |> fun x -> x () |> Some
                            ) () ) | None -> None
                            |> fun x -> _v5197.Value <- x
                            let v5200 : US3 option = _v5197.Value 
                            let v5211 : US3 = US3_1
                            let v5212 : US3 = v5200 |> Option.defaultValue v5211 
                            let v5221 : uint64 =
                                match v5212 with
                                | US3_1 -> (* None *)
                                    v5196
                                | US3_0(v5216) -> (* Some *)
                                    let v5217 : (int64 -> uint64) = uint64
                                    let v5218 : uint64 = v5217 v5216
                                    let v5219 : uint64 = v5196 - v5218
                                    v5219
                            let v5222 : uint64 = v5221 / 1000000000UL
                            let v5223 : uint64 = v5222 % 60UL
                            let v5224 : uint64 = v5222 / 60UL
                            let v5225 : uint64 = v5224 % 60UL
                            let v5226 : uint64 = v5222 / 3600UL
                            let v5227 : uint64 = v5226 % 24UL
                            let v5228 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
                            let v5229 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v5227, v5225, v5223) v5228 
                            let v5230 : string = "fable_library_rust::String_::fromString($0)"
                            let v5231 : string = Fable.Core.RustInterop.emitRustExpr v5229 v5230 
                            let _v5068 = v5231 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v5232 : US3 option = None
                            let _v5232 = ref v5232 
                            match v5057 with
                            | Some x -> (
                            (fun () ->
                            (fun () ->
                            let v5233 : int64 = x
                            let v5234 : US3 = US3_0(v5233)
                            v5234 
                            )
                            |> fun x -> x () |> Some
                            ) () ) | None -> None
                            |> fun x -> _v5232.Value <- x
                            let v5235 : US3 option = _v5232.Value 
                            let v5246 : US3 = US3_1
                            let v5247 : US3 = v5235 |> Option.defaultValue v5246 
                            let v5287 : System.DateTime =
                                match v5247 with
                                | US3_1 -> (* None *)
                                    let v5283 : System.DateTime = System.DateTime.Now
                                    v5283
                                | US3_0(v5251) -> (* Some *)
                                    let v5252 : System.DateTime = System.DateTime.Now
                                    let v5255 : (System.DateTime -> int64) = _.Ticks
                                    let v5256 : int64 = v5255 v5252
                                    let v5259 : int64 = v5256 - v5251
                                    let v5260 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                    let v5261 : System.TimeSpan = v5260 v5259
                                    let v5264 : (System.TimeSpan -> int32) = _.Hours
                                    let v5265 : int32 = v5264 v5261
                                    let v5268 : (System.TimeSpan -> int32) = _.Minutes
                                    let v5269 : int32 = v5268 v5261
                                    let v5272 : (System.TimeSpan -> int32) = _.Seconds
                                    let v5273 : int32 = v5272 v5261
                                    let v5276 : (System.TimeSpan -> int32) = _.Milliseconds
                                    let v5277 : int32 = v5276 v5261
                                    let v5280 : System.DateTime = System.DateTime (1, 1, 1, v5265, v5269, v5273, v5277)
                                    v5280
                            let v5288 : string = method7()
                            let v5291 : (string -> string) = v5287.ToString
                            let v5292 : string = v5291 v5288
                            let _v5068 = v5292 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v5295 : US3 option = None
                            let _v5295 = ref v5295 
                            match v5057 with
                            | Some x -> (
                            (fun () ->
                            (fun () ->
                            let v5296 : int64 = x
                            let v5297 : US3 = US3_0(v5296)
                            v5297 
                            )
                            |> fun x -> x () |> Some
                            ) () ) | None -> None
                            |> fun x -> _v5295.Value <- x
                            let v5298 : US3 option = _v5295.Value 
                            let v5309 : US3 = US3_1
                            let v5310 : US3 = v5298 |> Option.defaultValue v5309 
                            let v5350 : System.DateTime =
                                match v5310 with
                                | US3_1 -> (* None *)
                                    let v5346 : System.DateTime = System.DateTime.Now
                                    v5346
                                | US3_0(v5314) -> (* Some *)
                                    let v5315 : System.DateTime = System.DateTime.Now
                                    let v5318 : (System.DateTime -> int64) = _.Ticks
                                    let v5319 : int64 = v5318 v5315
                                    let v5322 : int64 = v5319 - v5314
                                    let v5323 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                    let v5324 : System.TimeSpan = v5323 v5322
                                    let v5327 : (System.TimeSpan -> int32) = _.Hours
                                    let v5328 : int32 = v5327 v5324
                                    let v5331 : (System.TimeSpan -> int32) = _.Minutes
                                    let v5332 : int32 = v5331 v5324
                                    let v5335 : (System.TimeSpan -> int32) = _.Seconds
                                    let v5336 : int32 = v5335 v5324
                                    let v5339 : (System.TimeSpan -> int32) = _.Milliseconds
                                    let v5340 : int32 = v5339 v5324
                                    let v5343 : System.DateTime = System.DateTime (1, 1, 1, v5328, v5332, v5336, v5340)
                                    v5343
                            let v5351 : string = method7()
                            let v5354 : (string -> string) = v5350.ToString
                            let v5355 : string = v5354 v5351
                            let _v5068 = v5355 
                            #endif
#else
                            let v5358 : US3 option = None
                            let _v5358 = ref v5358 
                            match v5057 with
                            | Some x -> (
                            (fun () ->
                            (fun () ->
                            let v5359 : int64 = x
                            let v5360 : US3 = US3_0(v5359)
                            v5360 
                            )
                            |> fun x -> x () |> Some
                            ) () ) | None -> None
                            |> fun x -> _v5358.Value <- x
                            let v5361 : US3 option = _v5358.Value 
                            let v5372 : US3 = US3_1
                            let v5373 : US3 = v5361 |> Option.defaultValue v5372 
                            let v5413 : System.DateTime =
                                match v5373 with
                                | US3_1 -> (* None *)
                                    let v5409 : System.DateTime = System.DateTime.Now
                                    v5409
                                | US3_0(v5377) -> (* Some *)
                                    let v5378 : System.DateTime = System.DateTime.Now
                                    let v5381 : (System.DateTime -> int64) = _.Ticks
                                    let v5382 : int64 = v5381 v5378
                                    let v5385 : int64 = v5382 - v5377
                                    let v5386 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                    let v5387 : System.TimeSpan = v5386 v5385
                                    let v5390 : (System.TimeSpan -> int32) = _.Hours
                                    let v5391 : int32 = v5390 v5387
                                    let v5394 : (System.TimeSpan -> int32) = _.Minutes
                                    let v5395 : int32 = v5394 v5387
                                    let v5398 : (System.TimeSpan -> int32) = _.Seconds
                                    let v5399 : int32 = v5398 v5387
                                    let v5402 : (System.TimeSpan -> int32) = _.Milliseconds
                                    let v5403 : int32 = v5402 v5387
                                    let v5406 : System.DateTime = System.DateTime (1, 1, 1, v5391, v5395, v5399, v5403)
                                    v5406
                            let v5414 : string = method7()
                            let v5417 : (string -> string) = v5413.ToString
                            let v5418 : string = v5417 v5414
                            let _v5068 = v5418 
                            #endif
                            let v5421 : string = _v5068 
                            let v5486 : string = "Debug"
                            let v5487 : (unit -> string) = v5486.ToLower
                            let v5488 : string = v5487 ()
                            let v5491 : string = v5488.PadLeft (7, ' ')
                            let v5505 : unit = ()
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v5506 : string = "inline_colorization::color_bright_blue"
                            let v5507 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v5506 
                            let v5508 : string = "&*$0"
                            let v5509 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5491 v5508 
                            let v5510 : string = "inline_colorization::color_reset"
                            let v5511 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v5510 
                            let v5512 : string = "\"{v5507}{v5509}{v5511}\""
                            let v5513 : string = @$"format!(" + v5512 + ")"
                            let v5514 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v5513 
                            let v5515 : string = "fable_library_rust::String_::fromString($0)"
                            let v5516 : string = Fable.Core.RustInterop.emitRustExpr v5514 v5515 
                            let _v5505 = v5516 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v5517 : string = "inline_colorization::color_bright_blue"
                            let v5518 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v5517 
                            let v5519 : string = "&*$0"
                            let v5520 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5491 v5519 
                            let v5521 : string = "inline_colorization::color_reset"
                            let v5522 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v5521 
                            let v5523 : string = "\"{v5518}{v5520}{v5522}\""
                            let v5524 : string = @$"format!(" + v5523 + ")"
                            let v5525 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v5524 
                            let v5526 : string = "fable_library_rust::String_::fromString($0)"
                            let v5527 : string = Fable.Core.RustInterop.emitRustExpr v5525 v5526 
                            let _v5505 = v5527 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v5528 : string = "inline_colorization::color_bright_blue"
                            let v5529 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v5528 
                            let v5530 : string = "&*$0"
                            let v5531 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5491 v5530 
                            let v5532 : string = "inline_colorization::color_reset"
                            let v5533 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v5532 
                            let v5534 : string = "\"{v5529}{v5531}{v5533}\""
                            let v5535 : string = @$"format!(" + v5534 + ")"
                            let v5536 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v5535 
                            let v5537 : string = "fable_library_rust::String_::fromString($0)"
                            let v5538 : string = Fable.Core.RustInterop.emitRustExpr v5536 v5537 
                            let _v5505 = v5538 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v5539 : string = "\u001b[94m"
                            let v5540 : string = method8()
                            let v5541 : string = v5539 + v5491 
                            let v5542 : string = v5541 + v5540 
                            let _v5505 = v5542 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v5543 : string = "\u001b[94m"
                            let v5544 : string = method8()
                            let v5545 : string = v5543 + v5491 
                            let v5546 : string = v5545 + v5544 
                            let _v5505 = v5546 
                            #endif
#else
                            let v5547 : string = "\u001b[94m"
                            let v5548 : string = method8()
                            let v5549 : string = v5547 + v5491 
                            let v5550 : string = v5549 + v5548 
                            let _v5505 = v5550 
                            #endif
                            let v5551 : string = _v5505 
                            let v5557 : int64 = v5053.l0
                            let v5558 : int32 = v4978.Length
                            let v5559 : string = method9()
                            let v5560 : Mut4 = {l0 = v5559} : Mut4
                            let v5561 : string = "{ "
                            let v5562 : string = $"{v5561}"
                            let v5565 : string = v5560.l0
                            let v5566 : string = v5565 + v5562 
                            v5560.l0 <- v5566
                            let v5567 : string = "exit_code"
                            let v5568 : string = $"{v5567}"
                            let v5571 : string = v5560.l0
                            let v5572 : string = v5571 + v5568 
                            v5560.l0 <- v5572
                            let v5573 : string = " = "
                            let v5574 : string = $"{v5573}"
                            let v5577 : string = v5560.l0
                            let v5578 : string = v5577 + v5574 
                            v5560.l0 <- v5578
                            let v5579 : string = $"{v4977}"
                            let v5582 : string = v5560.l0
                            let v5583 : string = v5582 + v5579 
                            v5560.l0 <- v5583
                            let v5584 : string = "; "
                            let v5585 : string = $"{v5584}"
                            let v5588 : string = v5560.l0
                            let v5589 : string = v5588 + v5585 
                            v5560.l0 <- v5589
                            let v5590 : string = "result_length"
                            let v5591 : string = $"{v5590}"
                            let v5594 : string = v5560.l0
                            let v5595 : string = v5594 + v5591 
                            v5560.l0 <- v5595
                            let v5596 : string = $"{v5573}"
                            let v5599 : string = v5560.l0
                            let v5600 : string = v5599 + v5596 
                            v5560.l0 <- v5600
                            let v5601 : string = $"{v5558}"
                            let v5604 : string = v5560.l0
                            let v5605 : string = v5604 + v5601 
                            v5560.l0 <- v5605
                            let v5606 : string = " }"
                            let v5607 : string = $"{v5606}"
                            let v5610 : string = v5560.l0
                            let v5611 : string = v5610 + v5607 
                            v5560.l0 <- v5611
                            let v5612 : string = v5560.l0
                            let v5613 : (unit -> string) = closure53()
                            let v5614 : string = $"{v5421} {v5551} #{v5557} %s{v5613 ()} / {v5612}"
                            let v5617 : char list = []
                            let v5618 : (char list -> (char [])) = List.toArray
                            let v5619 : (char []) = v5618 v5617
                            let v5622 : string = v5614.TrimStart v5619 
                            let v5640 : char list = []
                            let v5641 : char list = '/' :: v5640 
                            let v5644 : char list = ' ' :: v5641 
                            let v5647 : (char list -> (char [])) = List.toArray
                            let v5648 : (char []) = v5647 v5644
                            let v5651 : string = v5622.TrimEnd v5648 
                            let v5669 : unit = ()
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v5670 : string = @"println!(""{}"", $0)"
                            Fable.Core.RustInterop.emitRustExpr v5651 v5670 
                            let _v5669 = () 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v5671 : string = @"println!(""{}"", $0)"
                            Fable.Core.RustInterop.emitRustExpr v5651 v5671 
                            let _v5669 = () 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v5672 : string = $"near_sdk::log!(\"{{}}\", $0)"
                            Fable.Core.RustInterop.emitRustExpr v5651 v5672 
                            let _v5669 = () 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            System.Console.WriteLine v5651 
                            let _v5669 = () 
                            #endif
#if FABLE_COMPILER_PYTHON
                            System.Console.WriteLine v5651 
                            let _v5669 = () 
                            #endif
#else
                            System.Console.WriteLine v5651 
                            let _v5669 = () 
                            #endif
                            _v5669 
                            let v5673 : (string -> unit) = v4992.l0
                            v5673 v5651
                        let v5674 : bool = v4977 <> 0 
                        if v5674 then
                            let v5677 : string = $"spiral_builder.run / dib / exit_code: {v4977} / result: {v4978}"
                            failwith<unit> v5677
                        let v5678 : string = "stdio"
                        [|struct (v5678, v4978)|]
                    else
                        let v5680 : string = "fable_library_rust::String_::fromString($0)"
                        let v5681 : string = Fable.Core.RustInterop.emitRustExpr v27 v5680 
                        let v5682 : bool = v5681 = "rust"
                        let struct (v21898 : US1, v21899 : US1, v21900 : US1) =
                            if v5682 then
                                let v5683 : string = method79()
                                let v5684 : string = "&*$0"
                                let v5685 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5683 v5684 
                                let v5686 : string = "clap::ArgMatches::get_one(&$0, v5685).cloned()"
                                let v5687 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v28 v5686 
                                let v5688 : US5 option = None
                                let _v5688 = ref v5688 
                                match v5687 with
                                | Some x -> (
                                (fun () ->
                                (fun () ->
                                let v5689 : std_string_String = x
                                let v5690 : US5 = US5_0(v5689)
                                v5690 
                                )
                                |> fun x -> x () |> Some
                                ) () ) | None -> None
                                |> fun x -> _v5688.Value <- x
                                let v5691 : US5 option = _v5688.Value 
                                let v5702 : US5 = US5_1
                                let v5703 : US5 = v5691 |> Option.defaultValue v5702 
                                let v5710 : std_string_String =
                                    match v5703 with
                                    | US5_1 -> (* None *)
                                        failwith<std_string_String> "Option does not have a value."
                                    | US5_0(v5707) -> (* Some *)
                                        v5707
                                let v5711 : string = "fable_library_rust::String_::fromString($0)"
                                let v5712 : string = Fable.Core.RustInterop.emitRustExpr v5710 v5711 
                                let v5713 : string = method13()
                                let v5714 : string = "&*$0"
                                let v5715 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5713 v5714 
                                let v5716 : string = "clap::ArgMatches::get_many(&$0, v5715).map(|x| x.cloned().into_iter().collect())"
                                let v5717 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr v28 v5716 
                                let v5718 : US9 option = None
                                let _v5718 = ref v5718 
                                match v5717 with
                                | Some x -> (
                                (fun () ->
                                (fun () ->
                                let v5719 : Vec<std_string_String> = x
                                let v5720 : US9 = US9_0(v5719)
                                v5720 
                                )
                                |> fun x -> x () |> Some
                                ) () ) | None -> None
                                |> fun x -> _v5718.Value <- x
                                let v5721 : US9 option = _v5718.Value 
                                let v5732 : US9 = US9_1
                                let v5733 : US9 = v5721 |> Option.defaultValue v5732 
                                let v5737 : (std_string_String []) = [||]
                                let v5738 : string = "$0.to_vec()"
                                let v5739 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v5737 v5738 
                                let v5742 : Vec<std_string_String> =
                                    match v5733 with
                                    | US9_1 -> (* None *)
                                        v5739
                                    | US9_0(v5740) -> (* Some *)
                                        v5740
                                let v5743 : string = method92()
                                let v5744 : string = "&*$0"
                                let v5745 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5743 v5744 
                                let v5746 : string = "clap::ArgMatches::get_flag(&v28, v5745)"
                                let v5747 : bool = Fable.Core.RustInterop.emitRustExpr () v5746 
                                let v5748 : string = method93()
                                let v5749 : string = "&*$0"
                                let v5750 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5748 v5749 
                                let v5751 : string = "clap::ArgMatches::get_flag(&v28, v5750)"
                                let v5752 : bool = Fable.Core.RustInterop.emitRustExpr () v5751 
                                let v5759 : US33 =
                                    if v5747 then
                                        let v5753 : US34 = US34_0
                                        US33_0(v5753)
                                    else
                                        if v5752 then
                                            let v5755 : US34 = US34_1
                                            US33_0(v5755)
                                        else
                                            US33_1
                                let v5760 : bool =
                                    match v0 with
                                    | US0_0 -> (* Verbose *)
                                        true
                                    | _ ->
                                        false
                                let v5761 : unit = ()
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v5762 : unit = ()
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v5763 : string = "std::fs::read(&*$0)"
                                let v5764 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v5712 v5763 
                                let v5765 : string = "$0.unwrap()"
                                let v5766 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5764 v5765 
                                let _v5762 = v5766 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v5767 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                let _v5762 = v5767 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v5770 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                let _v5762 = v5770 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v5773 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                let _v5762 = v5773 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v5776 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                let _v5762 = v5776 
                                #endif
#else
                                let v5779 : (uint8 []) = v5712 |> System.IO.File.ReadAllBytes
                                let v5780 : string = "$0.to_vec()"
                                let v5781 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5779 v5780 
                                let _v5762 = v5781 
                                #endif
                                let v5782 : Vec<uint8> = _v5762 
                                let v5787 : Vec<uint8> = method14(v5782)
                                let v5788 : string = "std::string::String::from_utf8($0)"
                                let v5789 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v5787 v5788 
                                let v5790 : string = "$0.unwrap()"
                                let v5791 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5789 v5790 
                                let v5792 : string = "fable_library_rust::String_::fromString($0)"
                                let v5793 : string = Fable.Core.RustInterop.emitRustExpr v5791 v5792 
                                let _v5761 = v5793 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v5794 : string = null |> unbox<string>
                                let _v5761 = v5794 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v5797 : string = null |> unbox<string>
                                let _v5761 = v5797 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v5800 : string = null |> unbox<string>
                                let _v5761 = v5800 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v5803 : string = null |> unbox<string>
                                let _v5761 = v5803 
                                #endif
#else
                                let v5806 : string = v5712 |> System.IO.File.ReadAllText
                                let _v5761 = v5806 
                                #endif
                                let v5807 : string = _v5761 
                                let v5812 : string = method9()
                                let v5813 : Mut4 = {l0 = v5812} : Mut4
                                let v5814 : string = "{ "
                                let v5815 : string = $"{v5814}"
                                let v5818 : string = v5813.l0
                                let v5819 : string = v5818 + v5815 
                                v5813.l0 <- v5819
                                let v5820 : string = "extension"
                                let v5821 : string = $"{v5820}"
                                let v5824 : string = v5813.l0
                                let v5825 : string = v5824 + v5821 
                                v5813.l0 <- v5825
                                let v5826 : string = " = "
                                let v5827 : string = $"{v5826}"
                                let v5830 : string = v5813.l0
                                let v5831 : string = v5830 + v5827 
                                v5813.l0 <- v5831
                                let v5832 : string = "rs"
                                let v5833 : string = $"{v5832}"
                                let v5836 : string = v5813.l0
                                let v5837 : string = v5836 + v5833 
                                v5813.l0 <- v5837
                                let v5838 : string = "; "
                                let v5839 : string = $"{v5838}"
                                let v5842 : string = v5813.l0
                                let v5843 : string = v5842 + v5839 
                                v5813.l0 <- v5843
                                let v5844 : string = "code"
                                let v5845 : string = $"{v5844}"
                                let v5848 : string = v5813.l0
                                let v5849 : string = v5848 + v5845 
                                v5813.l0 <- v5849
                                let v5850 : string = $"{v5826}"
                                let v5853 : string = v5813.l0
                                let v5854 : string = v5853 + v5850 
                                v5813.l0 <- v5854
                                let v5855 : string = $"{v5807}"
                                let v5858 : string = v5813.l0
                                let v5859 : string = v5858 + v5855 
                                v5813.l0 <- v5859
                                let v5860 : string = $"{v5838}"
                                let v5863 : string = v5813.l0
                                let v5864 : string = v5863 + v5860 
                                v5813.l0 <- v5864
                                let v5865 : string = "runtime"
                                let v5866 : string = $"{v5865}"
                                let v5869 : string = v5813.l0
                                let v5870 : string = v5869 + v5866 
                                v5813.l0 <- v5870
                                let v5871 : string = $"{v5826}"
                                let v5874 : string = v5813.l0
                                let v5875 : string = v5874 + v5871 
                                v5813.l0 <- v5875
                                let v5876 : string = $"%A{v5759}"
                                let v5879 : string = $"{v5876}"
                                let v5882 : string = v5813.l0
                                let v5883 : string = v5882 + v5879 
                                v5813.l0 <- v5883
                                let v5884 : string = " }"
                                let v5885 : string = $"{v5884}"
                                let v5888 : string = v5813.l0
                                let v5889 : string = v5888 + v5885 
                                v5813.l0 <- v5889
                                let v5890 : string = v5813.l0
                                let v5891 : string = method94(v5890)
                                let v5892 : string = __SOURCE_DIRECTORY__
                                let v5893 : string = "polyglot"
                                let v5894 : string = ".devcontainer"
                                let v5895 : string = method15(v5893, v5894)
                                let v5896 : US12 = method18(v5895, v5892)
                                let v6571 : US1 =
                                    match v5896 with
                                    | US12_1(v5899) -> (* Error *)
                                        let v5900 : bool = State.trace_state.IsNone
                                        if v5900 then
                                            let v5901 : US0 = US0_0
                                            let struct (v5902 : Mut0, v5903 : Mut1, v5904 : Mut2, v5905 : Mut3, v5906 : int64 option) = method1(v5901)
                                            let v5907 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v5902, v5903, v5904, v5905, v5906) 
                                            State.trace_state <- v5907 
                                            ()
                                        let struct (v5912 : Mut0, v5913 : Mut1, v5914 : Mut2, v5915 : Mut3, v5916 : int64 option) = State.trace_state.Value
                                        let v5927 : bool = State.trace_state.IsNone
                                        if v5927 then
                                            let v5928 : US0 = US0_0
                                            let struct (v5929 : Mut0, v5930 : Mut1, v5931 : Mut2, v5932 : Mut3, v5933 : int64 option) = method1(v5928)
                                            let v5934 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v5929, v5930, v5931, v5932, v5933) 
                                            State.trace_state <- v5934 
                                            ()
                                        let struct (v5939 : Mut0, v5940 : Mut1, v5941 : Mut2, v5942 : Mut3, v5943 : int64 option) = State.trace_state.Value
                                        let v5954 : US0 = v5942.l0
                                        let v5955 : bool = v5941.l0
                                        let v5956 : bool = v5955 = false
                                        let v5959 : bool =
                                            if v5956 then
                                                false
                                            else
                                                let v5957 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v5954
                                                let v5958 : bool = 3 >= v5957
                                                v5958
                                        if v5959 then
                                            let v5960 : int64 = v5912.l0
                                            let v5961 : int64 = v5960 + 1L
                                            v5912.l0 <- v5961
                                            let v5962 : bool = State.trace_state.IsNone
                                            if v5962 then
                                                let v5963 : US0 = US0_0
                                                let struct (v5964 : Mut0, v5965 : Mut1, v5966 : Mut2, v5967 : Mut3, v5968 : int64 option) = method1(v5963)
                                                let v5969 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v5964, v5965, v5966, v5967, v5968) 
                                                State.trace_state <- v5969 
                                                ()
                                            let struct (v5974 : Mut0, v5975 : Mut1, v5976 : Mut2, v5977 : Mut3, v5978 : int64 option) = State.trace_state.Value
                                            let v5989 : unit = ()
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v5990 : US3 option = None
                                            let _v5990 = ref v5990 
                                            match v5978 with
                                            | Some x -> (
                                            (fun () ->
                                            (fun () ->
                                            let v5991 : int64 = x
                                            let v5992 : US3 = US3_0(v5991)
                                            v5992 
                                            )
                                            |> fun x -> x () |> Some
                                            ) () ) | None -> None
                                            |> fun x -> _v5990.Value <- x
                                            let v5993 : US3 option = _v5990.Value 
                                            let v6004 : US3 = US3_1
                                            let v6005 : US3 = v5993 |> Option.defaultValue v6004 
                                            let v6045 : System.DateTime =
                                                match v6005 with
                                                | US3_1 -> (* None *)
                                                    let v6041 : System.DateTime = System.DateTime.Now
                                                    v6041
                                                | US3_0(v6009) -> (* Some *)
                                                    let v6010 : System.DateTime = System.DateTime.Now
                                                    let v6013 : (System.DateTime -> int64) = _.Ticks
                                                    let v6014 : int64 = v6013 v6010
                                                    let v6017 : int64 = v6014 - v6009
                                                    let v6018 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                    let v6019 : System.TimeSpan = v6018 v6017
                                                    let v6022 : (System.TimeSpan -> int32) = _.Hours
                                                    let v6023 : int32 = v6022 v6019
                                                    let v6026 : (System.TimeSpan -> int32) = _.Minutes
                                                    let v6027 : int32 = v6026 v6019
                                                    let v6030 : (System.TimeSpan -> int32) = _.Seconds
                                                    let v6031 : int32 = v6030 v6019
                                                    let v6034 : (System.TimeSpan -> int32) = _.Milliseconds
                                                    let v6035 : int32 = v6034 v6019
                                                    let v6038 : System.DateTime = System.DateTime (1, 1, 1, v6023, v6027, v6031, v6035)
                                                    v6038
                                            let v6046 : string = method6()
                                            let v6049 : (string -> string) = v6045.ToString
                                            let v6050 : string = v6049 v6046
                                            let _v5989 = v6050 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v6053 : US3 option = None
                                            let _v6053 = ref v6053 
                                            match v5978 with
                                            | Some x -> (
                                            (fun () ->
                                            (fun () ->
                                            let v6054 : int64 = x
                                            let v6055 : US3 = US3_0(v6054)
                                            v6055 
                                            )
                                            |> fun x -> x () |> Some
                                            ) () ) | None -> None
                                            |> fun x -> _v6053.Value <- x
                                            let v6056 : US3 option = _v6053.Value 
                                            let v6067 : US3 = US3_1
                                            let v6068 : US3 = v6056 |> Option.defaultValue v6067 
                                            let v6108 : System.DateTime =
                                                match v6068 with
                                                | US3_1 -> (* None *)
                                                    let v6104 : System.DateTime = System.DateTime.Now
                                                    v6104
                                                | US3_0(v6072) -> (* Some *)
                                                    let v6073 : System.DateTime = System.DateTime.Now
                                                    let v6076 : (System.DateTime -> int64) = _.Ticks
                                                    let v6077 : int64 = v6076 v6073
                                                    let v6080 : int64 = v6077 - v6072
                                                    let v6081 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                    let v6082 : System.TimeSpan = v6081 v6080
                                                    let v6085 : (System.TimeSpan -> int32) = _.Hours
                                                    let v6086 : int32 = v6085 v6082
                                                    let v6089 : (System.TimeSpan -> int32) = _.Minutes
                                                    let v6090 : int32 = v6089 v6082
                                                    let v6093 : (System.TimeSpan -> int32) = _.Seconds
                                                    let v6094 : int32 = v6093 v6082
                                                    let v6097 : (System.TimeSpan -> int32) = _.Milliseconds
                                                    let v6098 : int32 = v6097 v6082
                                                    let v6101 : System.DateTime = System.DateTime (1, 1, 1, v6086, v6090, v6094, v6098)
                                                    v6101
                                            let v6109 : string = method6()
                                            let v6112 : (string -> string) = v6108.ToString
                                            let v6113 : string = v6112 v6109
                                            let _v5989 = v6113 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v6116 : string = $"near_sdk::env::block_timestamp()"
                                            let v6117 : uint64 = Fable.Core.RustInterop.emitRustExpr () v6116 
                                            let v6118 : US3 option = None
                                            let _v6118 = ref v6118 
                                            match v5978 with
                                            | Some x -> (
                                            (fun () ->
                                            (fun () ->
                                            let v6119 : int64 = x
                                            let v6120 : US3 = US3_0(v6119)
                                            v6120 
                                            )
                                            |> fun x -> x () |> Some
                                            ) () ) | None -> None
                                            |> fun x -> _v6118.Value <- x
                                            let v6121 : US3 option = _v6118.Value 
                                            let v6132 : US3 = US3_1
                                            let v6133 : US3 = v6121 |> Option.defaultValue v6132 
                                            let v6142 : uint64 =
                                                match v6133 with
                                                | US3_1 -> (* None *)
                                                    v6117
                                                | US3_0(v6137) -> (* Some *)
                                                    let v6138 : (int64 -> uint64) = uint64
                                                    let v6139 : uint64 = v6138 v6137
                                                    let v6140 : uint64 = v6117 - v6139
                                                    v6140
                                            let v6143 : uint64 = v6142 / 1000000000UL
                                            let v6144 : uint64 = v6143 % 60UL
                                            let v6145 : uint64 = v6143 / 60UL
                                            let v6146 : uint64 = v6145 % 60UL
                                            let v6147 : uint64 = v6143 / 3600UL
                                            let v6148 : uint64 = v6147 % 24UL
                                            let v6149 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
                                            let v6150 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v6148, v6146, v6144) v6149 
                                            let v6151 : string = "fable_library_rust::String_::fromString($0)"
                                            let v6152 : string = Fable.Core.RustInterop.emitRustExpr v6150 v6151 
                                            let _v5989 = v6152 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v6153 : US3 option = None
                                            let _v6153 = ref v6153 
                                            match v5978 with
                                            | Some x -> (
                                            (fun () ->
                                            (fun () ->
                                            let v6154 : int64 = x
                                            let v6155 : US3 = US3_0(v6154)
                                            v6155 
                                            )
                                            |> fun x -> x () |> Some
                                            ) () ) | None -> None
                                            |> fun x -> _v6153.Value <- x
                                            let v6156 : US3 option = _v6153.Value 
                                            let v6167 : US3 = US3_1
                                            let v6168 : US3 = v6156 |> Option.defaultValue v6167 
                                            let v6208 : System.DateTime =
                                                match v6168 with
                                                | US3_1 -> (* None *)
                                                    let v6204 : System.DateTime = System.DateTime.Now
                                                    v6204
                                                | US3_0(v6172) -> (* Some *)
                                                    let v6173 : System.DateTime = System.DateTime.Now
                                                    let v6176 : (System.DateTime -> int64) = _.Ticks
                                                    let v6177 : int64 = v6176 v6173
                                                    let v6180 : int64 = v6177 - v6172
                                                    let v6181 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                    let v6182 : System.TimeSpan = v6181 v6180
                                                    let v6185 : (System.TimeSpan -> int32) = _.Hours
                                                    let v6186 : int32 = v6185 v6182
                                                    let v6189 : (System.TimeSpan -> int32) = _.Minutes
                                                    let v6190 : int32 = v6189 v6182
                                                    let v6193 : (System.TimeSpan -> int32) = _.Seconds
                                                    let v6194 : int32 = v6193 v6182
                                                    let v6197 : (System.TimeSpan -> int32) = _.Milliseconds
                                                    let v6198 : int32 = v6197 v6182
                                                    let v6201 : System.DateTime = System.DateTime (1, 1, 1, v6186, v6190, v6194, v6198)
                                                    v6201
                                            let v6209 : string = method7()
                                            let v6212 : (string -> string) = v6208.ToString
                                            let v6213 : string = v6212 v6209
                                            let _v5989 = v6213 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v6216 : US3 option = None
                                            let _v6216 = ref v6216 
                                            match v5978 with
                                            | Some x -> (
                                            (fun () ->
                                            (fun () ->
                                            let v6217 : int64 = x
                                            let v6218 : US3 = US3_0(v6217)
                                            v6218 
                                            )
                                            |> fun x -> x () |> Some
                                            ) () ) | None -> None
                                            |> fun x -> _v6216.Value <- x
                                            let v6219 : US3 option = _v6216.Value 
                                            let v6230 : US3 = US3_1
                                            let v6231 : US3 = v6219 |> Option.defaultValue v6230 
                                            let v6271 : System.DateTime =
                                                match v6231 with
                                                | US3_1 -> (* None *)
                                                    let v6267 : System.DateTime = System.DateTime.Now
                                                    v6267
                                                | US3_0(v6235) -> (* Some *)
                                                    let v6236 : System.DateTime = System.DateTime.Now
                                                    let v6239 : (System.DateTime -> int64) = _.Ticks
                                                    let v6240 : int64 = v6239 v6236
                                                    let v6243 : int64 = v6240 - v6235
                                                    let v6244 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                    let v6245 : System.TimeSpan = v6244 v6243
                                                    let v6248 : (System.TimeSpan -> int32) = _.Hours
                                                    let v6249 : int32 = v6248 v6245
                                                    let v6252 : (System.TimeSpan -> int32) = _.Minutes
                                                    let v6253 : int32 = v6252 v6245
                                                    let v6256 : (System.TimeSpan -> int32) = _.Seconds
                                                    let v6257 : int32 = v6256 v6245
                                                    let v6260 : (System.TimeSpan -> int32) = _.Milliseconds
                                                    let v6261 : int32 = v6260 v6245
                                                    let v6264 : System.DateTime = System.DateTime (1, 1, 1, v6249, v6253, v6257, v6261)
                                                    v6264
                                            let v6272 : string = method7()
                                            let v6275 : (string -> string) = v6271.ToString
                                            let v6276 : string = v6275 v6272
                                            let _v5989 = v6276 
                                            #endif
#else
                                            let v6279 : US3 option = None
                                            let _v6279 = ref v6279 
                                            match v5978 with
                                            | Some x -> (
                                            (fun () ->
                                            (fun () ->
                                            let v6280 : int64 = x
                                            let v6281 : US3 = US3_0(v6280)
                                            v6281 
                                            )
                                            |> fun x -> x () |> Some
                                            ) () ) | None -> None
                                            |> fun x -> _v6279.Value <- x
                                            let v6282 : US3 option = _v6279.Value 
                                            let v6293 : US3 = US3_1
                                            let v6294 : US3 = v6282 |> Option.defaultValue v6293 
                                            let v6334 : System.DateTime =
                                                match v6294 with
                                                | US3_1 -> (* None *)
                                                    let v6330 : System.DateTime = System.DateTime.Now
                                                    v6330
                                                | US3_0(v6298) -> (* Some *)
                                                    let v6299 : System.DateTime = System.DateTime.Now
                                                    let v6302 : (System.DateTime -> int64) = _.Ticks
                                                    let v6303 : int64 = v6302 v6299
                                                    let v6306 : int64 = v6303 - v6298
                                                    let v6307 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                    let v6308 : System.TimeSpan = v6307 v6306
                                                    let v6311 : (System.TimeSpan -> int32) = _.Hours
                                                    let v6312 : int32 = v6311 v6308
                                                    let v6315 : (System.TimeSpan -> int32) = _.Minutes
                                                    let v6316 : int32 = v6315 v6308
                                                    let v6319 : (System.TimeSpan -> int32) = _.Seconds
                                                    let v6320 : int32 = v6319 v6308
                                                    let v6323 : (System.TimeSpan -> int32) = _.Milliseconds
                                                    let v6324 : int32 = v6323 v6308
                                                    let v6327 : System.DateTime = System.DateTime (1, 1, 1, v6312, v6316, v6320, v6324)
                                                    v6327
                                            let v6335 : string = method7()
                                            let v6338 : (string -> string) = v6334.ToString
                                            let v6339 : string = v6338 v6335
                                            let _v5989 = v6339 
                                            #endif
                                            let v6342 : string = _v5989 
                                            let v6407 : string = "Warning"
                                            let v6408 : (unit -> string) = v6407.ToLower
                                            let v6409 : string = v6408 ()
                                            let v6412 : string = v6409.PadLeft (7, ' ')
                                            let v6426 : unit = ()
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v6427 : string = "inline_colorization::color_yellow"
                                            let v6428 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v6427 
                                            let v6429 : string = "&*$0"
                                            let v6430 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6412 v6429 
                                            let v6431 : string = "inline_colorization::color_reset"
                                            let v6432 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v6431 
                                            let v6433 : string = "\"{v6428}{v6430}{v6432}\""
                                            let v6434 : string = @$"format!(" + v6433 + ")"
                                            let v6435 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v6434 
                                            let v6436 : string = "fable_library_rust::String_::fromString($0)"
                                            let v6437 : string = Fable.Core.RustInterop.emitRustExpr v6435 v6436 
                                            let _v6426 = v6437 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v6438 : string = "inline_colorization::color_yellow"
                                            let v6439 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v6438 
                                            let v6440 : string = "&*$0"
                                            let v6441 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6412 v6440 
                                            let v6442 : string = "inline_colorization::color_reset"
                                            let v6443 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v6442 
                                            let v6444 : string = "\"{v6439}{v6441}{v6443}\""
                                            let v6445 : string = @$"format!(" + v6444 + ")"
                                            let v6446 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v6445 
                                            let v6447 : string = "fable_library_rust::String_::fromString($0)"
                                            let v6448 : string = Fable.Core.RustInterop.emitRustExpr v6446 v6447 
                                            let _v6426 = v6448 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v6449 : string = "inline_colorization::color_yellow"
                                            let v6450 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v6449 
                                            let v6451 : string = "&*$0"
                                            let v6452 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6412 v6451 
                                            let v6453 : string = "inline_colorization::color_reset"
                                            let v6454 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v6453 
                                            let v6455 : string = "\"{v6450}{v6452}{v6454}\""
                                            let v6456 : string = @$"format!(" + v6455 + ")"
                                            let v6457 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v6456 
                                            let v6458 : string = "fable_library_rust::String_::fromString($0)"
                                            let v6459 : string = Fable.Core.RustInterop.emitRustExpr v6457 v6458 
                                            let _v6426 = v6459 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v6460 : string = "\u001b[93m"
                                            let v6461 : string = method8()
                                            let v6462 : string = v6460 + v6412 
                                            let v6463 : string = v6462 + v6461 
                                            let _v6426 = v6463 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v6464 : string = "\u001b[93m"
                                            let v6465 : string = method8()
                                            let v6466 : string = v6464 + v6412 
                                            let v6467 : string = v6466 + v6465 
                                            let _v6426 = v6467 
                                            #endif
#else
                                            let v6468 : string = "\u001b[93m"
                                            let v6469 : string = method8()
                                            let v6470 : string = v6468 + v6412 
                                            let v6471 : string = v6470 + v6469 
                                            let _v6426 = v6471 
                                            #endif
                                            let v6472 : string = _v6426 
                                            let v6478 : int64 = v5974.l0
                                            let v6479 : string = method9()
                                            let v6480 : Mut4 = {l0 = v6479} : Mut4
                                            let v6481 : string = $"{v5814}"
                                            let v6484 : string = v6480.l0
                                            let v6485 : string = v6484 + v6481 
                                            v6480.l0 <- v6485
                                            let v6486 : string = "error"
                                            let v6487 : string = $"{v6486}"
                                            let v6490 : string = v6480.l0
                                            let v6491 : string = v6490 + v6487 
                                            v6480.l0 <- v6491
                                            let v6492 : string = $"{v5826}"
                                            let v6495 : string = v6480.l0
                                            let v6496 : string = v6495 + v6492 
                                            v6480.l0 <- v6496
                                            let v6497 : string = $"{v5899}"
                                            let v6500 : string = v6480.l0
                                            let v6501 : string = v6500 + v6497 
                                            v6480.l0 <- v6501
                                            let v6502 : string = $"{v5884}"
                                            let v6505 : string = v6480.l0
                                            let v6506 : string = v6505 + v6502 
                                            v6480.l0 <- v6506
                                            let v6507 : string = v6480.l0
                                            let v6508 : (unit -> string) = closure6()
                                            let v6509 : string = $"{v6342} {v6472} #{v6478} %s{v6508 ()} / {v6507}"
                                            let v6512 : char list = []
                                            let v6513 : (char list -> (char [])) = List.toArray
                                            let v6514 : (char []) = v6513 v6512
                                            let v6517 : string = v6509.TrimStart v6514 
                                            let v6535 : char list = []
                                            let v6536 : char list = '/' :: v6535 
                                            let v6539 : char list = ' ' :: v6536 
                                            let v6542 : (char list -> (char [])) = List.toArray
                                            let v6543 : (char []) = v6542 v6539
                                            let v6546 : string = v6517.TrimEnd v6543 
                                            let v6564 : unit = ()
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v6565 : string = @"println!(""{}"", $0)"
                                            Fable.Core.RustInterop.emitRustExpr v6546 v6565 
                                            let _v6564 = () 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v6566 : string = @"println!(""{}"", $0)"
                                            Fable.Core.RustInterop.emitRustExpr v6546 v6566 
                                            let _v6564 = () 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v6567 : string = $"near_sdk::log!(\"{{}}\", $0)"
                                            Fable.Core.RustInterop.emitRustExpr v6546 v6567 
                                            let _v6564 = () 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            System.Console.WriteLine v6546 
                                            let _v6564 = () 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            System.Console.WriteLine v6546 
                                            let _v6564 = () 
                                            #endif
#else
                                            System.Console.WriteLine v6546 
                                            let _v6564 = () 
                                            #endif
                                            _v6564 
                                            let v6568 : (string -> unit) = v5913.l0
                                            v6568 v6546
                                        US1_1
                                    | US12_0(v5897) -> (* Ok *)
                                        US1_0(v5897)
                                let v7253 : US1 =
                                    match v6571 with
                                    | US1_1 -> (* None *)
                                        let v6574 : string = method23()
                                        let v6575 : string = method15(v5893, v5894)
                                        let v6576 : US12 = method18(v6575, v6574)
                                        match v6576 with
                                        | US12_1(v6579) -> (* Error *)
                                            let v6580 : bool = State.trace_state.IsNone
                                            if v6580 then
                                                let v6581 : US0 = US0_0
                                                let struct (v6582 : Mut0, v6583 : Mut1, v6584 : Mut2, v6585 : Mut3, v6586 : int64 option) = method1(v6581)
                                                let v6587 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v6582, v6583, v6584, v6585, v6586) 
                                                State.trace_state <- v6587 
                                                ()
                                            let struct (v6592 : Mut0, v6593 : Mut1, v6594 : Mut2, v6595 : Mut3, v6596 : int64 option) = State.trace_state.Value
                                            let v6607 : bool = State.trace_state.IsNone
                                            if v6607 then
                                                let v6608 : US0 = US0_0
                                                let struct (v6609 : Mut0, v6610 : Mut1, v6611 : Mut2, v6612 : Mut3, v6613 : int64 option) = method1(v6608)
                                                let v6614 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v6609, v6610, v6611, v6612, v6613) 
                                                State.trace_state <- v6614 
                                                ()
                                            let struct (v6619 : Mut0, v6620 : Mut1, v6621 : Mut2, v6622 : Mut3, v6623 : int64 option) = State.trace_state.Value
                                            let v6634 : US0 = v6622.l0
                                            let v6635 : bool = v6621.l0
                                            let v6636 : bool = v6635 = false
                                            let v6639 : bool =
                                                if v6636 then
                                                    false
                                                else
                                                    let v6637 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v6634
                                                    let v6638 : bool = 3 >= v6637
                                                    v6638
                                            if v6639 then
                                                let v6640 : int64 = v6592.l0
                                                let v6641 : int64 = v6640 + 1L
                                                v6592.l0 <- v6641
                                                let v6642 : bool = State.trace_state.IsNone
                                                if v6642 then
                                                    let v6643 : US0 = US0_0
                                                    let struct (v6644 : Mut0, v6645 : Mut1, v6646 : Mut2, v6647 : Mut3, v6648 : int64 option) = method1(v6643)
                                                    let v6649 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v6644, v6645, v6646, v6647, v6648) 
                                                    State.trace_state <- v6649 
                                                    ()
                                                let struct (v6654 : Mut0, v6655 : Mut1, v6656 : Mut2, v6657 : Mut3, v6658 : int64 option) = State.trace_state.Value
                                                let v6669 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v6670 : US3 option = None
                                                let _v6670 = ref v6670 
                                                match v6658 with
                                                | Some x -> (
                                                (fun () ->
                                                (fun () ->
                                                let v6671 : int64 = x
                                                let v6672 : US3 = US3_0(v6671)
                                                v6672 
                                                )
                                                |> fun x -> x () |> Some
                                                ) () ) | None -> None
                                                |> fun x -> _v6670.Value <- x
                                                let v6673 : US3 option = _v6670.Value 
                                                let v6684 : US3 = US3_1
                                                let v6685 : US3 = v6673 |> Option.defaultValue v6684 
                                                let v6725 : System.DateTime =
                                                    match v6685 with
                                                    | US3_1 -> (* None *)
                                                        let v6721 : System.DateTime = System.DateTime.Now
                                                        v6721
                                                    | US3_0(v6689) -> (* Some *)
                                                        let v6690 : System.DateTime = System.DateTime.Now
                                                        let v6693 : (System.DateTime -> int64) = _.Ticks
                                                        let v6694 : int64 = v6693 v6690
                                                        let v6697 : int64 = v6694 - v6689
                                                        let v6698 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                        let v6699 : System.TimeSpan = v6698 v6697
                                                        let v6702 : (System.TimeSpan -> int32) = _.Hours
                                                        let v6703 : int32 = v6702 v6699
                                                        let v6706 : (System.TimeSpan -> int32) = _.Minutes
                                                        let v6707 : int32 = v6706 v6699
                                                        let v6710 : (System.TimeSpan -> int32) = _.Seconds
                                                        let v6711 : int32 = v6710 v6699
                                                        let v6714 : (System.TimeSpan -> int32) = _.Milliseconds
                                                        let v6715 : int32 = v6714 v6699
                                                        let v6718 : System.DateTime = System.DateTime (1, 1, 1, v6703, v6707, v6711, v6715)
                                                        v6718
                                                let v6726 : string = method6()
                                                let v6729 : (string -> string) = v6725.ToString
                                                let v6730 : string = v6729 v6726
                                                let _v6669 = v6730 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v6733 : US3 option = None
                                                let _v6733 = ref v6733 
                                                match v6658 with
                                                | Some x -> (
                                                (fun () ->
                                                (fun () ->
                                                let v6734 : int64 = x
                                                let v6735 : US3 = US3_0(v6734)
                                                v6735 
                                                )
                                                |> fun x -> x () |> Some
                                                ) () ) | None -> None
                                                |> fun x -> _v6733.Value <- x
                                                let v6736 : US3 option = _v6733.Value 
                                                let v6747 : US3 = US3_1
                                                let v6748 : US3 = v6736 |> Option.defaultValue v6747 
                                                let v6788 : System.DateTime =
                                                    match v6748 with
                                                    | US3_1 -> (* None *)
                                                        let v6784 : System.DateTime = System.DateTime.Now
                                                        v6784
                                                    | US3_0(v6752) -> (* Some *)
                                                        let v6753 : System.DateTime = System.DateTime.Now
                                                        let v6756 : (System.DateTime -> int64) = _.Ticks
                                                        let v6757 : int64 = v6756 v6753
                                                        let v6760 : int64 = v6757 - v6752
                                                        let v6761 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                        let v6762 : System.TimeSpan = v6761 v6760
                                                        let v6765 : (System.TimeSpan -> int32) = _.Hours
                                                        let v6766 : int32 = v6765 v6762
                                                        let v6769 : (System.TimeSpan -> int32) = _.Minutes
                                                        let v6770 : int32 = v6769 v6762
                                                        let v6773 : (System.TimeSpan -> int32) = _.Seconds
                                                        let v6774 : int32 = v6773 v6762
                                                        let v6777 : (System.TimeSpan -> int32) = _.Milliseconds
                                                        let v6778 : int32 = v6777 v6762
                                                        let v6781 : System.DateTime = System.DateTime (1, 1, 1, v6766, v6770, v6774, v6778)
                                                        v6781
                                                let v6789 : string = method6()
                                                let v6792 : (string -> string) = v6788.ToString
                                                let v6793 : string = v6792 v6789
                                                let _v6669 = v6793 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v6796 : string = $"near_sdk::env::block_timestamp()"
                                                let v6797 : uint64 = Fable.Core.RustInterop.emitRustExpr () v6796 
                                                let v6798 : US3 option = None
                                                let _v6798 = ref v6798 
                                                match v6658 with
                                                | Some x -> (
                                                (fun () ->
                                                (fun () ->
                                                let v6799 : int64 = x
                                                let v6800 : US3 = US3_0(v6799)
                                                v6800 
                                                )
                                                |> fun x -> x () |> Some
                                                ) () ) | None -> None
                                                |> fun x -> _v6798.Value <- x
                                                let v6801 : US3 option = _v6798.Value 
                                                let v6812 : US3 = US3_1
                                                let v6813 : US3 = v6801 |> Option.defaultValue v6812 
                                                let v6822 : uint64 =
                                                    match v6813 with
                                                    | US3_1 -> (* None *)
                                                        v6797
                                                    | US3_0(v6817) -> (* Some *)
                                                        let v6818 : (int64 -> uint64) = uint64
                                                        let v6819 : uint64 = v6818 v6817
                                                        let v6820 : uint64 = v6797 - v6819
                                                        v6820
                                                let v6823 : uint64 = v6822 / 1000000000UL
                                                let v6824 : uint64 = v6823 % 60UL
                                                let v6825 : uint64 = v6823 / 60UL
                                                let v6826 : uint64 = v6825 % 60UL
                                                let v6827 : uint64 = v6823 / 3600UL
                                                let v6828 : uint64 = v6827 % 24UL
                                                let v6829 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
                                                let v6830 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v6828, v6826, v6824) v6829 
                                                let v6831 : string = "fable_library_rust::String_::fromString($0)"
                                                let v6832 : string = Fable.Core.RustInterop.emitRustExpr v6830 v6831 
                                                let _v6669 = v6832 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v6833 : US3 option = None
                                                let _v6833 = ref v6833 
                                                match v6658 with
                                                | Some x -> (
                                                (fun () ->
                                                (fun () ->
                                                let v6834 : int64 = x
                                                let v6835 : US3 = US3_0(v6834)
                                                v6835 
                                                )
                                                |> fun x -> x () |> Some
                                                ) () ) | None -> None
                                                |> fun x -> _v6833.Value <- x
                                                let v6836 : US3 option = _v6833.Value 
                                                let v6847 : US3 = US3_1
                                                let v6848 : US3 = v6836 |> Option.defaultValue v6847 
                                                let v6888 : System.DateTime =
                                                    match v6848 with
                                                    | US3_1 -> (* None *)
                                                        let v6884 : System.DateTime = System.DateTime.Now
                                                        v6884
                                                    | US3_0(v6852) -> (* Some *)
                                                        let v6853 : System.DateTime = System.DateTime.Now
                                                        let v6856 : (System.DateTime -> int64) = _.Ticks
                                                        let v6857 : int64 = v6856 v6853
                                                        let v6860 : int64 = v6857 - v6852
                                                        let v6861 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                        let v6862 : System.TimeSpan = v6861 v6860
                                                        let v6865 : (System.TimeSpan -> int32) = _.Hours
                                                        let v6866 : int32 = v6865 v6862
                                                        let v6869 : (System.TimeSpan -> int32) = _.Minutes
                                                        let v6870 : int32 = v6869 v6862
                                                        let v6873 : (System.TimeSpan -> int32) = _.Seconds
                                                        let v6874 : int32 = v6873 v6862
                                                        let v6877 : (System.TimeSpan -> int32) = _.Milliseconds
                                                        let v6878 : int32 = v6877 v6862
                                                        let v6881 : System.DateTime = System.DateTime (1, 1, 1, v6866, v6870, v6874, v6878)
                                                        v6881
                                                let v6889 : string = method7()
                                                let v6892 : (string -> string) = v6888.ToString
                                                let v6893 : string = v6892 v6889
                                                let _v6669 = v6893 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v6896 : US3 option = None
                                                let _v6896 = ref v6896 
                                                match v6658 with
                                                | Some x -> (
                                                (fun () ->
                                                (fun () ->
                                                let v6897 : int64 = x
                                                let v6898 : US3 = US3_0(v6897)
                                                v6898 
                                                )
                                                |> fun x -> x () |> Some
                                                ) () ) | None -> None
                                                |> fun x -> _v6896.Value <- x
                                                let v6899 : US3 option = _v6896.Value 
                                                let v6910 : US3 = US3_1
                                                let v6911 : US3 = v6899 |> Option.defaultValue v6910 
                                                let v6951 : System.DateTime =
                                                    match v6911 with
                                                    | US3_1 -> (* None *)
                                                        let v6947 : System.DateTime = System.DateTime.Now
                                                        v6947
                                                    | US3_0(v6915) -> (* Some *)
                                                        let v6916 : System.DateTime = System.DateTime.Now
                                                        let v6919 : (System.DateTime -> int64) = _.Ticks
                                                        let v6920 : int64 = v6919 v6916
                                                        let v6923 : int64 = v6920 - v6915
                                                        let v6924 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                        let v6925 : System.TimeSpan = v6924 v6923
                                                        let v6928 : (System.TimeSpan -> int32) = _.Hours
                                                        let v6929 : int32 = v6928 v6925
                                                        let v6932 : (System.TimeSpan -> int32) = _.Minutes
                                                        let v6933 : int32 = v6932 v6925
                                                        let v6936 : (System.TimeSpan -> int32) = _.Seconds
                                                        let v6937 : int32 = v6936 v6925
                                                        let v6940 : (System.TimeSpan -> int32) = _.Milliseconds
                                                        let v6941 : int32 = v6940 v6925
                                                        let v6944 : System.DateTime = System.DateTime (1, 1, 1, v6929, v6933, v6937, v6941)
                                                        v6944
                                                let v6952 : string = method7()
                                                let v6955 : (string -> string) = v6951.ToString
                                                let v6956 : string = v6955 v6952
                                                let _v6669 = v6956 
                                                #endif
#else
                                                let v6959 : US3 option = None
                                                let _v6959 = ref v6959 
                                                match v6658 with
                                                | Some x -> (
                                                (fun () ->
                                                (fun () ->
                                                let v6960 : int64 = x
                                                let v6961 : US3 = US3_0(v6960)
                                                v6961 
                                                )
                                                |> fun x -> x () |> Some
                                                ) () ) | None -> None
                                                |> fun x -> _v6959.Value <- x
                                                let v6962 : US3 option = _v6959.Value 
                                                let v6973 : US3 = US3_1
                                                let v6974 : US3 = v6962 |> Option.defaultValue v6973 
                                                let v7014 : System.DateTime =
                                                    match v6974 with
                                                    | US3_1 -> (* None *)
                                                        let v7010 : System.DateTime = System.DateTime.Now
                                                        v7010
                                                    | US3_0(v6978) -> (* Some *)
                                                        let v6979 : System.DateTime = System.DateTime.Now
                                                        let v6982 : (System.DateTime -> int64) = _.Ticks
                                                        let v6983 : int64 = v6982 v6979
                                                        let v6986 : int64 = v6983 - v6978
                                                        let v6987 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                        let v6988 : System.TimeSpan = v6987 v6986
                                                        let v6991 : (System.TimeSpan -> int32) = _.Hours
                                                        let v6992 : int32 = v6991 v6988
                                                        let v6995 : (System.TimeSpan -> int32) = _.Minutes
                                                        let v6996 : int32 = v6995 v6988
                                                        let v6999 : (System.TimeSpan -> int32) = _.Seconds
                                                        let v7000 : int32 = v6999 v6988
                                                        let v7003 : (System.TimeSpan -> int32) = _.Milliseconds
                                                        let v7004 : int32 = v7003 v6988
                                                        let v7007 : System.DateTime = System.DateTime (1, 1, 1, v6992, v6996, v7000, v7004)
                                                        v7007
                                                let v7015 : string = method7()
                                                let v7018 : (string -> string) = v7014.ToString
                                                let v7019 : string = v7018 v7015
                                                let _v6669 = v7019 
                                                #endif
                                                let v7022 : string = _v6669 
                                                let v7087 : string = "Warning"
                                                let v7088 : (unit -> string) = v7087.ToLower
                                                let v7089 : string = v7088 ()
                                                let v7092 : string = v7089.PadLeft (7, ' ')
                                                let v7106 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v7107 : string = "inline_colorization::color_yellow"
                                                let v7108 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v7107 
                                                let v7109 : string = "&*$0"
                                                let v7110 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7092 v7109 
                                                let v7111 : string = "inline_colorization::color_reset"
                                                let v7112 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v7111 
                                                let v7113 : string = "\"{v7108}{v7110}{v7112}\""
                                                let v7114 : string = @$"format!(" + v7113 + ")"
                                                let v7115 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v7114 
                                                let v7116 : string = "fable_library_rust::String_::fromString($0)"
                                                let v7117 : string = Fable.Core.RustInterop.emitRustExpr v7115 v7116 
                                                let _v7106 = v7117 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v7118 : string = "inline_colorization::color_yellow"
                                                let v7119 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v7118 
                                                let v7120 : string = "&*$0"
                                                let v7121 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7092 v7120 
                                                let v7122 : string = "inline_colorization::color_reset"
                                                let v7123 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v7122 
                                                let v7124 : string = "\"{v7119}{v7121}{v7123}\""
                                                let v7125 : string = @$"format!(" + v7124 + ")"
                                                let v7126 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v7125 
                                                let v7127 : string = "fable_library_rust::String_::fromString($0)"
                                                let v7128 : string = Fable.Core.RustInterop.emitRustExpr v7126 v7127 
                                                let _v7106 = v7128 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v7129 : string = "inline_colorization::color_yellow"
                                                let v7130 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v7129 
                                                let v7131 : string = "&*$0"
                                                let v7132 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7092 v7131 
                                                let v7133 : string = "inline_colorization::color_reset"
                                                let v7134 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v7133 
                                                let v7135 : string = "\"{v7130}{v7132}{v7134}\""
                                                let v7136 : string = @$"format!(" + v7135 + ")"
                                                let v7137 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v7136 
                                                let v7138 : string = "fable_library_rust::String_::fromString($0)"
                                                let v7139 : string = Fable.Core.RustInterop.emitRustExpr v7137 v7138 
                                                let _v7106 = v7139 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v7140 : string = "\u001b[93m"
                                                let v7141 : string = method8()
                                                let v7142 : string = v7140 + v7092 
                                                let v7143 : string = v7142 + v7141 
                                                let _v7106 = v7143 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v7144 : string = "\u001b[93m"
                                                let v7145 : string = method8()
                                                let v7146 : string = v7144 + v7092 
                                                let v7147 : string = v7146 + v7145 
                                                let _v7106 = v7147 
                                                #endif
#else
                                                let v7148 : string = "\u001b[93m"
                                                let v7149 : string = method8()
                                                let v7150 : string = v7148 + v7092 
                                                let v7151 : string = v7150 + v7149 
                                                let _v7106 = v7151 
                                                #endif
                                                let v7152 : string = _v7106 
                                                let v7158 : int64 = v6654.l0
                                                let v7159 : string = method9()
                                                let v7160 : Mut4 = {l0 = v7159} : Mut4
                                                let v7161 : string = $"{v5814}"
                                                let v7164 : string = v7160.l0
                                                let v7165 : string = v7164 + v7161 
                                                v7160.l0 <- v7165
                                                let v7166 : string = "error"
                                                let v7167 : string = $"{v7166}"
                                                let v7170 : string = v7160.l0
                                                let v7171 : string = v7170 + v7167 
                                                v7160.l0 <- v7171
                                                let v7172 : string = $"{v5826}"
                                                let v7175 : string = v7160.l0
                                                let v7176 : string = v7175 + v7172 
                                                v7160.l0 <- v7176
                                                let v7177 : string = $"{v6579}"
                                                let v7180 : string = v7160.l0
                                                let v7181 : string = v7180 + v7177 
                                                v7160.l0 <- v7181
                                                let v7182 : string = $"{v5884}"
                                                let v7185 : string = v7160.l0
                                                let v7186 : string = v7185 + v7182 
                                                v7160.l0 <- v7186
                                                let v7187 : string = v7160.l0
                                                let v7188 : (unit -> string) = closure6()
                                                let v7189 : string = $"{v7022} {v7152} #{v7158} %s{v7188 ()} / {v7187}"
                                                let v7192 : char list = []
                                                let v7193 : (char list -> (char [])) = List.toArray
                                                let v7194 : (char []) = v7193 v7192
                                                let v7197 : string = v7189.TrimStart v7194 
                                                let v7215 : char list = []
                                                let v7216 : char list = '/' :: v7215 
                                                let v7219 : char list = ' ' :: v7216 
                                                let v7222 : (char list -> (char [])) = List.toArray
                                                let v7223 : (char []) = v7222 v7219
                                                let v7226 : string = v7197.TrimEnd v7223 
                                                let v7244 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v7245 : string = @"println!(""{}"", $0)"
                                                Fable.Core.RustInterop.emitRustExpr v7226 v7245 
                                                let _v7244 = () 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v7246 : string = @"println!(""{}"", $0)"
                                                Fable.Core.RustInterop.emitRustExpr v7226 v7246 
                                                let _v7244 = () 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v7247 : string = $"near_sdk::log!(\"{{}}\", $0)"
                                                Fable.Core.RustInterop.emitRustExpr v7226 v7247 
                                                let _v7244 = () 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                System.Console.WriteLine v7226 
                                                let _v7244 = () 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                System.Console.WriteLine v7226 
                                                let _v7244 = () 
                                                #endif
#else
                                                System.Console.WriteLine v7226 
                                                let _v7244 = () 
                                                #endif
                                                _v7244 
                                                let v7248 : (string -> unit) = v6593.l0
                                                v7248 v7226
                                            US1_1
                                        | US12_0(v6577) -> (* Ok *)
                                            US1_0(v6577)
                                    | US1_0(v6572) -> (* Some *)
                                        US1_0(v6572)
                                let v7257 : string =
                                    match v7253 with
                                    | US1_1 -> (* None *)
                                        failwith<string> "Option does not have a value."
                                    | US1_0(v7254) -> (* Some *)
                                        v7254
                                let v7258 : string = method15(v7257, v5893)
                                let v7259 : string = method23()
                                let v7260 : (unit -> string) = v7259.ToLower
                                let v7261 : string = v7260 ()
                                let v7264 : (unit -> string) = v7258.ToLower
                                let v7265 : string = v7264 ()
                                let v7268 : bool = v7261.StartsWith v7265 
                                let v7271 : US12 =
                                    if v7268 then
                                        US12_1(v7265)
                                    else
                                        US12_0(v7265)
                                let v7277 : Result<string, string> =
                                    match v7271 with
                                    | US12_1(v7274) -> (* Error *)
                                        let v7275 : Result<string, string> = Error v7274 
                                        v7275
                                    | US12_0(v7272) -> (* Ok *)
                                        let v7273 : Result<string, string> = Ok v7272 
                                        v7273
                                let v7278 : string = "true; let _result = $0.unwrap_or_else(|x| { //"
                                let v7279 : bool = Fable.Core.RustInterop.emitRustExpr v7277 v7278 
                                let v7280 : string = "x"
                                let v7281 : string = Fable.Core.RustInterop.emitRustExpr () v7280 
                                let v7282 : string = "true; $0 })"
                                let v7283 : bool = Fable.Core.RustInterop.emitRustExpr v7281 v7282 
                                let v7284 : string = "_result"
                                let v7285 : string = Fable.Core.RustInterop.emitRustExpr () v7284 
                                let v7286 : string = "target/spiral_builder"
                                let v7287 : string = method15(v7285, v7286)
                                let v7288 : string = "spiral_builder"
                                let v7289 : string = method15(v7287, v7288)
                                let v7290 : string = "packages"
                                let v7291 : string = method15(v7289, v7290)
                                let v7292 : string = "Rust"
                                let v7293 : string = method15(v7291, v7292)
                                let v7294 : string = method15(v7293, v5891)
                                let v7295 : System.IDisposable = method28(v7294)
                                let v7296 : string = $"{v7288}.fs"
                                let v7297 : string = method15(v7294, v7296)
                                let v7298 : string = method85(v7297)
                                method25(v7298, v5807)
                                let v7299 : string list = []
                                let v7300 : string seq = seq { for i = 0 to v7299.Length - 1 do yield v7299.[i] }
                                let v7303 : (string -> (string seq -> string)) = String.concat
                                let v7304 : string = "\\n        "
                                let v7305 : (string seq -> string) = v7303 v7304
                                let v7306 : string = v7305 v7300
                                let v7309 : string = "Fable.Core"
                                let v7310 : string = $"<PackageReference Include=\"{v7309}\" Version=\"*\" />"
                                let v7311 : string list = []
                                let v7312 : string list = v7310 :: v7311 
                                let v7315 : string seq = seq { for i = 0 to v7312.Length - 1 do yield v7312.[i] }
                                let v7318 : (string -> (string seq -> string)) = String.concat
                                let v7319 : (string seq -> string) = v7318 v7304
                                let v7320 : string = v7319 v7315
                                let v7323 : string = $"{v7288}.fsproj"
                                let v7324 : string = method15(v7294, v7323)
                                let v7325 : string = method85(v7324)
                                let v7326 : string = $"<Project Sdk=\"Microsoft.NET.Sdk\">"
                                let v7327 : string = $"<PropertyGroup>"
                                let v7328 : string = "\n"
                                let v7329 : string = v7326 + v7328 
                                let v7330 : string = v7329 + v7327 
                                let v7331 : string = $"    <TargetFramework>net9.0</TargetFramework>"
                                let v7332 : string = v7330 + v7328 
                                let v7333 : string = v7332 + v7331 
                                let v7334 : string = $"    <LangVersion>preview</LangVersion>"
                                let v7335 : string = v7333 + v7328 
                                let v7336 : string = v7335 + v7334 
                                let v7337 : string = $"    <RollForward>Major</RollForward>"
                                let v7338 : string = v7336 + v7328 
                                let v7339 : string = v7338 + v7337 
                                let v7340 : string = $"    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>"
                                let v7341 : string = v7339 + v7328 
                                let v7342 : string = v7341 + v7340 
                                let v7343 : string = $"    <PublishAot>false</PublishAot>"
                                let v7344 : string = v7342 + v7328 
                                let v7345 : string = v7344 + v7343 
                                let v7346 : string = $"    <PublishTrimmed>false</PublishTrimmed>"
                                let v7347 : string = v7345 + v7328 
                                let v7348 : string = v7347 + v7346 
                                let v7349 : string = $"    <PublishSingleFile>true</PublishSingleFile>"
                                let v7350 : string = v7348 + v7328 
                                let v7351 : string = v7350 + v7349 
                                let v7352 : string = $"    <SelfContained>true</SelfContained>"
                                let v7353 : string = v7351 + v7328 
                                let v7354 : string = v7353 + v7352 
                                let v7355 : string = $"    <Version>0.0.1-alpha.1</Version>"
                                let v7356 : string = v7354 + v7328 
                                let v7357 : string = v7356 + v7355 
                                let v7358 : string = $"    <OutputType>Exe</OutputType>"
                                let v7359 : string = v7357 + v7328 
                                let v7360 : string = v7359 + v7358 
                                let v7361 : string = $"</PropertyGroup>"
                                let v7362 : string = v7360 + v7328 
                                let v7363 : string = v7362 + v7361 
                                let v7364 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('FreeBSD'))\">"
                                let v7365 : string = v7363 + v7328 
                                let v7366 : string = v7365 + v7364 
                                let v7367 : string = $"    <DefineConstants>_FREEBSD</DefineConstants>"
                                let v7368 : string = v7366 + v7328 
                                let v7369 : string = v7368 + v7367 
                                let v7370 : string = $"</PropertyGroup>"
                                let v7371 : string = v7369 + v7328 
                                let v7372 : string = v7371 + v7370 
                                let v7373 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Linux'))\">"
                                let v7374 : string = v7372 + v7328 
                                let v7375 : string = v7374 + v7373 
                                let v7376 : string = $"    <DefineConstants>_LINUX</DefineConstants>"
                                let v7377 : string = v7375 + v7328 
                                let v7378 : string = v7377 + v7376 
                                let v7379 : string = $"</PropertyGroup>"
                                let v7380 : string = v7378 + v7328 
                                let v7381 : string = v7380 + v7379 
                                let v7382 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('OSX'))\">"
                                let v7383 : string = v7381 + v7328 
                                let v7384 : string = v7383 + v7382 
                                let v7385 : string = $"    <DefineConstants>_OSX</DefineConstants>"
                                let v7386 : string = v7384 + v7328 
                                let v7387 : string = v7386 + v7385 
                                let v7388 : string = $"</PropertyGroup>"
                                let v7389 : string = v7387 + v7328 
                                let v7390 : string = v7389 + v7388 
                                let v7391 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Windows'))\">"
                                let v7392 : string = v7390 + v7328 
                                let v7393 : string = v7392 + v7391 
                                let v7394 : string = $"    <DefineConstants>_WINDOWS</DefineConstants>"
                                let v7395 : string = v7393 + v7328 
                                let v7396 : string = v7395 + v7394 
                                let v7397 : string = $"</PropertyGroup>"
                                let v7398 : string = v7396 + v7328 
                                let v7399 : string = v7398 + v7397 
                                let v7400 : string = $"<ItemGroup>"
                                let v7401 : string = v7399 + v7328 
                                let v7402 : string = v7401 + v7400 
                                let v7403 : string = $"    {v7306}"
                                let v7404 : string = v7402 + v7328 
                                let v7405 : string = v7404 + v7403 
                                let v7406 : string = $"    <Compile Include=\"{v7298}\" />"
                                let v7407 : string = v7405 + v7328 
                                let v7408 : string = v7407 + v7406 
                                let v7409 : string = $"</ItemGroup>"
                                let v7410 : string = v7408 + v7328 
                                let v7411 : string = v7410 + v7409 
                                let v7412 : string = $"<ItemGroup>"
                                let v7413 : string = v7411 + v7328 
                                let v7414 : string = v7413 + v7412 
                                let v7415 : string = $"    {v7320}"
                                let v7416 : string = v7414 + v7328 
                                let v7417 : string = v7416 + v7415 
                                let v7418 : string = $"</ItemGroup>"
                                let v7419 : string = v7417 + v7328 
                                let v7420 : string = v7419 + v7418 
                                let v7421 : string = $"</Project>"
                                let v7422 : string = v7420 + v7328 
                                let v7423 : string = v7422 + v7421 
                                method25(v7325, v7423)
                                let v7424 : string = "../../.."
                                let v7425 : string = method15(v7294, v7424)
                                let v7426 : string = "Cargo.toml"
                                let v7427 : string = method15(v7425, v7426)
                                let v7428 : bool = method27(v7427)
                                let v7429 : bool = v7428 = false
                                if v7429 then
                                    let v7430 : System.DateTime = System.DateTime.Now
                                    let v7433 : (unit -> System.Guid) = System.Guid.NewGuid
                                    let v7434 : System.Guid = v7433 ()
                                    let v7437 : System.Guid = method97(v7434, v7430)
                                    let v7438 : (System.Guid -> string) = _.ToString()
                                    let v7439 : string = v7438 v7437
                                    let v7442 : string = $"[package]"
                                    let v7443 : string = $"name = \"spiral_builder_{v7439}\""
                                    let v7444 : string = v7442 + v7328 
                                    let v7445 : string = v7444 + v7443 
                                    let v7446 : string = $"version = \"0.0.1\""
                                    let v7447 : string = v7445 + v7328 
                                    let v7448 : string = v7447 + v7446 
                                    let v7449 : string = $"edition = \"2021\""
                                    let v7450 : string = v7448 + v7328 
                                    let v7451 : string = v7450 + v7449 
                                    let v7452 : string = $""
                                    let v7453 : string = v7451 + v7328 
                                    let v7454 : string = v7453 + v7452 
                                    let v7455 : string = $"[[bin]]"
                                    let v7456 : string = v7454 + v7328 
                                    let v7457 : string = v7456 + v7455 
                                    let v7458 : string = $"name = \"spiral_builder_{v7439}\""
                                    let v7459 : string = v7457 + v7328 
                                    let v7460 : string = v7459 + v7458 
                                    let v7461 : string = $"path = \"spiral_builder.rs\""
                                    let v7462 : string = v7460 + v7328 
                                    let v7463 : string = v7462 + v7461 
                                    let v7464 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v7465 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                    Fable.Core.RustInterop.emitRustExpr struct (v7427, v7463) v7465 
                                    let _v7464 = () 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let _v7464 = () 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let _v7464 = () 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let _v7464 = () 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let _v7464 = () 
                                    #endif
#else
                                    let v7466 : string = method39(v7463)
                                    System.IO.File.WriteAllText (v7427, v7466)
                                    let _v7464 = () 
                                    #endif
                                    _v7464 
                                    ()
                                let v7467 : string = method15(v7294, v7426)
                                let v7468 : bool = method27(v7467)
                                let v7469 : bool = v7468 = false
                                if v7469 then
                                    let v7470 : System.DateTime = System.DateTime.Now
                                    let v7473 : (unit -> System.Guid) = System.Guid.NewGuid
                                    let v7474 : System.Guid = v7473 ()
                                    let v7477 : System.Guid = method97(v7474, v7470)
                                    let v7478 : (System.Guid -> string) = _.ToString()
                                    let v7479 : string = v7478 v7477
                                    let v7482 : string = $"[package]"
                                    let v7483 : string = $"name = \"spiral_builder_{v7479}\""
                                    let v7484 : string = v7482 + v7328 
                                    let v7485 : string = v7484 + v7483 
                                    let v7486 : string = $"version = \"0.0.1\""
                                    let v7487 : string = v7485 + v7328 
                                    let v7488 : string = v7487 + v7486 
                                    let v7489 : string = $"edition = \"2021\""
                                    let v7490 : string = v7488 + v7328 
                                    let v7491 : string = v7490 + v7489 
                                    let v7492 : string = $""
                                    let v7493 : string = v7491 + v7328 
                                    let v7494 : string = v7493 + v7492 
                                    let v7495 : string = $"[[bin]]"
                                    let v7496 : string = v7494 + v7328 
                                    let v7497 : string = v7496 + v7495 
                                    let v7498 : string = $"name = \"spiral_builder_{v7479}\""
                                    let v7499 : string = v7497 + v7328 
                                    let v7500 : string = v7499 + v7498 
                                    let v7501 : string = $"path = \"spiral_builder.rs\""
                                    let v7502 : string = v7500 + v7328 
                                    let v7503 : string = v7502 + v7501 
                                    let v7504 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v7505 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                    Fable.Core.RustInterop.emitRustExpr struct (v7467, v7503) v7505 
                                    let _v7504 = () 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let _v7504 = () 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let _v7504 = () 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let _v7504 = () 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let _v7504 = () 
                                    #endif
#else
                                    let v7506 : string = method39(v7503)
                                    System.IO.File.WriteAllText (v7467, v7506)
                                    let _v7504 = () 
                                    #endif
                                    _v7504 
                                    ()
                                let v7507 : string = "lib/rust/fable/fable_modules/fable-library-rust"
                                let v7508 : string = method15(v7285, v7507)
                                let v7509 : string = "fable_modules/fable-library-rust"
                                let v7510 : string = method15(v7294, v7509)
                                method101(v7508, v7510)
                                let struct (v7511 : int32, v7512 : string) = method102(v5759, v7294, v5832, v7325, v7271)
                                let v7513 : bool = v7511 <> 0 
                                let struct (v12406 : US1, v12407 : US1, v12408 : US1) =
                                    if v7513 then
                                        let v7516 : bool = State.trace_state.IsNone
                                        if v7516 then
                                            let v7517 : US0 = US0_0
                                            let struct (v7518 : Mut0, v7519 : Mut1, v7520 : Mut2, v7521 : Mut3, v7522 : int64 option) = method1(v7517)
                                            let v7523 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v7518, v7519, v7520, v7521, v7522) 
                                            State.trace_state <- v7523 
                                            ()
                                        let struct (v7528 : Mut0, v7529 : Mut1, v7530 : Mut2, v7531 : Mut3, v7532 : int64 option) = State.trace_state.Value
                                        let v7543 : bool = State.trace_state.IsNone
                                        if v7543 then
                                            let v7544 : US0 = US0_0
                                            let struct (v7545 : Mut0, v7546 : Mut1, v7547 : Mut2, v7548 : Mut3, v7549 : int64 option) = method1(v7544)
                                            let v7550 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v7545, v7546, v7547, v7548, v7549) 
                                            State.trace_state <- v7550 
                                            ()
                                        let struct (v7555 : Mut0, v7556 : Mut1, v7557 : Mut2, v7558 : Mut3, v7559 : int64 option) = State.trace_state.Value
                                        let v7570 : US0 = v7558.l0
                                        let v7571 : bool = v7557.l0
                                        let v7572 : bool = v7571 = false
                                        let v7575 : bool =
                                            if v7572 then
                                                false
                                            else
                                                let v7573 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v7570
                                                let v7574 : bool = 4 >= v7573
                                                v7574
                                        if v7575 then
                                            let v7576 : int64 = v7528.l0
                                            let v7577 : int64 = v7576 + 1L
                                            v7528.l0 <- v7577
                                            let v7578 : bool = State.trace_state.IsNone
                                            if v7578 then
                                                let v7579 : US0 = US0_0
                                                let struct (v7580 : Mut0, v7581 : Mut1, v7582 : Mut2, v7583 : Mut3, v7584 : int64 option) = method1(v7579)
                                                let v7585 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v7580, v7581, v7582, v7583, v7584) 
                                                State.trace_state <- v7585 
                                                ()
                                            let struct (v7590 : Mut0, v7591 : Mut1, v7592 : Mut2, v7593 : Mut3, v7594 : int64 option) = State.trace_state.Value
                                            let v7605 : unit = ()
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v7606 : US3 option = None
                                            let _v7606 = ref v7606 
                                            match v7594 with
                                            | Some x -> (
                                            (fun () ->
                                            (fun () ->
                                            let v7607 : int64 = x
                                            let v7608 : US3 = US3_0(v7607)
                                            v7608 
                                            )
                                            |> fun x -> x () |> Some
                                            ) () ) | None -> None
                                            |> fun x -> _v7606.Value <- x
                                            let v7609 : US3 option = _v7606.Value 
                                            let v7620 : US3 = US3_1
                                            let v7621 : US3 = v7609 |> Option.defaultValue v7620 
                                            let v7661 : System.DateTime =
                                                match v7621 with
                                                | US3_1 -> (* None *)
                                                    let v7657 : System.DateTime = System.DateTime.Now
                                                    v7657
                                                | US3_0(v7625) -> (* Some *)
                                                    let v7626 : System.DateTime = System.DateTime.Now
                                                    let v7629 : (System.DateTime -> int64) = _.Ticks
                                                    let v7630 : int64 = v7629 v7626
                                                    let v7633 : int64 = v7630 - v7625
                                                    let v7634 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                    let v7635 : System.TimeSpan = v7634 v7633
                                                    let v7638 : (System.TimeSpan -> int32) = _.Hours
                                                    let v7639 : int32 = v7638 v7635
                                                    let v7642 : (System.TimeSpan -> int32) = _.Minutes
                                                    let v7643 : int32 = v7642 v7635
                                                    let v7646 : (System.TimeSpan -> int32) = _.Seconds
                                                    let v7647 : int32 = v7646 v7635
                                                    let v7650 : (System.TimeSpan -> int32) = _.Milliseconds
                                                    let v7651 : int32 = v7650 v7635
                                                    let v7654 : System.DateTime = System.DateTime (1, 1, 1, v7639, v7643, v7647, v7651)
                                                    v7654
                                            let v7662 : string = method6()
                                            let v7665 : (string -> string) = v7661.ToString
                                            let v7666 : string = v7665 v7662
                                            let _v7605 = v7666 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v7669 : US3 option = None
                                            let _v7669 = ref v7669 
                                            match v7594 with
                                            | Some x -> (
                                            (fun () ->
                                            (fun () ->
                                            let v7670 : int64 = x
                                            let v7671 : US3 = US3_0(v7670)
                                            v7671 
                                            )
                                            |> fun x -> x () |> Some
                                            ) () ) | None -> None
                                            |> fun x -> _v7669.Value <- x
                                            let v7672 : US3 option = _v7669.Value 
                                            let v7683 : US3 = US3_1
                                            let v7684 : US3 = v7672 |> Option.defaultValue v7683 
                                            let v7724 : System.DateTime =
                                                match v7684 with
                                                | US3_1 -> (* None *)
                                                    let v7720 : System.DateTime = System.DateTime.Now
                                                    v7720
                                                | US3_0(v7688) -> (* Some *)
                                                    let v7689 : System.DateTime = System.DateTime.Now
                                                    let v7692 : (System.DateTime -> int64) = _.Ticks
                                                    let v7693 : int64 = v7692 v7689
                                                    let v7696 : int64 = v7693 - v7688
                                                    let v7697 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                    let v7698 : System.TimeSpan = v7697 v7696
                                                    let v7701 : (System.TimeSpan -> int32) = _.Hours
                                                    let v7702 : int32 = v7701 v7698
                                                    let v7705 : (System.TimeSpan -> int32) = _.Minutes
                                                    let v7706 : int32 = v7705 v7698
                                                    let v7709 : (System.TimeSpan -> int32) = _.Seconds
                                                    let v7710 : int32 = v7709 v7698
                                                    let v7713 : (System.TimeSpan -> int32) = _.Milliseconds
                                                    let v7714 : int32 = v7713 v7698
                                                    let v7717 : System.DateTime = System.DateTime (1, 1, 1, v7702, v7706, v7710, v7714)
                                                    v7717
                                            let v7725 : string = method6()
                                            let v7728 : (string -> string) = v7724.ToString
                                            let v7729 : string = v7728 v7725
                                            let _v7605 = v7729 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v7732 : string = $"near_sdk::env::block_timestamp()"
                                            let v7733 : uint64 = Fable.Core.RustInterop.emitRustExpr () v7732 
                                            let v7734 : US3 option = None
                                            let _v7734 = ref v7734 
                                            match v7594 with
                                            | Some x -> (
                                            (fun () ->
                                            (fun () ->
                                            let v7735 : int64 = x
                                            let v7736 : US3 = US3_0(v7735)
                                            v7736 
                                            )
                                            |> fun x -> x () |> Some
                                            ) () ) | None -> None
                                            |> fun x -> _v7734.Value <- x
                                            let v7737 : US3 option = _v7734.Value 
                                            let v7748 : US3 = US3_1
                                            let v7749 : US3 = v7737 |> Option.defaultValue v7748 
                                            let v7758 : uint64 =
                                                match v7749 with
                                                | US3_1 -> (* None *)
                                                    v7733
                                                | US3_0(v7753) -> (* Some *)
                                                    let v7754 : (int64 -> uint64) = uint64
                                                    let v7755 : uint64 = v7754 v7753
                                                    let v7756 : uint64 = v7733 - v7755
                                                    v7756
                                            let v7759 : uint64 = v7758 / 1000000000UL
                                            let v7760 : uint64 = v7759 % 60UL
                                            let v7761 : uint64 = v7759 / 60UL
                                            let v7762 : uint64 = v7761 % 60UL
                                            let v7763 : uint64 = v7759 / 3600UL
                                            let v7764 : uint64 = v7763 % 24UL
                                            let v7765 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
                                            let v7766 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v7764, v7762, v7760) v7765 
                                            let v7767 : string = "fable_library_rust::String_::fromString($0)"
                                            let v7768 : string = Fable.Core.RustInterop.emitRustExpr v7766 v7767 
                                            let _v7605 = v7768 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v7769 : US3 option = None
                                            let _v7769 = ref v7769 
                                            match v7594 with
                                            | Some x -> (
                                            (fun () ->
                                            (fun () ->
                                            let v7770 : int64 = x
                                            let v7771 : US3 = US3_0(v7770)
                                            v7771 
                                            )
                                            |> fun x -> x () |> Some
                                            ) () ) | None -> None
                                            |> fun x -> _v7769.Value <- x
                                            let v7772 : US3 option = _v7769.Value 
                                            let v7783 : US3 = US3_1
                                            let v7784 : US3 = v7772 |> Option.defaultValue v7783 
                                            let v7824 : System.DateTime =
                                                match v7784 with
                                                | US3_1 -> (* None *)
                                                    let v7820 : System.DateTime = System.DateTime.Now
                                                    v7820
                                                | US3_0(v7788) -> (* Some *)
                                                    let v7789 : System.DateTime = System.DateTime.Now
                                                    let v7792 : (System.DateTime -> int64) = _.Ticks
                                                    let v7793 : int64 = v7792 v7789
                                                    let v7796 : int64 = v7793 - v7788
                                                    let v7797 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                    let v7798 : System.TimeSpan = v7797 v7796
                                                    let v7801 : (System.TimeSpan -> int32) = _.Hours
                                                    let v7802 : int32 = v7801 v7798
                                                    let v7805 : (System.TimeSpan -> int32) = _.Minutes
                                                    let v7806 : int32 = v7805 v7798
                                                    let v7809 : (System.TimeSpan -> int32) = _.Seconds
                                                    let v7810 : int32 = v7809 v7798
                                                    let v7813 : (System.TimeSpan -> int32) = _.Milliseconds
                                                    let v7814 : int32 = v7813 v7798
                                                    let v7817 : System.DateTime = System.DateTime (1, 1, 1, v7802, v7806, v7810, v7814)
                                                    v7817
                                            let v7825 : string = method7()
                                            let v7828 : (string -> string) = v7824.ToString
                                            let v7829 : string = v7828 v7825
                                            let _v7605 = v7829 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v7832 : US3 option = None
                                            let _v7832 = ref v7832 
                                            match v7594 with
                                            | Some x -> (
                                            (fun () ->
                                            (fun () ->
                                            let v7833 : int64 = x
                                            let v7834 : US3 = US3_0(v7833)
                                            v7834 
                                            )
                                            |> fun x -> x () |> Some
                                            ) () ) | None -> None
                                            |> fun x -> _v7832.Value <- x
                                            let v7835 : US3 option = _v7832.Value 
                                            let v7846 : US3 = US3_1
                                            let v7847 : US3 = v7835 |> Option.defaultValue v7846 
                                            let v7887 : System.DateTime =
                                                match v7847 with
                                                | US3_1 -> (* None *)
                                                    let v7883 : System.DateTime = System.DateTime.Now
                                                    v7883
                                                | US3_0(v7851) -> (* Some *)
                                                    let v7852 : System.DateTime = System.DateTime.Now
                                                    let v7855 : (System.DateTime -> int64) = _.Ticks
                                                    let v7856 : int64 = v7855 v7852
                                                    let v7859 : int64 = v7856 - v7851
                                                    let v7860 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                    let v7861 : System.TimeSpan = v7860 v7859
                                                    let v7864 : (System.TimeSpan -> int32) = _.Hours
                                                    let v7865 : int32 = v7864 v7861
                                                    let v7868 : (System.TimeSpan -> int32) = _.Minutes
                                                    let v7869 : int32 = v7868 v7861
                                                    let v7872 : (System.TimeSpan -> int32) = _.Seconds
                                                    let v7873 : int32 = v7872 v7861
                                                    let v7876 : (System.TimeSpan -> int32) = _.Milliseconds
                                                    let v7877 : int32 = v7876 v7861
                                                    let v7880 : System.DateTime = System.DateTime (1, 1, 1, v7865, v7869, v7873, v7877)
                                                    v7880
                                            let v7888 : string = method7()
                                            let v7891 : (string -> string) = v7887.ToString
                                            let v7892 : string = v7891 v7888
                                            let _v7605 = v7892 
                                            #endif
#else
                                            let v7895 : US3 option = None
                                            let _v7895 = ref v7895 
                                            match v7594 with
                                            | Some x -> (
                                            (fun () ->
                                            (fun () ->
                                            let v7896 : int64 = x
                                            let v7897 : US3 = US3_0(v7896)
                                            v7897 
                                            )
                                            |> fun x -> x () |> Some
                                            ) () ) | None -> None
                                            |> fun x -> _v7895.Value <- x
                                            let v7898 : US3 option = _v7895.Value 
                                            let v7909 : US3 = US3_1
                                            let v7910 : US3 = v7898 |> Option.defaultValue v7909 
                                            let v7950 : System.DateTime =
                                                match v7910 with
                                                | US3_1 -> (* None *)
                                                    let v7946 : System.DateTime = System.DateTime.Now
                                                    v7946
                                                | US3_0(v7914) -> (* Some *)
                                                    let v7915 : System.DateTime = System.DateTime.Now
                                                    let v7918 : (System.DateTime -> int64) = _.Ticks
                                                    let v7919 : int64 = v7918 v7915
                                                    let v7922 : int64 = v7919 - v7914
                                                    let v7923 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                    let v7924 : System.TimeSpan = v7923 v7922
                                                    let v7927 : (System.TimeSpan -> int32) = _.Hours
                                                    let v7928 : int32 = v7927 v7924
                                                    let v7931 : (System.TimeSpan -> int32) = _.Minutes
                                                    let v7932 : int32 = v7931 v7924
                                                    let v7935 : (System.TimeSpan -> int32) = _.Seconds
                                                    let v7936 : int32 = v7935 v7924
                                                    let v7939 : (System.TimeSpan -> int32) = _.Milliseconds
                                                    let v7940 : int32 = v7939 v7924
                                                    let v7943 : System.DateTime = System.DateTime (1, 1, 1, v7928, v7932, v7936, v7940)
                                                    v7943
                                            let v7951 : string = method7()
                                            let v7954 : (string -> string) = v7950.ToString
                                            let v7955 : string = v7954 v7951
                                            let _v7605 = v7955 
                                            #endif
                                            let v7958 : string = _v7605 
                                            let v8023 : string = "Critical"
                                            let v8024 : (unit -> string) = v8023.ToLower
                                            let v8025 : string = v8024 ()
                                            let v8028 : string = v8025.PadLeft (7, ' ')
                                            let v8042 : unit = ()
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v8043 : string = "inline_colorization::color_bright_red"
                                            let v8044 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v8043 
                                            let v8045 : string = "&*$0"
                                            let v8046 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8028 v8045 
                                            let v8047 : string = "inline_colorization::color_reset"
                                            let v8048 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v8047 
                                            let v8049 : string = "\"{v8044}{v8046}{v8048}\""
                                            let v8050 : string = @$"format!(" + v8049 + ")"
                                            let v8051 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v8050 
                                            let v8052 : string = "fable_library_rust::String_::fromString($0)"
                                            let v8053 : string = Fable.Core.RustInterop.emitRustExpr v8051 v8052 
                                            let _v8042 = v8053 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v8054 : string = "inline_colorization::color_bright_red"
                                            let v8055 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v8054 
                                            let v8056 : string = "&*$0"
                                            let v8057 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8028 v8056 
                                            let v8058 : string = "inline_colorization::color_reset"
                                            let v8059 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v8058 
                                            let v8060 : string = "\"{v8055}{v8057}{v8059}\""
                                            let v8061 : string = @$"format!(" + v8060 + ")"
                                            let v8062 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v8061 
                                            let v8063 : string = "fable_library_rust::String_::fromString($0)"
                                            let v8064 : string = Fable.Core.RustInterop.emitRustExpr v8062 v8063 
                                            let _v8042 = v8064 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v8065 : string = "inline_colorization::color_bright_red"
                                            let v8066 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v8065 
                                            let v8067 : string = "&*$0"
                                            let v8068 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8028 v8067 
                                            let v8069 : string = "inline_colorization::color_reset"
                                            let v8070 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v8069 
                                            let v8071 : string = "\"{v8066}{v8068}{v8070}\""
                                            let v8072 : string = @$"format!(" + v8071 + ")"
                                            let v8073 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v8072 
                                            let v8074 : string = "fable_library_rust::String_::fromString($0)"
                                            let v8075 : string = Fable.Core.RustInterop.emitRustExpr v8073 v8074 
                                            let _v8042 = v8075 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v8076 : string = "\u001b[91m"
                                            let v8077 : string = method8()
                                            let v8078 : string = v8076 + v8028 
                                            let v8079 : string = v8078 + v8077 
                                            let _v8042 = v8079 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v8080 : string = "\u001b[91m"
                                            let v8081 : string = method8()
                                            let v8082 : string = v8080 + v8028 
                                            let v8083 : string = v8082 + v8081 
                                            let _v8042 = v8083 
                                            #endif
#else
                                            let v8084 : string = "\u001b[91m"
                                            let v8085 : string = method8()
                                            let v8086 : string = v8084 + v8028 
                                            let v8087 : string = v8086 + v8085 
                                            let _v8042 = v8087 
                                            #endif
                                            let v8088 : string = _v8042 
                                            let v8094 : int64 = v7590.l0
                                            let v8095 : string = method9()
                                            let v8096 : Mut4 = {l0 = v8095} : Mut4
                                            let v8097 : string = $"{v5814}"
                                            let v8100 : string = v8096.l0
                                            let v8101 : string = v8100 + v8097 
                                            v8096.l0 <- v8101
                                            let v8102 : string = "exit_code"
                                            let v8103 : string = $"{v8102}"
                                            let v8106 : string = v8096.l0
                                            let v8107 : string = v8106 + v8103 
                                            v8096.l0 <- v8107
                                            let v8108 : string = $"{v5826}"
                                            let v8111 : string = v8096.l0
                                            let v8112 : string = v8111 + v8108 
                                            v8096.l0 <- v8112
                                            let v8113 : string = $"{v7511}"
                                            let v8116 : string = v8096.l0
                                            let v8117 : string = v8116 + v8113 
                                            v8096.l0 <- v8117
                                            let v8118 : string = $"{v5838}"
                                            let v8121 : string = v8096.l0
                                            let v8122 : string = v8121 + v8118 
                                            v8096.l0 <- v8122
                                            let v8123 : string = "dotnet_fable_result"
                                            let v8124 : string = $"{v8123}"
                                            let v8127 : string = v8096.l0
                                            let v8128 : string = v8127 + v8124 
                                            v8096.l0 <- v8128
                                            let v8129 : string = $"{v5826}"
                                            let v8132 : string = v8096.l0
                                            let v8133 : string = v8132 + v8129 
                                            v8096.l0 <- v8133
                                            let v8134 : string = $"{v7512}"
                                            let v8137 : string = v8096.l0
                                            let v8138 : string = v8137 + v8134 
                                            v8096.l0 <- v8138
                                            let v8139 : string = $"{v5884}"
                                            let v8142 : string = v8096.l0
                                            let v8143 : string = v8142 + v8139 
                                            v8096.l0 <- v8143
                                            let v8144 : string = v8096.l0
                                            let v8145 : (unit -> string) = closure55()
                                            let v8146 : string = $"{v7958} {v8088} #{v8094} %s{v8145 ()} / {v8144}"
                                            let v8149 : char list = []
                                            let v8150 : (char list -> (char [])) = List.toArray
                                            let v8151 : (char []) = v8150 v8149
                                            let v8154 : string = v8146.TrimStart v8151 
                                            let v8172 : char list = []
                                            let v8173 : char list = '/' :: v8172 
                                            let v8176 : char list = ' ' :: v8173 
                                            let v8179 : (char list -> (char [])) = List.toArray
                                            let v8180 : (char []) = v8179 v8176
                                            let v8183 : string = v8154.TrimEnd v8180 
                                            let v8201 : unit = ()
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v8202 : string = @"println!(""{}"", $0)"
                                            Fable.Core.RustInterop.emitRustExpr v8183 v8202 
                                            let _v8201 = () 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v8203 : string = @"println!(""{}"", $0)"
                                            Fable.Core.RustInterop.emitRustExpr v8183 v8203 
                                            let _v8201 = () 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v8204 : string = $"near_sdk::log!(\"{{}}\", $0)"
                                            Fable.Core.RustInterop.emitRustExpr v8183 v8204 
                                            let _v8201 = () 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            System.Console.WriteLine v8183 
                                            let _v8201 = () 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            System.Console.WriteLine v8183 
                                            let _v8201 = () 
                                            #endif
#else
                                            System.Console.WriteLine v8183 
                                            let _v8201 = () 
                                            #endif
                                            _v8201 
                                            let v8205 : (string -> unit) = v7529.l0
                                            v8205 v8183
                                        let v8206 : US1 = US1_0(v5832)
                                        let v8207 : US1 = US1_1
                                        let v8208 : US1 = US1_0(v7512)
                                        struct (v8206, v8207, v8208)
                                    else
                                        let v8209 : bool =
                                            match v5759 with
                                            | US33_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v8236 : Vec<std_string_String> =
                                            if v8209 then
                                                v5742
                                            else
                                                let v8210 : (std_string_String -> bool) = method105()
                                                let v8211 : Vec<std_string_String> = method106(v5742)
                                                let v8212 : string = "v8211.into_iter().filter(|x| v8210(x.clone().clone())).collect::<Vec<_>>()"
                                                let v8213 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v8212 
                                                let v8214 : string = "$0.len()"
                                                let v8215 : unativeint = Fable.Core.RustInterop.emitRustExpr v8213 v8214 
                                                let v8216 : (unativeint -> int32) = int32
                                                let v8217 : int32 = v8216 v8215
                                                let v8218 : bool = v8217 > 0
                                                if v8218 then
                                                    v5742
                                                else
                                                    let v8219 : string = "&*$0"
                                                    let v8220 : string = "near-sdk"
                                                    let v8221 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8220 v8219 
                                                    let v8222 : string = "String::from($0)"
                                                    let v8223 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8221 v8222 
                                                    let v8224 : (std_string_String []) = [|v8223|]
                                                    let v8225 : string = "$0.to_vec()"
                                                    let v8226 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v8224 v8225 
                                                    let v8227 : Vec<std_string_String> = method107(v8226)
                                                    let v8228 : Vec<std_string_String> = method108(v5742)
                                                    let v8229 : string = "true; let mut v8228 = v8228"
                                                    let v8230 : bool = Fable.Core.RustInterop.emitRustExpr () v8229 
                                                    let v8231 : string = "true; v8228.extend(v8227)"
                                                    let v8232 : bool = Fable.Core.RustInterop.emitRustExpr () v8231 
                                                    let v8233 : string = "v8228"
                                                    let v8234 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v8233 
                                                    v8234
                                        let v8237 : string = "true; let _result : Vec<_> = v8236.into_iter().map(|x| { //"
                                        let v8238 : bool = Fable.Core.RustInterop.emitRustExpr () v8237 
                                        let v8239 : string = "x"
                                        let v8240 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v8239 
                                        let v8241 : string = "fable_library_rust::String_::fromString($0)"
                                        let v8242 : string = Fable.Core.RustInterop.emitRustExpr v8240 v8241 
                                        let v8243 : string = "="
                                        let v8244 : bool = v8242.Contains v8243 
                                        let v8255 : string =
                                            if v8244 then
                                                v8242
                                            else
                                                let v8247 : string = "]"
                                                let v8248 : bool = v8242.EndsWith v8247 
                                                if v8248 then
                                                    let v8249 : string = $"={{version='*',features=["
                                                    let v8250 : string = "["
                                                    let v8251 : string = v8242.Replace (v8250, v8249)
                                                    let v8252 : string = $"{v8251}}}"
                                                    v8252
                                                else
                                                    let v8253 : string = $"{v8242}='*'"
                                                    v8253
                                        let v8256 : string = "true; $0 }).collect::<Vec<_>>()"
                                        let v8257 : bool = Fable.Core.RustInterop.emitRustExpr v8255 v8256 
                                        let v8258 : string = "_result"
                                        let v8259 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v8258 
                                        let v8260 : string = "fable_library_rust::NativeArray_::array_from($0)"
                                        let v8261 : (string []) = Fable.Core.RustInterop.emitRustExpr v8259 v8260 
                                        let v8262 : string seq = seq { for i = 0 to v8261.Length - 1 do yield v8261.[i] }
                                        let v8265 : (string -> (string seq -> string)) = String.concat
                                        let v8266 : (string seq -> string) = v8265 v7328
                                        let v8267 : string = v8266 v8262
                                        let v8270 : string = $"[package]"
                                        let v8271 : string = $"name = \"spiral_builder_{v5891}\""
                                        let v8272 : string = v8270 + v7328 
                                        let v8273 : string = v8272 + v8271 
                                        let v8274 : string = $"version = \"0.0.1\""
                                        let v8275 : string = v8273 + v7328 
                                        let v8276 : string = v8275 + v8274 
                                        let v8277 : string = $"edition = \"2021\""
                                        let v8278 : string = v8276 + v7328 
                                        let v8279 : string = v8278 + v8277 
                                        let v8280 : string = $""
                                        let v8281 : string = v8279 + v7328 
                                        let v8282 : string = v8281 + v8280 
                                        let v8283 : string = $"[dependencies]"
                                        let v8284 : string = v8282 + v7328 
                                        let v8285 : string = v8284 + v8283 
                                        let v8286 : bool =
                                            match v5759 with
                                            | US33_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v8289 : string =
                                            if v8286 then
                                                let v8287 : string = $"fable_library_rust = {{ workspace = true, features = [\"static_do_bindings\", \"datetime\", \"guid\", \"threaded\"] }}"
                                                v8287
                                            else
                                                let v8288 : string = $"fable_library_rust = {{ workspace = true }}"
                                                v8288
                                        let v8290 : string = v8285 + v7328 
                                        let v8291 : string = v8290 + v8289 
                                        let v8292 : string = $"inline_colorization = {{ workspace = true }}"
                                        let v8293 : string = v8291 + v7328 
                                        let v8294 : string = v8293 + v8292 
                                        let v8295 : string = $"{v8267}"
                                        let v8296 : string = v8294 + v7328 
                                        let v8297 : string = v8296 + v8295 
                                        let v8298 : string = $""
                                        let v8299 : string = v8297 + v7328 
                                        let v8300 : string = v8299 + v8298 
                                        let v8301 : bool =
                                            match v5759 with
                                            | US33_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v8310 : string =
                                            if v8301 then
                                                let v8302 : string = $"[[bin]]"
                                                let v8303 : string = $"name = \"spiral_builder_{v5891}\""
                                                let v8304 : string = v8302 + v7328 
                                                let v8305 : string = v8304 + v8303 
                                                v8305
                                            else
                                                let v8306 : string = $"[lib]"
                                                let v8307 : string = $"crate-type = [\"cdylib\"]"
                                                let v8308 : string = v8306 + v7328 
                                                let v8309 : string = v8308 + v8307 
                                                v8309
                                        let v8311 : string = v8300 + v7328 
                                        let v8312 : string = v8311 + v8310 
                                        let v8313 : string = $"path = \"spiral_builder.rs\" "
                                        let v8314 : string = v8312 + v7328 
                                        let v8315 : string = v8314 + v8313 
                                        let v8316 : string = method85(v7285)
                                        let v8317 : string = $"cargo-features = [\"profile-rustflags\"]"
                                        let v8318 : string = $""
                                        let v8319 : string = v8317 + v7328 
                                        let v8320 : string = v8319 + v8318 
                                        let v8321 : string = $"[workspace]"
                                        let v8322 : string = v8320 + v7328 
                                        let v8323 : string = v8322 + v8321 
                                        let v8324 : string = $"resolver = \"2\""
                                        let v8325 : string = v8323 + v7328 
                                        let v8326 : string = v8325 + v8324 
                                        let v8327 : string = $"members = [\"packages/Rust/*\"]"
                                        let v8328 : string = v8326 + v7328 
                                        let v8329 : string = v8328 + v8327 
                                        let v8330 : string = $""
                                        let v8331 : string = v8329 + v7328 
                                        let v8332 : string = v8331 + v8330 
                                        let v8333 : string = $"[workspace.dependencies.fable_library_rust]"
                                        let v8334 : string = v8332 + v7328 
                                        let v8335 : string = v8334 + v8333 
                                        let v8336 : string = $"path = \"{v8316}/lib/rust/fable/fable_modules/fable-library-rust\""
                                        let v8337 : string = v8335 + v7328 
                                        let v8338 : string = v8337 + v8336 
                                        let v8339 : string = $"default-features = false"
                                        let v8340 : string = v8338 + v7328 
                                        let v8341 : string = v8340 + v8339 
                                        let v8342 : string = $"features = []"
                                        let v8343 : string = v8341 + v7328 
                                        let v8344 : string = v8343 + v8342 
                                        let v8345 : string = $""
                                        let v8346 : string = v8344 + v7328 
                                        let v8347 : string = v8346 + v8345 
                                        let v8348 : string = $"[workspace.dependencies]"
                                        let v8349 : string = v8347 + v7328 
                                        let v8350 : string = v8349 + v8348 
                                        let v8351 : string = $"inline_colorization = \"~0.1\""
                                        let v8352 : string = v8350 + v7328 
                                        let v8353 : string = v8352 + v8351 
                                        let v8354 : string = $""
                                        let v8355 : string = v8353 + v7328 
                                        let v8356 : string = v8355 + v8354 
                                        let v8357 : string = $"[profile.release]"
                                        let v8358 : string = v8356 + v7328 
                                        let v8359 : string = v8358 + v8357 
                                        let v8360 : string = $"codegen-units = 1"
                                        let v8361 : string = v8359 + v7328 
                                        let v8362 : string = v8361 + v8360 
                                        let v8363 : string = $"opt-level = \"z\""
                                        let v8364 : string = v8362 + v7328 
                                        let v8365 : string = v8364 + v8363 
                                        let v8366 : string = $"lto = true"
                                        let v8367 : string = v8365 + v7328 
                                        let v8368 : string = v8367 + v8366 
                                        let v8369 : string = $"debug = false"
                                        let v8370 : string = v8368 + v7328 
                                        let v8371 : string = v8370 + v8369 
                                        let v8372 : string = $"panic = \"abort\""
                                        let v8373 : string = v8371 + v7328 
                                        let v8374 : string = v8373 + v8372 
                                        let v8375 : string = $"overflow-checks = true"
                                        let v8376 : string = v8374 + v7328 
                                        let v8377 : string = v8376 + v8375 
                                        let v8378 : string = $"rustflags = [\"-C\", \"link-arg=-s\"]"
                                        let v8379 : string = v8377 + v7328 
                                        let v8380 : string = v8379 + v8378 
                                        method25(v7467, v8315)
                                        method25(v7427, v8380)
                                        let v8381 : string = "src/Range.rs"
                                        let v8382 : string = method15(v7510, v8381)
                                        let v8383 : bool = method27(v8382)
                                        if v8383 then
                                            let v8384 : unit = ()
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v8385 : unit = ()
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v8386 : string = "std::fs::read(&*$0)"
                                            let v8387 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v8382 v8386 
                                            let v8388 : string = "$0.unwrap()"
                                            let v8389 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8387 v8388 
                                            let _v8385 = v8389 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v8390 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _v8385 = v8390 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v8393 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _v8385 = v8393 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v8396 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _v8385 = v8396 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v8399 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _v8385 = v8399 
                                            #endif
#else
                                            let v8402 : (uint8 []) = v8382 |> System.IO.File.ReadAllBytes
                                            let v8403 : string = "$0.to_vec()"
                                            let v8404 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8402 v8403 
                                            let _v8385 = v8404 
                                            #endif
                                            let v8405 : Vec<uint8> = _v8385 
                                            let v8410 : Vec<uint8> = method14(v8405)
                                            let v8411 : string = "std::string::String::from_utf8($0)"
                                            let v8412 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v8410 v8411 
                                            let v8413 : string = "$0.unwrap()"
                                            let v8414 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8412 v8413 
                                            let v8415 : string = "fable_library_rust::String_::fromString($0)"
                                            let v8416 : string = Fable.Core.RustInterop.emitRustExpr v8414 v8415 
                                            let _v8384 = v8416 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v8417 : string = null |> unbox<string>
                                            let _v8384 = v8417 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v8420 : string = null |> unbox<string>
                                            let _v8384 = v8420 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v8423 : string = null |> unbox<string>
                                            let _v8384 = v8423 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v8426 : string = null |> unbox<string>
                                            let _v8384 = v8426 
                                            #endif
#else
                                            let v8429 : string = v8382 |> System.IO.File.ReadAllText
                                            let _v8384 = v8429 
                                            #endif
                                            let v8430 : string = _v8384 
                                            let v8435 : string = "use crate::String_::fromCharCode;"
                                            let v8436 : string = "use crate::String_::fromChar;"
                                            let v8437 : string = v8430.Replace (v8435, v8436)
                                            let v8438 : string = "fromCharCode(c)"
                                            let v8439 : string = "std::char::from_u32(c).unwrap()"
                                            let v8440 : string = v8437.Replace (v8438, v8439)
                                            method25(v8382, v8440)
                                        let v8441 : uint8 = 1uy
                                        let struct (v8442 : int32, v8443 : string) = method109(v7271, v7467, v8441)
                                        let v8444 : bool = v8442 <> 0 
                                        if v8444 then
                                            let v8447 : bool = State.trace_state.IsNone
                                            if v8447 then
                                                let v8448 : US0 = US0_0
                                                let struct (v8449 : Mut0, v8450 : Mut1, v8451 : Mut2, v8452 : Mut3, v8453 : int64 option) = method1(v8448)
                                                let v8454 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v8449, v8450, v8451, v8452, v8453) 
                                                State.trace_state <- v8454 
                                                ()
                                            let struct (v8459 : Mut0, v8460 : Mut1, v8461 : Mut2, v8462 : Mut3, v8463 : int64 option) = State.trace_state.Value
                                            let v8474 : bool = State.trace_state.IsNone
                                            if v8474 then
                                                let v8475 : US0 = US0_0
                                                let struct (v8476 : Mut0, v8477 : Mut1, v8478 : Mut2, v8479 : Mut3, v8480 : int64 option) = method1(v8475)
                                                let v8481 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v8476, v8477, v8478, v8479, v8480) 
                                                State.trace_state <- v8481 
                                                ()
                                            let struct (v8486 : Mut0, v8487 : Mut1, v8488 : Mut2, v8489 : Mut3, v8490 : int64 option) = State.trace_state.Value
                                            let v8501 : US0 = v8489.l0
                                            let v8502 : bool = v8488.l0
                                            let v8503 : bool = v8502 = false
                                            let v8506 : bool =
                                                if v8503 then
                                                    false
                                                else
                                                    let v8504 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v8501
                                                    let v8505 : bool = 4 >= v8504
                                                    v8505
                                            if v8506 then
                                                let v8507 : int64 = v8459.l0
                                                let v8508 : int64 = v8507 + 1L
                                                v8459.l0 <- v8508
                                                let v8509 : bool = State.trace_state.IsNone
                                                if v8509 then
                                                    let v8510 : US0 = US0_0
                                                    let struct (v8511 : Mut0, v8512 : Mut1, v8513 : Mut2, v8514 : Mut3, v8515 : int64 option) = method1(v8510)
                                                    let v8516 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v8511, v8512, v8513, v8514, v8515) 
                                                    State.trace_state <- v8516 
                                                    ()
                                                let struct (v8521 : Mut0, v8522 : Mut1, v8523 : Mut2, v8524 : Mut3, v8525 : int64 option) = State.trace_state.Value
                                                let v8536 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v8537 : US3 option = None
                                                let _v8537 = ref v8537 
                                                match v8525 with
                                                | Some x -> (
                                                (fun () ->
                                                (fun () ->
                                                let v8538 : int64 = x
                                                let v8539 : US3 = US3_0(v8538)
                                                v8539 
                                                )
                                                |> fun x -> x () |> Some
                                                ) () ) | None -> None
                                                |> fun x -> _v8537.Value <- x
                                                let v8540 : US3 option = _v8537.Value 
                                                let v8551 : US3 = US3_1
                                                let v8552 : US3 = v8540 |> Option.defaultValue v8551 
                                                let v8592 : System.DateTime =
                                                    match v8552 with
                                                    | US3_1 -> (* None *)
                                                        let v8588 : System.DateTime = System.DateTime.Now
                                                        v8588
                                                    | US3_0(v8556) -> (* Some *)
                                                        let v8557 : System.DateTime = System.DateTime.Now
                                                        let v8560 : (System.DateTime -> int64) = _.Ticks
                                                        let v8561 : int64 = v8560 v8557
                                                        let v8564 : int64 = v8561 - v8556
                                                        let v8565 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                        let v8566 : System.TimeSpan = v8565 v8564
                                                        let v8569 : (System.TimeSpan -> int32) = _.Hours
                                                        let v8570 : int32 = v8569 v8566
                                                        let v8573 : (System.TimeSpan -> int32) = _.Minutes
                                                        let v8574 : int32 = v8573 v8566
                                                        let v8577 : (System.TimeSpan -> int32) = _.Seconds
                                                        let v8578 : int32 = v8577 v8566
                                                        let v8581 : (System.TimeSpan -> int32) = _.Milliseconds
                                                        let v8582 : int32 = v8581 v8566
                                                        let v8585 : System.DateTime = System.DateTime (1, 1, 1, v8570, v8574, v8578, v8582)
                                                        v8585
                                                let v8593 : string = method6()
                                                let v8596 : (string -> string) = v8592.ToString
                                                let v8597 : string = v8596 v8593
                                                let _v8536 = v8597 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v8600 : US3 option = None
                                                let _v8600 = ref v8600 
                                                match v8525 with
                                                | Some x -> (
                                                (fun () ->
                                                (fun () ->
                                                let v8601 : int64 = x
                                                let v8602 : US3 = US3_0(v8601)
                                                v8602 
                                                )
                                                |> fun x -> x () |> Some
                                                ) () ) | None -> None
                                                |> fun x -> _v8600.Value <- x
                                                let v8603 : US3 option = _v8600.Value 
                                                let v8614 : US3 = US3_1
                                                let v8615 : US3 = v8603 |> Option.defaultValue v8614 
                                                let v8655 : System.DateTime =
                                                    match v8615 with
                                                    | US3_1 -> (* None *)
                                                        let v8651 : System.DateTime = System.DateTime.Now
                                                        v8651
                                                    | US3_0(v8619) -> (* Some *)
                                                        let v8620 : System.DateTime = System.DateTime.Now
                                                        let v8623 : (System.DateTime -> int64) = _.Ticks
                                                        let v8624 : int64 = v8623 v8620
                                                        let v8627 : int64 = v8624 - v8619
                                                        let v8628 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                        let v8629 : System.TimeSpan = v8628 v8627
                                                        let v8632 : (System.TimeSpan -> int32) = _.Hours
                                                        let v8633 : int32 = v8632 v8629
                                                        let v8636 : (System.TimeSpan -> int32) = _.Minutes
                                                        let v8637 : int32 = v8636 v8629
                                                        let v8640 : (System.TimeSpan -> int32) = _.Seconds
                                                        let v8641 : int32 = v8640 v8629
                                                        let v8644 : (System.TimeSpan -> int32) = _.Milliseconds
                                                        let v8645 : int32 = v8644 v8629
                                                        let v8648 : System.DateTime = System.DateTime (1, 1, 1, v8633, v8637, v8641, v8645)
                                                        v8648
                                                let v8656 : string = method6()
                                                let v8659 : (string -> string) = v8655.ToString
                                                let v8660 : string = v8659 v8656
                                                let _v8536 = v8660 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v8663 : string = $"near_sdk::env::block_timestamp()"
                                                let v8664 : uint64 = Fable.Core.RustInterop.emitRustExpr () v8663 
                                                let v8665 : US3 option = None
                                                let _v8665 = ref v8665 
                                                match v8525 with
                                                | Some x -> (
                                                (fun () ->
                                                (fun () ->
                                                let v8666 : int64 = x
                                                let v8667 : US3 = US3_0(v8666)
                                                v8667 
                                                )
                                                |> fun x -> x () |> Some
                                                ) () ) | None -> None
                                                |> fun x -> _v8665.Value <- x
                                                let v8668 : US3 option = _v8665.Value 
                                                let v8679 : US3 = US3_1
                                                let v8680 : US3 = v8668 |> Option.defaultValue v8679 
                                                let v8689 : uint64 =
                                                    match v8680 with
                                                    | US3_1 -> (* None *)
                                                        v8664
                                                    | US3_0(v8684) -> (* Some *)
                                                        let v8685 : (int64 -> uint64) = uint64
                                                        let v8686 : uint64 = v8685 v8684
                                                        let v8687 : uint64 = v8664 - v8686
                                                        v8687
                                                let v8690 : uint64 = v8689 / 1000000000UL
                                                let v8691 : uint64 = v8690 % 60UL
                                                let v8692 : uint64 = v8690 / 60UL
                                                let v8693 : uint64 = v8692 % 60UL
                                                let v8694 : uint64 = v8690 / 3600UL
                                                let v8695 : uint64 = v8694 % 24UL
                                                let v8696 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
                                                let v8697 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v8695, v8693, v8691) v8696 
                                                let v8698 : string = "fable_library_rust::String_::fromString($0)"
                                                let v8699 : string = Fable.Core.RustInterop.emitRustExpr v8697 v8698 
                                                let _v8536 = v8699 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v8700 : US3 option = None
                                                let _v8700 = ref v8700 
                                                match v8525 with
                                                | Some x -> (
                                                (fun () ->
                                                (fun () ->
                                                let v8701 : int64 = x
                                                let v8702 : US3 = US3_0(v8701)
                                                v8702 
                                                )
                                                |> fun x -> x () |> Some
                                                ) () ) | None -> None
                                                |> fun x -> _v8700.Value <- x
                                                let v8703 : US3 option = _v8700.Value 
                                                let v8714 : US3 = US3_1
                                                let v8715 : US3 = v8703 |> Option.defaultValue v8714 
                                                let v8755 : System.DateTime =
                                                    match v8715 with
                                                    | US3_1 -> (* None *)
                                                        let v8751 : System.DateTime = System.DateTime.Now
                                                        v8751
                                                    | US3_0(v8719) -> (* Some *)
                                                        let v8720 : System.DateTime = System.DateTime.Now
                                                        let v8723 : (System.DateTime -> int64) = _.Ticks
                                                        let v8724 : int64 = v8723 v8720
                                                        let v8727 : int64 = v8724 - v8719
                                                        let v8728 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                        let v8729 : System.TimeSpan = v8728 v8727
                                                        let v8732 : (System.TimeSpan -> int32) = _.Hours
                                                        let v8733 : int32 = v8732 v8729
                                                        let v8736 : (System.TimeSpan -> int32) = _.Minutes
                                                        let v8737 : int32 = v8736 v8729
                                                        let v8740 : (System.TimeSpan -> int32) = _.Seconds
                                                        let v8741 : int32 = v8740 v8729
                                                        let v8744 : (System.TimeSpan -> int32) = _.Milliseconds
                                                        let v8745 : int32 = v8744 v8729
                                                        let v8748 : System.DateTime = System.DateTime (1, 1, 1, v8733, v8737, v8741, v8745)
                                                        v8748
                                                let v8756 : string = method7()
                                                let v8759 : (string -> string) = v8755.ToString
                                                let v8760 : string = v8759 v8756
                                                let _v8536 = v8760 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v8763 : US3 option = None
                                                let _v8763 = ref v8763 
                                                match v8525 with
                                                | Some x -> (
                                                (fun () ->
                                                (fun () ->
                                                let v8764 : int64 = x
                                                let v8765 : US3 = US3_0(v8764)
                                                v8765 
                                                )
                                                |> fun x -> x () |> Some
                                                ) () ) | None -> None
                                                |> fun x -> _v8763.Value <- x
                                                let v8766 : US3 option = _v8763.Value 
                                                let v8777 : US3 = US3_1
                                                let v8778 : US3 = v8766 |> Option.defaultValue v8777 
                                                let v8818 : System.DateTime =
                                                    match v8778 with
                                                    | US3_1 -> (* None *)
                                                        let v8814 : System.DateTime = System.DateTime.Now
                                                        v8814
                                                    | US3_0(v8782) -> (* Some *)
                                                        let v8783 : System.DateTime = System.DateTime.Now
                                                        let v8786 : (System.DateTime -> int64) = _.Ticks
                                                        let v8787 : int64 = v8786 v8783
                                                        let v8790 : int64 = v8787 - v8782
                                                        let v8791 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                        let v8792 : System.TimeSpan = v8791 v8790
                                                        let v8795 : (System.TimeSpan -> int32) = _.Hours
                                                        let v8796 : int32 = v8795 v8792
                                                        let v8799 : (System.TimeSpan -> int32) = _.Minutes
                                                        let v8800 : int32 = v8799 v8792
                                                        let v8803 : (System.TimeSpan -> int32) = _.Seconds
                                                        let v8804 : int32 = v8803 v8792
                                                        let v8807 : (System.TimeSpan -> int32) = _.Milliseconds
                                                        let v8808 : int32 = v8807 v8792
                                                        let v8811 : System.DateTime = System.DateTime (1, 1, 1, v8796, v8800, v8804, v8808)
                                                        v8811
                                                let v8819 : string = method7()
                                                let v8822 : (string -> string) = v8818.ToString
                                                let v8823 : string = v8822 v8819
                                                let _v8536 = v8823 
                                                #endif
#else
                                                let v8826 : US3 option = None
                                                let _v8826 = ref v8826 
                                                match v8525 with
                                                | Some x -> (
                                                (fun () ->
                                                (fun () ->
                                                let v8827 : int64 = x
                                                let v8828 : US3 = US3_0(v8827)
                                                v8828 
                                                )
                                                |> fun x -> x () |> Some
                                                ) () ) | None -> None
                                                |> fun x -> _v8826.Value <- x
                                                let v8829 : US3 option = _v8826.Value 
                                                let v8840 : US3 = US3_1
                                                let v8841 : US3 = v8829 |> Option.defaultValue v8840 
                                                let v8881 : System.DateTime =
                                                    match v8841 with
                                                    | US3_1 -> (* None *)
                                                        let v8877 : System.DateTime = System.DateTime.Now
                                                        v8877
                                                    | US3_0(v8845) -> (* Some *)
                                                        let v8846 : System.DateTime = System.DateTime.Now
                                                        let v8849 : (System.DateTime -> int64) = _.Ticks
                                                        let v8850 : int64 = v8849 v8846
                                                        let v8853 : int64 = v8850 - v8845
                                                        let v8854 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                        let v8855 : System.TimeSpan = v8854 v8853
                                                        let v8858 : (System.TimeSpan -> int32) = _.Hours
                                                        let v8859 : int32 = v8858 v8855
                                                        let v8862 : (System.TimeSpan -> int32) = _.Minutes
                                                        let v8863 : int32 = v8862 v8855
                                                        let v8866 : (System.TimeSpan -> int32) = _.Seconds
                                                        let v8867 : int32 = v8866 v8855
                                                        let v8870 : (System.TimeSpan -> int32) = _.Milliseconds
                                                        let v8871 : int32 = v8870 v8855
                                                        let v8874 : System.DateTime = System.DateTime (1, 1, 1, v8859, v8863, v8867, v8871)
                                                        v8874
                                                let v8882 : string = method7()
                                                let v8885 : (string -> string) = v8881.ToString
                                                let v8886 : string = v8885 v8882
                                                let _v8536 = v8886 
                                                #endif
                                                let v8889 : string = _v8536 
                                                let v8954 : string = "Critical"
                                                let v8955 : (unit -> string) = v8954.ToLower
                                                let v8956 : string = v8955 ()
                                                let v8959 : string = v8956.PadLeft (7, ' ')
                                                let v8973 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v8974 : string = "inline_colorization::color_bright_red"
                                                let v8975 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v8974 
                                                let v8976 : string = "&*$0"
                                                let v8977 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8959 v8976 
                                                let v8978 : string = "inline_colorization::color_reset"
                                                let v8979 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v8978 
                                                let v8980 : string = "\"{v8975}{v8977}{v8979}\""
                                                let v8981 : string = @$"format!(" + v8980 + ")"
                                                let v8982 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v8981 
                                                let v8983 : string = "fable_library_rust::String_::fromString($0)"
                                                let v8984 : string = Fable.Core.RustInterop.emitRustExpr v8982 v8983 
                                                let _v8973 = v8984 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v8985 : string = "inline_colorization::color_bright_red"
                                                let v8986 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v8985 
                                                let v8987 : string = "&*$0"
                                                let v8988 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8959 v8987 
                                                let v8989 : string = "inline_colorization::color_reset"
                                                let v8990 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v8989 
                                                let v8991 : string = "\"{v8986}{v8988}{v8990}\""
                                                let v8992 : string = @$"format!(" + v8991 + ")"
                                                let v8993 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v8992 
                                                let v8994 : string = "fable_library_rust::String_::fromString($0)"
                                                let v8995 : string = Fable.Core.RustInterop.emitRustExpr v8993 v8994 
                                                let _v8973 = v8995 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v8996 : string = "inline_colorization::color_bright_red"
                                                let v8997 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v8996 
                                                let v8998 : string = "&*$0"
                                                let v8999 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8959 v8998 
                                                let v9000 : string = "inline_colorization::color_reset"
                                                let v9001 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v9000 
                                                let v9002 : string = "\"{v8997}{v8999}{v9001}\""
                                                let v9003 : string = @$"format!(" + v9002 + ")"
                                                let v9004 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v9003 
                                                let v9005 : string = "fable_library_rust::String_::fromString($0)"
                                                let v9006 : string = Fable.Core.RustInterop.emitRustExpr v9004 v9005 
                                                let _v8973 = v9006 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v9007 : string = "\u001b[91m"
                                                let v9008 : string = method8()
                                                let v9009 : string = v9007 + v8959 
                                                let v9010 : string = v9009 + v9008 
                                                let _v8973 = v9010 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v9011 : string = "\u001b[91m"
                                                let v9012 : string = method8()
                                                let v9013 : string = v9011 + v8959 
                                                let v9014 : string = v9013 + v9012 
                                                let _v8973 = v9014 
                                                #endif
#else
                                                let v9015 : string = "\u001b[91m"
                                                let v9016 : string = method8()
                                                let v9017 : string = v9015 + v8959 
                                                let v9018 : string = v9017 + v9016 
                                                let _v8973 = v9018 
                                                #endif
                                                let v9019 : string = _v8973 
                                                let v9025 : int64 = v8521.l0
                                                let v9026 : string = method9()
                                                let v9027 : Mut4 = {l0 = v9026} : Mut4
                                                let v9028 : string = $"{v5814}"
                                                let v9031 : string = v9027.l0
                                                let v9032 : string = v9031 + v9028 
                                                v9027.l0 <- v9032
                                                let v9033 : string = "exit_code"
                                                let v9034 : string = $"{v9033}"
                                                let v9037 : string = v9027.l0
                                                let v9038 : string = v9037 + v9034 
                                                v9027.l0 <- v9038
                                                let v9039 : string = $"{v5826}"
                                                let v9042 : string = v9027.l0
                                                let v9043 : string = v9042 + v9039 
                                                v9027.l0 <- v9043
                                                let v9044 : string = $"{v8442}"
                                                let v9047 : string = v9027.l0
                                                let v9048 : string = v9047 + v9044 
                                                v9027.l0 <- v9048
                                                let v9049 : string = $"{v5838}"
                                                let v9052 : string = v9027.l0
                                                let v9053 : string = v9052 + v9049 
                                                v9027.l0 <- v9053
                                                let v9054 : string = "cargo_fmt_result"
                                                let v9055 : string = $"{v9054}"
                                                let v9058 : string = v9027.l0
                                                let v9059 : string = v9058 + v9055 
                                                v9027.l0 <- v9059
                                                let v9060 : string = $"{v5826}"
                                                let v9063 : string = v9027.l0
                                                let v9064 : string = v9063 + v9060 
                                                v9027.l0 <- v9064
                                                let v9065 : string = $"{v8443}"
                                                let v9068 : string = v9027.l0
                                                let v9069 : string = v9068 + v9065 
                                                v9027.l0 <- v9069
                                                let v9070 : string = $"{v5884}"
                                                let v9073 : string = v9027.l0
                                                let v9074 : string = v9073 + v9070 
                                                v9027.l0 <- v9074
                                                let v9075 : string = v9027.l0
                                                let v9076 : (unit -> string) = closure57()
                                                let v9077 : string = $"{v8889} {v9019} #{v9025} %s{v9076 ()} / {v9075}"
                                                let v9080 : char list = []
                                                let v9081 : (char list -> (char [])) = List.toArray
                                                let v9082 : (char []) = v9081 v9080
                                                let v9085 : string = v9077.TrimStart v9082 
                                                let v9103 : char list = []
                                                let v9104 : char list = '/' :: v9103 
                                                let v9107 : char list = ' ' :: v9104 
                                                let v9110 : (char list -> (char [])) = List.toArray
                                                let v9111 : (char []) = v9110 v9107
                                                let v9114 : string = v9085.TrimEnd v9111 
                                                let v9132 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v9133 : string = @"println!(""{}"", $0)"
                                                Fable.Core.RustInterop.emitRustExpr v9114 v9133 
                                                let _v9132 = () 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v9134 : string = @"println!(""{}"", $0)"
                                                Fable.Core.RustInterop.emitRustExpr v9114 v9134 
                                                let _v9132 = () 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v9135 : string = $"near_sdk::log!(\"{{}}\", $0)"
                                                Fable.Core.RustInterop.emitRustExpr v9114 v9135 
                                                let _v9132 = () 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                System.Console.WriteLine v9114 
                                                let _v9132 = () 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                System.Console.WriteLine v9114 
                                                let _v9132 = () 
                                                #endif
#else
                                                System.Console.WriteLine v9114 
                                                let _v9132 = () 
                                                #endif
                                                _v9132 
                                                let v9136 : (string -> unit) = v8460.l0
                                                v9136 v9114
                                        let v9137 : string = $"{v7288}.{v5832}"
                                        let v9138 : string = method15(v7294, v9137)
                                        let v9139 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v9140 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v9141 : string = "std::fs::read(&*$0)"
                                        let v9142 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v9138 v9141 
                                        let v9143 : string = "$0.unwrap()"
                                        let v9144 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v9142 v9143 
                                        let _v9140 = v9144 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v9145 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v9140 = v9145 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v9148 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v9140 = v9148 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v9151 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v9140 = v9151 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v9154 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v9140 = v9154 
                                        #endif
#else
                                        let v9157 : (uint8 []) = v9138 |> System.IO.File.ReadAllBytes
                                        let v9158 : string = "$0.to_vec()"
                                        let v9159 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v9157 v9158 
                                        let _v9140 = v9159 
                                        #endif
                                        let v9160 : Vec<uint8> = _v9140 
                                        let v9165 : Vec<uint8> = method14(v9160)
                                        let v9166 : string = "std::string::String::from_utf8($0)"
                                        let v9167 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v9165 v9166 
                                        let v9168 : string = "$0.unwrap()"
                                        let v9169 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9167 v9168 
                                        let v9170 : string = "fable_library_rust::String_::fromString($0)"
                                        let v9171 : string = Fable.Core.RustInterop.emitRustExpr v9169 v9170 
                                        let _v9139 = v9171 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v9172 : string = null |> unbox<string>
                                        let _v9139 = v9172 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v9175 : string = null |> unbox<string>
                                        let _v9139 = v9175 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v9178 : string = null |> unbox<string>
                                        let _v9139 = v9178 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v9181 : string = null |> unbox<string>
                                        let _v9139 = v9181 
                                        #endif
#else
                                        let v9184 : string = v9138 |> System.IO.File.ReadAllText
                                        let _v9139 = v9184 
                                        #endif
                                        let v9185 : string = _v9139 
                                        let v9190 : string = "\"{\".into()"
                                        let v9191 : string = Fable.Core.RustInterop.emitRustExpr () v9190 
                                        let v9192 : string = "pub fn main() -> Result<(), String> "
                                        let v9193 : string = v9192 + v9191 
                                        let v9194 : bool =
                                            match v5759 with
                                            | US33_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v9227 : string =
                                            if v9194 then
                                                let v9195 : string = ""
                                                v9195
                                            else
                                                let v9196 : string = $"#[near_sdk::near_bindgen]"
                                                let v9197 : string = $"#[derive(near_sdk::PanicOnDefault)]"
                                                let v9198 : string = v9196 + v7328 
                                                let v9199 : string = v9198 + v9197 
                                                let v9200 : string = $"pub struct MainState {{"
                                                let v9201 : string = v9199 + v7328 
                                                let v9202 : string = v9201 + v9200 
                                                let v9203 : string = $"}}"
                                                let v9204 : string = v9202 + v7328 
                                                let v9205 : string = v9204 + v9203 
                                                let v9206 : string = $""
                                                let v9207 : string = v9205 + v7328 
                                                let v9208 : string = v9207 + v9206 
                                                let v9209 : string = $"#[near_sdk::near_bindgen]"
                                                let v9210 : string = v9208 + v7328 
                                                let v9211 : string = v9210 + v9209 
                                                let v9212 : string = $"impl MainState {{"
                                                let v9213 : string = v9211 + v7328 
                                                let v9214 : string = v9213 + v9212 
                                                let v9215 : string = $"    pub fn state_main() {{"
                                                let v9216 : string = v9214 + v7328 
                                                let v9217 : string = v9216 + v9215 
                                                let v9218 : string = $"        Spiral_builder::method0();"
                                                let v9219 : string = v9217 + v7328 
                                                let v9220 : string = v9219 + v9218 
                                                let v9221 : string = $"    }}"
                                                let v9222 : string = v9220 + v7328 
                                                let v9223 : string = v9222 + v9221 
                                                let v9224 : string = $"}}"
                                                let v9225 : string = v9223 + v7328 
                                                let v9226 : string = v9225 + v9224 
                                                v9226
                                        let v9228 : string = $"{v9193} Ok(()) }}"
                                        let v9229 : string = v9227 + v7328 
                                        let v9230 : string = v9229 + v9228 
                                        let v9231 : bool = v9185.Contains v9193 
                                        let v9323 : string =
                                            if v9231 then
                                                v9185
                                            else
                                                let v9234 : string = "\";\".into()"
                                                let v9235 : string = Fable.Core.RustInterop.emitRustExpr () v9234 
                                                let v9236 : string = "),)"
                                                let v9237 : string = v9236 + v9235 
                                                let v9238 : string = "));"
                                                let v9239 : string = v9185.Replace (v9237, v9238)
                                                let v9240 : string = "\";\".into()"
                                                let v9241 : string = Fable.Core.RustInterop.emitRustExpr () v9240 
                                                let v9242 : string = "},)"
                                                let v9243 : string = v9242 + v9241 
                                                let v9244 : string = "});"
                                                let v9245 : string = v9239.Replace (v9243, v9244)
                                                let v9246 : string = "\\s\\sdefaultOf\\(\\);"
                                                let v9247 : string = " defaultOf::<()>();"
                                                let v9248 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v9249 : string = $"regex::Regex::new(&$0)"
                                                let v9250 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v9246 v9249 
                                                let v9251 : string = "$0.unwrap()"
                                                let v9252 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v9250 v9251 
                                                let v9253 : string = method86(v9245)
                                                let v9254 : string = $"$0.replace_all(&*$1, &*$2)"
                                                let v9255 : std_borrow_Cow<Str> = Fable.Core.RustInterop.emitRustExpr struct (v9252, v9253, v9247) v9254 
                                                let v9256 : string = "String::from($0)"
                                                let v9257 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9255 v9256 
                                                let v9258 : string = "fable_library_rust::String_::fromString($0)"
                                                let v9259 : string = Fable.Core.RustInterop.emitRustExpr v9257 v9258 
                                                let _v9248 = v9259 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v9260 : string = null |> unbox<string>
                                                let _v9248 = v9260 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v9263 : string = null |> unbox<string>
                                                let _v9248 = v9263 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v9266 : string = null |> unbox<string>
                                                let _v9248 = v9266 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v9269 : string = null |> unbox<string>
                                                let _v9248 = v9269 
                                                #endif
#else
                                                let v9272 : string = System.Text.RegularExpressions.Regex.Replace (v9245, v9246, v9247)
                                                let _v9248 = v9272 
                                                #endif
                                                let v9273 : string = _v9248 
                                                let v9278 : string = "::Slice'_"
                                                let v9279 : string = "::Slice__"
                                                let v9280 : string = v9273.Replace (v9278, v9279)
                                                let v9281 : string = "\",\".into()"
                                                let v9282 : string = Fable.Core.RustInterop.emitRustExpr () v9281 
                                                let v9283 : string = "defaultOf()"
                                                let v9284 : string = v9283 + v9282 
                                                let v9285 : string = "defaultOf::<std::sync::Arc<dyn IDisposable>>(),"
                                                let v9286 : string = v9280.Replace (v9284, v9285)
                                                let v9287 : string = "\"_.\".into()"
                                                let v9288 : string = Fable.Core.RustInterop.emitRustExpr () v9287 
                                                let v9289 : string = "_self"
                                                let v9290 : string = v9289 + v9288 
                                                let v9291 : string = "self."
                                                let v9292 : string = v9286.Replace (v9290, v9291)
                                                let v9293 : string = "\"h\".into()"
                                                let v9294 : string = Fable.Core.RustInterop.emitRustExpr () v9293 
                                                let v9295 : string = "get_or_insert_wit"
                                                let v9296 : string = v9295 + v9294 
                                                let v9297 : string = "get_or_init"
                                                let v9298 : string = v9292.Replace (v9296, v9297)
                                                let v9299 : string = "\";\".into()"
                                                let v9300 : string = Fable.Core.RustInterop.emitRustExpr () v9299 
                                                let v9301 : string = "use fable_library_rust::System::Collections::Concurrent::ConcurrentStack_1"
                                                let v9302 : string = v9301 + v9300 
                                                let v9303 : string = "type ConcurrentStack_1<T> = T;"
                                                let v9304 : string = v9298.Replace (v9302, v9303)
                                                let v9305 : string = "\";\".into()"
                                                let v9306 : string = Fable.Core.RustInterop.emitRustExpr () v9305 
                                                let v9307 : string = "use fable_library_rust::System::Threading::CancellationToken"
                                                let v9308 : string = v9307 + v9306 
                                                let v9309 : string = "type CancellationToken = ();"
                                                let v9310 : string = v9304.Replace (v9308, v9309)
                                                let v9311 : string = "\";\".into()"
                                                let v9312 : string = Fable.Core.RustInterop.emitRustExpr () v9311 
                                                let v9313 : string = "use fable_library_rust::System::TimeZoneInfo"
                                                let v9314 : string = v9313 + v9312 
                                                let v9315 : string = "type TimeZoneInfo = i64;"
                                                let v9316 : string = v9310.Replace (v9314, v9315)
                                                let v9317 : string = "\";\".into()"
                                                let v9318 : string = Fable.Core.RustInterop.emitRustExpr () v9317 
                                                let v9319 : string = "use fable_library_rust::System::Threading::Tasks::TaskCanceledException"
                                                let v9320 : string = v9319 + v9318 
                                                let v9321 : string = "type TaskCanceledException = ();"
                                                let v9322 : string = v9316.Replace (v9320, v9321)
                                                v9322
                                        let v9324 : bool = v9231 = false
                                        if v9324 then
                                            let v9325 : string = $"{v9323}\n\n{v9230}\n"
                                            method25(v9138, v9325)
                                        let v9326 : bool =
                                            match v5759 with
                                            | US33_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v9327 : bool = v9326 <> true
                                        let v9330 : string =
                                            if v9327 then
                                                let v9328 : string = $"cargo build --release --target wasm32-unknown-unknown --manifest-path \"{v7467}\""
                                                v9328
                                            else
                                                let v9329 : string = $"cargo run --manifest-path \"{v7467}\""
                                                v9329
                                        let v9331 : bool =
                                            match v5759 with
                                            | US33_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v9332 : bool = v9331 <> true
                                        let v9341 : (struct (string * string) []) =
                                            if v9332 then
                                                [||]
                                            else
                                                let v9334 : string = "TRACE_LEVEL"
                                                let v9335 : string = "Verbose"
                                                let v9336 : string = "RUSTC_WRAPPER"
                                                let v9337 : string = "sccache"
                                                let v9338 : string = "RUSTFLAGS"
                                                let v9339 : string = "-C prefer-dynamic"
                                                [|struct (v9334, v9335); struct (v9336, v9337); struct (v9338, v9339)|]
                                        let v9342 : System.Threading.CancellationToken option = None
                                        let v9343 : (struct (string * string) []) = [||]
                                        let v9344 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                        let v9345 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                        let v9346 : string option = None
                                        let v9352 : Result<string, string> =
                                            match v7271 with
                                            | US12_1(v9349) -> (* Error *)
                                                let v9350 : Result<string, string> = Error v9349 
                                                v9350
                                            | US12_0(v9347) -> (* Ok *)
                                                let v9348 : Result<string, string> = Ok v9347 
                                                v9348
                                        let v9353 : string = "v9352.ok()"
                                        let v9354 : string option = Fable.Core.RustInterop.emitRustExpr () v9353 
                                        let v9355 : bool = true
                                        let struct (v9356 : int32, v9357 : string) = method40(v9330, v9342, v9341, v9344, v9345, v9355, v9354)
                                        let v9358 : bool =
                                            match v5759 with
                                            | US33_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let struct (v11663 : US1, v11664 : US1, v11665 : US1) =
                                            if v9358 then
                                                let v9359 : int32 = v9341.Length
                                                let v9360 : (string []) = Array.zeroCreate<string> (v9359)
                                                let v9361 : Mut5 = {l0 = 0} : Mut5
                                                while method43(v9359, v9361) do
                                                    let v9363 : int32 = v9361.l0
                                                    let struct (v9364 : string, v9365 : string) = v9341.[int v9363]
                                                    let v9366 : string = $"$env:{v9364}=''{v9365}''"
                                                    v9360.[int v9363] <- v9366
                                                    let v9367 : int32 = v9363 + 1
                                                    v9361.l0 <- v9367
                                                    ()
                                                let v9368 : string seq = v9360 |> Seq.ofArray
                                                let v9371 : (string -> (string seq -> string)) = String.concat
                                                let v9372 : string = ";"
                                                let v9373 : (string seq -> string) = v9371 v9372
                                                let v9374 : string = v9373 v9368
                                                let v9377 : (string []) = [|v9374; v9330|]
                                                let v9378 : string seq = v9377 |> Seq.ofArray
                                                let v9381 : (string -> (string seq -> string)) = String.concat
                                                let v9382 : (string seq -> string) = v9381 v9372
                                                let v9383 : string = v9382 v9378
                                                let v9386 : string = $"pwsh -c '{v9383}'"
                                                let v9387 : bool = v9356 = 0
                                                let struct (v10143 : US1, v10144 : US1, v10145 : US1) =
                                                    if v9387 then
                                                        let v9388 : (string -> US1) = closure43()
                                                        let v9389 : (unit -> string) = closure58(v9357)
                                                        let v9390 : (exn -> US1) = closure60(v9138, v9357, v9386)
                                                        let v9391 : US1 = US1_1
                                                        let result = ref v9391
                                                        try
                                                            result.Value <- v9389 () |> v9388 
                                                        with ex ->
                                                            result.Value <- v9390 ex 
                                                        let v9392 : US1 = result.Value
                                                        let v9402 : string option =
                                                            match v9392 with
                                                            | US1_1 -> (* None *)
                                                                let v9400 : string option = None
                                                                v9400
                                                            | US1_0(v9396) -> (* Some *)
                                                                let v9397 : string option = Some v9396 
                                                                v9397
                                                        let v9403 : string = "$0.unwrap()"
                                                        let v9404 : string = Fable.Core.RustInterop.emitRustExpr v9402 v9403 
                                                        let v9405 : US1 = US1_0(v5832)
                                                        let v9406 : US1 = US1_0(v9323)
                                                        let v9407 : US1 = US1_0(v9404)
                                                        struct (v9405, v9406, v9407)
                                                    else
                                                        let v9408 : bool = State.trace_state.IsNone
                                                        if v9408 then
                                                            let v9409 : US0 = US0_0
                                                            let struct (v9410 : Mut0, v9411 : Mut1, v9412 : Mut2, v9413 : Mut3, v9414 : int64 option) = method1(v9409)
                                                            let v9415 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v9410, v9411, v9412, v9413, v9414) 
                                                            State.trace_state <- v9415 
                                                            ()
                                                        let struct (v9420 : Mut0, v9421 : Mut1, v9422 : Mut2, v9423 : Mut3, v9424 : int64 option) = State.trace_state.Value
                                                        let v9435 : bool = State.trace_state.IsNone
                                                        if v9435 then
                                                            let v9436 : US0 = US0_0
                                                            let struct (v9437 : Mut0, v9438 : Mut1, v9439 : Mut2, v9440 : Mut3, v9441 : int64 option) = method1(v9436)
                                                            let v9442 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v9437, v9438, v9439, v9440, v9441) 
                                                            State.trace_state <- v9442 
                                                            ()
                                                        let struct (v9447 : Mut0, v9448 : Mut1, v9449 : Mut2, v9450 : Mut3, v9451 : int64 option) = State.trace_state.Value
                                                        let v9462 : US0 = v9450.l0
                                                        let v9463 : bool = v9449.l0
                                                        let v9464 : bool = v9463 = false
                                                        let v9467 : bool =
                                                            if v9464 then
                                                                false
                                                            else
                                                                let v9465 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v9462
                                                                let v9466 : bool = 4 >= v9465
                                                                v9466
                                                        if v9467 then
                                                            let v9468 : int64 = v9420.l0
                                                            let v9469 : int64 = v9468 + 1L
                                                            v9420.l0 <- v9469
                                                            let v9470 : bool = State.trace_state.IsNone
                                                            if v9470 then
                                                                let v9471 : US0 = US0_0
                                                                let struct (v9472 : Mut0, v9473 : Mut1, v9474 : Mut2, v9475 : Mut3, v9476 : int64 option) = method1(v9471)
                                                                let v9477 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v9472, v9473, v9474, v9475, v9476) 
                                                                State.trace_state <- v9477 
                                                                ()
                                                            let struct (v9482 : Mut0, v9483 : Mut1, v9484 : Mut2, v9485 : Mut3, v9486 : int64 option) = State.trace_state.Value
                                                            let v9497 : unit = ()
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v9498 : US3 option = None
                                                            let _v9498 = ref v9498 
                                                            match v9486 with
                                                            | Some x -> (
                                                            (fun () ->
                                                            (fun () ->
                                                            let v9499 : int64 = x
                                                            let v9500 : US3 = US3_0(v9499)
                                                            v9500 
                                                            )
                                                            |> fun x -> x () |> Some
                                                            ) () ) | None -> None
                                                            |> fun x -> _v9498.Value <- x
                                                            let v9501 : US3 option = _v9498.Value 
                                                            let v9512 : US3 = US3_1
                                                            let v9513 : US3 = v9501 |> Option.defaultValue v9512 
                                                            let v9553 : System.DateTime =
                                                                match v9513 with
                                                                | US3_1 -> (* None *)
                                                                    let v9549 : System.DateTime = System.DateTime.Now
                                                                    v9549
                                                                | US3_0(v9517) -> (* Some *)
                                                                    let v9518 : System.DateTime = System.DateTime.Now
                                                                    let v9521 : (System.DateTime -> int64) = _.Ticks
                                                                    let v9522 : int64 = v9521 v9518
                                                                    let v9525 : int64 = v9522 - v9517
                                                                    let v9526 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                    let v9527 : System.TimeSpan = v9526 v9525
                                                                    let v9530 : (System.TimeSpan -> int32) = _.Hours
                                                                    let v9531 : int32 = v9530 v9527
                                                                    let v9534 : (System.TimeSpan -> int32) = _.Minutes
                                                                    let v9535 : int32 = v9534 v9527
                                                                    let v9538 : (System.TimeSpan -> int32) = _.Seconds
                                                                    let v9539 : int32 = v9538 v9527
                                                                    let v9542 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                    let v9543 : int32 = v9542 v9527
                                                                    let v9546 : System.DateTime = System.DateTime (1, 1, 1, v9531, v9535, v9539, v9543)
                                                                    v9546
                                                            let v9554 : string = method6()
                                                            let v9557 : (string -> string) = v9553.ToString
                                                            let v9558 : string = v9557 v9554
                                                            let _v9497 = v9558 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v9561 : US3 option = None
                                                            let _v9561 = ref v9561 
                                                            match v9486 with
                                                            | Some x -> (
                                                            (fun () ->
                                                            (fun () ->
                                                            let v9562 : int64 = x
                                                            let v9563 : US3 = US3_0(v9562)
                                                            v9563 
                                                            )
                                                            |> fun x -> x () |> Some
                                                            ) () ) | None -> None
                                                            |> fun x -> _v9561.Value <- x
                                                            let v9564 : US3 option = _v9561.Value 
                                                            let v9575 : US3 = US3_1
                                                            let v9576 : US3 = v9564 |> Option.defaultValue v9575 
                                                            let v9616 : System.DateTime =
                                                                match v9576 with
                                                                | US3_1 -> (* None *)
                                                                    let v9612 : System.DateTime = System.DateTime.Now
                                                                    v9612
                                                                | US3_0(v9580) -> (* Some *)
                                                                    let v9581 : System.DateTime = System.DateTime.Now
                                                                    let v9584 : (System.DateTime -> int64) = _.Ticks
                                                                    let v9585 : int64 = v9584 v9581
                                                                    let v9588 : int64 = v9585 - v9580
                                                                    let v9589 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                    let v9590 : System.TimeSpan = v9589 v9588
                                                                    let v9593 : (System.TimeSpan -> int32) = _.Hours
                                                                    let v9594 : int32 = v9593 v9590
                                                                    let v9597 : (System.TimeSpan -> int32) = _.Minutes
                                                                    let v9598 : int32 = v9597 v9590
                                                                    let v9601 : (System.TimeSpan -> int32) = _.Seconds
                                                                    let v9602 : int32 = v9601 v9590
                                                                    let v9605 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                    let v9606 : int32 = v9605 v9590
                                                                    let v9609 : System.DateTime = System.DateTime (1, 1, 1, v9594, v9598, v9602, v9606)
                                                                    v9609
                                                            let v9617 : string = method6()
                                                            let v9620 : (string -> string) = v9616.ToString
                                                            let v9621 : string = v9620 v9617
                                                            let _v9497 = v9621 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v9624 : string = $"near_sdk::env::block_timestamp()"
                                                            let v9625 : uint64 = Fable.Core.RustInterop.emitRustExpr () v9624 
                                                            let v9626 : US3 option = None
                                                            let _v9626 = ref v9626 
                                                            match v9486 with
                                                            | Some x -> (
                                                            (fun () ->
                                                            (fun () ->
                                                            let v9627 : int64 = x
                                                            let v9628 : US3 = US3_0(v9627)
                                                            v9628 
                                                            )
                                                            |> fun x -> x () |> Some
                                                            ) () ) | None -> None
                                                            |> fun x -> _v9626.Value <- x
                                                            let v9629 : US3 option = _v9626.Value 
                                                            let v9640 : US3 = US3_1
                                                            let v9641 : US3 = v9629 |> Option.defaultValue v9640 
                                                            let v9650 : uint64 =
                                                                match v9641 with
                                                                | US3_1 -> (* None *)
                                                                    v9625
                                                                | US3_0(v9645) -> (* Some *)
                                                                    let v9646 : (int64 -> uint64) = uint64
                                                                    let v9647 : uint64 = v9646 v9645
                                                                    let v9648 : uint64 = v9625 - v9647
                                                                    v9648
                                                            let v9651 : uint64 = v9650 / 1000000000UL
                                                            let v9652 : uint64 = v9651 % 60UL
                                                            let v9653 : uint64 = v9651 / 60UL
                                                            let v9654 : uint64 = v9653 % 60UL
                                                            let v9655 : uint64 = v9651 / 3600UL
                                                            let v9656 : uint64 = v9655 % 24UL
                                                            let v9657 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
                                                            let v9658 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v9656, v9654, v9652) v9657 
                                                            let v9659 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v9660 : string = Fable.Core.RustInterop.emitRustExpr v9658 v9659 
                                                            let _v9497 = v9660 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v9661 : US3 option = None
                                                            let _v9661 = ref v9661 
                                                            match v9486 with
                                                            | Some x -> (
                                                            (fun () ->
                                                            (fun () ->
                                                            let v9662 : int64 = x
                                                            let v9663 : US3 = US3_0(v9662)
                                                            v9663 
                                                            )
                                                            |> fun x -> x () |> Some
                                                            ) () ) | None -> None
                                                            |> fun x -> _v9661.Value <- x
                                                            let v9664 : US3 option = _v9661.Value 
                                                            let v9675 : US3 = US3_1
                                                            let v9676 : US3 = v9664 |> Option.defaultValue v9675 
                                                            let v9716 : System.DateTime =
                                                                match v9676 with
                                                                | US3_1 -> (* None *)
                                                                    let v9712 : System.DateTime = System.DateTime.Now
                                                                    v9712
                                                                | US3_0(v9680) -> (* Some *)
                                                                    let v9681 : System.DateTime = System.DateTime.Now
                                                                    let v9684 : (System.DateTime -> int64) = _.Ticks
                                                                    let v9685 : int64 = v9684 v9681
                                                                    let v9688 : int64 = v9685 - v9680
                                                                    let v9689 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                    let v9690 : System.TimeSpan = v9689 v9688
                                                                    let v9693 : (System.TimeSpan -> int32) = _.Hours
                                                                    let v9694 : int32 = v9693 v9690
                                                                    let v9697 : (System.TimeSpan -> int32) = _.Minutes
                                                                    let v9698 : int32 = v9697 v9690
                                                                    let v9701 : (System.TimeSpan -> int32) = _.Seconds
                                                                    let v9702 : int32 = v9701 v9690
                                                                    let v9705 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                    let v9706 : int32 = v9705 v9690
                                                                    let v9709 : System.DateTime = System.DateTime (1, 1, 1, v9694, v9698, v9702, v9706)
                                                                    v9709
                                                            let v9717 : string = method7()
                                                            let v9720 : (string -> string) = v9716.ToString
                                                            let v9721 : string = v9720 v9717
                                                            let _v9497 = v9721 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v9724 : US3 option = None
                                                            let _v9724 = ref v9724 
                                                            match v9486 with
                                                            | Some x -> (
                                                            (fun () ->
                                                            (fun () ->
                                                            let v9725 : int64 = x
                                                            let v9726 : US3 = US3_0(v9725)
                                                            v9726 
                                                            )
                                                            |> fun x -> x () |> Some
                                                            ) () ) | None -> None
                                                            |> fun x -> _v9724.Value <- x
                                                            let v9727 : US3 option = _v9724.Value 
                                                            let v9738 : US3 = US3_1
                                                            let v9739 : US3 = v9727 |> Option.defaultValue v9738 
                                                            let v9779 : System.DateTime =
                                                                match v9739 with
                                                                | US3_1 -> (* None *)
                                                                    let v9775 : System.DateTime = System.DateTime.Now
                                                                    v9775
                                                                | US3_0(v9743) -> (* Some *)
                                                                    let v9744 : System.DateTime = System.DateTime.Now
                                                                    let v9747 : (System.DateTime -> int64) = _.Ticks
                                                                    let v9748 : int64 = v9747 v9744
                                                                    let v9751 : int64 = v9748 - v9743
                                                                    let v9752 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                    let v9753 : System.TimeSpan = v9752 v9751
                                                                    let v9756 : (System.TimeSpan -> int32) = _.Hours
                                                                    let v9757 : int32 = v9756 v9753
                                                                    let v9760 : (System.TimeSpan -> int32) = _.Minutes
                                                                    let v9761 : int32 = v9760 v9753
                                                                    let v9764 : (System.TimeSpan -> int32) = _.Seconds
                                                                    let v9765 : int32 = v9764 v9753
                                                                    let v9768 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                    let v9769 : int32 = v9768 v9753
                                                                    let v9772 : System.DateTime = System.DateTime (1, 1, 1, v9757, v9761, v9765, v9769)
                                                                    v9772
                                                            let v9780 : string = method7()
                                                            let v9783 : (string -> string) = v9779.ToString
                                                            let v9784 : string = v9783 v9780
                                                            let _v9497 = v9784 
                                                            #endif
#else
                                                            let v9787 : US3 option = None
                                                            let _v9787 = ref v9787 
                                                            match v9486 with
                                                            | Some x -> (
                                                            (fun () ->
                                                            (fun () ->
                                                            let v9788 : int64 = x
                                                            let v9789 : US3 = US3_0(v9788)
                                                            v9789 
                                                            )
                                                            |> fun x -> x () |> Some
                                                            ) () ) | None -> None
                                                            |> fun x -> _v9787.Value <- x
                                                            let v9790 : US3 option = _v9787.Value 
                                                            let v9801 : US3 = US3_1
                                                            let v9802 : US3 = v9790 |> Option.defaultValue v9801 
                                                            let v9842 : System.DateTime =
                                                                match v9802 with
                                                                | US3_1 -> (* None *)
                                                                    let v9838 : System.DateTime = System.DateTime.Now
                                                                    v9838
                                                                | US3_0(v9806) -> (* Some *)
                                                                    let v9807 : System.DateTime = System.DateTime.Now
                                                                    let v9810 : (System.DateTime -> int64) = _.Ticks
                                                                    let v9811 : int64 = v9810 v9807
                                                                    let v9814 : int64 = v9811 - v9806
                                                                    let v9815 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                    let v9816 : System.TimeSpan = v9815 v9814
                                                                    let v9819 : (System.TimeSpan -> int32) = _.Hours
                                                                    let v9820 : int32 = v9819 v9816
                                                                    let v9823 : (System.TimeSpan -> int32) = _.Minutes
                                                                    let v9824 : int32 = v9823 v9816
                                                                    let v9827 : (System.TimeSpan -> int32) = _.Seconds
                                                                    let v9828 : int32 = v9827 v9816
                                                                    let v9831 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                    let v9832 : int32 = v9831 v9816
                                                                    let v9835 : System.DateTime = System.DateTime (1, 1, 1, v9820, v9824, v9828, v9832)
                                                                    v9835
                                                            let v9843 : string = method7()
                                                            let v9846 : (string -> string) = v9842.ToString
                                                            let v9847 : string = v9846 v9843
                                                            let _v9497 = v9847 
                                                            #endif
                                                            let v9850 : string = _v9497 
                                                            let v9915 : string = "Critical"
                                                            let v9916 : (unit -> string) = v9915.ToLower
                                                            let v9917 : string = v9916 ()
                                                            let v9920 : string = v9917.PadLeft (7, ' ')
                                                            let v9934 : unit = ()
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v9935 : string = "inline_colorization::color_bright_red"
                                                            let v9936 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v9935 
                                                            let v9937 : string = "&*$0"
                                                            let v9938 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9920 v9937 
                                                            let v9939 : string = "inline_colorization::color_reset"
                                                            let v9940 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v9939 
                                                            let v9941 : string = "\"{v9936}{v9938}{v9940}\""
                                                            let v9942 : string = @$"format!(" + v9941 + ")"
                                                            let v9943 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v9942 
                                                            let v9944 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v9945 : string = Fable.Core.RustInterop.emitRustExpr v9943 v9944 
                                                            let _v9934 = v9945 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v9946 : string = "inline_colorization::color_bright_red"
                                                            let v9947 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v9946 
                                                            let v9948 : string = "&*$0"
                                                            let v9949 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9920 v9948 
                                                            let v9950 : string = "inline_colorization::color_reset"
                                                            let v9951 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v9950 
                                                            let v9952 : string = "\"{v9947}{v9949}{v9951}\""
                                                            let v9953 : string = @$"format!(" + v9952 + ")"
                                                            let v9954 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v9953 
                                                            let v9955 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v9956 : string = Fable.Core.RustInterop.emitRustExpr v9954 v9955 
                                                            let _v9934 = v9956 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v9957 : string = "inline_colorization::color_bright_red"
                                                            let v9958 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v9957 
                                                            let v9959 : string = "&*$0"
                                                            let v9960 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9920 v9959 
                                                            let v9961 : string = "inline_colorization::color_reset"
                                                            let v9962 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v9961 
                                                            let v9963 : string = "\"{v9958}{v9960}{v9962}\""
                                                            let v9964 : string = @$"format!(" + v9963 + ")"
                                                            let v9965 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v9964 
                                                            let v9966 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v9967 : string = Fable.Core.RustInterop.emitRustExpr v9965 v9966 
                                                            let _v9934 = v9967 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v9968 : string = "\u001b[91m"
                                                            let v9969 : string = method8()
                                                            let v9970 : string = v9968 + v9920 
                                                            let v9971 : string = v9970 + v9969 
                                                            let _v9934 = v9971 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v9972 : string = "\u001b[91m"
                                                            let v9973 : string = method8()
                                                            let v9974 : string = v9972 + v9920 
                                                            let v9975 : string = v9974 + v9973 
                                                            let _v9934 = v9975 
                                                            #endif
#else
                                                            let v9976 : string = "\u001b[91m"
                                                            let v9977 : string = method8()
                                                            let v9978 : string = v9976 + v9920 
                                                            let v9979 : string = v9978 + v9977 
                                                            let _v9934 = v9979 
                                                            #endif
                                                            let v9980 : string = _v9934 
                                                            let v9986 : int64 = v9482.l0
                                                            let v9987 : string = method9()
                                                            let v9988 : Mut4 = {l0 = v9987} : Mut4
                                                            let v9989 : string = $"{v5814}"
                                                            let v9992 : string = v9988.l0
                                                            let v9993 : string = v9992 + v9989 
                                                            v9988.l0 <- v9993
                                                            let v9994 : string = "exit_code"
                                                            let v9995 : string = $"{v9994}"
                                                            let v9998 : string = v9988.l0
                                                            let v9999 : string = v9998 + v9995 
                                                            v9988.l0 <- v9999
                                                            let v10000 : string = $"{v5826}"
                                                            let v10003 : string = v9988.l0
                                                            let v10004 : string = v10003 + v10000 
                                                            v9988.l0 <- v10004
                                                            let v10005 : string = $"{v9356}"
                                                            let v10008 : string = v9988.l0
                                                            let v10009 : string = v10008 + v10005 
                                                            v9988.l0 <- v10009
                                                            let v10010 : string = $"{v5838}"
                                                            let v10013 : string = v9988.l0
                                                            let v10014 : string = v10013 + v10010 
                                                            v9988.l0 <- v10014
                                                            let v10015 : string = "cargo_result"
                                                            let v10016 : string = $"{v10015}"
                                                            let v10019 : string = v9988.l0
                                                            let v10020 : string = v10019 + v10016 
                                                            v9988.l0 <- v10020
                                                            let v10021 : string = $"{v5826}"
                                                            let v10024 : string = v9988.l0
                                                            let v10025 : string = v10024 + v10021 
                                                            v9988.l0 <- v10025
                                                            let v10026 : string = $"{v9357}"
                                                            let v10029 : string = v9988.l0
                                                            let v10030 : string = v10029 + v10026 
                                                            v9988.l0 <- v10030
                                                            let v10031 : string = $"{v5838}"
                                                            let v10034 : string = v9988.l0
                                                            let v10035 : string = v10034 + v10031 
                                                            v9988.l0 <- v10035
                                                            let v10036 : string = "new_code_path"
                                                            let v10037 : string = $"{v10036}"
                                                            let v10040 : string = v9988.l0
                                                            let v10041 : string = v10040 + v10037 
                                                            v9988.l0 <- v10041
                                                            let v10042 : string = $"{v5826}"
                                                            let v10045 : string = v9988.l0
                                                            let v10046 : string = v10045 + v10042 
                                                            v9988.l0 <- v10046
                                                            let v10047 : string = $"{v9138}"
                                                            let v10050 : string = v9988.l0
                                                            let v10051 : string = v10050 + v10047 
                                                            v9988.l0 <- v10051
                                                            let v10052 : string = $"{v5838}"
                                                            let v10055 : string = v9988.l0
                                                            let v10056 : string = v10055 + v10052 
                                                            v9988.l0 <- v10056
                                                            let v10057 : string = "external_command"
                                                            let v10058 : string = $"{v10057}"
                                                            let v10061 : string = v9988.l0
                                                            let v10062 : string = v10061 + v10058 
                                                            v9988.l0 <- v10062
                                                            let v10063 : string = $"{v5826}"
                                                            let v10066 : string = v9988.l0
                                                            let v10067 : string = v10066 + v10063 
                                                            v9988.l0 <- v10067
                                                            let v10068 : string = $"{v9386}"
                                                            let v10071 : string = v9988.l0
                                                            let v10072 : string = v10071 + v10068 
                                                            v9988.l0 <- v10072
                                                            let v10073 : string = $"{v5884}"
                                                            let v10076 : string = v9988.l0
                                                            let v10077 : string = v10076 + v10073 
                                                            v9988.l0 <- v10077
                                                            let v10078 : string = v9988.l0
                                                            let v10079 : (unit -> string) = closure62()
                                                            let v10080 : string = $"{v9850} {v9980} #{v9986} %s{v10079 ()} / {v10078}"
                                                            let v10083 : char list = []
                                                            let v10084 : (char list -> (char [])) = List.toArray
                                                            let v10085 : (char []) = v10084 v10083
                                                            let v10088 : string = v10080.TrimStart v10085 
                                                            let v10106 : char list = []
                                                            let v10107 : char list = '/' :: v10106 
                                                            let v10110 : char list = ' ' :: v10107 
                                                            let v10113 : (char list -> (char [])) = List.toArray
                                                            let v10114 : (char []) = v10113 v10110
                                                            let v10117 : string = v10088.TrimEnd v10114 
                                                            let v10135 : unit = ()
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v10136 : string = @"println!(""{}"", $0)"
                                                            Fable.Core.RustInterop.emitRustExpr v10117 v10136 
                                                            let _v10135 = () 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v10137 : string = @"println!(""{}"", $0)"
                                                            Fable.Core.RustInterop.emitRustExpr v10117 v10137 
                                                            let _v10135 = () 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v10138 : string = $"near_sdk::log!(\"{{}}\", $0)"
                                                            Fable.Core.RustInterop.emitRustExpr v10117 v10138 
                                                            let _v10135 = () 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            System.Console.WriteLine v10117 
                                                            let _v10135 = () 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            System.Console.WriteLine v10117 
                                                            let _v10135 = () 
                                                            #endif
#else
                                                            System.Console.WriteLine v10117 
                                                            let _v10135 = () 
                                                            #endif
                                                            _v10135 
                                                            let v10139 : (string -> unit) = v9421.l0
                                                            v10139 v10117
                                                        let v10140 : US1 = US1_0(v5832)
                                                        let v10141 : US1 = US1_1
                                                        let v10142 : US1 = US1_1
                                                        struct (v10140, v10141, v10142)
                                                struct (v10143, v10144, v10145)
                                            else
                                                let v10146 : string = $"target/spiral_builder/{v7288}/target/wasm32-unknown-unknown/release/spiral_builder_{v5891}.wasm"
                                                let v10147 : string = $"'workspace/target/release/spiral_wasm -w {v10146}'"
                                                let v10148 : string = "scripts/invoke-block.ps1"
                                                let v10149 : string = $"pwsh -c \"pwsh {v10148} {v10147} -Linux -EnvironmentVariables NEAR_RPC_TIMEOUT_SECS=100\""
                                                let v10150 : bool = v9356 = 0
                                                let struct (v11660 : US1, v11661 : US1, v11662 : US1) =
                                                    if v10150 then
                                                        let v10151 : System.Threading.CancellationToken option = None
                                                        let v10152 : (struct (string * string) []) = [||]
                                                        let v10153 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                        let v10154 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                        let v10155 : string option = None
                                                        let v10156 : string option = Some v7285 
                                                        let v10159 : bool = true
                                                        let struct (v10160 : int32, v10161 : string) = method40(v10149, v10151, v10152, v10153, v10154, v10159, v10156)
                                                        let v10162 : bool = v10160 = 0
                                                        let struct (v10901 : US1, v10902 : US1, v10903 : US1) =
                                                            if v10162 then
                                                                let v10163 : US1 = US1_0(v5832)
                                                                let v10164 : US1 = US1_0(v9323)
                                                                let v10165 : US1 = US1_0(v10161)
                                                                struct (v10163, v10164, v10165)
                                                            else
                                                                let v10166 : bool = State.trace_state.IsNone
                                                                if v10166 then
                                                                    let v10167 : US0 = US0_0
                                                                    let struct (v10168 : Mut0, v10169 : Mut1, v10170 : Mut2, v10171 : Mut3, v10172 : int64 option) = method1(v10167)
                                                                    let v10173 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v10168, v10169, v10170, v10171, v10172) 
                                                                    State.trace_state <- v10173 
                                                                    ()
                                                                let struct (v10178 : Mut0, v10179 : Mut1, v10180 : Mut2, v10181 : Mut3, v10182 : int64 option) = State.trace_state.Value
                                                                let v10193 : bool = State.trace_state.IsNone
                                                                if v10193 then
                                                                    let v10194 : US0 = US0_0
                                                                    let struct (v10195 : Mut0, v10196 : Mut1, v10197 : Mut2, v10198 : Mut3, v10199 : int64 option) = method1(v10194)
                                                                    let v10200 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v10195, v10196, v10197, v10198, v10199) 
                                                                    State.trace_state <- v10200 
                                                                    ()
                                                                let struct (v10205 : Mut0, v10206 : Mut1, v10207 : Mut2, v10208 : Mut3, v10209 : int64 option) = State.trace_state.Value
                                                                let v10220 : US0 = v10208.l0
                                                                let v10221 : bool = v10207.l0
                                                                let v10222 : bool = v10221 = false
                                                                let v10225 : bool =
                                                                    if v10222 then
                                                                        false
                                                                    else
                                                                        let v10223 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v10220
                                                                        let v10224 : bool = 4 >= v10223
                                                                        v10224
                                                                if v10225 then
                                                                    let v10226 : int64 = v10178.l0
                                                                    let v10227 : int64 = v10226 + 1L
                                                                    v10178.l0 <- v10227
                                                                    let v10228 : bool = State.trace_state.IsNone
                                                                    if v10228 then
                                                                        let v10229 : US0 = US0_0
                                                                        let struct (v10230 : Mut0, v10231 : Mut1, v10232 : Mut2, v10233 : Mut3, v10234 : int64 option) = method1(v10229)
                                                                        let v10235 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v10230, v10231, v10232, v10233, v10234) 
                                                                        State.trace_state <- v10235 
                                                                        ()
                                                                    let struct (v10240 : Mut0, v10241 : Mut1, v10242 : Mut2, v10243 : Mut3, v10244 : int64 option) = State.trace_state.Value
                                                                    let v10255 : unit = ()
                                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                                    let v10256 : US3 option = None
                                                                    let _v10256 = ref v10256 
                                                                    match v10244 with
                                                                    | Some x -> (
                                                                    (fun () ->
                                                                    (fun () ->
                                                                    let v10257 : int64 = x
                                                                    let v10258 : US3 = US3_0(v10257)
                                                                    v10258 
                                                                    )
                                                                    |> fun x -> x () |> Some
                                                                    ) () ) | None -> None
                                                                    |> fun x -> _v10256.Value <- x
                                                                    let v10259 : US3 option = _v10256.Value 
                                                                    let v10270 : US3 = US3_1
                                                                    let v10271 : US3 = v10259 |> Option.defaultValue v10270 
                                                                    let v10311 : System.DateTime =
                                                                        match v10271 with
                                                                        | US3_1 -> (* None *)
                                                                            let v10307 : System.DateTime = System.DateTime.Now
                                                                            v10307
                                                                        | US3_0(v10275) -> (* Some *)
                                                                            let v10276 : System.DateTime = System.DateTime.Now
                                                                            let v10279 : (System.DateTime -> int64) = _.Ticks
                                                                            let v10280 : int64 = v10279 v10276
                                                                            let v10283 : int64 = v10280 - v10275
                                                                            let v10284 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                            let v10285 : System.TimeSpan = v10284 v10283
                                                                            let v10288 : (System.TimeSpan -> int32) = _.Hours
                                                                            let v10289 : int32 = v10288 v10285
                                                                            let v10292 : (System.TimeSpan -> int32) = _.Minutes
                                                                            let v10293 : int32 = v10292 v10285
                                                                            let v10296 : (System.TimeSpan -> int32) = _.Seconds
                                                                            let v10297 : int32 = v10296 v10285
                                                                            let v10300 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                            let v10301 : int32 = v10300 v10285
                                                                            let v10304 : System.DateTime = System.DateTime (1, 1, 1, v10289, v10293, v10297, v10301)
                                                                            v10304
                                                                    let v10312 : string = method6()
                                                                    let v10315 : (string -> string) = v10311.ToString
                                                                    let v10316 : string = v10315 v10312
                                                                    let _v10255 = v10316 
                                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                                    let v10319 : US3 option = None
                                                                    let _v10319 = ref v10319 
                                                                    match v10244 with
                                                                    | Some x -> (
                                                                    (fun () ->
                                                                    (fun () ->
                                                                    let v10320 : int64 = x
                                                                    let v10321 : US3 = US3_0(v10320)
                                                                    v10321 
                                                                    )
                                                                    |> fun x -> x () |> Some
                                                                    ) () ) | None -> None
                                                                    |> fun x -> _v10319.Value <- x
                                                                    let v10322 : US3 option = _v10319.Value 
                                                                    let v10333 : US3 = US3_1
                                                                    let v10334 : US3 = v10322 |> Option.defaultValue v10333 
                                                                    let v10374 : System.DateTime =
                                                                        match v10334 with
                                                                        | US3_1 -> (* None *)
                                                                            let v10370 : System.DateTime = System.DateTime.Now
                                                                            v10370
                                                                        | US3_0(v10338) -> (* Some *)
                                                                            let v10339 : System.DateTime = System.DateTime.Now
                                                                            let v10342 : (System.DateTime -> int64) = _.Ticks
                                                                            let v10343 : int64 = v10342 v10339
                                                                            let v10346 : int64 = v10343 - v10338
                                                                            let v10347 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                            let v10348 : System.TimeSpan = v10347 v10346
                                                                            let v10351 : (System.TimeSpan -> int32) = _.Hours
                                                                            let v10352 : int32 = v10351 v10348
                                                                            let v10355 : (System.TimeSpan -> int32) = _.Minutes
                                                                            let v10356 : int32 = v10355 v10348
                                                                            let v10359 : (System.TimeSpan -> int32) = _.Seconds
                                                                            let v10360 : int32 = v10359 v10348
                                                                            let v10363 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                            let v10364 : int32 = v10363 v10348
                                                                            let v10367 : System.DateTime = System.DateTime (1, 1, 1, v10352, v10356, v10360, v10364)
                                                                            v10367
                                                                    let v10375 : string = method6()
                                                                    let v10378 : (string -> string) = v10374.ToString
                                                                    let v10379 : string = v10378 v10375
                                                                    let _v10255 = v10379 
                                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                                    let v10382 : string = $"near_sdk::env::block_timestamp()"
                                                                    let v10383 : uint64 = Fable.Core.RustInterop.emitRustExpr () v10382 
                                                                    let v10384 : US3 option = None
                                                                    let _v10384 = ref v10384 
                                                                    match v10244 with
                                                                    | Some x -> (
                                                                    (fun () ->
                                                                    (fun () ->
                                                                    let v10385 : int64 = x
                                                                    let v10386 : US3 = US3_0(v10385)
                                                                    v10386 
                                                                    )
                                                                    |> fun x -> x () |> Some
                                                                    ) () ) | None -> None
                                                                    |> fun x -> _v10384.Value <- x
                                                                    let v10387 : US3 option = _v10384.Value 
                                                                    let v10398 : US3 = US3_1
                                                                    let v10399 : US3 = v10387 |> Option.defaultValue v10398 
                                                                    let v10408 : uint64 =
                                                                        match v10399 with
                                                                        | US3_1 -> (* None *)
                                                                            v10383
                                                                        | US3_0(v10403) -> (* Some *)
                                                                            let v10404 : (int64 -> uint64) = uint64
                                                                            let v10405 : uint64 = v10404 v10403
                                                                            let v10406 : uint64 = v10383 - v10405
                                                                            v10406
                                                                    let v10409 : uint64 = v10408 / 1000000000UL
                                                                    let v10410 : uint64 = v10409 % 60UL
                                                                    let v10411 : uint64 = v10409 / 60UL
                                                                    let v10412 : uint64 = v10411 % 60UL
                                                                    let v10413 : uint64 = v10409 / 3600UL
                                                                    let v10414 : uint64 = v10413 % 24UL
                                                                    let v10415 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
                                                                    let v10416 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v10414, v10412, v10410) v10415 
                                                                    let v10417 : string = "fable_library_rust::String_::fromString($0)"
                                                                    let v10418 : string = Fable.Core.RustInterop.emitRustExpr v10416 v10417 
                                                                    let _v10255 = v10418 
                                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                                    let v10419 : US3 option = None
                                                                    let _v10419 = ref v10419 
                                                                    match v10244 with
                                                                    | Some x -> (
                                                                    (fun () ->
                                                                    (fun () ->
                                                                    let v10420 : int64 = x
                                                                    let v10421 : US3 = US3_0(v10420)
                                                                    v10421 
                                                                    )
                                                                    |> fun x -> x () |> Some
                                                                    ) () ) | None -> None
                                                                    |> fun x -> _v10419.Value <- x
                                                                    let v10422 : US3 option = _v10419.Value 
                                                                    let v10433 : US3 = US3_1
                                                                    let v10434 : US3 = v10422 |> Option.defaultValue v10433 
                                                                    let v10474 : System.DateTime =
                                                                        match v10434 with
                                                                        | US3_1 -> (* None *)
                                                                            let v10470 : System.DateTime = System.DateTime.Now
                                                                            v10470
                                                                        | US3_0(v10438) -> (* Some *)
                                                                            let v10439 : System.DateTime = System.DateTime.Now
                                                                            let v10442 : (System.DateTime -> int64) = _.Ticks
                                                                            let v10443 : int64 = v10442 v10439
                                                                            let v10446 : int64 = v10443 - v10438
                                                                            let v10447 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                            let v10448 : System.TimeSpan = v10447 v10446
                                                                            let v10451 : (System.TimeSpan -> int32) = _.Hours
                                                                            let v10452 : int32 = v10451 v10448
                                                                            let v10455 : (System.TimeSpan -> int32) = _.Minutes
                                                                            let v10456 : int32 = v10455 v10448
                                                                            let v10459 : (System.TimeSpan -> int32) = _.Seconds
                                                                            let v10460 : int32 = v10459 v10448
                                                                            let v10463 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                            let v10464 : int32 = v10463 v10448
                                                                            let v10467 : System.DateTime = System.DateTime (1, 1, 1, v10452, v10456, v10460, v10464)
                                                                            v10467
                                                                    let v10475 : string = method7()
                                                                    let v10478 : (string -> string) = v10474.ToString
                                                                    let v10479 : string = v10478 v10475
                                                                    let _v10255 = v10479 
                                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                                    let v10482 : US3 option = None
                                                                    let _v10482 = ref v10482 
                                                                    match v10244 with
                                                                    | Some x -> (
                                                                    (fun () ->
                                                                    (fun () ->
                                                                    let v10483 : int64 = x
                                                                    let v10484 : US3 = US3_0(v10483)
                                                                    v10484 
                                                                    )
                                                                    |> fun x -> x () |> Some
                                                                    ) () ) | None -> None
                                                                    |> fun x -> _v10482.Value <- x
                                                                    let v10485 : US3 option = _v10482.Value 
                                                                    let v10496 : US3 = US3_1
                                                                    let v10497 : US3 = v10485 |> Option.defaultValue v10496 
                                                                    let v10537 : System.DateTime =
                                                                        match v10497 with
                                                                        | US3_1 -> (* None *)
                                                                            let v10533 : System.DateTime = System.DateTime.Now
                                                                            v10533
                                                                        | US3_0(v10501) -> (* Some *)
                                                                            let v10502 : System.DateTime = System.DateTime.Now
                                                                            let v10505 : (System.DateTime -> int64) = _.Ticks
                                                                            let v10506 : int64 = v10505 v10502
                                                                            let v10509 : int64 = v10506 - v10501
                                                                            let v10510 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                            let v10511 : System.TimeSpan = v10510 v10509
                                                                            let v10514 : (System.TimeSpan -> int32) = _.Hours
                                                                            let v10515 : int32 = v10514 v10511
                                                                            let v10518 : (System.TimeSpan -> int32) = _.Minutes
                                                                            let v10519 : int32 = v10518 v10511
                                                                            let v10522 : (System.TimeSpan -> int32) = _.Seconds
                                                                            let v10523 : int32 = v10522 v10511
                                                                            let v10526 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                            let v10527 : int32 = v10526 v10511
                                                                            let v10530 : System.DateTime = System.DateTime (1, 1, 1, v10515, v10519, v10523, v10527)
                                                                            v10530
                                                                    let v10538 : string = method7()
                                                                    let v10541 : (string -> string) = v10537.ToString
                                                                    let v10542 : string = v10541 v10538
                                                                    let _v10255 = v10542 
                                                                    #endif
#else
                                                                    let v10545 : US3 option = None
                                                                    let _v10545 = ref v10545 
                                                                    match v10244 with
                                                                    | Some x -> (
                                                                    (fun () ->
                                                                    (fun () ->
                                                                    let v10546 : int64 = x
                                                                    let v10547 : US3 = US3_0(v10546)
                                                                    v10547 
                                                                    )
                                                                    |> fun x -> x () |> Some
                                                                    ) () ) | None -> None
                                                                    |> fun x -> _v10545.Value <- x
                                                                    let v10548 : US3 option = _v10545.Value 
                                                                    let v10559 : US3 = US3_1
                                                                    let v10560 : US3 = v10548 |> Option.defaultValue v10559 
                                                                    let v10600 : System.DateTime =
                                                                        match v10560 with
                                                                        | US3_1 -> (* None *)
                                                                            let v10596 : System.DateTime = System.DateTime.Now
                                                                            v10596
                                                                        | US3_0(v10564) -> (* Some *)
                                                                            let v10565 : System.DateTime = System.DateTime.Now
                                                                            let v10568 : (System.DateTime -> int64) = _.Ticks
                                                                            let v10569 : int64 = v10568 v10565
                                                                            let v10572 : int64 = v10569 - v10564
                                                                            let v10573 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                            let v10574 : System.TimeSpan = v10573 v10572
                                                                            let v10577 : (System.TimeSpan -> int32) = _.Hours
                                                                            let v10578 : int32 = v10577 v10574
                                                                            let v10581 : (System.TimeSpan -> int32) = _.Minutes
                                                                            let v10582 : int32 = v10581 v10574
                                                                            let v10585 : (System.TimeSpan -> int32) = _.Seconds
                                                                            let v10586 : int32 = v10585 v10574
                                                                            let v10589 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                            let v10590 : int32 = v10589 v10574
                                                                            let v10593 : System.DateTime = System.DateTime (1, 1, 1, v10578, v10582, v10586, v10590)
                                                                            v10593
                                                                    let v10601 : string = method7()
                                                                    let v10604 : (string -> string) = v10600.ToString
                                                                    let v10605 : string = v10604 v10601
                                                                    let _v10255 = v10605 
                                                                    #endif
                                                                    let v10608 : string = _v10255 
                                                                    let v10673 : string = "Critical"
                                                                    let v10674 : (unit -> string) = v10673.ToLower
                                                                    let v10675 : string = v10674 ()
                                                                    let v10678 : string = v10675.PadLeft (7, ' ')
                                                                    let v10692 : unit = ()
                                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                                    let v10693 : string = "inline_colorization::color_bright_red"
                                                                    let v10694 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v10693 
                                                                    let v10695 : string = "&*$0"
                                                                    let v10696 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10678 v10695 
                                                                    let v10697 : string = "inline_colorization::color_reset"
                                                                    let v10698 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v10697 
                                                                    let v10699 : string = "\"{v10694}{v10696}{v10698}\""
                                                                    let v10700 : string = @$"format!(" + v10699 + ")"
                                                                    let v10701 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v10700 
                                                                    let v10702 : string = "fable_library_rust::String_::fromString($0)"
                                                                    let v10703 : string = Fable.Core.RustInterop.emitRustExpr v10701 v10702 
                                                                    let _v10692 = v10703 
                                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                                    let v10704 : string = "inline_colorization::color_bright_red"
                                                                    let v10705 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v10704 
                                                                    let v10706 : string = "&*$0"
                                                                    let v10707 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10678 v10706 
                                                                    let v10708 : string = "inline_colorization::color_reset"
                                                                    let v10709 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v10708 
                                                                    let v10710 : string = "\"{v10705}{v10707}{v10709}\""
                                                                    let v10711 : string = @$"format!(" + v10710 + ")"
                                                                    let v10712 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v10711 
                                                                    let v10713 : string = "fable_library_rust::String_::fromString($0)"
                                                                    let v10714 : string = Fable.Core.RustInterop.emitRustExpr v10712 v10713 
                                                                    let _v10692 = v10714 
                                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                                    let v10715 : string = "inline_colorization::color_bright_red"
                                                                    let v10716 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v10715 
                                                                    let v10717 : string = "&*$0"
                                                                    let v10718 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10678 v10717 
                                                                    let v10719 : string = "inline_colorization::color_reset"
                                                                    let v10720 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v10719 
                                                                    let v10721 : string = "\"{v10716}{v10718}{v10720}\""
                                                                    let v10722 : string = @$"format!(" + v10721 + ")"
                                                                    let v10723 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v10722 
                                                                    let v10724 : string = "fable_library_rust::String_::fromString($0)"
                                                                    let v10725 : string = Fable.Core.RustInterop.emitRustExpr v10723 v10724 
                                                                    let _v10692 = v10725 
                                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                                    let v10726 : string = "\u001b[91m"
                                                                    let v10727 : string = method8()
                                                                    let v10728 : string = v10726 + v10678 
                                                                    let v10729 : string = v10728 + v10727 
                                                                    let _v10692 = v10729 
                                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                                    let v10730 : string = "\u001b[91m"
                                                                    let v10731 : string = method8()
                                                                    let v10732 : string = v10730 + v10678 
                                                                    let v10733 : string = v10732 + v10731 
                                                                    let _v10692 = v10733 
                                                                    #endif
#else
                                                                    let v10734 : string = "\u001b[91m"
                                                                    let v10735 : string = method8()
                                                                    let v10736 : string = v10734 + v10678 
                                                                    let v10737 : string = v10736 + v10735 
                                                                    let _v10692 = v10737 
                                                                    #endif
                                                                    let v10738 : string = _v10692 
                                                                    let v10744 : int64 = v10240.l0
                                                                    let v10745 : string = method9()
                                                                    let v10746 : Mut4 = {l0 = v10745} : Mut4
                                                                    let v10747 : string = $"{v5814}"
                                                                    let v10750 : string = v10746.l0
                                                                    let v10751 : string = v10750 + v10747 
                                                                    v10746.l0 <- v10751
                                                                    let v10752 : string = "exit_code"
                                                                    let v10753 : string = $"{v10752}"
                                                                    let v10756 : string = v10746.l0
                                                                    let v10757 : string = v10756 + v10753 
                                                                    v10746.l0 <- v10757
                                                                    let v10758 : string = $"{v5826}"
                                                                    let v10761 : string = v10746.l0
                                                                    let v10762 : string = v10761 + v10758 
                                                                    v10746.l0 <- v10762
                                                                    let v10763 : string = $"{v10160}"
                                                                    let v10766 : string = v10746.l0
                                                                    let v10767 : string = v10766 + v10763 
                                                                    v10746.l0 <- v10767
                                                                    let v10768 : string = $"{v5838}"
                                                                    let v10771 : string = v10746.l0
                                                                    let v10772 : string = v10771 + v10768 
                                                                    v10746.l0 <- v10772
                                                                    let v10773 : string = "spiral_wasm_result"
                                                                    let v10774 : string = $"{v10773}"
                                                                    let v10777 : string = v10746.l0
                                                                    let v10778 : string = v10777 + v10774 
                                                                    v10746.l0 <- v10778
                                                                    let v10779 : string = $"{v5826}"
                                                                    let v10782 : string = v10746.l0
                                                                    let v10783 : string = v10782 + v10779 
                                                                    v10746.l0 <- v10783
                                                                    let v10784 : string = $"{v10161}"
                                                                    let v10787 : string = v10746.l0
                                                                    let v10788 : string = v10787 + v10784 
                                                                    v10746.l0 <- v10788
                                                                    let v10789 : string = $"{v5838}"
                                                                    let v10792 : string = v10746.l0
                                                                    let v10793 : string = v10792 + v10789 
                                                                    v10746.l0 <- v10793
                                                                    let v10794 : string = "cargo_result"
                                                                    let v10795 : string = $"{v10794}"
                                                                    let v10798 : string = v10746.l0
                                                                    let v10799 : string = v10798 + v10795 
                                                                    v10746.l0 <- v10799
                                                                    let v10800 : string = $"{v5826}"
                                                                    let v10803 : string = v10746.l0
                                                                    let v10804 : string = v10803 + v10800 
                                                                    v10746.l0 <- v10804
                                                                    let v10805 : string = $"{v9357}"
                                                                    let v10808 : string = v10746.l0
                                                                    let v10809 : string = v10808 + v10805 
                                                                    v10746.l0 <- v10809
                                                                    let v10810 : string = $"{v5838}"
                                                                    let v10813 : string = v10746.l0
                                                                    let v10814 : string = v10813 + v10810 
                                                                    v10746.l0 <- v10814
                                                                    let v10815 : string = "new_code_path"
                                                                    let v10816 : string = $"{v10815}"
                                                                    let v10819 : string = v10746.l0
                                                                    let v10820 : string = v10819 + v10816 
                                                                    v10746.l0 <- v10820
                                                                    let v10821 : string = $"{v5826}"
                                                                    let v10824 : string = v10746.l0
                                                                    let v10825 : string = v10824 + v10821 
                                                                    v10746.l0 <- v10825
                                                                    let v10826 : string = $"{v9138}"
                                                                    let v10829 : string = v10746.l0
                                                                    let v10830 : string = v10829 + v10826 
                                                                    v10746.l0 <- v10830
                                                                    let v10831 : string = $"{v5884}"
                                                                    let v10834 : string = v10746.l0
                                                                    let v10835 : string = v10834 + v10831 
                                                                    v10746.l0 <- v10835
                                                                    let v10836 : string = v10746.l0
                                                                    let v10837 : (unit -> string) = closure63()
                                                                    let v10838 : string = $"{v10608} {v10738} #{v10744} %s{v10837 ()} / {v10836}"
                                                                    let v10841 : char list = []
                                                                    let v10842 : (char list -> (char [])) = List.toArray
                                                                    let v10843 : (char []) = v10842 v10841
                                                                    let v10846 : string = v10838.TrimStart v10843 
                                                                    let v10864 : char list = []
                                                                    let v10865 : char list = '/' :: v10864 
                                                                    let v10868 : char list = ' ' :: v10865 
                                                                    let v10871 : (char list -> (char [])) = List.toArray
                                                                    let v10872 : (char []) = v10871 v10868
                                                                    let v10875 : string = v10846.TrimEnd v10872 
                                                                    let v10893 : unit = ()
                                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                                    let v10894 : string = @"println!(""{}"", $0)"
                                                                    Fable.Core.RustInterop.emitRustExpr v10875 v10894 
                                                                    let _v10893 = () 
                                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                                    let v10895 : string = @"println!(""{}"", $0)"
                                                                    Fable.Core.RustInterop.emitRustExpr v10875 v10895 
                                                                    let _v10893 = () 
                                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                                    let v10896 : string = $"near_sdk::log!(\"{{}}\", $0)"
                                                                    Fable.Core.RustInterop.emitRustExpr v10875 v10896 
                                                                    let _v10893 = () 
                                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                                    System.Console.WriteLine v10875 
                                                                    let _v10893 = () 
                                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                                    System.Console.WriteLine v10875 
                                                                    let _v10893 = () 
                                                                    #endif
#else
                                                                    System.Console.WriteLine v10875 
                                                                    let _v10893 = () 
                                                                    #endif
                                                                    _v10893 
                                                                    let v10897 : (string -> unit) = v10179.l0
                                                                    v10897 v10875
                                                                let v10898 : US1 = US1_0(v5832)
                                                                let v10899 : US1 = US1_1
                                                                let v10900 : US1 = US1_1
                                                                struct (v10898, v10899, v10900)
                                                        struct (v10901, v10902, v10903)
                                                    else
                                                        let v10904 : bool = State.trace_state.IsNone
                                                        if v10904 then
                                                            let v10905 : US0 = US0_0
                                                            let struct (v10906 : Mut0, v10907 : Mut1, v10908 : Mut2, v10909 : Mut3, v10910 : int64 option) = method1(v10905)
                                                            let v10911 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v10906, v10907, v10908, v10909, v10910) 
                                                            State.trace_state <- v10911 
                                                            ()
                                                        let struct (v10916 : Mut0, v10917 : Mut1, v10918 : Mut2, v10919 : Mut3, v10920 : int64 option) = State.trace_state.Value
                                                        let v10931 : bool = State.trace_state.IsNone
                                                        if v10931 then
                                                            let v10932 : US0 = US0_0
                                                            let struct (v10933 : Mut0, v10934 : Mut1, v10935 : Mut2, v10936 : Mut3, v10937 : int64 option) = method1(v10932)
                                                            let v10938 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v10933, v10934, v10935, v10936, v10937) 
                                                            State.trace_state <- v10938 
                                                            ()
                                                        let struct (v10943 : Mut0, v10944 : Mut1, v10945 : Mut2, v10946 : Mut3, v10947 : int64 option) = State.trace_state.Value
                                                        let v10958 : US0 = v10946.l0
                                                        let v10959 : bool = v10945.l0
                                                        let v10960 : bool = v10959 = false
                                                        let v10963 : bool =
                                                            if v10960 then
                                                                false
                                                            else
                                                                let v10961 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v10958
                                                                let v10962 : bool = 4 >= v10961
                                                                v10962
                                                        if v10963 then
                                                            let v10964 : int64 = v10916.l0
                                                            let v10965 : int64 = v10964 + 1L
                                                            v10916.l0 <- v10965
                                                            let v10966 : bool = State.trace_state.IsNone
                                                            if v10966 then
                                                                let v10967 : US0 = US0_0
                                                                let struct (v10968 : Mut0, v10969 : Mut1, v10970 : Mut2, v10971 : Mut3, v10972 : int64 option) = method1(v10967)
                                                                let v10973 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v10968, v10969, v10970, v10971, v10972) 
                                                                State.trace_state <- v10973 
                                                                ()
                                                            let struct (v10978 : Mut0, v10979 : Mut1, v10980 : Mut2, v10981 : Mut3, v10982 : int64 option) = State.trace_state.Value
                                                            let v10993 : unit = ()
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v10994 : US3 option = None
                                                            let _v10994 = ref v10994 
                                                            match v10982 with
                                                            | Some x -> (
                                                            (fun () ->
                                                            (fun () ->
                                                            let v10995 : int64 = x
                                                            let v10996 : US3 = US3_0(v10995)
                                                            v10996 
                                                            )
                                                            |> fun x -> x () |> Some
                                                            ) () ) | None -> None
                                                            |> fun x -> _v10994.Value <- x
                                                            let v10997 : US3 option = _v10994.Value 
                                                            let v11008 : US3 = US3_1
                                                            let v11009 : US3 = v10997 |> Option.defaultValue v11008 
                                                            let v11049 : System.DateTime =
                                                                match v11009 with
                                                                | US3_1 -> (* None *)
                                                                    let v11045 : System.DateTime = System.DateTime.Now
                                                                    v11045
                                                                | US3_0(v11013) -> (* Some *)
                                                                    let v11014 : System.DateTime = System.DateTime.Now
                                                                    let v11017 : (System.DateTime -> int64) = _.Ticks
                                                                    let v11018 : int64 = v11017 v11014
                                                                    let v11021 : int64 = v11018 - v11013
                                                                    let v11022 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                    let v11023 : System.TimeSpan = v11022 v11021
                                                                    let v11026 : (System.TimeSpan -> int32) = _.Hours
                                                                    let v11027 : int32 = v11026 v11023
                                                                    let v11030 : (System.TimeSpan -> int32) = _.Minutes
                                                                    let v11031 : int32 = v11030 v11023
                                                                    let v11034 : (System.TimeSpan -> int32) = _.Seconds
                                                                    let v11035 : int32 = v11034 v11023
                                                                    let v11038 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                    let v11039 : int32 = v11038 v11023
                                                                    let v11042 : System.DateTime = System.DateTime (1, 1, 1, v11027, v11031, v11035, v11039)
                                                                    v11042
                                                            let v11050 : string = method6()
                                                            let v11053 : (string -> string) = v11049.ToString
                                                            let v11054 : string = v11053 v11050
                                                            let _v10993 = v11054 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v11057 : US3 option = None
                                                            let _v11057 = ref v11057 
                                                            match v10982 with
                                                            | Some x -> (
                                                            (fun () ->
                                                            (fun () ->
                                                            let v11058 : int64 = x
                                                            let v11059 : US3 = US3_0(v11058)
                                                            v11059 
                                                            )
                                                            |> fun x -> x () |> Some
                                                            ) () ) | None -> None
                                                            |> fun x -> _v11057.Value <- x
                                                            let v11060 : US3 option = _v11057.Value 
                                                            let v11071 : US3 = US3_1
                                                            let v11072 : US3 = v11060 |> Option.defaultValue v11071 
                                                            let v11112 : System.DateTime =
                                                                match v11072 with
                                                                | US3_1 -> (* None *)
                                                                    let v11108 : System.DateTime = System.DateTime.Now
                                                                    v11108
                                                                | US3_0(v11076) -> (* Some *)
                                                                    let v11077 : System.DateTime = System.DateTime.Now
                                                                    let v11080 : (System.DateTime -> int64) = _.Ticks
                                                                    let v11081 : int64 = v11080 v11077
                                                                    let v11084 : int64 = v11081 - v11076
                                                                    let v11085 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                    let v11086 : System.TimeSpan = v11085 v11084
                                                                    let v11089 : (System.TimeSpan -> int32) = _.Hours
                                                                    let v11090 : int32 = v11089 v11086
                                                                    let v11093 : (System.TimeSpan -> int32) = _.Minutes
                                                                    let v11094 : int32 = v11093 v11086
                                                                    let v11097 : (System.TimeSpan -> int32) = _.Seconds
                                                                    let v11098 : int32 = v11097 v11086
                                                                    let v11101 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                    let v11102 : int32 = v11101 v11086
                                                                    let v11105 : System.DateTime = System.DateTime (1, 1, 1, v11090, v11094, v11098, v11102)
                                                                    v11105
                                                            let v11113 : string = method6()
                                                            let v11116 : (string -> string) = v11112.ToString
                                                            let v11117 : string = v11116 v11113
                                                            let _v10993 = v11117 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v11120 : string = $"near_sdk::env::block_timestamp()"
                                                            let v11121 : uint64 = Fable.Core.RustInterop.emitRustExpr () v11120 
                                                            let v11122 : US3 option = None
                                                            let _v11122 = ref v11122 
                                                            match v10982 with
                                                            | Some x -> (
                                                            (fun () ->
                                                            (fun () ->
                                                            let v11123 : int64 = x
                                                            let v11124 : US3 = US3_0(v11123)
                                                            v11124 
                                                            )
                                                            |> fun x -> x () |> Some
                                                            ) () ) | None -> None
                                                            |> fun x -> _v11122.Value <- x
                                                            let v11125 : US3 option = _v11122.Value 
                                                            let v11136 : US3 = US3_1
                                                            let v11137 : US3 = v11125 |> Option.defaultValue v11136 
                                                            let v11146 : uint64 =
                                                                match v11137 with
                                                                | US3_1 -> (* None *)
                                                                    v11121
                                                                | US3_0(v11141) -> (* Some *)
                                                                    let v11142 : (int64 -> uint64) = uint64
                                                                    let v11143 : uint64 = v11142 v11141
                                                                    let v11144 : uint64 = v11121 - v11143
                                                                    v11144
                                                            let v11147 : uint64 = v11146 / 1000000000UL
                                                            let v11148 : uint64 = v11147 % 60UL
                                                            let v11149 : uint64 = v11147 / 60UL
                                                            let v11150 : uint64 = v11149 % 60UL
                                                            let v11151 : uint64 = v11147 / 3600UL
                                                            let v11152 : uint64 = v11151 % 24UL
                                                            let v11153 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
                                                            let v11154 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v11152, v11150, v11148) v11153 
                                                            let v11155 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v11156 : string = Fable.Core.RustInterop.emitRustExpr v11154 v11155 
                                                            let _v10993 = v11156 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v11157 : US3 option = None
                                                            let _v11157 = ref v11157 
                                                            match v10982 with
                                                            | Some x -> (
                                                            (fun () ->
                                                            (fun () ->
                                                            let v11158 : int64 = x
                                                            let v11159 : US3 = US3_0(v11158)
                                                            v11159 
                                                            )
                                                            |> fun x -> x () |> Some
                                                            ) () ) | None -> None
                                                            |> fun x -> _v11157.Value <- x
                                                            let v11160 : US3 option = _v11157.Value 
                                                            let v11171 : US3 = US3_1
                                                            let v11172 : US3 = v11160 |> Option.defaultValue v11171 
                                                            let v11212 : System.DateTime =
                                                                match v11172 with
                                                                | US3_1 -> (* None *)
                                                                    let v11208 : System.DateTime = System.DateTime.Now
                                                                    v11208
                                                                | US3_0(v11176) -> (* Some *)
                                                                    let v11177 : System.DateTime = System.DateTime.Now
                                                                    let v11180 : (System.DateTime -> int64) = _.Ticks
                                                                    let v11181 : int64 = v11180 v11177
                                                                    let v11184 : int64 = v11181 - v11176
                                                                    let v11185 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                    let v11186 : System.TimeSpan = v11185 v11184
                                                                    let v11189 : (System.TimeSpan -> int32) = _.Hours
                                                                    let v11190 : int32 = v11189 v11186
                                                                    let v11193 : (System.TimeSpan -> int32) = _.Minutes
                                                                    let v11194 : int32 = v11193 v11186
                                                                    let v11197 : (System.TimeSpan -> int32) = _.Seconds
                                                                    let v11198 : int32 = v11197 v11186
                                                                    let v11201 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                    let v11202 : int32 = v11201 v11186
                                                                    let v11205 : System.DateTime = System.DateTime (1, 1, 1, v11190, v11194, v11198, v11202)
                                                                    v11205
                                                            let v11213 : string = method7()
                                                            let v11216 : (string -> string) = v11212.ToString
                                                            let v11217 : string = v11216 v11213
                                                            let _v10993 = v11217 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v11220 : US3 option = None
                                                            let _v11220 = ref v11220 
                                                            match v10982 with
                                                            | Some x -> (
                                                            (fun () ->
                                                            (fun () ->
                                                            let v11221 : int64 = x
                                                            let v11222 : US3 = US3_0(v11221)
                                                            v11222 
                                                            )
                                                            |> fun x -> x () |> Some
                                                            ) () ) | None -> None
                                                            |> fun x -> _v11220.Value <- x
                                                            let v11223 : US3 option = _v11220.Value 
                                                            let v11234 : US3 = US3_1
                                                            let v11235 : US3 = v11223 |> Option.defaultValue v11234 
                                                            let v11275 : System.DateTime =
                                                                match v11235 with
                                                                | US3_1 -> (* None *)
                                                                    let v11271 : System.DateTime = System.DateTime.Now
                                                                    v11271
                                                                | US3_0(v11239) -> (* Some *)
                                                                    let v11240 : System.DateTime = System.DateTime.Now
                                                                    let v11243 : (System.DateTime -> int64) = _.Ticks
                                                                    let v11244 : int64 = v11243 v11240
                                                                    let v11247 : int64 = v11244 - v11239
                                                                    let v11248 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                    let v11249 : System.TimeSpan = v11248 v11247
                                                                    let v11252 : (System.TimeSpan -> int32) = _.Hours
                                                                    let v11253 : int32 = v11252 v11249
                                                                    let v11256 : (System.TimeSpan -> int32) = _.Minutes
                                                                    let v11257 : int32 = v11256 v11249
                                                                    let v11260 : (System.TimeSpan -> int32) = _.Seconds
                                                                    let v11261 : int32 = v11260 v11249
                                                                    let v11264 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                    let v11265 : int32 = v11264 v11249
                                                                    let v11268 : System.DateTime = System.DateTime (1, 1, 1, v11253, v11257, v11261, v11265)
                                                                    v11268
                                                            let v11276 : string = method7()
                                                            let v11279 : (string -> string) = v11275.ToString
                                                            let v11280 : string = v11279 v11276
                                                            let _v10993 = v11280 
                                                            #endif
#else
                                                            let v11283 : US3 option = None
                                                            let _v11283 = ref v11283 
                                                            match v10982 with
                                                            | Some x -> (
                                                            (fun () ->
                                                            (fun () ->
                                                            let v11284 : int64 = x
                                                            let v11285 : US3 = US3_0(v11284)
                                                            v11285 
                                                            )
                                                            |> fun x -> x () |> Some
                                                            ) () ) | None -> None
                                                            |> fun x -> _v11283.Value <- x
                                                            let v11286 : US3 option = _v11283.Value 
                                                            let v11297 : US3 = US3_1
                                                            let v11298 : US3 = v11286 |> Option.defaultValue v11297 
                                                            let v11338 : System.DateTime =
                                                                match v11298 with
                                                                | US3_1 -> (* None *)
                                                                    let v11334 : System.DateTime = System.DateTime.Now
                                                                    v11334
                                                                | US3_0(v11302) -> (* Some *)
                                                                    let v11303 : System.DateTime = System.DateTime.Now
                                                                    let v11306 : (System.DateTime -> int64) = _.Ticks
                                                                    let v11307 : int64 = v11306 v11303
                                                                    let v11310 : int64 = v11307 - v11302
                                                                    let v11311 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                    let v11312 : System.TimeSpan = v11311 v11310
                                                                    let v11315 : (System.TimeSpan -> int32) = _.Hours
                                                                    let v11316 : int32 = v11315 v11312
                                                                    let v11319 : (System.TimeSpan -> int32) = _.Minutes
                                                                    let v11320 : int32 = v11319 v11312
                                                                    let v11323 : (System.TimeSpan -> int32) = _.Seconds
                                                                    let v11324 : int32 = v11323 v11312
                                                                    let v11327 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                    let v11328 : int32 = v11327 v11312
                                                                    let v11331 : System.DateTime = System.DateTime (1, 1, 1, v11316, v11320, v11324, v11328)
                                                                    v11331
                                                            let v11339 : string = method7()
                                                            let v11342 : (string -> string) = v11338.ToString
                                                            let v11343 : string = v11342 v11339
                                                            let _v10993 = v11343 
                                                            #endif
                                                            let v11346 : string = _v10993 
                                                            let v11411 : string = "Critical"
                                                            let v11412 : (unit -> string) = v11411.ToLower
                                                            let v11413 : string = v11412 ()
                                                            let v11416 : string = v11413.PadLeft (7, ' ')
                                                            let v11430 : unit = ()
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v11431 : string = "inline_colorization::color_bright_red"
                                                            let v11432 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v11431 
                                                            let v11433 : string = "&*$0"
                                                            let v11434 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v11416 v11433 
                                                            let v11435 : string = "inline_colorization::color_reset"
                                                            let v11436 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v11435 
                                                            let v11437 : string = "\"{v11432}{v11434}{v11436}\""
                                                            let v11438 : string = @$"format!(" + v11437 + ")"
                                                            let v11439 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v11438 
                                                            let v11440 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v11441 : string = Fable.Core.RustInterop.emitRustExpr v11439 v11440 
                                                            let _v11430 = v11441 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v11442 : string = "inline_colorization::color_bright_red"
                                                            let v11443 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v11442 
                                                            let v11444 : string = "&*$0"
                                                            let v11445 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v11416 v11444 
                                                            let v11446 : string = "inline_colorization::color_reset"
                                                            let v11447 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v11446 
                                                            let v11448 : string = "\"{v11443}{v11445}{v11447}\""
                                                            let v11449 : string = @$"format!(" + v11448 + ")"
                                                            let v11450 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v11449 
                                                            let v11451 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v11452 : string = Fable.Core.RustInterop.emitRustExpr v11450 v11451 
                                                            let _v11430 = v11452 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v11453 : string = "inline_colorization::color_bright_red"
                                                            let v11454 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v11453 
                                                            let v11455 : string = "&*$0"
                                                            let v11456 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v11416 v11455 
                                                            let v11457 : string = "inline_colorization::color_reset"
                                                            let v11458 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v11457 
                                                            let v11459 : string = "\"{v11454}{v11456}{v11458}\""
                                                            let v11460 : string = @$"format!(" + v11459 + ")"
                                                            let v11461 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v11460 
                                                            let v11462 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v11463 : string = Fable.Core.RustInterop.emitRustExpr v11461 v11462 
                                                            let _v11430 = v11463 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v11464 : string = "\u001b[91m"
                                                            let v11465 : string = method8()
                                                            let v11466 : string = v11464 + v11416 
                                                            let v11467 : string = v11466 + v11465 
                                                            let _v11430 = v11467 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v11468 : string = "\u001b[91m"
                                                            let v11469 : string = method8()
                                                            let v11470 : string = v11468 + v11416 
                                                            let v11471 : string = v11470 + v11469 
                                                            let _v11430 = v11471 
                                                            #endif
#else
                                                            let v11472 : string = "\u001b[91m"
                                                            let v11473 : string = method8()
                                                            let v11474 : string = v11472 + v11416 
                                                            let v11475 : string = v11474 + v11473 
                                                            let _v11430 = v11475 
                                                            #endif
                                                            let v11476 : string = _v11430 
                                                            let v11482 : int64 = v10978.l0
                                                            let v11483 : string = method9()
                                                            let v11484 : Mut4 = {l0 = v11483} : Mut4
                                                            let v11485 : string = $"{v5814}"
                                                            let v11488 : string = v11484.l0
                                                            let v11489 : string = v11488 + v11485 
                                                            v11484.l0 <- v11489
                                                            let v11490 : string = "exit_code"
                                                            let v11491 : string = $"{v11490}"
                                                            let v11494 : string = v11484.l0
                                                            let v11495 : string = v11494 + v11491 
                                                            v11484.l0 <- v11495
                                                            let v11496 : string = $"{v5826}"
                                                            let v11499 : string = v11484.l0
                                                            let v11500 : string = v11499 + v11496 
                                                            v11484.l0 <- v11500
                                                            let v11501 : string = $"{v9356}"
                                                            let v11504 : string = v11484.l0
                                                            let v11505 : string = v11504 + v11501 
                                                            v11484.l0 <- v11505
                                                            let v11506 : string = $"{v5838}"
                                                            let v11509 : string = v11484.l0
                                                            let v11510 : string = v11509 + v11506 
                                                            v11484.l0 <- v11510
                                                            let v11511 : string = "cargo_result"
                                                            let v11512 : string = $"{v11511}"
                                                            let v11515 : string = v11484.l0
                                                            let v11516 : string = v11515 + v11512 
                                                            v11484.l0 <- v11516
                                                            let v11517 : string = $"{v5826}"
                                                            let v11520 : string = v11484.l0
                                                            let v11521 : string = v11520 + v11517 
                                                            v11484.l0 <- v11521
                                                            let v11522 : string = $"{v9357}"
                                                            let v11525 : string = v11484.l0
                                                            let v11526 : string = v11525 + v11522 
                                                            v11484.l0 <- v11526
                                                            let v11527 : string = $"{v5838}"
                                                            let v11530 : string = v11484.l0
                                                            let v11531 : string = v11530 + v11527 
                                                            v11484.l0 <- v11531
                                                            let v11532 : string = "new_code_path"
                                                            let v11533 : string = $"{v11532}"
                                                            let v11536 : string = v11484.l0
                                                            let v11537 : string = v11536 + v11533 
                                                            v11484.l0 <- v11537
                                                            let v11538 : string = $"{v5826}"
                                                            let v11541 : string = v11484.l0
                                                            let v11542 : string = v11541 + v11538 
                                                            v11484.l0 <- v11542
                                                            let v11543 : string = $"{v9138}"
                                                            let v11546 : string = v11484.l0
                                                            let v11547 : string = v11546 + v11543 
                                                            v11484.l0 <- v11547
                                                            let v11548 : string = $"{v5838}"
                                                            let v11551 : string = v11484.l0
                                                            let v11552 : string = v11551 + v11548 
                                                            v11484.l0 <- v11552
                                                            let v11553 : string = "wasm_path"
                                                            let v11554 : string = $"{v11553}"
                                                            let v11557 : string = v11484.l0
                                                            let v11558 : string = v11557 + v11554 
                                                            v11484.l0 <- v11558
                                                            let v11559 : string = $"{v5826}"
                                                            let v11562 : string = v11484.l0
                                                            let v11563 : string = v11562 + v11559 
                                                            v11484.l0 <- v11563
                                                            let v11564 : string = $"{v10146}"
                                                            let v11567 : string = v11484.l0
                                                            let v11568 : string = v11567 + v11564 
                                                            v11484.l0 <- v11568
                                                            let v11569 : string = $"{v5838}"
                                                            let v11572 : string = v11484.l0
                                                            let v11573 : string = v11572 + v11569 
                                                            v11484.l0 <- v11573
                                                            let v11574 : string = "command"
                                                            let v11575 : string = $"{v11574}"
                                                            let v11578 : string = v11484.l0
                                                            let v11579 : string = v11578 + v11575 
                                                            v11484.l0 <- v11579
                                                            let v11580 : string = $"{v5826}"
                                                            let v11583 : string = v11484.l0
                                                            let v11584 : string = v11583 + v11580 
                                                            v11484.l0 <- v11584
                                                            let v11585 : string = $"{v10149}"
                                                            let v11588 : string = v11484.l0
                                                            let v11589 : string = v11588 + v11585 
                                                            v11484.l0 <- v11589
                                                            let v11590 : string = $"{v5884}"
                                                            let v11593 : string = v11484.l0
                                                            let v11594 : string = v11593 + v11590 
                                                            v11484.l0 <- v11594
                                                            let v11595 : string = v11484.l0
                                                            let v11596 : (unit -> string) = closure64()
                                                            let v11597 : string = $"{v11346} {v11476} #{v11482} %s{v11596 ()} / {v11595}"
                                                            let v11600 : char list = []
                                                            let v11601 : (char list -> (char [])) = List.toArray
                                                            let v11602 : (char []) = v11601 v11600
                                                            let v11605 : string = v11597.TrimStart v11602 
                                                            let v11623 : char list = []
                                                            let v11624 : char list = '/' :: v11623 
                                                            let v11627 : char list = ' ' :: v11624 
                                                            let v11630 : (char list -> (char [])) = List.toArray
                                                            let v11631 : (char []) = v11630 v11627
                                                            let v11634 : string = v11605.TrimEnd v11631 
                                                            let v11652 : unit = ()
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v11653 : string = @"println!(""{}"", $0)"
                                                            Fable.Core.RustInterop.emitRustExpr v11634 v11653 
                                                            let _v11652 = () 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v11654 : string = @"println!(""{}"", $0)"
                                                            Fable.Core.RustInterop.emitRustExpr v11634 v11654 
                                                            let _v11652 = () 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v11655 : string = $"near_sdk::log!(\"{{}}\", $0)"
                                                            Fable.Core.RustInterop.emitRustExpr v11634 v11655 
                                                            let _v11652 = () 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            System.Console.WriteLine v11634 
                                                            let _v11652 = () 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            System.Console.WriteLine v11634 
                                                            let _v11652 = () 
                                                            #endif
#else
                                                            System.Console.WriteLine v11634 
                                                            let _v11652 = () 
                                                            #endif
                                                            _v11652 
                                                            let v11656 : (string -> unit) = v10917.l0
                                                            v11656 v11634
                                                        let v11657 : US1 = US1_0(v5832)
                                                        let v11658 : US1 = US1_1
                                                        let v11659 : US1 = US1_1
                                                        struct (v11657, v11658, v11659)
                                                struct (v11660, v11661, v11662)
                                        let v11666 : bool =
                                            match v5759 with
                                            | US33_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v11667 : bool = v11666 <> true
                                        let v11670 : string =
                                            if v11667 then
                                                let v11668 : string = "wasm32-unknown-unknown/release"
                                                v11668
                                            else
                                                let v11669 : string = "debug"
                                                v11669
                                        let v11671 : string = ""
                                        let v11672 : string = $"target/{v11670}/spiral_builder_{v5891}{v11671}"
                                        let v11673 : string = method15(v7425, v11672)
                                        let v11674 : string = ".wasm"
                                        let v11675 : string = $"target/{v11670}/spiral_builder_{v5891}{v11674}"
                                        let v11676 : string = method15(v7425, v11675)
                                        let v11677 : string = ".pdb"
                                        let v11678 : string = $"target/{v11670}/spiral_builder_{v5891}{v11677}"
                                        let v11679 : string = method15(v7425, v11678)
                                        let v11680 : string = ".exe"
                                        let v11681 : string = $"target/{v11670}/spiral_builder_{v5891}{v11680}"
                                        let v11682 : string = method15(v7425, v11681)
                                        let v11683 : string = ".d"
                                        let v11684 : string = $"target/{v11670}/spiral_builder_{v5891}{v11683}"
                                        let v11685 : string = method15(v7425, v11684)
                                        let v11686 : bool = method27(v11673)
                                        let v11687 : bool = method27(v11676)
                                        let v11688 : bool = method27(v11679)
                                        let v11689 : bool = method27(v11682)
                                        let v11690 : bool = method27(v11685)
                                        let v11691 : bool = State.trace_state.IsNone
                                        if v11691 then
                                            let v11692 : US0 = US0_0
                                            let struct (v11693 : Mut0, v11694 : Mut1, v11695 : Mut2, v11696 : Mut3, v11697 : int64 option) = method1(v11692)
                                            let v11698 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v11693, v11694, v11695, v11696, v11697) 
                                            State.trace_state <- v11698 
                                            ()
                                        let struct (v11703 : Mut0, v11704 : Mut1, v11705 : Mut2, v11706 : Mut3, v11707 : int64 option) = State.trace_state.Value
                                        let v11718 : bool = State.trace_state.IsNone
                                        if v11718 then
                                            let v11719 : US0 = US0_0
                                            let struct (v11720 : Mut0, v11721 : Mut1, v11722 : Mut2, v11723 : Mut3, v11724 : int64 option) = method1(v11719)
                                            let v11725 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v11720, v11721, v11722, v11723, v11724) 
                                            State.trace_state <- v11725 
                                            ()
                                        let struct (v11730 : Mut0, v11731 : Mut1, v11732 : Mut2, v11733 : Mut3, v11734 : int64 option) = State.trace_state.Value
                                        let v11745 : US0 = v11733.l0
                                        let v11746 : bool = v11732.l0
                                        let v11747 : bool = v11746 = false
                                        let v11750 : bool =
                                            if v11747 then
                                                false
                                            else
                                                let v11748 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v11745
                                                let v11749 : bool = 0 >= v11748
                                                v11749
                                        if v11750 then
                                            let v11751 : int64 = v11703.l0
                                            let v11752 : int64 = v11751 + 1L
                                            v11703.l0 <- v11752
                                            let v11753 : bool = State.trace_state.IsNone
                                            if v11753 then
                                                let v11754 : US0 = US0_0
                                                let struct (v11755 : Mut0, v11756 : Mut1, v11757 : Mut2, v11758 : Mut3, v11759 : int64 option) = method1(v11754)
                                                let v11760 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v11755, v11756, v11757, v11758, v11759) 
                                                State.trace_state <- v11760 
                                                ()
                                            let struct (v11765 : Mut0, v11766 : Mut1, v11767 : Mut2, v11768 : Mut3, v11769 : int64 option) = State.trace_state.Value
                                            let v11780 : unit = ()
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v11781 : US3 option = None
                                            let _v11781 = ref v11781 
                                            match v11769 with
                                            | Some x -> (
                                            (fun () ->
                                            (fun () ->
                                            let v11782 : int64 = x
                                            let v11783 : US3 = US3_0(v11782)
                                            v11783 
                                            )
                                            |> fun x -> x () |> Some
                                            ) () ) | None -> None
                                            |> fun x -> _v11781.Value <- x
                                            let v11784 : US3 option = _v11781.Value 
                                            let v11795 : US3 = US3_1
                                            let v11796 : US3 = v11784 |> Option.defaultValue v11795 
                                            let v11836 : System.DateTime =
                                                match v11796 with
                                                | US3_1 -> (* None *)
                                                    let v11832 : System.DateTime = System.DateTime.Now
                                                    v11832
                                                | US3_0(v11800) -> (* Some *)
                                                    let v11801 : System.DateTime = System.DateTime.Now
                                                    let v11804 : (System.DateTime -> int64) = _.Ticks
                                                    let v11805 : int64 = v11804 v11801
                                                    let v11808 : int64 = v11805 - v11800
                                                    let v11809 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                    let v11810 : System.TimeSpan = v11809 v11808
                                                    let v11813 : (System.TimeSpan -> int32) = _.Hours
                                                    let v11814 : int32 = v11813 v11810
                                                    let v11817 : (System.TimeSpan -> int32) = _.Minutes
                                                    let v11818 : int32 = v11817 v11810
                                                    let v11821 : (System.TimeSpan -> int32) = _.Seconds
                                                    let v11822 : int32 = v11821 v11810
                                                    let v11825 : (System.TimeSpan -> int32) = _.Milliseconds
                                                    let v11826 : int32 = v11825 v11810
                                                    let v11829 : System.DateTime = System.DateTime (1, 1, 1, v11814, v11818, v11822, v11826)
                                                    v11829
                                            let v11837 : string = method6()
                                            let v11840 : (string -> string) = v11836.ToString
                                            let v11841 : string = v11840 v11837
                                            let _v11780 = v11841 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v11844 : US3 option = None
                                            let _v11844 = ref v11844 
                                            match v11769 with
                                            | Some x -> (
                                            (fun () ->
                                            (fun () ->
                                            let v11845 : int64 = x
                                            let v11846 : US3 = US3_0(v11845)
                                            v11846 
                                            )
                                            |> fun x -> x () |> Some
                                            ) () ) | None -> None
                                            |> fun x -> _v11844.Value <- x
                                            let v11847 : US3 option = _v11844.Value 
                                            let v11858 : US3 = US3_1
                                            let v11859 : US3 = v11847 |> Option.defaultValue v11858 
                                            let v11899 : System.DateTime =
                                                match v11859 with
                                                | US3_1 -> (* None *)
                                                    let v11895 : System.DateTime = System.DateTime.Now
                                                    v11895
                                                | US3_0(v11863) -> (* Some *)
                                                    let v11864 : System.DateTime = System.DateTime.Now
                                                    let v11867 : (System.DateTime -> int64) = _.Ticks
                                                    let v11868 : int64 = v11867 v11864
                                                    let v11871 : int64 = v11868 - v11863
                                                    let v11872 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                    let v11873 : System.TimeSpan = v11872 v11871
                                                    let v11876 : (System.TimeSpan -> int32) = _.Hours
                                                    let v11877 : int32 = v11876 v11873
                                                    let v11880 : (System.TimeSpan -> int32) = _.Minutes
                                                    let v11881 : int32 = v11880 v11873
                                                    let v11884 : (System.TimeSpan -> int32) = _.Seconds
                                                    let v11885 : int32 = v11884 v11873
                                                    let v11888 : (System.TimeSpan -> int32) = _.Milliseconds
                                                    let v11889 : int32 = v11888 v11873
                                                    let v11892 : System.DateTime = System.DateTime (1, 1, 1, v11877, v11881, v11885, v11889)
                                                    v11892
                                            let v11900 : string = method6()
                                            let v11903 : (string -> string) = v11899.ToString
                                            let v11904 : string = v11903 v11900
                                            let _v11780 = v11904 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v11907 : string = $"near_sdk::env::block_timestamp()"
                                            let v11908 : uint64 = Fable.Core.RustInterop.emitRustExpr () v11907 
                                            let v11909 : US3 option = None
                                            let _v11909 = ref v11909 
                                            match v11769 with
                                            | Some x -> (
                                            (fun () ->
                                            (fun () ->
                                            let v11910 : int64 = x
                                            let v11911 : US3 = US3_0(v11910)
                                            v11911 
                                            )
                                            |> fun x -> x () |> Some
                                            ) () ) | None -> None
                                            |> fun x -> _v11909.Value <- x
                                            let v11912 : US3 option = _v11909.Value 
                                            let v11923 : US3 = US3_1
                                            let v11924 : US3 = v11912 |> Option.defaultValue v11923 
                                            let v11933 : uint64 =
                                                match v11924 with
                                                | US3_1 -> (* None *)
                                                    v11908
                                                | US3_0(v11928) -> (* Some *)
                                                    let v11929 : (int64 -> uint64) = uint64
                                                    let v11930 : uint64 = v11929 v11928
                                                    let v11931 : uint64 = v11908 - v11930
                                                    v11931
                                            let v11934 : uint64 = v11933 / 1000000000UL
                                            let v11935 : uint64 = v11934 % 60UL
                                            let v11936 : uint64 = v11934 / 60UL
                                            let v11937 : uint64 = v11936 % 60UL
                                            let v11938 : uint64 = v11934 / 3600UL
                                            let v11939 : uint64 = v11938 % 24UL
                                            let v11940 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
                                            let v11941 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v11939, v11937, v11935) v11940 
                                            let v11942 : string = "fable_library_rust::String_::fromString($0)"
                                            let v11943 : string = Fable.Core.RustInterop.emitRustExpr v11941 v11942 
                                            let _v11780 = v11943 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v11944 : US3 option = None
                                            let _v11944 = ref v11944 
                                            match v11769 with
                                            | Some x -> (
                                            (fun () ->
                                            (fun () ->
                                            let v11945 : int64 = x
                                            let v11946 : US3 = US3_0(v11945)
                                            v11946 
                                            )
                                            |> fun x -> x () |> Some
                                            ) () ) | None -> None
                                            |> fun x -> _v11944.Value <- x
                                            let v11947 : US3 option = _v11944.Value 
                                            let v11958 : US3 = US3_1
                                            let v11959 : US3 = v11947 |> Option.defaultValue v11958 
                                            let v11999 : System.DateTime =
                                                match v11959 with
                                                | US3_1 -> (* None *)
                                                    let v11995 : System.DateTime = System.DateTime.Now
                                                    v11995
                                                | US3_0(v11963) -> (* Some *)
                                                    let v11964 : System.DateTime = System.DateTime.Now
                                                    let v11967 : (System.DateTime -> int64) = _.Ticks
                                                    let v11968 : int64 = v11967 v11964
                                                    let v11971 : int64 = v11968 - v11963
                                                    let v11972 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                    let v11973 : System.TimeSpan = v11972 v11971
                                                    let v11976 : (System.TimeSpan -> int32) = _.Hours
                                                    let v11977 : int32 = v11976 v11973
                                                    let v11980 : (System.TimeSpan -> int32) = _.Minutes
                                                    let v11981 : int32 = v11980 v11973
                                                    let v11984 : (System.TimeSpan -> int32) = _.Seconds
                                                    let v11985 : int32 = v11984 v11973
                                                    let v11988 : (System.TimeSpan -> int32) = _.Milliseconds
                                                    let v11989 : int32 = v11988 v11973
                                                    let v11992 : System.DateTime = System.DateTime (1, 1, 1, v11977, v11981, v11985, v11989)
                                                    v11992
                                            let v12000 : string = method7()
                                            let v12003 : (string -> string) = v11999.ToString
                                            let v12004 : string = v12003 v12000
                                            let _v11780 = v12004 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v12007 : US3 option = None
                                            let _v12007 = ref v12007 
                                            match v11769 with
                                            | Some x -> (
                                            (fun () ->
                                            (fun () ->
                                            let v12008 : int64 = x
                                            let v12009 : US3 = US3_0(v12008)
                                            v12009 
                                            )
                                            |> fun x -> x () |> Some
                                            ) () ) | None -> None
                                            |> fun x -> _v12007.Value <- x
                                            let v12010 : US3 option = _v12007.Value 
                                            let v12021 : US3 = US3_1
                                            let v12022 : US3 = v12010 |> Option.defaultValue v12021 
                                            let v12062 : System.DateTime =
                                                match v12022 with
                                                | US3_1 -> (* None *)
                                                    let v12058 : System.DateTime = System.DateTime.Now
                                                    v12058
                                                | US3_0(v12026) -> (* Some *)
                                                    let v12027 : System.DateTime = System.DateTime.Now
                                                    let v12030 : (System.DateTime -> int64) = _.Ticks
                                                    let v12031 : int64 = v12030 v12027
                                                    let v12034 : int64 = v12031 - v12026
                                                    let v12035 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                    let v12036 : System.TimeSpan = v12035 v12034
                                                    let v12039 : (System.TimeSpan -> int32) = _.Hours
                                                    let v12040 : int32 = v12039 v12036
                                                    let v12043 : (System.TimeSpan -> int32) = _.Minutes
                                                    let v12044 : int32 = v12043 v12036
                                                    let v12047 : (System.TimeSpan -> int32) = _.Seconds
                                                    let v12048 : int32 = v12047 v12036
                                                    let v12051 : (System.TimeSpan -> int32) = _.Milliseconds
                                                    let v12052 : int32 = v12051 v12036
                                                    let v12055 : System.DateTime = System.DateTime (1, 1, 1, v12040, v12044, v12048, v12052)
                                                    v12055
                                            let v12063 : string = method7()
                                            let v12066 : (string -> string) = v12062.ToString
                                            let v12067 : string = v12066 v12063
                                            let _v11780 = v12067 
                                            #endif
#else
                                            let v12070 : US3 option = None
                                            let _v12070 = ref v12070 
                                            match v11769 with
                                            | Some x -> (
                                            (fun () ->
                                            (fun () ->
                                            let v12071 : int64 = x
                                            let v12072 : US3 = US3_0(v12071)
                                            v12072 
                                            )
                                            |> fun x -> x () |> Some
                                            ) () ) | None -> None
                                            |> fun x -> _v12070.Value <- x
                                            let v12073 : US3 option = _v12070.Value 
                                            let v12084 : US3 = US3_1
                                            let v12085 : US3 = v12073 |> Option.defaultValue v12084 
                                            let v12125 : System.DateTime =
                                                match v12085 with
                                                | US3_1 -> (* None *)
                                                    let v12121 : System.DateTime = System.DateTime.Now
                                                    v12121
                                                | US3_0(v12089) -> (* Some *)
                                                    let v12090 : System.DateTime = System.DateTime.Now
                                                    let v12093 : (System.DateTime -> int64) = _.Ticks
                                                    let v12094 : int64 = v12093 v12090
                                                    let v12097 : int64 = v12094 - v12089
                                                    let v12098 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                    let v12099 : System.TimeSpan = v12098 v12097
                                                    let v12102 : (System.TimeSpan -> int32) = _.Hours
                                                    let v12103 : int32 = v12102 v12099
                                                    let v12106 : (System.TimeSpan -> int32) = _.Minutes
                                                    let v12107 : int32 = v12106 v12099
                                                    let v12110 : (System.TimeSpan -> int32) = _.Seconds
                                                    let v12111 : int32 = v12110 v12099
                                                    let v12114 : (System.TimeSpan -> int32) = _.Milliseconds
                                                    let v12115 : int32 = v12114 v12099
                                                    let v12118 : System.DateTime = System.DateTime (1, 1, 1, v12103, v12107, v12111, v12115)
                                                    v12118
                                            let v12126 : string = method7()
                                            let v12129 : (string -> string) = v12125.ToString
                                            let v12130 : string = v12129 v12126
                                            let _v11780 = v12130 
                                            #endif
                                            let v12133 : string = _v11780 
                                            let v12198 : string = "Verbose"
                                            let v12199 : (unit -> string) = v12198.ToLower
                                            let v12200 : string = v12199 ()
                                            let v12203 : string = v12200.PadLeft (7, ' ')
                                            let v12217 : unit = ()
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v12218 : string = "inline_colorization::color_bright_black"
                                            let v12219 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v12218 
                                            let v12220 : string = "&*$0"
                                            let v12221 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v12203 v12220 
                                            let v12222 : string = "inline_colorization::color_reset"
                                            let v12223 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v12222 
                                            let v12224 : string = "\"{v12219}{v12221}{v12223}\""
                                            let v12225 : string = @$"format!(" + v12224 + ")"
                                            let v12226 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v12225 
                                            let v12227 : string = "fable_library_rust::String_::fromString($0)"
                                            let v12228 : string = Fable.Core.RustInterop.emitRustExpr v12226 v12227 
                                            let _v12217 = v12228 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v12229 : string = "inline_colorization::color_bright_black"
                                            let v12230 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v12229 
                                            let v12231 : string = "&*$0"
                                            let v12232 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v12203 v12231 
                                            let v12233 : string = "inline_colorization::color_reset"
                                            let v12234 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v12233 
                                            let v12235 : string = "\"{v12230}{v12232}{v12234}\""
                                            let v12236 : string = @$"format!(" + v12235 + ")"
                                            let v12237 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v12236 
                                            let v12238 : string = "fable_library_rust::String_::fromString($0)"
                                            let v12239 : string = Fable.Core.RustInterop.emitRustExpr v12237 v12238 
                                            let _v12217 = v12239 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v12240 : string = "inline_colorization::color_bright_black"
                                            let v12241 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v12240 
                                            let v12242 : string = "&*$0"
                                            let v12243 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v12203 v12242 
                                            let v12244 : string = "inline_colorization::color_reset"
                                            let v12245 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v12244 
                                            let v12246 : string = "\"{v12241}{v12243}{v12245}\""
                                            let v12247 : string = @$"format!(" + v12246 + ")"
                                            let v12248 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v12247 
                                            let v12249 : string = "fable_library_rust::String_::fromString($0)"
                                            let v12250 : string = Fable.Core.RustInterop.emitRustExpr v12248 v12249 
                                            let _v12217 = v12250 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v12251 : string = "\u001b[90m"
                                            let v12252 : string = method8()
                                            let v12253 : string = v12251 + v12203 
                                            let v12254 : string = v12253 + v12252 
                                            let _v12217 = v12254 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v12255 : string = "\u001b[90m"
                                            let v12256 : string = method8()
                                            let v12257 : string = v12255 + v12203 
                                            let v12258 : string = v12257 + v12256 
                                            let _v12217 = v12258 
                                            #endif
#else
                                            let v12259 : string = "\u001b[90m"
                                            let v12260 : string = method8()
                                            let v12261 : string = v12259 + v12203 
                                            let v12262 : string = v12261 + v12260 
                                            let _v12217 = v12262 
                                            #endif
                                            let v12263 : string = _v12217 
                                            let v12269 : int64 = v11765.l0
                                            let v12270 : string = method9()
                                            let v12271 : Mut4 = {l0 = v12270} : Mut4
                                            let v12272 : string = $"{v5814}"
                                            let v12275 : string = v12271.l0
                                            let v12276 : string = v12275 + v12272 
                                            v12271.l0 <- v12276
                                            let v12277 : string = "new_code_path"
                                            let v12278 : string = $"{v12277}"
                                            let v12281 : string = v12271.l0
                                            let v12282 : string = v12281 + v12278 
                                            v12271.l0 <- v12282
                                            let v12283 : string = $"{v5826}"
                                            let v12286 : string = v12271.l0
                                            let v12287 : string = v12286 + v12283 
                                            v12271.l0 <- v12287
                                            let v12288 : string = $"{v9138}"
                                            let v12291 : string = v12271.l0
                                            let v12292 : string = v12291 + v12288 
                                            v12271.l0 <- v12292
                                            let v12293 : string = $"{v5838}"
                                            let v12296 : string = v12271.l0
                                            let v12297 : string = v12296 + v12293 
                                            v12271.l0 <- v12297
                                            let v12298 : string = "cleanup"
                                            let v12299 : string = $"{v12298}"
                                            let v12302 : string = v12271.l0
                                            let v12303 : string = v12302 + v12299 
                                            v12271.l0 <- v12303
                                            let v12304 : string = $"{v5826}"
                                            let v12307 : string = v12271.l0
                                            let v12308 : string = v12307 + v12304 
                                            v12271.l0 <- v12308
                                            let v12309 : UH4 = UH4_0
                                            let v12310 : UH4 = UH4_1(v11673, v11686, v12309)
                                            let v12311 : UH4 = UH4_1(v11676, v11687, v12310)
                                            let v12312 : UH4 = UH4_1(v11679, v11688, v12311)
                                            let v12313 : UH4 = UH4_1(v11682, v11689, v12312)
                                            let v12314 : UH4 = UH4_1(v11685, v11690, v12313)
                                            let v12315 : string = $"%A{v12314}"
                                            let v12324 : string = $"{v12315}"
                                            let v12327 : string = v12271.l0
                                            let v12328 : string = v12327 + v12324 
                                            v12271.l0 <- v12328
                                            let v12329 : string = $"{v5884}"
                                            let v12332 : string = v12271.l0
                                            let v12333 : string = v12332 + v12329 
                                            v12271.l0 <- v12333
                                            let v12334 : string = v12271.l0
                                            let v12335 : (unit -> string) = closure65()
                                            let v12336 : string = $"{v12133} {v12263} #{v12269} %s{v12335 ()} / {v12334}"
                                            let v12339 : char list = []
                                            let v12340 : (char list -> (char [])) = List.toArray
                                            let v12341 : (char []) = v12340 v12339
                                            let v12344 : string = v12336.TrimStart v12341 
                                            let v12361 : char list = []
                                            let v12362 : char list = '/' :: v12361 
                                            let v12365 : char list = ' ' :: v12362 
                                            let v12368 : (char list -> (char [])) = List.toArray
                                            let v12369 : (char []) = v12368 v12365
                                            let v12372 : string = v12344.TrimEnd v12369 
                                            let v12389 : unit = ()
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v12390 : string = @"println!(""{}"", $0)"
                                            Fable.Core.RustInterop.emitRustExpr v12372 v12390 
                                            let _v12389 = () 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v12391 : string = @"println!(""{}"", $0)"
                                            Fable.Core.RustInterop.emitRustExpr v12372 v12391 
                                            let _v12389 = () 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v12392 : string = $"near_sdk::log!(\"{{}}\", $0)"
                                            Fable.Core.RustInterop.emitRustExpr v12372 v12392 
                                            let _v12389 = () 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            System.Console.WriteLine v12372 
                                            let _v12389 = () 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            System.Console.WriteLine v12372 
                                            let _v12389 = () 
                                            #endif
#else
                                            System.Console.WriteLine v12372 
                                            let _v12389 = () 
                                            #endif
                                            _v12389 
                                            let v12393 : (string -> unit) = v11704.l0
                                            v12393 v12372
                                        let v12397 : UH4 =
                                            if v11686 then
                                                let v12394 : UH4 = UH4_0
                                                UH4_1(v11673, v11686, v12394)
                                            else
                                                UH4_0
                                        let v12399 : UH4 =
                                            if v11687 then
                                                UH4_1(v11676, v11687, v12397)
                                            else
                                                v12397
                                        let v12401 : UH4 =
                                            if v11688 then
                                                UH4_1(v11679, v11688, v12399)
                                            else
                                                v12399
                                        let v12403 : UH4 =
                                            if v11689 then
                                                UH4_1(v11682, v11689, v12401)
                                            else
                                                v12401
                                        let v12405 : UH4 =
                                            if v11690 then
                                                UH4_1(v11685, v11690, v12403)
                                            else
                                                v12403
                                        method111(v12405)
                                        struct (v11663, v11664, v11665)
                                struct (v12406, v12407, v12408)
                            else
                                let v12409 : string = "fable_library_rust::String_::fromString($0)"
                                let v12410 : string = Fable.Core.RustInterop.emitRustExpr v27 v12409 
                                let v12411 : bool = v12410 = "typescript"
                                let struct (v21895 : US1, v21896 : US1, v21897 : US1) =
                                    if v12411 then
                                        let v12412 : string = method79()
                                        let v12413 : string = "&*$0"
                                        let v12414 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v12412 v12413 
                                        let v12415 : string = "clap::ArgMatches::get_one(&$0, v12414).cloned()"
                                        let v12416 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v28 v12415 
                                        let v12417 : US5 option = None
                                        let _v12417 = ref v12417 
                                        match v12416 with
                                        | Some x -> (
                                        (fun () ->
                                        (fun () ->
                                        let v12418 : std_string_String = x
                                        let v12419 : US5 = US5_0(v12418)
                                        v12419 
                                        )
                                        |> fun x -> x () |> Some
                                        ) () ) | None -> None
                                        |> fun x -> _v12417.Value <- x
                                        let v12420 : US5 option = _v12417.Value 
                                        let v12431 : US5 = US5_1
                                        let v12432 : US5 = v12420 |> Option.defaultValue v12431 
                                        let v12439 : std_string_String =
                                            match v12432 with
                                            | US5_1 -> (* None *)
                                                failwith<std_string_String> "Option does not have a value."
                                            | US5_0(v12436) -> (* Some *)
                                                v12436
                                        let v12440 : string = "fable_library_rust::String_::fromString($0)"
                                        let v12441 : string = Fable.Core.RustInterop.emitRustExpr v12439 v12440 
                                        let v12442 : string = method13()
                                        let v12443 : string = "&*$0"
                                        let v12444 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v12442 v12443 
                                        let v12445 : string = "clap::ArgMatches::get_many(&$0, v12444).map(|x| x.cloned().into_iter().collect())"
                                        let v12446 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr v28 v12445 
                                        let v12447 : US9 option = None
                                        let _v12447 = ref v12447 
                                        match v12446 with
                                        | Some x -> (
                                        (fun () ->
                                        (fun () ->
                                        let v12448 : Vec<std_string_String> = x
                                        let v12449 : US9 = US9_0(v12448)
                                        v12449 
                                        )
                                        |> fun x -> x () |> Some
                                        ) () ) | None -> None
                                        |> fun x -> _v12447.Value <- x
                                        let v12450 : US9 option = _v12447.Value 
                                        let v12461 : US9 = US9_1
                                        let v12462 : US9 = v12450 |> Option.defaultValue v12461 
                                        let v12466 : (std_string_String []) = [||]
                                        let v12467 : string = "$0.to_vec()"
                                        let v12468 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v12466 v12467 
                                        let v12471 : Vec<std_string_String> =
                                            match v12462 with
                                            | US9_1 -> (* None *)
                                                v12468
                                            | US9_0(v12469) -> (* Some *)
                                                v12469
                                        let v12472 : bool =
                                            match v0 with
                                            | US0_0 -> (* Verbose *)
                                                true
                                            | _ ->
                                                false
                                        let v12473 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v12474 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v12475 : string = "std::fs::read(&*$0)"
                                        let v12476 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v12441 v12475 
                                        let v12477 : string = "$0.unwrap()"
                                        let v12478 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v12476 v12477 
                                        let _v12474 = v12478 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v12479 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v12474 = v12479 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v12482 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v12474 = v12482 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v12485 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v12474 = v12485 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v12488 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v12474 = v12488 
                                        #endif
#else
                                        let v12491 : (uint8 []) = v12441 |> System.IO.File.ReadAllBytes
                                        let v12492 : string = "$0.to_vec()"
                                        let v12493 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v12491 v12492 
                                        let _v12474 = v12493 
                                        #endif
                                        let v12494 : Vec<uint8> = _v12474 
                                        let v12499 : Vec<uint8> = method14(v12494)
                                        let v12500 : string = "std::string::String::from_utf8($0)"
                                        let v12501 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v12499 v12500 
                                        let v12502 : string = "$0.unwrap()"
                                        let v12503 : std_string_String = Fable.Core.RustInterop.emitRustExpr v12501 v12502 
                                        let v12504 : string = "fable_library_rust::String_::fromString($0)"
                                        let v12505 : string = Fable.Core.RustInterop.emitRustExpr v12503 v12504 
                                        let _v12473 = v12505 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v12506 : string = null |> unbox<string>
                                        let _v12473 = v12506 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v12509 : string = null |> unbox<string>
                                        let _v12473 = v12509 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v12512 : string = null |> unbox<string>
                                        let _v12473 = v12512 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v12515 : string = null |> unbox<string>
                                        let _v12473 = v12515 
                                        #endif
#else
                                        let v12518 : string = v12441 |> System.IO.File.ReadAllText
                                        let _v12473 = v12518 
                                        #endif
                                        let v12519 : string = _v12473 
                                        let v12524 : string = "ts"
                                        let v12525 : string = $"%A{struct (v12524, v12519)}"
                                        let v12528 : string = method94(v12525)
                                        let v12529 : string = __SOURCE_DIRECTORY__
                                        let v12530 : string = "polyglot"
                                        let v12531 : string = ".devcontainer"
                                        let v12532 : string = method15(v12530, v12531)
                                        let v12533 : US12 = method18(v12532, v12529)
                                        let v13211 : US1 =
                                            match v12533 with
                                            | US12_1(v12536) -> (* Error *)
                                                let v12537 : bool = State.trace_state.IsNone
                                                if v12537 then
                                                    let v12538 : US0 = US0_0
                                                    let struct (v12539 : Mut0, v12540 : Mut1, v12541 : Mut2, v12542 : Mut3, v12543 : int64 option) = method1(v12538)
                                                    let v12544 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v12539, v12540, v12541, v12542, v12543) 
                                                    State.trace_state <- v12544 
                                                    ()
                                                let struct (v12549 : Mut0, v12550 : Mut1, v12551 : Mut2, v12552 : Mut3, v12553 : int64 option) = State.trace_state.Value
                                                let v12564 : bool = State.trace_state.IsNone
                                                if v12564 then
                                                    let v12565 : US0 = US0_0
                                                    let struct (v12566 : Mut0, v12567 : Mut1, v12568 : Mut2, v12569 : Mut3, v12570 : int64 option) = method1(v12565)
                                                    let v12571 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v12566, v12567, v12568, v12569, v12570) 
                                                    State.trace_state <- v12571 
                                                    ()
                                                let struct (v12576 : Mut0, v12577 : Mut1, v12578 : Mut2, v12579 : Mut3, v12580 : int64 option) = State.trace_state.Value
                                                let v12591 : US0 = v12579.l0
                                                let v12592 : bool = v12578.l0
                                                let v12593 : bool = v12592 = false
                                                let v12596 : bool =
                                                    if v12593 then
                                                        false
                                                    else
                                                        let v12594 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v12591
                                                        let v12595 : bool = 3 >= v12594
                                                        v12595
                                                if v12596 then
                                                    let v12597 : int64 = v12549.l0
                                                    let v12598 : int64 = v12597 + 1L
                                                    v12549.l0 <- v12598
                                                    let v12599 : bool = State.trace_state.IsNone
                                                    if v12599 then
                                                        let v12600 : US0 = US0_0
                                                        let struct (v12601 : Mut0, v12602 : Mut1, v12603 : Mut2, v12604 : Mut3, v12605 : int64 option) = method1(v12600)
                                                        let v12606 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v12601, v12602, v12603, v12604, v12605) 
                                                        State.trace_state <- v12606 
                                                        ()
                                                    let struct (v12611 : Mut0, v12612 : Mut1, v12613 : Mut2, v12614 : Mut3, v12615 : int64 option) = State.trace_state.Value
                                                    let v12626 : unit = ()
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v12627 : US3 option = None
                                                    let _v12627 = ref v12627 
                                                    match v12615 with
                                                    | Some x -> (
                                                    (fun () ->
                                                    (fun () ->
                                                    let v12628 : int64 = x
                                                    let v12629 : US3 = US3_0(v12628)
                                                    v12629 
                                                    )
                                                    |> fun x -> x () |> Some
                                                    ) () ) | None -> None
                                                    |> fun x -> _v12627.Value <- x
                                                    let v12630 : US3 option = _v12627.Value 
                                                    let v12641 : US3 = US3_1
                                                    let v12642 : US3 = v12630 |> Option.defaultValue v12641 
                                                    let v12682 : System.DateTime =
                                                        match v12642 with
                                                        | US3_1 -> (* None *)
                                                            let v12678 : System.DateTime = System.DateTime.Now
                                                            v12678
                                                        | US3_0(v12646) -> (* Some *)
                                                            let v12647 : System.DateTime = System.DateTime.Now
                                                            let v12650 : (System.DateTime -> int64) = _.Ticks
                                                            let v12651 : int64 = v12650 v12647
                                                            let v12654 : int64 = v12651 - v12646
                                                            let v12655 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                            let v12656 : System.TimeSpan = v12655 v12654
                                                            let v12659 : (System.TimeSpan -> int32) = _.Hours
                                                            let v12660 : int32 = v12659 v12656
                                                            let v12663 : (System.TimeSpan -> int32) = _.Minutes
                                                            let v12664 : int32 = v12663 v12656
                                                            let v12667 : (System.TimeSpan -> int32) = _.Seconds
                                                            let v12668 : int32 = v12667 v12656
                                                            let v12671 : (System.TimeSpan -> int32) = _.Milliseconds
                                                            let v12672 : int32 = v12671 v12656
                                                            let v12675 : System.DateTime = System.DateTime (1, 1, 1, v12660, v12664, v12668, v12672)
                                                            v12675
                                                    let v12683 : string = method6()
                                                    let v12686 : (string -> string) = v12682.ToString
                                                    let v12687 : string = v12686 v12683
                                                    let _v12626 = v12687 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v12690 : US3 option = None
                                                    let _v12690 = ref v12690 
                                                    match v12615 with
                                                    | Some x -> (
                                                    (fun () ->
                                                    (fun () ->
                                                    let v12691 : int64 = x
                                                    let v12692 : US3 = US3_0(v12691)
                                                    v12692 
                                                    )
                                                    |> fun x -> x () |> Some
                                                    ) () ) | None -> None
                                                    |> fun x -> _v12690.Value <- x
                                                    let v12693 : US3 option = _v12690.Value 
                                                    let v12704 : US3 = US3_1
                                                    let v12705 : US3 = v12693 |> Option.defaultValue v12704 
                                                    let v12745 : System.DateTime =
                                                        match v12705 with
                                                        | US3_1 -> (* None *)
                                                            let v12741 : System.DateTime = System.DateTime.Now
                                                            v12741
                                                        | US3_0(v12709) -> (* Some *)
                                                            let v12710 : System.DateTime = System.DateTime.Now
                                                            let v12713 : (System.DateTime -> int64) = _.Ticks
                                                            let v12714 : int64 = v12713 v12710
                                                            let v12717 : int64 = v12714 - v12709
                                                            let v12718 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                            let v12719 : System.TimeSpan = v12718 v12717
                                                            let v12722 : (System.TimeSpan -> int32) = _.Hours
                                                            let v12723 : int32 = v12722 v12719
                                                            let v12726 : (System.TimeSpan -> int32) = _.Minutes
                                                            let v12727 : int32 = v12726 v12719
                                                            let v12730 : (System.TimeSpan -> int32) = _.Seconds
                                                            let v12731 : int32 = v12730 v12719
                                                            let v12734 : (System.TimeSpan -> int32) = _.Milliseconds
                                                            let v12735 : int32 = v12734 v12719
                                                            let v12738 : System.DateTime = System.DateTime (1, 1, 1, v12723, v12727, v12731, v12735)
                                                            v12738
                                                    let v12746 : string = method6()
                                                    let v12749 : (string -> string) = v12745.ToString
                                                    let v12750 : string = v12749 v12746
                                                    let _v12626 = v12750 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v12753 : string = $"near_sdk::env::block_timestamp()"
                                                    let v12754 : uint64 = Fable.Core.RustInterop.emitRustExpr () v12753 
                                                    let v12755 : US3 option = None
                                                    let _v12755 = ref v12755 
                                                    match v12615 with
                                                    | Some x -> (
                                                    (fun () ->
                                                    (fun () ->
                                                    let v12756 : int64 = x
                                                    let v12757 : US3 = US3_0(v12756)
                                                    v12757 
                                                    )
                                                    |> fun x -> x () |> Some
                                                    ) () ) | None -> None
                                                    |> fun x -> _v12755.Value <- x
                                                    let v12758 : US3 option = _v12755.Value 
                                                    let v12769 : US3 = US3_1
                                                    let v12770 : US3 = v12758 |> Option.defaultValue v12769 
                                                    let v12779 : uint64 =
                                                        match v12770 with
                                                        | US3_1 -> (* None *)
                                                            v12754
                                                        | US3_0(v12774) -> (* Some *)
                                                            let v12775 : (int64 -> uint64) = uint64
                                                            let v12776 : uint64 = v12775 v12774
                                                            let v12777 : uint64 = v12754 - v12776
                                                            v12777
                                                    let v12780 : uint64 = v12779 / 1000000000UL
                                                    let v12781 : uint64 = v12780 % 60UL
                                                    let v12782 : uint64 = v12780 / 60UL
                                                    let v12783 : uint64 = v12782 % 60UL
                                                    let v12784 : uint64 = v12780 / 3600UL
                                                    let v12785 : uint64 = v12784 % 24UL
                                                    let v12786 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
                                                    let v12787 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v12785, v12783, v12781) v12786 
                                                    let v12788 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v12789 : string = Fable.Core.RustInterop.emitRustExpr v12787 v12788 
                                                    let _v12626 = v12789 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v12790 : US3 option = None
                                                    let _v12790 = ref v12790 
                                                    match v12615 with
                                                    | Some x -> (
                                                    (fun () ->
                                                    (fun () ->
                                                    let v12791 : int64 = x
                                                    let v12792 : US3 = US3_0(v12791)
                                                    v12792 
                                                    )
                                                    |> fun x -> x () |> Some
                                                    ) () ) | None -> None
                                                    |> fun x -> _v12790.Value <- x
                                                    let v12793 : US3 option = _v12790.Value 
                                                    let v12804 : US3 = US3_1
                                                    let v12805 : US3 = v12793 |> Option.defaultValue v12804 
                                                    let v12845 : System.DateTime =
                                                        match v12805 with
                                                        | US3_1 -> (* None *)
                                                            let v12841 : System.DateTime = System.DateTime.Now
                                                            v12841
                                                        | US3_0(v12809) -> (* Some *)
                                                            let v12810 : System.DateTime = System.DateTime.Now
                                                            let v12813 : (System.DateTime -> int64) = _.Ticks
                                                            let v12814 : int64 = v12813 v12810
                                                            let v12817 : int64 = v12814 - v12809
                                                            let v12818 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                            let v12819 : System.TimeSpan = v12818 v12817
                                                            let v12822 : (System.TimeSpan -> int32) = _.Hours
                                                            let v12823 : int32 = v12822 v12819
                                                            let v12826 : (System.TimeSpan -> int32) = _.Minutes
                                                            let v12827 : int32 = v12826 v12819
                                                            let v12830 : (System.TimeSpan -> int32) = _.Seconds
                                                            let v12831 : int32 = v12830 v12819
                                                            let v12834 : (System.TimeSpan -> int32) = _.Milliseconds
                                                            let v12835 : int32 = v12834 v12819
                                                            let v12838 : System.DateTime = System.DateTime (1, 1, 1, v12823, v12827, v12831, v12835)
                                                            v12838
                                                    let v12846 : string = method7()
                                                    let v12849 : (string -> string) = v12845.ToString
                                                    let v12850 : string = v12849 v12846
                                                    let _v12626 = v12850 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v12853 : US3 option = None
                                                    let _v12853 = ref v12853 
                                                    match v12615 with
                                                    | Some x -> (
                                                    (fun () ->
                                                    (fun () ->
                                                    let v12854 : int64 = x
                                                    let v12855 : US3 = US3_0(v12854)
                                                    v12855 
                                                    )
                                                    |> fun x -> x () |> Some
                                                    ) () ) | None -> None
                                                    |> fun x -> _v12853.Value <- x
                                                    let v12856 : US3 option = _v12853.Value 
                                                    let v12867 : US3 = US3_1
                                                    let v12868 : US3 = v12856 |> Option.defaultValue v12867 
                                                    let v12908 : System.DateTime =
                                                        match v12868 with
                                                        | US3_1 -> (* None *)
                                                            let v12904 : System.DateTime = System.DateTime.Now
                                                            v12904
                                                        | US3_0(v12872) -> (* Some *)
                                                            let v12873 : System.DateTime = System.DateTime.Now
                                                            let v12876 : (System.DateTime -> int64) = _.Ticks
                                                            let v12877 : int64 = v12876 v12873
                                                            let v12880 : int64 = v12877 - v12872
                                                            let v12881 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                            let v12882 : System.TimeSpan = v12881 v12880
                                                            let v12885 : (System.TimeSpan -> int32) = _.Hours
                                                            let v12886 : int32 = v12885 v12882
                                                            let v12889 : (System.TimeSpan -> int32) = _.Minutes
                                                            let v12890 : int32 = v12889 v12882
                                                            let v12893 : (System.TimeSpan -> int32) = _.Seconds
                                                            let v12894 : int32 = v12893 v12882
                                                            let v12897 : (System.TimeSpan -> int32) = _.Milliseconds
                                                            let v12898 : int32 = v12897 v12882
                                                            let v12901 : System.DateTime = System.DateTime (1, 1, 1, v12886, v12890, v12894, v12898)
                                                            v12901
                                                    let v12909 : string = method7()
                                                    let v12912 : (string -> string) = v12908.ToString
                                                    let v12913 : string = v12912 v12909
                                                    let _v12626 = v12913 
                                                    #endif
#else
                                                    let v12916 : US3 option = None
                                                    let _v12916 = ref v12916 
                                                    match v12615 with
                                                    | Some x -> (
                                                    (fun () ->
                                                    (fun () ->
                                                    let v12917 : int64 = x
                                                    let v12918 : US3 = US3_0(v12917)
                                                    v12918 
                                                    )
                                                    |> fun x -> x () |> Some
                                                    ) () ) | None -> None
                                                    |> fun x -> _v12916.Value <- x
                                                    let v12919 : US3 option = _v12916.Value 
                                                    let v12930 : US3 = US3_1
                                                    let v12931 : US3 = v12919 |> Option.defaultValue v12930 
                                                    let v12971 : System.DateTime =
                                                        match v12931 with
                                                        | US3_1 -> (* None *)
                                                            let v12967 : System.DateTime = System.DateTime.Now
                                                            v12967
                                                        | US3_0(v12935) -> (* Some *)
                                                            let v12936 : System.DateTime = System.DateTime.Now
                                                            let v12939 : (System.DateTime -> int64) = _.Ticks
                                                            let v12940 : int64 = v12939 v12936
                                                            let v12943 : int64 = v12940 - v12935
                                                            let v12944 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                            let v12945 : System.TimeSpan = v12944 v12943
                                                            let v12948 : (System.TimeSpan -> int32) = _.Hours
                                                            let v12949 : int32 = v12948 v12945
                                                            let v12952 : (System.TimeSpan -> int32) = _.Minutes
                                                            let v12953 : int32 = v12952 v12945
                                                            let v12956 : (System.TimeSpan -> int32) = _.Seconds
                                                            let v12957 : int32 = v12956 v12945
                                                            let v12960 : (System.TimeSpan -> int32) = _.Milliseconds
                                                            let v12961 : int32 = v12960 v12945
                                                            let v12964 : System.DateTime = System.DateTime (1, 1, 1, v12949, v12953, v12957, v12961)
                                                            v12964
                                                    let v12972 : string = method7()
                                                    let v12975 : (string -> string) = v12971.ToString
                                                    let v12976 : string = v12975 v12972
                                                    let _v12626 = v12976 
                                                    #endif
                                                    let v12979 : string = _v12626 
                                                    let v13044 : string = "Warning"
                                                    let v13045 : (unit -> string) = v13044.ToLower
                                                    let v13046 : string = v13045 ()
                                                    let v13049 : string = v13046.PadLeft (7, ' ')
                                                    let v13063 : unit = ()
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v13064 : string = "inline_colorization::color_yellow"
                                                    let v13065 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v13064 
                                                    let v13066 : string = "&*$0"
                                                    let v13067 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13049 v13066 
                                                    let v13068 : string = "inline_colorization::color_reset"
                                                    let v13069 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v13068 
                                                    let v13070 : string = "\"{v13065}{v13067}{v13069}\""
                                                    let v13071 : string = @$"format!(" + v13070 + ")"
                                                    let v13072 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v13071 
                                                    let v13073 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v13074 : string = Fable.Core.RustInterop.emitRustExpr v13072 v13073 
                                                    let _v13063 = v13074 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v13075 : string = "inline_colorization::color_yellow"
                                                    let v13076 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v13075 
                                                    let v13077 : string = "&*$0"
                                                    let v13078 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13049 v13077 
                                                    let v13079 : string = "inline_colorization::color_reset"
                                                    let v13080 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v13079 
                                                    let v13081 : string = "\"{v13076}{v13078}{v13080}\""
                                                    let v13082 : string = @$"format!(" + v13081 + ")"
                                                    let v13083 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v13082 
                                                    let v13084 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v13085 : string = Fable.Core.RustInterop.emitRustExpr v13083 v13084 
                                                    let _v13063 = v13085 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v13086 : string = "inline_colorization::color_yellow"
                                                    let v13087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v13086 
                                                    let v13088 : string = "&*$0"
                                                    let v13089 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13049 v13088 
                                                    let v13090 : string = "inline_colorization::color_reset"
                                                    let v13091 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v13090 
                                                    let v13092 : string = "\"{v13087}{v13089}{v13091}\""
                                                    let v13093 : string = @$"format!(" + v13092 + ")"
                                                    let v13094 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v13093 
                                                    let v13095 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v13096 : string = Fable.Core.RustInterop.emitRustExpr v13094 v13095 
                                                    let _v13063 = v13096 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v13097 : string = "\u001b[93m"
                                                    let v13098 : string = method8()
                                                    let v13099 : string = v13097 + v13049 
                                                    let v13100 : string = v13099 + v13098 
                                                    let _v13063 = v13100 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v13101 : string = "\u001b[93m"
                                                    let v13102 : string = method8()
                                                    let v13103 : string = v13101 + v13049 
                                                    let v13104 : string = v13103 + v13102 
                                                    let _v13063 = v13104 
                                                    #endif
#else
                                                    let v13105 : string = "\u001b[93m"
                                                    let v13106 : string = method8()
                                                    let v13107 : string = v13105 + v13049 
                                                    let v13108 : string = v13107 + v13106 
                                                    let _v13063 = v13108 
                                                    #endif
                                                    let v13109 : string = _v13063 
                                                    let v13115 : int64 = v12611.l0
                                                    let v13116 : string = method9()
                                                    let v13117 : Mut4 = {l0 = v13116} : Mut4
                                                    let v13118 : string = "{ "
                                                    let v13119 : string = $"{v13118}"
                                                    let v13122 : string = v13117.l0
                                                    let v13123 : string = v13122 + v13119 
                                                    v13117.l0 <- v13123
                                                    let v13124 : string = "error"
                                                    let v13125 : string = $"{v13124}"
                                                    let v13128 : string = v13117.l0
                                                    let v13129 : string = v13128 + v13125 
                                                    v13117.l0 <- v13129
                                                    let v13130 : string = " = "
                                                    let v13131 : string = $"{v13130}"
                                                    let v13134 : string = v13117.l0
                                                    let v13135 : string = v13134 + v13131 
                                                    v13117.l0 <- v13135
                                                    let v13136 : string = $"{v12536}"
                                                    let v13139 : string = v13117.l0
                                                    let v13140 : string = v13139 + v13136 
                                                    v13117.l0 <- v13140
                                                    let v13141 : string = " }"
                                                    let v13142 : string = $"{v13141}"
                                                    let v13145 : string = v13117.l0
                                                    let v13146 : string = v13145 + v13142 
                                                    v13117.l0 <- v13146
                                                    let v13147 : string = v13117.l0
                                                    let v13148 : (unit -> string) = closure6()
                                                    let v13149 : string = $"{v12979} {v13109} #{v13115} %s{v13148 ()} / {v13147}"
                                                    let v13152 : char list = []
                                                    let v13153 : (char list -> (char [])) = List.toArray
                                                    let v13154 : (char []) = v13153 v13152
                                                    let v13157 : string = v13149.TrimStart v13154 
                                                    let v13175 : char list = []
                                                    let v13176 : char list = '/' :: v13175 
                                                    let v13179 : char list = ' ' :: v13176 
                                                    let v13182 : (char list -> (char [])) = List.toArray
                                                    let v13183 : (char []) = v13182 v13179
                                                    let v13186 : string = v13157.TrimEnd v13183 
                                                    let v13204 : unit = ()
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v13205 : string = @"println!(""{}"", $0)"
                                                    Fable.Core.RustInterop.emitRustExpr v13186 v13205 
                                                    let _v13204 = () 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v13206 : string = @"println!(""{}"", $0)"
                                                    Fable.Core.RustInterop.emitRustExpr v13186 v13206 
                                                    let _v13204 = () 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v13207 : string = $"near_sdk::log!(\"{{}}\", $0)"
                                                    Fable.Core.RustInterop.emitRustExpr v13186 v13207 
                                                    let _v13204 = () 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    System.Console.WriteLine v13186 
                                                    let _v13204 = () 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    System.Console.WriteLine v13186 
                                                    let _v13204 = () 
                                                    #endif
#else
                                                    System.Console.WriteLine v13186 
                                                    let _v13204 = () 
                                                    #endif
                                                    _v13204 
                                                    let v13208 : (string -> unit) = v12550.l0
                                                    v13208 v13186
                                                US1_1
                                            | US12_0(v12534) -> (* Ok *)
                                                US1_0(v12534)
                                        let v13896 : US1 =
                                            match v13211 with
                                            | US1_1 -> (* None *)
                                                let v13214 : string = method23()
                                                let v13215 : string = method15(v12530, v12531)
                                                let v13216 : US12 = method18(v13215, v13214)
                                                match v13216 with
                                                | US12_1(v13219) -> (* Error *)
                                                    let v13220 : bool = State.trace_state.IsNone
                                                    if v13220 then
                                                        let v13221 : US0 = US0_0
                                                        let struct (v13222 : Mut0, v13223 : Mut1, v13224 : Mut2, v13225 : Mut3, v13226 : int64 option) = method1(v13221)
                                                        let v13227 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v13222, v13223, v13224, v13225, v13226) 
                                                        State.trace_state <- v13227 
                                                        ()
                                                    let struct (v13232 : Mut0, v13233 : Mut1, v13234 : Mut2, v13235 : Mut3, v13236 : int64 option) = State.trace_state.Value
                                                    let v13247 : bool = State.trace_state.IsNone
                                                    if v13247 then
                                                        let v13248 : US0 = US0_0
                                                        let struct (v13249 : Mut0, v13250 : Mut1, v13251 : Mut2, v13252 : Mut3, v13253 : int64 option) = method1(v13248)
                                                        let v13254 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v13249, v13250, v13251, v13252, v13253) 
                                                        State.trace_state <- v13254 
                                                        ()
                                                    let struct (v13259 : Mut0, v13260 : Mut1, v13261 : Mut2, v13262 : Mut3, v13263 : int64 option) = State.trace_state.Value
                                                    let v13274 : US0 = v13262.l0
                                                    let v13275 : bool = v13261.l0
                                                    let v13276 : bool = v13275 = false
                                                    let v13279 : bool =
                                                        if v13276 then
                                                            false
                                                        else
                                                            let v13277 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v13274
                                                            let v13278 : bool = 3 >= v13277
                                                            v13278
                                                    if v13279 then
                                                        let v13280 : int64 = v13232.l0
                                                        let v13281 : int64 = v13280 + 1L
                                                        v13232.l0 <- v13281
                                                        let v13282 : bool = State.trace_state.IsNone
                                                        if v13282 then
                                                            let v13283 : US0 = US0_0
                                                            let struct (v13284 : Mut0, v13285 : Mut1, v13286 : Mut2, v13287 : Mut3, v13288 : int64 option) = method1(v13283)
                                                            let v13289 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v13284, v13285, v13286, v13287, v13288) 
                                                            State.trace_state <- v13289 
                                                            ()
                                                        let struct (v13294 : Mut0, v13295 : Mut1, v13296 : Mut2, v13297 : Mut3, v13298 : int64 option) = State.trace_state.Value
                                                        let v13309 : unit = ()
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v13310 : US3 option = None
                                                        let _v13310 = ref v13310 
                                                        match v13298 with
                                                        | Some x -> (
                                                        (fun () ->
                                                        (fun () ->
                                                        let v13311 : int64 = x
                                                        let v13312 : US3 = US3_0(v13311)
                                                        v13312 
                                                        )
                                                        |> fun x -> x () |> Some
                                                        ) () ) | None -> None
                                                        |> fun x -> _v13310.Value <- x
                                                        let v13313 : US3 option = _v13310.Value 
                                                        let v13324 : US3 = US3_1
                                                        let v13325 : US3 = v13313 |> Option.defaultValue v13324 
                                                        let v13365 : System.DateTime =
                                                            match v13325 with
                                                            | US3_1 -> (* None *)
                                                                let v13361 : System.DateTime = System.DateTime.Now
                                                                v13361
                                                            | US3_0(v13329) -> (* Some *)
                                                                let v13330 : System.DateTime = System.DateTime.Now
                                                                let v13333 : (System.DateTime -> int64) = _.Ticks
                                                                let v13334 : int64 = v13333 v13330
                                                                let v13337 : int64 = v13334 - v13329
                                                                let v13338 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                let v13339 : System.TimeSpan = v13338 v13337
                                                                let v13342 : (System.TimeSpan -> int32) = _.Hours
                                                                let v13343 : int32 = v13342 v13339
                                                                let v13346 : (System.TimeSpan -> int32) = _.Minutes
                                                                let v13347 : int32 = v13346 v13339
                                                                let v13350 : (System.TimeSpan -> int32) = _.Seconds
                                                                let v13351 : int32 = v13350 v13339
                                                                let v13354 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                let v13355 : int32 = v13354 v13339
                                                                let v13358 : System.DateTime = System.DateTime (1, 1, 1, v13343, v13347, v13351, v13355)
                                                                v13358
                                                        let v13366 : string = method6()
                                                        let v13369 : (string -> string) = v13365.ToString
                                                        let v13370 : string = v13369 v13366
                                                        let _v13309 = v13370 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v13373 : US3 option = None
                                                        let _v13373 = ref v13373 
                                                        match v13298 with
                                                        | Some x -> (
                                                        (fun () ->
                                                        (fun () ->
                                                        let v13374 : int64 = x
                                                        let v13375 : US3 = US3_0(v13374)
                                                        v13375 
                                                        )
                                                        |> fun x -> x () |> Some
                                                        ) () ) | None -> None
                                                        |> fun x -> _v13373.Value <- x
                                                        let v13376 : US3 option = _v13373.Value 
                                                        let v13387 : US3 = US3_1
                                                        let v13388 : US3 = v13376 |> Option.defaultValue v13387 
                                                        let v13428 : System.DateTime =
                                                            match v13388 with
                                                            | US3_1 -> (* None *)
                                                                let v13424 : System.DateTime = System.DateTime.Now
                                                                v13424
                                                            | US3_0(v13392) -> (* Some *)
                                                                let v13393 : System.DateTime = System.DateTime.Now
                                                                let v13396 : (System.DateTime -> int64) = _.Ticks
                                                                let v13397 : int64 = v13396 v13393
                                                                let v13400 : int64 = v13397 - v13392
                                                                let v13401 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                let v13402 : System.TimeSpan = v13401 v13400
                                                                let v13405 : (System.TimeSpan -> int32) = _.Hours
                                                                let v13406 : int32 = v13405 v13402
                                                                let v13409 : (System.TimeSpan -> int32) = _.Minutes
                                                                let v13410 : int32 = v13409 v13402
                                                                let v13413 : (System.TimeSpan -> int32) = _.Seconds
                                                                let v13414 : int32 = v13413 v13402
                                                                let v13417 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                let v13418 : int32 = v13417 v13402
                                                                let v13421 : System.DateTime = System.DateTime (1, 1, 1, v13406, v13410, v13414, v13418)
                                                                v13421
                                                        let v13429 : string = method6()
                                                        let v13432 : (string -> string) = v13428.ToString
                                                        let v13433 : string = v13432 v13429
                                                        let _v13309 = v13433 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v13436 : string = $"near_sdk::env::block_timestamp()"
                                                        let v13437 : uint64 = Fable.Core.RustInterop.emitRustExpr () v13436 
                                                        let v13438 : US3 option = None
                                                        let _v13438 = ref v13438 
                                                        match v13298 with
                                                        | Some x -> (
                                                        (fun () ->
                                                        (fun () ->
                                                        let v13439 : int64 = x
                                                        let v13440 : US3 = US3_0(v13439)
                                                        v13440 
                                                        )
                                                        |> fun x -> x () |> Some
                                                        ) () ) | None -> None
                                                        |> fun x -> _v13438.Value <- x
                                                        let v13441 : US3 option = _v13438.Value 
                                                        let v13452 : US3 = US3_1
                                                        let v13453 : US3 = v13441 |> Option.defaultValue v13452 
                                                        let v13462 : uint64 =
                                                            match v13453 with
                                                            | US3_1 -> (* None *)
                                                                v13437
                                                            | US3_0(v13457) -> (* Some *)
                                                                let v13458 : (int64 -> uint64) = uint64
                                                                let v13459 : uint64 = v13458 v13457
                                                                let v13460 : uint64 = v13437 - v13459
                                                                v13460
                                                        let v13463 : uint64 = v13462 / 1000000000UL
                                                        let v13464 : uint64 = v13463 % 60UL
                                                        let v13465 : uint64 = v13463 / 60UL
                                                        let v13466 : uint64 = v13465 % 60UL
                                                        let v13467 : uint64 = v13463 / 3600UL
                                                        let v13468 : uint64 = v13467 % 24UL
                                                        let v13469 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
                                                        let v13470 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v13468, v13466, v13464) v13469 
                                                        let v13471 : string = "fable_library_rust::String_::fromString($0)"
                                                        let v13472 : string = Fable.Core.RustInterop.emitRustExpr v13470 v13471 
                                                        let _v13309 = v13472 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v13473 : US3 option = None
                                                        let _v13473 = ref v13473 
                                                        match v13298 with
                                                        | Some x -> (
                                                        (fun () ->
                                                        (fun () ->
                                                        let v13474 : int64 = x
                                                        let v13475 : US3 = US3_0(v13474)
                                                        v13475 
                                                        )
                                                        |> fun x -> x () |> Some
                                                        ) () ) | None -> None
                                                        |> fun x -> _v13473.Value <- x
                                                        let v13476 : US3 option = _v13473.Value 
                                                        let v13487 : US3 = US3_1
                                                        let v13488 : US3 = v13476 |> Option.defaultValue v13487 
                                                        let v13528 : System.DateTime =
                                                            match v13488 with
                                                            | US3_1 -> (* None *)
                                                                let v13524 : System.DateTime = System.DateTime.Now
                                                                v13524
                                                            | US3_0(v13492) -> (* Some *)
                                                                let v13493 : System.DateTime = System.DateTime.Now
                                                                let v13496 : (System.DateTime -> int64) = _.Ticks
                                                                let v13497 : int64 = v13496 v13493
                                                                let v13500 : int64 = v13497 - v13492
                                                                let v13501 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                let v13502 : System.TimeSpan = v13501 v13500
                                                                let v13505 : (System.TimeSpan -> int32) = _.Hours
                                                                let v13506 : int32 = v13505 v13502
                                                                let v13509 : (System.TimeSpan -> int32) = _.Minutes
                                                                let v13510 : int32 = v13509 v13502
                                                                let v13513 : (System.TimeSpan -> int32) = _.Seconds
                                                                let v13514 : int32 = v13513 v13502
                                                                let v13517 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                let v13518 : int32 = v13517 v13502
                                                                let v13521 : System.DateTime = System.DateTime (1, 1, 1, v13506, v13510, v13514, v13518)
                                                                v13521
                                                        let v13529 : string = method7()
                                                        let v13532 : (string -> string) = v13528.ToString
                                                        let v13533 : string = v13532 v13529
                                                        let _v13309 = v13533 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v13536 : US3 option = None
                                                        let _v13536 = ref v13536 
                                                        match v13298 with
                                                        | Some x -> (
                                                        (fun () ->
                                                        (fun () ->
                                                        let v13537 : int64 = x
                                                        let v13538 : US3 = US3_0(v13537)
                                                        v13538 
                                                        )
                                                        |> fun x -> x () |> Some
                                                        ) () ) | None -> None
                                                        |> fun x -> _v13536.Value <- x
                                                        let v13539 : US3 option = _v13536.Value 
                                                        let v13550 : US3 = US3_1
                                                        let v13551 : US3 = v13539 |> Option.defaultValue v13550 
                                                        let v13591 : System.DateTime =
                                                            match v13551 with
                                                            | US3_1 -> (* None *)
                                                                let v13587 : System.DateTime = System.DateTime.Now
                                                                v13587
                                                            | US3_0(v13555) -> (* Some *)
                                                                let v13556 : System.DateTime = System.DateTime.Now
                                                                let v13559 : (System.DateTime -> int64) = _.Ticks
                                                                let v13560 : int64 = v13559 v13556
                                                                let v13563 : int64 = v13560 - v13555
                                                                let v13564 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                let v13565 : System.TimeSpan = v13564 v13563
                                                                let v13568 : (System.TimeSpan -> int32) = _.Hours
                                                                let v13569 : int32 = v13568 v13565
                                                                let v13572 : (System.TimeSpan -> int32) = _.Minutes
                                                                let v13573 : int32 = v13572 v13565
                                                                let v13576 : (System.TimeSpan -> int32) = _.Seconds
                                                                let v13577 : int32 = v13576 v13565
                                                                let v13580 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                let v13581 : int32 = v13580 v13565
                                                                let v13584 : System.DateTime = System.DateTime (1, 1, 1, v13569, v13573, v13577, v13581)
                                                                v13584
                                                        let v13592 : string = method7()
                                                        let v13595 : (string -> string) = v13591.ToString
                                                        let v13596 : string = v13595 v13592
                                                        let _v13309 = v13596 
                                                        #endif
#else
                                                        let v13599 : US3 option = None
                                                        let _v13599 = ref v13599 
                                                        match v13298 with
                                                        | Some x -> (
                                                        (fun () ->
                                                        (fun () ->
                                                        let v13600 : int64 = x
                                                        let v13601 : US3 = US3_0(v13600)
                                                        v13601 
                                                        )
                                                        |> fun x -> x () |> Some
                                                        ) () ) | None -> None
                                                        |> fun x -> _v13599.Value <- x
                                                        let v13602 : US3 option = _v13599.Value 
                                                        let v13613 : US3 = US3_1
                                                        let v13614 : US3 = v13602 |> Option.defaultValue v13613 
                                                        let v13654 : System.DateTime =
                                                            match v13614 with
                                                            | US3_1 -> (* None *)
                                                                let v13650 : System.DateTime = System.DateTime.Now
                                                                v13650
                                                            | US3_0(v13618) -> (* Some *)
                                                                let v13619 : System.DateTime = System.DateTime.Now
                                                                let v13622 : (System.DateTime -> int64) = _.Ticks
                                                                let v13623 : int64 = v13622 v13619
                                                                let v13626 : int64 = v13623 - v13618
                                                                let v13627 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                let v13628 : System.TimeSpan = v13627 v13626
                                                                let v13631 : (System.TimeSpan -> int32) = _.Hours
                                                                let v13632 : int32 = v13631 v13628
                                                                let v13635 : (System.TimeSpan -> int32) = _.Minutes
                                                                let v13636 : int32 = v13635 v13628
                                                                let v13639 : (System.TimeSpan -> int32) = _.Seconds
                                                                let v13640 : int32 = v13639 v13628
                                                                let v13643 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                let v13644 : int32 = v13643 v13628
                                                                let v13647 : System.DateTime = System.DateTime (1, 1, 1, v13632, v13636, v13640, v13644)
                                                                v13647
                                                        let v13655 : string = method7()
                                                        let v13658 : (string -> string) = v13654.ToString
                                                        let v13659 : string = v13658 v13655
                                                        let _v13309 = v13659 
                                                        #endif
                                                        let v13662 : string = _v13309 
                                                        let v13727 : string = "Warning"
                                                        let v13728 : (unit -> string) = v13727.ToLower
                                                        let v13729 : string = v13728 ()
                                                        let v13732 : string = v13729.PadLeft (7, ' ')
                                                        let v13746 : unit = ()
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v13747 : string = "inline_colorization::color_yellow"
                                                        let v13748 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v13747 
                                                        let v13749 : string = "&*$0"
                                                        let v13750 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13732 v13749 
                                                        let v13751 : string = "inline_colorization::color_reset"
                                                        let v13752 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v13751 
                                                        let v13753 : string = "\"{v13748}{v13750}{v13752}\""
                                                        let v13754 : string = @$"format!(" + v13753 + ")"
                                                        let v13755 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v13754 
                                                        let v13756 : string = "fable_library_rust::String_::fromString($0)"
                                                        let v13757 : string = Fable.Core.RustInterop.emitRustExpr v13755 v13756 
                                                        let _v13746 = v13757 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v13758 : string = "inline_colorization::color_yellow"
                                                        let v13759 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v13758 
                                                        let v13760 : string = "&*$0"
                                                        let v13761 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13732 v13760 
                                                        let v13762 : string = "inline_colorization::color_reset"
                                                        let v13763 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v13762 
                                                        let v13764 : string = "\"{v13759}{v13761}{v13763}\""
                                                        let v13765 : string = @$"format!(" + v13764 + ")"
                                                        let v13766 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v13765 
                                                        let v13767 : string = "fable_library_rust::String_::fromString($0)"
                                                        let v13768 : string = Fable.Core.RustInterop.emitRustExpr v13766 v13767 
                                                        let _v13746 = v13768 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v13769 : string = "inline_colorization::color_yellow"
                                                        let v13770 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v13769 
                                                        let v13771 : string = "&*$0"
                                                        let v13772 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13732 v13771 
                                                        let v13773 : string = "inline_colorization::color_reset"
                                                        let v13774 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v13773 
                                                        let v13775 : string = "\"{v13770}{v13772}{v13774}\""
                                                        let v13776 : string = @$"format!(" + v13775 + ")"
                                                        let v13777 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v13776 
                                                        let v13778 : string = "fable_library_rust::String_::fromString($0)"
                                                        let v13779 : string = Fable.Core.RustInterop.emitRustExpr v13777 v13778 
                                                        let _v13746 = v13779 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v13780 : string = "\u001b[93m"
                                                        let v13781 : string = method8()
                                                        let v13782 : string = v13780 + v13732 
                                                        let v13783 : string = v13782 + v13781 
                                                        let _v13746 = v13783 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v13784 : string = "\u001b[93m"
                                                        let v13785 : string = method8()
                                                        let v13786 : string = v13784 + v13732 
                                                        let v13787 : string = v13786 + v13785 
                                                        let _v13746 = v13787 
                                                        #endif
#else
                                                        let v13788 : string = "\u001b[93m"
                                                        let v13789 : string = method8()
                                                        let v13790 : string = v13788 + v13732 
                                                        let v13791 : string = v13790 + v13789 
                                                        let _v13746 = v13791 
                                                        #endif
                                                        let v13792 : string = _v13746 
                                                        let v13798 : int64 = v13294.l0
                                                        let v13799 : string = method9()
                                                        let v13800 : Mut4 = {l0 = v13799} : Mut4
                                                        let v13801 : string = "{ "
                                                        let v13802 : string = $"{v13801}"
                                                        let v13805 : string = v13800.l0
                                                        let v13806 : string = v13805 + v13802 
                                                        v13800.l0 <- v13806
                                                        let v13807 : string = "error"
                                                        let v13808 : string = $"{v13807}"
                                                        let v13811 : string = v13800.l0
                                                        let v13812 : string = v13811 + v13808 
                                                        v13800.l0 <- v13812
                                                        let v13813 : string = " = "
                                                        let v13814 : string = $"{v13813}"
                                                        let v13817 : string = v13800.l0
                                                        let v13818 : string = v13817 + v13814 
                                                        v13800.l0 <- v13818
                                                        let v13819 : string = $"{v13219}"
                                                        let v13822 : string = v13800.l0
                                                        let v13823 : string = v13822 + v13819 
                                                        v13800.l0 <- v13823
                                                        let v13824 : string = " }"
                                                        let v13825 : string = $"{v13824}"
                                                        let v13828 : string = v13800.l0
                                                        let v13829 : string = v13828 + v13825 
                                                        v13800.l0 <- v13829
                                                        let v13830 : string = v13800.l0
                                                        let v13831 : (unit -> string) = closure6()
                                                        let v13832 : string = $"{v13662} {v13792} #{v13798} %s{v13831 ()} / {v13830}"
                                                        let v13835 : char list = []
                                                        let v13836 : (char list -> (char [])) = List.toArray
                                                        let v13837 : (char []) = v13836 v13835
                                                        let v13840 : string = v13832.TrimStart v13837 
                                                        let v13858 : char list = []
                                                        let v13859 : char list = '/' :: v13858 
                                                        let v13862 : char list = ' ' :: v13859 
                                                        let v13865 : (char list -> (char [])) = List.toArray
                                                        let v13866 : (char []) = v13865 v13862
                                                        let v13869 : string = v13840.TrimEnd v13866 
                                                        let v13887 : unit = ()
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v13888 : string = @"println!(""{}"", $0)"
                                                        Fable.Core.RustInterop.emitRustExpr v13869 v13888 
                                                        let _v13887 = () 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v13889 : string = @"println!(""{}"", $0)"
                                                        Fable.Core.RustInterop.emitRustExpr v13869 v13889 
                                                        let _v13887 = () 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v13890 : string = $"near_sdk::log!(\"{{}}\", $0)"
                                                        Fable.Core.RustInterop.emitRustExpr v13869 v13890 
                                                        let _v13887 = () 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        System.Console.WriteLine v13869 
                                                        let _v13887 = () 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        System.Console.WriteLine v13869 
                                                        let _v13887 = () 
                                                        #endif
#else
                                                        System.Console.WriteLine v13869 
                                                        let _v13887 = () 
                                                        #endif
                                                        _v13887 
                                                        let v13891 : (string -> unit) = v13233.l0
                                                        v13891 v13869
                                                    US1_1
                                                | US12_0(v13217) -> (* Ok *)
                                                    US1_0(v13217)
                                            | US1_0(v13212) -> (* Some *)
                                                US1_0(v13212)
                                        let v13900 : string =
                                            match v13896 with
                                            | US1_1 -> (* None *)
                                                failwith<string> "Option does not have a value."
                                            | US1_0(v13897) -> (* Some *)
                                                v13897
                                        let v13901 : string = method15(v13900, v12530)
                                        let v13902 : string = method23()
                                        let v13903 : (unit -> string) = v13902.ToLower
                                        let v13904 : string = v13903 ()
                                        let v13907 : (unit -> string) = v13901.ToLower
                                        let v13908 : string = v13907 ()
                                        let v13911 : bool = v13904.StartsWith v13908 
                                        let v13914 : US12 =
                                            if v13911 then
                                                US12_1(v13908)
                                            else
                                                US12_0(v13908)
                                        let v13920 : Result<string, string> =
                                            match v13914 with
                                            | US12_1(v13917) -> (* Error *)
                                                let v13918 : Result<string, string> = Error v13917 
                                                v13918
                                            | US12_0(v13915) -> (* Ok *)
                                                let v13916 : Result<string, string> = Ok v13915 
                                                v13916
                                        let v13921 : string = "true; let _result = $0.unwrap_or_else(|x| { //"
                                        let v13922 : bool = Fable.Core.RustInterop.emitRustExpr v13920 v13921 
                                        let v13923 : string = "x"
                                        let v13924 : string = Fable.Core.RustInterop.emitRustExpr () v13923 
                                        let v13925 : string = "true; $0 })"
                                        let v13926 : bool = Fable.Core.RustInterop.emitRustExpr v13924 v13925 
                                        let v13927 : string = "_result"
                                        let v13928 : string = Fable.Core.RustInterop.emitRustExpr () v13927 
                                        let v13929 : string = "target/spiral_builder"
                                        let v13930 : string = method15(v13928, v13929)
                                        let v13931 : string = "spiral_builder"
                                        let v13932 : string = method15(v13930, v13931)
                                        let v13933 : string = "packages"
                                        let v13934 : string = method15(v13932, v13933)
                                        let v13935 : string = "TypeScript"
                                        let v13936 : string = method15(v13934, v13935)
                                        let v13937 : string = method15(v13936, v12528)
                                        let v13938 : System.IDisposable = method28(v13937)
                                        let v13939 : string = $"{v13931}.fs"
                                        let v13940 : string = method15(v13937, v13939)
                                        let v13941 : string = method85(v13940)
                                        method25(v13941, v12519)
                                        let v13942 : string list = []
                                        let v13943 : string seq = seq { for i = 0 to v13942.Length - 1 do yield v13942.[i] }
                                        let v13946 : (string -> (string seq -> string)) = String.concat
                                        let v13947 : string = "\\n        "
                                        let v13948 : (string seq -> string) = v13946 v13947
                                        let v13949 : string = v13948 v13943
                                        let v13952 : string = "Fable.Core"
                                        let v13953 : string = $"<PackageReference Include=\"{v13952}\" Version=\"*\" />"
                                        let v13954 : string list = []
                                        let v13955 : string list = v13953 :: v13954 
                                        let v13958 : string seq = seq { for i = 0 to v13955.Length - 1 do yield v13955.[i] }
                                        let v13961 : (string -> (string seq -> string)) = String.concat
                                        let v13962 : (string seq -> string) = v13961 v13947
                                        let v13963 : string = v13962 v13958
                                        let v13966 : string = $"{v13931}.fsproj"
                                        let v13967 : string = method15(v13937, v13966)
                                        let v13968 : string = method85(v13967)
                                        let v13969 : string = $"<Project Sdk=\"Microsoft.NET.Sdk\">"
                                        let v13970 : string = $"<PropertyGroup>"
                                        let v13971 : string = "\n"
                                        let v13972 : string = v13969 + v13971 
                                        let v13973 : string = v13972 + v13970 
                                        let v13974 : string = $"    <TargetFramework>net9.0</TargetFramework>"
                                        let v13975 : string = v13973 + v13971 
                                        let v13976 : string = v13975 + v13974 
                                        let v13977 : string = $"    <LangVersion>preview</LangVersion>"
                                        let v13978 : string = v13976 + v13971 
                                        let v13979 : string = v13978 + v13977 
                                        let v13980 : string = $"    <RollForward>Major</RollForward>"
                                        let v13981 : string = v13979 + v13971 
                                        let v13982 : string = v13981 + v13980 
                                        let v13983 : string = $"    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>"
                                        let v13984 : string = v13982 + v13971 
                                        let v13985 : string = v13984 + v13983 
                                        let v13986 : string = $"    <PublishAot>false</PublishAot>"
                                        let v13987 : string = v13985 + v13971 
                                        let v13988 : string = v13987 + v13986 
                                        let v13989 : string = $"    <PublishTrimmed>false</PublishTrimmed>"
                                        let v13990 : string = v13988 + v13971 
                                        let v13991 : string = v13990 + v13989 
                                        let v13992 : string = $"    <PublishSingleFile>true</PublishSingleFile>"
                                        let v13993 : string = v13991 + v13971 
                                        let v13994 : string = v13993 + v13992 
                                        let v13995 : string = $"    <SelfContained>true</SelfContained>"
                                        let v13996 : string = v13994 + v13971 
                                        let v13997 : string = v13996 + v13995 
                                        let v13998 : string = $"    <Version>0.0.1-alpha.1</Version>"
                                        let v13999 : string = v13997 + v13971 
                                        let v14000 : string = v13999 + v13998 
                                        let v14001 : string = $"    <OutputType>Exe</OutputType>"
                                        let v14002 : string = v14000 + v13971 
                                        let v14003 : string = v14002 + v14001 
                                        let v14004 : string = $"</PropertyGroup>"
                                        let v14005 : string = v14003 + v13971 
                                        let v14006 : string = v14005 + v14004 
                                        let v14007 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('FreeBSD'))\">"
                                        let v14008 : string = v14006 + v13971 
                                        let v14009 : string = v14008 + v14007 
                                        let v14010 : string = $"    <DefineConstants>_FREEBSD</DefineConstants>"
                                        let v14011 : string = v14009 + v13971 
                                        let v14012 : string = v14011 + v14010 
                                        let v14013 : string = $"</PropertyGroup>"
                                        let v14014 : string = v14012 + v13971 
                                        let v14015 : string = v14014 + v14013 
                                        let v14016 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Linux'))\">"
                                        let v14017 : string = v14015 + v13971 
                                        let v14018 : string = v14017 + v14016 
                                        let v14019 : string = $"    <DefineConstants>_LINUX</DefineConstants>"
                                        let v14020 : string = v14018 + v13971 
                                        let v14021 : string = v14020 + v14019 
                                        let v14022 : string = $"</PropertyGroup>"
                                        let v14023 : string = v14021 + v13971 
                                        let v14024 : string = v14023 + v14022 
                                        let v14025 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('OSX'))\">"
                                        let v14026 : string = v14024 + v13971 
                                        let v14027 : string = v14026 + v14025 
                                        let v14028 : string = $"    <DefineConstants>_OSX</DefineConstants>"
                                        let v14029 : string = v14027 + v13971 
                                        let v14030 : string = v14029 + v14028 
                                        let v14031 : string = $"</PropertyGroup>"
                                        let v14032 : string = v14030 + v13971 
                                        let v14033 : string = v14032 + v14031 
                                        let v14034 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Windows'))\">"
                                        let v14035 : string = v14033 + v13971 
                                        let v14036 : string = v14035 + v14034 
                                        let v14037 : string = $"    <DefineConstants>_WINDOWS</DefineConstants>"
                                        let v14038 : string = v14036 + v13971 
                                        let v14039 : string = v14038 + v14037 
                                        let v14040 : string = $"</PropertyGroup>"
                                        let v14041 : string = v14039 + v13971 
                                        let v14042 : string = v14041 + v14040 
                                        let v14043 : string = $"<ItemGroup>"
                                        let v14044 : string = v14042 + v13971 
                                        let v14045 : string = v14044 + v14043 
                                        let v14046 : string = $"    {v13949}"
                                        let v14047 : string = v14045 + v13971 
                                        let v14048 : string = v14047 + v14046 
                                        let v14049 : string = $"    <Compile Include=\"{v13941}\" />"
                                        let v14050 : string = v14048 + v13971 
                                        let v14051 : string = v14050 + v14049 
                                        let v14052 : string = $"</ItemGroup>"
                                        let v14053 : string = v14051 + v13971 
                                        let v14054 : string = v14053 + v14052 
                                        let v14055 : string = $"<ItemGroup>"
                                        let v14056 : string = v14054 + v13971 
                                        let v14057 : string = v14056 + v14055 
                                        let v14058 : string = $"    {v13963}"
                                        let v14059 : string = v14057 + v13971 
                                        let v14060 : string = v14059 + v14058 
                                        let v14061 : string = $"</ItemGroup>"
                                        let v14062 : string = v14060 + v13971 
                                        let v14063 : string = v14062 + v14061 
                                        let v14064 : string = $"</Project>"
                                        let v14065 : string = v14063 + v13971 
                                        let v14066 : string = v14065 + v14064 
                                        method25(v13968, v14066)
                                        let v14067 : string = "lib/typescript/fable/fable_modules"
                                        let v14068 : string = method15(v13928, v14067)
                                        let v14069 : string = "async_walkdir::WalkDir::new(&*$0)"
                                        let v14070 : async_walkdir_WalkDir = Fable.Core.RustInterop.emitRustExpr v14068 v14069 
                                        let v14071 : string = "async_walkdir::WalkDir::filter($0, |x| $1(x))"
                                        let v14072 : (async_walkdir_DirEntry -> std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>>) = closure66()
                                        let v14073 : async_walkdir_WalkDir = Fable.Core.RustInterop.emitRustExpr struct (v14070, v14072) v14071 
                                        let v14074 : (Result<async_walkdir_DirEntry, async_walkdir_Error> -> struct (string * string) option) = method118()
                                        let v14075 : string = "tokio_stream::StreamExt::collect(tokio_stream::StreamExt::filter_map(v14073, |x| v14074(x))).await"
                                        let v14076 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr () v14075 
                                        let v14077 : string = "rayon::iter::IntoParallelIterator::into_par_iter(v14076)"
                                        let v14078 : rayon_vec_IntoIter<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr () v14077 
                                        let v14079 : string = "rayon::iter::ParallelIterator::map($0, |x| $1(x))"
                                        let v14080 : (struct (string * string) -> struct (string * string)) = closure74()
                                        let v14081 : rayon_iter_Map<rayon_vec_IntoIter<struct (string * string)>> = Fable.Core.RustInterop.emitRustExpr struct (v14078, v14080) v14079 
                                        let v14082 : string = "rayon::iter::ParallelIterator::collect($0)"
                                        let v14083 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v14081 v14082 
                                        let v14084 : string = "fable_library_rust::NativeArray_::array_from($0)"
                                        let v14085 : (struct (string * string) []) = Fable.Core.RustInterop.emitRustExpr v14083 v14084 
                                        let v14086 : struct (string * string) option = v14085 |> Array.tryItem 0 
                                        let v14087 : US42 option = None
                                        let _v14087 = ref v14087 
                                        match v14086 with
                                        | Some x -> (
                                        (fun () ->
                                        (fun () ->
                                        let struct (v14088 : string, v14089 : string) = x
                                        let v14090 : US42 = US42_0(v14088, v14089)
                                        v14090 
                                        )
                                        |> fun x -> x () |> Some
                                        ) () ) | None -> None
                                        |> fun x -> _v14087.Value <- x
                                        let v14091 : US42 option = _v14087.Value 
                                        let v14103 : US42 = US42_1
                                        let v14104 : US42 = v14091 |> Option.defaultValue v14103 
                                        let v14108 : bool = State.trace_state.IsNone
                                        if v14108 then
                                            let v14109 : US0 = US0_0
                                            let struct (v14110 : Mut0, v14111 : Mut1, v14112 : Mut2, v14113 : Mut3, v14114 : int64 option) = method1(v14109)
                                            let v14115 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v14110, v14111, v14112, v14113, v14114) 
                                            State.trace_state <- v14115 
                                            ()
                                        let struct (v14120 : Mut0, v14121 : Mut1, v14122 : Mut2, v14123 : Mut3, v14124 : int64 option) = State.trace_state.Value
                                        let v14135 : bool = State.trace_state.IsNone
                                        if v14135 then
                                            let v14136 : US0 = US0_0
                                            let struct (v14137 : Mut0, v14138 : Mut1, v14139 : Mut2, v14140 : Mut3, v14141 : int64 option) = method1(v14136)
                                            let v14142 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v14137, v14138, v14139, v14140, v14141) 
                                            State.trace_state <- v14142 
                                            ()
                                        let struct (v14147 : Mut0, v14148 : Mut1, v14149 : Mut2, v14150 : Mut3, v14151 : int64 option) = State.trace_state.Value
                                        let v14162 : US0 = v14150.l0
                                        let v14163 : bool = v14149.l0
                                        let v14164 : bool = v14163 = false
                                        let v14167 : bool =
                                            if v14164 then
                                                false
                                            else
                                                let v14165 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v14162
                                                let v14166 : bool = 1 >= v14165
                                                v14166
                                        if v14167 then
                                            let v14168 : int64 = v14120.l0
                                            let v14169 : int64 = v14168 + 1L
                                            v14120.l0 <- v14169
                                            let v14170 : bool = State.trace_state.IsNone
                                            if v14170 then
                                                let v14171 : US0 = US0_0
                                                let struct (v14172 : Mut0, v14173 : Mut1, v14174 : Mut2, v14175 : Mut3, v14176 : int64 option) = method1(v14171)
                                                let v14177 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v14172, v14173, v14174, v14175, v14176) 
                                                State.trace_state <- v14177 
                                                ()
                                            let struct (v14182 : Mut0, v14183 : Mut1, v14184 : Mut2, v14185 : Mut3, v14186 : int64 option) = State.trace_state.Value
                                            let v14197 : unit = ()
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v14198 : US3 option = None
                                            let _v14198 = ref v14198 
                                            match v14186 with
                                            | Some x -> (
                                            (fun () ->
                                            (fun () ->
                                            let v14199 : int64 = x
                                            let v14200 : US3 = US3_0(v14199)
                                            v14200 
                                            )
                                            |> fun x -> x () |> Some
                                            ) () ) | None -> None
                                            |> fun x -> _v14198.Value <- x
                                            let v14201 : US3 option = _v14198.Value 
                                            let v14212 : US3 = US3_1
                                            let v14213 : US3 = v14201 |> Option.defaultValue v14212 
                                            let v14253 : System.DateTime =
                                                match v14213 with
                                                | US3_1 -> (* None *)
                                                    let v14249 : System.DateTime = System.DateTime.Now
                                                    v14249
                                                | US3_0(v14217) -> (* Some *)
                                                    let v14218 : System.DateTime = System.DateTime.Now
                                                    let v14221 : (System.DateTime -> int64) = _.Ticks
                                                    let v14222 : int64 = v14221 v14218
                                                    let v14225 : int64 = v14222 - v14217
                                                    let v14226 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                    let v14227 : System.TimeSpan = v14226 v14225
                                                    let v14230 : (System.TimeSpan -> int32) = _.Hours
                                                    let v14231 : int32 = v14230 v14227
                                                    let v14234 : (System.TimeSpan -> int32) = _.Minutes
                                                    let v14235 : int32 = v14234 v14227
                                                    let v14238 : (System.TimeSpan -> int32) = _.Seconds
                                                    let v14239 : int32 = v14238 v14227
                                                    let v14242 : (System.TimeSpan -> int32) = _.Milliseconds
                                                    let v14243 : int32 = v14242 v14227
                                                    let v14246 : System.DateTime = System.DateTime (1, 1, 1, v14231, v14235, v14239, v14243)
                                                    v14246
                                            let v14254 : string = method6()
                                            let v14257 : (string -> string) = v14253.ToString
                                            let v14258 : string = v14257 v14254
                                            let _v14197 = v14258 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v14261 : US3 option = None
                                            let _v14261 = ref v14261 
                                            match v14186 with
                                            | Some x -> (
                                            (fun () ->
                                            (fun () ->
                                            let v14262 : int64 = x
                                            let v14263 : US3 = US3_0(v14262)
                                            v14263 
                                            )
                                            |> fun x -> x () |> Some
                                            ) () ) | None -> None
                                            |> fun x -> _v14261.Value <- x
                                            let v14264 : US3 option = _v14261.Value 
                                            let v14275 : US3 = US3_1
                                            let v14276 : US3 = v14264 |> Option.defaultValue v14275 
                                            let v14316 : System.DateTime =
                                                match v14276 with
                                                | US3_1 -> (* None *)
                                                    let v14312 : System.DateTime = System.DateTime.Now
                                                    v14312
                                                | US3_0(v14280) -> (* Some *)
                                                    let v14281 : System.DateTime = System.DateTime.Now
                                                    let v14284 : (System.DateTime -> int64) = _.Ticks
                                                    let v14285 : int64 = v14284 v14281
                                                    let v14288 : int64 = v14285 - v14280
                                                    let v14289 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                    let v14290 : System.TimeSpan = v14289 v14288
                                                    let v14293 : (System.TimeSpan -> int32) = _.Hours
                                                    let v14294 : int32 = v14293 v14290
                                                    let v14297 : (System.TimeSpan -> int32) = _.Minutes
                                                    let v14298 : int32 = v14297 v14290
                                                    let v14301 : (System.TimeSpan -> int32) = _.Seconds
                                                    let v14302 : int32 = v14301 v14290
                                                    let v14305 : (System.TimeSpan -> int32) = _.Milliseconds
                                                    let v14306 : int32 = v14305 v14290
                                                    let v14309 : System.DateTime = System.DateTime (1, 1, 1, v14294, v14298, v14302, v14306)
                                                    v14309
                                            let v14317 : string = method6()
                                            let v14320 : (string -> string) = v14316.ToString
                                            let v14321 : string = v14320 v14317
                                            let _v14197 = v14321 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v14324 : string = $"near_sdk::env::block_timestamp()"
                                            let v14325 : uint64 = Fable.Core.RustInterop.emitRustExpr () v14324 
                                            let v14326 : US3 option = None
                                            let _v14326 = ref v14326 
                                            match v14186 with
                                            | Some x -> (
                                            (fun () ->
                                            (fun () ->
                                            let v14327 : int64 = x
                                            let v14328 : US3 = US3_0(v14327)
                                            v14328 
                                            )
                                            |> fun x -> x () |> Some
                                            ) () ) | None -> None
                                            |> fun x -> _v14326.Value <- x
                                            let v14329 : US3 option = _v14326.Value 
                                            let v14340 : US3 = US3_1
                                            let v14341 : US3 = v14329 |> Option.defaultValue v14340 
                                            let v14350 : uint64 =
                                                match v14341 with
                                                | US3_1 -> (* None *)
                                                    v14325
                                                | US3_0(v14345) -> (* Some *)
                                                    let v14346 : (int64 -> uint64) = uint64
                                                    let v14347 : uint64 = v14346 v14345
                                                    let v14348 : uint64 = v14325 - v14347
                                                    v14348
                                            let v14351 : uint64 = v14350 / 1000000000UL
                                            let v14352 : uint64 = v14351 % 60UL
                                            let v14353 : uint64 = v14351 / 60UL
                                            let v14354 : uint64 = v14353 % 60UL
                                            let v14355 : uint64 = v14351 / 3600UL
                                            let v14356 : uint64 = v14355 % 24UL
                                            let v14357 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
                                            let v14358 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v14356, v14354, v14352) v14357 
                                            let v14359 : string = "fable_library_rust::String_::fromString($0)"
                                            let v14360 : string = Fable.Core.RustInterop.emitRustExpr v14358 v14359 
                                            let _v14197 = v14360 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v14361 : US3 option = None
                                            let _v14361 = ref v14361 
                                            match v14186 with
                                            | Some x -> (
                                            (fun () ->
                                            (fun () ->
                                            let v14362 : int64 = x
                                            let v14363 : US3 = US3_0(v14362)
                                            v14363 
                                            )
                                            |> fun x -> x () |> Some
                                            ) () ) | None -> None
                                            |> fun x -> _v14361.Value <- x
                                            let v14364 : US3 option = _v14361.Value 
                                            let v14375 : US3 = US3_1
                                            let v14376 : US3 = v14364 |> Option.defaultValue v14375 
                                            let v14416 : System.DateTime =
                                                match v14376 with
                                                | US3_1 -> (* None *)
                                                    let v14412 : System.DateTime = System.DateTime.Now
                                                    v14412
                                                | US3_0(v14380) -> (* Some *)
                                                    let v14381 : System.DateTime = System.DateTime.Now
                                                    let v14384 : (System.DateTime -> int64) = _.Ticks
                                                    let v14385 : int64 = v14384 v14381
                                                    let v14388 : int64 = v14385 - v14380
                                                    let v14389 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                    let v14390 : System.TimeSpan = v14389 v14388
                                                    let v14393 : (System.TimeSpan -> int32) = _.Hours
                                                    let v14394 : int32 = v14393 v14390
                                                    let v14397 : (System.TimeSpan -> int32) = _.Minutes
                                                    let v14398 : int32 = v14397 v14390
                                                    let v14401 : (System.TimeSpan -> int32) = _.Seconds
                                                    let v14402 : int32 = v14401 v14390
                                                    let v14405 : (System.TimeSpan -> int32) = _.Milliseconds
                                                    let v14406 : int32 = v14405 v14390
                                                    let v14409 : System.DateTime = System.DateTime (1, 1, 1, v14394, v14398, v14402, v14406)
                                                    v14409
                                            let v14417 : string = method7()
                                            let v14420 : (string -> string) = v14416.ToString
                                            let v14421 : string = v14420 v14417
                                            let _v14197 = v14421 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v14424 : US3 option = None
                                            let _v14424 = ref v14424 
                                            match v14186 with
                                            | Some x -> (
                                            (fun () ->
                                            (fun () ->
                                            let v14425 : int64 = x
                                            let v14426 : US3 = US3_0(v14425)
                                            v14426 
                                            )
                                            |> fun x -> x () |> Some
                                            ) () ) | None -> None
                                            |> fun x -> _v14424.Value <- x
                                            let v14427 : US3 option = _v14424.Value 
                                            let v14438 : US3 = US3_1
                                            let v14439 : US3 = v14427 |> Option.defaultValue v14438 
                                            let v14479 : System.DateTime =
                                                match v14439 with
                                                | US3_1 -> (* None *)
                                                    let v14475 : System.DateTime = System.DateTime.Now
                                                    v14475
                                                | US3_0(v14443) -> (* Some *)
                                                    let v14444 : System.DateTime = System.DateTime.Now
                                                    let v14447 : (System.DateTime -> int64) = _.Ticks
                                                    let v14448 : int64 = v14447 v14444
                                                    let v14451 : int64 = v14448 - v14443
                                                    let v14452 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                    let v14453 : System.TimeSpan = v14452 v14451
                                                    let v14456 : (System.TimeSpan -> int32) = _.Hours
                                                    let v14457 : int32 = v14456 v14453
                                                    let v14460 : (System.TimeSpan -> int32) = _.Minutes
                                                    let v14461 : int32 = v14460 v14453
                                                    let v14464 : (System.TimeSpan -> int32) = _.Seconds
                                                    let v14465 : int32 = v14464 v14453
                                                    let v14468 : (System.TimeSpan -> int32) = _.Milliseconds
                                                    let v14469 : int32 = v14468 v14453
                                                    let v14472 : System.DateTime = System.DateTime (1, 1, 1, v14457, v14461, v14465, v14469)
                                                    v14472
                                            let v14480 : string = method7()
                                            let v14483 : (string -> string) = v14479.ToString
                                            let v14484 : string = v14483 v14480
                                            let _v14197 = v14484 
                                            #endif
#else
                                            let v14487 : US3 option = None
                                            let _v14487 = ref v14487 
                                            match v14186 with
                                            | Some x -> (
                                            (fun () ->
                                            (fun () ->
                                            let v14488 : int64 = x
                                            let v14489 : US3 = US3_0(v14488)
                                            v14489 
                                            )
                                            |> fun x -> x () |> Some
                                            ) () ) | None -> None
                                            |> fun x -> _v14487.Value <- x
                                            let v14490 : US3 option = _v14487.Value 
                                            let v14501 : US3 = US3_1
                                            let v14502 : US3 = v14490 |> Option.defaultValue v14501 
                                            let v14542 : System.DateTime =
                                                match v14502 with
                                                | US3_1 -> (* None *)
                                                    let v14538 : System.DateTime = System.DateTime.Now
                                                    v14538
                                                | US3_0(v14506) -> (* Some *)
                                                    let v14507 : System.DateTime = System.DateTime.Now
                                                    let v14510 : (System.DateTime -> int64) = _.Ticks
                                                    let v14511 : int64 = v14510 v14507
                                                    let v14514 : int64 = v14511 - v14506
                                                    let v14515 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                    let v14516 : System.TimeSpan = v14515 v14514
                                                    let v14519 : (System.TimeSpan -> int32) = _.Hours
                                                    let v14520 : int32 = v14519 v14516
                                                    let v14523 : (System.TimeSpan -> int32) = _.Minutes
                                                    let v14524 : int32 = v14523 v14516
                                                    let v14527 : (System.TimeSpan -> int32) = _.Seconds
                                                    let v14528 : int32 = v14527 v14516
                                                    let v14531 : (System.TimeSpan -> int32) = _.Milliseconds
                                                    let v14532 : int32 = v14531 v14516
                                                    let v14535 : System.DateTime = System.DateTime (1, 1, 1, v14520, v14524, v14528, v14532)
                                                    v14535
                                            let v14543 : string = method7()
                                            let v14546 : (string -> string) = v14542.ToString
                                            let v14547 : string = v14546 v14543
                                            let _v14197 = v14547 
                                            #endif
                                            let v14550 : string = _v14197 
                                            let v14615 : string = "Debug"
                                            let v14616 : (unit -> string) = v14615.ToLower
                                            let v14617 : string = v14616 ()
                                            let v14620 : string = v14617.PadLeft (7, ' ')
                                            let v14634 : unit = ()
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v14635 : string = "inline_colorization::color_bright_blue"
                                            let v14636 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v14635 
                                            let v14637 : string = "&*$0"
                                            let v14638 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v14620 v14637 
                                            let v14639 : string = "inline_colorization::color_reset"
                                            let v14640 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v14639 
                                            let v14641 : string = "\"{v14636}{v14638}{v14640}\""
                                            let v14642 : string = @$"format!(" + v14641 + ")"
                                            let v14643 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v14642 
                                            let v14644 : string = "fable_library_rust::String_::fromString($0)"
                                            let v14645 : string = Fable.Core.RustInterop.emitRustExpr v14643 v14644 
                                            let _v14634 = v14645 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v14646 : string = "inline_colorization::color_bright_blue"
                                            let v14647 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v14646 
                                            let v14648 : string = "&*$0"
                                            let v14649 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v14620 v14648 
                                            let v14650 : string = "inline_colorization::color_reset"
                                            let v14651 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v14650 
                                            let v14652 : string = "\"{v14647}{v14649}{v14651}\""
                                            let v14653 : string = @$"format!(" + v14652 + ")"
                                            let v14654 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v14653 
                                            let v14655 : string = "fable_library_rust::String_::fromString($0)"
                                            let v14656 : string = Fable.Core.RustInterop.emitRustExpr v14654 v14655 
                                            let _v14634 = v14656 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v14657 : string = "inline_colorization::color_bright_blue"
                                            let v14658 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v14657 
                                            let v14659 : string = "&*$0"
                                            let v14660 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v14620 v14659 
                                            let v14661 : string = "inline_colorization::color_reset"
                                            let v14662 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v14661 
                                            let v14663 : string = "\"{v14658}{v14660}{v14662}\""
                                            let v14664 : string = @$"format!(" + v14663 + ")"
                                            let v14665 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v14664 
                                            let v14666 : string = "fable_library_rust::String_::fromString($0)"
                                            let v14667 : string = Fable.Core.RustInterop.emitRustExpr v14665 v14666 
                                            let _v14634 = v14667 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v14668 : string = "\u001b[94m"
                                            let v14669 : string = method8()
                                            let v14670 : string = v14668 + v14620 
                                            let v14671 : string = v14670 + v14669 
                                            let _v14634 = v14671 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v14672 : string = "\u001b[94m"
                                            let v14673 : string = method8()
                                            let v14674 : string = v14672 + v14620 
                                            let v14675 : string = v14674 + v14673 
                                            let _v14634 = v14675 
                                            #endif
#else
                                            let v14676 : string = "\u001b[94m"
                                            let v14677 : string = method8()
                                            let v14678 : string = v14676 + v14620 
                                            let v14679 : string = v14678 + v14677 
                                            let _v14634 = v14679 
                                            #endif
                                            let v14680 : string = _v14634 
                                            let v14686 : int64 = v14182.l0
                                            let v14687 : string = method9()
                                            let v14688 : Mut4 = {l0 = v14687} : Mut4
                                            let v14689 : string = "{ "
                                            let v14690 : string = $"{v14689}"
                                            let v14693 : string = v14688.l0
                                            let v14694 : string = v14693 + v14690 
                                            v14688.l0 <- v14694
                                            let v14695 : string = "version"
                                            let v14696 : string = $"{v14695}"
                                            let v14699 : string = v14688.l0
                                            let v14700 : string = v14699 + v14696 
                                            v14688.l0 <- v14700
                                            let v14701 : string = " = "
                                            let v14702 : string = $"{v14701}"
                                            let v14705 : string = v14688.l0
                                            let v14706 : string = v14705 + v14702 
                                            v14688.l0 <- v14706
                                            let v14707 : string = $"%A{v14104}"
                                            let v14710 : string = $"{v14707}"
                                            let v14713 : string = v14688.l0
                                            let v14714 : string = v14713 + v14710 
                                            v14688.l0 <- v14714
                                            let v14715 : string = " }"
                                            let v14716 : string = $"{v14715}"
                                            let v14719 : string = v14688.l0
                                            let v14720 : string = v14719 + v14716 
                                            v14688.l0 <- v14720
                                            let v14721 : string = v14688.l0
                                            let v14722 : (unit -> string) = closure75()
                                            let v14723 : string = $"{v14550} {v14680} #{v14686} %s{v14722 ()} / {v14721}"
                                            let v14726 : char list = []
                                            let v14727 : (char list -> (char [])) = List.toArray
                                            let v14728 : (char []) = v14727 v14726
                                            let v14731 : string = v14723.TrimStart v14728 
                                            let v14749 : char list = []
                                            let v14750 : char list = '/' :: v14749 
                                            let v14753 : char list = ' ' :: v14750 
                                            let v14756 : (char list -> (char [])) = List.toArray
                                            let v14757 : (char []) = v14756 v14753
                                            let v14760 : string = v14731.TrimEnd v14757 
                                            let v14778 : unit = ()
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v14779 : string = @"println!(""{}"", $0)"
                                            Fable.Core.RustInterop.emitRustExpr v14760 v14779 
                                            let _v14778 = () 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v14780 : string = @"println!(""{}"", $0)"
                                            Fable.Core.RustInterop.emitRustExpr v14760 v14780 
                                            let _v14778 = () 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v14781 : string = $"near_sdk::log!(\"{{}}\", $0)"
                                            Fable.Core.RustInterop.emitRustExpr v14760 v14781 
                                            let _v14778 = () 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            System.Console.WriteLine v14760 
                                            let _v14778 = () 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            System.Console.WriteLine v14760 
                                            let _v14778 = () 
                                            #endif
#else
                                            System.Console.WriteLine v14760 
                                            let _v14778 = () 
                                            #endif
                                            _v14778 
                                            let v14782 : (string -> unit) = v14121.l0
                                            v14782 v14760
                                        match v14104 with
                                        | US42_1 -> (* None *)
                                            ()
                                        | US42_0(v14783, v14784) -> (* Some *)
                                            let v14785 : string = $"fable-library-{v12524}.{v14784}"
                                            let v14786 : string = method15(v14068, v14785)
                                            let v14787 : string = $"fable_modules/fable-library-{v12524}.{v14784}"
                                            let v14788 : string = method15(v13937, v14787)
                                            method101(v14786, v14788)
                                        let v14789 : US33 = US33_1
                                        let struct (v14790 : int32, v14791 : string) = method102(v14789, v13937, v12524, v13968, v13914)
                                        let v14792 : bool = v14790 <> 0 
                                        let struct (v17153 : US1, v17154 : US1, v17155 : US1) =
                                            if v14792 then
                                                let v14795 : bool = State.trace_state.IsNone
                                                if v14795 then
                                                    let v14796 : US0 = US0_0
                                                    let struct (v14797 : Mut0, v14798 : Mut1, v14799 : Mut2, v14800 : Mut3, v14801 : int64 option) = method1(v14796)
                                                    let v14802 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v14797, v14798, v14799, v14800, v14801) 
                                                    State.trace_state <- v14802 
                                                    ()
                                                let struct (v14807 : Mut0, v14808 : Mut1, v14809 : Mut2, v14810 : Mut3, v14811 : int64 option) = State.trace_state.Value
                                                let v14822 : bool = State.trace_state.IsNone
                                                if v14822 then
                                                    let v14823 : US0 = US0_0
                                                    let struct (v14824 : Mut0, v14825 : Mut1, v14826 : Mut2, v14827 : Mut3, v14828 : int64 option) = method1(v14823)
                                                    let v14829 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v14824, v14825, v14826, v14827, v14828) 
                                                    State.trace_state <- v14829 
                                                    ()
                                                let struct (v14834 : Mut0, v14835 : Mut1, v14836 : Mut2, v14837 : Mut3, v14838 : int64 option) = State.trace_state.Value
                                                let v14849 : US0 = v14837.l0
                                                let v14850 : bool = v14836.l0
                                                let v14851 : bool = v14850 = false
                                                let v14854 : bool =
                                                    if v14851 then
                                                        false
                                                    else
                                                        let v14852 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v14849
                                                        let v14853 : bool = 4 >= v14852
                                                        v14853
                                                if v14854 then
                                                    let v14855 : int64 = v14807.l0
                                                    let v14856 : int64 = v14855 + 1L
                                                    v14807.l0 <- v14856
                                                    let v14857 : bool = State.trace_state.IsNone
                                                    if v14857 then
                                                        let v14858 : US0 = US0_0
                                                        let struct (v14859 : Mut0, v14860 : Mut1, v14861 : Mut2, v14862 : Mut3, v14863 : int64 option) = method1(v14858)
                                                        let v14864 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v14859, v14860, v14861, v14862, v14863) 
                                                        State.trace_state <- v14864 
                                                        ()
                                                    let struct (v14869 : Mut0, v14870 : Mut1, v14871 : Mut2, v14872 : Mut3, v14873 : int64 option) = State.trace_state.Value
                                                    let v14884 : unit = ()
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v14885 : US3 option = None
                                                    let _v14885 = ref v14885 
                                                    match v14873 with
                                                    | Some x -> (
                                                    (fun () ->
                                                    (fun () ->
                                                    let v14886 : int64 = x
                                                    let v14887 : US3 = US3_0(v14886)
                                                    v14887 
                                                    )
                                                    |> fun x -> x () |> Some
                                                    ) () ) | None -> None
                                                    |> fun x -> _v14885.Value <- x
                                                    let v14888 : US3 option = _v14885.Value 
                                                    let v14899 : US3 = US3_1
                                                    let v14900 : US3 = v14888 |> Option.defaultValue v14899 
                                                    let v14940 : System.DateTime =
                                                        match v14900 with
                                                        | US3_1 -> (* None *)
                                                            let v14936 : System.DateTime = System.DateTime.Now
                                                            v14936
                                                        | US3_0(v14904) -> (* Some *)
                                                            let v14905 : System.DateTime = System.DateTime.Now
                                                            let v14908 : (System.DateTime -> int64) = _.Ticks
                                                            let v14909 : int64 = v14908 v14905
                                                            let v14912 : int64 = v14909 - v14904
                                                            let v14913 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                            let v14914 : System.TimeSpan = v14913 v14912
                                                            let v14917 : (System.TimeSpan -> int32) = _.Hours
                                                            let v14918 : int32 = v14917 v14914
                                                            let v14921 : (System.TimeSpan -> int32) = _.Minutes
                                                            let v14922 : int32 = v14921 v14914
                                                            let v14925 : (System.TimeSpan -> int32) = _.Seconds
                                                            let v14926 : int32 = v14925 v14914
                                                            let v14929 : (System.TimeSpan -> int32) = _.Milliseconds
                                                            let v14930 : int32 = v14929 v14914
                                                            let v14933 : System.DateTime = System.DateTime (1, 1, 1, v14918, v14922, v14926, v14930)
                                                            v14933
                                                    let v14941 : string = method6()
                                                    let v14944 : (string -> string) = v14940.ToString
                                                    let v14945 : string = v14944 v14941
                                                    let _v14884 = v14945 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v14948 : US3 option = None
                                                    let _v14948 = ref v14948 
                                                    match v14873 with
                                                    | Some x -> (
                                                    (fun () ->
                                                    (fun () ->
                                                    let v14949 : int64 = x
                                                    let v14950 : US3 = US3_0(v14949)
                                                    v14950 
                                                    )
                                                    |> fun x -> x () |> Some
                                                    ) () ) | None -> None
                                                    |> fun x -> _v14948.Value <- x
                                                    let v14951 : US3 option = _v14948.Value 
                                                    let v14962 : US3 = US3_1
                                                    let v14963 : US3 = v14951 |> Option.defaultValue v14962 
                                                    let v15003 : System.DateTime =
                                                        match v14963 with
                                                        | US3_1 -> (* None *)
                                                            let v14999 : System.DateTime = System.DateTime.Now
                                                            v14999
                                                        | US3_0(v14967) -> (* Some *)
                                                            let v14968 : System.DateTime = System.DateTime.Now
                                                            let v14971 : (System.DateTime -> int64) = _.Ticks
                                                            let v14972 : int64 = v14971 v14968
                                                            let v14975 : int64 = v14972 - v14967
                                                            let v14976 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                            let v14977 : System.TimeSpan = v14976 v14975
                                                            let v14980 : (System.TimeSpan -> int32) = _.Hours
                                                            let v14981 : int32 = v14980 v14977
                                                            let v14984 : (System.TimeSpan -> int32) = _.Minutes
                                                            let v14985 : int32 = v14984 v14977
                                                            let v14988 : (System.TimeSpan -> int32) = _.Seconds
                                                            let v14989 : int32 = v14988 v14977
                                                            let v14992 : (System.TimeSpan -> int32) = _.Milliseconds
                                                            let v14993 : int32 = v14992 v14977
                                                            let v14996 : System.DateTime = System.DateTime (1, 1, 1, v14981, v14985, v14989, v14993)
                                                            v14996
                                                    let v15004 : string = method6()
                                                    let v15007 : (string -> string) = v15003.ToString
                                                    let v15008 : string = v15007 v15004
                                                    let _v14884 = v15008 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v15011 : string = $"near_sdk::env::block_timestamp()"
                                                    let v15012 : uint64 = Fable.Core.RustInterop.emitRustExpr () v15011 
                                                    let v15013 : US3 option = None
                                                    let _v15013 = ref v15013 
                                                    match v14873 with
                                                    | Some x -> (
                                                    (fun () ->
                                                    (fun () ->
                                                    let v15014 : int64 = x
                                                    let v15015 : US3 = US3_0(v15014)
                                                    v15015 
                                                    )
                                                    |> fun x -> x () |> Some
                                                    ) () ) | None -> None
                                                    |> fun x -> _v15013.Value <- x
                                                    let v15016 : US3 option = _v15013.Value 
                                                    let v15027 : US3 = US3_1
                                                    let v15028 : US3 = v15016 |> Option.defaultValue v15027 
                                                    let v15037 : uint64 =
                                                        match v15028 with
                                                        | US3_1 -> (* None *)
                                                            v15012
                                                        | US3_0(v15032) -> (* Some *)
                                                            let v15033 : (int64 -> uint64) = uint64
                                                            let v15034 : uint64 = v15033 v15032
                                                            let v15035 : uint64 = v15012 - v15034
                                                            v15035
                                                    let v15038 : uint64 = v15037 / 1000000000UL
                                                    let v15039 : uint64 = v15038 % 60UL
                                                    let v15040 : uint64 = v15038 / 60UL
                                                    let v15041 : uint64 = v15040 % 60UL
                                                    let v15042 : uint64 = v15038 / 3600UL
                                                    let v15043 : uint64 = v15042 % 24UL
                                                    let v15044 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
                                                    let v15045 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v15043, v15041, v15039) v15044 
                                                    let v15046 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v15047 : string = Fable.Core.RustInterop.emitRustExpr v15045 v15046 
                                                    let _v14884 = v15047 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v15048 : US3 option = None
                                                    let _v15048 = ref v15048 
                                                    match v14873 with
                                                    | Some x -> (
                                                    (fun () ->
                                                    (fun () ->
                                                    let v15049 : int64 = x
                                                    let v15050 : US3 = US3_0(v15049)
                                                    v15050 
                                                    )
                                                    |> fun x -> x () |> Some
                                                    ) () ) | None -> None
                                                    |> fun x -> _v15048.Value <- x
                                                    let v15051 : US3 option = _v15048.Value 
                                                    let v15062 : US3 = US3_1
                                                    let v15063 : US3 = v15051 |> Option.defaultValue v15062 
                                                    let v15103 : System.DateTime =
                                                        match v15063 with
                                                        | US3_1 -> (* None *)
                                                            let v15099 : System.DateTime = System.DateTime.Now
                                                            v15099
                                                        | US3_0(v15067) -> (* Some *)
                                                            let v15068 : System.DateTime = System.DateTime.Now
                                                            let v15071 : (System.DateTime -> int64) = _.Ticks
                                                            let v15072 : int64 = v15071 v15068
                                                            let v15075 : int64 = v15072 - v15067
                                                            let v15076 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                            let v15077 : System.TimeSpan = v15076 v15075
                                                            let v15080 : (System.TimeSpan -> int32) = _.Hours
                                                            let v15081 : int32 = v15080 v15077
                                                            let v15084 : (System.TimeSpan -> int32) = _.Minutes
                                                            let v15085 : int32 = v15084 v15077
                                                            let v15088 : (System.TimeSpan -> int32) = _.Seconds
                                                            let v15089 : int32 = v15088 v15077
                                                            let v15092 : (System.TimeSpan -> int32) = _.Milliseconds
                                                            let v15093 : int32 = v15092 v15077
                                                            let v15096 : System.DateTime = System.DateTime (1, 1, 1, v15081, v15085, v15089, v15093)
                                                            v15096
                                                    let v15104 : string = method7()
                                                    let v15107 : (string -> string) = v15103.ToString
                                                    let v15108 : string = v15107 v15104
                                                    let _v14884 = v15108 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v15111 : US3 option = None
                                                    let _v15111 = ref v15111 
                                                    match v14873 with
                                                    | Some x -> (
                                                    (fun () ->
                                                    (fun () ->
                                                    let v15112 : int64 = x
                                                    let v15113 : US3 = US3_0(v15112)
                                                    v15113 
                                                    )
                                                    |> fun x -> x () |> Some
                                                    ) () ) | None -> None
                                                    |> fun x -> _v15111.Value <- x
                                                    let v15114 : US3 option = _v15111.Value 
                                                    let v15125 : US3 = US3_1
                                                    let v15126 : US3 = v15114 |> Option.defaultValue v15125 
                                                    let v15166 : System.DateTime =
                                                        match v15126 with
                                                        | US3_1 -> (* None *)
                                                            let v15162 : System.DateTime = System.DateTime.Now
                                                            v15162
                                                        | US3_0(v15130) -> (* Some *)
                                                            let v15131 : System.DateTime = System.DateTime.Now
                                                            let v15134 : (System.DateTime -> int64) = _.Ticks
                                                            let v15135 : int64 = v15134 v15131
                                                            let v15138 : int64 = v15135 - v15130
                                                            let v15139 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                            let v15140 : System.TimeSpan = v15139 v15138
                                                            let v15143 : (System.TimeSpan -> int32) = _.Hours
                                                            let v15144 : int32 = v15143 v15140
                                                            let v15147 : (System.TimeSpan -> int32) = _.Minutes
                                                            let v15148 : int32 = v15147 v15140
                                                            let v15151 : (System.TimeSpan -> int32) = _.Seconds
                                                            let v15152 : int32 = v15151 v15140
                                                            let v15155 : (System.TimeSpan -> int32) = _.Milliseconds
                                                            let v15156 : int32 = v15155 v15140
                                                            let v15159 : System.DateTime = System.DateTime (1, 1, 1, v15144, v15148, v15152, v15156)
                                                            v15159
                                                    let v15167 : string = method7()
                                                    let v15170 : (string -> string) = v15166.ToString
                                                    let v15171 : string = v15170 v15167
                                                    let _v14884 = v15171 
                                                    #endif
#else
                                                    let v15174 : US3 option = None
                                                    let _v15174 = ref v15174 
                                                    match v14873 with
                                                    | Some x -> (
                                                    (fun () ->
                                                    (fun () ->
                                                    let v15175 : int64 = x
                                                    let v15176 : US3 = US3_0(v15175)
                                                    v15176 
                                                    )
                                                    |> fun x -> x () |> Some
                                                    ) () ) | None -> None
                                                    |> fun x -> _v15174.Value <- x
                                                    let v15177 : US3 option = _v15174.Value 
                                                    let v15188 : US3 = US3_1
                                                    let v15189 : US3 = v15177 |> Option.defaultValue v15188 
                                                    let v15229 : System.DateTime =
                                                        match v15189 with
                                                        | US3_1 -> (* None *)
                                                            let v15225 : System.DateTime = System.DateTime.Now
                                                            v15225
                                                        | US3_0(v15193) -> (* Some *)
                                                            let v15194 : System.DateTime = System.DateTime.Now
                                                            let v15197 : (System.DateTime -> int64) = _.Ticks
                                                            let v15198 : int64 = v15197 v15194
                                                            let v15201 : int64 = v15198 - v15193
                                                            let v15202 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                            let v15203 : System.TimeSpan = v15202 v15201
                                                            let v15206 : (System.TimeSpan -> int32) = _.Hours
                                                            let v15207 : int32 = v15206 v15203
                                                            let v15210 : (System.TimeSpan -> int32) = _.Minutes
                                                            let v15211 : int32 = v15210 v15203
                                                            let v15214 : (System.TimeSpan -> int32) = _.Seconds
                                                            let v15215 : int32 = v15214 v15203
                                                            let v15218 : (System.TimeSpan -> int32) = _.Milliseconds
                                                            let v15219 : int32 = v15218 v15203
                                                            let v15222 : System.DateTime = System.DateTime (1, 1, 1, v15207, v15211, v15215, v15219)
                                                            v15222
                                                    let v15230 : string = method7()
                                                    let v15233 : (string -> string) = v15229.ToString
                                                    let v15234 : string = v15233 v15230
                                                    let _v14884 = v15234 
                                                    #endif
                                                    let v15237 : string = _v14884 
                                                    let v15302 : string = "Critical"
                                                    let v15303 : (unit -> string) = v15302.ToLower
                                                    let v15304 : string = v15303 ()
                                                    let v15307 : string = v15304.PadLeft (7, ' ')
                                                    let v15321 : unit = ()
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v15322 : string = "inline_colorization::color_bright_red"
                                                    let v15323 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v15322 
                                                    let v15324 : string = "&*$0"
                                                    let v15325 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v15307 v15324 
                                                    let v15326 : string = "inline_colorization::color_reset"
                                                    let v15327 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v15326 
                                                    let v15328 : string = "\"{v15323}{v15325}{v15327}\""
                                                    let v15329 : string = @$"format!(" + v15328 + ")"
                                                    let v15330 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v15329 
                                                    let v15331 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v15332 : string = Fable.Core.RustInterop.emitRustExpr v15330 v15331 
                                                    let _v15321 = v15332 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v15333 : string = "inline_colorization::color_bright_red"
                                                    let v15334 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v15333 
                                                    let v15335 : string = "&*$0"
                                                    let v15336 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v15307 v15335 
                                                    let v15337 : string = "inline_colorization::color_reset"
                                                    let v15338 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v15337 
                                                    let v15339 : string = "\"{v15334}{v15336}{v15338}\""
                                                    let v15340 : string = @$"format!(" + v15339 + ")"
                                                    let v15341 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v15340 
                                                    let v15342 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v15343 : string = Fable.Core.RustInterop.emitRustExpr v15341 v15342 
                                                    let _v15321 = v15343 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v15344 : string = "inline_colorization::color_bright_red"
                                                    let v15345 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v15344 
                                                    let v15346 : string = "&*$0"
                                                    let v15347 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v15307 v15346 
                                                    let v15348 : string = "inline_colorization::color_reset"
                                                    let v15349 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v15348 
                                                    let v15350 : string = "\"{v15345}{v15347}{v15349}\""
                                                    let v15351 : string = @$"format!(" + v15350 + ")"
                                                    let v15352 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v15351 
                                                    let v15353 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v15354 : string = Fable.Core.RustInterop.emitRustExpr v15352 v15353 
                                                    let _v15321 = v15354 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v15355 : string = "\u001b[91m"
                                                    let v15356 : string = method8()
                                                    let v15357 : string = v15355 + v15307 
                                                    let v15358 : string = v15357 + v15356 
                                                    let _v15321 = v15358 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v15359 : string = "\u001b[91m"
                                                    let v15360 : string = method8()
                                                    let v15361 : string = v15359 + v15307 
                                                    let v15362 : string = v15361 + v15360 
                                                    let _v15321 = v15362 
                                                    #endif
#else
                                                    let v15363 : string = "\u001b[91m"
                                                    let v15364 : string = method8()
                                                    let v15365 : string = v15363 + v15307 
                                                    let v15366 : string = v15365 + v15364 
                                                    let _v15321 = v15366 
                                                    #endif
                                                    let v15367 : string = _v15321 
                                                    let v15373 : int64 = v14869.l0
                                                    let v15374 : string = method9()
                                                    let v15375 : Mut4 = {l0 = v15374} : Mut4
                                                    let v15376 : string = "{ "
                                                    let v15377 : string = $"{v15376}"
                                                    let v15380 : string = v15375.l0
                                                    let v15381 : string = v15380 + v15377 
                                                    v15375.l0 <- v15381
                                                    let v15382 : string = "exit_code"
                                                    let v15383 : string = $"{v15382}"
                                                    let v15386 : string = v15375.l0
                                                    let v15387 : string = v15386 + v15383 
                                                    v15375.l0 <- v15387
                                                    let v15388 : string = " = "
                                                    let v15389 : string = $"{v15388}"
                                                    let v15392 : string = v15375.l0
                                                    let v15393 : string = v15392 + v15389 
                                                    v15375.l0 <- v15393
                                                    let v15394 : string = $"{v14790}"
                                                    let v15397 : string = v15375.l0
                                                    let v15398 : string = v15397 + v15394 
                                                    v15375.l0 <- v15398
                                                    let v15399 : string = "; "
                                                    let v15400 : string = $"{v15399}"
                                                    let v15403 : string = v15375.l0
                                                    let v15404 : string = v15403 + v15400 
                                                    v15375.l0 <- v15404
                                                    let v15405 : string = "dotnet_fable_result"
                                                    let v15406 : string = $"{v15405}"
                                                    let v15409 : string = v15375.l0
                                                    let v15410 : string = v15409 + v15406 
                                                    v15375.l0 <- v15410
                                                    let v15411 : string = $"{v15388}"
                                                    let v15414 : string = v15375.l0
                                                    let v15415 : string = v15414 + v15411 
                                                    v15375.l0 <- v15415
                                                    let v15416 : string = $"{v14791}"
                                                    let v15419 : string = v15375.l0
                                                    let v15420 : string = v15419 + v15416 
                                                    v15375.l0 <- v15420
                                                    let v15421 : string = " }"
                                                    let v15422 : string = $"{v15421}"
                                                    let v15425 : string = v15375.l0
                                                    let v15426 : string = v15425 + v15422 
                                                    v15375.l0 <- v15426
                                                    let v15427 : string = v15375.l0
                                                    let v15428 : (unit -> string) = closure76()
                                                    let v15429 : string = $"{v15237} {v15367} #{v15373} %s{v15428 ()} / {v15427}"
                                                    let v15432 : char list = []
                                                    let v15433 : (char list -> (char [])) = List.toArray
                                                    let v15434 : (char []) = v15433 v15432
                                                    let v15437 : string = v15429.TrimStart v15434 
                                                    let v15455 : char list = []
                                                    let v15456 : char list = '/' :: v15455 
                                                    let v15459 : char list = ' ' :: v15456 
                                                    let v15462 : (char list -> (char [])) = List.toArray
                                                    let v15463 : (char []) = v15462 v15459
                                                    let v15466 : string = v15437.TrimEnd v15463 
                                                    let v15484 : unit = ()
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v15485 : string = @"println!(""{}"", $0)"
                                                    Fable.Core.RustInterop.emitRustExpr v15466 v15485 
                                                    let _v15484 = () 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v15486 : string = @"println!(""{}"", $0)"
                                                    Fable.Core.RustInterop.emitRustExpr v15466 v15486 
                                                    let _v15484 = () 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v15487 : string = $"near_sdk::log!(\"{{}}\", $0)"
                                                    Fable.Core.RustInterop.emitRustExpr v15466 v15487 
                                                    let _v15484 = () 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    System.Console.WriteLine v15466 
                                                    let _v15484 = () 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    System.Console.WriteLine v15466 
                                                    let _v15484 = () 
                                                    #endif
#else
                                                    System.Console.WriteLine v15466 
                                                    let _v15484 = () 
                                                    #endif
                                                    _v15484 
                                                    let v15488 : (string -> unit) = v14808.l0
                                                    v15488 v15466
                                                let v15489 : US1 = US1_0(v12524)
                                                let v15490 : US1 = US1_1
                                                let v15491 : US1 = US1_0(v14791)
                                                struct (v15489, v15490, v15491)
                                            else
                                                let v15492 : string = "true; let _result : Vec<_> = v12471.into_iter().map(|x| { //"
                                                let v15493 : bool = Fable.Core.RustInterop.emitRustExpr () v15492 
                                                let v15494 : string = "x"
                                                let v15495 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v15494 
                                                let v15496 : string = "fable_library_rust::String_::fromString($0)"
                                                let v15497 : string = Fable.Core.RustInterop.emitRustExpr v15495 v15496 
                                                let v15498 : string = "="
                                                let v15499 : bool = v15497.Contains v15498 
                                                let v15503 : string =
                                                    if v15499 then
                                                        v15497
                                                    else
                                                        let v15502 : string = $"\"{v15497}\":\"*\""
                                                        v15502
                                                let v15504 : string = "true; $0 }).collect::<Vec<_>>()"
                                                let v15505 : bool = Fable.Core.RustInterop.emitRustExpr v15503 v15504 
                                                let v15506 : string = "_result"
                                                let v15507 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v15506 
                                                let v15508 : string = "fable_library_rust::NativeArray_::array_from($0)"
                                                let v15509 : (string []) = Fable.Core.RustInterop.emitRustExpr v15507 v15508 
                                                let v15510 : string seq = seq { for i = 0 to v15509.Length - 1 do yield v15509.[i] }
                                                let v15513 : (string -> (string seq -> string)) = String.concat
                                                let v15514 : string = ",\n"
                                                let v15515 : (string seq -> string) = v15513 v15514
                                                let v15516 : string = v15515 v15510
                                                let v15519 : string = $"{{"
                                                let v15520 : string = $"  \"name\": \"spiral_builder_{v12528}\","
                                                let v15521 : string = v15519 + v15520 
                                                let v15522 : string = $"  \"dependencies\": {{"
                                                let v15523 : string = v15521 + v15522 
                                                let v15524 : string = v15523 + v15516 
                                                let v15525 : string = $"  }},"
                                                let v15526 : string = v15524 + v15525 
                                                let v15527 : string = $"    \"devDependencies\": {{"
                                                let v15528 : string = v15526 + v15527 
                                                let v15529 : string = $"  }},"
                                                let v15530 : string = v15528 + v15529 
                                                let v15531 : string = $"}}"
                                                let v15532 : string = v15530 + v15531 
                                                let v15533 : string = "package.json"
                                                let v15534 : string = method15(v13937, v15533)
                                                let v15535 : string = "../.."
                                                let v15536 : string = method15(v13937, v15535)
                                                let v15537 : string = method15(v15536, v15533)
                                                method25(v15534, v15532)
                                                let v15538 : string = ""
                                                method25(v15537, v15538)
                                                let v15539 : string = $"{v13931}.{v12524}"
                                                let v15540 : string = method15(v13937, v15539)
                                                let v15541 : bool = State.trace_state.IsNone
                                                if v15541 then
                                                    let v15542 : US0 = US0_0
                                                    let struct (v15543 : Mut0, v15544 : Mut1, v15545 : Mut2, v15546 : Mut3, v15547 : int64 option) = method1(v15542)
                                                    let v15548 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v15543, v15544, v15545, v15546, v15547) 
                                                    State.trace_state <- v15548 
                                                    ()
                                                let struct (v15553 : Mut0, v15554 : Mut1, v15555 : Mut2, v15556 : Mut3, v15557 : int64 option) = State.trace_state.Value
                                                let v15568 : bool = State.trace_state.IsNone
                                                if v15568 then
                                                    let v15569 : US0 = US0_0
                                                    let struct (v15570 : Mut0, v15571 : Mut1, v15572 : Mut2, v15573 : Mut3, v15574 : int64 option) = method1(v15569)
                                                    let v15575 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v15570, v15571, v15572, v15573, v15574) 
                                                    State.trace_state <- v15575 
                                                    ()
                                                let struct (v15580 : Mut0, v15581 : Mut1, v15582 : Mut2, v15583 : Mut3, v15584 : int64 option) = State.trace_state.Value
                                                let v15595 : US0 = v15583.l0
                                                let v15596 : bool = v15582.l0
                                                let v15597 : bool = v15596 = false
                                                let v15600 : bool =
                                                    if v15597 then
                                                        false
                                                    else
                                                        let v15598 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v15595
                                                        let v15599 : bool = 1 >= v15598
                                                        v15599
                                                if v15600 then
                                                    let v15601 : int64 = v15553.l0
                                                    let v15602 : int64 = v15601 + 1L
                                                    v15553.l0 <- v15602
                                                    let v15603 : bool = State.trace_state.IsNone
                                                    if v15603 then
                                                        let v15604 : US0 = US0_0
                                                        let struct (v15605 : Mut0, v15606 : Mut1, v15607 : Mut2, v15608 : Mut3, v15609 : int64 option) = method1(v15604)
                                                        let v15610 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v15605, v15606, v15607, v15608, v15609) 
                                                        State.trace_state <- v15610 
                                                        ()
                                                    let struct (v15615 : Mut0, v15616 : Mut1, v15617 : Mut2, v15618 : Mut3, v15619 : int64 option) = State.trace_state.Value
                                                    let v15630 : unit = ()
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v15631 : US3 option = None
                                                    let _v15631 = ref v15631 
                                                    match v15619 with
                                                    | Some x -> (
                                                    (fun () ->
                                                    (fun () ->
                                                    let v15632 : int64 = x
                                                    let v15633 : US3 = US3_0(v15632)
                                                    v15633 
                                                    )
                                                    |> fun x -> x () |> Some
                                                    ) () ) | None -> None
                                                    |> fun x -> _v15631.Value <- x
                                                    let v15634 : US3 option = _v15631.Value 
                                                    let v15645 : US3 = US3_1
                                                    let v15646 : US3 = v15634 |> Option.defaultValue v15645 
                                                    let v15686 : System.DateTime =
                                                        match v15646 with
                                                        | US3_1 -> (* None *)
                                                            let v15682 : System.DateTime = System.DateTime.Now
                                                            v15682
                                                        | US3_0(v15650) -> (* Some *)
                                                            let v15651 : System.DateTime = System.DateTime.Now
                                                            let v15654 : (System.DateTime -> int64) = _.Ticks
                                                            let v15655 : int64 = v15654 v15651
                                                            let v15658 : int64 = v15655 - v15650
                                                            let v15659 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                            let v15660 : System.TimeSpan = v15659 v15658
                                                            let v15663 : (System.TimeSpan -> int32) = _.Hours
                                                            let v15664 : int32 = v15663 v15660
                                                            let v15667 : (System.TimeSpan -> int32) = _.Minutes
                                                            let v15668 : int32 = v15667 v15660
                                                            let v15671 : (System.TimeSpan -> int32) = _.Seconds
                                                            let v15672 : int32 = v15671 v15660
                                                            let v15675 : (System.TimeSpan -> int32) = _.Milliseconds
                                                            let v15676 : int32 = v15675 v15660
                                                            let v15679 : System.DateTime = System.DateTime (1, 1, 1, v15664, v15668, v15672, v15676)
                                                            v15679
                                                    let v15687 : string = method6()
                                                    let v15690 : (string -> string) = v15686.ToString
                                                    let v15691 : string = v15690 v15687
                                                    let _v15630 = v15691 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v15694 : US3 option = None
                                                    let _v15694 = ref v15694 
                                                    match v15619 with
                                                    | Some x -> (
                                                    (fun () ->
                                                    (fun () ->
                                                    let v15695 : int64 = x
                                                    let v15696 : US3 = US3_0(v15695)
                                                    v15696 
                                                    )
                                                    |> fun x -> x () |> Some
                                                    ) () ) | None -> None
                                                    |> fun x -> _v15694.Value <- x
                                                    let v15697 : US3 option = _v15694.Value 
                                                    let v15708 : US3 = US3_1
                                                    let v15709 : US3 = v15697 |> Option.defaultValue v15708 
                                                    let v15749 : System.DateTime =
                                                        match v15709 with
                                                        | US3_1 -> (* None *)
                                                            let v15745 : System.DateTime = System.DateTime.Now
                                                            v15745
                                                        | US3_0(v15713) -> (* Some *)
                                                            let v15714 : System.DateTime = System.DateTime.Now
                                                            let v15717 : (System.DateTime -> int64) = _.Ticks
                                                            let v15718 : int64 = v15717 v15714
                                                            let v15721 : int64 = v15718 - v15713
                                                            let v15722 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                            let v15723 : System.TimeSpan = v15722 v15721
                                                            let v15726 : (System.TimeSpan -> int32) = _.Hours
                                                            let v15727 : int32 = v15726 v15723
                                                            let v15730 : (System.TimeSpan -> int32) = _.Minutes
                                                            let v15731 : int32 = v15730 v15723
                                                            let v15734 : (System.TimeSpan -> int32) = _.Seconds
                                                            let v15735 : int32 = v15734 v15723
                                                            let v15738 : (System.TimeSpan -> int32) = _.Milliseconds
                                                            let v15739 : int32 = v15738 v15723
                                                            let v15742 : System.DateTime = System.DateTime (1, 1, 1, v15727, v15731, v15735, v15739)
                                                            v15742
                                                    let v15750 : string = method6()
                                                    let v15753 : (string -> string) = v15749.ToString
                                                    let v15754 : string = v15753 v15750
                                                    let _v15630 = v15754 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v15757 : string = $"near_sdk::env::block_timestamp()"
                                                    let v15758 : uint64 = Fable.Core.RustInterop.emitRustExpr () v15757 
                                                    let v15759 : US3 option = None
                                                    let _v15759 = ref v15759 
                                                    match v15619 with
                                                    | Some x -> (
                                                    (fun () ->
                                                    (fun () ->
                                                    let v15760 : int64 = x
                                                    let v15761 : US3 = US3_0(v15760)
                                                    v15761 
                                                    )
                                                    |> fun x -> x () |> Some
                                                    ) () ) | None -> None
                                                    |> fun x -> _v15759.Value <- x
                                                    let v15762 : US3 option = _v15759.Value 
                                                    let v15773 : US3 = US3_1
                                                    let v15774 : US3 = v15762 |> Option.defaultValue v15773 
                                                    let v15783 : uint64 =
                                                        match v15774 with
                                                        | US3_1 -> (* None *)
                                                            v15758
                                                        | US3_0(v15778) -> (* Some *)
                                                            let v15779 : (int64 -> uint64) = uint64
                                                            let v15780 : uint64 = v15779 v15778
                                                            let v15781 : uint64 = v15758 - v15780
                                                            v15781
                                                    let v15784 : uint64 = v15783 / 1000000000UL
                                                    let v15785 : uint64 = v15784 % 60UL
                                                    let v15786 : uint64 = v15784 / 60UL
                                                    let v15787 : uint64 = v15786 % 60UL
                                                    let v15788 : uint64 = v15784 / 3600UL
                                                    let v15789 : uint64 = v15788 % 24UL
                                                    let v15790 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
                                                    let v15791 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v15789, v15787, v15785) v15790 
                                                    let v15792 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v15793 : string = Fable.Core.RustInterop.emitRustExpr v15791 v15792 
                                                    let _v15630 = v15793 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v15794 : US3 option = None
                                                    let _v15794 = ref v15794 
                                                    match v15619 with
                                                    | Some x -> (
                                                    (fun () ->
                                                    (fun () ->
                                                    let v15795 : int64 = x
                                                    let v15796 : US3 = US3_0(v15795)
                                                    v15796 
                                                    )
                                                    |> fun x -> x () |> Some
                                                    ) () ) | None -> None
                                                    |> fun x -> _v15794.Value <- x
                                                    let v15797 : US3 option = _v15794.Value 
                                                    let v15808 : US3 = US3_1
                                                    let v15809 : US3 = v15797 |> Option.defaultValue v15808 
                                                    let v15849 : System.DateTime =
                                                        match v15809 with
                                                        | US3_1 -> (* None *)
                                                            let v15845 : System.DateTime = System.DateTime.Now
                                                            v15845
                                                        | US3_0(v15813) -> (* Some *)
                                                            let v15814 : System.DateTime = System.DateTime.Now
                                                            let v15817 : (System.DateTime -> int64) = _.Ticks
                                                            let v15818 : int64 = v15817 v15814
                                                            let v15821 : int64 = v15818 - v15813
                                                            let v15822 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                            let v15823 : System.TimeSpan = v15822 v15821
                                                            let v15826 : (System.TimeSpan -> int32) = _.Hours
                                                            let v15827 : int32 = v15826 v15823
                                                            let v15830 : (System.TimeSpan -> int32) = _.Minutes
                                                            let v15831 : int32 = v15830 v15823
                                                            let v15834 : (System.TimeSpan -> int32) = _.Seconds
                                                            let v15835 : int32 = v15834 v15823
                                                            let v15838 : (System.TimeSpan -> int32) = _.Milliseconds
                                                            let v15839 : int32 = v15838 v15823
                                                            let v15842 : System.DateTime = System.DateTime (1, 1, 1, v15827, v15831, v15835, v15839)
                                                            v15842
                                                    let v15850 : string = method7()
                                                    let v15853 : (string -> string) = v15849.ToString
                                                    let v15854 : string = v15853 v15850
                                                    let _v15630 = v15854 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v15857 : US3 option = None
                                                    let _v15857 = ref v15857 
                                                    match v15619 with
                                                    | Some x -> (
                                                    (fun () ->
                                                    (fun () ->
                                                    let v15858 : int64 = x
                                                    let v15859 : US3 = US3_0(v15858)
                                                    v15859 
                                                    )
                                                    |> fun x -> x () |> Some
                                                    ) () ) | None -> None
                                                    |> fun x -> _v15857.Value <- x
                                                    let v15860 : US3 option = _v15857.Value 
                                                    let v15871 : US3 = US3_1
                                                    let v15872 : US3 = v15860 |> Option.defaultValue v15871 
                                                    let v15912 : System.DateTime =
                                                        match v15872 with
                                                        | US3_1 -> (* None *)
                                                            let v15908 : System.DateTime = System.DateTime.Now
                                                            v15908
                                                        | US3_0(v15876) -> (* Some *)
                                                            let v15877 : System.DateTime = System.DateTime.Now
                                                            let v15880 : (System.DateTime -> int64) = _.Ticks
                                                            let v15881 : int64 = v15880 v15877
                                                            let v15884 : int64 = v15881 - v15876
                                                            let v15885 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                            let v15886 : System.TimeSpan = v15885 v15884
                                                            let v15889 : (System.TimeSpan -> int32) = _.Hours
                                                            let v15890 : int32 = v15889 v15886
                                                            let v15893 : (System.TimeSpan -> int32) = _.Minutes
                                                            let v15894 : int32 = v15893 v15886
                                                            let v15897 : (System.TimeSpan -> int32) = _.Seconds
                                                            let v15898 : int32 = v15897 v15886
                                                            let v15901 : (System.TimeSpan -> int32) = _.Milliseconds
                                                            let v15902 : int32 = v15901 v15886
                                                            let v15905 : System.DateTime = System.DateTime (1, 1, 1, v15890, v15894, v15898, v15902)
                                                            v15905
                                                    let v15913 : string = method7()
                                                    let v15916 : (string -> string) = v15912.ToString
                                                    let v15917 : string = v15916 v15913
                                                    let _v15630 = v15917 
                                                    #endif
#else
                                                    let v15920 : US3 option = None
                                                    let _v15920 = ref v15920 
                                                    match v15619 with
                                                    | Some x -> (
                                                    (fun () ->
                                                    (fun () ->
                                                    let v15921 : int64 = x
                                                    let v15922 : US3 = US3_0(v15921)
                                                    v15922 
                                                    )
                                                    |> fun x -> x () |> Some
                                                    ) () ) | None -> None
                                                    |> fun x -> _v15920.Value <- x
                                                    let v15923 : US3 option = _v15920.Value 
                                                    let v15934 : US3 = US3_1
                                                    let v15935 : US3 = v15923 |> Option.defaultValue v15934 
                                                    let v15975 : System.DateTime =
                                                        match v15935 with
                                                        | US3_1 -> (* None *)
                                                            let v15971 : System.DateTime = System.DateTime.Now
                                                            v15971
                                                        | US3_0(v15939) -> (* Some *)
                                                            let v15940 : System.DateTime = System.DateTime.Now
                                                            let v15943 : (System.DateTime -> int64) = _.Ticks
                                                            let v15944 : int64 = v15943 v15940
                                                            let v15947 : int64 = v15944 - v15939
                                                            let v15948 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                            let v15949 : System.TimeSpan = v15948 v15947
                                                            let v15952 : (System.TimeSpan -> int32) = _.Hours
                                                            let v15953 : int32 = v15952 v15949
                                                            let v15956 : (System.TimeSpan -> int32) = _.Minutes
                                                            let v15957 : int32 = v15956 v15949
                                                            let v15960 : (System.TimeSpan -> int32) = _.Seconds
                                                            let v15961 : int32 = v15960 v15949
                                                            let v15964 : (System.TimeSpan -> int32) = _.Milliseconds
                                                            let v15965 : int32 = v15964 v15949
                                                            let v15968 : System.DateTime = System.DateTime (1, 1, 1, v15953, v15957, v15961, v15965)
                                                            v15968
                                                    let v15976 : string = method7()
                                                    let v15979 : (string -> string) = v15975.ToString
                                                    let v15980 : string = v15979 v15976
                                                    let _v15630 = v15980 
                                                    #endif
                                                    let v15983 : string = _v15630 
                                                    let v16048 : string = "Debug"
                                                    let v16049 : (unit -> string) = v16048.ToLower
                                                    let v16050 : string = v16049 ()
                                                    let v16053 : string = v16050.PadLeft (7, ' ')
                                                    let v16067 : unit = ()
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v16068 : string = "inline_colorization::color_bright_blue"
                                                    let v16069 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v16068 
                                                    let v16070 : string = "&*$0"
                                                    let v16071 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v16053 v16070 
                                                    let v16072 : string = "inline_colorization::color_reset"
                                                    let v16073 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v16072 
                                                    let v16074 : string = "\"{v16069}{v16071}{v16073}\""
                                                    let v16075 : string = @$"format!(" + v16074 + ")"
                                                    let v16076 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v16075 
                                                    let v16077 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v16078 : string = Fable.Core.RustInterop.emitRustExpr v16076 v16077 
                                                    let _v16067 = v16078 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v16079 : string = "inline_colorization::color_bright_blue"
                                                    let v16080 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v16079 
                                                    let v16081 : string = "&*$0"
                                                    let v16082 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v16053 v16081 
                                                    let v16083 : string = "inline_colorization::color_reset"
                                                    let v16084 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v16083 
                                                    let v16085 : string = "\"{v16080}{v16082}{v16084}\""
                                                    let v16086 : string = @$"format!(" + v16085 + ")"
                                                    let v16087 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v16086 
                                                    let v16088 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v16089 : string = Fable.Core.RustInterop.emitRustExpr v16087 v16088 
                                                    let _v16067 = v16089 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v16090 : string = "inline_colorization::color_bright_blue"
                                                    let v16091 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v16090 
                                                    let v16092 : string = "&*$0"
                                                    let v16093 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v16053 v16092 
                                                    let v16094 : string = "inline_colorization::color_reset"
                                                    let v16095 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v16094 
                                                    let v16096 : string = "\"{v16091}{v16093}{v16095}\""
                                                    let v16097 : string = @$"format!(" + v16096 + ")"
                                                    let v16098 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v16097 
                                                    let v16099 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v16100 : string = Fable.Core.RustInterop.emitRustExpr v16098 v16099 
                                                    let _v16067 = v16100 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v16101 : string = "\u001b[94m"
                                                    let v16102 : string = method8()
                                                    let v16103 : string = v16101 + v16053 
                                                    let v16104 : string = v16103 + v16102 
                                                    let _v16067 = v16104 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v16105 : string = "\u001b[94m"
                                                    let v16106 : string = method8()
                                                    let v16107 : string = v16105 + v16053 
                                                    let v16108 : string = v16107 + v16106 
                                                    let _v16067 = v16108 
                                                    #endif
#else
                                                    let v16109 : string = "\u001b[94m"
                                                    let v16110 : string = method8()
                                                    let v16111 : string = v16109 + v16053 
                                                    let v16112 : string = v16111 + v16110 
                                                    let _v16067 = v16112 
                                                    #endif
                                                    let v16113 : string = _v16067 
                                                    let v16119 : int64 = v15615.l0
                                                    let v16120 : string = method9()
                                                    let v16121 : Mut4 = {l0 = v16120} : Mut4
                                                    let v16122 : string = "{ "
                                                    let v16123 : string = $"{v16122}"
                                                    let v16126 : string = v16121.l0
                                                    let v16127 : string = v16126 + v16123 
                                                    v16121.l0 <- v16127
                                                    let v16128 : string = "new_code_path"
                                                    let v16129 : string = $"{v16128}"
                                                    let v16132 : string = v16121.l0
                                                    let v16133 : string = v16132 + v16129 
                                                    v16121.l0 <- v16133
                                                    let v16134 : string = " = "
                                                    let v16135 : string = $"{v16134}"
                                                    let v16138 : string = v16121.l0
                                                    let v16139 : string = v16138 + v16135 
                                                    v16121.l0 <- v16139
                                                    let v16140 : string = $"{v15540}"
                                                    let v16143 : string = v16121.l0
                                                    let v16144 : string = v16143 + v16140 
                                                    v16121.l0 <- v16144
                                                    let v16145 : string = " }"
                                                    let v16146 : string = $"{v16145}"
                                                    let v16149 : string = v16121.l0
                                                    let v16150 : string = v16149 + v16146 
                                                    v16121.l0 <- v16150
                                                    let v16151 : string = v16121.l0
                                                    let v16152 : (unit -> string) = closure77()
                                                    let v16153 : string = $"{v15983} {v16113} #{v16119} %s{v16152 ()} / {v16151}"
                                                    let v16156 : char list = []
                                                    let v16157 : (char list -> (char [])) = List.toArray
                                                    let v16158 : (char []) = v16157 v16156
                                                    let v16161 : string = v16153.TrimStart v16158 
                                                    let v16178 : char list = []
                                                    let v16179 : char list = '/' :: v16178 
                                                    let v16182 : char list = ' ' :: v16179 
                                                    let v16185 : (char list -> (char [])) = List.toArray
                                                    let v16186 : (char []) = v16185 v16182
                                                    let v16189 : string = v16161.TrimEnd v16186 
                                                    let v16206 : unit = ()
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v16207 : string = @"println!(""{}"", $0)"
                                                    Fable.Core.RustInterop.emitRustExpr v16189 v16207 
                                                    let _v16206 = () 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v16208 : string = @"println!(""{}"", $0)"
                                                    Fable.Core.RustInterop.emitRustExpr v16189 v16208 
                                                    let _v16206 = () 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v16209 : string = $"near_sdk::log!(\"{{}}\", $0)"
                                                    Fable.Core.RustInterop.emitRustExpr v16189 v16209 
                                                    let _v16206 = () 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    System.Console.WriteLine v16189 
                                                    let _v16206 = () 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    System.Console.WriteLine v16189 
                                                    let _v16206 = () 
                                                    #endif
#else
                                                    System.Console.WriteLine v16189 
                                                    let _v16206 = () 
                                                    #endif
                                                    _v16206 
                                                    let v16210 : (string -> unit) = v15554.l0
                                                    v16210 v16189
                                                let v16211 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v16212 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v16213 : string = "std::fs::read(&*$0)"
                                                let v16214 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v15540 v16213 
                                                let v16215 : string = "$0.unwrap()"
                                                let v16216 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v16214 v16215 
                                                let _v16212 = v16216 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v16217 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v16212 = v16217 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v16220 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v16212 = v16220 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v16223 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v16212 = v16223 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v16226 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v16212 = v16226 
                                                #endif
#else
                                                let v16229 : (uint8 []) = v15540 |> System.IO.File.ReadAllBytes
                                                let v16230 : string = "$0.to_vec()"
                                                let v16231 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v16229 v16230 
                                                let _v16212 = v16231 
                                                #endif
                                                let v16232 : Vec<uint8> = _v16212 
                                                let v16237 : Vec<uint8> = method14(v16232)
                                                let v16238 : string = "std::string::String::from_utf8($0)"
                                                let v16239 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v16237 v16238 
                                                let v16240 : string = "$0.unwrap()"
                                                let v16241 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16239 v16240 
                                                let v16242 : string = "fable_library_rust::String_::fromString($0)"
                                                let v16243 : string = Fable.Core.RustInterop.emitRustExpr v16241 v16242 
                                                let _v16211 = v16243 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v16244 : string = null |> unbox<string>
                                                let _v16211 = v16244 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v16247 : string = null |> unbox<string>
                                                let _v16211 = v16247 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v16250 : string = null |> unbox<string>
                                                let _v16211 = v16250 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v16253 : string = null |> unbox<string>
                                                let _v16211 = v16253 
                                                #endif
#else
                                                let v16256 : string = v15540 |> System.IO.File.ReadAllText
                                                let _v16211 = v16256 
                                                #endif
                                                let v16257 : string = _v16211 
                                                let v16262 : string = "// spiral_builder.process_typescript"
                                                let v16263 : bool = v16257.Contains v16262 
                                                let v16301 : string =
                                                    if v16263 then
                                                        v16257
                                                    else
                                                        let v16266 : string = $"\"./fable_modules/fable-library-ts.{v14104}/"
                                                        let v16267 : string = $"\"{v13928}/lib/typescript/fable/fable_modules/fable-library-ts.{v14104}/"
                                                        let v16268 : string = v16257.Replace (v16266, v16267)
                                                        let v16269 : string = "\\s\\sdefaultOf\\(\\);"
                                                        let v16270 : string = " defaultOf::<()>();"
                                                        let v16271 : unit = ()
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v16272 : string = $"regex::Regex::new(&$0)"
                                                        let v16273 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v16269 v16272 
                                                        let v16274 : string = "$0.unwrap()"
                                                        let v16275 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v16273 v16274 
                                                        let v16276 : string = method86(v16268)
                                                        let v16277 : string = $"$0.replace_all(&*$1, &*$2)"
                                                        let v16278 : std_borrow_Cow<Str> = Fable.Core.RustInterop.emitRustExpr struct (v16275, v16276, v16270) v16277 
                                                        let v16279 : string = "String::from($0)"
                                                        let v16280 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16278 v16279 
                                                        let v16281 : string = "fable_library_rust::String_::fromString($0)"
                                                        let v16282 : string = Fable.Core.RustInterop.emitRustExpr v16280 v16281 
                                                        let _v16271 = v16282 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v16283 : string = null |> unbox<string>
                                                        let _v16271 = v16283 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v16286 : string = null |> unbox<string>
                                                        let _v16271 = v16286 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v16289 : string = null |> unbox<string>
                                                        let _v16271 = v16289 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v16292 : string = null |> unbox<string>
                                                        let _v16271 = v16292 
                                                        #endif
#else
                                                        let v16295 : string = System.Text.RegularExpressions.Regex.Replace (v16268, v16269, v16270)
                                                        let _v16271 = v16295 
                                                        #endif
                                                        let v16296 : string = _v16271 
                                                        v16296
                                                let v16302 : bool = v16263 = false
                                                if v16302 then
                                                    let v16303 : string = $"{v16301}\n\n{v16262}\n"
                                                    method25(v15540, v16303)
                                                let v16304 : string = $"bun run \"{v15540}\""
                                                let v16305 : string = "PATH"
                                                let v16306 : string = method3(v16305)
                                                let v16307 : bool = v16306 = ""
                                                let v16339 : US1 =
                                                    if v16307 then
                                                        US1_1
                                                    else
                                                        let v16309 : unit = ()
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v16310 : string = "cfg!(windows)"
                                                        let v16311 : bool = Fable.Core.RustInterop.emitRustExpr () v16310 
                                                        let _v16309 = v16311 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v16312 : string = "cfg!(windows)"
                                                        let v16313 : bool = Fable.Core.RustInterop.emitRustExpr () v16312 
                                                        let _v16309 = v16313 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v16314 : string = "cfg!(windows)"
                                                        let v16315 : bool = Fable.Core.RustInterop.emitRustExpr () v16314 
                                                        let _v16309 = v16315 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v16316 : US10 = US10_0
                                                        let v16317 : US11 = US11_3(v16316)
                                                        let v16318 : string = $"platform.is_windows / target: {v16317}"
                                                        let v16319 : bool = failwith<bool> v16318
                                                        let _v16309 = v16319 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v16320 : US10 = US10_0
                                                        let v16321 : US11 = US11_4(v16320)
                                                        let v16322 : string = $"platform.is_windows / target: {v16321}"
                                                        let v16323 : bool = failwith<bool> v16322
                                                        let _v16309 = v16323 
                                                        #endif
#else
                                                        let v16324 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                        let v16325 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                        let v16326 : bool = v16325 v16324
                                                        let _v16309 = v16326 
                                                        #endif
                                                        let v16327 : bool = _v16309 
                                                        let v16335 : string =
                                                            if v16327 then
                                                                let v16333 : string = ";"
                                                                v16333
                                                            else
                                                                let v16334 : string = ":"
                                                                v16334
                                                        let v16336 : string = "~/.bun/bin"
                                                        let v16337 : string = $"{v16336}{v16335}{v16306}"
                                                        US1_0(v16337)
                                                let v16345 : UH5 =
                                                    match v16339 with
                                                    | US1_1 -> (* None *)
                                                        UH5_0
                                                    | US1_0(v16340) -> (* Some *)
                                                        let v16341 : UH5 = UH5_0
                                                        UH5_1(v16305, v16340, v16341)
                                                let v16346 : string = "TRACE_LEVEL"
                                                let v16347 : string = "Verbose"
                                                let v16348 : UH5 = UH5_0
                                                let v16349 : UH5 = UH5_1(v16346, v16347, v16348)
                                                let v16350 : UH5 = method120(v16345, v16349)
                                                let v16351 : struct (string * string) list = []
                                                let v16352 : struct (string * string) list = method121(v16350, v16351)
                                                let v16353 : (struct (string * string) list -> (struct (string * string) [])) = List.toArray
                                                let v16354 : (struct (string * string) []) = v16353 v16352
                                                let v16357 : System.Threading.CancellationToken option = None
                                                let v16358 : (struct (string * string) []) = [||]
                                                let v16359 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                let v16360 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                let v16361 : string option = None
                                                let v16367 : Result<string, string> =
                                                    match v13914 with
                                                    | US12_1(v16364) -> (* Error *)
                                                        let v16365 : Result<string, string> = Error v16364 
                                                        v16365
                                                    | US12_0(v16362) -> (* Ok *)
                                                        let v16363 : Result<string, string> = Ok v16362 
                                                        v16363
                                                let v16368 : string = "v16367.ok()"
                                                let v16369 : string option = Fable.Core.RustInterop.emitRustExpr () v16368 
                                                let v16370 : bool = true
                                                let struct (v16371 : int32, v16372 : string) = method40(v16304, v16357, v16354, v16359, v16360, v16370, v16369)
                                                let v16373 : int32 = v16354.Length
                                                let v16374 : (string []) = Array.zeroCreate<string> (v16373)
                                                let v16375 : Mut5 = {l0 = 0} : Mut5
                                                while method43(v16373, v16375) do
                                                    let v16377 : int32 = v16375.l0
                                                    let struct (v16378 : string, v16379 : string) = v16354.[int v16377]
                                                    let v16380 : string = $"$env:{v16378}=''{v16379}''"
                                                    v16374.[int v16377] <- v16380
                                                    let v16381 : int32 = v16377 + 1
                                                    v16375.l0 <- v16381
                                                    ()
                                                let v16382 : string seq = v16374 |> Seq.ofArray
                                                let v16385 : (string -> (string seq -> string)) = String.concat
                                                let v16386 : string = ";"
                                                let v16387 : (string seq -> string) = v16385 v16386
                                                let v16388 : string = v16387 v16382
                                                let v16391 : string = $"pwsh -c '{v16388}; {v16304}'"
                                                let v16392 : bool = v16371 = 0
                                                let struct (v17150 : US1, v17151 : US1, v17152 : US1) =
                                                    if v16392 then
                                                        let v16393 : (string -> US1) = closure43()
                                                        let v16394 : (unit -> string) = closure78(v16372)
                                                        let v16395 : (exn -> US1) = closure79(v15540, v16372, v16391)
                                                        let v16396 : US1 = US1_1
                                                        let result = ref v16396
                                                        try
                                                            result.Value <- v16394 () |> v16393 
                                                        with ex ->
                                                            result.Value <- v16395 ex 
                                                        let v16397 : US1 = result.Value
                                                        let v16407 : string option =
                                                            match v16397 with
                                                            | US1_1 -> (* None *)
                                                                let v16405 : string option = None
                                                                v16405
                                                            | US1_0(v16401) -> (* Some *)
                                                                let v16402 : string option = Some v16401 
                                                                v16402
                                                        let v16408 : string = "$0.unwrap()"
                                                        let v16409 : string = Fable.Core.RustInterop.emitRustExpr v16407 v16408 
                                                        let v16410 : US1 = US1_0(v12524)
                                                        let v16411 : US1 = US1_0(v16301)
                                                        let v16412 : US1 = US1_0(v16409)
                                                        struct (v16410, v16411, v16412)
                                                    else
                                                        let v16413 : bool = State.trace_state.IsNone
                                                        if v16413 then
                                                            let v16414 : US0 = US0_0
                                                            let struct (v16415 : Mut0, v16416 : Mut1, v16417 : Mut2, v16418 : Mut3, v16419 : int64 option) = method1(v16414)
                                                            let v16420 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v16415, v16416, v16417, v16418, v16419) 
                                                            State.trace_state <- v16420 
                                                            ()
                                                        let struct (v16425 : Mut0, v16426 : Mut1, v16427 : Mut2, v16428 : Mut3, v16429 : int64 option) = State.trace_state.Value
                                                        let v16440 : bool = State.trace_state.IsNone
                                                        if v16440 then
                                                            let v16441 : US0 = US0_0
                                                            let struct (v16442 : Mut0, v16443 : Mut1, v16444 : Mut2, v16445 : Mut3, v16446 : int64 option) = method1(v16441)
                                                            let v16447 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v16442, v16443, v16444, v16445, v16446) 
                                                            State.trace_state <- v16447 
                                                            ()
                                                        let struct (v16452 : Mut0, v16453 : Mut1, v16454 : Mut2, v16455 : Mut3, v16456 : int64 option) = State.trace_state.Value
                                                        let v16467 : US0 = v16455.l0
                                                        let v16468 : bool = v16454.l0
                                                        let v16469 : bool = v16468 = false
                                                        let v16472 : bool =
                                                            if v16469 then
                                                                false
                                                            else
                                                                let v16470 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v16467
                                                                let v16471 : bool = 4 >= v16470
                                                                v16471
                                                        if v16472 then
                                                            let v16473 : int64 = v16425.l0
                                                            let v16474 : int64 = v16473 + 1L
                                                            v16425.l0 <- v16474
                                                            let v16475 : bool = State.trace_state.IsNone
                                                            if v16475 then
                                                                let v16476 : US0 = US0_0
                                                                let struct (v16477 : Mut0, v16478 : Mut1, v16479 : Mut2, v16480 : Mut3, v16481 : int64 option) = method1(v16476)
                                                                let v16482 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v16477, v16478, v16479, v16480, v16481) 
                                                                State.trace_state <- v16482 
                                                                ()
                                                            let struct (v16487 : Mut0, v16488 : Mut1, v16489 : Mut2, v16490 : Mut3, v16491 : int64 option) = State.trace_state.Value
                                                            let v16502 : unit = ()
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v16503 : US3 option = None
                                                            let _v16503 = ref v16503 
                                                            match v16491 with
                                                            | Some x -> (
                                                            (fun () ->
                                                            (fun () ->
                                                            let v16504 : int64 = x
                                                            let v16505 : US3 = US3_0(v16504)
                                                            v16505 
                                                            )
                                                            |> fun x -> x () |> Some
                                                            ) () ) | None -> None
                                                            |> fun x -> _v16503.Value <- x
                                                            let v16506 : US3 option = _v16503.Value 
                                                            let v16517 : US3 = US3_1
                                                            let v16518 : US3 = v16506 |> Option.defaultValue v16517 
                                                            let v16558 : System.DateTime =
                                                                match v16518 with
                                                                | US3_1 -> (* None *)
                                                                    let v16554 : System.DateTime = System.DateTime.Now
                                                                    v16554
                                                                | US3_0(v16522) -> (* Some *)
                                                                    let v16523 : System.DateTime = System.DateTime.Now
                                                                    let v16526 : (System.DateTime -> int64) = _.Ticks
                                                                    let v16527 : int64 = v16526 v16523
                                                                    let v16530 : int64 = v16527 - v16522
                                                                    let v16531 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                    let v16532 : System.TimeSpan = v16531 v16530
                                                                    let v16535 : (System.TimeSpan -> int32) = _.Hours
                                                                    let v16536 : int32 = v16535 v16532
                                                                    let v16539 : (System.TimeSpan -> int32) = _.Minutes
                                                                    let v16540 : int32 = v16539 v16532
                                                                    let v16543 : (System.TimeSpan -> int32) = _.Seconds
                                                                    let v16544 : int32 = v16543 v16532
                                                                    let v16547 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                    let v16548 : int32 = v16547 v16532
                                                                    let v16551 : System.DateTime = System.DateTime (1, 1, 1, v16536, v16540, v16544, v16548)
                                                                    v16551
                                                            let v16559 : string = method6()
                                                            let v16562 : (string -> string) = v16558.ToString
                                                            let v16563 : string = v16562 v16559
                                                            let _v16502 = v16563 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v16566 : US3 option = None
                                                            let _v16566 = ref v16566 
                                                            match v16491 with
                                                            | Some x -> (
                                                            (fun () ->
                                                            (fun () ->
                                                            let v16567 : int64 = x
                                                            let v16568 : US3 = US3_0(v16567)
                                                            v16568 
                                                            )
                                                            |> fun x -> x () |> Some
                                                            ) () ) | None -> None
                                                            |> fun x -> _v16566.Value <- x
                                                            let v16569 : US3 option = _v16566.Value 
                                                            let v16580 : US3 = US3_1
                                                            let v16581 : US3 = v16569 |> Option.defaultValue v16580 
                                                            let v16621 : System.DateTime =
                                                                match v16581 with
                                                                | US3_1 -> (* None *)
                                                                    let v16617 : System.DateTime = System.DateTime.Now
                                                                    v16617
                                                                | US3_0(v16585) -> (* Some *)
                                                                    let v16586 : System.DateTime = System.DateTime.Now
                                                                    let v16589 : (System.DateTime -> int64) = _.Ticks
                                                                    let v16590 : int64 = v16589 v16586
                                                                    let v16593 : int64 = v16590 - v16585
                                                                    let v16594 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                    let v16595 : System.TimeSpan = v16594 v16593
                                                                    let v16598 : (System.TimeSpan -> int32) = _.Hours
                                                                    let v16599 : int32 = v16598 v16595
                                                                    let v16602 : (System.TimeSpan -> int32) = _.Minutes
                                                                    let v16603 : int32 = v16602 v16595
                                                                    let v16606 : (System.TimeSpan -> int32) = _.Seconds
                                                                    let v16607 : int32 = v16606 v16595
                                                                    let v16610 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                    let v16611 : int32 = v16610 v16595
                                                                    let v16614 : System.DateTime = System.DateTime (1, 1, 1, v16599, v16603, v16607, v16611)
                                                                    v16614
                                                            let v16622 : string = method6()
                                                            let v16625 : (string -> string) = v16621.ToString
                                                            let v16626 : string = v16625 v16622
                                                            let _v16502 = v16626 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v16629 : string = $"near_sdk::env::block_timestamp()"
                                                            let v16630 : uint64 = Fable.Core.RustInterop.emitRustExpr () v16629 
                                                            let v16631 : US3 option = None
                                                            let _v16631 = ref v16631 
                                                            match v16491 with
                                                            | Some x -> (
                                                            (fun () ->
                                                            (fun () ->
                                                            let v16632 : int64 = x
                                                            let v16633 : US3 = US3_0(v16632)
                                                            v16633 
                                                            )
                                                            |> fun x -> x () |> Some
                                                            ) () ) | None -> None
                                                            |> fun x -> _v16631.Value <- x
                                                            let v16634 : US3 option = _v16631.Value 
                                                            let v16645 : US3 = US3_1
                                                            let v16646 : US3 = v16634 |> Option.defaultValue v16645 
                                                            let v16655 : uint64 =
                                                                match v16646 with
                                                                | US3_1 -> (* None *)
                                                                    v16630
                                                                | US3_0(v16650) -> (* Some *)
                                                                    let v16651 : (int64 -> uint64) = uint64
                                                                    let v16652 : uint64 = v16651 v16650
                                                                    let v16653 : uint64 = v16630 - v16652
                                                                    v16653
                                                            let v16656 : uint64 = v16655 / 1000000000UL
                                                            let v16657 : uint64 = v16656 % 60UL
                                                            let v16658 : uint64 = v16656 / 60UL
                                                            let v16659 : uint64 = v16658 % 60UL
                                                            let v16660 : uint64 = v16656 / 3600UL
                                                            let v16661 : uint64 = v16660 % 24UL
                                                            let v16662 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
                                                            let v16663 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v16661, v16659, v16657) v16662 
                                                            let v16664 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v16665 : string = Fable.Core.RustInterop.emitRustExpr v16663 v16664 
                                                            let _v16502 = v16665 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v16666 : US3 option = None
                                                            let _v16666 = ref v16666 
                                                            match v16491 with
                                                            | Some x -> (
                                                            (fun () ->
                                                            (fun () ->
                                                            let v16667 : int64 = x
                                                            let v16668 : US3 = US3_0(v16667)
                                                            v16668 
                                                            )
                                                            |> fun x -> x () |> Some
                                                            ) () ) | None -> None
                                                            |> fun x -> _v16666.Value <- x
                                                            let v16669 : US3 option = _v16666.Value 
                                                            let v16680 : US3 = US3_1
                                                            let v16681 : US3 = v16669 |> Option.defaultValue v16680 
                                                            let v16721 : System.DateTime =
                                                                match v16681 with
                                                                | US3_1 -> (* None *)
                                                                    let v16717 : System.DateTime = System.DateTime.Now
                                                                    v16717
                                                                | US3_0(v16685) -> (* Some *)
                                                                    let v16686 : System.DateTime = System.DateTime.Now
                                                                    let v16689 : (System.DateTime -> int64) = _.Ticks
                                                                    let v16690 : int64 = v16689 v16686
                                                                    let v16693 : int64 = v16690 - v16685
                                                                    let v16694 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                    let v16695 : System.TimeSpan = v16694 v16693
                                                                    let v16698 : (System.TimeSpan -> int32) = _.Hours
                                                                    let v16699 : int32 = v16698 v16695
                                                                    let v16702 : (System.TimeSpan -> int32) = _.Minutes
                                                                    let v16703 : int32 = v16702 v16695
                                                                    let v16706 : (System.TimeSpan -> int32) = _.Seconds
                                                                    let v16707 : int32 = v16706 v16695
                                                                    let v16710 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                    let v16711 : int32 = v16710 v16695
                                                                    let v16714 : System.DateTime = System.DateTime (1, 1, 1, v16699, v16703, v16707, v16711)
                                                                    v16714
                                                            let v16722 : string = method7()
                                                            let v16725 : (string -> string) = v16721.ToString
                                                            let v16726 : string = v16725 v16722
                                                            let _v16502 = v16726 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v16729 : US3 option = None
                                                            let _v16729 = ref v16729 
                                                            match v16491 with
                                                            | Some x -> (
                                                            (fun () ->
                                                            (fun () ->
                                                            let v16730 : int64 = x
                                                            let v16731 : US3 = US3_0(v16730)
                                                            v16731 
                                                            )
                                                            |> fun x -> x () |> Some
                                                            ) () ) | None -> None
                                                            |> fun x -> _v16729.Value <- x
                                                            let v16732 : US3 option = _v16729.Value 
                                                            let v16743 : US3 = US3_1
                                                            let v16744 : US3 = v16732 |> Option.defaultValue v16743 
                                                            let v16784 : System.DateTime =
                                                                match v16744 with
                                                                | US3_1 -> (* None *)
                                                                    let v16780 : System.DateTime = System.DateTime.Now
                                                                    v16780
                                                                | US3_0(v16748) -> (* Some *)
                                                                    let v16749 : System.DateTime = System.DateTime.Now
                                                                    let v16752 : (System.DateTime -> int64) = _.Ticks
                                                                    let v16753 : int64 = v16752 v16749
                                                                    let v16756 : int64 = v16753 - v16748
                                                                    let v16757 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                    let v16758 : System.TimeSpan = v16757 v16756
                                                                    let v16761 : (System.TimeSpan -> int32) = _.Hours
                                                                    let v16762 : int32 = v16761 v16758
                                                                    let v16765 : (System.TimeSpan -> int32) = _.Minutes
                                                                    let v16766 : int32 = v16765 v16758
                                                                    let v16769 : (System.TimeSpan -> int32) = _.Seconds
                                                                    let v16770 : int32 = v16769 v16758
                                                                    let v16773 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                    let v16774 : int32 = v16773 v16758
                                                                    let v16777 : System.DateTime = System.DateTime (1, 1, 1, v16762, v16766, v16770, v16774)
                                                                    v16777
                                                            let v16785 : string = method7()
                                                            let v16788 : (string -> string) = v16784.ToString
                                                            let v16789 : string = v16788 v16785
                                                            let _v16502 = v16789 
                                                            #endif
#else
                                                            let v16792 : US3 option = None
                                                            let _v16792 = ref v16792 
                                                            match v16491 with
                                                            | Some x -> (
                                                            (fun () ->
                                                            (fun () ->
                                                            let v16793 : int64 = x
                                                            let v16794 : US3 = US3_0(v16793)
                                                            v16794 
                                                            )
                                                            |> fun x -> x () |> Some
                                                            ) () ) | None -> None
                                                            |> fun x -> _v16792.Value <- x
                                                            let v16795 : US3 option = _v16792.Value 
                                                            let v16806 : US3 = US3_1
                                                            let v16807 : US3 = v16795 |> Option.defaultValue v16806 
                                                            let v16847 : System.DateTime =
                                                                match v16807 with
                                                                | US3_1 -> (* None *)
                                                                    let v16843 : System.DateTime = System.DateTime.Now
                                                                    v16843
                                                                | US3_0(v16811) -> (* Some *)
                                                                    let v16812 : System.DateTime = System.DateTime.Now
                                                                    let v16815 : (System.DateTime -> int64) = _.Ticks
                                                                    let v16816 : int64 = v16815 v16812
                                                                    let v16819 : int64 = v16816 - v16811
                                                                    let v16820 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                    let v16821 : System.TimeSpan = v16820 v16819
                                                                    let v16824 : (System.TimeSpan -> int32) = _.Hours
                                                                    let v16825 : int32 = v16824 v16821
                                                                    let v16828 : (System.TimeSpan -> int32) = _.Minutes
                                                                    let v16829 : int32 = v16828 v16821
                                                                    let v16832 : (System.TimeSpan -> int32) = _.Seconds
                                                                    let v16833 : int32 = v16832 v16821
                                                                    let v16836 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                    let v16837 : int32 = v16836 v16821
                                                                    let v16840 : System.DateTime = System.DateTime (1, 1, 1, v16825, v16829, v16833, v16837)
                                                                    v16840
                                                            let v16848 : string = method7()
                                                            let v16851 : (string -> string) = v16847.ToString
                                                            let v16852 : string = v16851 v16848
                                                            let _v16502 = v16852 
                                                            #endif
                                                            let v16855 : string = _v16502 
                                                            let v16920 : string = "Critical"
                                                            let v16921 : (unit -> string) = v16920.ToLower
                                                            let v16922 : string = v16921 ()
                                                            let v16925 : string = v16922.PadLeft (7, ' ')
                                                            let v16939 : unit = ()
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v16940 : string = "inline_colorization::color_bright_red"
                                                            let v16941 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v16940 
                                                            let v16942 : string = "&*$0"
                                                            let v16943 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v16925 v16942 
                                                            let v16944 : string = "inline_colorization::color_reset"
                                                            let v16945 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v16944 
                                                            let v16946 : string = "\"{v16941}{v16943}{v16945}\""
                                                            let v16947 : string = @$"format!(" + v16946 + ")"
                                                            let v16948 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v16947 
                                                            let v16949 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v16950 : string = Fable.Core.RustInterop.emitRustExpr v16948 v16949 
                                                            let _v16939 = v16950 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v16951 : string = "inline_colorization::color_bright_red"
                                                            let v16952 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v16951 
                                                            let v16953 : string = "&*$0"
                                                            let v16954 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v16925 v16953 
                                                            let v16955 : string = "inline_colorization::color_reset"
                                                            let v16956 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v16955 
                                                            let v16957 : string = "\"{v16952}{v16954}{v16956}\""
                                                            let v16958 : string = @$"format!(" + v16957 + ")"
                                                            let v16959 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v16958 
                                                            let v16960 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v16961 : string = Fable.Core.RustInterop.emitRustExpr v16959 v16960 
                                                            let _v16939 = v16961 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v16962 : string = "inline_colorization::color_bright_red"
                                                            let v16963 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v16962 
                                                            let v16964 : string = "&*$0"
                                                            let v16965 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v16925 v16964 
                                                            let v16966 : string = "inline_colorization::color_reset"
                                                            let v16967 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v16966 
                                                            let v16968 : string = "\"{v16963}{v16965}{v16967}\""
                                                            let v16969 : string = @$"format!(" + v16968 + ")"
                                                            let v16970 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v16969 
                                                            let v16971 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v16972 : string = Fable.Core.RustInterop.emitRustExpr v16970 v16971 
                                                            let _v16939 = v16972 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v16973 : string = "\u001b[91m"
                                                            let v16974 : string = method8()
                                                            let v16975 : string = v16973 + v16925 
                                                            let v16976 : string = v16975 + v16974 
                                                            let _v16939 = v16976 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v16977 : string = "\u001b[91m"
                                                            let v16978 : string = method8()
                                                            let v16979 : string = v16977 + v16925 
                                                            let v16980 : string = v16979 + v16978 
                                                            let _v16939 = v16980 
                                                            #endif
#else
                                                            let v16981 : string = "\u001b[91m"
                                                            let v16982 : string = method8()
                                                            let v16983 : string = v16981 + v16925 
                                                            let v16984 : string = v16983 + v16982 
                                                            let _v16939 = v16984 
                                                            #endif
                                                            let v16985 : string = _v16939 
                                                            let v16991 : int64 = v16487.l0
                                                            let v16992 : string = method9()
                                                            let v16993 : Mut4 = {l0 = v16992} : Mut4
                                                            let v16994 : string = "{ "
                                                            let v16995 : string = $"{v16994}"
                                                            let v16998 : string = v16993.l0
                                                            let v16999 : string = v16998 + v16995 
                                                            v16993.l0 <- v16999
                                                            let v17000 : string = "exit_code"
                                                            let v17001 : string = $"{v17000}"
                                                            let v17004 : string = v16993.l0
                                                            let v17005 : string = v17004 + v17001 
                                                            v16993.l0 <- v17005
                                                            let v17006 : string = " = "
                                                            let v17007 : string = $"{v17006}"
                                                            let v17010 : string = v16993.l0
                                                            let v17011 : string = v17010 + v17007 
                                                            v16993.l0 <- v17011
                                                            let v17012 : string = $"{v16371}"
                                                            let v17015 : string = v16993.l0
                                                            let v17016 : string = v17015 + v17012 
                                                            v16993.l0 <- v17016
                                                            let v17017 : string = "; "
                                                            let v17018 : string = $"{v17017}"
                                                            let v17021 : string = v16993.l0
                                                            let v17022 : string = v17021 + v17018 
                                                            v16993.l0 <- v17022
                                                            let v17023 : string = "run_result"
                                                            let v17024 : string = $"{v17023}"
                                                            let v17027 : string = v16993.l0
                                                            let v17028 : string = v17027 + v17024 
                                                            v16993.l0 <- v17028
                                                            let v17029 : string = $"{v17006}"
                                                            let v17032 : string = v16993.l0
                                                            let v17033 : string = v17032 + v17029 
                                                            v16993.l0 <- v17033
                                                            let v17034 : string = $"{v16372}"
                                                            let v17037 : string = v16993.l0
                                                            let v17038 : string = v17037 + v17034 
                                                            v16993.l0 <- v17038
                                                            let v17039 : string = $"{v17017}"
                                                            let v17042 : string = v16993.l0
                                                            let v17043 : string = v17042 + v17039 
                                                            v16993.l0 <- v17043
                                                            let v17044 : string = "new_code_path"
                                                            let v17045 : string = $"{v17044}"
                                                            let v17048 : string = v16993.l0
                                                            let v17049 : string = v17048 + v17045 
                                                            v16993.l0 <- v17049
                                                            let v17050 : string = $"{v17006}"
                                                            let v17053 : string = v16993.l0
                                                            let v17054 : string = v17053 + v17050 
                                                            v16993.l0 <- v17054
                                                            let v17055 : string = $"{v15540}"
                                                            let v17058 : string = v16993.l0
                                                            let v17059 : string = v17058 + v17055 
                                                            v16993.l0 <- v17059
                                                            let v17060 : string = $"{v17017}"
                                                            let v17063 : string = v16993.l0
                                                            let v17064 : string = v17063 + v17060 
                                                            v16993.l0 <- v17064
                                                            let v17065 : string = "external_command"
                                                            let v17066 : string = $"{v17065}"
                                                            let v17069 : string = v16993.l0
                                                            let v17070 : string = v17069 + v17066 
                                                            v16993.l0 <- v17070
                                                            let v17071 : string = $"{v17006}"
                                                            let v17074 : string = v16993.l0
                                                            let v17075 : string = v17074 + v17071 
                                                            v16993.l0 <- v17075
                                                            let v17076 : string = $"{v16391}"
                                                            let v17079 : string = v16993.l0
                                                            let v17080 : string = v17079 + v17076 
                                                            v16993.l0 <- v17080
                                                            let v17081 : string = " }"
                                                            let v17082 : string = $"{v17081}"
                                                            let v17085 : string = v16993.l0
                                                            let v17086 : string = v17085 + v17082 
                                                            v16993.l0 <- v17086
                                                            let v17087 : string = v16993.l0
                                                            let v17088 : (unit -> string) = closure81()
                                                            let v17089 : string = $"{v16855} {v16985} #{v16991} %s{v17088 ()} / {v17087}"
                                                            let v17092 : char list = []
                                                            let v17093 : (char list -> (char [])) = List.toArray
                                                            let v17094 : (char []) = v17093 v17092
                                                            let v17097 : string = v17089.TrimStart v17094 
                                                            let v17114 : char list = []
                                                            let v17115 : char list = '/' :: v17114 
                                                            let v17118 : char list = ' ' :: v17115 
                                                            let v17121 : (char list -> (char [])) = List.toArray
                                                            let v17122 : (char []) = v17121 v17118
                                                            let v17125 : string = v17097.TrimEnd v17122 
                                                            let v17142 : unit = ()
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v17143 : string = @"println!(""{}"", $0)"
                                                            Fable.Core.RustInterop.emitRustExpr v17125 v17143 
                                                            let _v17142 = () 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v17144 : string = @"println!(""{}"", $0)"
                                                            Fable.Core.RustInterop.emitRustExpr v17125 v17144 
                                                            let _v17142 = () 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v17145 : string = $"near_sdk::log!(\"{{}}\", $0)"
                                                            Fable.Core.RustInterop.emitRustExpr v17125 v17145 
                                                            let _v17142 = () 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            System.Console.WriteLine v17125 
                                                            let _v17142 = () 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            System.Console.WriteLine v17125 
                                                            let _v17142 = () 
                                                            #endif
#else
                                                            System.Console.WriteLine v17125 
                                                            let _v17142 = () 
                                                            #endif
                                                            _v17142 
                                                            let v17146 : (string -> unit) = v16426.l0
                                                            v17146 v17125
                                                        let v17147 : US1 = US1_0(v12524)
                                                        let v17148 : US1 = US1_1
                                                        let v17149 : US1 = US1_1
                                                        struct (v17147, v17148, v17149)
                                                struct (v17150, v17151, v17152)
                                        struct (v17153, v17154, v17155)
                                    else
                                        let v17156 : string = "fable_library_rust::String_::fromString($0)"
                                        let v17157 : string = Fable.Core.RustInterop.emitRustExpr v27 v17156 
                                        let v17158 : bool = v17157 = "python"
                                        let struct (v21892 : US1, v21893 : US1, v21894 : US1) =
                                            if v17158 then
                                                let v17159 : string = method79()
                                                let v17160 : string = "&*$0"
                                                let v17161 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v17159 v17160 
                                                let v17162 : string = "clap::ArgMatches::get_one(&$0, v17161).cloned()"
                                                let v17163 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v28 v17162 
                                                let v17164 : US5 option = None
                                                let _v17164 = ref v17164 
                                                match v17163 with
                                                | Some x -> (
                                                (fun () ->
                                                (fun () ->
                                                let v17165 : std_string_String = x
                                                let v17166 : US5 = US5_0(v17165)
                                                v17166 
                                                )
                                                |> fun x -> x () |> Some
                                                ) () ) | None -> None
                                                |> fun x -> _v17164.Value <- x
                                                let v17167 : US5 option = _v17164.Value 
                                                let v17178 : US5 = US5_1
                                                let v17179 : US5 = v17167 |> Option.defaultValue v17178 
                                                let v17186 : std_string_String =
                                                    match v17179 with
                                                    | US5_1 -> (* None *)
                                                        failwith<std_string_String> "Option does not have a value."
                                                    | US5_0(v17183) -> (* Some *)
                                                        v17183
                                                let v17187 : string = "fable_library_rust::String_::fromString($0)"
                                                let v17188 : string = Fable.Core.RustInterop.emitRustExpr v17186 v17187 
                                                let v17189 : string = method13()
                                                let v17190 : string = "&*$0"
                                                let v17191 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v17189 v17190 
                                                let v17192 : string = "clap::ArgMatches::get_many(&$0, v17191).map(|x| x.cloned().into_iter().collect())"
                                                let v17193 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr v28 v17192 
                                                let v17194 : US9 option = None
                                                let _v17194 = ref v17194 
                                                match v17193 with
                                                | Some x -> (
                                                (fun () ->
                                                (fun () ->
                                                let v17195 : Vec<std_string_String> = x
                                                let v17196 : US9 = US9_0(v17195)
                                                v17196 
                                                )
                                                |> fun x -> x () |> Some
                                                ) () ) | None -> None
                                                |> fun x -> _v17194.Value <- x
                                                let v17197 : US9 option = _v17194.Value 
                                                let v17208 : US9 = US9_1
                                                let v17209 : US9 = v17197 |> Option.defaultValue v17208 
                                                let v17213 : (std_string_String []) = [||]
                                                let v17214 : string = "$0.to_vec()"
                                                let v17215 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v17213 v17214 
                                                let v17218 : Vec<std_string_String> =
                                                    match v17209 with
                                                    | US9_1 -> (* None *)
                                                        v17215
                                                    | US9_0(v17216) -> (* Some *)
                                                        v17216
                                                let v17219 : bool =
                                                    match v0 with
                                                    | US0_0 -> (* Verbose *)
                                                        true
                                                    | _ ->
                                                        false
                                                let v17220 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v17221 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v17222 : string = "std::fs::read(&*$0)"
                                                let v17223 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v17188 v17222 
                                                let v17224 : string = "$0.unwrap()"
                                                let v17225 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v17223 v17224 
                                                let _v17221 = v17225 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v17226 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v17221 = v17226 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v17229 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v17221 = v17229 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v17232 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v17221 = v17232 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v17235 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v17221 = v17235 
                                                #endif
#else
                                                let v17238 : (uint8 []) = v17188 |> System.IO.File.ReadAllBytes
                                                let v17239 : string = "$0.to_vec()"
                                                let v17240 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v17238 v17239 
                                                let _v17221 = v17240 
                                                #endif
                                                let v17241 : Vec<uint8> = _v17221 
                                                let v17246 : Vec<uint8> = method14(v17241)
                                                let v17247 : string = "std::string::String::from_utf8($0)"
                                                let v17248 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v17246 v17247 
                                                let v17249 : string = "$0.unwrap()"
                                                let v17250 : std_string_String = Fable.Core.RustInterop.emitRustExpr v17248 v17249 
                                                let v17251 : string = "fable_library_rust::String_::fromString($0)"
                                                let v17252 : string = Fable.Core.RustInterop.emitRustExpr v17250 v17251 
                                                let _v17220 = v17252 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v17253 : string = null |> unbox<string>
                                                let _v17220 = v17253 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v17256 : string = null |> unbox<string>
                                                let _v17220 = v17256 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v17259 : string = null |> unbox<string>
                                                let _v17220 = v17259 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v17262 : string = null |> unbox<string>
                                                let _v17220 = v17262 
                                                #endif
#else
                                                let v17265 : string = v17188 |> System.IO.File.ReadAllText
                                                let _v17220 = v17265 
                                                #endif
                                                let v17266 : string = _v17220 
                                                let v17271 : string = "py"
                                                let v17272 : string = $"%A{struct (v17271, v17266)}"
                                                let v17275 : string = method94(v17272)
                                                let v17276 : string = __SOURCE_DIRECTORY__
                                                let v17277 : string = "polyglot"
                                                let v17278 : string = ".devcontainer"
                                                let v17279 : string = method15(v17277, v17278)
                                                let v17280 : US12 = method18(v17279, v17276)
                                                let v17958 : US1 =
                                                    match v17280 with
                                                    | US12_1(v17283) -> (* Error *)
                                                        let v17284 : bool = State.trace_state.IsNone
                                                        if v17284 then
                                                            let v17285 : US0 = US0_0
                                                            let struct (v17286 : Mut0, v17287 : Mut1, v17288 : Mut2, v17289 : Mut3, v17290 : int64 option) = method1(v17285)
                                                            let v17291 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v17286, v17287, v17288, v17289, v17290) 
                                                            State.trace_state <- v17291 
                                                            ()
                                                        let struct (v17296 : Mut0, v17297 : Mut1, v17298 : Mut2, v17299 : Mut3, v17300 : int64 option) = State.trace_state.Value
                                                        let v17311 : bool = State.trace_state.IsNone
                                                        if v17311 then
                                                            let v17312 : US0 = US0_0
                                                            let struct (v17313 : Mut0, v17314 : Mut1, v17315 : Mut2, v17316 : Mut3, v17317 : int64 option) = method1(v17312)
                                                            let v17318 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v17313, v17314, v17315, v17316, v17317) 
                                                            State.trace_state <- v17318 
                                                            ()
                                                        let struct (v17323 : Mut0, v17324 : Mut1, v17325 : Mut2, v17326 : Mut3, v17327 : int64 option) = State.trace_state.Value
                                                        let v17338 : US0 = v17326.l0
                                                        let v17339 : bool = v17325.l0
                                                        let v17340 : bool = v17339 = false
                                                        let v17343 : bool =
                                                            if v17340 then
                                                                false
                                                            else
                                                                let v17341 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v17338
                                                                let v17342 : bool = 3 >= v17341
                                                                v17342
                                                        if v17343 then
                                                            let v17344 : int64 = v17296.l0
                                                            let v17345 : int64 = v17344 + 1L
                                                            v17296.l0 <- v17345
                                                            let v17346 : bool = State.trace_state.IsNone
                                                            if v17346 then
                                                                let v17347 : US0 = US0_0
                                                                let struct (v17348 : Mut0, v17349 : Mut1, v17350 : Mut2, v17351 : Mut3, v17352 : int64 option) = method1(v17347)
                                                                let v17353 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v17348, v17349, v17350, v17351, v17352) 
                                                                State.trace_state <- v17353 
                                                                ()
                                                            let struct (v17358 : Mut0, v17359 : Mut1, v17360 : Mut2, v17361 : Mut3, v17362 : int64 option) = State.trace_state.Value
                                                            let v17373 : unit = ()
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v17374 : US3 option = None
                                                            let _v17374 = ref v17374 
                                                            match v17362 with
                                                            | Some x -> (
                                                            (fun () ->
                                                            (fun () ->
                                                            let v17375 : int64 = x
                                                            let v17376 : US3 = US3_0(v17375)
                                                            v17376 
                                                            )
                                                            |> fun x -> x () |> Some
                                                            ) () ) | None -> None
                                                            |> fun x -> _v17374.Value <- x
                                                            let v17377 : US3 option = _v17374.Value 
                                                            let v17388 : US3 = US3_1
                                                            let v17389 : US3 = v17377 |> Option.defaultValue v17388 
                                                            let v17429 : System.DateTime =
                                                                match v17389 with
                                                                | US3_1 -> (* None *)
                                                                    let v17425 : System.DateTime = System.DateTime.Now
                                                                    v17425
                                                                | US3_0(v17393) -> (* Some *)
                                                                    let v17394 : System.DateTime = System.DateTime.Now
                                                                    let v17397 : (System.DateTime -> int64) = _.Ticks
                                                                    let v17398 : int64 = v17397 v17394
                                                                    let v17401 : int64 = v17398 - v17393
                                                                    let v17402 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                    let v17403 : System.TimeSpan = v17402 v17401
                                                                    let v17406 : (System.TimeSpan -> int32) = _.Hours
                                                                    let v17407 : int32 = v17406 v17403
                                                                    let v17410 : (System.TimeSpan -> int32) = _.Minutes
                                                                    let v17411 : int32 = v17410 v17403
                                                                    let v17414 : (System.TimeSpan -> int32) = _.Seconds
                                                                    let v17415 : int32 = v17414 v17403
                                                                    let v17418 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                    let v17419 : int32 = v17418 v17403
                                                                    let v17422 : System.DateTime = System.DateTime (1, 1, 1, v17407, v17411, v17415, v17419)
                                                                    v17422
                                                            let v17430 : string = method6()
                                                            let v17433 : (string -> string) = v17429.ToString
                                                            let v17434 : string = v17433 v17430
                                                            let _v17373 = v17434 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v17437 : US3 option = None
                                                            let _v17437 = ref v17437 
                                                            match v17362 with
                                                            | Some x -> (
                                                            (fun () ->
                                                            (fun () ->
                                                            let v17438 : int64 = x
                                                            let v17439 : US3 = US3_0(v17438)
                                                            v17439 
                                                            )
                                                            |> fun x -> x () |> Some
                                                            ) () ) | None -> None
                                                            |> fun x -> _v17437.Value <- x
                                                            let v17440 : US3 option = _v17437.Value 
                                                            let v17451 : US3 = US3_1
                                                            let v17452 : US3 = v17440 |> Option.defaultValue v17451 
                                                            let v17492 : System.DateTime =
                                                                match v17452 with
                                                                | US3_1 -> (* None *)
                                                                    let v17488 : System.DateTime = System.DateTime.Now
                                                                    v17488
                                                                | US3_0(v17456) -> (* Some *)
                                                                    let v17457 : System.DateTime = System.DateTime.Now
                                                                    let v17460 : (System.DateTime -> int64) = _.Ticks
                                                                    let v17461 : int64 = v17460 v17457
                                                                    let v17464 : int64 = v17461 - v17456
                                                                    let v17465 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                    let v17466 : System.TimeSpan = v17465 v17464
                                                                    let v17469 : (System.TimeSpan -> int32) = _.Hours
                                                                    let v17470 : int32 = v17469 v17466
                                                                    let v17473 : (System.TimeSpan -> int32) = _.Minutes
                                                                    let v17474 : int32 = v17473 v17466
                                                                    let v17477 : (System.TimeSpan -> int32) = _.Seconds
                                                                    let v17478 : int32 = v17477 v17466
                                                                    let v17481 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                    let v17482 : int32 = v17481 v17466
                                                                    let v17485 : System.DateTime = System.DateTime (1, 1, 1, v17470, v17474, v17478, v17482)
                                                                    v17485
                                                            let v17493 : string = method6()
                                                            let v17496 : (string -> string) = v17492.ToString
                                                            let v17497 : string = v17496 v17493
                                                            let _v17373 = v17497 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v17500 : string = $"near_sdk::env::block_timestamp()"
                                                            let v17501 : uint64 = Fable.Core.RustInterop.emitRustExpr () v17500 
                                                            let v17502 : US3 option = None
                                                            let _v17502 = ref v17502 
                                                            match v17362 with
                                                            | Some x -> (
                                                            (fun () ->
                                                            (fun () ->
                                                            let v17503 : int64 = x
                                                            let v17504 : US3 = US3_0(v17503)
                                                            v17504 
                                                            )
                                                            |> fun x -> x () |> Some
                                                            ) () ) | None -> None
                                                            |> fun x -> _v17502.Value <- x
                                                            let v17505 : US3 option = _v17502.Value 
                                                            let v17516 : US3 = US3_1
                                                            let v17517 : US3 = v17505 |> Option.defaultValue v17516 
                                                            let v17526 : uint64 =
                                                                match v17517 with
                                                                | US3_1 -> (* None *)
                                                                    v17501
                                                                | US3_0(v17521) -> (* Some *)
                                                                    let v17522 : (int64 -> uint64) = uint64
                                                                    let v17523 : uint64 = v17522 v17521
                                                                    let v17524 : uint64 = v17501 - v17523
                                                                    v17524
                                                            let v17527 : uint64 = v17526 / 1000000000UL
                                                            let v17528 : uint64 = v17527 % 60UL
                                                            let v17529 : uint64 = v17527 / 60UL
                                                            let v17530 : uint64 = v17529 % 60UL
                                                            let v17531 : uint64 = v17527 / 3600UL
                                                            let v17532 : uint64 = v17531 % 24UL
                                                            let v17533 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
                                                            let v17534 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v17532, v17530, v17528) v17533 
                                                            let v17535 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v17536 : string = Fable.Core.RustInterop.emitRustExpr v17534 v17535 
                                                            let _v17373 = v17536 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v17537 : US3 option = None
                                                            let _v17537 = ref v17537 
                                                            match v17362 with
                                                            | Some x -> (
                                                            (fun () ->
                                                            (fun () ->
                                                            let v17538 : int64 = x
                                                            let v17539 : US3 = US3_0(v17538)
                                                            v17539 
                                                            )
                                                            |> fun x -> x () |> Some
                                                            ) () ) | None -> None
                                                            |> fun x -> _v17537.Value <- x
                                                            let v17540 : US3 option = _v17537.Value 
                                                            let v17551 : US3 = US3_1
                                                            let v17552 : US3 = v17540 |> Option.defaultValue v17551 
                                                            let v17592 : System.DateTime =
                                                                match v17552 with
                                                                | US3_1 -> (* None *)
                                                                    let v17588 : System.DateTime = System.DateTime.Now
                                                                    v17588
                                                                | US3_0(v17556) -> (* Some *)
                                                                    let v17557 : System.DateTime = System.DateTime.Now
                                                                    let v17560 : (System.DateTime -> int64) = _.Ticks
                                                                    let v17561 : int64 = v17560 v17557
                                                                    let v17564 : int64 = v17561 - v17556
                                                                    let v17565 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                    let v17566 : System.TimeSpan = v17565 v17564
                                                                    let v17569 : (System.TimeSpan -> int32) = _.Hours
                                                                    let v17570 : int32 = v17569 v17566
                                                                    let v17573 : (System.TimeSpan -> int32) = _.Minutes
                                                                    let v17574 : int32 = v17573 v17566
                                                                    let v17577 : (System.TimeSpan -> int32) = _.Seconds
                                                                    let v17578 : int32 = v17577 v17566
                                                                    let v17581 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                    let v17582 : int32 = v17581 v17566
                                                                    let v17585 : System.DateTime = System.DateTime (1, 1, 1, v17570, v17574, v17578, v17582)
                                                                    v17585
                                                            let v17593 : string = method7()
                                                            let v17596 : (string -> string) = v17592.ToString
                                                            let v17597 : string = v17596 v17593
                                                            let _v17373 = v17597 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v17600 : US3 option = None
                                                            let _v17600 = ref v17600 
                                                            match v17362 with
                                                            | Some x -> (
                                                            (fun () ->
                                                            (fun () ->
                                                            let v17601 : int64 = x
                                                            let v17602 : US3 = US3_0(v17601)
                                                            v17602 
                                                            )
                                                            |> fun x -> x () |> Some
                                                            ) () ) | None -> None
                                                            |> fun x -> _v17600.Value <- x
                                                            let v17603 : US3 option = _v17600.Value 
                                                            let v17614 : US3 = US3_1
                                                            let v17615 : US3 = v17603 |> Option.defaultValue v17614 
                                                            let v17655 : System.DateTime =
                                                                match v17615 with
                                                                | US3_1 -> (* None *)
                                                                    let v17651 : System.DateTime = System.DateTime.Now
                                                                    v17651
                                                                | US3_0(v17619) -> (* Some *)
                                                                    let v17620 : System.DateTime = System.DateTime.Now
                                                                    let v17623 : (System.DateTime -> int64) = _.Ticks
                                                                    let v17624 : int64 = v17623 v17620
                                                                    let v17627 : int64 = v17624 - v17619
                                                                    let v17628 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                    let v17629 : System.TimeSpan = v17628 v17627
                                                                    let v17632 : (System.TimeSpan -> int32) = _.Hours
                                                                    let v17633 : int32 = v17632 v17629
                                                                    let v17636 : (System.TimeSpan -> int32) = _.Minutes
                                                                    let v17637 : int32 = v17636 v17629
                                                                    let v17640 : (System.TimeSpan -> int32) = _.Seconds
                                                                    let v17641 : int32 = v17640 v17629
                                                                    let v17644 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                    let v17645 : int32 = v17644 v17629
                                                                    let v17648 : System.DateTime = System.DateTime (1, 1, 1, v17633, v17637, v17641, v17645)
                                                                    v17648
                                                            let v17656 : string = method7()
                                                            let v17659 : (string -> string) = v17655.ToString
                                                            let v17660 : string = v17659 v17656
                                                            let _v17373 = v17660 
                                                            #endif
#else
                                                            let v17663 : US3 option = None
                                                            let _v17663 = ref v17663 
                                                            match v17362 with
                                                            | Some x -> (
                                                            (fun () ->
                                                            (fun () ->
                                                            let v17664 : int64 = x
                                                            let v17665 : US3 = US3_0(v17664)
                                                            v17665 
                                                            )
                                                            |> fun x -> x () |> Some
                                                            ) () ) | None -> None
                                                            |> fun x -> _v17663.Value <- x
                                                            let v17666 : US3 option = _v17663.Value 
                                                            let v17677 : US3 = US3_1
                                                            let v17678 : US3 = v17666 |> Option.defaultValue v17677 
                                                            let v17718 : System.DateTime =
                                                                match v17678 with
                                                                | US3_1 -> (* None *)
                                                                    let v17714 : System.DateTime = System.DateTime.Now
                                                                    v17714
                                                                | US3_0(v17682) -> (* Some *)
                                                                    let v17683 : System.DateTime = System.DateTime.Now
                                                                    let v17686 : (System.DateTime -> int64) = _.Ticks
                                                                    let v17687 : int64 = v17686 v17683
                                                                    let v17690 : int64 = v17687 - v17682
                                                                    let v17691 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                    let v17692 : System.TimeSpan = v17691 v17690
                                                                    let v17695 : (System.TimeSpan -> int32) = _.Hours
                                                                    let v17696 : int32 = v17695 v17692
                                                                    let v17699 : (System.TimeSpan -> int32) = _.Minutes
                                                                    let v17700 : int32 = v17699 v17692
                                                                    let v17703 : (System.TimeSpan -> int32) = _.Seconds
                                                                    let v17704 : int32 = v17703 v17692
                                                                    let v17707 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                    let v17708 : int32 = v17707 v17692
                                                                    let v17711 : System.DateTime = System.DateTime (1, 1, 1, v17696, v17700, v17704, v17708)
                                                                    v17711
                                                            let v17719 : string = method7()
                                                            let v17722 : (string -> string) = v17718.ToString
                                                            let v17723 : string = v17722 v17719
                                                            let _v17373 = v17723 
                                                            #endif
                                                            let v17726 : string = _v17373 
                                                            let v17791 : string = "Warning"
                                                            let v17792 : (unit -> string) = v17791.ToLower
                                                            let v17793 : string = v17792 ()
                                                            let v17796 : string = v17793.PadLeft (7, ' ')
                                                            let v17810 : unit = ()
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v17811 : string = "inline_colorization::color_yellow"
                                                            let v17812 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v17811 
                                                            let v17813 : string = "&*$0"
                                                            let v17814 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v17796 v17813 
                                                            let v17815 : string = "inline_colorization::color_reset"
                                                            let v17816 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v17815 
                                                            let v17817 : string = "\"{v17812}{v17814}{v17816}\""
                                                            let v17818 : string = @$"format!(" + v17817 + ")"
                                                            let v17819 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v17818 
                                                            let v17820 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v17821 : string = Fable.Core.RustInterop.emitRustExpr v17819 v17820 
                                                            let _v17810 = v17821 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v17822 : string = "inline_colorization::color_yellow"
                                                            let v17823 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v17822 
                                                            let v17824 : string = "&*$0"
                                                            let v17825 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v17796 v17824 
                                                            let v17826 : string = "inline_colorization::color_reset"
                                                            let v17827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v17826 
                                                            let v17828 : string = "\"{v17823}{v17825}{v17827}\""
                                                            let v17829 : string = @$"format!(" + v17828 + ")"
                                                            let v17830 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v17829 
                                                            let v17831 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v17832 : string = Fable.Core.RustInterop.emitRustExpr v17830 v17831 
                                                            let _v17810 = v17832 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v17833 : string = "inline_colorization::color_yellow"
                                                            let v17834 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v17833 
                                                            let v17835 : string = "&*$0"
                                                            let v17836 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v17796 v17835 
                                                            let v17837 : string = "inline_colorization::color_reset"
                                                            let v17838 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v17837 
                                                            let v17839 : string = "\"{v17834}{v17836}{v17838}\""
                                                            let v17840 : string = @$"format!(" + v17839 + ")"
                                                            let v17841 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v17840 
                                                            let v17842 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v17843 : string = Fable.Core.RustInterop.emitRustExpr v17841 v17842 
                                                            let _v17810 = v17843 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v17844 : string = "\u001b[93m"
                                                            let v17845 : string = method8()
                                                            let v17846 : string = v17844 + v17796 
                                                            let v17847 : string = v17846 + v17845 
                                                            let _v17810 = v17847 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v17848 : string = "\u001b[93m"
                                                            let v17849 : string = method8()
                                                            let v17850 : string = v17848 + v17796 
                                                            let v17851 : string = v17850 + v17849 
                                                            let _v17810 = v17851 
                                                            #endif
#else
                                                            let v17852 : string = "\u001b[93m"
                                                            let v17853 : string = method8()
                                                            let v17854 : string = v17852 + v17796 
                                                            let v17855 : string = v17854 + v17853 
                                                            let _v17810 = v17855 
                                                            #endif
                                                            let v17856 : string = _v17810 
                                                            let v17862 : int64 = v17358.l0
                                                            let v17863 : string = method9()
                                                            let v17864 : Mut4 = {l0 = v17863} : Mut4
                                                            let v17865 : string = "{ "
                                                            let v17866 : string = $"{v17865}"
                                                            let v17869 : string = v17864.l0
                                                            let v17870 : string = v17869 + v17866 
                                                            v17864.l0 <- v17870
                                                            let v17871 : string = "error"
                                                            let v17872 : string = $"{v17871}"
                                                            let v17875 : string = v17864.l0
                                                            let v17876 : string = v17875 + v17872 
                                                            v17864.l0 <- v17876
                                                            let v17877 : string = " = "
                                                            let v17878 : string = $"{v17877}"
                                                            let v17881 : string = v17864.l0
                                                            let v17882 : string = v17881 + v17878 
                                                            v17864.l0 <- v17882
                                                            let v17883 : string = $"{v17283}"
                                                            let v17886 : string = v17864.l0
                                                            let v17887 : string = v17886 + v17883 
                                                            v17864.l0 <- v17887
                                                            let v17888 : string = " }"
                                                            let v17889 : string = $"{v17888}"
                                                            let v17892 : string = v17864.l0
                                                            let v17893 : string = v17892 + v17889 
                                                            v17864.l0 <- v17893
                                                            let v17894 : string = v17864.l0
                                                            let v17895 : (unit -> string) = closure6()
                                                            let v17896 : string = $"{v17726} {v17856} #{v17862} %s{v17895 ()} / {v17894}"
                                                            let v17899 : char list = []
                                                            let v17900 : (char list -> (char [])) = List.toArray
                                                            let v17901 : (char []) = v17900 v17899
                                                            let v17904 : string = v17896.TrimStart v17901 
                                                            let v17922 : char list = []
                                                            let v17923 : char list = '/' :: v17922 
                                                            let v17926 : char list = ' ' :: v17923 
                                                            let v17929 : (char list -> (char [])) = List.toArray
                                                            let v17930 : (char []) = v17929 v17926
                                                            let v17933 : string = v17904.TrimEnd v17930 
                                                            let v17951 : unit = ()
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v17952 : string = @"println!(""{}"", $0)"
                                                            Fable.Core.RustInterop.emitRustExpr v17933 v17952 
                                                            let _v17951 = () 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v17953 : string = @"println!(""{}"", $0)"
                                                            Fable.Core.RustInterop.emitRustExpr v17933 v17953 
                                                            let _v17951 = () 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v17954 : string = $"near_sdk::log!(\"{{}}\", $0)"
                                                            Fable.Core.RustInterop.emitRustExpr v17933 v17954 
                                                            let _v17951 = () 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            System.Console.WriteLine v17933 
                                                            let _v17951 = () 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            System.Console.WriteLine v17933 
                                                            let _v17951 = () 
                                                            #endif
#else
                                                            System.Console.WriteLine v17933 
                                                            let _v17951 = () 
                                                            #endif
                                                            _v17951 
                                                            let v17955 : (string -> unit) = v17297.l0
                                                            v17955 v17933
                                                        US1_1
                                                    | US12_0(v17281) -> (* Ok *)
                                                        US1_0(v17281)
                                                let v18643 : US1 =
                                                    match v17958 with
                                                    | US1_1 -> (* None *)
                                                        let v17961 : string = method23()
                                                        let v17962 : string = method15(v17277, v17278)
                                                        let v17963 : US12 = method18(v17962, v17961)
                                                        match v17963 with
                                                        | US12_1(v17966) -> (* Error *)
                                                            let v17967 : bool = State.trace_state.IsNone
                                                            if v17967 then
                                                                let v17968 : US0 = US0_0
                                                                let struct (v17969 : Mut0, v17970 : Mut1, v17971 : Mut2, v17972 : Mut3, v17973 : int64 option) = method1(v17968)
                                                                let v17974 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v17969, v17970, v17971, v17972, v17973) 
                                                                State.trace_state <- v17974 
                                                                ()
                                                            let struct (v17979 : Mut0, v17980 : Mut1, v17981 : Mut2, v17982 : Mut3, v17983 : int64 option) = State.trace_state.Value
                                                            let v17994 : bool = State.trace_state.IsNone
                                                            if v17994 then
                                                                let v17995 : US0 = US0_0
                                                                let struct (v17996 : Mut0, v17997 : Mut1, v17998 : Mut2, v17999 : Mut3, v18000 : int64 option) = method1(v17995)
                                                                let v18001 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v17996, v17997, v17998, v17999, v18000) 
                                                                State.trace_state <- v18001 
                                                                ()
                                                            let struct (v18006 : Mut0, v18007 : Mut1, v18008 : Mut2, v18009 : Mut3, v18010 : int64 option) = State.trace_state.Value
                                                            let v18021 : US0 = v18009.l0
                                                            let v18022 : bool = v18008.l0
                                                            let v18023 : bool = v18022 = false
                                                            let v18026 : bool =
                                                                if v18023 then
                                                                    false
                                                                else
                                                                    let v18024 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v18021
                                                                    let v18025 : bool = 3 >= v18024
                                                                    v18025
                                                            if v18026 then
                                                                let v18027 : int64 = v17979.l0
                                                                let v18028 : int64 = v18027 + 1L
                                                                v17979.l0 <- v18028
                                                                let v18029 : bool = State.trace_state.IsNone
                                                                if v18029 then
                                                                    let v18030 : US0 = US0_0
                                                                    let struct (v18031 : Mut0, v18032 : Mut1, v18033 : Mut2, v18034 : Mut3, v18035 : int64 option) = method1(v18030)
                                                                    let v18036 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v18031, v18032, v18033, v18034, v18035) 
                                                                    State.trace_state <- v18036 
                                                                    ()
                                                                let struct (v18041 : Mut0, v18042 : Mut1, v18043 : Mut2, v18044 : Mut3, v18045 : int64 option) = State.trace_state.Value
                                                                let v18056 : unit = ()
                                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                                let v18057 : US3 option = None
                                                                let _v18057 = ref v18057 
                                                                match v18045 with
                                                                | Some x -> (
                                                                (fun () ->
                                                                (fun () ->
                                                                let v18058 : int64 = x
                                                                let v18059 : US3 = US3_0(v18058)
                                                                v18059 
                                                                )
                                                                |> fun x -> x () |> Some
                                                                ) () ) | None -> None
                                                                |> fun x -> _v18057.Value <- x
                                                                let v18060 : US3 option = _v18057.Value 
                                                                let v18071 : US3 = US3_1
                                                                let v18072 : US3 = v18060 |> Option.defaultValue v18071 
                                                                let v18112 : System.DateTime =
                                                                    match v18072 with
                                                                    | US3_1 -> (* None *)
                                                                        let v18108 : System.DateTime = System.DateTime.Now
                                                                        v18108
                                                                    | US3_0(v18076) -> (* Some *)
                                                                        let v18077 : System.DateTime = System.DateTime.Now
                                                                        let v18080 : (System.DateTime -> int64) = _.Ticks
                                                                        let v18081 : int64 = v18080 v18077
                                                                        let v18084 : int64 = v18081 - v18076
                                                                        let v18085 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                        let v18086 : System.TimeSpan = v18085 v18084
                                                                        let v18089 : (System.TimeSpan -> int32) = _.Hours
                                                                        let v18090 : int32 = v18089 v18086
                                                                        let v18093 : (System.TimeSpan -> int32) = _.Minutes
                                                                        let v18094 : int32 = v18093 v18086
                                                                        let v18097 : (System.TimeSpan -> int32) = _.Seconds
                                                                        let v18098 : int32 = v18097 v18086
                                                                        let v18101 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                        let v18102 : int32 = v18101 v18086
                                                                        let v18105 : System.DateTime = System.DateTime (1, 1, 1, v18090, v18094, v18098, v18102)
                                                                        v18105
                                                                let v18113 : string = method6()
                                                                let v18116 : (string -> string) = v18112.ToString
                                                                let v18117 : string = v18116 v18113
                                                                let _v18056 = v18117 
                                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                                let v18120 : US3 option = None
                                                                let _v18120 = ref v18120 
                                                                match v18045 with
                                                                | Some x -> (
                                                                (fun () ->
                                                                (fun () ->
                                                                let v18121 : int64 = x
                                                                let v18122 : US3 = US3_0(v18121)
                                                                v18122 
                                                                )
                                                                |> fun x -> x () |> Some
                                                                ) () ) | None -> None
                                                                |> fun x -> _v18120.Value <- x
                                                                let v18123 : US3 option = _v18120.Value 
                                                                let v18134 : US3 = US3_1
                                                                let v18135 : US3 = v18123 |> Option.defaultValue v18134 
                                                                let v18175 : System.DateTime =
                                                                    match v18135 with
                                                                    | US3_1 -> (* None *)
                                                                        let v18171 : System.DateTime = System.DateTime.Now
                                                                        v18171
                                                                    | US3_0(v18139) -> (* Some *)
                                                                        let v18140 : System.DateTime = System.DateTime.Now
                                                                        let v18143 : (System.DateTime -> int64) = _.Ticks
                                                                        let v18144 : int64 = v18143 v18140
                                                                        let v18147 : int64 = v18144 - v18139
                                                                        let v18148 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                        let v18149 : System.TimeSpan = v18148 v18147
                                                                        let v18152 : (System.TimeSpan -> int32) = _.Hours
                                                                        let v18153 : int32 = v18152 v18149
                                                                        let v18156 : (System.TimeSpan -> int32) = _.Minutes
                                                                        let v18157 : int32 = v18156 v18149
                                                                        let v18160 : (System.TimeSpan -> int32) = _.Seconds
                                                                        let v18161 : int32 = v18160 v18149
                                                                        let v18164 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                        let v18165 : int32 = v18164 v18149
                                                                        let v18168 : System.DateTime = System.DateTime (1, 1, 1, v18153, v18157, v18161, v18165)
                                                                        v18168
                                                                let v18176 : string = method6()
                                                                let v18179 : (string -> string) = v18175.ToString
                                                                let v18180 : string = v18179 v18176
                                                                let _v18056 = v18180 
                                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                                let v18183 : string = $"near_sdk::env::block_timestamp()"
                                                                let v18184 : uint64 = Fable.Core.RustInterop.emitRustExpr () v18183 
                                                                let v18185 : US3 option = None
                                                                let _v18185 = ref v18185 
                                                                match v18045 with
                                                                | Some x -> (
                                                                (fun () ->
                                                                (fun () ->
                                                                let v18186 : int64 = x
                                                                let v18187 : US3 = US3_0(v18186)
                                                                v18187 
                                                                )
                                                                |> fun x -> x () |> Some
                                                                ) () ) | None -> None
                                                                |> fun x -> _v18185.Value <- x
                                                                let v18188 : US3 option = _v18185.Value 
                                                                let v18199 : US3 = US3_1
                                                                let v18200 : US3 = v18188 |> Option.defaultValue v18199 
                                                                let v18209 : uint64 =
                                                                    match v18200 with
                                                                    | US3_1 -> (* None *)
                                                                        v18184
                                                                    | US3_0(v18204) -> (* Some *)
                                                                        let v18205 : (int64 -> uint64) = uint64
                                                                        let v18206 : uint64 = v18205 v18204
                                                                        let v18207 : uint64 = v18184 - v18206
                                                                        v18207
                                                                let v18210 : uint64 = v18209 / 1000000000UL
                                                                let v18211 : uint64 = v18210 % 60UL
                                                                let v18212 : uint64 = v18210 / 60UL
                                                                let v18213 : uint64 = v18212 % 60UL
                                                                let v18214 : uint64 = v18210 / 3600UL
                                                                let v18215 : uint64 = v18214 % 24UL
                                                                let v18216 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
                                                                let v18217 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v18215, v18213, v18211) v18216 
                                                                let v18218 : string = "fable_library_rust::String_::fromString($0)"
                                                                let v18219 : string = Fable.Core.RustInterop.emitRustExpr v18217 v18218 
                                                                let _v18056 = v18219 
                                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                                let v18220 : US3 option = None
                                                                let _v18220 = ref v18220 
                                                                match v18045 with
                                                                | Some x -> (
                                                                (fun () ->
                                                                (fun () ->
                                                                let v18221 : int64 = x
                                                                let v18222 : US3 = US3_0(v18221)
                                                                v18222 
                                                                )
                                                                |> fun x -> x () |> Some
                                                                ) () ) | None -> None
                                                                |> fun x -> _v18220.Value <- x
                                                                let v18223 : US3 option = _v18220.Value 
                                                                let v18234 : US3 = US3_1
                                                                let v18235 : US3 = v18223 |> Option.defaultValue v18234 
                                                                let v18275 : System.DateTime =
                                                                    match v18235 with
                                                                    | US3_1 -> (* None *)
                                                                        let v18271 : System.DateTime = System.DateTime.Now
                                                                        v18271
                                                                    | US3_0(v18239) -> (* Some *)
                                                                        let v18240 : System.DateTime = System.DateTime.Now
                                                                        let v18243 : (System.DateTime -> int64) = _.Ticks
                                                                        let v18244 : int64 = v18243 v18240
                                                                        let v18247 : int64 = v18244 - v18239
                                                                        let v18248 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                        let v18249 : System.TimeSpan = v18248 v18247
                                                                        let v18252 : (System.TimeSpan -> int32) = _.Hours
                                                                        let v18253 : int32 = v18252 v18249
                                                                        let v18256 : (System.TimeSpan -> int32) = _.Minutes
                                                                        let v18257 : int32 = v18256 v18249
                                                                        let v18260 : (System.TimeSpan -> int32) = _.Seconds
                                                                        let v18261 : int32 = v18260 v18249
                                                                        let v18264 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                        let v18265 : int32 = v18264 v18249
                                                                        let v18268 : System.DateTime = System.DateTime (1, 1, 1, v18253, v18257, v18261, v18265)
                                                                        v18268
                                                                let v18276 : string = method7()
                                                                let v18279 : (string -> string) = v18275.ToString
                                                                let v18280 : string = v18279 v18276
                                                                let _v18056 = v18280 
                                                                #endif
#if FABLE_COMPILER_PYTHON
                                                                let v18283 : US3 option = None
                                                                let _v18283 = ref v18283 
                                                                match v18045 with
                                                                | Some x -> (
                                                                (fun () ->
                                                                (fun () ->
                                                                let v18284 : int64 = x
                                                                let v18285 : US3 = US3_0(v18284)
                                                                v18285 
                                                                )
                                                                |> fun x -> x () |> Some
                                                                ) () ) | None -> None
                                                                |> fun x -> _v18283.Value <- x
                                                                let v18286 : US3 option = _v18283.Value 
                                                                let v18297 : US3 = US3_1
                                                                let v18298 : US3 = v18286 |> Option.defaultValue v18297 
                                                                let v18338 : System.DateTime =
                                                                    match v18298 with
                                                                    | US3_1 -> (* None *)
                                                                        let v18334 : System.DateTime = System.DateTime.Now
                                                                        v18334
                                                                    | US3_0(v18302) -> (* Some *)
                                                                        let v18303 : System.DateTime = System.DateTime.Now
                                                                        let v18306 : (System.DateTime -> int64) = _.Ticks
                                                                        let v18307 : int64 = v18306 v18303
                                                                        let v18310 : int64 = v18307 - v18302
                                                                        let v18311 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                        let v18312 : System.TimeSpan = v18311 v18310
                                                                        let v18315 : (System.TimeSpan -> int32) = _.Hours
                                                                        let v18316 : int32 = v18315 v18312
                                                                        let v18319 : (System.TimeSpan -> int32) = _.Minutes
                                                                        let v18320 : int32 = v18319 v18312
                                                                        let v18323 : (System.TimeSpan -> int32) = _.Seconds
                                                                        let v18324 : int32 = v18323 v18312
                                                                        let v18327 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                        let v18328 : int32 = v18327 v18312
                                                                        let v18331 : System.DateTime = System.DateTime (1, 1, 1, v18316, v18320, v18324, v18328)
                                                                        v18331
                                                                let v18339 : string = method7()
                                                                let v18342 : (string -> string) = v18338.ToString
                                                                let v18343 : string = v18342 v18339
                                                                let _v18056 = v18343 
                                                                #endif
#else
                                                                let v18346 : US3 option = None
                                                                let _v18346 = ref v18346 
                                                                match v18045 with
                                                                | Some x -> (
                                                                (fun () ->
                                                                (fun () ->
                                                                let v18347 : int64 = x
                                                                let v18348 : US3 = US3_0(v18347)
                                                                v18348 
                                                                )
                                                                |> fun x -> x () |> Some
                                                                ) () ) | None -> None
                                                                |> fun x -> _v18346.Value <- x
                                                                let v18349 : US3 option = _v18346.Value 
                                                                let v18360 : US3 = US3_1
                                                                let v18361 : US3 = v18349 |> Option.defaultValue v18360 
                                                                let v18401 : System.DateTime =
                                                                    match v18361 with
                                                                    | US3_1 -> (* None *)
                                                                        let v18397 : System.DateTime = System.DateTime.Now
                                                                        v18397
                                                                    | US3_0(v18365) -> (* Some *)
                                                                        let v18366 : System.DateTime = System.DateTime.Now
                                                                        let v18369 : (System.DateTime -> int64) = _.Ticks
                                                                        let v18370 : int64 = v18369 v18366
                                                                        let v18373 : int64 = v18370 - v18365
                                                                        let v18374 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                        let v18375 : System.TimeSpan = v18374 v18373
                                                                        let v18378 : (System.TimeSpan -> int32) = _.Hours
                                                                        let v18379 : int32 = v18378 v18375
                                                                        let v18382 : (System.TimeSpan -> int32) = _.Minutes
                                                                        let v18383 : int32 = v18382 v18375
                                                                        let v18386 : (System.TimeSpan -> int32) = _.Seconds
                                                                        let v18387 : int32 = v18386 v18375
                                                                        let v18390 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                        let v18391 : int32 = v18390 v18375
                                                                        let v18394 : System.DateTime = System.DateTime (1, 1, 1, v18379, v18383, v18387, v18391)
                                                                        v18394
                                                                let v18402 : string = method7()
                                                                let v18405 : (string -> string) = v18401.ToString
                                                                let v18406 : string = v18405 v18402
                                                                let _v18056 = v18406 
                                                                #endif
                                                                let v18409 : string = _v18056 
                                                                let v18474 : string = "Warning"
                                                                let v18475 : (unit -> string) = v18474.ToLower
                                                                let v18476 : string = v18475 ()
                                                                let v18479 : string = v18476.PadLeft (7, ' ')
                                                                let v18493 : unit = ()
                                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                                let v18494 : string = "inline_colorization::color_yellow"
                                                                let v18495 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v18494 
                                                                let v18496 : string = "&*$0"
                                                                let v18497 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v18479 v18496 
                                                                let v18498 : string = "inline_colorization::color_reset"
                                                                let v18499 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v18498 
                                                                let v18500 : string = "\"{v18495}{v18497}{v18499}\""
                                                                let v18501 : string = @$"format!(" + v18500 + ")"
                                                                let v18502 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v18501 
                                                                let v18503 : string = "fable_library_rust::String_::fromString($0)"
                                                                let v18504 : string = Fable.Core.RustInterop.emitRustExpr v18502 v18503 
                                                                let _v18493 = v18504 
                                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                                let v18505 : string = "inline_colorization::color_yellow"
                                                                let v18506 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v18505 
                                                                let v18507 : string = "&*$0"
                                                                let v18508 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v18479 v18507 
                                                                let v18509 : string = "inline_colorization::color_reset"
                                                                let v18510 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v18509 
                                                                let v18511 : string = "\"{v18506}{v18508}{v18510}\""
                                                                let v18512 : string = @$"format!(" + v18511 + ")"
                                                                let v18513 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v18512 
                                                                let v18514 : string = "fable_library_rust::String_::fromString($0)"
                                                                let v18515 : string = Fable.Core.RustInterop.emitRustExpr v18513 v18514 
                                                                let _v18493 = v18515 
                                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                                let v18516 : string = "inline_colorization::color_yellow"
                                                                let v18517 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v18516 
                                                                let v18518 : string = "&*$0"
                                                                let v18519 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v18479 v18518 
                                                                let v18520 : string = "inline_colorization::color_reset"
                                                                let v18521 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v18520 
                                                                let v18522 : string = "\"{v18517}{v18519}{v18521}\""
                                                                let v18523 : string = @$"format!(" + v18522 + ")"
                                                                let v18524 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v18523 
                                                                let v18525 : string = "fable_library_rust::String_::fromString($0)"
                                                                let v18526 : string = Fable.Core.RustInterop.emitRustExpr v18524 v18525 
                                                                let _v18493 = v18526 
                                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                                let v18527 : string = "\u001b[93m"
                                                                let v18528 : string = method8()
                                                                let v18529 : string = v18527 + v18479 
                                                                let v18530 : string = v18529 + v18528 
                                                                let _v18493 = v18530 
                                                                #endif
#if FABLE_COMPILER_PYTHON
                                                                let v18531 : string = "\u001b[93m"
                                                                let v18532 : string = method8()
                                                                let v18533 : string = v18531 + v18479 
                                                                let v18534 : string = v18533 + v18532 
                                                                let _v18493 = v18534 
                                                                #endif
#else
                                                                let v18535 : string = "\u001b[93m"
                                                                let v18536 : string = method8()
                                                                let v18537 : string = v18535 + v18479 
                                                                let v18538 : string = v18537 + v18536 
                                                                let _v18493 = v18538 
                                                                #endif
                                                                let v18539 : string = _v18493 
                                                                let v18545 : int64 = v18041.l0
                                                                let v18546 : string = method9()
                                                                let v18547 : Mut4 = {l0 = v18546} : Mut4
                                                                let v18548 : string = "{ "
                                                                let v18549 : string = $"{v18548}"
                                                                let v18552 : string = v18547.l0
                                                                let v18553 : string = v18552 + v18549 
                                                                v18547.l0 <- v18553
                                                                let v18554 : string = "error"
                                                                let v18555 : string = $"{v18554}"
                                                                let v18558 : string = v18547.l0
                                                                let v18559 : string = v18558 + v18555 
                                                                v18547.l0 <- v18559
                                                                let v18560 : string = " = "
                                                                let v18561 : string = $"{v18560}"
                                                                let v18564 : string = v18547.l0
                                                                let v18565 : string = v18564 + v18561 
                                                                v18547.l0 <- v18565
                                                                let v18566 : string = $"{v17966}"
                                                                let v18569 : string = v18547.l0
                                                                let v18570 : string = v18569 + v18566 
                                                                v18547.l0 <- v18570
                                                                let v18571 : string = " }"
                                                                let v18572 : string = $"{v18571}"
                                                                let v18575 : string = v18547.l0
                                                                let v18576 : string = v18575 + v18572 
                                                                v18547.l0 <- v18576
                                                                let v18577 : string = v18547.l0
                                                                let v18578 : (unit -> string) = closure6()
                                                                let v18579 : string = $"{v18409} {v18539} #{v18545} %s{v18578 ()} / {v18577}"
                                                                let v18582 : char list = []
                                                                let v18583 : (char list -> (char [])) = List.toArray
                                                                let v18584 : (char []) = v18583 v18582
                                                                let v18587 : string = v18579.TrimStart v18584 
                                                                let v18605 : char list = []
                                                                let v18606 : char list = '/' :: v18605 
                                                                let v18609 : char list = ' ' :: v18606 
                                                                let v18612 : (char list -> (char [])) = List.toArray
                                                                let v18613 : (char []) = v18612 v18609
                                                                let v18616 : string = v18587.TrimEnd v18613 
                                                                let v18634 : unit = ()
                                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                                let v18635 : string = @"println!(""{}"", $0)"
                                                                Fable.Core.RustInterop.emitRustExpr v18616 v18635 
                                                                let _v18634 = () 
                                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                                let v18636 : string = @"println!(""{}"", $0)"
                                                                Fable.Core.RustInterop.emitRustExpr v18616 v18636 
                                                                let _v18634 = () 
                                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                                let v18637 : string = $"near_sdk::log!(\"{{}}\", $0)"
                                                                Fable.Core.RustInterop.emitRustExpr v18616 v18637 
                                                                let _v18634 = () 
                                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                                System.Console.WriteLine v18616 
                                                                let _v18634 = () 
                                                                #endif
#if FABLE_COMPILER_PYTHON
                                                                System.Console.WriteLine v18616 
                                                                let _v18634 = () 
                                                                #endif
#else
                                                                System.Console.WriteLine v18616 
                                                                let _v18634 = () 
                                                                #endif
                                                                _v18634 
                                                                let v18638 : (string -> unit) = v17980.l0
                                                                v18638 v18616
                                                            US1_1
                                                        | US12_0(v17964) -> (* Ok *)
                                                            US1_0(v17964)
                                                    | US1_0(v17959) -> (* Some *)
                                                        US1_0(v17959)
                                                let v18647 : string =
                                                    match v18643 with
                                                    | US1_1 -> (* None *)
                                                        failwith<string> "Option does not have a value."
                                                    | US1_0(v18644) -> (* Some *)
                                                        v18644
                                                let v18648 : string = method15(v18647, v17277)
                                                let v18649 : string = method23()
                                                let v18650 : (unit -> string) = v18649.ToLower
                                                let v18651 : string = v18650 ()
                                                let v18654 : (unit -> string) = v18648.ToLower
                                                let v18655 : string = v18654 ()
                                                let v18658 : bool = v18651.StartsWith v18655 
                                                let v18661 : US12 =
                                                    if v18658 then
                                                        US12_1(v18655)
                                                    else
                                                        US12_0(v18655)
                                                let v18667 : Result<string, string> =
                                                    match v18661 with
                                                    | US12_1(v18664) -> (* Error *)
                                                        let v18665 : Result<string, string> = Error v18664 
                                                        v18665
                                                    | US12_0(v18662) -> (* Ok *)
                                                        let v18663 : Result<string, string> = Ok v18662 
                                                        v18663
                                                let v18668 : string = "true; let _result = $0.unwrap_or_else(|x| { //"
                                                let v18669 : bool = Fable.Core.RustInterop.emitRustExpr v18667 v18668 
                                                let v18670 : string = "x"
                                                let v18671 : string = Fable.Core.RustInterop.emitRustExpr () v18670 
                                                let v18672 : string = "true; $0 })"
                                                let v18673 : bool = Fable.Core.RustInterop.emitRustExpr v18671 v18672 
                                                let v18674 : string = "_result"
                                                let v18675 : string = Fable.Core.RustInterop.emitRustExpr () v18674 
                                                let v18676 : string = "target/spiral_builder"
                                                let v18677 : string = method15(v18675, v18676)
                                                let v18678 : string = "spiral_builder"
                                                let v18679 : string = method15(v18677, v18678)
                                                let v18680 : string = "packages"
                                                let v18681 : string = method15(v18679, v18680)
                                                let v18682 : string = "Python"
                                                let v18683 : string = method15(v18681, v18682)
                                                let v18684 : string = method15(v18683, v17275)
                                                let v18685 : System.IDisposable = method28(v18684)
                                                let v18686 : string = $"{v18678}.fs"
                                                let v18687 : string = method15(v18684, v18686)
                                                let v18688 : string = method85(v18687)
                                                method25(v18688, v17266)
                                                let v18689 : string list = []
                                                let v18690 : string seq = seq { for i = 0 to v18689.Length - 1 do yield v18689.[i] }
                                                let v18693 : (string -> (string seq -> string)) = String.concat
                                                let v18694 : string = "\\n        "
                                                let v18695 : (string seq -> string) = v18693 v18694
                                                let v18696 : string = v18695 v18690
                                                let v18699 : string = "Fable.Core"
                                                let v18700 : string = $"<PackageReference Include=\"{v18699}\" Version=\"*\" />"
                                                let v18701 : string list = []
                                                let v18702 : string list = v18700 :: v18701 
                                                let v18705 : string seq = seq { for i = 0 to v18702.Length - 1 do yield v18702.[i] }
                                                let v18708 : (string -> (string seq -> string)) = String.concat
                                                let v18709 : (string seq -> string) = v18708 v18694
                                                let v18710 : string = v18709 v18705
                                                let v18713 : string = $"{v18678}.fsproj"
                                                let v18714 : string = method15(v18684, v18713)
                                                let v18715 : string = method85(v18714)
                                                let v18716 : string = $"<Project Sdk=\"Microsoft.NET.Sdk\">"
                                                let v18717 : string = $"<PropertyGroup>"
                                                let v18718 : string = "\n"
                                                let v18719 : string = v18716 + v18718 
                                                let v18720 : string = v18719 + v18717 
                                                let v18721 : string = $"    <TargetFramework>net9.0</TargetFramework>"
                                                let v18722 : string = v18720 + v18718 
                                                let v18723 : string = v18722 + v18721 
                                                let v18724 : string = $"    <LangVersion>preview</LangVersion>"
                                                let v18725 : string = v18723 + v18718 
                                                let v18726 : string = v18725 + v18724 
                                                let v18727 : string = $"    <RollForward>Major</RollForward>"
                                                let v18728 : string = v18726 + v18718 
                                                let v18729 : string = v18728 + v18727 
                                                let v18730 : string = $"    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>"
                                                let v18731 : string = v18729 + v18718 
                                                let v18732 : string = v18731 + v18730 
                                                let v18733 : string = $"    <PublishAot>false</PublishAot>"
                                                let v18734 : string = v18732 + v18718 
                                                let v18735 : string = v18734 + v18733 
                                                let v18736 : string = $"    <PublishTrimmed>false</PublishTrimmed>"
                                                let v18737 : string = v18735 + v18718 
                                                let v18738 : string = v18737 + v18736 
                                                let v18739 : string = $"    <PublishSingleFile>true</PublishSingleFile>"
                                                let v18740 : string = v18738 + v18718 
                                                let v18741 : string = v18740 + v18739 
                                                let v18742 : string = $"    <SelfContained>true</SelfContained>"
                                                let v18743 : string = v18741 + v18718 
                                                let v18744 : string = v18743 + v18742 
                                                let v18745 : string = $"    <Version>0.0.1-alpha.1</Version>"
                                                let v18746 : string = v18744 + v18718 
                                                let v18747 : string = v18746 + v18745 
                                                let v18748 : string = $"    <OutputType>Exe</OutputType>"
                                                let v18749 : string = v18747 + v18718 
                                                let v18750 : string = v18749 + v18748 
                                                let v18751 : string = $"</PropertyGroup>"
                                                let v18752 : string = v18750 + v18718 
                                                let v18753 : string = v18752 + v18751 
                                                let v18754 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('FreeBSD'))\">"
                                                let v18755 : string = v18753 + v18718 
                                                let v18756 : string = v18755 + v18754 
                                                let v18757 : string = $"    <DefineConstants>_FREEBSD</DefineConstants>"
                                                let v18758 : string = v18756 + v18718 
                                                let v18759 : string = v18758 + v18757 
                                                let v18760 : string = $"</PropertyGroup>"
                                                let v18761 : string = v18759 + v18718 
                                                let v18762 : string = v18761 + v18760 
                                                let v18763 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Linux'))\">"
                                                let v18764 : string = v18762 + v18718 
                                                let v18765 : string = v18764 + v18763 
                                                let v18766 : string = $"    <DefineConstants>_LINUX</DefineConstants>"
                                                let v18767 : string = v18765 + v18718 
                                                let v18768 : string = v18767 + v18766 
                                                let v18769 : string = $"</PropertyGroup>"
                                                let v18770 : string = v18768 + v18718 
                                                let v18771 : string = v18770 + v18769 
                                                let v18772 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('OSX'))\">"
                                                let v18773 : string = v18771 + v18718 
                                                let v18774 : string = v18773 + v18772 
                                                let v18775 : string = $"    <DefineConstants>_OSX</DefineConstants>"
                                                let v18776 : string = v18774 + v18718 
                                                let v18777 : string = v18776 + v18775 
                                                let v18778 : string = $"</PropertyGroup>"
                                                let v18779 : string = v18777 + v18718 
                                                let v18780 : string = v18779 + v18778 
                                                let v18781 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Windows'))\">"
                                                let v18782 : string = v18780 + v18718 
                                                let v18783 : string = v18782 + v18781 
                                                let v18784 : string = $"    <DefineConstants>_WINDOWS</DefineConstants>"
                                                let v18785 : string = v18783 + v18718 
                                                let v18786 : string = v18785 + v18784 
                                                let v18787 : string = $"</PropertyGroup>"
                                                let v18788 : string = v18786 + v18718 
                                                let v18789 : string = v18788 + v18787 
                                                let v18790 : string = $"<ItemGroup>"
                                                let v18791 : string = v18789 + v18718 
                                                let v18792 : string = v18791 + v18790 
                                                let v18793 : string = $"    {v18696}"
                                                let v18794 : string = v18792 + v18718 
                                                let v18795 : string = v18794 + v18793 
                                                let v18796 : string = $"    <Compile Include=\"{v18688}\" />"
                                                let v18797 : string = v18795 + v18718 
                                                let v18798 : string = v18797 + v18796 
                                                let v18799 : string = $"</ItemGroup>"
                                                let v18800 : string = v18798 + v18718 
                                                let v18801 : string = v18800 + v18799 
                                                let v18802 : string = $"<ItemGroup>"
                                                let v18803 : string = v18801 + v18718 
                                                let v18804 : string = v18803 + v18802 
                                                let v18805 : string = $"    {v18710}"
                                                let v18806 : string = v18804 + v18718 
                                                let v18807 : string = v18806 + v18805 
                                                let v18808 : string = $"</ItemGroup>"
                                                let v18809 : string = v18807 + v18718 
                                                let v18810 : string = v18809 + v18808 
                                                let v18811 : string = $"</Project>"
                                                let v18812 : string = v18810 + v18718 
                                                let v18813 : string = v18812 + v18811 
                                                method25(v18715, v18813)
                                                let v18814 : string = "lib/python/fable/fable_modules"
                                                let v18815 : string = method15(v18675, v18814)
                                                let v18816 : string = $"fable_library"
                                                let v18817 : string = method15(v18815, v18816)
                                                let v18818 : string = $"fable_modules/fable_library"
                                                let v18819 : string = method15(v18684, v18818)
                                                method101(v18817, v18819)
                                                let v18820 : US33 = US33_1
                                                let struct (v18821 : int32, v18822 : string) = method102(v18820, v18684, v17271, v18715, v18661)
                                                let v18823 : bool = v18821 <> 0 
                                                let struct (v21138 : US1, v21139 : US1, v21140 : US1) =
                                                    if v18823 then
                                                        let v18826 : bool = State.trace_state.IsNone
                                                        if v18826 then
                                                            let v18827 : US0 = US0_0
                                                            let struct (v18828 : Mut0, v18829 : Mut1, v18830 : Mut2, v18831 : Mut3, v18832 : int64 option) = method1(v18827)
                                                            let v18833 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v18828, v18829, v18830, v18831, v18832) 
                                                            State.trace_state <- v18833 
                                                            ()
                                                        let struct (v18838 : Mut0, v18839 : Mut1, v18840 : Mut2, v18841 : Mut3, v18842 : int64 option) = State.trace_state.Value
                                                        let v18853 : bool = State.trace_state.IsNone
                                                        if v18853 then
                                                            let v18854 : US0 = US0_0
                                                            let struct (v18855 : Mut0, v18856 : Mut1, v18857 : Mut2, v18858 : Mut3, v18859 : int64 option) = method1(v18854)
                                                            let v18860 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v18855, v18856, v18857, v18858, v18859) 
                                                            State.trace_state <- v18860 
                                                            ()
                                                        let struct (v18865 : Mut0, v18866 : Mut1, v18867 : Mut2, v18868 : Mut3, v18869 : int64 option) = State.trace_state.Value
                                                        let v18880 : US0 = v18868.l0
                                                        let v18881 : bool = v18867.l0
                                                        let v18882 : bool = v18881 = false
                                                        let v18885 : bool =
                                                            if v18882 then
                                                                false
                                                            else
                                                                let v18883 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v18880
                                                                let v18884 : bool = 4 >= v18883
                                                                v18884
                                                        if v18885 then
                                                            let v18886 : int64 = v18838.l0
                                                            let v18887 : int64 = v18886 + 1L
                                                            v18838.l0 <- v18887
                                                            let v18888 : bool = State.trace_state.IsNone
                                                            if v18888 then
                                                                let v18889 : US0 = US0_0
                                                                let struct (v18890 : Mut0, v18891 : Mut1, v18892 : Mut2, v18893 : Mut3, v18894 : int64 option) = method1(v18889)
                                                                let v18895 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v18890, v18891, v18892, v18893, v18894) 
                                                                State.trace_state <- v18895 
                                                                ()
                                                            let struct (v18900 : Mut0, v18901 : Mut1, v18902 : Mut2, v18903 : Mut3, v18904 : int64 option) = State.trace_state.Value
                                                            let v18915 : unit = ()
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v18916 : US3 option = None
                                                            let _v18916 = ref v18916 
                                                            match v18904 with
                                                            | Some x -> (
                                                            (fun () ->
                                                            (fun () ->
                                                            let v18917 : int64 = x
                                                            let v18918 : US3 = US3_0(v18917)
                                                            v18918 
                                                            )
                                                            |> fun x -> x () |> Some
                                                            ) () ) | None -> None
                                                            |> fun x -> _v18916.Value <- x
                                                            let v18919 : US3 option = _v18916.Value 
                                                            let v18930 : US3 = US3_1
                                                            let v18931 : US3 = v18919 |> Option.defaultValue v18930 
                                                            let v18971 : System.DateTime =
                                                                match v18931 with
                                                                | US3_1 -> (* None *)
                                                                    let v18967 : System.DateTime = System.DateTime.Now
                                                                    v18967
                                                                | US3_0(v18935) -> (* Some *)
                                                                    let v18936 : System.DateTime = System.DateTime.Now
                                                                    let v18939 : (System.DateTime -> int64) = _.Ticks
                                                                    let v18940 : int64 = v18939 v18936
                                                                    let v18943 : int64 = v18940 - v18935
                                                                    let v18944 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                    let v18945 : System.TimeSpan = v18944 v18943
                                                                    let v18948 : (System.TimeSpan -> int32) = _.Hours
                                                                    let v18949 : int32 = v18948 v18945
                                                                    let v18952 : (System.TimeSpan -> int32) = _.Minutes
                                                                    let v18953 : int32 = v18952 v18945
                                                                    let v18956 : (System.TimeSpan -> int32) = _.Seconds
                                                                    let v18957 : int32 = v18956 v18945
                                                                    let v18960 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                    let v18961 : int32 = v18960 v18945
                                                                    let v18964 : System.DateTime = System.DateTime (1, 1, 1, v18949, v18953, v18957, v18961)
                                                                    v18964
                                                            let v18972 : string = method6()
                                                            let v18975 : (string -> string) = v18971.ToString
                                                            let v18976 : string = v18975 v18972
                                                            let _v18915 = v18976 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v18979 : US3 option = None
                                                            let _v18979 = ref v18979 
                                                            match v18904 with
                                                            | Some x -> (
                                                            (fun () ->
                                                            (fun () ->
                                                            let v18980 : int64 = x
                                                            let v18981 : US3 = US3_0(v18980)
                                                            v18981 
                                                            )
                                                            |> fun x -> x () |> Some
                                                            ) () ) | None -> None
                                                            |> fun x -> _v18979.Value <- x
                                                            let v18982 : US3 option = _v18979.Value 
                                                            let v18993 : US3 = US3_1
                                                            let v18994 : US3 = v18982 |> Option.defaultValue v18993 
                                                            let v19034 : System.DateTime =
                                                                match v18994 with
                                                                | US3_1 -> (* None *)
                                                                    let v19030 : System.DateTime = System.DateTime.Now
                                                                    v19030
                                                                | US3_0(v18998) -> (* Some *)
                                                                    let v18999 : System.DateTime = System.DateTime.Now
                                                                    let v19002 : (System.DateTime -> int64) = _.Ticks
                                                                    let v19003 : int64 = v19002 v18999
                                                                    let v19006 : int64 = v19003 - v18998
                                                                    let v19007 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                    let v19008 : System.TimeSpan = v19007 v19006
                                                                    let v19011 : (System.TimeSpan -> int32) = _.Hours
                                                                    let v19012 : int32 = v19011 v19008
                                                                    let v19015 : (System.TimeSpan -> int32) = _.Minutes
                                                                    let v19016 : int32 = v19015 v19008
                                                                    let v19019 : (System.TimeSpan -> int32) = _.Seconds
                                                                    let v19020 : int32 = v19019 v19008
                                                                    let v19023 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                    let v19024 : int32 = v19023 v19008
                                                                    let v19027 : System.DateTime = System.DateTime (1, 1, 1, v19012, v19016, v19020, v19024)
                                                                    v19027
                                                            let v19035 : string = method6()
                                                            let v19038 : (string -> string) = v19034.ToString
                                                            let v19039 : string = v19038 v19035
                                                            let _v18915 = v19039 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v19042 : string = $"near_sdk::env::block_timestamp()"
                                                            let v19043 : uint64 = Fable.Core.RustInterop.emitRustExpr () v19042 
                                                            let v19044 : US3 option = None
                                                            let _v19044 = ref v19044 
                                                            match v18904 with
                                                            | Some x -> (
                                                            (fun () ->
                                                            (fun () ->
                                                            let v19045 : int64 = x
                                                            let v19046 : US3 = US3_0(v19045)
                                                            v19046 
                                                            )
                                                            |> fun x -> x () |> Some
                                                            ) () ) | None -> None
                                                            |> fun x -> _v19044.Value <- x
                                                            let v19047 : US3 option = _v19044.Value 
                                                            let v19058 : US3 = US3_1
                                                            let v19059 : US3 = v19047 |> Option.defaultValue v19058 
                                                            let v19068 : uint64 =
                                                                match v19059 with
                                                                | US3_1 -> (* None *)
                                                                    v19043
                                                                | US3_0(v19063) -> (* Some *)
                                                                    let v19064 : (int64 -> uint64) = uint64
                                                                    let v19065 : uint64 = v19064 v19063
                                                                    let v19066 : uint64 = v19043 - v19065
                                                                    v19066
                                                            let v19069 : uint64 = v19068 / 1000000000UL
                                                            let v19070 : uint64 = v19069 % 60UL
                                                            let v19071 : uint64 = v19069 / 60UL
                                                            let v19072 : uint64 = v19071 % 60UL
                                                            let v19073 : uint64 = v19069 / 3600UL
                                                            let v19074 : uint64 = v19073 % 24UL
                                                            let v19075 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
                                                            let v19076 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v19074, v19072, v19070) v19075 
                                                            let v19077 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v19078 : string = Fable.Core.RustInterop.emitRustExpr v19076 v19077 
                                                            let _v18915 = v19078 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v19079 : US3 option = None
                                                            let _v19079 = ref v19079 
                                                            match v18904 with
                                                            | Some x -> (
                                                            (fun () ->
                                                            (fun () ->
                                                            let v19080 : int64 = x
                                                            let v19081 : US3 = US3_0(v19080)
                                                            v19081 
                                                            )
                                                            |> fun x -> x () |> Some
                                                            ) () ) | None -> None
                                                            |> fun x -> _v19079.Value <- x
                                                            let v19082 : US3 option = _v19079.Value 
                                                            let v19093 : US3 = US3_1
                                                            let v19094 : US3 = v19082 |> Option.defaultValue v19093 
                                                            let v19134 : System.DateTime =
                                                                match v19094 with
                                                                | US3_1 -> (* None *)
                                                                    let v19130 : System.DateTime = System.DateTime.Now
                                                                    v19130
                                                                | US3_0(v19098) -> (* Some *)
                                                                    let v19099 : System.DateTime = System.DateTime.Now
                                                                    let v19102 : (System.DateTime -> int64) = _.Ticks
                                                                    let v19103 : int64 = v19102 v19099
                                                                    let v19106 : int64 = v19103 - v19098
                                                                    let v19107 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                    let v19108 : System.TimeSpan = v19107 v19106
                                                                    let v19111 : (System.TimeSpan -> int32) = _.Hours
                                                                    let v19112 : int32 = v19111 v19108
                                                                    let v19115 : (System.TimeSpan -> int32) = _.Minutes
                                                                    let v19116 : int32 = v19115 v19108
                                                                    let v19119 : (System.TimeSpan -> int32) = _.Seconds
                                                                    let v19120 : int32 = v19119 v19108
                                                                    let v19123 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                    let v19124 : int32 = v19123 v19108
                                                                    let v19127 : System.DateTime = System.DateTime (1, 1, 1, v19112, v19116, v19120, v19124)
                                                                    v19127
                                                            let v19135 : string = method7()
                                                            let v19138 : (string -> string) = v19134.ToString
                                                            let v19139 : string = v19138 v19135
                                                            let _v18915 = v19139 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v19142 : US3 option = None
                                                            let _v19142 = ref v19142 
                                                            match v18904 with
                                                            | Some x -> (
                                                            (fun () ->
                                                            (fun () ->
                                                            let v19143 : int64 = x
                                                            let v19144 : US3 = US3_0(v19143)
                                                            v19144 
                                                            )
                                                            |> fun x -> x () |> Some
                                                            ) () ) | None -> None
                                                            |> fun x -> _v19142.Value <- x
                                                            let v19145 : US3 option = _v19142.Value 
                                                            let v19156 : US3 = US3_1
                                                            let v19157 : US3 = v19145 |> Option.defaultValue v19156 
                                                            let v19197 : System.DateTime =
                                                                match v19157 with
                                                                | US3_1 -> (* None *)
                                                                    let v19193 : System.DateTime = System.DateTime.Now
                                                                    v19193
                                                                | US3_0(v19161) -> (* Some *)
                                                                    let v19162 : System.DateTime = System.DateTime.Now
                                                                    let v19165 : (System.DateTime -> int64) = _.Ticks
                                                                    let v19166 : int64 = v19165 v19162
                                                                    let v19169 : int64 = v19166 - v19161
                                                                    let v19170 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                    let v19171 : System.TimeSpan = v19170 v19169
                                                                    let v19174 : (System.TimeSpan -> int32) = _.Hours
                                                                    let v19175 : int32 = v19174 v19171
                                                                    let v19178 : (System.TimeSpan -> int32) = _.Minutes
                                                                    let v19179 : int32 = v19178 v19171
                                                                    let v19182 : (System.TimeSpan -> int32) = _.Seconds
                                                                    let v19183 : int32 = v19182 v19171
                                                                    let v19186 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                    let v19187 : int32 = v19186 v19171
                                                                    let v19190 : System.DateTime = System.DateTime (1, 1, 1, v19175, v19179, v19183, v19187)
                                                                    v19190
                                                            let v19198 : string = method7()
                                                            let v19201 : (string -> string) = v19197.ToString
                                                            let v19202 : string = v19201 v19198
                                                            let _v18915 = v19202 
                                                            #endif
#else
                                                            let v19205 : US3 option = None
                                                            let _v19205 = ref v19205 
                                                            match v18904 with
                                                            | Some x -> (
                                                            (fun () ->
                                                            (fun () ->
                                                            let v19206 : int64 = x
                                                            let v19207 : US3 = US3_0(v19206)
                                                            v19207 
                                                            )
                                                            |> fun x -> x () |> Some
                                                            ) () ) | None -> None
                                                            |> fun x -> _v19205.Value <- x
                                                            let v19208 : US3 option = _v19205.Value 
                                                            let v19219 : US3 = US3_1
                                                            let v19220 : US3 = v19208 |> Option.defaultValue v19219 
                                                            let v19260 : System.DateTime =
                                                                match v19220 with
                                                                | US3_1 -> (* None *)
                                                                    let v19256 : System.DateTime = System.DateTime.Now
                                                                    v19256
                                                                | US3_0(v19224) -> (* Some *)
                                                                    let v19225 : System.DateTime = System.DateTime.Now
                                                                    let v19228 : (System.DateTime -> int64) = _.Ticks
                                                                    let v19229 : int64 = v19228 v19225
                                                                    let v19232 : int64 = v19229 - v19224
                                                                    let v19233 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                    let v19234 : System.TimeSpan = v19233 v19232
                                                                    let v19237 : (System.TimeSpan -> int32) = _.Hours
                                                                    let v19238 : int32 = v19237 v19234
                                                                    let v19241 : (System.TimeSpan -> int32) = _.Minutes
                                                                    let v19242 : int32 = v19241 v19234
                                                                    let v19245 : (System.TimeSpan -> int32) = _.Seconds
                                                                    let v19246 : int32 = v19245 v19234
                                                                    let v19249 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                    let v19250 : int32 = v19249 v19234
                                                                    let v19253 : System.DateTime = System.DateTime (1, 1, 1, v19238, v19242, v19246, v19250)
                                                                    v19253
                                                            let v19261 : string = method7()
                                                            let v19264 : (string -> string) = v19260.ToString
                                                            let v19265 : string = v19264 v19261
                                                            let _v18915 = v19265 
                                                            #endif
                                                            let v19268 : string = _v18915 
                                                            let v19333 : string = "Critical"
                                                            let v19334 : (unit -> string) = v19333.ToLower
                                                            let v19335 : string = v19334 ()
                                                            let v19338 : string = v19335.PadLeft (7, ' ')
                                                            let v19352 : unit = ()
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v19353 : string = "inline_colorization::color_bright_red"
                                                            let v19354 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v19353 
                                                            let v19355 : string = "&*$0"
                                                            let v19356 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v19338 v19355 
                                                            let v19357 : string = "inline_colorization::color_reset"
                                                            let v19358 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v19357 
                                                            let v19359 : string = "\"{v19354}{v19356}{v19358}\""
                                                            let v19360 : string = @$"format!(" + v19359 + ")"
                                                            let v19361 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v19360 
                                                            let v19362 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v19363 : string = Fable.Core.RustInterop.emitRustExpr v19361 v19362 
                                                            let _v19352 = v19363 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v19364 : string = "inline_colorization::color_bright_red"
                                                            let v19365 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v19364 
                                                            let v19366 : string = "&*$0"
                                                            let v19367 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v19338 v19366 
                                                            let v19368 : string = "inline_colorization::color_reset"
                                                            let v19369 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v19368 
                                                            let v19370 : string = "\"{v19365}{v19367}{v19369}\""
                                                            let v19371 : string = @$"format!(" + v19370 + ")"
                                                            let v19372 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v19371 
                                                            let v19373 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v19374 : string = Fable.Core.RustInterop.emitRustExpr v19372 v19373 
                                                            let _v19352 = v19374 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v19375 : string = "inline_colorization::color_bright_red"
                                                            let v19376 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v19375 
                                                            let v19377 : string = "&*$0"
                                                            let v19378 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v19338 v19377 
                                                            let v19379 : string = "inline_colorization::color_reset"
                                                            let v19380 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v19379 
                                                            let v19381 : string = "\"{v19376}{v19378}{v19380}\""
                                                            let v19382 : string = @$"format!(" + v19381 + ")"
                                                            let v19383 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v19382 
                                                            let v19384 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v19385 : string = Fable.Core.RustInterop.emitRustExpr v19383 v19384 
                                                            let _v19352 = v19385 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v19386 : string = "\u001b[91m"
                                                            let v19387 : string = method8()
                                                            let v19388 : string = v19386 + v19338 
                                                            let v19389 : string = v19388 + v19387 
                                                            let _v19352 = v19389 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v19390 : string = "\u001b[91m"
                                                            let v19391 : string = method8()
                                                            let v19392 : string = v19390 + v19338 
                                                            let v19393 : string = v19392 + v19391 
                                                            let _v19352 = v19393 
                                                            #endif
#else
                                                            let v19394 : string = "\u001b[91m"
                                                            let v19395 : string = method8()
                                                            let v19396 : string = v19394 + v19338 
                                                            let v19397 : string = v19396 + v19395 
                                                            let _v19352 = v19397 
                                                            #endif
                                                            let v19398 : string = _v19352 
                                                            let v19404 : int64 = v18900.l0
                                                            let v19405 : string = method9()
                                                            let v19406 : Mut4 = {l0 = v19405} : Mut4
                                                            let v19407 : string = "{ "
                                                            let v19408 : string = $"{v19407}"
                                                            let v19411 : string = v19406.l0
                                                            let v19412 : string = v19411 + v19408 
                                                            v19406.l0 <- v19412
                                                            let v19413 : string = "exit_code"
                                                            let v19414 : string = $"{v19413}"
                                                            let v19417 : string = v19406.l0
                                                            let v19418 : string = v19417 + v19414 
                                                            v19406.l0 <- v19418
                                                            let v19419 : string = " = "
                                                            let v19420 : string = $"{v19419}"
                                                            let v19423 : string = v19406.l0
                                                            let v19424 : string = v19423 + v19420 
                                                            v19406.l0 <- v19424
                                                            let v19425 : string = $"{v18821}"
                                                            let v19428 : string = v19406.l0
                                                            let v19429 : string = v19428 + v19425 
                                                            v19406.l0 <- v19429
                                                            let v19430 : string = "; "
                                                            let v19431 : string = $"{v19430}"
                                                            let v19434 : string = v19406.l0
                                                            let v19435 : string = v19434 + v19431 
                                                            v19406.l0 <- v19435
                                                            let v19436 : string = "dotnet_fable_result"
                                                            let v19437 : string = $"{v19436}"
                                                            let v19440 : string = v19406.l0
                                                            let v19441 : string = v19440 + v19437 
                                                            v19406.l0 <- v19441
                                                            let v19442 : string = $"{v19419}"
                                                            let v19445 : string = v19406.l0
                                                            let v19446 : string = v19445 + v19442 
                                                            v19406.l0 <- v19446
                                                            let v19447 : string = $"{v18822}"
                                                            let v19450 : string = v19406.l0
                                                            let v19451 : string = v19450 + v19447 
                                                            v19406.l0 <- v19451
                                                            let v19452 : string = " }"
                                                            let v19453 : string = $"{v19452}"
                                                            let v19456 : string = v19406.l0
                                                            let v19457 : string = v19456 + v19453 
                                                            v19406.l0 <- v19457
                                                            let v19458 : string = v19406.l0
                                                            let v19459 : (unit -> string) = closure82()
                                                            let v19460 : string = $"{v19268} {v19398} #{v19404} %s{v19459 ()} / {v19458}"
                                                            let v19463 : char list = []
                                                            let v19464 : (char list -> (char [])) = List.toArray
                                                            let v19465 : (char []) = v19464 v19463
                                                            let v19468 : string = v19460.TrimStart v19465 
                                                            let v19486 : char list = []
                                                            let v19487 : char list = '/' :: v19486 
                                                            let v19490 : char list = ' ' :: v19487 
                                                            let v19493 : (char list -> (char [])) = List.toArray
                                                            let v19494 : (char []) = v19493 v19490
                                                            let v19497 : string = v19468.TrimEnd v19494 
                                                            let v19515 : unit = ()
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v19516 : string = @"println!(""{}"", $0)"
                                                            Fable.Core.RustInterop.emitRustExpr v19497 v19516 
                                                            let _v19515 = () 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v19517 : string = @"println!(""{}"", $0)"
                                                            Fable.Core.RustInterop.emitRustExpr v19497 v19517 
                                                            let _v19515 = () 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v19518 : string = $"near_sdk::log!(\"{{}}\", $0)"
                                                            Fable.Core.RustInterop.emitRustExpr v19497 v19518 
                                                            let _v19515 = () 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            System.Console.WriteLine v19497 
                                                            let _v19515 = () 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            System.Console.WriteLine v19497 
                                                            let _v19515 = () 
                                                            #endif
#else
                                                            System.Console.WriteLine v19497 
                                                            let _v19515 = () 
                                                            #endif
                                                            _v19515 
                                                            let v19519 : (string -> unit) = v18839.l0
                                                            v19519 v19497
                                                        let v19520 : US1 = US1_0(v17271)
                                                        let v19521 : US1 = US1_1
                                                        let v19522 : US1 = US1_0(v18822)
                                                        struct (v19520, v19521, v19522)
                                                    else
                                                        let v19523 : string = "true; let _result : Vec<_> = v17218.into_iter().map(|x| { //"
                                                        let v19524 : bool = Fable.Core.RustInterop.emitRustExpr () v19523 
                                                        let v19525 : string = "x"
                                                        let v19526 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v19525 
                                                        let v19527 : string = "fable_library_rust::String_::fromString($0)"
                                                        let v19528 : string = Fable.Core.RustInterop.emitRustExpr v19526 v19527 
                                                        let v19529 : string = "="
                                                        let v19530 : bool = v19528.Contains v19529 
                                                        let v19534 : string =
                                                            if v19530 then
                                                                v19528
                                                            else
                                                                let v19533 : string = $"\"{v19528}\":\"*\""
                                                                v19533
                                                        let v19535 : string = "true; $0 }).collect::<Vec<_>>()"
                                                        let v19536 : bool = Fable.Core.RustInterop.emitRustExpr v19534 v19535 
                                                        let v19537 : string = "_result"
                                                        let v19538 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v19537 
                                                        let v19539 : string = "fable_library_rust::NativeArray_::array_from($0)"
                                                        let v19540 : (string []) = Fable.Core.RustInterop.emitRustExpr v19538 v19539 
                                                        let v19541 : string seq = seq { for i = 0 to v19540.Length - 1 do yield v19540.[i] }
                                                        let v19544 : (string -> (string seq -> string)) = String.concat
                                                        let v19545 : string = ",\n"
                                                        let v19546 : (string seq -> string) = v19544 v19545
                                                        let v19547 : string = v19546 v19541
                                                        let v19550 : string = $"{{"
                                                        let v19551 : string = $"  \"name\": \"spiral_builder_{v17275}\","
                                                        let v19552 : string = v19550 + v19551 
                                                        let v19553 : string = $"  \"dependencies\": {{"
                                                        let v19554 : string = v19552 + v19553 
                                                        let v19555 : string = v19554 + v19547 
                                                        let v19556 : string = $"  }},"
                                                        let v19557 : string = v19555 + v19556 
                                                        let v19558 : string = $"    \"devDependencies\": {{"
                                                        let v19559 : string = v19557 + v19558 
                                                        let v19560 : string = $"  }},"
                                                        let v19561 : string = v19559 + v19560 
                                                        let v19562 : string = $"}}"
                                                        let v19563 : string = v19561 + v19562 
                                                        let v19564 : string = "package.json"
                                                        let v19565 : string = method15(v18684, v19564)
                                                        let v19566 : string = "../.."
                                                        let v19567 : string = method15(v18684, v19566)
                                                        let v19568 : string = method15(v19567, v19564)
                                                        method25(v19565, v19563)
                                                        let v19569 : string = ""
                                                        method25(v19568, v19569)
                                                        let v19570 : string = $"{v18678}.{v17271}"
                                                        let v19571 : string = method15(v18684, v19570)
                                                        let v19572 : bool = State.trace_state.IsNone
                                                        if v19572 then
                                                            let v19573 : US0 = US0_0
                                                            let struct (v19574 : Mut0, v19575 : Mut1, v19576 : Mut2, v19577 : Mut3, v19578 : int64 option) = method1(v19573)
                                                            let v19579 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v19574, v19575, v19576, v19577, v19578) 
                                                            State.trace_state <- v19579 
                                                            ()
                                                        let struct (v19584 : Mut0, v19585 : Mut1, v19586 : Mut2, v19587 : Mut3, v19588 : int64 option) = State.trace_state.Value
                                                        let v19599 : bool = State.trace_state.IsNone
                                                        if v19599 then
                                                            let v19600 : US0 = US0_0
                                                            let struct (v19601 : Mut0, v19602 : Mut1, v19603 : Mut2, v19604 : Mut3, v19605 : int64 option) = method1(v19600)
                                                            let v19606 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v19601, v19602, v19603, v19604, v19605) 
                                                            State.trace_state <- v19606 
                                                            ()
                                                        let struct (v19611 : Mut0, v19612 : Mut1, v19613 : Mut2, v19614 : Mut3, v19615 : int64 option) = State.trace_state.Value
                                                        let v19626 : US0 = v19614.l0
                                                        let v19627 : bool = v19613.l0
                                                        let v19628 : bool = v19627 = false
                                                        let v19631 : bool =
                                                            if v19628 then
                                                                false
                                                            else
                                                                let v19629 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v19626
                                                                let v19630 : bool = 1 >= v19629
                                                                v19630
                                                        if v19631 then
                                                            let v19632 : int64 = v19584.l0
                                                            let v19633 : int64 = v19632 + 1L
                                                            v19584.l0 <- v19633
                                                            let v19634 : bool = State.trace_state.IsNone
                                                            if v19634 then
                                                                let v19635 : US0 = US0_0
                                                                let struct (v19636 : Mut0, v19637 : Mut1, v19638 : Mut2, v19639 : Mut3, v19640 : int64 option) = method1(v19635)
                                                                let v19641 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v19636, v19637, v19638, v19639, v19640) 
                                                                State.trace_state <- v19641 
                                                                ()
                                                            let struct (v19646 : Mut0, v19647 : Mut1, v19648 : Mut2, v19649 : Mut3, v19650 : int64 option) = State.trace_state.Value
                                                            let v19661 : unit = ()
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v19662 : US3 option = None
                                                            let _v19662 = ref v19662 
                                                            match v19650 with
                                                            | Some x -> (
                                                            (fun () ->
                                                            (fun () ->
                                                            let v19663 : int64 = x
                                                            let v19664 : US3 = US3_0(v19663)
                                                            v19664 
                                                            )
                                                            |> fun x -> x () |> Some
                                                            ) () ) | None -> None
                                                            |> fun x -> _v19662.Value <- x
                                                            let v19665 : US3 option = _v19662.Value 
                                                            let v19676 : US3 = US3_1
                                                            let v19677 : US3 = v19665 |> Option.defaultValue v19676 
                                                            let v19717 : System.DateTime =
                                                                match v19677 with
                                                                | US3_1 -> (* None *)
                                                                    let v19713 : System.DateTime = System.DateTime.Now
                                                                    v19713
                                                                | US3_0(v19681) -> (* Some *)
                                                                    let v19682 : System.DateTime = System.DateTime.Now
                                                                    let v19685 : (System.DateTime -> int64) = _.Ticks
                                                                    let v19686 : int64 = v19685 v19682
                                                                    let v19689 : int64 = v19686 - v19681
                                                                    let v19690 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                    let v19691 : System.TimeSpan = v19690 v19689
                                                                    let v19694 : (System.TimeSpan -> int32) = _.Hours
                                                                    let v19695 : int32 = v19694 v19691
                                                                    let v19698 : (System.TimeSpan -> int32) = _.Minutes
                                                                    let v19699 : int32 = v19698 v19691
                                                                    let v19702 : (System.TimeSpan -> int32) = _.Seconds
                                                                    let v19703 : int32 = v19702 v19691
                                                                    let v19706 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                    let v19707 : int32 = v19706 v19691
                                                                    let v19710 : System.DateTime = System.DateTime (1, 1, 1, v19695, v19699, v19703, v19707)
                                                                    v19710
                                                            let v19718 : string = method6()
                                                            let v19721 : (string -> string) = v19717.ToString
                                                            let v19722 : string = v19721 v19718
                                                            let _v19661 = v19722 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v19725 : US3 option = None
                                                            let _v19725 = ref v19725 
                                                            match v19650 with
                                                            | Some x -> (
                                                            (fun () ->
                                                            (fun () ->
                                                            let v19726 : int64 = x
                                                            let v19727 : US3 = US3_0(v19726)
                                                            v19727 
                                                            )
                                                            |> fun x -> x () |> Some
                                                            ) () ) | None -> None
                                                            |> fun x -> _v19725.Value <- x
                                                            let v19728 : US3 option = _v19725.Value 
                                                            let v19739 : US3 = US3_1
                                                            let v19740 : US3 = v19728 |> Option.defaultValue v19739 
                                                            let v19780 : System.DateTime =
                                                                match v19740 with
                                                                | US3_1 -> (* None *)
                                                                    let v19776 : System.DateTime = System.DateTime.Now
                                                                    v19776
                                                                | US3_0(v19744) -> (* Some *)
                                                                    let v19745 : System.DateTime = System.DateTime.Now
                                                                    let v19748 : (System.DateTime -> int64) = _.Ticks
                                                                    let v19749 : int64 = v19748 v19745
                                                                    let v19752 : int64 = v19749 - v19744
                                                                    let v19753 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                    let v19754 : System.TimeSpan = v19753 v19752
                                                                    let v19757 : (System.TimeSpan -> int32) = _.Hours
                                                                    let v19758 : int32 = v19757 v19754
                                                                    let v19761 : (System.TimeSpan -> int32) = _.Minutes
                                                                    let v19762 : int32 = v19761 v19754
                                                                    let v19765 : (System.TimeSpan -> int32) = _.Seconds
                                                                    let v19766 : int32 = v19765 v19754
                                                                    let v19769 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                    let v19770 : int32 = v19769 v19754
                                                                    let v19773 : System.DateTime = System.DateTime (1, 1, 1, v19758, v19762, v19766, v19770)
                                                                    v19773
                                                            let v19781 : string = method6()
                                                            let v19784 : (string -> string) = v19780.ToString
                                                            let v19785 : string = v19784 v19781
                                                            let _v19661 = v19785 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v19788 : string = $"near_sdk::env::block_timestamp()"
                                                            let v19789 : uint64 = Fable.Core.RustInterop.emitRustExpr () v19788 
                                                            let v19790 : US3 option = None
                                                            let _v19790 = ref v19790 
                                                            match v19650 with
                                                            | Some x -> (
                                                            (fun () ->
                                                            (fun () ->
                                                            let v19791 : int64 = x
                                                            let v19792 : US3 = US3_0(v19791)
                                                            v19792 
                                                            )
                                                            |> fun x -> x () |> Some
                                                            ) () ) | None -> None
                                                            |> fun x -> _v19790.Value <- x
                                                            let v19793 : US3 option = _v19790.Value 
                                                            let v19804 : US3 = US3_1
                                                            let v19805 : US3 = v19793 |> Option.defaultValue v19804 
                                                            let v19814 : uint64 =
                                                                match v19805 with
                                                                | US3_1 -> (* None *)
                                                                    v19789
                                                                | US3_0(v19809) -> (* Some *)
                                                                    let v19810 : (int64 -> uint64) = uint64
                                                                    let v19811 : uint64 = v19810 v19809
                                                                    let v19812 : uint64 = v19789 - v19811
                                                                    v19812
                                                            let v19815 : uint64 = v19814 / 1000000000UL
                                                            let v19816 : uint64 = v19815 % 60UL
                                                            let v19817 : uint64 = v19815 / 60UL
                                                            let v19818 : uint64 = v19817 % 60UL
                                                            let v19819 : uint64 = v19815 / 3600UL
                                                            let v19820 : uint64 = v19819 % 24UL
                                                            let v19821 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
                                                            let v19822 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v19820, v19818, v19816) v19821 
                                                            let v19823 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v19824 : string = Fable.Core.RustInterop.emitRustExpr v19822 v19823 
                                                            let _v19661 = v19824 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v19825 : US3 option = None
                                                            let _v19825 = ref v19825 
                                                            match v19650 with
                                                            | Some x -> (
                                                            (fun () ->
                                                            (fun () ->
                                                            let v19826 : int64 = x
                                                            let v19827 : US3 = US3_0(v19826)
                                                            v19827 
                                                            )
                                                            |> fun x -> x () |> Some
                                                            ) () ) | None -> None
                                                            |> fun x -> _v19825.Value <- x
                                                            let v19828 : US3 option = _v19825.Value 
                                                            let v19839 : US3 = US3_1
                                                            let v19840 : US3 = v19828 |> Option.defaultValue v19839 
                                                            let v19880 : System.DateTime =
                                                                match v19840 with
                                                                | US3_1 -> (* None *)
                                                                    let v19876 : System.DateTime = System.DateTime.Now
                                                                    v19876
                                                                | US3_0(v19844) -> (* Some *)
                                                                    let v19845 : System.DateTime = System.DateTime.Now
                                                                    let v19848 : (System.DateTime -> int64) = _.Ticks
                                                                    let v19849 : int64 = v19848 v19845
                                                                    let v19852 : int64 = v19849 - v19844
                                                                    let v19853 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                    let v19854 : System.TimeSpan = v19853 v19852
                                                                    let v19857 : (System.TimeSpan -> int32) = _.Hours
                                                                    let v19858 : int32 = v19857 v19854
                                                                    let v19861 : (System.TimeSpan -> int32) = _.Minutes
                                                                    let v19862 : int32 = v19861 v19854
                                                                    let v19865 : (System.TimeSpan -> int32) = _.Seconds
                                                                    let v19866 : int32 = v19865 v19854
                                                                    let v19869 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                    let v19870 : int32 = v19869 v19854
                                                                    let v19873 : System.DateTime = System.DateTime (1, 1, 1, v19858, v19862, v19866, v19870)
                                                                    v19873
                                                            let v19881 : string = method7()
                                                            let v19884 : (string -> string) = v19880.ToString
                                                            let v19885 : string = v19884 v19881
                                                            let _v19661 = v19885 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v19888 : US3 option = None
                                                            let _v19888 = ref v19888 
                                                            match v19650 with
                                                            | Some x -> (
                                                            (fun () ->
                                                            (fun () ->
                                                            let v19889 : int64 = x
                                                            let v19890 : US3 = US3_0(v19889)
                                                            v19890 
                                                            )
                                                            |> fun x -> x () |> Some
                                                            ) () ) | None -> None
                                                            |> fun x -> _v19888.Value <- x
                                                            let v19891 : US3 option = _v19888.Value 
                                                            let v19902 : US3 = US3_1
                                                            let v19903 : US3 = v19891 |> Option.defaultValue v19902 
                                                            let v19943 : System.DateTime =
                                                                match v19903 with
                                                                | US3_1 -> (* None *)
                                                                    let v19939 : System.DateTime = System.DateTime.Now
                                                                    v19939
                                                                | US3_0(v19907) -> (* Some *)
                                                                    let v19908 : System.DateTime = System.DateTime.Now
                                                                    let v19911 : (System.DateTime -> int64) = _.Ticks
                                                                    let v19912 : int64 = v19911 v19908
                                                                    let v19915 : int64 = v19912 - v19907
                                                                    let v19916 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                    let v19917 : System.TimeSpan = v19916 v19915
                                                                    let v19920 : (System.TimeSpan -> int32) = _.Hours
                                                                    let v19921 : int32 = v19920 v19917
                                                                    let v19924 : (System.TimeSpan -> int32) = _.Minutes
                                                                    let v19925 : int32 = v19924 v19917
                                                                    let v19928 : (System.TimeSpan -> int32) = _.Seconds
                                                                    let v19929 : int32 = v19928 v19917
                                                                    let v19932 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                    let v19933 : int32 = v19932 v19917
                                                                    let v19936 : System.DateTime = System.DateTime (1, 1, 1, v19921, v19925, v19929, v19933)
                                                                    v19936
                                                            let v19944 : string = method7()
                                                            let v19947 : (string -> string) = v19943.ToString
                                                            let v19948 : string = v19947 v19944
                                                            let _v19661 = v19948 
                                                            #endif
#else
                                                            let v19951 : US3 option = None
                                                            let _v19951 = ref v19951 
                                                            match v19650 with
                                                            | Some x -> (
                                                            (fun () ->
                                                            (fun () ->
                                                            let v19952 : int64 = x
                                                            let v19953 : US3 = US3_0(v19952)
                                                            v19953 
                                                            )
                                                            |> fun x -> x () |> Some
                                                            ) () ) | None -> None
                                                            |> fun x -> _v19951.Value <- x
                                                            let v19954 : US3 option = _v19951.Value 
                                                            let v19965 : US3 = US3_1
                                                            let v19966 : US3 = v19954 |> Option.defaultValue v19965 
                                                            let v20006 : System.DateTime =
                                                                match v19966 with
                                                                | US3_1 -> (* None *)
                                                                    let v20002 : System.DateTime = System.DateTime.Now
                                                                    v20002
                                                                | US3_0(v19970) -> (* Some *)
                                                                    let v19971 : System.DateTime = System.DateTime.Now
                                                                    let v19974 : (System.DateTime -> int64) = _.Ticks
                                                                    let v19975 : int64 = v19974 v19971
                                                                    let v19978 : int64 = v19975 - v19970
                                                                    let v19979 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                    let v19980 : System.TimeSpan = v19979 v19978
                                                                    let v19983 : (System.TimeSpan -> int32) = _.Hours
                                                                    let v19984 : int32 = v19983 v19980
                                                                    let v19987 : (System.TimeSpan -> int32) = _.Minutes
                                                                    let v19988 : int32 = v19987 v19980
                                                                    let v19991 : (System.TimeSpan -> int32) = _.Seconds
                                                                    let v19992 : int32 = v19991 v19980
                                                                    let v19995 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                    let v19996 : int32 = v19995 v19980
                                                                    let v19999 : System.DateTime = System.DateTime (1, 1, 1, v19984, v19988, v19992, v19996)
                                                                    v19999
                                                            let v20007 : string = method7()
                                                            let v20010 : (string -> string) = v20006.ToString
                                                            let v20011 : string = v20010 v20007
                                                            let _v19661 = v20011 
                                                            #endif
                                                            let v20014 : string = _v19661 
                                                            let v20079 : string = "Debug"
                                                            let v20080 : (unit -> string) = v20079.ToLower
                                                            let v20081 : string = v20080 ()
                                                            let v20084 : string = v20081.PadLeft (7, ' ')
                                                            let v20098 : unit = ()
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v20099 : string = "inline_colorization::color_bright_blue"
                                                            let v20100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v20099 
                                                            let v20101 : string = "&*$0"
                                                            let v20102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v20084 v20101 
                                                            let v20103 : string = "inline_colorization::color_reset"
                                                            let v20104 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v20103 
                                                            let v20105 : string = "\"{v20100}{v20102}{v20104}\""
                                                            let v20106 : string = @$"format!(" + v20105 + ")"
                                                            let v20107 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v20106 
                                                            let v20108 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v20109 : string = Fable.Core.RustInterop.emitRustExpr v20107 v20108 
                                                            let _v20098 = v20109 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v20110 : string = "inline_colorization::color_bright_blue"
                                                            let v20111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v20110 
                                                            let v20112 : string = "&*$0"
                                                            let v20113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v20084 v20112 
                                                            let v20114 : string = "inline_colorization::color_reset"
                                                            let v20115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v20114 
                                                            let v20116 : string = "\"{v20111}{v20113}{v20115}\""
                                                            let v20117 : string = @$"format!(" + v20116 + ")"
                                                            let v20118 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v20117 
                                                            let v20119 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v20120 : string = Fable.Core.RustInterop.emitRustExpr v20118 v20119 
                                                            let _v20098 = v20120 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v20121 : string = "inline_colorization::color_bright_blue"
                                                            let v20122 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v20121 
                                                            let v20123 : string = "&*$0"
                                                            let v20124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v20084 v20123 
                                                            let v20125 : string = "inline_colorization::color_reset"
                                                            let v20126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v20125 
                                                            let v20127 : string = "\"{v20122}{v20124}{v20126}\""
                                                            let v20128 : string = @$"format!(" + v20127 + ")"
                                                            let v20129 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v20128 
                                                            let v20130 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v20131 : string = Fable.Core.RustInterop.emitRustExpr v20129 v20130 
                                                            let _v20098 = v20131 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v20132 : string = "\u001b[94m"
                                                            let v20133 : string = method8()
                                                            let v20134 : string = v20132 + v20084 
                                                            let v20135 : string = v20134 + v20133 
                                                            let _v20098 = v20135 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v20136 : string = "\u001b[94m"
                                                            let v20137 : string = method8()
                                                            let v20138 : string = v20136 + v20084 
                                                            let v20139 : string = v20138 + v20137 
                                                            let _v20098 = v20139 
                                                            #endif
#else
                                                            let v20140 : string = "\u001b[94m"
                                                            let v20141 : string = method8()
                                                            let v20142 : string = v20140 + v20084 
                                                            let v20143 : string = v20142 + v20141 
                                                            let _v20098 = v20143 
                                                            #endif
                                                            let v20144 : string = _v20098 
                                                            let v20150 : int64 = v19646.l0
                                                            let v20151 : string = method9()
                                                            let v20152 : Mut4 = {l0 = v20151} : Mut4
                                                            let v20153 : string = "{ "
                                                            let v20154 : string = $"{v20153}"
                                                            let v20157 : string = v20152.l0
                                                            let v20158 : string = v20157 + v20154 
                                                            v20152.l0 <- v20158
                                                            let v20159 : string = "new_code_path"
                                                            let v20160 : string = $"{v20159}"
                                                            let v20163 : string = v20152.l0
                                                            let v20164 : string = v20163 + v20160 
                                                            v20152.l0 <- v20164
                                                            let v20165 : string = " = "
                                                            let v20166 : string = $"{v20165}"
                                                            let v20169 : string = v20152.l0
                                                            let v20170 : string = v20169 + v20166 
                                                            v20152.l0 <- v20170
                                                            let v20171 : string = $"{v19571}"
                                                            let v20174 : string = v20152.l0
                                                            let v20175 : string = v20174 + v20171 
                                                            v20152.l0 <- v20175
                                                            let v20176 : string = " }"
                                                            let v20177 : string = $"{v20176}"
                                                            let v20180 : string = v20152.l0
                                                            let v20181 : string = v20180 + v20177 
                                                            v20152.l0 <- v20181
                                                            let v20182 : string = v20152.l0
                                                            let v20183 : (unit -> string) = closure83()
                                                            let v20184 : string = $"{v20014} {v20144} #{v20150} %s{v20183 ()} / {v20182}"
                                                            let v20187 : char list = []
                                                            let v20188 : (char list -> (char [])) = List.toArray
                                                            let v20189 : (char []) = v20188 v20187
                                                            let v20192 : string = v20184.TrimStart v20189 
                                                            let v20209 : char list = []
                                                            let v20210 : char list = '/' :: v20209 
                                                            let v20213 : char list = ' ' :: v20210 
                                                            let v20216 : (char list -> (char [])) = List.toArray
                                                            let v20217 : (char []) = v20216 v20213
                                                            let v20220 : string = v20192.TrimEnd v20217 
                                                            let v20237 : unit = ()
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v20238 : string = @"println!(""{}"", $0)"
                                                            Fable.Core.RustInterop.emitRustExpr v20220 v20238 
                                                            let _v20237 = () 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v20239 : string = @"println!(""{}"", $0)"
                                                            Fable.Core.RustInterop.emitRustExpr v20220 v20239 
                                                            let _v20237 = () 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v20240 : string = $"near_sdk::log!(\"{{}}\", $0)"
                                                            Fable.Core.RustInterop.emitRustExpr v20220 v20240 
                                                            let _v20237 = () 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            System.Console.WriteLine v20220 
                                                            let _v20237 = () 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            System.Console.WriteLine v20220 
                                                            let _v20237 = () 
                                                            #endif
#else
                                                            System.Console.WriteLine v20220 
                                                            let _v20237 = () 
                                                            #endif
                                                            _v20237 
                                                            let v20241 : (string -> unit) = v19585.l0
                                                            v20241 v20220
                                                        let v20242 : unit = ()
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v20243 : unit = ()
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v20244 : string = "std::fs::read(&*$0)"
                                                        let v20245 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v19571 v20244 
                                                        let v20246 : string = "$0.unwrap()"
                                                        let v20247 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v20245 v20246 
                                                        let _v20243 = v20247 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v20248 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        let _v20243 = v20248 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v20251 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        let _v20243 = v20251 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v20254 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        let _v20243 = v20254 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v20257 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        let _v20243 = v20257 
                                                        #endif
#else
                                                        let v20260 : (uint8 []) = v19571 |> System.IO.File.ReadAllBytes
                                                        let v20261 : string = "$0.to_vec()"
                                                        let v20262 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v20260 v20261 
                                                        let _v20243 = v20262 
                                                        #endif
                                                        let v20263 : Vec<uint8> = _v20243 
                                                        let v20268 : Vec<uint8> = method14(v20263)
                                                        let v20269 : string = "std::string::String::from_utf8($0)"
                                                        let v20270 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v20268 v20269 
                                                        let v20271 : string = "$0.unwrap()"
                                                        let v20272 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20270 v20271 
                                                        let v20273 : string = "fable_library_rust::String_::fromString($0)"
                                                        let v20274 : string = Fable.Core.RustInterop.emitRustExpr v20272 v20273 
                                                        let _v20242 = v20274 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v20275 : string = null |> unbox<string>
                                                        let _v20242 = v20275 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v20278 : string = null |> unbox<string>
                                                        let _v20242 = v20278 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v20281 : string = null |> unbox<string>
                                                        let _v20242 = v20281 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v20284 : string = null |> unbox<string>
                                                        let _v20242 = v20284 
                                                        #endif
#else
                                                        let v20287 : string = v19571 |> System.IO.File.ReadAllText
                                                        let _v20242 = v20287 
                                                        #endif
                                                        let v20288 : string = _v20242 
                                                        let v20293 : string = "# spiral_builder.process_python"
                                                        let v20294 : bool = v20288.Contains v20293 
                                                        let v20335 : string =
                                                            if v20294 then
                                                                v20288
                                                            else
                                                                let v20297 : string = "\";\".into()"
                                                                let v20298 : string = Fable.Core.RustInterop.emitRustExpr () v20297 
                                                                let v20299 : string = "),)"
                                                                let v20300 : string = v20299 + v20298 
                                                                let v20301 : string = "));"
                                                                let v20302 : string = v20288.Replace (v20300, v20301)
                                                                let v20303 : string = "\\s\\sdefaultOf\\(\\);"
                                                                let v20304 : string = " defaultOf::<()>();"
                                                                let v20305 : unit = ()
                                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                                let v20306 : string = $"regex::Regex::new(&$0)"
                                                                let v20307 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v20303 v20306 
                                                                let v20308 : string = "$0.unwrap()"
                                                                let v20309 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v20307 v20308 
                                                                let v20310 : string = method86(v20302)
                                                                let v20311 : string = $"$0.replace_all(&*$1, &*$2)"
                                                                let v20312 : std_borrow_Cow<Str> = Fable.Core.RustInterop.emitRustExpr struct (v20309, v20310, v20304) v20311 
                                                                let v20313 : string = "String::from($0)"
                                                                let v20314 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20312 v20313 
                                                                let v20315 : string = "fable_library_rust::String_::fromString($0)"
                                                                let v20316 : string = Fable.Core.RustInterop.emitRustExpr v20314 v20315 
                                                                let _v20305 = v20316 
                                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                                let v20317 : string = null |> unbox<string>
                                                                let _v20305 = v20317 
                                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                                let v20320 : string = null |> unbox<string>
                                                                let _v20305 = v20320 
                                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                                let v20323 : string = null |> unbox<string>
                                                                let _v20305 = v20323 
                                                                #endif
#if FABLE_COMPILER_PYTHON
                                                                let v20326 : string = null |> unbox<string>
                                                                let _v20305 = v20326 
                                                                #endif
#else
                                                                let v20329 : string = System.Text.RegularExpressions.Regex.Replace (v20302, v20303, v20304)
                                                                let _v20305 = v20329 
                                                                #endif
                                                                let v20330 : string = _v20305 
                                                                v20330
                                                        let v20336 : bool = v20294 = false
                                                        if v20336 then
                                                            let v20337 : string = $"{v20335}\n\n{v20293}\n"
                                                            method25(v19571, v20337)
                                                        let v20338 : string = $"python \"{v19571}\""
                                                        let v20339 : string = "TRACE_LEVEL"
                                                        let v20340 : string = "Verbose"
                                                        let v20341 : (struct (string * string) []) = [|struct (v20339, v20340)|]
                                                        let v20342 : System.Threading.CancellationToken option = None
                                                        let v20343 : (struct (string * string) []) = [||]
                                                        let v20344 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                        let v20345 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                        let v20346 : string option = None
                                                        let v20352 : Result<string, string> =
                                                            match v18661 with
                                                            | US12_1(v20349) -> (* Error *)
                                                                let v20350 : Result<string, string> = Error v20349 
                                                                v20350
                                                            | US12_0(v20347) -> (* Ok *)
                                                                let v20348 : Result<string, string> = Ok v20347 
                                                                v20348
                                                        let v20353 : string = "v20352.ok()"
                                                        let v20354 : string option = Fable.Core.RustInterop.emitRustExpr () v20353 
                                                        let v20355 : bool = true
                                                        let struct (v20356 : int32, v20357 : string) = method40(v20338, v20342, v20341, v20344, v20345, v20355, v20354)
                                                        let v20358 : int32 = v20341.Length
                                                        let v20359 : (string []) = Array.zeroCreate<string> (v20358)
                                                        let v20360 : Mut5 = {l0 = 0} : Mut5
                                                        while method43(v20358, v20360) do
                                                            let v20362 : int32 = v20360.l0
                                                            let struct (v20363 : string, v20364 : string) = v20341.[int v20362]
                                                            let v20365 : string = $"$env:{v20363}=''{v20364}''"
                                                            v20359.[int v20362] <- v20365
                                                            let v20366 : int32 = v20362 + 1
                                                            v20360.l0 <- v20366
                                                            ()
                                                        let v20367 : string seq = v20359 |> Seq.ofArray
                                                        let v20370 : (string -> (string seq -> string)) = String.concat
                                                        let v20371 : string = ";"
                                                        let v20372 : (string seq -> string) = v20370 v20371
                                                        let v20373 : string = v20372 v20367
                                                        let v20376 : string = $"pwsh -c '{v20373}; {v20338}'"
                                                        let v20377 : bool = v20356 = 0
                                                        let struct (v21135 : US1, v21136 : US1, v21137 : US1) =
                                                            if v20377 then
                                                                let v20378 : (string -> US1) = closure43()
                                                                let v20379 : (unit -> string) = closure84(v20357)
                                                                let v20380 : (exn -> US1) = closure85(v19571, v20357, v20376)
                                                                let v20381 : US1 = US1_1
                                                                let result = ref v20381
                                                                try
                                                                    result.Value <- v20379 () |> v20378 
                                                                with ex ->
                                                                    result.Value <- v20380 ex 
                                                                let v20382 : US1 = result.Value
                                                                let v20392 : string option =
                                                                    match v20382 with
                                                                    | US1_1 -> (* None *)
                                                                        let v20390 : string option = None
                                                                        v20390
                                                                    | US1_0(v20386) -> (* Some *)
                                                                        let v20387 : string option = Some v20386 
                                                                        v20387
                                                                let v20393 : string = "$0.unwrap()"
                                                                let v20394 : string = Fable.Core.RustInterop.emitRustExpr v20392 v20393 
                                                                let v20395 : US1 = US1_0(v17271)
                                                                let v20396 : US1 = US1_0(v20335)
                                                                let v20397 : US1 = US1_0(v20394)
                                                                struct (v20395, v20396, v20397)
                                                            else
                                                                let v20398 : bool = State.trace_state.IsNone
                                                                if v20398 then
                                                                    let v20399 : US0 = US0_0
                                                                    let struct (v20400 : Mut0, v20401 : Mut1, v20402 : Mut2, v20403 : Mut3, v20404 : int64 option) = method1(v20399)
                                                                    let v20405 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v20400, v20401, v20402, v20403, v20404) 
                                                                    State.trace_state <- v20405 
                                                                    ()
                                                                let struct (v20410 : Mut0, v20411 : Mut1, v20412 : Mut2, v20413 : Mut3, v20414 : int64 option) = State.trace_state.Value
                                                                let v20425 : bool = State.trace_state.IsNone
                                                                if v20425 then
                                                                    let v20426 : US0 = US0_0
                                                                    let struct (v20427 : Mut0, v20428 : Mut1, v20429 : Mut2, v20430 : Mut3, v20431 : int64 option) = method1(v20426)
                                                                    let v20432 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v20427, v20428, v20429, v20430, v20431) 
                                                                    State.trace_state <- v20432 
                                                                    ()
                                                                let struct (v20437 : Mut0, v20438 : Mut1, v20439 : Mut2, v20440 : Mut3, v20441 : int64 option) = State.trace_state.Value
                                                                let v20452 : US0 = v20440.l0
                                                                let v20453 : bool = v20439.l0
                                                                let v20454 : bool = v20453 = false
                                                                let v20457 : bool =
                                                                    if v20454 then
                                                                        false
                                                                    else
                                                                        let v20455 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v20452
                                                                        let v20456 : bool = 4 >= v20455
                                                                        v20456
                                                                if v20457 then
                                                                    let v20458 : int64 = v20410.l0
                                                                    let v20459 : int64 = v20458 + 1L
                                                                    v20410.l0 <- v20459
                                                                    let v20460 : bool = State.trace_state.IsNone
                                                                    if v20460 then
                                                                        let v20461 : US0 = US0_0
                                                                        let struct (v20462 : Mut0, v20463 : Mut1, v20464 : Mut2, v20465 : Mut3, v20466 : int64 option) = method1(v20461)
                                                                        let v20467 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v20462, v20463, v20464, v20465, v20466) 
                                                                        State.trace_state <- v20467 
                                                                        ()
                                                                    let struct (v20472 : Mut0, v20473 : Mut1, v20474 : Mut2, v20475 : Mut3, v20476 : int64 option) = State.trace_state.Value
                                                                    let v20487 : unit = ()
                                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                                    let v20488 : US3 option = None
                                                                    let _v20488 = ref v20488 
                                                                    match v20476 with
                                                                    | Some x -> (
                                                                    (fun () ->
                                                                    (fun () ->
                                                                    let v20489 : int64 = x
                                                                    let v20490 : US3 = US3_0(v20489)
                                                                    v20490 
                                                                    )
                                                                    |> fun x -> x () |> Some
                                                                    ) () ) | None -> None
                                                                    |> fun x -> _v20488.Value <- x
                                                                    let v20491 : US3 option = _v20488.Value 
                                                                    let v20502 : US3 = US3_1
                                                                    let v20503 : US3 = v20491 |> Option.defaultValue v20502 
                                                                    let v20543 : System.DateTime =
                                                                        match v20503 with
                                                                        | US3_1 -> (* None *)
                                                                            let v20539 : System.DateTime = System.DateTime.Now
                                                                            v20539
                                                                        | US3_0(v20507) -> (* Some *)
                                                                            let v20508 : System.DateTime = System.DateTime.Now
                                                                            let v20511 : (System.DateTime -> int64) = _.Ticks
                                                                            let v20512 : int64 = v20511 v20508
                                                                            let v20515 : int64 = v20512 - v20507
                                                                            let v20516 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                            let v20517 : System.TimeSpan = v20516 v20515
                                                                            let v20520 : (System.TimeSpan -> int32) = _.Hours
                                                                            let v20521 : int32 = v20520 v20517
                                                                            let v20524 : (System.TimeSpan -> int32) = _.Minutes
                                                                            let v20525 : int32 = v20524 v20517
                                                                            let v20528 : (System.TimeSpan -> int32) = _.Seconds
                                                                            let v20529 : int32 = v20528 v20517
                                                                            let v20532 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                            let v20533 : int32 = v20532 v20517
                                                                            let v20536 : System.DateTime = System.DateTime (1, 1, 1, v20521, v20525, v20529, v20533)
                                                                            v20536
                                                                    let v20544 : string = method6()
                                                                    let v20547 : (string -> string) = v20543.ToString
                                                                    let v20548 : string = v20547 v20544
                                                                    let _v20487 = v20548 
                                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                                    let v20551 : US3 option = None
                                                                    let _v20551 = ref v20551 
                                                                    match v20476 with
                                                                    | Some x -> (
                                                                    (fun () ->
                                                                    (fun () ->
                                                                    let v20552 : int64 = x
                                                                    let v20553 : US3 = US3_0(v20552)
                                                                    v20553 
                                                                    )
                                                                    |> fun x -> x () |> Some
                                                                    ) () ) | None -> None
                                                                    |> fun x -> _v20551.Value <- x
                                                                    let v20554 : US3 option = _v20551.Value 
                                                                    let v20565 : US3 = US3_1
                                                                    let v20566 : US3 = v20554 |> Option.defaultValue v20565 
                                                                    let v20606 : System.DateTime =
                                                                        match v20566 with
                                                                        | US3_1 -> (* None *)
                                                                            let v20602 : System.DateTime = System.DateTime.Now
                                                                            v20602
                                                                        | US3_0(v20570) -> (* Some *)
                                                                            let v20571 : System.DateTime = System.DateTime.Now
                                                                            let v20574 : (System.DateTime -> int64) = _.Ticks
                                                                            let v20575 : int64 = v20574 v20571
                                                                            let v20578 : int64 = v20575 - v20570
                                                                            let v20579 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                            let v20580 : System.TimeSpan = v20579 v20578
                                                                            let v20583 : (System.TimeSpan -> int32) = _.Hours
                                                                            let v20584 : int32 = v20583 v20580
                                                                            let v20587 : (System.TimeSpan -> int32) = _.Minutes
                                                                            let v20588 : int32 = v20587 v20580
                                                                            let v20591 : (System.TimeSpan -> int32) = _.Seconds
                                                                            let v20592 : int32 = v20591 v20580
                                                                            let v20595 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                            let v20596 : int32 = v20595 v20580
                                                                            let v20599 : System.DateTime = System.DateTime (1, 1, 1, v20584, v20588, v20592, v20596)
                                                                            v20599
                                                                    let v20607 : string = method6()
                                                                    let v20610 : (string -> string) = v20606.ToString
                                                                    let v20611 : string = v20610 v20607
                                                                    let _v20487 = v20611 
                                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                                    let v20614 : string = $"near_sdk::env::block_timestamp()"
                                                                    let v20615 : uint64 = Fable.Core.RustInterop.emitRustExpr () v20614 
                                                                    let v20616 : US3 option = None
                                                                    let _v20616 = ref v20616 
                                                                    match v20476 with
                                                                    | Some x -> (
                                                                    (fun () ->
                                                                    (fun () ->
                                                                    let v20617 : int64 = x
                                                                    let v20618 : US3 = US3_0(v20617)
                                                                    v20618 
                                                                    )
                                                                    |> fun x -> x () |> Some
                                                                    ) () ) | None -> None
                                                                    |> fun x -> _v20616.Value <- x
                                                                    let v20619 : US3 option = _v20616.Value 
                                                                    let v20630 : US3 = US3_1
                                                                    let v20631 : US3 = v20619 |> Option.defaultValue v20630 
                                                                    let v20640 : uint64 =
                                                                        match v20631 with
                                                                        | US3_1 -> (* None *)
                                                                            v20615
                                                                        | US3_0(v20635) -> (* Some *)
                                                                            let v20636 : (int64 -> uint64) = uint64
                                                                            let v20637 : uint64 = v20636 v20635
                                                                            let v20638 : uint64 = v20615 - v20637
                                                                            v20638
                                                                    let v20641 : uint64 = v20640 / 1000000000UL
                                                                    let v20642 : uint64 = v20641 % 60UL
                                                                    let v20643 : uint64 = v20641 / 60UL
                                                                    let v20644 : uint64 = v20643 % 60UL
                                                                    let v20645 : uint64 = v20641 / 3600UL
                                                                    let v20646 : uint64 = v20645 % 24UL
                                                                    let v20647 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
                                                                    let v20648 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v20646, v20644, v20642) v20647 
                                                                    let v20649 : string = "fable_library_rust::String_::fromString($0)"
                                                                    let v20650 : string = Fable.Core.RustInterop.emitRustExpr v20648 v20649 
                                                                    let _v20487 = v20650 
                                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                                    let v20651 : US3 option = None
                                                                    let _v20651 = ref v20651 
                                                                    match v20476 with
                                                                    | Some x -> (
                                                                    (fun () ->
                                                                    (fun () ->
                                                                    let v20652 : int64 = x
                                                                    let v20653 : US3 = US3_0(v20652)
                                                                    v20653 
                                                                    )
                                                                    |> fun x -> x () |> Some
                                                                    ) () ) | None -> None
                                                                    |> fun x -> _v20651.Value <- x
                                                                    let v20654 : US3 option = _v20651.Value 
                                                                    let v20665 : US3 = US3_1
                                                                    let v20666 : US3 = v20654 |> Option.defaultValue v20665 
                                                                    let v20706 : System.DateTime =
                                                                        match v20666 with
                                                                        | US3_1 -> (* None *)
                                                                            let v20702 : System.DateTime = System.DateTime.Now
                                                                            v20702
                                                                        | US3_0(v20670) -> (* Some *)
                                                                            let v20671 : System.DateTime = System.DateTime.Now
                                                                            let v20674 : (System.DateTime -> int64) = _.Ticks
                                                                            let v20675 : int64 = v20674 v20671
                                                                            let v20678 : int64 = v20675 - v20670
                                                                            let v20679 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                            let v20680 : System.TimeSpan = v20679 v20678
                                                                            let v20683 : (System.TimeSpan -> int32) = _.Hours
                                                                            let v20684 : int32 = v20683 v20680
                                                                            let v20687 : (System.TimeSpan -> int32) = _.Minutes
                                                                            let v20688 : int32 = v20687 v20680
                                                                            let v20691 : (System.TimeSpan -> int32) = _.Seconds
                                                                            let v20692 : int32 = v20691 v20680
                                                                            let v20695 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                            let v20696 : int32 = v20695 v20680
                                                                            let v20699 : System.DateTime = System.DateTime (1, 1, 1, v20684, v20688, v20692, v20696)
                                                                            v20699
                                                                    let v20707 : string = method7()
                                                                    let v20710 : (string -> string) = v20706.ToString
                                                                    let v20711 : string = v20710 v20707
                                                                    let _v20487 = v20711 
                                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                                    let v20714 : US3 option = None
                                                                    let _v20714 = ref v20714 
                                                                    match v20476 with
                                                                    | Some x -> (
                                                                    (fun () ->
                                                                    (fun () ->
                                                                    let v20715 : int64 = x
                                                                    let v20716 : US3 = US3_0(v20715)
                                                                    v20716 
                                                                    )
                                                                    |> fun x -> x () |> Some
                                                                    ) () ) | None -> None
                                                                    |> fun x -> _v20714.Value <- x
                                                                    let v20717 : US3 option = _v20714.Value 
                                                                    let v20728 : US3 = US3_1
                                                                    let v20729 : US3 = v20717 |> Option.defaultValue v20728 
                                                                    let v20769 : System.DateTime =
                                                                        match v20729 with
                                                                        | US3_1 -> (* None *)
                                                                            let v20765 : System.DateTime = System.DateTime.Now
                                                                            v20765
                                                                        | US3_0(v20733) -> (* Some *)
                                                                            let v20734 : System.DateTime = System.DateTime.Now
                                                                            let v20737 : (System.DateTime -> int64) = _.Ticks
                                                                            let v20738 : int64 = v20737 v20734
                                                                            let v20741 : int64 = v20738 - v20733
                                                                            let v20742 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                            let v20743 : System.TimeSpan = v20742 v20741
                                                                            let v20746 : (System.TimeSpan -> int32) = _.Hours
                                                                            let v20747 : int32 = v20746 v20743
                                                                            let v20750 : (System.TimeSpan -> int32) = _.Minutes
                                                                            let v20751 : int32 = v20750 v20743
                                                                            let v20754 : (System.TimeSpan -> int32) = _.Seconds
                                                                            let v20755 : int32 = v20754 v20743
                                                                            let v20758 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                            let v20759 : int32 = v20758 v20743
                                                                            let v20762 : System.DateTime = System.DateTime (1, 1, 1, v20747, v20751, v20755, v20759)
                                                                            v20762
                                                                    let v20770 : string = method7()
                                                                    let v20773 : (string -> string) = v20769.ToString
                                                                    let v20774 : string = v20773 v20770
                                                                    let _v20487 = v20774 
                                                                    #endif
#else
                                                                    let v20777 : US3 option = None
                                                                    let _v20777 = ref v20777 
                                                                    match v20476 with
                                                                    | Some x -> (
                                                                    (fun () ->
                                                                    (fun () ->
                                                                    let v20778 : int64 = x
                                                                    let v20779 : US3 = US3_0(v20778)
                                                                    v20779 
                                                                    )
                                                                    |> fun x -> x () |> Some
                                                                    ) () ) | None -> None
                                                                    |> fun x -> _v20777.Value <- x
                                                                    let v20780 : US3 option = _v20777.Value 
                                                                    let v20791 : US3 = US3_1
                                                                    let v20792 : US3 = v20780 |> Option.defaultValue v20791 
                                                                    let v20832 : System.DateTime =
                                                                        match v20792 with
                                                                        | US3_1 -> (* None *)
                                                                            let v20828 : System.DateTime = System.DateTime.Now
                                                                            v20828
                                                                        | US3_0(v20796) -> (* Some *)
                                                                            let v20797 : System.DateTime = System.DateTime.Now
                                                                            let v20800 : (System.DateTime -> int64) = _.Ticks
                                                                            let v20801 : int64 = v20800 v20797
                                                                            let v20804 : int64 = v20801 - v20796
                                                                            let v20805 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                                            let v20806 : System.TimeSpan = v20805 v20804
                                                                            let v20809 : (System.TimeSpan -> int32) = _.Hours
                                                                            let v20810 : int32 = v20809 v20806
                                                                            let v20813 : (System.TimeSpan -> int32) = _.Minutes
                                                                            let v20814 : int32 = v20813 v20806
                                                                            let v20817 : (System.TimeSpan -> int32) = _.Seconds
                                                                            let v20818 : int32 = v20817 v20806
                                                                            let v20821 : (System.TimeSpan -> int32) = _.Milliseconds
                                                                            let v20822 : int32 = v20821 v20806
                                                                            let v20825 : System.DateTime = System.DateTime (1, 1, 1, v20810, v20814, v20818, v20822)
                                                                            v20825
                                                                    let v20833 : string = method7()
                                                                    let v20836 : (string -> string) = v20832.ToString
                                                                    let v20837 : string = v20836 v20833
                                                                    let _v20487 = v20837 
                                                                    #endif
                                                                    let v20840 : string = _v20487 
                                                                    let v20905 : string = "Critical"
                                                                    let v20906 : (unit -> string) = v20905.ToLower
                                                                    let v20907 : string = v20906 ()
                                                                    let v20910 : string = v20907.PadLeft (7, ' ')
                                                                    let v20924 : unit = ()
                                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                                    let v20925 : string = "inline_colorization::color_bright_red"
                                                                    let v20926 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v20925 
                                                                    let v20927 : string = "&*$0"
                                                                    let v20928 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v20910 v20927 
                                                                    let v20929 : string = "inline_colorization::color_reset"
                                                                    let v20930 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v20929 
                                                                    let v20931 : string = "\"{v20926}{v20928}{v20930}\""
                                                                    let v20932 : string = @$"format!(" + v20931 + ")"
                                                                    let v20933 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v20932 
                                                                    let v20934 : string = "fable_library_rust::String_::fromString($0)"
                                                                    let v20935 : string = Fable.Core.RustInterop.emitRustExpr v20933 v20934 
                                                                    let _v20924 = v20935 
                                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                                    let v20936 : string = "inline_colorization::color_bright_red"
                                                                    let v20937 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v20936 
                                                                    let v20938 : string = "&*$0"
                                                                    let v20939 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v20910 v20938 
                                                                    let v20940 : string = "inline_colorization::color_reset"
                                                                    let v20941 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v20940 
                                                                    let v20942 : string = "\"{v20937}{v20939}{v20941}\""
                                                                    let v20943 : string = @$"format!(" + v20942 + ")"
                                                                    let v20944 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v20943 
                                                                    let v20945 : string = "fable_library_rust::String_::fromString($0)"
                                                                    let v20946 : string = Fable.Core.RustInterop.emitRustExpr v20944 v20945 
                                                                    let _v20924 = v20946 
                                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                                    let v20947 : string = "inline_colorization::color_bright_red"
                                                                    let v20948 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v20947 
                                                                    let v20949 : string = "&*$0"
                                                                    let v20950 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v20910 v20949 
                                                                    let v20951 : string = "inline_colorization::color_reset"
                                                                    let v20952 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v20951 
                                                                    let v20953 : string = "\"{v20948}{v20950}{v20952}\""
                                                                    let v20954 : string = @$"format!(" + v20953 + ")"
                                                                    let v20955 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v20954 
                                                                    let v20956 : string = "fable_library_rust::String_::fromString($0)"
                                                                    let v20957 : string = Fable.Core.RustInterop.emitRustExpr v20955 v20956 
                                                                    let _v20924 = v20957 
                                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                                    let v20958 : string = "\u001b[91m"
                                                                    let v20959 : string = method8()
                                                                    let v20960 : string = v20958 + v20910 
                                                                    let v20961 : string = v20960 + v20959 
                                                                    let _v20924 = v20961 
                                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                                    let v20962 : string = "\u001b[91m"
                                                                    let v20963 : string = method8()
                                                                    let v20964 : string = v20962 + v20910 
                                                                    let v20965 : string = v20964 + v20963 
                                                                    let _v20924 = v20965 
                                                                    #endif
#else
                                                                    let v20966 : string = "\u001b[91m"
                                                                    let v20967 : string = method8()
                                                                    let v20968 : string = v20966 + v20910 
                                                                    let v20969 : string = v20968 + v20967 
                                                                    let _v20924 = v20969 
                                                                    #endif
                                                                    let v20970 : string = _v20924 
                                                                    let v20976 : int64 = v20472.l0
                                                                    let v20977 : string = method9()
                                                                    let v20978 : Mut4 = {l0 = v20977} : Mut4
                                                                    let v20979 : string = "{ "
                                                                    let v20980 : string = $"{v20979}"
                                                                    let v20983 : string = v20978.l0
                                                                    let v20984 : string = v20983 + v20980 
                                                                    v20978.l0 <- v20984
                                                                    let v20985 : string = "exit_code"
                                                                    let v20986 : string = $"{v20985}"
                                                                    let v20989 : string = v20978.l0
                                                                    let v20990 : string = v20989 + v20986 
                                                                    v20978.l0 <- v20990
                                                                    let v20991 : string = " = "
                                                                    let v20992 : string = $"{v20991}"
                                                                    let v20995 : string = v20978.l0
                                                                    let v20996 : string = v20995 + v20992 
                                                                    v20978.l0 <- v20996
                                                                    let v20997 : string = $"{v20356}"
                                                                    let v21000 : string = v20978.l0
                                                                    let v21001 : string = v21000 + v20997 
                                                                    v20978.l0 <- v21001
                                                                    let v21002 : string = "; "
                                                                    let v21003 : string = $"{v21002}"
                                                                    let v21006 : string = v20978.l0
                                                                    let v21007 : string = v21006 + v21003 
                                                                    v20978.l0 <- v21007
                                                                    let v21008 : string = "run_result"
                                                                    let v21009 : string = $"{v21008}"
                                                                    let v21012 : string = v20978.l0
                                                                    let v21013 : string = v21012 + v21009 
                                                                    v20978.l0 <- v21013
                                                                    let v21014 : string = $"{v20991}"
                                                                    let v21017 : string = v20978.l0
                                                                    let v21018 : string = v21017 + v21014 
                                                                    v20978.l0 <- v21018
                                                                    let v21019 : string = $"{v20357}"
                                                                    let v21022 : string = v20978.l0
                                                                    let v21023 : string = v21022 + v21019 
                                                                    v20978.l0 <- v21023
                                                                    let v21024 : string = $"{v21002}"
                                                                    let v21027 : string = v20978.l0
                                                                    let v21028 : string = v21027 + v21024 
                                                                    v20978.l0 <- v21028
                                                                    let v21029 : string = "new_code_path"
                                                                    let v21030 : string = $"{v21029}"
                                                                    let v21033 : string = v20978.l0
                                                                    let v21034 : string = v21033 + v21030 
                                                                    v20978.l0 <- v21034
                                                                    let v21035 : string = $"{v20991}"
                                                                    let v21038 : string = v20978.l0
                                                                    let v21039 : string = v21038 + v21035 
                                                                    v20978.l0 <- v21039
                                                                    let v21040 : string = $"{v19571}"
                                                                    let v21043 : string = v20978.l0
                                                                    let v21044 : string = v21043 + v21040 
                                                                    v20978.l0 <- v21044
                                                                    let v21045 : string = $"{v21002}"
                                                                    let v21048 : string = v20978.l0
                                                                    let v21049 : string = v21048 + v21045 
                                                                    v20978.l0 <- v21049
                                                                    let v21050 : string = "external_command"
                                                                    let v21051 : string = $"{v21050}"
                                                                    let v21054 : string = v20978.l0
                                                                    let v21055 : string = v21054 + v21051 
                                                                    v20978.l0 <- v21055
                                                                    let v21056 : string = $"{v20991}"
                                                                    let v21059 : string = v20978.l0
                                                                    let v21060 : string = v21059 + v21056 
                                                                    v20978.l0 <- v21060
                                                                    let v21061 : string = $"{v20376}"
                                                                    let v21064 : string = v20978.l0
                                                                    let v21065 : string = v21064 + v21061 
                                                                    v20978.l0 <- v21065
                                                                    let v21066 : string = " }"
                                                                    let v21067 : string = $"{v21066}"
                                                                    let v21070 : string = v20978.l0
                                                                    let v21071 : string = v21070 + v21067 
                                                                    v20978.l0 <- v21071
                                                                    let v21072 : string = v20978.l0
                                                                    let v21073 : (unit -> string) = closure87()
                                                                    let v21074 : string = $"{v20840} {v20970} #{v20976} %s{v21073 ()} / {v21072}"
                                                                    let v21077 : char list = []
                                                                    let v21078 : (char list -> (char [])) = List.toArray
                                                                    let v21079 : (char []) = v21078 v21077
                                                                    let v21082 : string = v21074.TrimStart v21079 
                                                                    let v21099 : char list = []
                                                                    let v21100 : char list = '/' :: v21099 
                                                                    let v21103 : char list = ' ' :: v21100 
                                                                    let v21106 : (char list -> (char [])) = List.toArray
                                                                    let v21107 : (char []) = v21106 v21103
                                                                    let v21110 : string = v21082.TrimEnd v21107 
                                                                    let v21127 : unit = ()
                                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                                    let v21128 : string = @"println!(""{}"", $0)"
                                                                    Fable.Core.RustInterop.emitRustExpr v21110 v21128 
                                                                    let _v21127 = () 
                                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                                    let v21129 : string = @"println!(""{}"", $0)"
                                                                    Fable.Core.RustInterop.emitRustExpr v21110 v21129 
                                                                    let _v21127 = () 
                                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                                    let v21130 : string = $"near_sdk::log!(\"{{}}\", $0)"
                                                                    Fable.Core.RustInterop.emitRustExpr v21110 v21130 
                                                                    let _v21127 = () 
                                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                                    System.Console.WriteLine v21110 
                                                                    let _v21127 = () 
                                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                                    System.Console.WriteLine v21110 
                                                                    let _v21127 = () 
                                                                    #endif
#else
                                                                    System.Console.WriteLine v21110 
                                                                    let _v21127 = () 
                                                                    #endif
                                                                    _v21127 
                                                                    let v21131 : (string -> unit) = v20411.l0
                                                                    v21131 v21110
                                                                let v21132 : US1 = US1_0(v17271)
                                                                let v21133 : US1 = US1_1
                                                                let v21134 : US1 = US1_1
                                                                struct (v21132, v21133, v21134)
                                                        struct (v21135, v21136, v21137)
                                                struct (v21138, v21139, v21140)
                                            else
                                                let v21141 : bool = State.trace_state.IsNone
                                                if v21141 then
                                                    let v21142 : US0 = US0_0
                                                    let struct (v21143 : Mut0, v21144 : Mut1, v21145 : Mut2, v21146 : Mut3, v21147 : int64 option) = method1(v21142)
                                                    let v21148 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v21143, v21144, v21145, v21146, v21147) 
                                                    State.trace_state <- v21148 
                                                    ()
                                                let struct (v21153 : Mut0, v21154 : Mut1, v21155 : Mut2, v21156 : Mut3, v21157 : int64 option) = State.trace_state.Value
                                                let v21168 : bool = State.trace_state.IsNone
                                                if v21168 then
                                                    let v21169 : US0 = US0_0
                                                    let struct (v21170 : Mut0, v21171 : Mut1, v21172 : Mut2, v21173 : Mut3, v21174 : int64 option) = method1(v21169)
                                                    let v21175 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v21170, v21171, v21172, v21173, v21174) 
                                                    State.trace_state <- v21175 
                                                    ()
                                                let struct (v21180 : Mut0, v21181 : Mut1, v21182 : Mut2, v21183 : Mut3, v21184 : int64 option) = State.trace_state.Value
                                                let v21195 : US0 = v21183.l0
                                                let v21196 : bool = v21182.l0
                                                let v21197 : bool = v21196 = false
                                                let v21200 : bool =
                                                    if v21197 then
                                                        false
                                                    else
                                                        let v21198 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v21195
                                                        let v21199 : bool = 1 >= v21198
                                                        v21199
                                                if v21200 then
                                                    let v21201 : int64 = v21153.l0
                                                    let v21202 : int64 = v21201 + 1L
                                                    v21153.l0 <- v21202
                                                    let v21203 : bool = State.trace_state.IsNone
                                                    if v21203 then
                                                        let v21204 : US0 = US0_0
                                                        let struct (v21205 : Mut0, v21206 : Mut1, v21207 : Mut2, v21208 : Mut3, v21209 : int64 option) = method1(v21204)
                                                        let v21210 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v21205, v21206, v21207, v21208, v21209) 
                                                        State.trace_state <- v21210 
                                                        ()
                                                    let struct (v21215 : Mut0, v21216 : Mut1, v21217 : Mut2, v21218 : Mut3, v21219 : int64 option) = State.trace_state.Value
                                                    let v21230 : unit = ()
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v21231 : US3 option = None
                                                    let _v21231 = ref v21231 
                                                    match v21219 with
                                                    | Some x -> (
                                                    (fun () ->
                                                    (fun () ->
                                                    let v21232 : int64 = x
                                                    let v21233 : US3 = US3_0(v21232)
                                                    v21233 
                                                    )
                                                    |> fun x -> x () |> Some
                                                    ) () ) | None -> None
                                                    |> fun x -> _v21231.Value <- x
                                                    let v21234 : US3 option = _v21231.Value 
                                                    let v21245 : US3 = US3_1
                                                    let v21246 : US3 = v21234 |> Option.defaultValue v21245 
                                                    let v21286 : System.DateTime =
                                                        match v21246 with
                                                        | US3_1 -> (* None *)
                                                            let v21282 : System.DateTime = System.DateTime.Now
                                                            v21282
                                                        | US3_0(v21250) -> (* Some *)
                                                            let v21251 : System.DateTime = System.DateTime.Now
                                                            let v21254 : (System.DateTime -> int64) = _.Ticks
                                                            let v21255 : int64 = v21254 v21251
                                                            let v21258 : int64 = v21255 - v21250
                                                            let v21259 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                            let v21260 : System.TimeSpan = v21259 v21258
                                                            let v21263 : (System.TimeSpan -> int32) = _.Hours
                                                            let v21264 : int32 = v21263 v21260
                                                            let v21267 : (System.TimeSpan -> int32) = _.Minutes
                                                            let v21268 : int32 = v21267 v21260
                                                            let v21271 : (System.TimeSpan -> int32) = _.Seconds
                                                            let v21272 : int32 = v21271 v21260
                                                            let v21275 : (System.TimeSpan -> int32) = _.Milliseconds
                                                            let v21276 : int32 = v21275 v21260
                                                            let v21279 : System.DateTime = System.DateTime (1, 1, 1, v21264, v21268, v21272, v21276)
                                                            v21279
                                                    let v21287 : string = method6()
                                                    let v21290 : (string -> string) = v21286.ToString
                                                    let v21291 : string = v21290 v21287
                                                    let _v21230 = v21291 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v21294 : US3 option = None
                                                    let _v21294 = ref v21294 
                                                    match v21219 with
                                                    | Some x -> (
                                                    (fun () ->
                                                    (fun () ->
                                                    let v21295 : int64 = x
                                                    let v21296 : US3 = US3_0(v21295)
                                                    v21296 
                                                    )
                                                    |> fun x -> x () |> Some
                                                    ) () ) | None -> None
                                                    |> fun x -> _v21294.Value <- x
                                                    let v21297 : US3 option = _v21294.Value 
                                                    let v21308 : US3 = US3_1
                                                    let v21309 : US3 = v21297 |> Option.defaultValue v21308 
                                                    let v21349 : System.DateTime =
                                                        match v21309 with
                                                        | US3_1 -> (* None *)
                                                            let v21345 : System.DateTime = System.DateTime.Now
                                                            v21345
                                                        | US3_0(v21313) -> (* Some *)
                                                            let v21314 : System.DateTime = System.DateTime.Now
                                                            let v21317 : (System.DateTime -> int64) = _.Ticks
                                                            let v21318 : int64 = v21317 v21314
                                                            let v21321 : int64 = v21318 - v21313
                                                            let v21322 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                            let v21323 : System.TimeSpan = v21322 v21321
                                                            let v21326 : (System.TimeSpan -> int32) = _.Hours
                                                            let v21327 : int32 = v21326 v21323
                                                            let v21330 : (System.TimeSpan -> int32) = _.Minutes
                                                            let v21331 : int32 = v21330 v21323
                                                            let v21334 : (System.TimeSpan -> int32) = _.Seconds
                                                            let v21335 : int32 = v21334 v21323
                                                            let v21338 : (System.TimeSpan -> int32) = _.Milliseconds
                                                            let v21339 : int32 = v21338 v21323
                                                            let v21342 : System.DateTime = System.DateTime (1, 1, 1, v21327, v21331, v21335, v21339)
                                                            v21342
                                                    let v21350 : string = method6()
                                                    let v21353 : (string -> string) = v21349.ToString
                                                    let v21354 : string = v21353 v21350
                                                    let _v21230 = v21354 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v21357 : string = $"near_sdk::env::block_timestamp()"
                                                    let v21358 : uint64 = Fable.Core.RustInterop.emitRustExpr () v21357 
                                                    let v21359 : US3 option = None
                                                    let _v21359 = ref v21359 
                                                    match v21219 with
                                                    | Some x -> (
                                                    (fun () ->
                                                    (fun () ->
                                                    let v21360 : int64 = x
                                                    let v21361 : US3 = US3_0(v21360)
                                                    v21361 
                                                    )
                                                    |> fun x -> x () |> Some
                                                    ) () ) | None -> None
                                                    |> fun x -> _v21359.Value <- x
                                                    let v21362 : US3 option = _v21359.Value 
                                                    let v21373 : US3 = US3_1
                                                    let v21374 : US3 = v21362 |> Option.defaultValue v21373 
                                                    let v21383 : uint64 =
                                                        match v21374 with
                                                        | US3_1 -> (* None *)
                                                            v21358
                                                        | US3_0(v21378) -> (* Some *)
                                                            let v21379 : (int64 -> uint64) = uint64
                                                            let v21380 : uint64 = v21379 v21378
                                                            let v21381 : uint64 = v21358 - v21380
                                                            v21381
                                                    let v21384 : uint64 = v21383 / 1000000000UL
                                                    let v21385 : uint64 = v21384 % 60UL
                                                    let v21386 : uint64 = v21384 / 60UL
                                                    let v21387 : uint64 = v21386 % 60UL
                                                    let v21388 : uint64 = v21384 / 3600UL
                                                    let v21389 : uint64 = v21388 % 24UL
                                                    let v21390 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
                                                    let v21391 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v21389, v21387, v21385) v21390 
                                                    let v21392 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v21393 : string = Fable.Core.RustInterop.emitRustExpr v21391 v21392 
                                                    let _v21230 = v21393 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v21394 : US3 option = None
                                                    let _v21394 = ref v21394 
                                                    match v21219 with
                                                    | Some x -> (
                                                    (fun () ->
                                                    (fun () ->
                                                    let v21395 : int64 = x
                                                    let v21396 : US3 = US3_0(v21395)
                                                    v21396 
                                                    )
                                                    |> fun x -> x () |> Some
                                                    ) () ) | None -> None
                                                    |> fun x -> _v21394.Value <- x
                                                    let v21397 : US3 option = _v21394.Value 
                                                    let v21408 : US3 = US3_1
                                                    let v21409 : US3 = v21397 |> Option.defaultValue v21408 
                                                    let v21449 : System.DateTime =
                                                        match v21409 with
                                                        | US3_1 -> (* None *)
                                                            let v21445 : System.DateTime = System.DateTime.Now
                                                            v21445
                                                        | US3_0(v21413) -> (* Some *)
                                                            let v21414 : System.DateTime = System.DateTime.Now
                                                            let v21417 : (System.DateTime -> int64) = _.Ticks
                                                            let v21418 : int64 = v21417 v21414
                                                            let v21421 : int64 = v21418 - v21413
                                                            let v21422 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                            let v21423 : System.TimeSpan = v21422 v21421
                                                            let v21426 : (System.TimeSpan -> int32) = _.Hours
                                                            let v21427 : int32 = v21426 v21423
                                                            let v21430 : (System.TimeSpan -> int32) = _.Minutes
                                                            let v21431 : int32 = v21430 v21423
                                                            let v21434 : (System.TimeSpan -> int32) = _.Seconds
                                                            let v21435 : int32 = v21434 v21423
                                                            let v21438 : (System.TimeSpan -> int32) = _.Milliseconds
                                                            let v21439 : int32 = v21438 v21423
                                                            let v21442 : System.DateTime = System.DateTime (1, 1, 1, v21427, v21431, v21435, v21439)
                                                            v21442
                                                    let v21450 : string = method7()
                                                    let v21453 : (string -> string) = v21449.ToString
                                                    let v21454 : string = v21453 v21450
                                                    let _v21230 = v21454 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v21457 : US3 option = None
                                                    let _v21457 = ref v21457 
                                                    match v21219 with
                                                    | Some x -> (
                                                    (fun () ->
                                                    (fun () ->
                                                    let v21458 : int64 = x
                                                    let v21459 : US3 = US3_0(v21458)
                                                    v21459 
                                                    )
                                                    |> fun x -> x () |> Some
                                                    ) () ) | None -> None
                                                    |> fun x -> _v21457.Value <- x
                                                    let v21460 : US3 option = _v21457.Value 
                                                    let v21471 : US3 = US3_1
                                                    let v21472 : US3 = v21460 |> Option.defaultValue v21471 
                                                    let v21512 : System.DateTime =
                                                        match v21472 with
                                                        | US3_1 -> (* None *)
                                                            let v21508 : System.DateTime = System.DateTime.Now
                                                            v21508
                                                        | US3_0(v21476) -> (* Some *)
                                                            let v21477 : System.DateTime = System.DateTime.Now
                                                            let v21480 : (System.DateTime -> int64) = _.Ticks
                                                            let v21481 : int64 = v21480 v21477
                                                            let v21484 : int64 = v21481 - v21476
                                                            let v21485 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                            let v21486 : System.TimeSpan = v21485 v21484
                                                            let v21489 : (System.TimeSpan -> int32) = _.Hours
                                                            let v21490 : int32 = v21489 v21486
                                                            let v21493 : (System.TimeSpan -> int32) = _.Minutes
                                                            let v21494 : int32 = v21493 v21486
                                                            let v21497 : (System.TimeSpan -> int32) = _.Seconds
                                                            let v21498 : int32 = v21497 v21486
                                                            let v21501 : (System.TimeSpan -> int32) = _.Milliseconds
                                                            let v21502 : int32 = v21501 v21486
                                                            let v21505 : System.DateTime = System.DateTime (1, 1, 1, v21490, v21494, v21498, v21502)
                                                            v21505
                                                    let v21513 : string = method7()
                                                    let v21516 : (string -> string) = v21512.ToString
                                                    let v21517 : string = v21516 v21513
                                                    let _v21230 = v21517 
                                                    #endif
#else
                                                    let v21520 : US3 option = None
                                                    let _v21520 = ref v21520 
                                                    match v21219 with
                                                    | Some x -> (
                                                    (fun () ->
                                                    (fun () ->
                                                    let v21521 : int64 = x
                                                    let v21522 : US3 = US3_0(v21521)
                                                    v21522 
                                                    )
                                                    |> fun x -> x () |> Some
                                                    ) () ) | None -> None
                                                    |> fun x -> _v21520.Value <- x
                                                    let v21523 : US3 option = _v21520.Value 
                                                    let v21534 : US3 = US3_1
                                                    let v21535 : US3 = v21523 |> Option.defaultValue v21534 
                                                    let v21575 : System.DateTime =
                                                        match v21535 with
                                                        | US3_1 -> (* None *)
                                                            let v21571 : System.DateTime = System.DateTime.Now
                                                            v21571
                                                        | US3_0(v21539) -> (* Some *)
                                                            let v21540 : System.DateTime = System.DateTime.Now
                                                            let v21543 : (System.DateTime -> int64) = _.Ticks
                                                            let v21544 : int64 = v21543 v21540
                                                            let v21547 : int64 = v21544 - v21539
                                                            let v21548 : (int64 -> System.TimeSpan) = System.TimeSpan 
                                                            let v21549 : System.TimeSpan = v21548 v21547
                                                            let v21552 : (System.TimeSpan -> int32) = _.Hours
                                                            let v21553 : int32 = v21552 v21549
                                                            let v21556 : (System.TimeSpan -> int32) = _.Minutes
                                                            let v21557 : int32 = v21556 v21549
                                                            let v21560 : (System.TimeSpan -> int32) = _.Seconds
                                                            let v21561 : int32 = v21560 v21549
                                                            let v21564 : (System.TimeSpan -> int32) = _.Milliseconds
                                                            let v21565 : int32 = v21564 v21549
                                                            let v21568 : System.DateTime = System.DateTime (1, 1, 1, v21553, v21557, v21561, v21565)
                                                            v21568
                                                    let v21576 : string = method7()
                                                    let v21579 : (string -> string) = v21575.ToString
                                                    let v21580 : string = v21579 v21576
                                                    let _v21230 = v21580 
                                                    #endif
                                                    let v21583 : string = _v21230 
                                                    let v21648 : string = "Debug"
                                                    let v21649 : (unit -> string) = v21648.ToLower
                                                    let v21650 : string = v21649 ()
                                                    let v21653 : string = v21650.PadLeft (7, ' ')
                                                    let v21667 : unit = ()
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v21668 : string = "inline_colorization::color_bright_blue"
                                                    let v21669 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v21668 
                                                    let v21670 : string = "&*$0"
                                                    let v21671 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v21653 v21670 
                                                    let v21672 : string = "inline_colorization::color_reset"
                                                    let v21673 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v21672 
                                                    let v21674 : string = "\"{v21669}{v21671}{v21673}\""
                                                    let v21675 : string = @$"format!(" + v21674 + ")"
                                                    let v21676 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v21675 
                                                    let v21677 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v21678 : string = Fable.Core.RustInterop.emitRustExpr v21676 v21677 
                                                    let _v21667 = v21678 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v21679 : string = "inline_colorization::color_bright_blue"
                                                    let v21680 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v21679 
                                                    let v21681 : string = "&*$0"
                                                    let v21682 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v21653 v21681 
                                                    let v21683 : string = "inline_colorization::color_reset"
                                                    let v21684 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v21683 
                                                    let v21685 : string = "\"{v21680}{v21682}{v21684}\""
                                                    let v21686 : string = @$"format!(" + v21685 + ")"
                                                    let v21687 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v21686 
                                                    let v21688 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v21689 : string = Fable.Core.RustInterop.emitRustExpr v21687 v21688 
                                                    let _v21667 = v21689 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v21690 : string = "inline_colorization::color_bright_blue"
                                                    let v21691 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v21690 
                                                    let v21692 : string = "&*$0"
                                                    let v21693 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v21653 v21692 
                                                    let v21694 : string = "inline_colorization::color_reset"
                                                    let v21695 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v21694 
                                                    let v21696 : string = "\"{v21691}{v21693}{v21695}\""
                                                    let v21697 : string = @$"format!(" + v21696 + ")"
                                                    let v21698 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v21697 
                                                    let v21699 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v21700 : string = Fable.Core.RustInterop.emitRustExpr v21698 v21699 
                                                    let _v21667 = v21700 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v21701 : string = "\u001b[94m"
                                                    let v21702 : string = method8()
                                                    let v21703 : string = v21701 + v21653 
                                                    let v21704 : string = v21703 + v21702 
                                                    let _v21667 = v21704 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v21705 : string = "\u001b[94m"
                                                    let v21706 : string = method8()
                                                    let v21707 : string = v21705 + v21653 
                                                    let v21708 : string = v21707 + v21706 
                                                    let _v21667 = v21708 
                                                    #endif
#else
                                                    let v21709 : string = "\u001b[94m"
                                                    let v21710 : string = method8()
                                                    let v21711 : string = v21709 + v21653 
                                                    let v21712 : string = v21711 + v21710 
                                                    let _v21667 = v21712 
                                                    #endif
                                                    let v21713 : string = _v21667 
                                                    let v21719 : int64 = v21215.l0
                                                    let v21720 : string = method9()
                                                    let v21721 : Mut4 = {l0 = v21720} : Mut4
                                                    let v21722 : string = "{ "
                                                    let v21723 : string = $"{v21722}"
                                                    let v21726 : string = v21721.l0
                                                    let v21727 : string = v21726 + v21723 
                                                    v21721.l0 <- v21727
                                                    let v21728 : string = "subcommand"
                                                    let v21729 : string = $"{v21728}"
                                                    let v21732 : string = v21721.l0
                                                    let v21733 : string = v21732 + v21729 
                                                    v21721.l0 <- v21733
                                                    let v21734 : string = " = "
                                                    let v21735 : string = $"{v21734}"
                                                    let v21738 : string = v21721.l0
                                                    let v21739 : string = v21738 + v21735 
                                                    v21721.l0 <- v21739
                                                    let v21740 : unit = ()
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v21741 : string = "format!(\"{:#?}\", $0)"
                                                    let v21742 : std_string_String = Fable.Core.RustInterop.emitRustExpr v27 v21741 
                                                    let v21743 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v21744 : string = Fable.Core.RustInterop.emitRustExpr v21742 v21743 
                                                    let _v21740 = v21744 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v21745 : string = "format!(\"{:#?}\", $0)"
                                                    let v21746 : std_string_String = Fable.Core.RustInterop.emitRustExpr v27 v21745 
                                                    let v21747 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v21748 : string = Fable.Core.RustInterop.emitRustExpr v21746 v21747 
                                                    let _v21740 = v21748 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v21749 : string = "format!(\"{:#?}\", $0)"
                                                    let v21750 : std_string_String = Fable.Core.RustInterop.emitRustExpr v27 v21749 
                                                    let v21751 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v21752 : string = Fable.Core.RustInterop.emitRustExpr v21750 v21751 
                                                    let _v21740 = v21752 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v21753 : string = $"%A{v27}"
                                                    let _v21740 = v21753 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v21756 : string = $"%A{v27}"
                                                    let _v21740 = v21756 
                                                    #endif
#else
                                                    let v21759 : string = $"%A{v27}"
                                                    let _v21740 = v21759 
                                                    #endif
                                                    let v21762 : string = _v21740 
                                                    let v21767 : string = $"{v21762}"
                                                    let v21770 : string = v21721.l0
                                                    let v21771 : string = v21770 + v21767 
                                                    v21721.l0 <- v21771
                                                    let v21772 : string = "; "
                                                    let v21773 : string = $"{v21772}"
                                                    let v21776 : string = v21721.l0
                                                    let v21777 : string = v21776 + v21773 
                                                    v21721.l0 <- v21777
                                                    let v21778 : string = "arg_matches"
                                                    let v21779 : string = $"{v21778}"
                                                    let v21782 : string = v21721.l0
                                                    let v21783 : string = v21782 + v21779 
                                                    v21721.l0 <- v21783
                                                    let v21784 : string = $"{v21734}"
                                                    let v21787 : string = v21721.l0
                                                    let v21788 : string = v21787 + v21784 
                                                    v21721.l0 <- v21788
                                                    let v21789 : unit = ()
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v21790 : string = "format!(\"{:#?}\", $0)"
                                                    let v21791 : std_string_String = Fable.Core.RustInterop.emitRustExpr v28 v21790 
                                                    let v21792 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v21793 : string = Fable.Core.RustInterop.emitRustExpr v21791 v21792 
                                                    let _v21789 = v21793 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v21794 : string = "format!(\"{:#?}\", $0)"
                                                    let v21795 : std_string_String = Fable.Core.RustInterop.emitRustExpr v28 v21794 
                                                    let v21796 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v21797 : string = Fable.Core.RustInterop.emitRustExpr v21795 v21796 
                                                    let _v21789 = v21797 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v21798 : string = "format!(\"{:#?}\", $0)"
                                                    let v21799 : std_string_String = Fable.Core.RustInterop.emitRustExpr v28 v21798 
                                                    let v21800 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v21801 : string = Fable.Core.RustInterop.emitRustExpr v21799 v21800 
                                                    let _v21789 = v21801 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v21802 : string = $"%A{v28}"
                                                    let _v21789 = v21802 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v21805 : string = $"%A{v28}"
                                                    let _v21789 = v21805 
                                                    #endif
#else
                                                    let v21808 : string = $"%A{v28}"
                                                    let _v21789 = v21808 
                                                    #endif
                                                    let v21811 : string = _v21789 
                                                    let v21816 : string = $"{v21811}"
                                                    let v21819 : string = v21721.l0
                                                    let v21820 : string = v21819 + v21816 
                                                    v21721.l0 <- v21820
                                                    let v21821 : string = " }"
                                                    let v21822 : string = $"{v21821}"
                                                    let v21825 : string = v21721.l0
                                                    let v21826 : string = v21825 + v21822 
                                                    v21721.l0 <- v21826
                                                    let v21827 : string = v21721.l0
                                                    let v21828 : (unit -> string) = closure88()
                                                    let v21829 : string = $"{v21583} {v21713} #{v21719} %s{v21828 ()} / {v21827}"
                                                    let v21832 : char list = []
                                                    let v21833 : (char list -> (char [])) = List.toArray
                                                    let v21834 : (char []) = v21833 v21832
                                                    let v21837 : string = v21829.TrimStart v21834 
                                                    let v21855 : char list = []
                                                    let v21856 : char list = '/' :: v21855 
                                                    let v21859 : char list = ' ' :: v21856 
                                                    let v21862 : (char list -> (char [])) = List.toArray
                                                    let v21863 : (char []) = v21862 v21859
                                                    let v21866 : string = v21837.TrimEnd v21863 
                                                    let v21884 : unit = ()
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v21885 : string = @"println!(""{}"", $0)"
                                                    Fable.Core.RustInterop.emitRustExpr v21866 v21885 
                                                    let _v21884 = () 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v21886 : string = @"println!(""{}"", $0)"
                                                    Fable.Core.RustInterop.emitRustExpr v21866 v21886 
                                                    let _v21884 = () 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v21887 : string = $"near_sdk::log!(\"{{}}\", $0)"
                                                    Fable.Core.RustInterop.emitRustExpr v21866 v21887 
                                                    let _v21884 = () 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    System.Console.WriteLine v21866 
                                                    let _v21884 = () 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    System.Console.WriteLine v21866 
                                                    let _v21884 = () 
                                                    #endif
#else
                                                    System.Console.WriteLine v21866 
                                                    let _v21884 = () 
                                                    #endif
                                                    _v21884 
                                                    let v21888 : (string -> unit) = v21154.l0
                                                    v21888 v21866
                                                let v21889 : US1 = US1_1
                                                let v21890 : US1 = US1_1
                                                let v21891 : US1 = US1_1
                                                struct (v21889, v21890, v21891)
                                        struct (v21892, v21893, v21894)
                                struct (v21895, v21896, v21897)
                        let v21904 : string =
                            match v21898 with
                            | US1_1 -> (* None *)
                                let v21902 : string = ""
                                v21902
                            | US1_0(v21901) -> (* Some *)
                                v21901
                        let v21905 : string = "extension"
                        let v21909 : string =
                            match v21899 with
                            | US1_1 -> (* None *)
                                let v21907 : string = ""
                                v21907
                            | US1_0(v21906) -> (* Some *)
                                v21906
                        let v21910 : string = "code"
                        let v21914 : string =
                            match v21900 with
                            | US1_1 -> (* None *)
                                let v21912 : string = ""
                                v21912
                            | US1_0(v21911) -> (* Some *)
                                v21911
                        let v21915 : string = "output"
                        [|struct (v21905, v21904); struct (v21910, v21909); struct (v21915, v21914)|]
        | _ ->
            let v21920 : string = "extension"
            let v21921 : string = ""
            let v21922 : string = "code"
            let v21923 : string = "output"
            [|struct (v21920, v21921); struct (v21922, v21921); struct (v21923, v21921)|]
    let v21926 : string = "$0.to_vec()"
    let v21927 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v21925 v21926 
    let v21928 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v21929 : (struct (string * string) -> (std_string_String * std_string_String)) = closure89()
    let v21930 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v21927, v21929) v21928 
    let v21931 : string = "std::collections::BTreeMap::from_iter(v21930.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
    let v21932 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v21931 
    let v21933 : string = "serde_json::to_string(&v21932)"
    let v21934 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v21933 
    let v21935 : (serde_json_Error -> string) = method122()
    let v21936 : string = "$0.map_err(|x| $1(x))"
    let v21937 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v21934, v21935) v21936 
    let v21938 : string = "true; let _result = $0.map(|x| { //"
    let v21939 : bool = Fable.Core.RustInterop.emitRustExpr v21937 v21938 
    let v21940 : string = "x"
    let v21941 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v21940 
    let v21942 : string = "fable_library_rust::String_::fromString($0)"
    let v21943 : string = Fable.Core.RustInterop.emitRustExpr v21941 v21942 
    let v21944 : string = "true; $0 })"
    let v21945 : bool = Fable.Core.RustInterop.emitRustExpr v21943 v21944 
    let v21946 : string = "_result"
    let v21947 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr () v21946 
    let v21948 : Result<string, string> = method123(v21947)
    let v21949 : string = ""
    let v21950 : string = "}"
    let v21951 : string = v21949 + v21950 
    let v21952 : string = v21951 + v21950 
    let v21953 : string = v21952 + v21950 
    let v21954 : string = "{"
    let v21955 : string = v21949 + v21954 
    let v21956 : string = v21955 + v21954 
    let v21957 : string = "v21948 " + v21953 + "); " + v21956 + " // rust.fix_closure'"
    Fable.Core.RustInterop.emitRustExpr () v21957 
    let v21958 : string = "__result"
    let v21959 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = Fable.Core.RustInterop.emitRustExpr () v21958 
    v21959
and closure1 () (v0 : (string [])) : int32 =
    let v1 : bool = State.trace_state.IsNone
    if v1 then
        let v2 : US0 = US0_0
        let struct (v3 : Mut0, v4 : Mut1, v5 : Mut2, v6 : Mut3, v7 : int64 option) = method1(v2)
        let v8 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v3, v4, v5, v6, v7) 
        State.trace_state <- v8 
        ()
    let struct (v13 : Mut0, v14 : Mut1, v15 : Mut2, v16 : Mut3, v17 : int64 option) = State.trace_state.Value
    let v28 : bool = State.trace_state.IsNone
    if v28 then
        let v29 : US0 = US0_0
        let struct (v30 : Mut0, v31 : Mut1, v32 : Mut2, v33 : Mut3, v34 : int64 option) = method1(v29)
        let v35 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v30, v31, v32, v33, v34) 
        State.trace_state <- v35 
        ()
    let struct (v40 : Mut0, v41 : Mut1, v42 : Mut2, v43 : Mut3, v44 : int64 option) = State.trace_state.Value
    let v55 : bool = State.trace_state.IsNone
    if v55 then
        let v56 : US0 = US0_0
        let struct (v57 : Mut0, v58 : Mut1, v59 : Mut2, v60 : Mut3, v61 : int64 option) = method1(v56)
        let v62 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v57, v58, v59, v60, v61) 
        State.trace_state <- v62 
        ()
    let struct (v67 : Mut0, v68 : Mut1, v69 : Mut2, v70 : Mut3, v71 : int64 option) = State.trace_state.Value
    let v82 : US0 = v70.l0
    let v83 : bool = v69.l0
    let v84 : bool = v83 = false
    let v87 : bool =
        if v84 then
            false
        else
            let v85 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v82
            let v86 : bool = 1 >= v85
            v86
    if v87 then
        let v88 : int64 = v40.l0
        let v89 : int64 = v88 + 1L
        v40.l0 <- v89
        let v90 : bool = State.trace_state.IsNone
        if v90 then
            let v91 : US0 = US0_0
            let struct (v92 : Mut0, v93 : Mut1, v94 : Mut2, v95 : Mut3, v96 : int64 option) = method1(v91)
            let v97 : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) option = Some struct (v92, v93, v94, v95, v96) 
            State.trace_state <- v97 
            ()
        let struct (v102 : Mut0, v103 : Mut1, v104 : Mut2, v105 : Mut3, v106 : int64 option) = State.trace_state.Value
        let v117 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v118 : US3 option = None
        let _v118 = ref v118 
        match v106 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v119 : int64 = x
        let v120 : US3 = US3_0(v119)
        v120 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v118.Value <- x
        let v121 : US3 option = _v118.Value 
        let v132 : US3 = US3_1
        let v133 : US3 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US3_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US3_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method6()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v117 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US3 option = None
        let _v181 = ref v181 
        match v106 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v182 : int64 = x
        let v183 : US3 = US3_0(v182)
        v183 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v181.Value <- x
        let v184 : US3 option = _v181.Value 
        let v195 : US3 = US3_1
        let v196 : US3 = v184 |> Option.defaultValue v195 
        let v236 : System.DateTime =
            match v196 with
            | US3_1 -> (* None *)
                let v232 : System.DateTime = System.DateTime.Now
                v232
            | US3_0(v200) -> (* Some *)
                let v201 : System.DateTime = System.DateTime.Now
                let v204 : (System.DateTime -> int64) = _.Ticks
                let v205 : int64 = v204 v201
                let v208 : int64 = v205 - v200
                let v209 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v210 : System.TimeSpan = v209 v208
                let v213 : (System.TimeSpan -> int32) = _.Hours
                let v214 : int32 = v213 v210
                let v217 : (System.TimeSpan -> int32) = _.Minutes
                let v218 : int32 = v217 v210
                let v221 : (System.TimeSpan -> int32) = _.Seconds
                let v222 : int32 = v221 v210
                let v225 : (System.TimeSpan -> int32) = _.Milliseconds
                let v226 : int32 = v225 v210
                let v229 : System.DateTime = System.DateTime (1, 1, 1, v214, v218, v222, v226)
                v229
        let v237 : string = method6()
        let v240 : (string -> string) = v236.ToString
        let v241 : string = v240 v237
        let _v117 = v241 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v244 : string = $"near_sdk::env::block_timestamp()"
        let v245 : uint64 = Fable.Core.RustInterop.emitRustExpr () v244 
        let v246 : US3 option = None
        let _v246 = ref v246 
        match v106 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v247 : int64 = x
        let v248 : US3 = US3_0(v247)
        v248 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v246.Value <- x
        let v249 : US3 option = _v246.Value 
        let v260 : US3 = US3_1
        let v261 : US3 = v249 |> Option.defaultValue v260 
        let v270 : uint64 =
            match v261 with
            | US3_1 -> (* None *)
                v245
            | US3_0(v265) -> (* Some *)
                let v266 : (int64 -> uint64) = uint64
                let v267 : uint64 = v266 v265
                let v268 : uint64 = v245 - v267
                v268
        let v271 : uint64 = v270 / 1000000000UL
        let v272 : uint64 = v271 % 60UL
        let v273 : uint64 = v271 / 60UL
        let v274 : uint64 = v273 % 60UL
        let v275 : uint64 = v271 / 3600UL
        let v276 : uint64 = v275 % 24UL
        let v277 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v278 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v276, v274, v272) v277 
        let v279 : string = "fable_library_rust::String_::fromString($0)"
        let v280 : string = Fable.Core.RustInterop.emitRustExpr v278 v279 
        let _v117 = v280 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v281 : US3 option = None
        let _v281 = ref v281 
        match v106 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v282 : int64 = x
        let v283 : US3 = US3_0(v282)
        v283 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v281.Value <- x
        let v284 : US3 option = _v281.Value 
        let v295 : US3 = US3_1
        let v296 : US3 = v284 |> Option.defaultValue v295 
        let v336 : System.DateTime =
            match v296 with
            | US3_1 -> (* None *)
                let v332 : System.DateTime = System.DateTime.Now
                v332
            | US3_0(v300) -> (* Some *)
                let v301 : System.DateTime = System.DateTime.Now
                let v304 : (System.DateTime -> int64) = _.Ticks
                let v305 : int64 = v304 v301
                let v308 : int64 = v305 - v300
                let v309 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v310 : System.TimeSpan = v309 v308
                let v313 : (System.TimeSpan -> int32) = _.Hours
                let v314 : int32 = v313 v310
                let v317 : (System.TimeSpan -> int32) = _.Minutes
                let v318 : int32 = v317 v310
                let v321 : (System.TimeSpan -> int32) = _.Seconds
                let v322 : int32 = v321 v310
                let v325 : (System.TimeSpan -> int32) = _.Milliseconds
                let v326 : int32 = v325 v310
                let v329 : System.DateTime = System.DateTime (1, 1, 1, v314, v318, v322, v326)
                v329
        let v337 : string = method7()
        let v340 : (string -> string) = v336.ToString
        let v341 : string = v340 v337
        let _v117 = v341 
        #endif
#if FABLE_COMPILER_PYTHON
        let v344 : US3 option = None
        let _v344 = ref v344 
        match v106 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v345 : int64 = x
        let v346 : US3 = US3_0(v345)
        v346 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v344.Value <- x
        let v347 : US3 option = _v344.Value 
        let v358 : US3 = US3_1
        let v359 : US3 = v347 |> Option.defaultValue v358 
        let v399 : System.DateTime =
            match v359 with
            | US3_1 -> (* None *)
                let v395 : System.DateTime = System.DateTime.Now
                v395
            | US3_0(v363) -> (* Some *)
                let v364 : System.DateTime = System.DateTime.Now
                let v367 : (System.DateTime -> int64) = _.Ticks
                let v368 : int64 = v367 v364
                let v371 : int64 = v368 - v363
                let v372 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v373 : System.TimeSpan = v372 v371
                let v376 : (System.TimeSpan -> int32) = _.Hours
                let v377 : int32 = v376 v373
                let v380 : (System.TimeSpan -> int32) = _.Minutes
                let v381 : int32 = v380 v373
                let v384 : (System.TimeSpan -> int32) = _.Seconds
                let v385 : int32 = v384 v373
                let v388 : (System.TimeSpan -> int32) = _.Milliseconds
                let v389 : int32 = v388 v373
                let v392 : System.DateTime = System.DateTime (1, 1, 1, v377, v381, v385, v389)
                v392
        let v400 : string = method7()
        let v403 : (string -> string) = v399.ToString
        let v404 : string = v403 v400
        let _v117 = v404 
        #endif
#else
        let v407 : US3 option = None
        let _v407 = ref v407 
        match v106 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v408 : int64 = x
        let v409 : US3 = US3_0(v408)
        v409 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v407.Value <- x
        let v410 : US3 option = _v407.Value 
        let v421 : US3 = US3_1
        let v422 : US3 = v410 |> Option.defaultValue v421 
        let v462 : System.DateTime =
            match v422 with
            | US3_1 -> (* None *)
                let v458 : System.DateTime = System.DateTime.Now
                v458
            | US3_0(v426) -> (* Some *)
                let v427 : System.DateTime = System.DateTime.Now
                let v430 : (System.DateTime -> int64) = _.Ticks
                let v431 : int64 = v430 v427
                let v434 : int64 = v431 - v426
                let v435 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v436 : System.TimeSpan = v435 v434
                let v439 : (System.TimeSpan -> int32) = _.Hours
                let v440 : int32 = v439 v436
                let v443 : (System.TimeSpan -> int32) = _.Minutes
                let v444 : int32 = v443 v436
                let v447 : (System.TimeSpan -> int32) = _.Seconds
                let v448 : int32 = v447 v436
                let v451 : (System.TimeSpan -> int32) = _.Milliseconds
                let v452 : int32 = v451 v436
                let v455 : System.DateTime = System.DateTime (1, 1, 1, v440, v444, v448, v452)
                v455
        let v463 : string = method7()
        let v466 : (string -> string) = v462.ToString
        let v467 : string = v466 v463
        let _v117 = v467 
        #endif
        let v470 : string = _v117 
        let v535 : string = "Debug"
        let v536 : (unit -> string) = v535.ToLower
        let v537 : string = v536 ()
        let v540 : string = v537.PadLeft (7, ' ')
        let v554 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v555 : string = "inline_colorization::color_bright_blue"
        let v556 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v555 
        let v557 : string = "&*$0"
        let v558 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v540 v557 
        let v559 : string = "inline_colorization::color_reset"
        let v560 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v559 
        let v561 : string = "\"{v556}{v558}{v560}\""
        let v562 : string = @$"format!(" + v561 + ")"
        let v563 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v562 
        let v564 : string = "fable_library_rust::String_::fromString($0)"
        let v565 : string = Fable.Core.RustInterop.emitRustExpr v563 v564 
        let _v554 = v565 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v566 : string = "inline_colorization::color_bright_blue"
        let v567 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v566 
        let v568 : string = "&*$0"
        let v569 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v540 v568 
        let v570 : string = "inline_colorization::color_reset"
        let v571 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v570 
        let v572 : string = "\"{v567}{v569}{v571}\""
        let v573 : string = @$"format!(" + v572 + ")"
        let v574 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v573 
        let v575 : string = "fable_library_rust::String_::fromString($0)"
        let v576 : string = Fable.Core.RustInterop.emitRustExpr v574 v575 
        let _v554 = v576 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v577 : string = "inline_colorization::color_bright_blue"
        let v578 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v577 
        let v579 : string = "&*$0"
        let v580 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v540 v579 
        let v581 : string = "inline_colorization::color_reset"
        let v582 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v581 
        let v583 : string = "\"{v578}{v580}{v582}\""
        let v584 : string = @$"format!(" + v583 + ")"
        let v585 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v584 
        let v586 : string = "fable_library_rust::String_::fromString($0)"
        let v587 : string = Fable.Core.RustInterop.emitRustExpr v585 v586 
        let _v554 = v587 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v588 : string = "\u001b[94m"
        let v589 : string = method8()
        let v590 : string = v588 + v540 
        let v591 : string = v590 + v589 
        let _v554 = v591 
        #endif
#if FABLE_COMPILER_PYTHON
        let v592 : string = "\u001b[94m"
        let v593 : string = method8()
        let v594 : string = v592 + v540 
        let v595 : string = v594 + v593 
        let _v554 = v595 
        #endif
#else
        let v596 : string = "\u001b[94m"
        let v597 : string = method8()
        let v598 : string = v596 + v540 
        let v599 : string = v598 + v597 
        let _v554 = v599 
        #endif
        let v600 : string = _v554 
        let v606 : int64 = v102.l0
        let v607 : string = method9()
        let v608 : Mut4 = {l0 = v607} : Mut4
        let v609 : string = "{ "
        let v610 : string = $"{v609}"
        let v613 : string = v608.l0
        let v614 : string = v613 + v610 
        v608.l0 <- v614
        let v615 : string = "args"
        let v616 : string = $"{v615}"
        let v619 : string = v608.l0
        let v620 : string = v619 + v616 
        v608.l0 <- v620
        let v621 : string = " = "
        let v622 : string = $"{v621}"
        let v625 : string = v608.l0
        let v626 : string = v625 + v622 
        v608.l0 <- v626
        let v627 : string = $"%A{v0}"
        let v630 : string = $"{v627}"
        let v633 : string = v608.l0
        let v634 : string = v633 + v630 
        v608.l0 <- v634
        let v635 : string = " }"
        let v636 : string = $"{v635}"
        let v639 : string = v608.l0
        let v640 : string = v639 + v636 
        v608.l0 <- v640
        let v641 : string = v608.l0
        let v642 : (unit -> string) = closure3()
        let v643 : string = $"{v470} {v600} #{v606} %s{v642 ()} / {v641}"
        let v646 : char list = []
        let v647 : (char list -> (char [])) = List.toArray
        let v648 : (char []) = v647 v646
        let v651 : string = v643.TrimStart v648 
        let v669 : char list = []
        let v670 : char list = '/' :: v669 
        let v673 : char list = ' ' :: v670 
        let v676 : (char list -> (char [])) = List.toArray
        let v677 : (char []) = v676 v673
        let v680 : string = v651.TrimEnd v677 
        let v698 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v699 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v680 v699 
        let _v698 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v700 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v680 v700 
        let _v698 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v701 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v680 v701 
        let _v698 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        System.Console.WriteLine v680 
        let _v698 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        System.Console.WriteLine v680 
        let _v698 = () 
        #endif
#else
        System.Console.WriteLine v680 
        let _v698 = () 
        #endif
        _v698 
        let v702 : (string -> unit) = v41.l0
        v702 v680
    let v703 : clap_Command = method0()
    let v704 : string = "clap::Command::get_matches($0)"
    let v705 : clap_ArgMatches = Fable.Core.RustInterop.emitRustExpr v703 v704 
    let v706 : US0 = v16.l0
    let v707 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = method10(v706, v705)
    let v708 : string = $"tokio::runtime::Builder::new_multi_thread().enable_all().build().unwrap()"
    let v709 : _ = Fable.Core.RustInterop.emitRustExpr () v708 
    let v710 : string = "v709.handle().block_on($0)"
    let v711 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr v707 v710 
    let v712 : string = "$0.unwrap()"
    let v713 : string = Fable.Core.RustInterop.emitRustExpr v711 v712 
    let v714 : US0 = v16.l0
    let v715 : bool =
        match v714 with
        | US0_2 -> (* Info *)
            true
        | _ ->
            false
    if v715 then
        v713 |> System.Console.WriteLine
        ()
    0
let v0 : (unit -> unit) = closure0()
let tests () = v0 ()
let v1 : ((string []) -> int32) = closure1()
let main args = v1 args
()
