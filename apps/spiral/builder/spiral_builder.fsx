#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("&$0")>]
#endif
type Ref<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Command")>]
#endif
type clap_Command = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Arg")>]
#endif
type clap_Arg = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Vec<$0>")>]
#endif
type Vec<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::String")>]
#endif
type std_string_String = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Box<$0>")>]
#endif
type Box<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::PossibleValue")>]
#endif
type clap_builder_PossibleValue = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::ValueParser")>]
#endif
type clap_builder_ValueParser = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::ValueRange")>]
#endif
type clap_builder_ValueRange = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::ArgAction")>]
#endif
type clap_ArgAction = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::ArgMatches")>]
#endif
type clap_ArgMatches = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::PathBuf")>]
#endif
type std_path_PathBuf = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::Display")>]
#endif
type std_path_Display = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Error")>]
#endif
type std_io_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::ffi::OsString")>]
#endif
type std_ffi_OsString = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Command")>]
#endif
type std_process_Command = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Stdio")>]
#endif
type std_process_Stdio = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Child")>]
#endif
type std_process_Child = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::Mutex<$0>")>]
#endif
type std_sync_Mutex<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::Arc<$0>")>]
#endif
type std_sync_Arc<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::MutexGuard<$0>")>]
#endif
type std_sync_MutexGuard<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStdout")>]
#endif
type std_process_ChildStdout = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStderr")>]
#endif
type std_process_ChildStderr = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStdin")>]
#endif
type std_process_ChildStdin = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::Sender<$0>")>]
#endif
type std_sync_mpsc_Sender<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("encoding_rs_io::DecodeReaderBytes<$0, $1>")>]
#endif
type encoding_rs_io_DecodeReaderBytes<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::BufReader<$0>")>]
#endif
type std_io_BufReader<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Lines<$0>")>]
#endif
type std_io_Lines<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::borrow::Cow<$0>")>]
#endif
type std_borrow_Cow<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::SendError<$0>")>]
#endif
type std_sync_mpsc_SendError<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("_")>]
#endif
type core_ops_Try<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::thread::JoinHandle<$0>")>]
#endif
type std_thread_JoinHandle<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Output")>]
#endif
type std_process_Output = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ExitStatus")>]
#endif
type std_process_ExitStatus = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::BTreeMap<$0, $1>")>]
#endif
type std_collections_BTreeMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::pin::Pin<$0>")>]
#endif
type std_pin_Pin<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Regex")>]
#endif
type regex_Regex = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Cursor<$0>")>]
#endif
type std_io_Cursor<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("sha2::Sha256")>]
#endif
type sha2_Sha256 = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("_")>]
#endif
type Slice'<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::DateTime<$0>")>]
#endif
type chrono_DateTime<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::NaiveDateTime")>]
#endif
type chrono_NaiveDateTime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::CaptureMatches")>]
#endif
type regex_CaptureMatches = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Captures<$0>")>]
#endif
type regex_Captures<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::CaptureNames")>]
#endif
type regex_CaptureNames = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::HashMap<$0, $1>")>]
#endif
type std_collections_HashMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::WalkDir")>]
#endif
type async_walkdir_WalkDir = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::DirEntry")>]
#endif
type async_walkdir_DirEntry = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::fs::FileType")>]
#endif
type std_fs_FileType = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::Filtering")>]
#endif
type async_walkdir_Filtering = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::Error")>]
#endif
type async_walkdir_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rayon::vec::IntoIter<$0>")>]
#endif
type rayon_vec_IntoIter<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rayon::iter::Map<$0, _>")>]
#endif
type rayon_iter_Map<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("serde_json::Error")>]
#endif
type serde_json_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 $1")>]
#endif
type Lifetime<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("'static")>]
#endif
type StaticLifetime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("str")>]
#endif
type Str = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("mut $0")>]
#endif
type Mut<'T> = class end
module State = let mutable trace_state = None
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::env::VarError")>]
#endif
type std_env_VarError = class end
type IOsEnviron = abstract environ: x: unit -> obj
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("dyn $0")>]
#endif
type Dyn<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::future::Future<Output = $0>")>]
#endif
type std_future_Future<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::FromUtf8Error")>]
#endif
type std_string_FromUtf8Error = class end
type IPathJoin = abstract join: [<System.ParamArray>] paths: string[] -> string
type IFsExistsSync = abstract existsSync: path: string -> bool
type IPathDirname = abstract dirname: path: string -> string
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::Path")>]
#endif
type std_path_Path = class end
type Disposable (f : unit -> unit) = interface System.IDisposable with member _.Dispose () = f ()
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::ffi::OsStr")>]
#endif
type std_ffi_OsStr = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::Receiver<$0>")>]
#endif
type std_sync_mpsc_Receiver<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::PoisonError<$0>")>]
#endif
type std_sync_PoisonError<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("encoding_rs::Encoding")>]
#endif
type encoding_rs_Encoding = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("[$0]")>]
#endif
type Slice<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::str::Utf8Error")>]
#endif
type std_str_Utf8Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0")>]
#endif
type LifetimeRef<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 + $1")>]
#endif
type LifetimeJoin<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("core::any::Any")>]
#endif
type core_any_Any = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Send")>]
#endif
type Send<'T> = class end
#if FABLE_COMPILER
[<CompilationRepresentation (CompilationRepresentationFlags.ModuleSuffix)>]
module System =
 module Diagnostics =
  type Process = unit
  type DataReceivedEventArgs = unit
#endif
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Error")>]
#endif
type regex_Error = class end
type ICryptoCreateHash = abstract createHash: x: string -> obj
type IHashlibSha256 = abstract sha256: x: unit -> obj
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Utc")>]
#endif
type chrono_Utc = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Local")>]
#endif
type chrono_Local = class end
type [<Struct>] US0 =
    | US0_0
    | US0_1
    | US0_2
    | US0_3
    | US0_4
and Mut0 = {mutable l0 : int64}
and Mut1 = {mutable l0 : (string -> unit)}
and Mut2 = {mutable l0 : bool}
and Mut3 = {mutable l0 : US0}
and [<Struct>] US1 =
    | US1_0 of f0_0 : US0
    | US1_1
and [<Struct>] US2 =
    | US2_0 of f0_0 : int64
    | US2_1
and [<Struct>] US3 =
    | US3_0 of f0_0 : string
    | US3_1
and Mut4 = {mutable l0 : string}
and [<Struct>] US4 =
    | US4_0 of f0_0 : std_string_String * f0_1 : clap_ArgMatches
    | US4_1
and [<Struct>] US5 =
    | US5_0 of f0_0 : std_string_String
    | US5_1
and [<Struct>] US8 =
    | US8_0
    | US8_1
and [<Struct>] US7 =
    | US7_0 of f0_0 : US8
    | US7_1
and [<Struct>] US6 =
    | US6_0 of f0_0 : US7
    | US6_1
and [<Struct>] US9 =
    | US9_0 of f0_0 : Vec<std_string_String>
    | US9_1
and [<Struct>] US10 =
    | US10_0
    | US10_1
    | US10_2
and [<Struct>] US11 =
    | US11_0 of f0_0 : US10
    | US11_1 of f1_0 : US10
    | US11_2 of f2_0 : US10
    | US11_3 of f3_0 : US10
    | US11_4 of f4_0 : US10
and [<Struct>] US12 =
    | US12_0 of f0_0 : string
    | US12_1 of f1_0 : string
and [<Struct>] US13 =
    | US13_0
    | US13_1 of f1_0 : std_string_String
and [<Struct>] US14 =
    | US14_0 of f0_0 : string * f0_1 : US3
    | US14_1 of f1_0 : string
and [<Struct>] US15 =
    | US15_0 of f0_0 : char * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US15_1 of f1_0 : string
and Mut5 = {mutable l0 : int32}
and UH0 =
    | UH0_0
    | UH0_1 of char * UH0
and UH1 =
    | UH1_0
    | UH1_1 of (struct (string * System.Text.StringBuilder * int32 * int32) -> US15) * UH1
and [<Struct>] US16 =
    | US16_0 of f0_0 : string * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US16_1 of f1_0 : string
and [<Struct>] US17 =
    | US17_0 of f0_0 : char
    | US17_1
and [<Struct>] US18 =
    | US18_0 of f0_0 : string * f0_1 : System.Text.StringBuilder * f0_2 : int32 * f0_3 : int32
    | US18_1 of f1_0 : string
and [<Struct>] US19 =
    | US19_0 of f0_0 : string * f0_1 : US3 * f0_2 : string * f0_3 : System.Text.StringBuilder * f0_4 : int32 * f0_5 : int32
    | US19_1 of f1_0 : string
and [<Struct>] US20 =
    | US20_0 of f0_0 : US17 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US20_1 of f1_0 : string
and [<Struct>] US21 =
    | US21_0 of f0_0 : US3 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US21_1 of f1_0 : string
and [<Struct>] US22 =
    | US22_0 of f0_0 : (string [])
    | US22_1 of f1_0 : string
and UH2 =
    | UH2_0
    | UH2_1 of string * UH2
and [<Struct>] US23 =
    | US23_0 of f0_0 : UH2 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US23_1 of f1_0 : string
and UH3 =
    | UH3_0
    | UH3_1 of (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) * UH3
and [<Struct>] US24 =
    | US24_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>
    | US24_1 of f1_0 : std_string_String
and [<Struct>] US25 =
    | US25_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>
    | US25_1
and [<Struct>] US26 =
    | US26_0 of f0_0 : std_string_String
    | US26_1 of f1_0 : std_string_String
and [<Struct>] US27 =
    | US27_0 of f0_0 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit)
    | US27_1
and [<Struct>] US28 =
    | US28_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>>
    | US28_1
and [<Struct>] US29 =
    | US29_0 of f0_0 : std_process_Output
    | US29_1 of f1_0 : std_string_String
and [<Struct>] US30 =
    | US30_0 of f0_0 : int32
    | US30_1
and [<Struct>] US31 =
    | US31_0 of f0_0 : (struct (int32 * string * bool) -> Async<unit>)
    | US31_1
and [<Struct>] US32 =
    | US32_0 of f0_0 : System.Threading.CancellationToken
    | US32_1
and Mut6 = {mutable l0 : int32; mutable l1 : int32; mutable l2 : (string [])}
and [<Struct>] US34 =
    | US34_0
    | US34_1
and [<Struct>] US33 =
    | US33_0 of f0_0 : US34
    | US33_1
and [<Struct>] US35 =
    | US35_0 of f0_0 : chrono_DateTime<chrono_Utc>
    | US35_1
and [<Struct>] US36 =
    | US36_0 of f0_0 : int32 * f0_1 : string
    | US36_1 of f1_0 : int32 * f1_1 : string
and [<Struct>] US37 =
    | US37_0 of f0_0 : std_collections_HashMap<string, string>
    | US37_1
and [<Struct>] US38 =
    | US38_0 of f0_0 : US3
    | US38_1
and UH4 =
    | UH4_0
    | UH4_1 of string * bool * UH4
and [<Struct>] US39 =
    | US39_0
    | US39_1
    | US39_2
and [<Struct>] US40 =
    | US40_0 of f0_0 : std_fs_FileType
    | US40_1 of f1_0 : std_string_String
and [<Struct>] US41 =
    | US41_0 of f0_0 : async_walkdir_DirEntry
    | US41_1 of f1_0 : std_string_String
and [<Struct>] US42 =
    | US42_0 of f0_0 : string * f0_1 : string
    | US42_1
and UH5 =
    | UH5_0
    | UH5_1 of string * string * UH5
let rec method0 () : clap_Command =
    let v0 : string = "command"
    let v1 : string = "r#\"" + v0 + "\"#"
    let v2 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : string = "clap::Command::new($0)"
    let v4 : clap_Command = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "clap::Command::subcommand_required($0, true)"
    let v6 : clap_Command = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "fsharp"
    let v8 : string = "r#\"" + v7 + "\"#"
    let v9 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "clap::Command::new($0)"
    let v11 : clap_Command = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "spi-path"
    let v13 : string = "r#\"" + v12 + "\"#"
    let v14 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v13 
    let v15 : string = "clap::Arg::new($0)"
    let v16 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v14 v15 
    let v17 : string = "$0.short($1)"
    let v18 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v16, 's') v17 
    let v19 : string = "r#\"" + v12 + "\"#"
    let v20 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = "$0.long($1)"
    let v22 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v18, v20) v21 
    let v23 : string = "$0.required($1)"
    let v24 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v22, true) v23 
    let v25 : string = "clap::Command::arg($0, $1)"
    let v26 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v11, v24) v25 
    let v27 : string = "clap::Command::subcommand($0, v26)"
    let v28 : clap_Command = Fable.Core.RustInterop.emitRustExpr v6 v27 
    let v29 : string = "cuda"
    let v30 : string = "r#\"" + v29 + "\"#"
    let v31 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v30 
    let v32 : string = "clap::Command::new($0)"
    let v33 : clap_Command = Fable.Core.RustInterop.emitRustExpr v31 v32 
    let v34 : string = "py-path"
    let v35 : string = "r#\"" + v34 + "\"#"
    let v36 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "clap::Arg::new($0)"
    let v38 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "$0.short($1)"
    let v40 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v38, 'p') v39 
    let v41 : string = "r#\"" + v34 + "\"#"
    let v42 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v41 
    let v43 : string = "$0.long($1)"
    let v44 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v40, v42) v43 
    let v45 : string = "$0.required($1)"
    let v46 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v44, true) v45 
    let v47 : string = "clap::Command::arg($0, $1)"
    let v48 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v33, v46) v47 
    let v49 : string = "env"
    let v50 : string = "r#\"" + v49 + "\"#"
    let v51 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v50 
    let v52 : string = "clap::Arg::new($0)"
    let v53 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v51 v52 
    let v54 : string = "$0.short($1)"
    let v55 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v53, 'e') v54 
    let v56 : string = "r#\"" + v49 + "\"#"
    let v57 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "$0.long($1)"
    let v59 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v55, v57) v58 
    let v60 : string list = []
    let v63 : string = "Poetry"
    let v64 : string list = v63 :: v60 
    let v73 : string = "Pip"
    let v74 : string list = v73 :: v64 
    let v83 : (string list -> (string [])) = List.toArray
    let v84 : (string []) = v83 v74
    let v91 : string = "$0.to_vec()"
    let v92 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v84 v91 
    let v93 : string = "true; let _result : Vec<_> = v92.into_iter().map(|x| { //"
    let v94 : bool = Fable.Core.RustInterop.emitRustExpr () v93 
    let v95 : string = "x"
    let v96 : string = Fable.Core.RustInterop.emitRustExpr () v95 
    let v97 : string = "&*$0"
    let v98 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v96 v97 
    let v99 : string = "String::from($0)"
    let v100 : std_string_String = Fable.Core.RustInterop.emitRustExpr v98 v99 
    let v101 : string = "Box::new($0)"
    let v102 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v100 v101 
    let v103 : string = "Box::leak($0)"
    let v104 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v102 v103 
    let v105 : string = "clap::builder::PossibleValue::new(&**$0)"
    let v106 : clap_builder_PossibleValue = Fable.Core.RustInterop.emitRustExpr v104 v105 
    let v107 : string = "true; $0 }).collect::<Vec<_>>()"
    let v108 : bool = Fable.Core.RustInterop.emitRustExpr v106 v107 
    let v109 : string = "_result"
    let v110 : Vec<clap_builder_PossibleValue> = Fable.Core.RustInterop.emitRustExpr () v109 
    let v111 : string = "Into::<clap::builder::ValueParser>::into(clap::builder::PossibleValuesParser::new($0))"
    let v112 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr v110 v111 
    let v113 : string = "$0.value_parser($1)"
    let v114 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v59, v112) v113 
    let v115 : string = "clap::Command::arg($0, $1)"
    let v116 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v48, v114) v115 
    let v117 : string = "NAME"
    let v118 : string = "r#\"" + v117 + "\"#"
    let v119 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v118 
    let v120 : string = "VERSION"
    let v121 : string = "r#\"" + v120 + "\"#"
    let v122 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v121 
    let v123 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v119; v122|]
    let v126 : unativeint = 1 |> unativeint 
    let v135 : unativeint = 0 |> unativeint 
    let v144 : bool = v135 = v135 
    let v155 : clap_builder_ValueRange =
        if v144 then
            let v151 : string = "clap::builder::ValueRange::new(v126..)"
            let v152 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr () v151 
            v152
        else
            let v153 : string = "clap::builder::ValueRange::new(v126..v135)"
            let v154 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr () v153 
            v154
    let v156 : string = "deps"
    let v157 : string = "r#\"" + v156 + "\"#"
    let v158 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v157 
    let v159 : string = "clap::Arg::new($0)"
    let v160 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v158 v159 
    let v161 : string = "$0.short($1)"
    let v162 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v160, 'd') v161 
    let v163 : string = "r#\"" + v156 + "\"#"
    let v164 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v163 
    let v165 : string = "$0.long($1)"
    let v166 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v162, v164) v165 
    let v167 : string = "$0.to_vec()"
    let v168 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v123 v167 
    let v169 : string = "$0.value_names($1)"
    let v170 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v166, v168) v169 
    let v171 : string = "$0.num_args($1)"
    let v172 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v170, v155) v171 
    let v173 : string = "clap::ArgAction::Append"
    let v174 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v173 
    let v175 : string = "$0.action($1)"
    let v176 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v172, v174) v175 
    let v177 : string = "clap::Command::arg($0, $1)"
    let v178 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v116, v176) v177 
    let v179 : string = "clap::Command::subcommand($0, v178)"
    let v180 : clap_Command = Fable.Core.RustInterop.emitRustExpr v28 v179 
    let v181 : string = "fable"
    let v182 : string = "r#\"" + v181 + "\"#"
    let v183 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v182 
    let v184 : string = "clap::Command::new($0)"
    let v185 : clap_Command = Fable.Core.RustInterop.emitRustExpr v183 v184 
    let v186 : string = "fs-path"
    let v187 : string = "r#\"" + v186 + "\"#"
    let v188 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v187 
    let v189 : string = "clap::Arg::new($0)"
    let v190 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v188 v189 
    let v191 : string = "$0.short($1)"
    let v192 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v190, 'f') v191 
    let v193 : string = "r#\"" + v186 + "\"#"
    let v194 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v193 
    let v195 : string = "$0.long($1)"
    let v196 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v192, v194) v195 
    let v197 : string = "$0.required($1)"
    let v198 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v196, true) v197 
    let v199 : string = "clap::Command::arg($0, $1)"
    let v200 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v185, v198) v199 
    let v201 : string = "r#\"" + v0 + "\"#"
    let v202 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v201 
    let v203 : string = "clap::Arg::new($0)"
    let v204 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v202 v203 
    let v205 : string = "$0.short($1)"
    let v206 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v204, 'c') v205 
    let v207 : string = "r#\"" + v0 + "\"#"
    let v208 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v207 
    let v209 : string = "$0.long($1)"
    let v210 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v206, v208) v209 
    let v211 : string = "clap::Command::arg($0, $1)"
    let v212 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v200, v210) v211 
    let v213 : string = "clap::Command::subcommand($0, v212)"
    let v214 : clap_Command = Fable.Core.RustInterop.emitRustExpr v180 v213 
    let v215 : string = "rust"
    let v216 : string = "r#\"" + v215 + "\"#"
    let v217 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v216 
    let v218 : string = "clap::Command::new($0)"
    let v219 : clap_Command = Fable.Core.RustInterop.emitRustExpr v217 v218 
    let v220 : string = "r#\"" + v186 + "\"#"
    let v221 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v220 
    let v222 : string = "clap::Arg::new($0)"
    let v223 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v221 v222 
    let v224 : string = "$0.short($1)"
    let v225 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v223, 'f') v224 
    let v226 : string = "r#\"" + v186 + "\"#"
    let v227 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v226 
    let v228 : string = "$0.long($1)"
    let v229 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v225, v227) v228 
    let v230 : string = "$0.required($1)"
    let v231 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v229, true) v230 
    let v232 : string = "clap::Command::arg($0, $1)"
    let v233 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v219, v231) v232 
    let v234 : string = "r#\"" + v117 + "\"#"
    let v235 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v234 
    let v236 : string = "r#\"" + v120 + "\"#"
    let v237 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v236 
    let v238 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v235; v237|]
    let v241 : unativeint = 1 |> unativeint 
    let v250 : unativeint = 0 |> unativeint 
    let v259 : bool = v250 = v250 
    let v270 : clap_builder_ValueRange =
        if v259 then
            let v266 : string = "clap::builder::ValueRange::new(v241..)"
            let v267 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr () v266 
            v267
        else
            let v268 : string = "clap::builder::ValueRange::new(v241..v250)"
            let v269 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr () v268 
            v269
    let v271 : string = "r#\"" + v156 + "\"#"
    let v272 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v271 
    let v273 : string = "clap::Arg::new($0)"
    let v274 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v272 v273 
    let v275 : string = "$0.short($1)"
    let v276 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v274, 'd') v275 
    let v277 : string = "r#\"" + v156 + "\"#"
    let v278 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v277 
    let v279 : string = "$0.long($1)"
    let v280 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v276, v278) v279 
    let v281 : string = "$0.to_vec()"
    let v282 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v238 v281 
    let v283 : string = "$0.value_names($1)"
    let v284 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v280, v282) v283 
    let v285 : string = "$0.num_args($1)"
    let v286 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v284, v270) v285 
    let v287 : string = "clap::ArgAction::Append"
    let v288 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v287 
    let v289 : string = "$0.action($1)"
    let v290 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v286, v288) v289 
    let v291 : string = "clap::Command::arg($0, $1)"
    let v292 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v233, v290) v291 
    let v293 : string = "wasm"
    let v294 : string = "r#\"" + v293 + "\"#"
    let v295 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v294 
    let v296 : string = "clap::Arg::new($0)"
    let v297 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v295 v296 
    let v298 : string = "$0.short($1)"
    let v299 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v297, 'w') v298 
    let v300 : string = "r#\"" + v293 + "\"#"
    let v301 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v300 
    let v302 : string = "$0.long($1)"
    let v303 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v299, v301) v302 
    let v304 : string = "clap::ArgAction::SetTrue"
    let v305 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v304 
    let v306 : string = "$0.action($1)"
    let v307 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v303, v305) v306 
    let v308 : string = "clap::Command::arg($0, $1)"
    let v309 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v292, v307) v308 
    let v310 : string = "contract"
    let v311 : string = "r#\"" + v310 + "\"#"
    let v312 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v311 
    let v313 : string = "clap::Arg::new($0)"
    let v314 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v312 v313 
    let v315 : string = "$0.short($1)"
    let v316 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v314, 'c') v315 
    let v317 : string = "r#\"" + v310 + "\"#"
    let v318 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v317 
    let v319 : string = "$0.long($1)"
    let v320 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v316, v318) v319 
    let v321 : string = "clap::ArgAction::SetTrue"
    let v322 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v321 
    let v323 : string = "$0.action($1)"
    let v324 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v320, v322) v323 
    let v325 : string = "clap::Command::arg($0, $1)"
    let v326 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v309, v324) v325 
    let v327 : string = "clap::Command::subcommand($0, v326)"
    let v328 : clap_Command = Fable.Core.RustInterop.emitRustExpr v214 v327 
    let v329 : string = "typescript"
    let v330 : string = "r#\"" + v329 + "\"#"
    let v331 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v330 
    let v332 : string = "clap::Command::new($0)"
    let v333 : clap_Command = Fable.Core.RustInterop.emitRustExpr v331 v332 
    let v334 : string = "r#\"" + v186 + "\"#"
    let v335 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v334 
    let v336 : string = "clap::Arg::new($0)"
    let v337 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v335 v336 
    let v338 : string = "$0.short($1)"
    let v339 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v337, 'f') v338 
    let v340 : string = "r#\"" + v186 + "\"#"
    let v341 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v340 
    let v342 : string = "$0.long($1)"
    let v343 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v339, v341) v342 
    let v344 : string = "$0.required($1)"
    let v345 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v343, true) v344 
    let v346 : string = "clap::Command::arg($0, $1)"
    let v347 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v333, v345) v346 
    let v348 : string = "r#\"" + v117 + "\"#"
    let v349 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v348 
    let v350 : string = "r#\"" + v120 + "\"#"
    let v351 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v350 
    let v352 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v349; v351|]
    let v355 : unativeint = 1 |> unativeint 
    let v364 : unativeint = 0 |> unativeint 
    let v373 : bool = v364 = v364 
    let v384 : clap_builder_ValueRange =
        if v373 then
            let v380 : string = "clap::builder::ValueRange::new(v355..)"
            let v381 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr () v380 
            v381
        else
            let v382 : string = "clap::builder::ValueRange::new(v355..v364)"
            let v383 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr () v382 
            v383
    let v385 : string = "r#\"" + v156 + "\"#"
    let v386 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v385 
    let v387 : string = "clap::Arg::new($0)"
    let v388 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v386 v387 
    let v389 : string = "$0.short($1)"
    let v390 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v388, 'd') v389 
    let v391 : string = "r#\"" + v156 + "\"#"
    let v392 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v391 
    let v393 : string = "$0.long($1)"
    let v394 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v390, v392) v393 
    let v395 : string = "$0.to_vec()"
    let v396 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v352 v395 
    let v397 : string = "$0.value_names($1)"
    let v398 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v394, v396) v397 
    let v399 : string = "$0.num_args($1)"
    let v400 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v398, v384) v399 
    let v401 : string = "clap::ArgAction::Append"
    let v402 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v401 
    let v403 : string = "$0.action($1)"
    let v404 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v400, v402) v403 
    let v405 : string = "clap::Command::arg($0, $1)"
    let v406 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v347, v404) v405 
    let v407 : string = "clap::Command::subcommand($0, v406)"
    let v408 : clap_Command = Fable.Core.RustInterop.emitRustExpr v328 v407 
    let v409 : string = "python"
    let v410 : string = "r#\"" + v409 + "\"#"
    let v411 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v410 
    let v412 : string = "clap::Command::new($0)"
    let v413 : clap_Command = Fable.Core.RustInterop.emitRustExpr v411 v412 
    let v414 : string = "r#\"" + v186 + "\"#"
    let v415 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v414 
    let v416 : string = "clap::Arg::new($0)"
    let v417 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v415 v416 
    let v418 : string = "$0.short($1)"
    let v419 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v417, 'f') v418 
    let v420 : string = "r#\"" + v186 + "\"#"
    let v421 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v420 
    let v422 : string = "$0.long($1)"
    let v423 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v419, v421) v422 
    let v424 : string = "$0.required($1)"
    let v425 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v423, true) v424 
    let v426 : string = "clap::Command::arg($0, $1)"
    let v427 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v413, v425) v426 
    let v428 : string = "r#\"" + v117 + "\"#"
    let v429 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v428 
    let v430 : string = "r#\"" + v120 + "\"#"
    let v431 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v430 
    let v432 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v429; v431|]
    let v435 : unativeint = 1 |> unativeint 
    let v444 : unativeint = 0 |> unativeint 
    let v453 : bool = v444 = v444 
    let v464 : clap_builder_ValueRange =
        if v453 then
            let v460 : string = "clap::builder::ValueRange::new(v435..)"
            let v461 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr () v460 
            v461
        else
            let v462 : string = "clap::builder::ValueRange::new(v435..v444)"
            let v463 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr () v462 
            v463
    let v465 : string = "r#\"" + v156 + "\"#"
    let v466 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v465 
    let v467 : string = "clap::Arg::new($0)"
    let v468 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v466 v467 
    let v469 : string = "$0.short($1)"
    let v470 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v468, 'd') v469 
    let v471 : string = "r#\"" + v156 + "\"#"
    let v472 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v471 
    let v473 : string = "$0.long($1)"
    let v474 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v470, v472) v473 
    let v475 : string = "$0.to_vec()"
    let v476 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v432 v475 
    let v477 : string = "$0.value_names($1)"
    let v478 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v474, v476) v477 
    let v479 : string = "$0.num_args($1)"
    let v480 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v478, v464) v479 
    let v481 : string = "clap::ArgAction::Append"
    let v482 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v481 
    let v483 : string = "$0.action($1)"
    let v484 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v480, v482) v483 
    let v485 : string = "clap::Command::arg($0, $1)"
    let v486 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v427, v484) v485 
    let v487 : string = "clap::Command::subcommand($0, v486)"
    let v488 : clap_Command = Fable.Core.RustInterop.emitRustExpr v408 v487 
    let v489 : string = "dib"
    let v490 : string = "r#\"" + v489 + "\"#"
    let v491 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v490 
    let v492 : string = "clap::Command::new($0)"
    let v493 : clap_Command = Fable.Core.RustInterop.emitRustExpr v491 v492 
    let v494 : string = "path"
    let v495 : string = "r#\"" + v494 + "\"#"
    let v496 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v495 
    let v497 : string = "clap::Arg::new($0)"
    let v498 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v496 v497 
    let v499 : string = "$0.short($1)"
    let v500 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v498, 'p') v499 
    let v501 : string = "r#\"" + v494 + "\"#"
    let v502 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v501 
    let v503 : string = "$0.long($1)"
    let v504 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v500, v502) v503 
    let v505 : string = "$0.required($1)"
    let v506 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v504, true) v505 
    let v507 : string = "clap::Command::arg($0, $1)"
    let v508 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v493, v506) v507 
    let v509 : string = "u8"
    let v510 : string = "clap::value_parser!(" + v509 + ").into()"
    let v511 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr () v510 
    let v512 : string = "retries"
    let v513 : string = "r#\"" + v512 + "\"#"
    let v514 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v513 
    let v515 : string = "clap::Arg::new($0)"
    let v516 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v514 v515 
    let v517 : string = "$0.short($1)"
    let v518 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v516, 'r') v517 
    let v519 : string = "r#\"" + v512 + "\"#"
    let v520 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v519 
    let v521 : string = "$0.long($1)"
    let v522 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v518, v520) v521 
    let v523 : string = "$0.value_parser($1)"
    let v524 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v522, v511) v523 
    let v525 : string = "clap::Command::arg($0, $1)"
    let v526 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v508, v524) v525 
    let v527 : string = "working-directory"
    let v528 : string = "r#\"" + v527 + "\"#"
    let v529 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v528 
    let v530 : string = "clap::Arg::new($0)"
    let v531 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v529 v530 
    let v532 : string = "$0.short($1)"
    let v533 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v531, 'w') v532 
    let v534 : string = "r#\"" + v527 + "\"#"
    let v535 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v534 
    let v536 : string = "$0.long($1)"
    let v537 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v533, v535) v536 
    let v538 : string = "clap::Command::arg($0, $1)"
    let v539 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v526, v537) v538 
    let v540 : string = "clap::Command::subcommand($0, v539)"
    let v541 : clap_Command = Fable.Core.RustInterop.emitRustExpr v488 v540 
    v541
and closure0 () () : unit =
    let v1 : string = "true; () //"
    let v2 : bool = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : string = "} /* /*"
    Fable.Core.RustInterop.emitRustExpr () v3 
    let v4 : string = "verify_app"
    let v5 : string = $"*/ #[test] fn " + v4 + "() { //"
    let v6 : bool = Fable.Core.RustInterop.emitRustExpr () v5 
    let v7 : clap_Command = method0()
    let v8 : string = "clap::Command::debug_assert($0)"
    Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v9 : string = "{ //"
    Fable.Core.RustInterop.emitRustExpr () v9 
    ()
and method1 () : string =
    let v0 : string = "TRACE_LEVEL"
    v0
and method3 () : string =
    let v0 : string = ""
    v0
and method2 (v0 : string) : string =
    let v3 : bool = true
    let mutable _v3 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "std::env::var(&*$0)"
    let v5 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let v6 : string = "true; let _result = $0.map(|x| { //"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "x"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "fable_library_rust::String_::fromString($0)"
    let v11 : string = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "true; $0 })"
    let v13 : bool = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : string = "_result"
    let v15 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v14 
    let v16 : string = method3()
    let v17 : string = "$0.unwrap_or($1)"
    let v18 : string = Fable.Core.RustInterop.emitRustExpr struct (v15, v16) v17 
    v18 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v19 : string = "std::env::var(&*$0)"
    let v20 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v0 v19 
    let v21 : string = "true; let _result = $0.map(|x| { //"
    let v22 : bool = Fable.Core.RustInterop.emitRustExpr v20 v21 
    let v23 : string = "x"
    let v24 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v23 
    let v25 : string = "fable_library_rust::String_::fromString($0)"
    let v26 : string = Fable.Core.RustInterop.emitRustExpr v24 v25 
    let v27 : string = "true; $0 })"
    let v28 : bool = Fable.Core.RustInterop.emitRustExpr v26 v27 
    let v29 : string = "_result"
    let v30 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v29 
    let v31 : string = method3()
    let v32 : string = "$0.unwrap_or($1)"
    let v33 : string = Fable.Core.RustInterop.emitRustExpr struct (v30, v31) v32 
    v33 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v34 : string = "std::env::var(&*$0)"
    let v35 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v0 v34 
    let v36 : string = "true; let _result = $0.map(|x| { //"
    let v37 : bool = Fable.Core.RustInterop.emitRustExpr v35 v36 
    let v38 : string = "x"
    let v39 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v38 
    let v40 : string = "fable_library_rust::String_::fromString($0)"
    let v41 : string = Fable.Core.RustInterop.emitRustExpr v39 v40 
    let v42 : string = "true; $0 })"
    let v43 : bool = Fable.Core.RustInterop.emitRustExpr v41 v42 
    let v44 : string = "_result"
    let v45 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v44 
    let v46 : string = method3()
    let v47 : string = "$0.unwrap_or($1)"
    let v48 : string = Fable.Core.RustInterop.emitRustExpr struct (v45, v46) v47 
    v48 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v49 : string = "process.env[$0] ?? \"\""
    let v50 : string = Fable.Core.JsInterop.emitJsExpr v0 v49 
    v50 
    #endif
#if FABLE_COMPILER_PYTHON
    let v53 : string = "os"
    let v54 : IOsEnviron = Fable.Core.PyInterop.importAll v53 
    let v55 : string = "v54.environ"
    let v56 : obj = Fable.Core.PyInterop.emitPyExpr () v55 
    let v65 : string = "v56.get($0)"
    let v66 : string = Fable.Core.PyInterop.emitPyExpr v0 v65 
    let mutable _v66 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v75 : (string -> string option) = Option.ofObj
    let v76 : string option = v75 v66
    v76 
    #else
    Some v66 
    #endif
    |> fun x -> _v66 <- Some x
    let v77 : string option = match _v66 with Some x -> x | None -> failwith "optionm'.of_obj / _v66=None"
    let v86 : US3 option = None
    let _v86 = ref v86 
    match v77 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v87 : string = x
    let v88 : US3 = US3_0(v87)
    v88 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v86.Value <- x
    let v89 : US3 option = _v86.Value 
    let v112 : US3 = US3_1
    let v113 : US3 = v89 |> Option.defaultValue v112 
    let v124 : string =
        match v113 with
        | US3_1 -> (* None *)
            let v122 : string = ""
            v122
        | US3_0(v121) -> (* Some *)
            v121
    v124 
    #endif
#else
    let v125 : (string -> string) = System.Environment.GetEnvironmentVariable
    let v126 : string = v125 v0
    let mutable _v126 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v129 : (string -> string option) = Option.ofObj
    let v130 : string option = v129 v126
    v130 
    #else
    Some v126 
    #endif
    |> fun x -> _v126 <- Some x
    let v131 : string option = match _v126 with Some x -> x | None -> failwith "optionm'.of_obj / _v126=None"
    let v140 : US3 option = None
    let _v140 = ref v140 
    match v131 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v141 : string = x
    let v142 : US3 = US3_0(v141)
    v142 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v140.Value <- x
    let v143 : US3 option = _v140.Value 
    let v166 : US3 = US3_1
    let v167 : US3 = v143 |> Option.defaultValue v166 
    let v178 : string =
        match v167 with
        | US3_1 -> (* None *)
            let v176 : string = ""
            v176
        | US3_0(v175) -> (* Some *)
            v175
    v178 
    #endif
    |> fun x -> _v3 <- Some x
    let v179 : string = match _v3 with Some x -> x | None -> failwith "base.run_target / _v3=None"
    v179
and method4 () : string =
    let v0 : string = "AUTOMATION"
    v0
and closure3 () (v0 : string) : unit =
    ()
and closure2 () (v0 : US0) : struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option) =
    let v3 : bool = true
    let mutable _v3 : struct (US1 * US2) option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = method1()
    let v5 : string = method2(v4)
    let v7 : bool = "Verbose" = v5
    let v11 : US1 =
        if v7 then
            let v8 : US0 = US0_0
            US1_0(v8)
        else
            US1_1
    let v56 : US1 =
        match v11 with
        | US1_1 -> (* None *)
            let v15 : bool = "Debug" = v5
            let v19 : US1 =
                if v15 then
                    let v16 : US0 = US0_1
                    US1_0(v16)
                else
                    US1_1
            match v19 with
            | US1_1 -> (* None *)
                let v23 : bool = "Info" = v5
                let v27 : US1 =
                    if v23 then
                        let v24 : US0 = US0_2
                        US1_0(v24)
                    else
                        US1_1
                match v27 with
                | US1_1 -> (* None *)
                    let v31 : bool = "Warning" = v5
                    let v35 : US1 =
                        if v31 then
                            let v32 : US0 = US0_3
                            US1_0(v32)
                        else
                            US1_1
                    match v35 with
                    | US1_1 -> (* None *)
                        let v39 : bool = "Critical" = v5
                        let v43 : US1 =
                            if v39 then
                                let v40 : US0 = US0_4
                                US1_0(v40)
                            else
                                US1_1
                        match v43 with
                        | US1_1 -> (* None *)
                            US1_1
                        | US1_0(v44) -> (* Some *)
                            US1_0(v44)
                    | US1_0(v36) -> (* Some *)
                        US1_0(v36)
                | US1_0(v28) -> (* Some *)
                    US1_0(v28)
            | US1_0(v20) -> (* Some *)
                US1_0(v20)
        | US1_0(v12) -> (* Some *)
            US1_0(v12)
    let v57 : string = method4()
    let v58 : string = method2(v57)
    let v60 : bool = v58 = "True"
    let v82 : US2 =
        if v60 then
            let v63 : System.DateTime = System.DateTime.Now
            let v72 : (System.DateTime -> int64) = _.Ticks
            let v73 : int64 = v72 v63
            US2_0(v73)
        else
            US2_1
    struct (v56, v82) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v83 : US1 = US1_1
    let v84 : US2 = US2_1
    struct (v83, v84) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v85 : string = "AUTOMATION"
    let v88 : bool = true
    let mutable _v88 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v89 : string = "env!(\"" + v85 + "\")"
    let v90 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v89 
    let v91 : string = "String::from($0)"
    let v92 : std_string_String = Fable.Core.RustInterop.emitRustExpr v90 v91 
    let v93 : string = "fable_library_rust::String_::fromString($0)"
    let v94 : string = Fable.Core.RustInterop.emitRustExpr v92 v93 
    v94 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v95 : string = "env!(\"" + v85 + "\")"
    let v96 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v95 
    let v97 : string = "String::from($0)"
    let v98 : std_string_String = Fable.Core.RustInterop.emitRustExpr v96 v97 
    let v99 : string = "fable_library_rust::String_::fromString($0)"
    let v100 : string = Fable.Core.RustInterop.emitRustExpr v98 v99 
    v100 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v101 : string = "env!(\"" + v85 + "\")"
    let v102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v101 
    let v103 : string = "String::from($0)"
    let v104 : std_string_String = Fable.Core.RustInterop.emitRustExpr v102 v103 
    let v105 : string = "fable_library_rust::String_::fromString($0)"
    let v106 : string = Fable.Core.RustInterop.emitRustExpr v104 v105 
    v106 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v109 : string = null |> unbox<string>
    v109 
    #endif
#if FABLE_COMPILER_PYTHON
    let v118 : string = null |> unbox<string>
    v118 
    #endif
#else
    let v127 : string = null |> unbox<string>
    v127 
    #endif
    |> fun x -> _v88 <- Some x
    let v134 : string = match _v88 with Some x -> x | None -> failwith "base.run_target / _v88=None"
    let v151 : string = "True"
    let v152 : bool = v134 <> v151 
    let v165 : US2 =
        if v152 then
            US2_1
        else
            let v160 : string = $"near_sdk::env::block_timestamp()"
            let v161 : uint64 = Fable.Core.RustInterop.emitRustExpr () v160 
            let v162 : (uint64 -> int64) = int64
            let v163 : int64 = v162 v161
            US2_0(v163)
    let v166 : US1 = US1_1
    struct (v166, v165) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v167 : string = method1()
    let v168 : string = method2(v167)
    let v170 : bool = "Verbose" = v168
    let v174 : US1 =
        if v170 then
            let v171 : US0 = US0_0
            US1_0(v171)
        else
            US1_1
    let v219 : US1 =
        match v174 with
        | US1_1 -> (* None *)
            let v178 : bool = "Debug" = v168
            let v182 : US1 =
                if v178 then
                    let v179 : US0 = US0_1
                    US1_0(v179)
                else
                    US1_1
            match v182 with
            | US1_1 -> (* None *)
                let v186 : bool = "Info" = v168
                let v190 : US1 =
                    if v186 then
                        let v187 : US0 = US0_2
                        US1_0(v187)
                    else
                        US1_1
                match v190 with
                | US1_1 -> (* None *)
                    let v194 : bool = "Warning" = v168
                    let v198 : US1 =
                        if v194 then
                            let v195 : US0 = US0_3
                            US1_0(v195)
                        else
                            US1_1
                    match v198 with
                    | US1_1 -> (* None *)
                        let v202 : bool = "Critical" = v168
                        let v206 : US1 =
                            if v202 then
                                let v203 : US0 = US0_4
                                US1_0(v203)
                            else
                                US1_1
                        match v206 with
                        | US1_1 -> (* None *)
                            US1_1
                        | US1_0(v207) -> (* Some *)
                            US1_0(v207)
                    | US1_0(v199) -> (* Some *)
                        US1_0(v199)
                | US1_0(v191) -> (* Some *)
                    US1_0(v191)
            | US1_0(v183) -> (* Some *)
                US1_0(v183)
        | US1_0(v175) -> (* Some *)
            US1_0(v175)
    let v220 : string = method4()
    let v221 : string = method2(v220)
    let v222 : bool = v221 = "True"
    let v244 : US2 =
        if v222 then
            let v225 : System.DateTime = System.DateTime.Now
            let v234 : (System.DateTime -> int64) = _.Ticks
            let v235 : int64 = v234 v225
            US2_0(v235)
        else
            US2_1
    struct (v219, v244) 
    #endif
#if FABLE_COMPILER_PYTHON
    let v245 : string = method1()
    let v246 : string = method2(v245)
    let v248 : bool = "Verbose" = v246
    let v252 : US1 =
        if v248 then
            let v249 : US0 = US0_0
            US1_0(v249)
        else
            US1_1
    let v297 : US1 =
        match v252 with
        | US1_1 -> (* None *)
            let v256 : bool = "Debug" = v246
            let v260 : US1 =
                if v256 then
                    let v257 : US0 = US0_1
                    US1_0(v257)
                else
                    US1_1
            match v260 with
            | US1_1 -> (* None *)
                let v264 : bool = "Info" = v246
                let v268 : US1 =
                    if v264 then
                        let v265 : US0 = US0_2
                        US1_0(v265)
                    else
                        US1_1
                match v268 with
                | US1_1 -> (* None *)
                    let v272 : bool = "Warning" = v246
                    let v276 : US1 =
                        if v272 then
                            let v273 : US0 = US0_3
                            US1_0(v273)
                        else
                            US1_1
                    match v276 with
                    | US1_1 -> (* None *)
                        let v280 : bool = "Critical" = v246
                        let v284 : US1 =
                            if v280 then
                                let v281 : US0 = US0_4
                                US1_0(v281)
                            else
                                US1_1
                        match v284 with
                        | US1_1 -> (* None *)
                            US1_1
                        | US1_0(v285) -> (* Some *)
                            US1_0(v285)
                    | US1_0(v277) -> (* Some *)
                        US1_0(v277)
                | US1_0(v269) -> (* Some *)
                    US1_0(v269)
            | US1_0(v261) -> (* Some *)
                US1_0(v261)
        | US1_0(v253) -> (* Some *)
            US1_0(v253)
    let v298 : string = method4()
    let v299 : string = method2(v298)
    let v300 : bool = v299 = "True"
    let v322 : US2 =
        if v300 then
            let v303 : System.DateTime = System.DateTime.Now
            let v312 : (System.DateTime -> int64) = _.Ticks
            let v313 : int64 = v312 v303
            US2_0(v313)
        else
            US2_1
    struct (v297, v322) 
    #endif
#else
    let v323 : string = method1()
    let v324 : string = method2(v323)
    let v326 : bool = "Verbose" = v324
    let v330 : US1 =
        if v326 then
            let v327 : US0 = US0_0
            US1_0(v327)
        else
            US1_1
    let v375 : US1 =
        match v330 with
        | US1_1 -> (* None *)
            let v334 : bool = "Debug" = v324
            let v338 : US1 =
                if v334 then
                    let v335 : US0 = US0_1
                    US1_0(v335)
                else
                    US1_1
            match v338 with
            | US1_1 -> (* None *)
                let v342 : bool = "Info" = v324
                let v346 : US1 =
                    if v342 then
                        let v343 : US0 = US0_2
                        US1_0(v343)
                    else
                        US1_1
                match v346 with
                | US1_1 -> (* None *)
                    let v350 : bool = "Warning" = v324
                    let v354 : US1 =
                        if v350 then
                            let v351 : US0 = US0_3
                            US1_0(v351)
                        else
                            US1_1
                    match v354 with
                    | US1_1 -> (* None *)
                        let v358 : bool = "Critical" = v324
                        let v362 : US1 =
                            if v358 then
                                let v359 : US0 = US0_4
                                US1_0(v359)
                            else
                                US1_1
                        match v362 with
                        | US1_1 -> (* None *)
                            US1_1
                        | US1_0(v363) -> (* Some *)
                            US1_0(v363)
                    | US1_0(v355) -> (* Some *)
                        US1_0(v355)
                | US1_0(v347) -> (* Some *)
                    US1_0(v347)
            | US1_0(v339) -> (* Some *)
                US1_0(v339)
        | US1_0(v331) -> (* Some *)
            US1_0(v331)
    let v376 : string = method4()
    let v377 : string = method2(v376)
    let v378 : bool = v377 = "True"
    let v400 : US2 =
        if v378 then
            let v381 : System.DateTime = System.DateTime.Now
            let v390 : (System.DateTime -> int64) = _.Ticks
            let v391 : int64 = v390 v381
            US2_0(v391)
        else
            US2_1
    struct (v375, v400) 
    #endif
    |> fun x -> _v3 <- Some x
    let struct (v401 : US1, v402 : US2) = match _v3 with Some x -> x | None -> failwith "base.run_target / _v3=None"
    let v487 : Mut2 = {l0 = true} : Mut2
    let v488 : Mut0 = {l0 = 0L} : Mut0
    let v491 : US0 =
        match v401 with
        | US1_1 -> (* None *)
            v0
        | US1_0(v489) -> (* Some *)
            v489
    let v492 : Mut3 = {l0 = v491} : Mut3
    let v493 : (string -> unit) = closure3()
    let v494 : Mut1 = {l0 = v493} : Mut1
    let v507 : int64 option =
        match v402 with
        | US2_1 -> (* None *)
            let v505 : int64 option = None
            v505
        | US2_0(v495) -> (* Some *)
            let v498 : int64 option = Some v495 
            v498
    struct (v488, v494, v487, v492, v507)
and closure4 () () : string =
    let v0 : string = $"spiral_builder.main"
    v0
and closure5 (v0 : (string [])) () : (string []) =
    v0
and method6 () : string =
    let v0 : string = "hh:mm:ss"
    v0
and method7 () : string =
    let v0 : string = "HH:mm:ss"
    v0
and method8 () : string =
    let v0 : string = "\u001b[0m"
    v0
and method10 (v0 : Mut4, v1 : string) : unit =
    let v4 : string = $"{v1}"
    let v11 : string = v0.l0
    let v12 : string = v11 + v4 
    v0.l0 <- v12
    ()
and method11 (v0 : Mut4) : unit =
    ()
and method12 (v0 : Mut4, v1 : (string [])) : unit =
    let v4 : string = $"%A{v1}"
    method10(v0, v4)
and method9 (v0 : Mut4, v1 : (string [])) : unit =
    let v2 : string = "{ "
    method10(v0, v2)
    method11(v0)
    let v3 : string = "args"
    method10(v0, v3)
    let v4 : string = " = "
    method10(v0, v4)
    method12(v0, v1)
    let v5 : string = " }"
    method10(v0, v5)
and closure6 (v0 : US0, v1 : (unit -> string), v2 : (unit -> (string []))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = $"near_sdk::env::block_timestamp()"
    let v331 : uint64 = Fable.Core.RustInterop.emitRustExpr () v330 
    let v334 : US2 option = None
    let _v334 = ref v334 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v335 : int64 = x
    let v336 : US2 = US2_0(v335)
    v336 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v334.Value <- x
    let v337 : US2 option = _v334.Value 
    let v360 : US2 = US2_1
    let v361 : US2 = v337 |> Option.defaultValue v360 
    let v374 : uint64 =
        match v361 with
        | US2_1 -> (* None *)
            v331
        | US2_0(v369) -> (* Some *)
            let v370 : (int64 -> uint64) = uint64
            let v371 : uint64 = v370 v369
            let v372 : uint64 = v331 - v371
            v372
    let v375 : uint64 = v374 / 1000000000UL
    let v376 : uint64 = v375 % 60UL
    let v377 : uint64 = v375 / 60UL
    let v378 : uint64 = v377 % 60UL
    let v379 : uint64 = v375 / 3600UL
    let v380 : uint64 = v379 % 24UL
    let v381 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v382 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v380, v378, v376) v381 
    let v383 : string = "fable_library_rust::String_::fromString($0)"
    let v384 : string = Fable.Core.RustInterop.emitRustExpr v382 v383 
    v384 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v387 : US2 option = None
    let _v387 = ref v387 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v388 : int64 = x
    let v389 : US2 = US2_0(v388)
    v389 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v387.Value <- x
    let v390 : US2 option = _v387.Value 
    let v413 : US2 = US2_1
    let v414 : US2 = v390 |> Option.defaultValue v413 
    let v512 : System.DateTime =
        match v414 with
        | US2_1 -> (* None *)
            let v504 : System.DateTime = System.DateTime.Now
            v504
        | US2_0(v422) -> (* Some *)
            let v425 : System.DateTime = System.DateTime.Now
            let v434 : (System.DateTime -> int64) = _.Ticks
            let v435 : int64 = v434 v425
            let v442 : int64 = v435 - v422
            let v445 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v446 : System.TimeSpan = v445 v442
            let v455 : (System.TimeSpan -> int32) = _.Hours
            let v456 : int32 = v455 v446
            let v465 : (System.TimeSpan -> int32) = _.Minutes
            let v466 : int32 = v465 v446
            let v475 : (System.TimeSpan -> int32) = _.Seconds
            let v476 : int32 = v475 v446
            let v485 : (System.TimeSpan -> int32) = _.Milliseconds
            let v486 : int32 = v485 v446
            let v495 : System.DateTime = System.DateTime (1, 1, 1, v456, v466, v476, v486)
            v495
    let v515 : string = method7()
    let v524 : (string -> string) = v512.ToString
    let v525 : string = v524 v515
    v525 
    #endif
#if FABLE_COMPILER_PYTHON
    let v534 : US2 option = None
    let _v534 = ref v534 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v535 : int64 = x
    let v536 : US2 = US2_0(v535)
    v536 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v534.Value <- x
    let v537 : US2 option = _v534.Value 
    let v560 : US2 = US2_1
    let v561 : US2 = v537 |> Option.defaultValue v560 
    let v659 : System.DateTime =
        match v561 with
        | US2_1 -> (* None *)
            let v651 : System.DateTime = System.DateTime.Now
            v651
        | US2_0(v569) -> (* Some *)
            let v572 : System.DateTime = System.DateTime.Now
            let v581 : (System.DateTime -> int64) = _.Ticks
            let v582 : int64 = v581 v572
            let v589 : int64 = v582 - v569
            let v592 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v593 : System.TimeSpan = v592 v589
            let v602 : (System.TimeSpan -> int32) = _.Hours
            let v603 : int32 = v602 v593
            let v612 : (System.TimeSpan -> int32) = _.Minutes
            let v613 : int32 = v612 v593
            let v622 : (System.TimeSpan -> int32) = _.Seconds
            let v623 : int32 = v622 v593
            let v632 : (System.TimeSpan -> int32) = _.Milliseconds
            let v633 : int32 = v632 v593
            let v642 : System.DateTime = System.DateTime (1, 1, 1, v603, v613, v623, v633)
            v642
    let v662 : string = method7()
    let v671 : (string -> string) = v659.ToString
    let v672 : string = v671 v662
    v672 
    #endif
#else
    let v681 : US2 option = None
    let _v681 = ref v681 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v682 : int64 = x
    let v683 : US2 = US2_0(v682)
    v683 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v681.Value <- x
    let v684 : US2 option = _v681.Value 
    let v707 : US2 = US2_1
    let v708 : US2 = v684 |> Option.defaultValue v707 
    let v806 : System.DateTime =
        match v708 with
        | US2_1 -> (* None *)
            let v798 : System.DateTime = System.DateTime.Now
            v798
        | US2_0(v716) -> (* Some *)
            let v719 : System.DateTime = System.DateTime.Now
            let v728 : (System.DateTime -> int64) = _.Ticks
            let v729 : int64 = v728 v719
            let v736 : int64 = v729 - v716
            let v739 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v740 : System.TimeSpan = v739 v736
            let v749 : (System.TimeSpan -> int32) = _.Hours
            let v750 : int32 = v749 v740
            let v759 : (System.TimeSpan -> int32) = _.Minutes
            let v760 : int32 = v759 v740
            let v769 : (System.TimeSpan -> int32) = _.Seconds
            let v770 : int32 = v769 v740
            let v779 : (System.TimeSpan -> int32) = _.Milliseconds
            let v780 : int32 = v779 v740
            let v789 : System.DateTime = System.DateTime (1, 1, 1, v750, v760, v770, v780)
            v789
    let v809 : string = method7()
    let v818 : (string -> string) = v806.ToString
    let v819 : string = v818 v809
    v819 
    #endif
    |> fun x -> _v35 <- Some x
    let v826 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v981 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v985 : US3 =
        if v981 then
            let v982 : string = "Verbose"
            US3_0(v982)
        else
            US3_1
    let v1034 : US3 =
        match v985 with
        | US3_1 -> (* None *)
            let v990 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v994 : US3 =
                if v990 then
                    let v991 : string = "Debug"
                    US3_0(v991)
                else
                    US3_1
            match v994 with
            | US3_1 -> (* None *)
                let v999 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v1003 : US3 =
                    if v999 then
                        let v1000 : string = "Info"
                        US3_0(v1000)
                    else
                        US3_1
                match v1003 with
                | US3_1 -> (* None *)
                    let v1008 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v1012 : US3 =
                        if v1008 then
                            let v1009 : string = "Warning"
                            US3_0(v1009)
                        else
                            US3_1
                    match v1012 with
                    | US3_1 -> (* None *)
                        let v1017 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v1021 : US3 =
                            if v1017 then
                                let v1018 : string = "Critical"
                                US3_0(v1018)
                            else
                                US3_1
                        match v1021 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v1022) -> (* Some *)
                            US3_0(v1022)
                    | US3_0(v1013) -> (* Some *)
                        US3_0(v1013)
                | US3_0(v1004) -> (* Some *)
                    US3_0(v1004)
            | US3_0(v995) -> (* Some *)
                US3_0(v995)
        | US3_0(v986) -> (* Some *)
            US3_0(v986)
    let v1038 : string =
        match v1034 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v1035) -> (* Some *)
            v1035
    let v1041 : (unit -> string) = v1038.ToLower
    let v1042 : string = v1041 ()
    let v1051 : string = v1042.PadLeft (7, ' ')
    let v1083 : bool = true
    let mutable _v1083 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1098 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1092 : string = "inline_colorization::color_bright_red"
            let v1093 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1092 
            v1093
        | US0_1 -> (* Debug *)
            let v1086 : string = "inline_colorization::color_bright_blue"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_2 -> (* Info *)
            let v1088 : string = "inline_colorization::color_bright_green"
            let v1089 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1088 
            v1089
        | US0_0 -> (* Verbose *)
            let v1084 : string = "inline_colorization::color_bright_black"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
        | US0_3 -> (* Warning *)
            let v1090 : string = "inline_colorization::color_yellow"
            let v1091 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1090 
            v1091
    let v1099 : string = "&*$0"
    let v1100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1099 
    let v1101 : string = "inline_colorization::color_reset"
    let v1102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1101 
    let v1103 : string = "\"{v1098}{v1100}{v1102}\""
    let v1104 : string = @$"format!(" + v1103 + ")"
    let v1105 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1104 
    let v1106 : string = "fable_library_rust::String_::fromString($0)"
    let v1107 : string = Fable.Core.RustInterop.emitRustExpr v1105 v1106 
    v1107 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1122 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1116 : string = "inline_colorization::color_bright_red"
            let v1117 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1116 
            v1117
        | US0_1 -> (* Debug *)
            let v1110 : string = "inline_colorization::color_bright_blue"
            let v1111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1110 
            v1111
        | US0_2 -> (* Info *)
            let v1112 : string = "inline_colorization::color_bright_green"
            let v1113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1112 
            v1113
        | US0_0 -> (* Verbose *)
            let v1108 : string = "inline_colorization::color_bright_black"
            let v1109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1108 
            v1109
        | US0_3 -> (* Warning *)
            let v1114 : string = "inline_colorization::color_yellow"
            let v1115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1114 
            v1115
    let v1123 : string = "&*$0"
    let v1124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1123 
    let v1125 : string = "inline_colorization::color_reset"
    let v1126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1125 
    let v1127 : string = "\"{v1122}{v1124}{v1126}\""
    let v1128 : string = @$"format!(" + v1127 + ")"
    let v1129 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1128 
    let v1130 : string = "fable_library_rust::String_::fromString($0)"
    let v1131 : string = Fable.Core.RustInterop.emitRustExpr v1129 v1130 
    v1131 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1146 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1140 : string = "inline_colorization::color_bright_red"
            let v1141 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1140 
            v1141
        | US0_1 -> (* Debug *)
            let v1134 : string = "inline_colorization::color_bright_blue"
            let v1135 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1134 
            v1135
        | US0_2 -> (* Info *)
            let v1136 : string = "inline_colorization::color_bright_green"
            let v1137 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1136 
            v1137
        | US0_0 -> (* Verbose *)
            let v1132 : string = "inline_colorization::color_bright_black"
            let v1133 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1132 
            v1133
        | US0_3 -> (* Warning *)
            let v1138 : string = "inline_colorization::color_yellow"
            let v1139 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1138 
            v1139
    let v1147 : string = "&*$0"
    let v1148 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1147 
    let v1149 : string = "inline_colorization::color_reset"
    let v1150 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1149 
    let v1151 : string = "\"{v1146}{v1148}{v1150}\""
    let v1152 : string = @$"format!(" + v1151 + ")"
    let v1153 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1152 
    let v1154 : string = "fable_library_rust::String_::fromString($0)"
    let v1155 : string = Fable.Core.RustInterop.emitRustExpr v1153 v1154 
    v1155 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1165 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1160 : string = "\u001b[91m"
            v1160
        | US0_1 -> (* Debug *)
            let v1157 : string = "\u001b[94m"
            v1157
        | US0_2 -> (* Info *)
            let v1158 : string = "\u001b[92m"
            v1158
        | US0_0 -> (* Verbose *)
            let v1156 : string = "\u001b[90m"
            v1156
        | US0_3 -> (* Warning *)
            let v1159 : string = "\u001b[93m"
            v1159
    let v1166 : string = method8()
    let v1167 : string = v1165 + v1051 
    let v1168 : string = v1167 + v1166 
    v1168 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1178 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1173 : string = "\u001b[91m"
            v1173
        | US0_1 -> (* Debug *)
            let v1170 : string = "\u001b[94m"
            v1170
        | US0_2 -> (* Info *)
            let v1171 : string = "\u001b[92m"
            v1171
        | US0_0 -> (* Verbose *)
            let v1169 : string = "\u001b[90m"
            v1169
        | US0_3 -> (* Warning *)
            let v1172 : string = "\u001b[93m"
            v1172
    let v1179 : string = method8()
    let v1180 : string = v1178 + v1051 
    let v1181 : string = v1180 + v1179 
    v1181 
    #endif
#else
    let v1191 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1186 : string = "\u001b[91m"
            v1186
        | US0_1 -> (* Debug *)
            let v1183 : string = "\u001b[94m"
            v1183
        | US0_2 -> (* Info *)
            let v1184 : string = "\u001b[92m"
            v1184
        | US0_0 -> (* Verbose *)
            let v1182 : string = "\u001b[90m"
            v1182
        | US0_3 -> (* Warning *)
            let v1185 : string = "\u001b[93m"
            v1185
    let v1192 : string = method8()
    let v1193 : string = v1191 + v1051 
    let v1194 : string = v1193 + v1192 
    v1194 
    #endif
    |> fun x -> _v1083 <- Some x
    let v1195 : string = match _v1083 with Some x -> x | None -> failwith "base.run_target / _v1083=None"
    let v1214 : int64 = v14.l0
    let v1215 : (string []) = v2 ()
    let v1216 : string = ""
    let v1217 : Mut4 = {l0 = v1216} : Mut4
    method9(v1217, v1215)
    let v1218 : string = v1217.l0
    let v1221 : string = $"{v826} {v1195} #{v1214} %s{v1 ()} / {v1218}"
    let v1228 : char list = []
    let v1233 : (char list -> (char [])) = List.toArray
    let v1234 : (char []) = v1233 v1228
    let v1241 : string = v1221.TrimStart v1234 
    let v1280 : char list = []
    let v1283 : char list = '/' :: v1280 
    let v1292 : char list = ' ' :: v1283 
    let v1303 : (char list -> (char [])) = List.toArray
    let v1304 : (char []) = v1303 v1292
    let v1311 : string = v1241.TrimEnd v1304 
    v1311
and method13 (v0 : US0, v1 : (unit -> string)) : unit =
    let v4 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v5 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v4 v5 |> Some
    let struct (v13 : Mut0, v14 : Mut1, v15 : Mut2, v16 : Mut3, v17 : int64 option) = State.trace_state.Value
    let v34 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v4 v34 |> Some
    let struct (v42 : Mut0, v43 : Mut1, v44 : Mut2, v45 : Mut3, v46 : int64 option) = State.trace_state.Value
    let v61 : US0 = v45.l0
    let v62 : bool = v44.l0
    let v63 : bool = v62 = false
    let v67 : bool =
        if v63 then
            false
        else
            let v64 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v0
            let v65 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v61
            let v66 : bool = v64 >= v65
            v66
    if v67 then
        let v68 : int64 = v13.l0
        let v69 : int64 = v68 + 1L
        v13.l0 <- v69
        let v72 : string = $"%s{v1 ()}"
        let v81 : bool = true
        let mutable _v81 : unit option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v82 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v72 v82 
        () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v83 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v72 v83 
        () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v84 : string = $"near_sdk::log!(\"{{}}\", $0)"
        Fable.Core.RustInterop.emitRustExpr v72 v84 
        () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        System.Console.WriteLine v72 
        () 
        #endif
#if FABLE_COMPILER_PYTHON
        System.Console.WriteLine v72 
        () 
        #endif
#else
        System.Console.WriteLine v72 
        () 
        #endif
        |> fun x -> _v81 <- Some x
        match _v81 with Some x -> x | None -> failwith "base.run_target / _v81=None"
        let v113 : (string -> unit) = v14.l0
        v113 v72
and method5 (v0 : US0, v1 : (unit -> string), v2 : (unit -> (string []))) : unit =
    let v3 : (unit -> string) = closure6(v0, v1, v2)
    method13(v0, v3)
and closure7 () (v0 : Ref<Str>) : std_string_String =
    let v1 : string = "String::from($0)"
    let v2 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v1 
    v2
and method15 () : string =
    let v0 : string = "py-path"
    v0
and method16 () : string =
    let v0 : string = "env"
    v0
and method17 () : string =
    let v0 : string = "deps"
    v0
and method18 (v0 : Vec<uint8>) : Vec<uint8> =
    v0
and method21 (v0 : string) : string =
    v0
and method20 (v0 : string, v1 : string) : struct (string * string) =
    let v2 : string = method21(v0)
    struct (v1, v2)
and method19 (v0 : string, v1 : string) : string =
    let v4 : bool = true
    let mutable _v4 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v5 
    let v7 : string = "String::from($0)"
    let v8 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v9 : string = "std::path::PathBuf::from($0)"
    let v10 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v8 v9 
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v11 
    let v13 : string = "String::from($0)"
    let v14 : std_string_String = Fable.Core.RustInterop.emitRustExpr v12 v13 
    let v15 : string = "$0.join($1)"
    let v16 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr struct (v10, v14) v15 
    let v17 : string = "$0.display()"
    let v18 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v16 v17 
    let v21 : bool = true
    let mutable _v21 : std_string_String option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v22 : string = "format!(\"{}\", $0)"
    let v23 : std_string_String = Fable.Core.RustInterop.emitRustExpr v18 v22 
    v23 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v24 : string = "format!(\"{}\", $0)"
    let v25 : std_string_String = Fable.Core.RustInterop.emitRustExpr v18 v24 
    v25 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v26 : string = "format!(\"{}\", $0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v18 v26 
    v27 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v30 : std_string_String = null |> unbox<std_string_String>
    v30 
    #endif
#if FABLE_COMPILER_PYTHON
    let v39 : std_string_String = null |> unbox<std_string_String>
    v39 
    #endif
#else
    let v48 : std_string_String = null |> unbox<std_string_String>
    v48 
    #endif
    |> fun x -> _v21 <- Some x
    let v55 : std_string_String = match _v21 with Some x -> x | None -> failwith "base.run_target / _v21=None"
    let v70 : string = "fable_library_rust::String_::fromString($0)"
    let v71 : string = Fable.Core.RustInterop.emitRustExpr v55 v70 
    v71 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v72 : US10 = US10_1
    let v73 : US11 = US11_2(v72)
    let v74 : string = $"file_system.(</>) / target: {v73} / a: {v0} / b: {v1}"
    let v75 : string = failwith<string> v74
    v75 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v78 : string = null |> unbox<string>
    v78 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v85 : string = "path"
    let v86 : IPathJoin = Fable.Core.JsInterop.importAll v85 
    let struct (v87 : string, v88 : string) = method20(v1, v0)
    let v89 : string = "v86.join($0, $1)"
    let v90 : string = Fable.Core.JsInterop.emitJsExpr struct (v87, v88) v89 
    v90 
    #endif
#if FABLE_COMPILER_PYTHON
    let v91 : US10 = US10_0
    let v92 : US11 = US11_4(v91)
    let v93 : string = $"file_system.(</>) / target: {v92} / a: {v0} / b: {v1}"
    let v94 : string = failwith<string> v93
    v94 
    #endif
#else
    let v95 : string = System.IO.Path.Combine (v0, v1)
    v95 
    #endif
    |> fun x -> _v4 <- Some x
    let v96 : string = match _v4 with Some x -> x | None -> failwith "base.run_target / _v4=None"
    v96
and method23 (v0 : string) : bool =
    let v3 : bool = true
    let mutable _v3 : bool option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let v6 : string = "String::from($0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "std::path::PathBuf::from($0)"
    let v9 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "$0.exists()"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v17 : bool =
        if v11 then
            true
        else
            let v12 : string = "$0.is_dir()"
            let v13 : bool = Fable.Core.RustInterop.emitRustExpr v9 v12 
            if v13 then
                true
            else
                let v14 : string = "$0.is_symlink()"
                let v15 : bool = Fable.Core.RustInterop.emitRustExpr v9 v14 
                v15
    v17 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v20 : bool = null |> unbox<bool>
    v20 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v29 : bool = null |> unbox<bool>
    v29 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v36 : string = "fs"
    let v37 : IFsExistsSync = Fable.Core.JsInterop.importAll v36 
    let v38 : string = "$0.existsSync($1)"
    let v39 : bool = Fable.Core.JsInterop.emitJsExpr struct (v37, v0) v38 
    v39 
    #endif
#if FABLE_COMPILER_PYTHON
    let v42 : bool = null |> unbox<bool>
    v42 
    #endif
#else
    let v49 : (string -> bool) = System.IO.Directory.Exists
    let v50 : bool = v49 v0
    v50 
    #endif
    |> fun x -> _v3 <- Some x
    let v51 : bool = match _v3 with Some x -> x | None -> failwith "base.run_target / _v3=None"
    v51
and method25 (v0 : string) : string option =
    let v3 : bool = true
    let mutable _v3 : US3 option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let v6 : string = "String::from($0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "std::path::PathBuf::from($0)"
    let v9 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "$0.parent().map(std::path::PathBuf::from)"
    let v11 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "$0?"
    let v13 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : string = "$0.display()"
    let v15 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v18 : bool = true
    let mutable _v18 : std_string_String option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v19 : string = "format!(\"{}\", $0)"
    let v20 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v19 
    v20 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v21 : string = "format!(\"{}\", $0)"
    let v22 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v21 
    v22 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v23 : string = "format!(\"{}\", $0)"
    let v24 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v23 
    v24 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v27 : std_string_String = null |> unbox<std_string_String>
    v27 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : std_string_String = null |> unbox<std_string_String>
    v36 
    #endif
#else
    let v45 : std_string_String = null |> unbox<std_string_String>
    v45 
    #endif
    |> fun x -> _v18 <- Some x
    let v52 : std_string_String = match _v18 with Some x -> x | None -> failwith "base.run_target / _v18=None"
    let v67 : string = "fable_library_rust::String_::fromString($0)"
    let v68 : string = Fable.Core.RustInterop.emitRustExpr v52 v67 
    let v69 : US3 = US3_0(v68)
    v69 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v72 : US3 = null |> unbox<US3>
    v72 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : US3 = null |> unbox<US3>
    v81 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v88 : string = "path"
    let v89 : IPathDirname = Fable.Core.JsInterop.importAll v88 
    let v90 : string = "v89.dirname($0)"
    let v91 : string = Fable.Core.JsInterop.emitJsExpr v0 v90 
    let v92 : US3 = US3_0(v91)
    v92 
    #endif
#if FABLE_COMPILER_PYTHON
    let v95 : US3 = null |> unbox<US3>
    v95 
    #endif
#else
    let v102 : (string -> System.IO.DirectoryInfo) = System.IO.Directory.GetParent
    let v103 : System.IO.DirectoryInfo = v102 v0
    let v106 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    let v115 : bool = v103 = v106 
    let v188 : US3 =
        if v115 then
            US3_1
        else
            let v125 : bool = true
            let mutable _v125 : string option = None 
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v128 : string = null |> unbox<string>
            v128 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v137 : string = null |> unbox<string>
            v137 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v146 : string = null |> unbox<string>
            v146 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v155 : string = null |> unbox<string>
            v155 
            #endif
#if FABLE_COMPILER_PYTHON
            let v164 : string = null |> unbox<string>
            v164 
            #endif
#else
            let v171 : string = v103.FullName
            v171 
            #endif
            |> fun x -> _v125 <- Some x
            let v172 : string = match _v125 with Some x -> x | None -> failwith "base.run_target / _v125=None"
            US3_0(v172)
    v188 
    #endif
    |> fun x -> _v3 <- Some x
    let v189 : US3 = match _v3 with Some x -> x | None -> failwith "base.run_target / _v3=None"
    match v189 with
    | US3_1 -> (* None *)
        let v214 : string option = None
        v214
    | US3_0(v204) -> (* Some *)
        let v207 : string option = Some v204 
        v207
and closure8 () (v0 : string) : string option =
    method25(v0)
and method24 () : (string -> string option) =
    closure8()
and method26 (v0 : string, v1 : string, v2 : string) : US12 =
    let v3 : string = method19(v2, v0)
    let v4 : bool = method23(v3)
    if v4 then
        US12_0(v2)
    else
        let v6 : (string -> string option) = method24()
        let v7 : string option = v6 v2
        let v10 : US3 option = None
        let _v10 = ref v10 
        match v7 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v11 : string = x
        let v12 : US3 = US3_0(v11)
        v12 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v10.Value <- x
        let v13 : US3 option = _v10.Value 
        let v36 : US3 = US3_1
        let v37 : US3 = v13 |> Option.defaultValue v36 
        match v37 with
        | US3_1 -> (* None *)
            let v47 : string = $"""No parent for {if false then "file" else "dir"} '{v0}' at '{v1}' (until '{v2}')"""
            US12_1(v47)
        | US3_0(v45) -> (* Some *)
            method26(v0, v1, v45)
and method22 (v0 : string, v1 : string) : US12 =
    let v2 : string = method19(v1, v0)
    let v3 : bool = method23(v2)
    if v3 then
        US12_0(v1)
    else
        let v5 : (string -> string option) = method24()
        let v6 : string option = v5 v1
        let v9 : US3 option = None
        let _v9 = ref v9 
        match v6 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v10 : string = x
        let v11 : US3 = US3_0(v10)
        v11 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v9.Value <- x
        let v12 : US3 option = _v9.Value 
        let v35 : US3 = US3_1
        let v36 : US3 = v12 |> Option.defaultValue v35 
        match v36 with
        | US3_1 -> (* None *)
            let v46 : string = $"""No parent for {if false then "file" else "dir"} '{v0}' at '{v1}' (until '{v1}')"""
            US12_1(v46)
        | US3_0(v44) -> (* Some *)
            method26(v0, v1, v44)
and closure9 () () : string =
    let v0 : string = "file_system.get_workspace_root"
    v0
and closure10 (v0 : string) () : string =
    v0
and method28 (v0 : Mut4, v1 : string) : unit =
    let v2 : string = "{ "
    method10(v0, v2)
    method11(v0)
    let v3 : string = "error"
    method10(v0, v3)
    let v4 : string = " = "
    method10(v0, v4)
    method10(v0, v1)
    let v5 : string = " }"
    method10(v0, v5)
and closure11 (v0 : US0, v1 : (unit -> string), v2 : (unit -> string)) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = $"near_sdk::env::block_timestamp()"
    let v331 : uint64 = Fable.Core.RustInterop.emitRustExpr () v330 
    let v334 : US2 option = None
    let _v334 = ref v334 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v335 : int64 = x
    let v336 : US2 = US2_0(v335)
    v336 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v334.Value <- x
    let v337 : US2 option = _v334.Value 
    let v360 : US2 = US2_1
    let v361 : US2 = v337 |> Option.defaultValue v360 
    let v374 : uint64 =
        match v361 with
        | US2_1 -> (* None *)
            v331
        | US2_0(v369) -> (* Some *)
            let v370 : (int64 -> uint64) = uint64
            let v371 : uint64 = v370 v369
            let v372 : uint64 = v331 - v371
            v372
    let v375 : uint64 = v374 / 1000000000UL
    let v376 : uint64 = v375 % 60UL
    let v377 : uint64 = v375 / 60UL
    let v378 : uint64 = v377 % 60UL
    let v379 : uint64 = v375 / 3600UL
    let v380 : uint64 = v379 % 24UL
    let v381 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v382 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v380, v378, v376) v381 
    let v383 : string = "fable_library_rust::String_::fromString($0)"
    let v384 : string = Fable.Core.RustInterop.emitRustExpr v382 v383 
    v384 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v387 : US2 option = None
    let _v387 = ref v387 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v388 : int64 = x
    let v389 : US2 = US2_0(v388)
    v389 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v387.Value <- x
    let v390 : US2 option = _v387.Value 
    let v413 : US2 = US2_1
    let v414 : US2 = v390 |> Option.defaultValue v413 
    let v512 : System.DateTime =
        match v414 with
        | US2_1 -> (* None *)
            let v504 : System.DateTime = System.DateTime.Now
            v504
        | US2_0(v422) -> (* Some *)
            let v425 : System.DateTime = System.DateTime.Now
            let v434 : (System.DateTime -> int64) = _.Ticks
            let v435 : int64 = v434 v425
            let v442 : int64 = v435 - v422
            let v445 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v446 : System.TimeSpan = v445 v442
            let v455 : (System.TimeSpan -> int32) = _.Hours
            let v456 : int32 = v455 v446
            let v465 : (System.TimeSpan -> int32) = _.Minutes
            let v466 : int32 = v465 v446
            let v475 : (System.TimeSpan -> int32) = _.Seconds
            let v476 : int32 = v475 v446
            let v485 : (System.TimeSpan -> int32) = _.Milliseconds
            let v486 : int32 = v485 v446
            let v495 : System.DateTime = System.DateTime (1, 1, 1, v456, v466, v476, v486)
            v495
    let v515 : string = method7()
    let v524 : (string -> string) = v512.ToString
    let v525 : string = v524 v515
    v525 
    #endif
#if FABLE_COMPILER_PYTHON
    let v534 : US2 option = None
    let _v534 = ref v534 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v535 : int64 = x
    let v536 : US2 = US2_0(v535)
    v536 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v534.Value <- x
    let v537 : US2 option = _v534.Value 
    let v560 : US2 = US2_1
    let v561 : US2 = v537 |> Option.defaultValue v560 
    let v659 : System.DateTime =
        match v561 with
        | US2_1 -> (* None *)
            let v651 : System.DateTime = System.DateTime.Now
            v651
        | US2_0(v569) -> (* Some *)
            let v572 : System.DateTime = System.DateTime.Now
            let v581 : (System.DateTime -> int64) = _.Ticks
            let v582 : int64 = v581 v572
            let v589 : int64 = v582 - v569
            let v592 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v593 : System.TimeSpan = v592 v589
            let v602 : (System.TimeSpan -> int32) = _.Hours
            let v603 : int32 = v602 v593
            let v612 : (System.TimeSpan -> int32) = _.Minutes
            let v613 : int32 = v612 v593
            let v622 : (System.TimeSpan -> int32) = _.Seconds
            let v623 : int32 = v622 v593
            let v632 : (System.TimeSpan -> int32) = _.Milliseconds
            let v633 : int32 = v632 v593
            let v642 : System.DateTime = System.DateTime (1, 1, 1, v603, v613, v623, v633)
            v642
    let v662 : string = method7()
    let v671 : (string -> string) = v659.ToString
    let v672 : string = v671 v662
    v672 
    #endif
#else
    let v681 : US2 option = None
    let _v681 = ref v681 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v682 : int64 = x
    let v683 : US2 = US2_0(v682)
    v683 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v681.Value <- x
    let v684 : US2 option = _v681.Value 
    let v707 : US2 = US2_1
    let v708 : US2 = v684 |> Option.defaultValue v707 
    let v806 : System.DateTime =
        match v708 with
        | US2_1 -> (* None *)
            let v798 : System.DateTime = System.DateTime.Now
            v798
        | US2_0(v716) -> (* Some *)
            let v719 : System.DateTime = System.DateTime.Now
            let v728 : (System.DateTime -> int64) = _.Ticks
            let v729 : int64 = v728 v719
            let v736 : int64 = v729 - v716
            let v739 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v740 : System.TimeSpan = v739 v736
            let v749 : (System.TimeSpan -> int32) = _.Hours
            let v750 : int32 = v749 v740
            let v759 : (System.TimeSpan -> int32) = _.Minutes
            let v760 : int32 = v759 v740
            let v769 : (System.TimeSpan -> int32) = _.Seconds
            let v770 : int32 = v769 v740
            let v779 : (System.TimeSpan -> int32) = _.Milliseconds
            let v780 : int32 = v779 v740
            let v789 : System.DateTime = System.DateTime (1, 1, 1, v750, v760, v770, v780)
            v789
    let v809 : string = method7()
    let v818 : (string -> string) = v806.ToString
    let v819 : string = v818 v809
    v819 
    #endif
    |> fun x -> _v35 <- Some x
    let v826 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v981 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v985 : US3 =
        if v981 then
            let v982 : string = "Verbose"
            US3_0(v982)
        else
            US3_1
    let v1034 : US3 =
        match v985 with
        | US3_1 -> (* None *)
            let v990 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v994 : US3 =
                if v990 then
                    let v991 : string = "Debug"
                    US3_0(v991)
                else
                    US3_1
            match v994 with
            | US3_1 -> (* None *)
                let v999 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v1003 : US3 =
                    if v999 then
                        let v1000 : string = "Info"
                        US3_0(v1000)
                    else
                        US3_1
                match v1003 with
                | US3_1 -> (* None *)
                    let v1008 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v1012 : US3 =
                        if v1008 then
                            let v1009 : string = "Warning"
                            US3_0(v1009)
                        else
                            US3_1
                    match v1012 with
                    | US3_1 -> (* None *)
                        let v1017 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v1021 : US3 =
                            if v1017 then
                                let v1018 : string = "Critical"
                                US3_0(v1018)
                            else
                                US3_1
                        match v1021 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v1022) -> (* Some *)
                            US3_0(v1022)
                    | US3_0(v1013) -> (* Some *)
                        US3_0(v1013)
                | US3_0(v1004) -> (* Some *)
                    US3_0(v1004)
            | US3_0(v995) -> (* Some *)
                US3_0(v995)
        | US3_0(v986) -> (* Some *)
            US3_0(v986)
    let v1038 : string =
        match v1034 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v1035) -> (* Some *)
            v1035
    let v1041 : (unit -> string) = v1038.ToLower
    let v1042 : string = v1041 ()
    let v1051 : string = v1042.PadLeft (7, ' ')
    let v1083 : bool = true
    let mutable _v1083 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1098 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1092 : string = "inline_colorization::color_bright_red"
            let v1093 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1092 
            v1093
        | US0_1 -> (* Debug *)
            let v1086 : string = "inline_colorization::color_bright_blue"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_2 -> (* Info *)
            let v1088 : string = "inline_colorization::color_bright_green"
            let v1089 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1088 
            v1089
        | US0_0 -> (* Verbose *)
            let v1084 : string = "inline_colorization::color_bright_black"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
        | US0_3 -> (* Warning *)
            let v1090 : string = "inline_colorization::color_yellow"
            let v1091 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1090 
            v1091
    let v1099 : string = "&*$0"
    let v1100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1099 
    let v1101 : string = "inline_colorization::color_reset"
    let v1102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1101 
    let v1103 : string = "\"{v1098}{v1100}{v1102}\""
    let v1104 : string = @$"format!(" + v1103 + ")"
    let v1105 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1104 
    let v1106 : string = "fable_library_rust::String_::fromString($0)"
    let v1107 : string = Fable.Core.RustInterop.emitRustExpr v1105 v1106 
    v1107 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1122 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1116 : string = "inline_colorization::color_bright_red"
            let v1117 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1116 
            v1117
        | US0_1 -> (* Debug *)
            let v1110 : string = "inline_colorization::color_bright_blue"
            let v1111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1110 
            v1111
        | US0_2 -> (* Info *)
            let v1112 : string = "inline_colorization::color_bright_green"
            let v1113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1112 
            v1113
        | US0_0 -> (* Verbose *)
            let v1108 : string = "inline_colorization::color_bright_black"
            let v1109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1108 
            v1109
        | US0_3 -> (* Warning *)
            let v1114 : string = "inline_colorization::color_yellow"
            let v1115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1114 
            v1115
    let v1123 : string = "&*$0"
    let v1124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1123 
    let v1125 : string = "inline_colorization::color_reset"
    let v1126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1125 
    let v1127 : string = "\"{v1122}{v1124}{v1126}\""
    let v1128 : string = @$"format!(" + v1127 + ")"
    let v1129 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1128 
    let v1130 : string = "fable_library_rust::String_::fromString($0)"
    let v1131 : string = Fable.Core.RustInterop.emitRustExpr v1129 v1130 
    v1131 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1146 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1140 : string = "inline_colorization::color_bright_red"
            let v1141 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1140 
            v1141
        | US0_1 -> (* Debug *)
            let v1134 : string = "inline_colorization::color_bright_blue"
            let v1135 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1134 
            v1135
        | US0_2 -> (* Info *)
            let v1136 : string = "inline_colorization::color_bright_green"
            let v1137 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1136 
            v1137
        | US0_0 -> (* Verbose *)
            let v1132 : string = "inline_colorization::color_bright_black"
            let v1133 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1132 
            v1133
        | US0_3 -> (* Warning *)
            let v1138 : string = "inline_colorization::color_yellow"
            let v1139 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1138 
            v1139
    let v1147 : string = "&*$0"
    let v1148 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1147 
    let v1149 : string = "inline_colorization::color_reset"
    let v1150 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1149 
    let v1151 : string = "\"{v1146}{v1148}{v1150}\""
    let v1152 : string = @$"format!(" + v1151 + ")"
    let v1153 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1152 
    let v1154 : string = "fable_library_rust::String_::fromString($0)"
    let v1155 : string = Fable.Core.RustInterop.emitRustExpr v1153 v1154 
    v1155 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1165 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1160 : string = "\u001b[91m"
            v1160
        | US0_1 -> (* Debug *)
            let v1157 : string = "\u001b[94m"
            v1157
        | US0_2 -> (* Info *)
            let v1158 : string = "\u001b[92m"
            v1158
        | US0_0 -> (* Verbose *)
            let v1156 : string = "\u001b[90m"
            v1156
        | US0_3 -> (* Warning *)
            let v1159 : string = "\u001b[93m"
            v1159
    let v1166 : string = method8()
    let v1167 : string = v1165 + v1051 
    let v1168 : string = v1167 + v1166 
    v1168 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1178 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1173 : string = "\u001b[91m"
            v1173
        | US0_1 -> (* Debug *)
            let v1170 : string = "\u001b[94m"
            v1170
        | US0_2 -> (* Info *)
            let v1171 : string = "\u001b[92m"
            v1171
        | US0_0 -> (* Verbose *)
            let v1169 : string = "\u001b[90m"
            v1169
        | US0_3 -> (* Warning *)
            let v1172 : string = "\u001b[93m"
            v1172
    let v1179 : string = method8()
    let v1180 : string = v1178 + v1051 
    let v1181 : string = v1180 + v1179 
    v1181 
    #endif
#else
    let v1191 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1186 : string = "\u001b[91m"
            v1186
        | US0_1 -> (* Debug *)
            let v1183 : string = "\u001b[94m"
            v1183
        | US0_2 -> (* Info *)
            let v1184 : string = "\u001b[92m"
            v1184
        | US0_0 -> (* Verbose *)
            let v1182 : string = "\u001b[90m"
            v1182
        | US0_3 -> (* Warning *)
            let v1185 : string = "\u001b[93m"
            v1185
    let v1192 : string = method8()
    let v1193 : string = v1191 + v1051 
    let v1194 : string = v1193 + v1192 
    v1194 
    #endif
    |> fun x -> _v1083 <- Some x
    let v1195 : string = match _v1083 with Some x -> x | None -> failwith "base.run_target / _v1083=None"
    let v1214 : int64 = v14.l0
    let v1215 : string = v2 ()
    let v1216 : string = ""
    let v1217 : Mut4 = {l0 = v1216} : Mut4
    method28(v1217, v1215)
    let v1218 : string = v1217.l0
    let v1221 : string = $"{v826} {v1195} #{v1214} %s{v1 ()} / {v1218}"
    let v1228 : char list = []
    let v1233 : (char list -> (char [])) = List.toArray
    let v1234 : (char []) = v1233 v1228
    let v1241 : string = v1221.TrimStart v1234 
    let v1280 : char list = []
    let v1283 : char list = '/' :: v1280 
    let v1292 : char list = ' ' :: v1283 
    let v1303 : (char list -> (char [])) = List.toArray
    let v1304 : (char []) = v1303 v1292
    let v1311 : string = v1241.TrimEnd v1304 
    v1311
and method27 (v0 : US0, v1 : (unit -> string), v2 : (unit -> string)) : unit =
    let v3 : (unit -> string) = closure11(v0, v1, v2)
    method13(v0, v3)
and method29 () : string =
    let v2 : bool = true
    let mutable _v2 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "std::env::current_dir()"
    let v4 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v3 
    let v5 : string = "$0.unwrap()"
    let v6 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "$0.display()"
    let v8 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v11 : bool = true
    let mutable _v11 : std_string_String option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v12 : string = "format!(\"{}\", $0)"
    let v13 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v12 
    v13 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v14 : string = "format!(\"{}\", $0)"
    let v15 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v14 
    v15 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : string = "format!(\"{}\", $0)"
    let v17 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v16 
    v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : std_string_String = null |> unbox<std_string_String>
    v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v29 : std_string_String = null |> unbox<std_string_String>
    v29 
    #endif
#else
    let v38 : std_string_String = null |> unbox<std_string_String>
    v38 
    #endif
    |> fun x -> _v11 <- Some x
    let v45 : std_string_String = match _v11 with Some x -> x | None -> failwith "base.run_target / _v11=None"
    let v60 : string = "fable_library_rust::String_::fromString($0)"
    let v61 : string = Fable.Core.RustInterop.emitRustExpr v45 v60 
    v61 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v64 : string = null |> unbox<string>
    v64 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v73 : string = null |> unbox<string>
    v73 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v82 : string = null |> unbox<string>
    v82 
    #endif
#if FABLE_COMPILER_PYTHON
    let v91 : string = null |> unbox<string>
    v91 
    #endif
#else
    let v98 : (unit -> string) = System.IO.Directory.GetCurrentDirectory
    let v99 : string = v98 ()
    v99 
    #endif
    |> fun x -> _v2 <- Some x
    let v100 : string = match _v2 with Some x -> x | None -> failwith "base.run_target / _v2=None"
    v100
and method30 (v0 : string) : string =
    let v3 : bool = true
    let mutable _v3 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let v6 : string = "String::from($0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "std::path::PathBuf::from($0)"
    let v9 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "$0.parent()"
    let v11 : Ref<std_path_Path> option = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "$0.unwrap()"
    let v13 : Ref<std_path_Path> = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : string = "$0.display()"
    let v15 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v18 : bool = true
    let mutable _v18 : std_string_String option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v19 : string = "format!(\"{}\", $0)"
    let v20 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v19 
    v20 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v21 : string = "format!(\"{}\", $0)"
    let v22 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v21 
    v22 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v23 : string = "format!(\"{}\", $0)"
    let v24 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v23 
    v24 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v27 : std_string_String = null |> unbox<std_string_String>
    v27 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : std_string_String = null |> unbox<std_string_String>
    v36 
    #endif
#else
    let v45 : std_string_String = null |> unbox<std_string_String>
    v45 
    #endif
    |> fun x -> _v18 <- Some x
    let v52 : std_string_String = match _v18 with Some x -> x | None -> failwith "base.run_target / _v18=None"
    let v67 : string = "fable_library_rust::String_::fromString($0)"
    let v68 : string = Fable.Core.RustInterop.emitRustExpr v52 v67 
    v68 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v69 : (string -> string) = System.IO.Path.GetDirectoryName
    let v70 : string = v69 v0
    v70 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v73 : string = null |> unbox<string>
    v73 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v80 : (string -> string) = System.IO.Path.GetDirectoryName
    let v81 : string = v80 v0
    v81 
    #endif
#if FABLE_COMPILER_PYTHON
    let v82 : (string -> string) = System.IO.Path.GetDirectoryName
    let v83 : string = v82 v0
    v83 
    #endif
#else
    let v84 : (string -> string) = System.IO.Path.GetDirectoryName
    let v85 : string = v84 v0
    v85 
    #endif
    |> fun x -> _v3 <- Some x
    let v86 : string = match _v3 with Some x -> x | None -> failwith "base.run_target / _v3=None"
    v86
and method33 (v0 : string) : bool =
    let v3 : bool = true
    let mutable _v3 : bool option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let v6 : string = "String::from($0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "std::path::PathBuf::from($0)"
    let v9 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "$0.exists()"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v14 : bool =
        if v11 then
            let v12 : string = "$0.is_file()"
            let v13 : bool = Fable.Core.RustInterop.emitRustExpr v9 v12 
            v13
        else
            false
    v14 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : bool = null |> unbox<bool>
    v17 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v26 : bool = null |> unbox<bool>
    v26 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : string = "fs"
    let v34 : IFsExistsSync = Fable.Core.JsInterop.importAll v33 
    let v35 : string = "$0.existsSync($1)"
    let v36 : bool = Fable.Core.JsInterop.emitJsExpr struct (v34, v0) v35 
    v36 
    #endif
#if FABLE_COMPILER_PYTHON
    let v39 : bool = null |> unbox<bool>
    v39 
    #endif
#else
    let v46 : (string -> bool) = System.IO.File.Exists
    let v47 : bool = v46 v0
    v47 
    #endif
    |> fun x -> _v3 <- Some x
    let v48 : bool = match _v3 with Some x -> x | None -> failwith "base.run_target / _v3=None"
    v48
and method32 (v0 : string, v1 : string) : bool =
    let v4 : bool = true
    let mutable _v4 : bool option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : bool = method33(v0)
    let v6 : bool = v5 = false
    let v129 : bool =
        if v6 then
            false
        else
            let v9 : bool = true
            let mutable _v9 : string option = None 
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v12 : bool = true
            let mutable _v12 : Vec<uint8> option = None 
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v13 : string = "std::fs::read(&*$0).unwrap()"
            let v14 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v0 v13 
            v14 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v17 : Vec<uint8> = null |> unbox<Vec<uint8>>
            v17 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v26 : Vec<uint8> = null |> unbox<Vec<uint8>>
            v26 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v35 : Vec<uint8> = null |> unbox<Vec<uint8>>
            v35 
            #endif
#if FABLE_COMPILER_PYTHON
            let v44 : Vec<uint8> = null |> unbox<Vec<uint8>>
            v44 
            #endif
#else
            let v51 : (uint8 []) = v0 |> System.IO.File.ReadAllBytes
            let v52 : string = "$0.to_vec()"
            let v53 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v51 v52 
            v53 
            #endif
            |> fun x -> _v12 <- Some x
            let v54 : Vec<uint8> = match _v12 with Some x -> x | None -> failwith "base.run_target / _v12=None"
            let v69 : Vec<uint8> = method18(v54)
            let v70 : string = "std::string::String::from_utf8($0)"
            let v71 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v69 v70 
            let v72 : string = "$0.unwrap()"
            let v73 : std_string_String = Fable.Core.RustInterop.emitRustExpr v71 v72 
            let v74 : string = "fable_library_rust::String_::fromString($0)"
            let v75 : string = Fable.Core.RustInterop.emitRustExpr v73 v74 
            v75 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v78 : string = null |> unbox<string>
            v78 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v87 : string = null |> unbox<string>
            v87 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v96 : string = null |> unbox<string>
            v96 
            #endif
#if FABLE_COMPILER_PYTHON
            let v105 : string = null |> unbox<string>
            v105 
            #endif
#else
            let v112 : string = v0 |> System.IO.File.ReadAllText
            v112 
            #endif
            |> fun x -> _v9 <- Some x
            let v113 : string = match _v9 with Some x -> x | None -> failwith "base.run_target / _v9=None"
            let v128 : bool = v1 = v113
            v128
    v129 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v132 : bool = null |> unbox<bool>
    v132 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v141 : bool = null |> unbox<bool>
    v141 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v150 : bool = null |> unbox<bool>
    v150 
    #endif
#if FABLE_COMPILER_PYTHON
    let v159 : bool = null |> unbox<bool>
    v159 
    #endif
#else
    let v168 : bool = null |> unbox<bool>
    v168 
    #endif
    |> fun x -> _v4 <- Some x
    let v175 : bool = match _v4 with Some x -> x | None -> failwith "base.run_target / _v4=None"
    v175
and method35 (v0 : string) : string =
    v0
and closure12 () (v0 : std_io_Error) : std_string_String =
    let v3 : bool = true
    let mutable _v3 : std_string_String option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    v5 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    v7 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    v9 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : std_string_String = null |> unbox<std_string_String>
    v12 
    #endif
#if FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    v21 
    #endif
#else
    let v30 : std_string_String = null |> unbox<std_string_String>
    v30 
    #endif
    |> fun x -> _v3 <- Some x
    let v37 : std_string_String = match _v3 with Some x -> x | None -> failwith "base.run_target / _v3=None"
    v37
and method36 () : (std_io_Error -> std_string_String) =
    closure12()
and closure13 () () : US13 =
    US13_0
and closure14 () (v0 : std_string_String) : US13 =
    US13_1(v0)
and closure15 () () : string =
    let v0 : string = "file_system.create_dir"
    v0
and closure16 (v0 : string, v1 : std_string_String) () : struct (string * std_string_String) =
    struct (v0, v1)
and method39 (v0 : Mut4, v1 : std_string_String) : unit =
    let v4 : string = $"%A{v1}"
    method10(v0, v4)
and method38 (v0 : Mut4, v1 : string, v2 : std_string_String) : unit =
    let v3 : string = "{ "
    method10(v0, v3)
    method11(v0)
    let v4 : string = "dir"
    method10(v0, v4)
    let v5 : string = " = "
    method10(v0, v5)
    method10(v0, v1)
    let v6 : string = "; "
    method10(v0, v6)
    let v7 : string = "error"
    method10(v0, v7)
    method10(v0, v5)
    method39(v0, v2)
    let v8 : string = " }"
    method10(v0, v8)
and closure17 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (string * std_string_String))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = $"near_sdk::env::block_timestamp()"
    let v331 : uint64 = Fable.Core.RustInterop.emitRustExpr () v330 
    let v334 : US2 option = None
    let _v334 = ref v334 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v335 : int64 = x
    let v336 : US2 = US2_0(v335)
    v336 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v334.Value <- x
    let v337 : US2 option = _v334.Value 
    let v360 : US2 = US2_1
    let v361 : US2 = v337 |> Option.defaultValue v360 
    let v374 : uint64 =
        match v361 with
        | US2_1 -> (* None *)
            v331
        | US2_0(v369) -> (* Some *)
            let v370 : (int64 -> uint64) = uint64
            let v371 : uint64 = v370 v369
            let v372 : uint64 = v331 - v371
            v372
    let v375 : uint64 = v374 / 1000000000UL
    let v376 : uint64 = v375 % 60UL
    let v377 : uint64 = v375 / 60UL
    let v378 : uint64 = v377 % 60UL
    let v379 : uint64 = v375 / 3600UL
    let v380 : uint64 = v379 % 24UL
    let v381 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v382 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v380, v378, v376) v381 
    let v383 : string = "fable_library_rust::String_::fromString($0)"
    let v384 : string = Fable.Core.RustInterop.emitRustExpr v382 v383 
    v384 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v387 : US2 option = None
    let _v387 = ref v387 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v388 : int64 = x
    let v389 : US2 = US2_0(v388)
    v389 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v387.Value <- x
    let v390 : US2 option = _v387.Value 
    let v413 : US2 = US2_1
    let v414 : US2 = v390 |> Option.defaultValue v413 
    let v512 : System.DateTime =
        match v414 with
        | US2_1 -> (* None *)
            let v504 : System.DateTime = System.DateTime.Now
            v504
        | US2_0(v422) -> (* Some *)
            let v425 : System.DateTime = System.DateTime.Now
            let v434 : (System.DateTime -> int64) = _.Ticks
            let v435 : int64 = v434 v425
            let v442 : int64 = v435 - v422
            let v445 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v446 : System.TimeSpan = v445 v442
            let v455 : (System.TimeSpan -> int32) = _.Hours
            let v456 : int32 = v455 v446
            let v465 : (System.TimeSpan -> int32) = _.Minutes
            let v466 : int32 = v465 v446
            let v475 : (System.TimeSpan -> int32) = _.Seconds
            let v476 : int32 = v475 v446
            let v485 : (System.TimeSpan -> int32) = _.Milliseconds
            let v486 : int32 = v485 v446
            let v495 : System.DateTime = System.DateTime (1, 1, 1, v456, v466, v476, v486)
            v495
    let v515 : string = method7()
    let v524 : (string -> string) = v512.ToString
    let v525 : string = v524 v515
    v525 
    #endif
#if FABLE_COMPILER_PYTHON
    let v534 : US2 option = None
    let _v534 = ref v534 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v535 : int64 = x
    let v536 : US2 = US2_0(v535)
    v536 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v534.Value <- x
    let v537 : US2 option = _v534.Value 
    let v560 : US2 = US2_1
    let v561 : US2 = v537 |> Option.defaultValue v560 
    let v659 : System.DateTime =
        match v561 with
        | US2_1 -> (* None *)
            let v651 : System.DateTime = System.DateTime.Now
            v651
        | US2_0(v569) -> (* Some *)
            let v572 : System.DateTime = System.DateTime.Now
            let v581 : (System.DateTime -> int64) = _.Ticks
            let v582 : int64 = v581 v572
            let v589 : int64 = v582 - v569
            let v592 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v593 : System.TimeSpan = v592 v589
            let v602 : (System.TimeSpan -> int32) = _.Hours
            let v603 : int32 = v602 v593
            let v612 : (System.TimeSpan -> int32) = _.Minutes
            let v613 : int32 = v612 v593
            let v622 : (System.TimeSpan -> int32) = _.Seconds
            let v623 : int32 = v622 v593
            let v632 : (System.TimeSpan -> int32) = _.Milliseconds
            let v633 : int32 = v632 v593
            let v642 : System.DateTime = System.DateTime (1, 1, 1, v603, v613, v623, v633)
            v642
    let v662 : string = method7()
    let v671 : (string -> string) = v659.ToString
    let v672 : string = v671 v662
    v672 
    #endif
#else
    let v681 : US2 option = None
    let _v681 = ref v681 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v682 : int64 = x
    let v683 : US2 = US2_0(v682)
    v683 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v681.Value <- x
    let v684 : US2 option = _v681.Value 
    let v707 : US2 = US2_1
    let v708 : US2 = v684 |> Option.defaultValue v707 
    let v806 : System.DateTime =
        match v708 with
        | US2_1 -> (* None *)
            let v798 : System.DateTime = System.DateTime.Now
            v798
        | US2_0(v716) -> (* Some *)
            let v719 : System.DateTime = System.DateTime.Now
            let v728 : (System.DateTime -> int64) = _.Ticks
            let v729 : int64 = v728 v719
            let v736 : int64 = v729 - v716
            let v739 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v740 : System.TimeSpan = v739 v736
            let v749 : (System.TimeSpan -> int32) = _.Hours
            let v750 : int32 = v749 v740
            let v759 : (System.TimeSpan -> int32) = _.Minutes
            let v760 : int32 = v759 v740
            let v769 : (System.TimeSpan -> int32) = _.Seconds
            let v770 : int32 = v769 v740
            let v779 : (System.TimeSpan -> int32) = _.Milliseconds
            let v780 : int32 = v779 v740
            let v789 : System.DateTime = System.DateTime (1, 1, 1, v750, v760, v770, v780)
            v789
    let v809 : string = method7()
    let v818 : (string -> string) = v806.ToString
    let v819 : string = v818 v809
    v819 
    #endif
    |> fun x -> _v35 <- Some x
    let v826 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v981 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v985 : US3 =
        if v981 then
            let v982 : string = "Verbose"
            US3_0(v982)
        else
            US3_1
    let v1034 : US3 =
        match v985 with
        | US3_1 -> (* None *)
            let v990 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v994 : US3 =
                if v990 then
                    let v991 : string = "Debug"
                    US3_0(v991)
                else
                    US3_1
            match v994 with
            | US3_1 -> (* None *)
                let v999 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v1003 : US3 =
                    if v999 then
                        let v1000 : string = "Info"
                        US3_0(v1000)
                    else
                        US3_1
                match v1003 with
                | US3_1 -> (* None *)
                    let v1008 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v1012 : US3 =
                        if v1008 then
                            let v1009 : string = "Warning"
                            US3_0(v1009)
                        else
                            US3_1
                    match v1012 with
                    | US3_1 -> (* None *)
                        let v1017 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v1021 : US3 =
                            if v1017 then
                                let v1018 : string = "Critical"
                                US3_0(v1018)
                            else
                                US3_1
                        match v1021 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v1022) -> (* Some *)
                            US3_0(v1022)
                    | US3_0(v1013) -> (* Some *)
                        US3_0(v1013)
                | US3_0(v1004) -> (* Some *)
                    US3_0(v1004)
            | US3_0(v995) -> (* Some *)
                US3_0(v995)
        | US3_0(v986) -> (* Some *)
            US3_0(v986)
    let v1038 : string =
        match v1034 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v1035) -> (* Some *)
            v1035
    let v1041 : (unit -> string) = v1038.ToLower
    let v1042 : string = v1041 ()
    let v1051 : string = v1042.PadLeft (7, ' ')
    let v1083 : bool = true
    let mutable _v1083 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1098 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1092 : string = "inline_colorization::color_bright_red"
            let v1093 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1092 
            v1093
        | US0_1 -> (* Debug *)
            let v1086 : string = "inline_colorization::color_bright_blue"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_2 -> (* Info *)
            let v1088 : string = "inline_colorization::color_bright_green"
            let v1089 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1088 
            v1089
        | US0_0 -> (* Verbose *)
            let v1084 : string = "inline_colorization::color_bright_black"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
        | US0_3 -> (* Warning *)
            let v1090 : string = "inline_colorization::color_yellow"
            let v1091 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1090 
            v1091
    let v1099 : string = "&*$0"
    let v1100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1099 
    let v1101 : string = "inline_colorization::color_reset"
    let v1102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1101 
    let v1103 : string = "\"{v1098}{v1100}{v1102}\""
    let v1104 : string = @$"format!(" + v1103 + ")"
    let v1105 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1104 
    let v1106 : string = "fable_library_rust::String_::fromString($0)"
    let v1107 : string = Fable.Core.RustInterop.emitRustExpr v1105 v1106 
    v1107 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1122 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1116 : string = "inline_colorization::color_bright_red"
            let v1117 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1116 
            v1117
        | US0_1 -> (* Debug *)
            let v1110 : string = "inline_colorization::color_bright_blue"
            let v1111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1110 
            v1111
        | US0_2 -> (* Info *)
            let v1112 : string = "inline_colorization::color_bright_green"
            let v1113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1112 
            v1113
        | US0_0 -> (* Verbose *)
            let v1108 : string = "inline_colorization::color_bright_black"
            let v1109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1108 
            v1109
        | US0_3 -> (* Warning *)
            let v1114 : string = "inline_colorization::color_yellow"
            let v1115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1114 
            v1115
    let v1123 : string = "&*$0"
    let v1124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1123 
    let v1125 : string = "inline_colorization::color_reset"
    let v1126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1125 
    let v1127 : string = "\"{v1122}{v1124}{v1126}\""
    let v1128 : string = @$"format!(" + v1127 + ")"
    let v1129 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1128 
    let v1130 : string = "fable_library_rust::String_::fromString($0)"
    let v1131 : string = Fable.Core.RustInterop.emitRustExpr v1129 v1130 
    v1131 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1146 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1140 : string = "inline_colorization::color_bright_red"
            let v1141 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1140 
            v1141
        | US0_1 -> (* Debug *)
            let v1134 : string = "inline_colorization::color_bright_blue"
            let v1135 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1134 
            v1135
        | US0_2 -> (* Info *)
            let v1136 : string = "inline_colorization::color_bright_green"
            let v1137 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1136 
            v1137
        | US0_0 -> (* Verbose *)
            let v1132 : string = "inline_colorization::color_bright_black"
            let v1133 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1132 
            v1133
        | US0_3 -> (* Warning *)
            let v1138 : string = "inline_colorization::color_yellow"
            let v1139 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1138 
            v1139
    let v1147 : string = "&*$0"
    let v1148 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1147 
    let v1149 : string = "inline_colorization::color_reset"
    let v1150 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1149 
    let v1151 : string = "\"{v1146}{v1148}{v1150}\""
    let v1152 : string = @$"format!(" + v1151 + ")"
    let v1153 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1152 
    let v1154 : string = "fable_library_rust::String_::fromString($0)"
    let v1155 : string = Fable.Core.RustInterop.emitRustExpr v1153 v1154 
    v1155 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1165 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1160 : string = "\u001b[91m"
            v1160
        | US0_1 -> (* Debug *)
            let v1157 : string = "\u001b[94m"
            v1157
        | US0_2 -> (* Info *)
            let v1158 : string = "\u001b[92m"
            v1158
        | US0_0 -> (* Verbose *)
            let v1156 : string = "\u001b[90m"
            v1156
        | US0_3 -> (* Warning *)
            let v1159 : string = "\u001b[93m"
            v1159
    let v1166 : string = method8()
    let v1167 : string = v1165 + v1051 
    let v1168 : string = v1167 + v1166 
    v1168 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1178 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1173 : string = "\u001b[91m"
            v1173
        | US0_1 -> (* Debug *)
            let v1170 : string = "\u001b[94m"
            v1170
        | US0_2 -> (* Info *)
            let v1171 : string = "\u001b[92m"
            v1171
        | US0_0 -> (* Verbose *)
            let v1169 : string = "\u001b[90m"
            v1169
        | US0_3 -> (* Warning *)
            let v1172 : string = "\u001b[93m"
            v1172
    let v1179 : string = method8()
    let v1180 : string = v1178 + v1051 
    let v1181 : string = v1180 + v1179 
    v1181 
    #endif
#else
    let v1191 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1186 : string = "\u001b[91m"
            v1186
        | US0_1 -> (* Debug *)
            let v1183 : string = "\u001b[94m"
            v1183
        | US0_2 -> (* Info *)
            let v1184 : string = "\u001b[92m"
            v1184
        | US0_0 -> (* Verbose *)
            let v1182 : string = "\u001b[90m"
            v1182
        | US0_3 -> (* Warning *)
            let v1185 : string = "\u001b[93m"
            v1185
    let v1192 : string = method8()
    let v1193 : string = v1191 + v1051 
    let v1194 : string = v1193 + v1192 
    v1194 
    #endif
    |> fun x -> _v1083 <- Some x
    let v1195 : string = match _v1083 with Some x -> x | None -> failwith "base.run_target / _v1083=None"
    let v1214 : int64 = v14.l0
    let struct (v1215 : string, v1216 : std_string_String) = v2 ()
    let v1217 : string = ""
    let v1218 : Mut4 = {l0 = v1217} : Mut4
    method38(v1218, v1215, v1216)
    let v1219 : string = v1218.l0
    let v1222 : string = $"{v826} {v1195} #{v1214} %s{v1 ()} / {v1219}"
    let v1229 : char list = []
    let v1234 : (char list -> (char [])) = List.toArray
    let v1235 : (char []) = v1234 v1229
    let v1242 : string = v1222.TrimStart v1235 
    let v1281 : char list = []
    let v1284 : char list = '/' :: v1281 
    let v1293 : char list = ' ' :: v1284 
    let v1304 : (char list -> (char [])) = List.toArray
    let v1305 : (char []) = v1304 v1293
    let v1312 : string = v1242.TrimEnd v1305 
    v1312
and method37 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (string * std_string_String))) : unit =
    let v3 : (unit -> string) = closure17(v0, v1, v2)
    method13(v0, v3)
and closure18 () () : string =
    let v0 : string = "file_system.create_dir"
    v0
and closure19 (v0 : string) () : string =
    v0
and method41 (v0 : Mut4, v1 : string) : unit =
    let v2 : string = "{ "
    method10(v0, v2)
    method11(v0)
    let v3 : string = "dir"
    method10(v0, v3)
    let v4 : string = " = "
    method10(v0, v4)
    method10(v0, v1)
    let v5 : string = " }"
    method10(v0, v5)
and closure20 (v0 : US0, v1 : (unit -> string), v2 : (unit -> string)) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = $"near_sdk::env::block_timestamp()"
    let v331 : uint64 = Fable.Core.RustInterop.emitRustExpr () v330 
    let v334 : US2 option = None
    let _v334 = ref v334 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v335 : int64 = x
    let v336 : US2 = US2_0(v335)
    v336 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v334.Value <- x
    let v337 : US2 option = _v334.Value 
    let v360 : US2 = US2_1
    let v361 : US2 = v337 |> Option.defaultValue v360 
    let v374 : uint64 =
        match v361 with
        | US2_1 -> (* None *)
            v331
        | US2_0(v369) -> (* Some *)
            let v370 : (int64 -> uint64) = uint64
            let v371 : uint64 = v370 v369
            let v372 : uint64 = v331 - v371
            v372
    let v375 : uint64 = v374 / 1000000000UL
    let v376 : uint64 = v375 % 60UL
    let v377 : uint64 = v375 / 60UL
    let v378 : uint64 = v377 % 60UL
    let v379 : uint64 = v375 / 3600UL
    let v380 : uint64 = v379 % 24UL
    let v381 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v382 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v380, v378, v376) v381 
    let v383 : string = "fable_library_rust::String_::fromString($0)"
    let v384 : string = Fable.Core.RustInterop.emitRustExpr v382 v383 
    v384 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v387 : US2 option = None
    let _v387 = ref v387 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v388 : int64 = x
    let v389 : US2 = US2_0(v388)
    v389 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v387.Value <- x
    let v390 : US2 option = _v387.Value 
    let v413 : US2 = US2_1
    let v414 : US2 = v390 |> Option.defaultValue v413 
    let v512 : System.DateTime =
        match v414 with
        | US2_1 -> (* None *)
            let v504 : System.DateTime = System.DateTime.Now
            v504
        | US2_0(v422) -> (* Some *)
            let v425 : System.DateTime = System.DateTime.Now
            let v434 : (System.DateTime -> int64) = _.Ticks
            let v435 : int64 = v434 v425
            let v442 : int64 = v435 - v422
            let v445 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v446 : System.TimeSpan = v445 v442
            let v455 : (System.TimeSpan -> int32) = _.Hours
            let v456 : int32 = v455 v446
            let v465 : (System.TimeSpan -> int32) = _.Minutes
            let v466 : int32 = v465 v446
            let v475 : (System.TimeSpan -> int32) = _.Seconds
            let v476 : int32 = v475 v446
            let v485 : (System.TimeSpan -> int32) = _.Milliseconds
            let v486 : int32 = v485 v446
            let v495 : System.DateTime = System.DateTime (1, 1, 1, v456, v466, v476, v486)
            v495
    let v515 : string = method7()
    let v524 : (string -> string) = v512.ToString
    let v525 : string = v524 v515
    v525 
    #endif
#if FABLE_COMPILER_PYTHON
    let v534 : US2 option = None
    let _v534 = ref v534 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v535 : int64 = x
    let v536 : US2 = US2_0(v535)
    v536 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v534.Value <- x
    let v537 : US2 option = _v534.Value 
    let v560 : US2 = US2_1
    let v561 : US2 = v537 |> Option.defaultValue v560 
    let v659 : System.DateTime =
        match v561 with
        | US2_1 -> (* None *)
            let v651 : System.DateTime = System.DateTime.Now
            v651
        | US2_0(v569) -> (* Some *)
            let v572 : System.DateTime = System.DateTime.Now
            let v581 : (System.DateTime -> int64) = _.Ticks
            let v582 : int64 = v581 v572
            let v589 : int64 = v582 - v569
            let v592 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v593 : System.TimeSpan = v592 v589
            let v602 : (System.TimeSpan -> int32) = _.Hours
            let v603 : int32 = v602 v593
            let v612 : (System.TimeSpan -> int32) = _.Minutes
            let v613 : int32 = v612 v593
            let v622 : (System.TimeSpan -> int32) = _.Seconds
            let v623 : int32 = v622 v593
            let v632 : (System.TimeSpan -> int32) = _.Milliseconds
            let v633 : int32 = v632 v593
            let v642 : System.DateTime = System.DateTime (1, 1, 1, v603, v613, v623, v633)
            v642
    let v662 : string = method7()
    let v671 : (string -> string) = v659.ToString
    let v672 : string = v671 v662
    v672 
    #endif
#else
    let v681 : US2 option = None
    let _v681 = ref v681 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v682 : int64 = x
    let v683 : US2 = US2_0(v682)
    v683 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v681.Value <- x
    let v684 : US2 option = _v681.Value 
    let v707 : US2 = US2_1
    let v708 : US2 = v684 |> Option.defaultValue v707 
    let v806 : System.DateTime =
        match v708 with
        | US2_1 -> (* None *)
            let v798 : System.DateTime = System.DateTime.Now
            v798
        | US2_0(v716) -> (* Some *)
            let v719 : System.DateTime = System.DateTime.Now
            let v728 : (System.DateTime -> int64) = _.Ticks
            let v729 : int64 = v728 v719
            let v736 : int64 = v729 - v716
            let v739 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v740 : System.TimeSpan = v739 v736
            let v749 : (System.TimeSpan -> int32) = _.Hours
            let v750 : int32 = v749 v740
            let v759 : (System.TimeSpan -> int32) = _.Minutes
            let v760 : int32 = v759 v740
            let v769 : (System.TimeSpan -> int32) = _.Seconds
            let v770 : int32 = v769 v740
            let v779 : (System.TimeSpan -> int32) = _.Milliseconds
            let v780 : int32 = v779 v740
            let v789 : System.DateTime = System.DateTime (1, 1, 1, v750, v760, v770, v780)
            v789
    let v809 : string = method7()
    let v818 : (string -> string) = v806.ToString
    let v819 : string = v818 v809
    v819 
    #endif
    |> fun x -> _v35 <- Some x
    let v826 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v981 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v985 : US3 =
        if v981 then
            let v982 : string = "Verbose"
            US3_0(v982)
        else
            US3_1
    let v1034 : US3 =
        match v985 with
        | US3_1 -> (* None *)
            let v990 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v994 : US3 =
                if v990 then
                    let v991 : string = "Debug"
                    US3_0(v991)
                else
                    US3_1
            match v994 with
            | US3_1 -> (* None *)
                let v999 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v1003 : US3 =
                    if v999 then
                        let v1000 : string = "Info"
                        US3_0(v1000)
                    else
                        US3_1
                match v1003 with
                | US3_1 -> (* None *)
                    let v1008 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v1012 : US3 =
                        if v1008 then
                            let v1009 : string = "Warning"
                            US3_0(v1009)
                        else
                            US3_1
                    match v1012 with
                    | US3_1 -> (* None *)
                        let v1017 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v1021 : US3 =
                            if v1017 then
                                let v1018 : string = "Critical"
                                US3_0(v1018)
                            else
                                US3_1
                        match v1021 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v1022) -> (* Some *)
                            US3_0(v1022)
                    | US3_0(v1013) -> (* Some *)
                        US3_0(v1013)
                | US3_0(v1004) -> (* Some *)
                    US3_0(v1004)
            | US3_0(v995) -> (* Some *)
                US3_0(v995)
        | US3_0(v986) -> (* Some *)
            US3_0(v986)
    let v1038 : string =
        match v1034 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v1035) -> (* Some *)
            v1035
    let v1041 : (unit -> string) = v1038.ToLower
    let v1042 : string = v1041 ()
    let v1051 : string = v1042.PadLeft (7, ' ')
    let v1083 : bool = true
    let mutable _v1083 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1098 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1092 : string = "inline_colorization::color_bright_red"
            let v1093 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1092 
            v1093
        | US0_1 -> (* Debug *)
            let v1086 : string = "inline_colorization::color_bright_blue"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_2 -> (* Info *)
            let v1088 : string = "inline_colorization::color_bright_green"
            let v1089 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1088 
            v1089
        | US0_0 -> (* Verbose *)
            let v1084 : string = "inline_colorization::color_bright_black"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
        | US0_3 -> (* Warning *)
            let v1090 : string = "inline_colorization::color_yellow"
            let v1091 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1090 
            v1091
    let v1099 : string = "&*$0"
    let v1100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1099 
    let v1101 : string = "inline_colorization::color_reset"
    let v1102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1101 
    let v1103 : string = "\"{v1098}{v1100}{v1102}\""
    let v1104 : string = @$"format!(" + v1103 + ")"
    let v1105 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1104 
    let v1106 : string = "fable_library_rust::String_::fromString($0)"
    let v1107 : string = Fable.Core.RustInterop.emitRustExpr v1105 v1106 
    v1107 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1122 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1116 : string = "inline_colorization::color_bright_red"
            let v1117 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1116 
            v1117
        | US0_1 -> (* Debug *)
            let v1110 : string = "inline_colorization::color_bright_blue"
            let v1111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1110 
            v1111
        | US0_2 -> (* Info *)
            let v1112 : string = "inline_colorization::color_bright_green"
            let v1113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1112 
            v1113
        | US0_0 -> (* Verbose *)
            let v1108 : string = "inline_colorization::color_bright_black"
            let v1109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1108 
            v1109
        | US0_3 -> (* Warning *)
            let v1114 : string = "inline_colorization::color_yellow"
            let v1115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1114 
            v1115
    let v1123 : string = "&*$0"
    let v1124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1123 
    let v1125 : string = "inline_colorization::color_reset"
    let v1126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1125 
    let v1127 : string = "\"{v1122}{v1124}{v1126}\""
    let v1128 : string = @$"format!(" + v1127 + ")"
    let v1129 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1128 
    let v1130 : string = "fable_library_rust::String_::fromString($0)"
    let v1131 : string = Fable.Core.RustInterop.emitRustExpr v1129 v1130 
    v1131 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1146 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1140 : string = "inline_colorization::color_bright_red"
            let v1141 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1140 
            v1141
        | US0_1 -> (* Debug *)
            let v1134 : string = "inline_colorization::color_bright_blue"
            let v1135 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1134 
            v1135
        | US0_2 -> (* Info *)
            let v1136 : string = "inline_colorization::color_bright_green"
            let v1137 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1136 
            v1137
        | US0_0 -> (* Verbose *)
            let v1132 : string = "inline_colorization::color_bright_black"
            let v1133 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1132 
            v1133
        | US0_3 -> (* Warning *)
            let v1138 : string = "inline_colorization::color_yellow"
            let v1139 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1138 
            v1139
    let v1147 : string = "&*$0"
    let v1148 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1147 
    let v1149 : string = "inline_colorization::color_reset"
    let v1150 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1149 
    let v1151 : string = "\"{v1146}{v1148}{v1150}\""
    let v1152 : string = @$"format!(" + v1151 + ")"
    let v1153 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1152 
    let v1154 : string = "fable_library_rust::String_::fromString($0)"
    let v1155 : string = Fable.Core.RustInterop.emitRustExpr v1153 v1154 
    v1155 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1165 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1160 : string = "\u001b[91m"
            v1160
        | US0_1 -> (* Debug *)
            let v1157 : string = "\u001b[94m"
            v1157
        | US0_2 -> (* Info *)
            let v1158 : string = "\u001b[92m"
            v1158
        | US0_0 -> (* Verbose *)
            let v1156 : string = "\u001b[90m"
            v1156
        | US0_3 -> (* Warning *)
            let v1159 : string = "\u001b[93m"
            v1159
    let v1166 : string = method8()
    let v1167 : string = v1165 + v1051 
    let v1168 : string = v1167 + v1166 
    v1168 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1178 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1173 : string = "\u001b[91m"
            v1173
        | US0_1 -> (* Debug *)
            let v1170 : string = "\u001b[94m"
            v1170
        | US0_2 -> (* Info *)
            let v1171 : string = "\u001b[92m"
            v1171
        | US0_0 -> (* Verbose *)
            let v1169 : string = "\u001b[90m"
            v1169
        | US0_3 -> (* Warning *)
            let v1172 : string = "\u001b[93m"
            v1172
    let v1179 : string = method8()
    let v1180 : string = v1178 + v1051 
    let v1181 : string = v1180 + v1179 
    v1181 
    #endif
#else
    let v1191 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1186 : string = "\u001b[91m"
            v1186
        | US0_1 -> (* Debug *)
            let v1183 : string = "\u001b[94m"
            v1183
        | US0_2 -> (* Info *)
            let v1184 : string = "\u001b[92m"
            v1184
        | US0_0 -> (* Verbose *)
            let v1182 : string = "\u001b[90m"
            v1182
        | US0_3 -> (* Warning *)
            let v1185 : string = "\u001b[93m"
            v1185
    let v1192 : string = method8()
    let v1193 : string = v1191 + v1051 
    let v1194 : string = v1193 + v1192 
    v1194 
    #endif
    |> fun x -> _v1083 <- Some x
    let v1195 : string = match _v1083 with Some x -> x | None -> failwith "base.run_target / _v1083=None"
    let v1214 : int64 = v14.l0
    let v1215 : string = v2 ()
    let v1216 : string = ""
    let v1217 : Mut4 = {l0 = v1216} : Mut4
    method41(v1217, v1215)
    let v1218 : string = v1217.l0
    let v1221 : string = $"{v826} {v1195} #{v1214} %s{v1 ()} / {v1218}"
    let v1228 : char list = []
    let v1233 : (char list -> (char [])) = List.toArray
    let v1234 : (char []) = v1233 v1228
    let v1241 : string = v1221.TrimStart v1234 
    let v1280 : char list = []
    let v1283 : char list = '/' :: v1280 
    let v1292 : char list = ' ' :: v1283 
    let v1303 : (char list -> (char [])) = List.toArray
    let v1304 : (char []) = v1303 v1292
    let v1311 : string = v1241.TrimEnd v1304 
    v1311
and method40 (v0 : US0, v1 : (unit -> string), v2 : (unit -> string)) : unit =
    let v3 : (unit -> string) = closure20(v0, v1, v2)
    method13(v0, v3)
and method44 (v0 : string) : string =
    v0
and method43 (v0 : bool, v1 : string) : unit =
    let v4 : bool = true
    let mutable _v4 : unit option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = method44(v1)
    let v6 : bool = method23(v5)
    if v6 then
        if v0 then
            let v7 : string = "std::fs::remove_dir_all(&*$0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr v5 v7 
            ()
        else
            let v8 : string = "std::fs::remove_dir(&*$0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr v5 v8 
            ()
    () 
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_PYTHON
    null |> unbox<unit>
    () 
    #endif
#else
    System.IO.Directory.Delete (v1, v0)
    () 
    #endif
    |> fun x -> _v4 <- Some x
    match _v4 with Some x -> x | None -> failwith "base.run_target / _v4=None"
    ()
and closure21 (v0 : string) () : unit =
    let v1 : bool = true
    method43(v1, v0)
and method42 (v0 : string) : (unit -> unit) =
    closure21(v0)
and method45 (v0 : string) : (unit -> unit) =
    closure21(v0)
and closure22 () () : string =
    let v0 : string = "file_system.create_dir"
    v0
and closure23 (v0 : string, v1 : string) () : struct (string * string) =
    struct (v0, v1)
and method47 (v0 : Mut4, v1 : string, v2 : string) : unit =
    let v3 : string = "{ "
    method10(v0, v3)
    method11(v0)
    let v4 : string = "dir"
    method10(v0, v4)
    let v5 : string = " = "
    method10(v0, v5)
    method10(v0, v1)
    let v6 : string = "; "
    method10(v0, v6)
    let v7 : string = "result"
    method10(v0, v7)
    method10(v0, v5)
    method10(v0, v2)
    let v8 : string = " }"
    method10(v0, v8)
and closure24 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (string * string))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = $"near_sdk::env::block_timestamp()"
    let v331 : uint64 = Fable.Core.RustInterop.emitRustExpr () v330 
    let v334 : US2 option = None
    let _v334 = ref v334 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v335 : int64 = x
    let v336 : US2 = US2_0(v335)
    v336 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v334.Value <- x
    let v337 : US2 option = _v334.Value 
    let v360 : US2 = US2_1
    let v361 : US2 = v337 |> Option.defaultValue v360 
    let v374 : uint64 =
        match v361 with
        | US2_1 -> (* None *)
            v331
        | US2_0(v369) -> (* Some *)
            let v370 : (int64 -> uint64) = uint64
            let v371 : uint64 = v370 v369
            let v372 : uint64 = v331 - v371
            v372
    let v375 : uint64 = v374 / 1000000000UL
    let v376 : uint64 = v375 % 60UL
    let v377 : uint64 = v375 / 60UL
    let v378 : uint64 = v377 % 60UL
    let v379 : uint64 = v375 / 3600UL
    let v380 : uint64 = v379 % 24UL
    let v381 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v382 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v380, v378, v376) v381 
    let v383 : string = "fable_library_rust::String_::fromString($0)"
    let v384 : string = Fable.Core.RustInterop.emitRustExpr v382 v383 
    v384 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v387 : US2 option = None
    let _v387 = ref v387 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v388 : int64 = x
    let v389 : US2 = US2_0(v388)
    v389 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v387.Value <- x
    let v390 : US2 option = _v387.Value 
    let v413 : US2 = US2_1
    let v414 : US2 = v390 |> Option.defaultValue v413 
    let v512 : System.DateTime =
        match v414 with
        | US2_1 -> (* None *)
            let v504 : System.DateTime = System.DateTime.Now
            v504
        | US2_0(v422) -> (* Some *)
            let v425 : System.DateTime = System.DateTime.Now
            let v434 : (System.DateTime -> int64) = _.Ticks
            let v435 : int64 = v434 v425
            let v442 : int64 = v435 - v422
            let v445 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v446 : System.TimeSpan = v445 v442
            let v455 : (System.TimeSpan -> int32) = _.Hours
            let v456 : int32 = v455 v446
            let v465 : (System.TimeSpan -> int32) = _.Minutes
            let v466 : int32 = v465 v446
            let v475 : (System.TimeSpan -> int32) = _.Seconds
            let v476 : int32 = v475 v446
            let v485 : (System.TimeSpan -> int32) = _.Milliseconds
            let v486 : int32 = v485 v446
            let v495 : System.DateTime = System.DateTime (1, 1, 1, v456, v466, v476, v486)
            v495
    let v515 : string = method7()
    let v524 : (string -> string) = v512.ToString
    let v525 : string = v524 v515
    v525 
    #endif
#if FABLE_COMPILER_PYTHON
    let v534 : US2 option = None
    let _v534 = ref v534 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v535 : int64 = x
    let v536 : US2 = US2_0(v535)
    v536 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v534.Value <- x
    let v537 : US2 option = _v534.Value 
    let v560 : US2 = US2_1
    let v561 : US2 = v537 |> Option.defaultValue v560 
    let v659 : System.DateTime =
        match v561 with
        | US2_1 -> (* None *)
            let v651 : System.DateTime = System.DateTime.Now
            v651
        | US2_0(v569) -> (* Some *)
            let v572 : System.DateTime = System.DateTime.Now
            let v581 : (System.DateTime -> int64) = _.Ticks
            let v582 : int64 = v581 v572
            let v589 : int64 = v582 - v569
            let v592 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v593 : System.TimeSpan = v592 v589
            let v602 : (System.TimeSpan -> int32) = _.Hours
            let v603 : int32 = v602 v593
            let v612 : (System.TimeSpan -> int32) = _.Minutes
            let v613 : int32 = v612 v593
            let v622 : (System.TimeSpan -> int32) = _.Seconds
            let v623 : int32 = v622 v593
            let v632 : (System.TimeSpan -> int32) = _.Milliseconds
            let v633 : int32 = v632 v593
            let v642 : System.DateTime = System.DateTime (1, 1, 1, v603, v613, v623, v633)
            v642
    let v662 : string = method7()
    let v671 : (string -> string) = v659.ToString
    let v672 : string = v671 v662
    v672 
    #endif
#else
    let v681 : US2 option = None
    let _v681 = ref v681 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v682 : int64 = x
    let v683 : US2 = US2_0(v682)
    v683 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v681.Value <- x
    let v684 : US2 option = _v681.Value 
    let v707 : US2 = US2_1
    let v708 : US2 = v684 |> Option.defaultValue v707 
    let v806 : System.DateTime =
        match v708 with
        | US2_1 -> (* None *)
            let v798 : System.DateTime = System.DateTime.Now
            v798
        | US2_0(v716) -> (* Some *)
            let v719 : System.DateTime = System.DateTime.Now
            let v728 : (System.DateTime -> int64) = _.Ticks
            let v729 : int64 = v728 v719
            let v736 : int64 = v729 - v716
            let v739 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v740 : System.TimeSpan = v739 v736
            let v749 : (System.TimeSpan -> int32) = _.Hours
            let v750 : int32 = v749 v740
            let v759 : (System.TimeSpan -> int32) = _.Minutes
            let v760 : int32 = v759 v740
            let v769 : (System.TimeSpan -> int32) = _.Seconds
            let v770 : int32 = v769 v740
            let v779 : (System.TimeSpan -> int32) = _.Milliseconds
            let v780 : int32 = v779 v740
            let v789 : System.DateTime = System.DateTime (1, 1, 1, v750, v760, v770, v780)
            v789
    let v809 : string = method7()
    let v818 : (string -> string) = v806.ToString
    let v819 : string = v818 v809
    v819 
    #endif
    |> fun x -> _v35 <- Some x
    let v826 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v981 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v985 : US3 =
        if v981 then
            let v982 : string = "Verbose"
            US3_0(v982)
        else
            US3_1
    let v1034 : US3 =
        match v985 with
        | US3_1 -> (* None *)
            let v990 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v994 : US3 =
                if v990 then
                    let v991 : string = "Debug"
                    US3_0(v991)
                else
                    US3_1
            match v994 with
            | US3_1 -> (* None *)
                let v999 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v1003 : US3 =
                    if v999 then
                        let v1000 : string = "Info"
                        US3_0(v1000)
                    else
                        US3_1
                match v1003 with
                | US3_1 -> (* None *)
                    let v1008 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v1012 : US3 =
                        if v1008 then
                            let v1009 : string = "Warning"
                            US3_0(v1009)
                        else
                            US3_1
                    match v1012 with
                    | US3_1 -> (* None *)
                        let v1017 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v1021 : US3 =
                            if v1017 then
                                let v1018 : string = "Critical"
                                US3_0(v1018)
                            else
                                US3_1
                        match v1021 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v1022) -> (* Some *)
                            US3_0(v1022)
                    | US3_0(v1013) -> (* Some *)
                        US3_0(v1013)
                | US3_0(v1004) -> (* Some *)
                    US3_0(v1004)
            | US3_0(v995) -> (* Some *)
                US3_0(v995)
        | US3_0(v986) -> (* Some *)
            US3_0(v986)
    let v1038 : string =
        match v1034 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v1035) -> (* Some *)
            v1035
    let v1041 : (unit -> string) = v1038.ToLower
    let v1042 : string = v1041 ()
    let v1051 : string = v1042.PadLeft (7, ' ')
    let v1083 : bool = true
    let mutable _v1083 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1098 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1092 : string = "inline_colorization::color_bright_red"
            let v1093 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1092 
            v1093
        | US0_1 -> (* Debug *)
            let v1086 : string = "inline_colorization::color_bright_blue"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_2 -> (* Info *)
            let v1088 : string = "inline_colorization::color_bright_green"
            let v1089 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1088 
            v1089
        | US0_0 -> (* Verbose *)
            let v1084 : string = "inline_colorization::color_bright_black"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
        | US0_3 -> (* Warning *)
            let v1090 : string = "inline_colorization::color_yellow"
            let v1091 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1090 
            v1091
    let v1099 : string = "&*$0"
    let v1100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1099 
    let v1101 : string = "inline_colorization::color_reset"
    let v1102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1101 
    let v1103 : string = "\"{v1098}{v1100}{v1102}\""
    let v1104 : string = @$"format!(" + v1103 + ")"
    let v1105 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1104 
    let v1106 : string = "fable_library_rust::String_::fromString($0)"
    let v1107 : string = Fable.Core.RustInterop.emitRustExpr v1105 v1106 
    v1107 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1122 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1116 : string = "inline_colorization::color_bright_red"
            let v1117 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1116 
            v1117
        | US0_1 -> (* Debug *)
            let v1110 : string = "inline_colorization::color_bright_blue"
            let v1111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1110 
            v1111
        | US0_2 -> (* Info *)
            let v1112 : string = "inline_colorization::color_bright_green"
            let v1113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1112 
            v1113
        | US0_0 -> (* Verbose *)
            let v1108 : string = "inline_colorization::color_bright_black"
            let v1109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1108 
            v1109
        | US0_3 -> (* Warning *)
            let v1114 : string = "inline_colorization::color_yellow"
            let v1115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1114 
            v1115
    let v1123 : string = "&*$0"
    let v1124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1123 
    let v1125 : string = "inline_colorization::color_reset"
    let v1126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1125 
    let v1127 : string = "\"{v1122}{v1124}{v1126}\""
    let v1128 : string = @$"format!(" + v1127 + ")"
    let v1129 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1128 
    let v1130 : string = "fable_library_rust::String_::fromString($0)"
    let v1131 : string = Fable.Core.RustInterop.emitRustExpr v1129 v1130 
    v1131 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1146 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1140 : string = "inline_colorization::color_bright_red"
            let v1141 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1140 
            v1141
        | US0_1 -> (* Debug *)
            let v1134 : string = "inline_colorization::color_bright_blue"
            let v1135 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1134 
            v1135
        | US0_2 -> (* Info *)
            let v1136 : string = "inline_colorization::color_bright_green"
            let v1137 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1136 
            v1137
        | US0_0 -> (* Verbose *)
            let v1132 : string = "inline_colorization::color_bright_black"
            let v1133 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1132 
            v1133
        | US0_3 -> (* Warning *)
            let v1138 : string = "inline_colorization::color_yellow"
            let v1139 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1138 
            v1139
    let v1147 : string = "&*$0"
    let v1148 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1147 
    let v1149 : string = "inline_colorization::color_reset"
    let v1150 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1149 
    let v1151 : string = "\"{v1146}{v1148}{v1150}\""
    let v1152 : string = @$"format!(" + v1151 + ")"
    let v1153 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1152 
    let v1154 : string = "fable_library_rust::String_::fromString($0)"
    let v1155 : string = Fable.Core.RustInterop.emitRustExpr v1153 v1154 
    v1155 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1165 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1160 : string = "\u001b[91m"
            v1160
        | US0_1 -> (* Debug *)
            let v1157 : string = "\u001b[94m"
            v1157
        | US0_2 -> (* Info *)
            let v1158 : string = "\u001b[92m"
            v1158
        | US0_0 -> (* Verbose *)
            let v1156 : string = "\u001b[90m"
            v1156
        | US0_3 -> (* Warning *)
            let v1159 : string = "\u001b[93m"
            v1159
    let v1166 : string = method8()
    let v1167 : string = v1165 + v1051 
    let v1168 : string = v1167 + v1166 
    v1168 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1178 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1173 : string = "\u001b[91m"
            v1173
        | US0_1 -> (* Debug *)
            let v1170 : string = "\u001b[94m"
            v1170
        | US0_2 -> (* Info *)
            let v1171 : string = "\u001b[92m"
            v1171
        | US0_0 -> (* Verbose *)
            let v1169 : string = "\u001b[90m"
            v1169
        | US0_3 -> (* Warning *)
            let v1172 : string = "\u001b[93m"
            v1172
    let v1179 : string = method8()
    let v1180 : string = v1178 + v1051 
    let v1181 : string = v1180 + v1179 
    v1181 
    #endif
#else
    let v1191 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1186 : string = "\u001b[91m"
            v1186
        | US0_1 -> (* Debug *)
            let v1183 : string = "\u001b[94m"
            v1183
        | US0_2 -> (* Info *)
            let v1184 : string = "\u001b[92m"
            v1184
        | US0_0 -> (* Verbose *)
            let v1182 : string = "\u001b[90m"
            v1182
        | US0_3 -> (* Warning *)
            let v1185 : string = "\u001b[93m"
            v1185
    let v1192 : string = method8()
    let v1193 : string = v1191 + v1051 
    let v1194 : string = v1193 + v1192 
    v1194 
    #endif
    |> fun x -> _v1083 <- Some x
    let v1195 : string = match _v1083 with Some x -> x | None -> failwith "base.run_target / _v1083=None"
    let v1214 : int64 = v14.l0
    let struct (v1215 : string, v1216 : string) = v2 ()
    let v1217 : string = ""
    let v1218 : Mut4 = {l0 = v1217} : Mut4
    method47(v1218, v1215, v1216)
    let v1219 : string = v1218.l0
    let v1222 : string = $"{v826} {v1195} #{v1214} %s{v1 ()} / {v1219}"
    let v1229 : char list = []
    let v1234 : (char list -> (char [])) = List.toArray
    let v1235 : (char []) = v1234 v1229
    let v1242 : string = v1222.TrimStart v1235 
    let v1281 : char list = []
    let v1284 : char list = '/' :: v1281 
    let v1293 : char list = ' ' :: v1284 
    let v1304 : (char list -> (char [])) = List.toArray
    let v1305 : (char []) = v1304 v1293
    let v1312 : string = v1242.TrimEnd v1305 
    v1312
and method46 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (string * string))) : unit =
    let v3 : (unit -> string) = closure24(v0, v1, v2)
    method13(v0, v3)
and closure26 () () : string =
    let v0 : string = "file_system.delete_directory_async"
    v0
and method50 (v0 : string) : string =
    let v3 : bool = true
    let mutable _v3 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let v6 : string = "String::from($0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "std::path::PathBuf::from($0)"
    let v9 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "$0.file_name()"
    let v11 : Ref<std_ffi_OsStr> option = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "$0.unwrap()"
    let v13 : Ref<std_ffi_OsStr> = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : string = "$0.to_os_string()"
    let v15 : std_ffi_OsString = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : string = "$0.to_str()"
    let v17 : Ref<Str> option = Fable.Core.RustInterop.emitRustExpr v15 v16 
    let v18 : string = "$0.unwrap()"
    let v19 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v17 v18 
    let v20 : string = "String::from($0)"
    let v21 : std_string_String = Fable.Core.RustInterop.emitRustExpr v19 v20 
    let v22 : string = "fable_library_rust::String_::fromString($0)"
    let v23 : string = Fable.Core.RustInterop.emitRustExpr v21 v22 
    v23 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v24 : US10 = US10_1
    let v25 : US11 = US11_2(v24)
    let v26 : string = $"file_system.get_file_name / target: {v25} / path: {v0}"
    let v27 : string = failwith<string> v26
    v27 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = null |> unbox<string>
    v30 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v37 : US10 = US10_0
    let v38 : US11 = US11_3(v37)
    let v39 : string = $"file_system.get_file_name / target: {v38} / path: {v0}"
    let v40 : string = failwith<string> v39
    v40 
    #endif
#if FABLE_COMPILER_PYTHON
    let v41 : US10 = US10_0
    let v42 : US11 = US11_4(v41)
    let v43 : string = $"file_system.get_file_name / target: {v42} / path: {v0}"
    let v44 : string = failwith<string> v43
    v44 
    #endif
#else
    let v45 : (string -> string) = System.IO.Path.GetFileName
    let v46 : string = v45 v0
    v46 
    #endif
    |> fun x -> _v3 <- Some x
    let v47 : string = match _v3 with Some x -> x | None -> failwith "base.run_target / _v3=None"
    v47
and closure27 (v0 : string, v1 : string) () : struct (string * string) =
    let v2 : string = method50(v0)
    struct (v1, v2)
and method52 (v0 : Mut4, v1 : string, v2 : string) : unit =
    let v3 : string = "{ "
    method10(v0, v3)
    method11(v0)
    let v4 : string = "ex"
    method10(v0, v4)
    let v5 : string = " = "
    method10(v0, v5)
    method10(v0, v1)
    let v6 : string = "; "
    method10(v0, v6)
    let v7 : string = "path"
    method10(v0, v7)
    method10(v0, v5)
    method10(v0, v2)
    let v8 : string = " }"
    method10(v0, v8)
and closure28 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (string * string))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = $"near_sdk::env::block_timestamp()"
    let v331 : uint64 = Fable.Core.RustInterop.emitRustExpr () v330 
    let v334 : US2 option = None
    let _v334 = ref v334 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v335 : int64 = x
    let v336 : US2 = US2_0(v335)
    v336 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v334.Value <- x
    let v337 : US2 option = _v334.Value 
    let v360 : US2 = US2_1
    let v361 : US2 = v337 |> Option.defaultValue v360 
    let v374 : uint64 =
        match v361 with
        | US2_1 -> (* None *)
            v331
        | US2_0(v369) -> (* Some *)
            let v370 : (int64 -> uint64) = uint64
            let v371 : uint64 = v370 v369
            let v372 : uint64 = v331 - v371
            v372
    let v375 : uint64 = v374 / 1000000000UL
    let v376 : uint64 = v375 % 60UL
    let v377 : uint64 = v375 / 60UL
    let v378 : uint64 = v377 % 60UL
    let v379 : uint64 = v375 / 3600UL
    let v380 : uint64 = v379 % 24UL
    let v381 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v382 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v380, v378, v376) v381 
    let v383 : string = "fable_library_rust::String_::fromString($0)"
    let v384 : string = Fable.Core.RustInterop.emitRustExpr v382 v383 
    v384 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v387 : US2 option = None
    let _v387 = ref v387 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v388 : int64 = x
    let v389 : US2 = US2_0(v388)
    v389 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v387.Value <- x
    let v390 : US2 option = _v387.Value 
    let v413 : US2 = US2_1
    let v414 : US2 = v390 |> Option.defaultValue v413 
    let v512 : System.DateTime =
        match v414 with
        | US2_1 -> (* None *)
            let v504 : System.DateTime = System.DateTime.Now
            v504
        | US2_0(v422) -> (* Some *)
            let v425 : System.DateTime = System.DateTime.Now
            let v434 : (System.DateTime -> int64) = _.Ticks
            let v435 : int64 = v434 v425
            let v442 : int64 = v435 - v422
            let v445 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v446 : System.TimeSpan = v445 v442
            let v455 : (System.TimeSpan -> int32) = _.Hours
            let v456 : int32 = v455 v446
            let v465 : (System.TimeSpan -> int32) = _.Minutes
            let v466 : int32 = v465 v446
            let v475 : (System.TimeSpan -> int32) = _.Seconds
            let v476 : int32 = v475 v446
            let v485 : (System.TimeSpan -> int32) = _.Milliseconds
            let v486 : int32 = v485 v446
            let v495 : System.DateTime = System.DateTime (1, 1, 1, v456, v466, v476, v486)
            v495
    let v515 : string = method7()
    let v524 : (string -> string) = v512.ToString
    let v525 : string = v524 v515
    v525 
    #endif
#if FABLE_COMPILER_PYTHON
    let v534 : US2 option = None
    let _v534 = ref v534 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v535 : int64 = x
    let v536 : US2 = US2_0(v535)
    v536 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v534.Value <- x
    let v537 : US2 option = _v534.Value 
    let v560 : US2 = US2_1
    let v561 : US2 = v537 |> Option.defaultValue v560 
    let v659 : System.DateTime =
        match v561 with
        | US2_1 -> (* None *)
            let v651 : System.DateTime = System.DateTime.Now
            v651
        | US2_0(v569) -> (* Some *)
            let v572 : System.DateTime = System.DateTime.Now
            let v581 : (System.DateTime -> int64) = _.Ticks
            let v582 : int64 = v581 v572
            let v589 : int64 = v582 - v569
            let v592 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v593 : System.TimeSpan = v592 v589
            let v602 : (System.TimeSpan -> int32) = _.Hours
            let v603 : int32 = v602 v593
            let v612 : (System.TimeSpan -> int32) = _.Minutes
            let v613 : int32 = v612 v593
            let v622 : (System.TimeSpan -> int32) = _.Seconds
            let v623 : int32 = v622 v593
            let v632 : (System.TimeSpan -> int32) = _.Milliseconds
            let v633 : int32 = v632 v593
            let v642 : System.DateTime = System.DateTime (1, 1, 1, v603, v613, v623, v633)
            v642
    let v662 : string = method7()
    let v671 : (string -> string) = v659.ToString
    let v672 : string = v671 v662
    v672 
    #endif
#else
    let v681 : US2 option = None
    let _v681 = ref v681 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v682 : int64 = x
    let v683 : US2 = US2_0(v682)
    v683 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v681.Value <- x
    let v684 : US2 option = _v681.Value 
    let v707 : US2 = US2_1
    let v708 : US2 = v684 |> Option.defaultValue v707 
    let v806 : System.DateTime =
        match v708 with
        | US2_1 -> (* None *)
            let v798 : System.DateTime = System.DateTime.Now
            v798
        | US2_0(v716) -> (* Some *)
            let v719 : System.DateTime = System.DateTime.Now
            let v728 : (System.DateTime -> int64) = _.Ticks
            let v729 : int64 = v728 v719
            let v736 : int64 = v729 - v716
            let v739 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v740 : System.TimeSpan = v739 v736
            let v749 : (System.TimeSpan -> int32) = _.Hours
            let v750 : int32 = v749 v740
            let v759 : (System.TimeSpan -> int32) = _.Minutes
            let v760 : int32 = v759 v740
            let v769 : (System.TimeSpan -> int32) = _.Seconds
            let v770 : int32 = v769 v740
            let v779 : (System.TimeSpan -> int32) = _.Milliseconds
            let v780 : int32 = v779 v740
            let v789 : System.DateTime = System.DateTime (1, 1, 1, v750, v760, v770, v780)
            v789
    let v809 : string = method7()
    let v818 : (string -> string) = v806.ToString
    let v819 : string = v818 v809
    v819 
    #endif
    |> fun x -> _v35 <- Some x
    let v826 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v981 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v985 : US3 =
        if v981 then
            let v982 : string = "Verbose"
            US3_0(v982)
        else
            US3_1
    let v1034 : US3 =
        match v985 with
        | US3_1 -> (* None *)
            let v990 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v994 : US3 =
                if v990 then
                    let v991 : string = "Debug"
                    US3_0(v991)
                else
                    US3_1
            match v994 with
            | US3_1 -> (* None *)
                let v999 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v1003 : US3 =
                    if v999 then
                        let v1000 : string = "Info"
                        US3_0(v1000)
                    else
                        US3_1
                match v1003 with
                | US3_1 -> (* None *)
                    let v1008 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v1012 : US3 =
                        if v1008 then
                            let v1009 : string = "Warning"
                            US3_0(v1009)
                        else
                            US3_1
                    match v1012 with
                    | US3_1 -> (* None *)
                        let v1017 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v1021 : US3 =
                            if v1017 then
                                let v1018 : string = "Critical"
                                US3_0(v1018)
                            else
                                US3_1
                        match v1021 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v1022) -> (* Some *)
                            US3_0(v1022)
                    | US3_0(v1013) -> (* Some *)
                        US3_0(v1013)
                | US3_0(v1004) -> (* Some *)
                    US3_0(v1004)
            | US3_0(v995) -> (* Some *)
                US3_0(v995)
        | US3_0(v986) -> (* Some *)
            US3_0(v986)
    let v1038 : string =
        match v1034 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v1035) -> (* Some *)
            v1035
    let v1041 : (unit -> string) = v1038.ToLower
    let v1042 : string = v1041 ()
    let v1051 : string = v1042.PadLeft (7, ' ')
    let v1083 : bool = true
    let mutable _v1083 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1098 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1092 : string = "inline_colorization::color_bright_red"
            let v1093 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1092 
            v1093
        | US0_1 -> (* Debug *)
            let v1086 : string = "inline_colorization::color_bright_blue"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_2 -> (* Info *)
            let v1088 : string = "inline_colorization::color_bright_green"
            let v1089 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1088 
            v1089
        | US0_0 -> (* Verbose *)
            let v1084 : string = "inline_colorization::color_bright_black"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
        | US0_3 -> (* Warning *)
            let v1090 : string = "inline_colorization::color_yellow"
            let v1091 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1090 
            v1091
    let v1099 : string = "&*$0"
    let v1100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1099 
    let v1101 : string = "inline_colorization::color_reset"
    let v1102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1101 
    let v1103 : string = "\"{v1098}{v1100}{v1102}\""
    let v1104 : string = @$"format!(" + v1103 + ")"
    let v1105 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1104 
    let v1106 : string = "fable_library_rust::String_::fromString($0)"
    let v1107 : string = Fable.Core.RustInterop.emitRustExpr v1105 v1106 
    v1107 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1122 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1116 : string = "inline_colorization::color_bright_red"
            let v1117 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1116 
            v1117
        | US0_1 -> (* Debug *)
            let v1110 : string = "inline_colorization::color_bright_blue"
            let v1111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1110 
            v1111
        | US0_2 -> (* Info *)
            let v1112 : string = "inline_colorization::color_bright_green"
            let v1113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1112 
            v1113
        | US0_0 -> (* Verbose *)
            let v1108 : string = "inline_colorization::color_bright_black"
            let v1109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1108 
            v1109
        | US0_3 -> (* Warning *)
            let v1114 : string = "inline_colorization::color_yellow"
            let v1115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1114 
            v1115
    let v1123 : string = "&*$0"
    let v1124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1123 
    let v1125 : string = "inline_colorization::color_reset"
    let v1126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1125 
    let v1127 : string = "\"{v1122}{v1124}{v1126}\""
    let v1128 : string = @$"format!(" + v1127 + ")"
    let v1129 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1128 
    let v1130 : string = "fable_library_rust::String_::fromString($0)"
    let v1131 : string = Fable.Core.RustInterop.emitRustExpr v1129 v1130 
    v1131 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1146 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1140 : string = "inline_colorization::color_bright_red"
            let v1141 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1140 
            v1141
        | US0_1 -> (* Debug *)
            let v1134 : string = "inline_colorization::color_bright_blue"
            let v1135 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1134 
            v1135
        | US0_2 -> (* Info *)
            let v1136 : string = "inline_colorization::color_bright_green"
            let v1137 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1136 
            v1137
        | US0_0 -> (* Verbose *)
            let v1132 : string = "inline_colorization::color_bright_black"
            let v1133 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1132 
            v1133
        | US0_3 -> (* Warning *)
            let v1138 : string = "inline_colorization::color_yellow"
            let v1139 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1138 
            v1139
    let v1147 : string = "&*$0"
    let v1148 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1147 
    let v1149 : string = "inline_colorization::color_reset"
    let v1150 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1149 
    let v1151 : string = "\"{v1146}{v1148}{v1150}\""
    let v1152 : string = @$"format!(" + v1151 + ")"
    let v1153 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1152 
    let v1154 : string = "fable_library_rust::String_::fromString($0)"
    let v1155 : string = Fable.Core.RustInterop.emitRustExpr v1153 v1154 
    v1155 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1165 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1160 : string = "\u001b[91m"
            v1160
        | US0_1 -> (* Debug *)
            let v1157 : string = "\u001b[94m"
            v1157
        | US0_2 -> (* Info *)
            let v1158 : string = "\u001b[92m"
            v1158
        | US0_0 -> (* Verbose *)
            let v1156 : string = "\u001b[90m"
            v1156
        | US0_3 -> (* Warning *)
            let v1159 : string = "\u001b[93m"
            v1159
    let v1166 : string = method8()
    let v1167 : string = v1165 + v1051 
    let v1168 : string = v1167 + v1166 
    v1168 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1178 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1173 : string = "\u001b[91m"
            v1173
        | US0_1 -> (* Debug *)
            let v1170 : string = "\u001b[94m"
            v1170
        | US0_2 -> (* Info *)
            let v1171 : string = "\u001b[92m"
            v1171
        | US0_0 -> (* Verbose *)
            let v1169 : string = "\u001b[90m"
            v1169
        | US0_3 -> (* Warning *)
            let v1172 : string = "\u001b[93m"
            v1172
    let v1179 : string = method8()
    let v1180 : string = v1178 + v1051 
    let v1181 : string = v1180 + v1179 
    v1181 
    #endif
#else
    let v1191 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1186 : string = "\u001b[91m"
            v1186
        | US0_1 -> (* Debug *)
            let v1183 : string = "\u001b[94m"
            v1183
        | US0_2 -> (* Info *)
            let v1184 : string = "\u001b[92m"
            v1184
        | US0_0 -> (* Verbose *)
            let v1182 : string = "\u001b[90m"
            v1182
        | US0_3 -> (* Warning *)
            let v1185 : string = "\u001b[93m"
            v1185
    let v1192 : string = method8()
    let v1193 : string = v1191 + v1051 
    let v1194 : string = v1193 + v1192 
    v1194 
    #endif
    |> fun x -> _v1083 <- Some x
    let v1195 : string = match _v1083 with Some x -> x | None -> failwith "base.run_target / _v1083=None"
    let v1214 : int64 = v14.l0
    let struct (v1215 : string, v1216 : string) = v2 ()
    let v1217 : string = ""
    let v1218 : Mut4 = {l0 = v1217} : Mut4
    method52(v1218, v1215, v1216)
    let v1219 : string = v1218.l0
    let v1222 : string = $"{v826} {v1195} #{v1214} %s{v1 ()} / {v1219}"
    let v1229 : char list = []
    let v1234 : (char list -> (char [])) = List.toArray
    let v1235 : (char []) = v1234 v1229
    let v1242 : string = v1222.TrimStart v1235 
    let v1281 : char list = []
    let v1284 : char list = '/' :: v1281 
    let v1293 : char list = ' ' :: v1284 
    let v1304 : (char list -> (char [])) = List.toArray
    let v1305 : (char []) = v1304 v1293
    let v1312 : string = v1242.TrimEnd v1305 
    v1312
and method51 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (string * string))) : unit =
    let v3 : (unit -> string) = closure28(v0, v1, v2)
    method13(v0, v3)
and method49 (v0 : string, v1 : int64) : Async<int64> =
    let v4 : bool = true
    let mutable _v4 : Async<int64> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : Async<int64> = null |> unbox<Async<int64>>
    v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v16 : Async<int64> = null |> unbox<Async<int64>>
    v16 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v25 : Async<int64> = null |> unbox<Async<int64>>
    v25 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v34 : Async<int64> = null |> unbox<Async<int64>>
    v34 
    #endif
#if FABLE_COMPILER_PYTHON
    let v43 : Async<int64> = null |> unbox<Async<int64>>
    v43 
    #endif
#else
    let v50 : Async<int64> option = None
    let mutable _v50 = v50 
    async {
    try
    let v51 : bool = true
    method43(v51, v0)
    return v1 
    with ex ->
    let v52 : exn = ex
    let v53 : int64 = v1 % 100L
    let v54 : bool = v53 = 0L
    if v54 then
        let v57 : bool = true
        let mutable _v57 : string option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v60 : string = $"%A{v52}"
        v60 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v69 : string = $"%A{v52}"
        v69 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v78 : string = $"%A{v52}"
        v78 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v87 : string = $"%A{v52}"
        v87 
        #endif
#if FABLE_COMPILER_PYTHON
        let v96 : string = $"%A{v52}"
        v96 
        #endif
#else
        let v103 : string = $"{v52.GetType ()}: {v52.Message}"
        v103 
        #endif
        |> fun x -> _v57 <- Some x
        let v104 : string = match _v57 with Some x -> x | None -> failwith "base.run_target / _v57=None"
        let v119 : US0 = US0_1
        let v120 : (unit -> string) = closure26()
        let v121 : (unit -> struct (string * string)) = closure27(v0, v104)
        method51(v119, v120, v121)
    let v124 : bool = true
    let mutable _v124 : Async<unit> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v127 : Async<unit> = null |> unbox<Async<unit>>
    v127 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v136 : Async<unit> = null |> unbox<Async<unit>>
    v136 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v145 : Async<unit> = null |> unbox<Async<unit>>
    v145 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v154 : Async<unit> = null |> unbox<Async<unit>>
    v154 
    #endif
#if FABLE_COMPILER_PYTHON
    let v163 : Async<unit> = null |> unbox<Async<unit>>
    v163 
    #endif
#else
    let v170 : (int32 -> Async<unit>) = Async.Sleep
    let v171 : Async<unit> = v170 10
    v171 
    #endif
    |> fun x -> _v124 <- Some x
    let v172 : Async<unit> = match _v124 with Some x -> x | None -> failwith "base.run_target / _v124=None"
    do! v172 
    let v187 : int64 = v1 + 1L
    let v188 : Async<int64> = method49(v0, v187)
    return! v188 
    (*
    let v189 : int64 = *)
    }
    |> fun x -> _v50 <- Some x
    let v190 : Async<int64> = match _v50 with Some x -> x | None -> failwith "async.new_async_unit / _v50=None"
    v190 
    #endif
    |> fun x -> _v4 <- Some x
    let v191 : Async<int64> = match _v4 with Some x -> x | None -> failwith "base.run_target / _v4=None"
    v191
and closure25 (v0 : string) () : unit =
    let v3 : bool = true
    let mutable _v3 : Async<int64> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : Async<int64> = null |> unbox<Async<int64>>
    v6 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v15 : Async<int64> = null |> unbox<Async<int64>>
    v15 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v24 : Async<int64> = null |> unbox<Async<int64>>
    v24 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : Async<int64> = null |> unbox<Async<int64>>
    v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v42 : Async<int64> = null |> unbox<Async<int64>>
    v42 
    #endif
#else
    let v49 : int64 = 0L
    let v50 : Async<int64> = method49(v0, v49)
    v50 
    #endif
    |> fun x -> _v3 <- Some x
    let v51 : Async<int64> = match _v3 with Some x -> x | None -> failwith "base.run_target / _v3=None"
    let v68 : bool = true
    let mutable _v68 : Async<unit> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v71 : Async<unit> = null |> unbox<Async<unit>>
    v71 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v80 : Async<unit> = null |> unbox<Async<unit>>
    v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v89 : Async<unit> = null |> unbox<Async<unit>>
    v89 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v98 : Async<unit> = null |> unbox<Async<unit>>
    v98 
    #endif
#if FABLE_COMPILER_PYTHON
    let v107 : Async<unit> = null |> unbox<Async<unit>>
    v107 
    #endif
#else
    let v114 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v115 : Async<unit> = v114 v51
    v115 
    #endif
    |> fun x -> _v68 <- Some x
    let v116 : Async<unit> = match _v68 with Some x -> x | None -> failwith "base.run_target / _v68=None"
    let v133 : bool = true
    let mutable _v133 : unit option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_PYTHON
    null |> unbox<unit>
    () 
    #endif
#else
    let v164 : (Async<unit> -> unit) = Async.RunSynchronously
    v164 v116
    () 
    #endif
    |> fun x -> _v133 <- Some x
    match _v133 with Some x -> x | None -> failwith "base.run_target / _v133=None"
    ()
and method48 (v0 : string) : (unit -> unit) =
    closure25(v0)
and method53 (v0 : string) : (unit -> unit) =
    closure25(v0)
and method34 (v0 : string) : System.IDisposable =
    let v3 : bool = true
    let mutable _v3 : System.IDisposable option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = method35(v0)
    let v5 : string = "std::fs::create_dir_all(&*$0)"
    let v6 : Result<unit, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : (std_io_Error -> std_string_String) = method36()
    let v8 : string = "$0.map_err(|x| $1(x))"
    let v9 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v6, v7) v8 
    let v10 : (unit -> US13) = closure13()
    let v11 : (std_string_String -> US13) = closure14()
    let v12 : US13 = match v9 with Ok () -> v10 () | Error x -> v11 x
    match v12 with
    | US13_1(v16) -> (* Error *)
        let v17 : US0 = US0_4
        let v18 : (unit -> string) = closure15()
        let v19 : (unit -> struct (string * std_string_String)) = closure16(v4, v16)
        method37(v17, v18, v19)
    | US13_0 -> (* Ok *)
        let v13 : US0 = US0_0
        let v14 : (unit -> string) = closure18()
        let v15 : (unit -> string) = closure19(v4)
        method40(v13, v14, v15)
    let v22 : bool = true
    let mutable _v22 : System.IDisposable option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v23 : (unit -> unit) = method42(v4)
    let v24 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v23 "$0()" )
    v24 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v25 : (unit -> unit) = method42(v4)
    let v26 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v25 "$0()" )
    v26 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v27 : (unit -> unit) = method42(v4)
    let v28 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v27 "$0()" )
    v28 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v29 : (unit -> unit) = method45(v4)
    let v30 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v29 () }
    v30 
    #endif
#if FABLE_COMPILER_PYTHON
    let v31 : (unit -> unit) = method45(v4)
    let v32 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v31 () }
    v32 
    #endif
#else
    let v33 : (unit -> unit) = method45(v4)
    let v34 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v33 () }
    v34 
    #endif
    |> fun x -> _v22 <- Some x
    let v35 : System.IDisposable = match _v22 with Some x -> x | None -> failwith "base.run_target / _v22=None"
    v35 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v45 : System.IDisposable = null |> unbox<System.IDisposable>
    v45 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v54 : System.IDisposable = null |> unbox<System.IDisposable>
    v54 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v63 : bool = true
    let mutable _v63 : System.IO.DirectoryInfo option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v66 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v66 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v75 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v75 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v84 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v84 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v93 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v93 
    #endif
#if FABLE_COMPILER_PYTHON
    let v102 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v102 
    #endif
#else
    let v109 : (string -> System.IO.DirectoryInfo) = System.IO.Directory.CreateDirectory
    let v110 : System.IO.DirectoryInfo = v109 v0
    v110 
    #endif
    |> fun x -> _v63 <- Some x
    let v111 : System.IO.DirectoryInfo = match _v63 with Some x -> x | None -> failwith "base.run_target / _v63=None"
    let v128 : bool = true
    let mutable _v128 : bool option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v131 : bool = null |> unbox<bool>
    v131 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v140 : bool = null |> unbox<bool>
    v140 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v149 : bool = null |> unbox<bool>
    v149 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v158 : bool = null |> unbox<bool>
    v158 
    #endif
#if FABLE_COMPILER_PYTHON
    let v167 : bool = null |> unbox<bool>
    v167 
    #endif
#else
    let v174 : bool = v111.Exists
    v174 
    #endif
    |> fun x -> _v128 <- Some x
    let v175 : bool = match _v128 with Some x -> x | None -> failwith "base.run_target / _v128=None"
    let v190 : bool = v175 = false
    if v190 then
        let v193 : bool = true
        let mutable _v193 : System.DateTime option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v196 : System.DateTime = null |> unbox<System.DateTime>
        v196 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v205 : System.DateTime = null |> unbox<System.DateTime>
        v205 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v214 : System.DateTime = null |> unbox<System.DateTime>
        v214 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v223 : System.DateTime = null |> unbox<System.DateTime>
        v223 
        #endif
#if FABLE_COMPILER_PYTHON
        let v232 : System.DateTime = null |> unbox<System.DateTime>
        v232 
        #endif
#else
        let v239 : System.DateTime = v111.CreationTime
        v239 
        #endif
        |> fun x -> _v193 <- Some x
        let v240 : System.DateTime = match _v193 with Some x -> x | None -> failwith "base.run_target / _v193=None"
        let v255 : obj = {| Exists = v175; CreationTime = v240 |}
        let v258 : string = $"%A{v255}"
        let v265 : US0 = US0_1
        let v266 : (unit -> string) = closure22()
        let v267 : (unit -> struct (string * string)) = closure23(v0, v258)
        method46(v265, v266, v267)
    let v270 : bool = true
    let mutable _v270 : System.IDisposable option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v271 : (unit -> unit) = method48(v0)
    let v272 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v271 "$0()" )
    v272 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v273 : (unit -> unit) = method48(v0)
    let v274 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v273 "$0()" )
    v274 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v275 : (unit -> unit) = method48(v0)
    let v276 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v275 "$0()" )
    v276 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v277 : (unit -> unit) = method53(v0)
    let v278 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v277 () }
    v278 
    #endif
#if FABLE_COMPILER_PYTHON
    let v279 : (unit -> unit) = method53(v0)
    let v280 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v279 () }
    v280 
    #endif
#else
    let v281 : (unit -> unit) = method53(v0)
    let v282 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v281 () }
    v282 
    #endif
    |> fun x -> _v270 <- Some x
    let v283 : System.IDisposable = match _v270 with Some x -> x | None -> failwith "base.run_target / _v270=None"
    v283 
    #endif
#if FABLE_COMPILER_PYTHON
    let v293 : bool = true
    let mutable _v293 : System.IO.DirectoryInfo option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v296 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v296 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v305 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v305 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v314 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v314 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v323 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v323 
    #endif
#if FABLE_COMPILER_PYTHON
    let v332 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v332 
    #endif
#else
    let v339 : (string -> System.IO.DirectoryInfo) = System.IO.Directory.CreateDirectory
    let v340 : System.IO.DirectoryInfo = v339 v0
    v340 
    #endif
    |> fun x -> _v293 <- Some x
    let v341 : System.IO.DirectoryInfo = match _v293 with Some x -> x | None -> failwith "base.run_target / _v293=None"
    let v358 : bool = true
    let mutable _v358 : bool option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v361 : bool = null |> unbox<bool>
    v361 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v370 : bool = null |> unbox<bool>
    v370 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v379 : bool = null |> unbox<bool>
    v379 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v388 : bool = null |> unbox<bool>
    v388 
    #endif
#if FABLE_COMPILER_PYTHON
    let v397 : bool = null |> unbox<bool>
    v397 
    #endif
#else
    let v404 : bool = v341.Exists
    v404 
    #endif
    |> fun x -> _v358 <- Some x
    let v405 : bool = match _v358 with Some x -> x | None -> failwith "base.run_target / _v358=None"
    let v420 : bool = v405 = false
    if v420 then
        let v423 : bool = true
        let mutable _v423 : System.DateTime option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v426 : System.DateTime = null |> unbox<System.DateTime>
        v426 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v435 : System.DateTime = null |> unbox<System.DateTime>
        v435 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v444 : System.DateTime = null |> unbox<System.DateTime>
        v444 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v453 : System.DateTime = null |> unbox<System.DateTime>
        v453 
        #endif
#if FABLE_COMPILER_PYTHON
        let v462 : System.DateTime = null |> unbox<System.DateTime>
        v462 
        #endif
#else
        let v469 : System.DateTime = v341.CreationTime
        v469 
        #endif
        |> fun x -> _v423 <- Some x
        let v470 : System.DateTime = match _v423 with Some x -> x | None -> failwith "base.run_target / _v423=None"
        let v485 : obj = {| Exists = v405; CreationTime = v470 |}
        let v488 : string = $"%A{v485}"
        let v495 : US0 = US0_1
        let v496 : (unit -> string) = closure22()
        let v497 : (unit -> struct (string * string)) = closure23(v0, v488)
        method46(v495, v496, v497)
    let v500 : bool = true
    let mutable _v500 : System.IDisposable option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v501 : (unit -> unit) = method48(v0)
    let v502 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v501 "$0()" )
    v502 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v503 : (unit -> unit) = method48(v0)
    let v504 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v503 "$0()" )
    v504 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v505 : (unit -> unit) = method48(v0)
    let v506 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v505 "$0()" )
    v506 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v507 : (unit -> unit) = method53(v0)
    let v508 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v507 () }
    v508 
    #endif
#if FABLE_COMPILER_PYTHON
    let v509 : (unit -> unit) = method53(v0)
    let v510 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v509 () }
    v510 
    #endif
#else
    let v511 : (unit -> unit) = method53(v0)
    let v512 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v511 () }
    v512 
    #endif
    |> fun x -> _v500 <- Some x
    let v513 : System.IDisposable = match _v500 with Some x -> x | None -> failwith "base.run_target / _v500=None"
    v513 
    #endif
#else
    let v523 : bool = true
    let mutable _v523 : System.IO.DirectoryInfo option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v526 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v526 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v535 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v535 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v544 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v544 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v553 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v553 
    #endif
#if FABLE_COMPILER_PYTHON
    let v562 : System.IO.DirectoryInfo = null |> unbox<System.IO.DirectoryInfo>
    v562 
    #endif
#else
    let v569 : (string -> System.IO.DirectoryInfo) = System.IO.Directory.CreateDirectory
    let v570 : System.IO.DirectoryInfo = v569 v0
    v570 
    #endif
    |> fun x -> _v523 <- Some x
    let v571 : System.IO.DirectoryInfo = match _v523 with Some x -> x | None -> failwith "base.run_target / _v523=None"
    let v588 : bool = true
    let mutable _v588 : bool option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v591 : bool = null |> unbox<bool>
    v591 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v600 : bool = null |> unbox<bool>
    v600 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v609 : bool = null |> unbox<bool>
    v609 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v618 : bool = null |> unbox<bool>
    v618 
    #endif
#if FABLE_COMPILER_PYTHON
    let v627 : bool = null |> unbox<bool>
    v627 
    #endif
#else
    let v634 : bool = v571.Exists
    v634 
    #endif
    |> fun x -> _v588 <- Some x
    let v635 : bool = match _v588 with Some x -> x | None -> failwith "base.run_target / _v588=None"
    let v650 : bool = v635 = false
    if v650 then
        let v653 : bool = true
        let mutable _v653 : System.DateTime option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v656 : System.DateTime = null |> unbox<System.DateTime>
        v656 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v665 : System.DateTime = null |> unbox<System.DateTime>
        v665 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v674 : System.DateTime = null |> unbox<System.DateTime>
        v674 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v683 : System.DateTime = null |> unbox<System.DateTime>
        v683 
        #endif
#if FABLE_COMPILER_PYTHON
        let v692 : System.DateTime = null |> unbox<System.DateTime>
        v692 
        #endif
#else
        let v699 : System.DateTime = v571.CreationTime
        v699 
        #endif
        |> fun x -> _v653 <- Some x
        let v700 : System.DateTime = match _v653 with Some x -> x | None -> failwith "base.run_target / _v653=None"
        let v715 : obj = {| Exists = v635; CreationTime = v700 |}
        let v718 : string = $"%A{v715}"
        let v725 : US0 = US0_1
        let v726 : (unit -> string) = closure22()
        let v727 : (unit -> struct (string * string)) = closure23(v0, v718)
        method46(v725, v726, v727)
    let v730 : bool = true
    let mutable _v730 : System.IDisposable option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v731 : (unit -> unit) = method48(v0)
    let v732 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v731 "$0()" )
    v732 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v733 : (unit -> unit) = method48(v0)
    let v734 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v733 "$0()" )
    v734 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v735 : (unit -> unit) = method48(v0)
    let v736 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v735 "$0()" )
    v736 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v737 : (unit -> unit) = method53(v0)
    let v738 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v737 () }
    v738 
    #endif
#if FABLE_COMPILER_PYTHON
    let v739 : (unit -> unit) = method53(v0)
    let v740 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v739 () }
    v740 
    #endif
#else
    let v741 : (unit -> unit) = method53(v0)
    let v742 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v741 () }
    v742 
    #endif
    |> fun x -> _v730 <- Some x
    let v743 : System.IDisposable = match _v730 with Some x -> x | None -> failwith "base.run_target / _v730=None"
    v743 
    #endif
    |> fun x -> _v3 <- Some x
    let v751 : System.IDisposable = match _v3 with Some x -> x | None -> failwith "base.run_target / _v3=None"
    v751
and method54 (v0 : string) : string =
    v0
and method31 (v0 : string, v1 : string) : unit =
    let v2 : bool = method32(v0, v1)
    let v3 : bool = v2 = false
    if v3 then
        let v4 : string = method30(v0)
        let v5 : bool = method23(v4)
        let v6 : bool = v5 = false
        if v6 then
            let v7 : System.IDisposable = method34(v4)
            ()
        let v10 : bool = true
        let mutable _v10 : unit option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v11 : string = "std::fs::write(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v11 
        () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        null |> unbox<unit>
        () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        null |> unbox<unit>
        () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        null |> unbox<unit>
        () 
        #endif
#if FABLE_COMPILER_PYTHON
        null |> unbox<unit>
        () 
        #endif
#else
        let v36 : string = method54(v1)
        System.IO.File.WriteAllText (v0, v36)
        () 
        #endif
        |> fun x -> _v10 <- Some x
        match _v10 with Some x -> x | None -> failwith "base.run_target / _v10=None"
        ()
and method56 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : string =
    v0
and method58 (v0 : int32, v1 : Mut5) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and closure31 (v0 : char) (v1 : UH0) : UH0 =
    UH0_1(v0, v1)
and closure30 () (v0 : char) : (UH0 -> UH0) =
    closure31(v0)
and method59 () : (char -> (UH0 -> UH0)) =
    closure30()
and method60 (v0 : UH0, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : struct (System.Text.StringBuilder * int32 * int32) =
    match v0 with
    | UH0_1(v4, v5) -> (* Cons *)
        let v6 : bool = '\n' = v4
        let struct (v9 : int32, v10 : int32) =
            if v6 then
                let v7 : int32 = v2 + 1
                struct (v7, 1)
            else
                let v8 : int32 = v3 + 1
                struct (v2, v8)
        let v25 : System.Text.StringBuilder =
            if v6 then
                let v11 : (unit -> System.Text.StringBuilder) = v1.Clear
                let v12 : System.Text.StringBuilder = v11 ()
                v1
            else
                let v15 : (char -> string) = _.ToString()
                let v16 : string = v15 v4
                let v23 : (string -> System.Text.StringBuilder) = v1.Append
                let v24 : System.Text.StringBuilder = v23 v16
                v1
        method60(v5, v25, v9, v10)
    | UH0_0 -> (* Nil *)
        struct (v1, v2, v3)
and closure29 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US15 =
    let v4 : bool = "" = v0
    if v4 then
        let v5 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v1, v2, v3)}"
        US15_1(v5)
    else
        let v7 : char = v0.[int 0]
        let v8 : bool = v7 = '"'
        if v8 then
            let v9 : (string -> int32) = String.length
            let v10 : int32 = v9 v0
            let v11 : (int32 -> int32) = int32
            let v12 : int32 = v11 1
            let v13 : (int32 -> int32) = int32
            let v14 : int32 = v13 v10
            let v15 : string = v0.[int v12..int v14]
            let v18 : (char -> string) = _.ToString()
            let v19 : string = v18 v7
            let v26 : int32 = v19.Length
            let v27 : (char []) = Array.zeroCreate<char> (v26)
            let v28 : Mut5 = {l0 = 0} : Mut5
            while method58(v26, v28) do
                let v30 : int32 = v28.l0
                let v31 : char = v19.[int v30]
                v27.[int v30] <- v31
                let v32 : int32 = v30 + 1
                v28.l0 <- v32
                ()
            let v33 : char list = v27 |> Array.toList
            let v36 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
            let v37 : (char -> (UH0 -> UH0)) = method59()
            let v38 : (char list -> (UH0 -> UH0)) = v36 v37
            let v39 : (UH0 -> UH0) = v38 v33
            let v40 : UH0 = UH0_0
            let v41 : UH0 = v39 v40
            let struct (v50 : System.Text.StringBuilder, v51 : int32, v52 : int32) = method60(v41, v1, v2, v3)
            US15_0(v7, v15, v50, v51, v52)
        else
            let v54 : (string -> int32) = String.length
            let v55 : int32 = v54 v0
            let v56 : string = "\n"
            let v57 : int32 = v0.IndexOf v56 
            let v58 : int32 = v57 - 1
            let v59 : bool = -2 = v58
            let v60 : int32 =
                if v59 then
                    v55
                else
                    v58
            let v61 : (int32 -> int32) = int32
            let v62 : int32 = v61 0
            let v63 : (int32 -> int32) = int32
            let v64 : int32 = v63 v60
            let v65 : string = v0.[int v62..int v64]
            let v66 : string = $"parsing.p_char / expected: '{'"'}' / line: {v2} / col: {v3}
{v1}{v65}"
            let v67 : int32 = v3 - 1
            let v70 : (int32 -> (string -> string)) = String.replicate
            let v71 : (string -> string) = v70 v67
            let v72 : string = " "
            let v73 : string = v71 v72
            let v80 : string = "^"
            let v81 : string = v73 + v80 
            let v82 : string = $"{v66}
{v81}
"
            US15_1(v82)
and closure32 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US15 =
    let v4 : bool = "" = v0
    if v4 then
        let v5 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v1, v2, v3)}"
        US15_1(v5)
    else
        let v7 : char = v0.[int 0]
        let v8 : bool = v7 = '''
        if v8 then
            let v9 : (string -> int32) = String.length
            let v10 : int32 = v9 v0
            let v11 : (int32 -> int32) = int32
            let v12 : int32 = v11 1
            let v13 : (int32 -> int32) = int32
            let v14 : int32 = v13 v10
            let v15 : string = v0.[int v12..int v14]
            let v18 : (char -> string) = _.ToString()
            let v19 : string = v18 v7
            let v26 : int32 = v19.Length
            let v27 : (char []) = Array.zeroCreate<char> (v26)
            let v28 : Mut5 = {l0 = 0} : Mut5
            while method58(v26, v28) do
                let v30 : int32 = v28.l0
                let v31 : char = v19.[int v30]
                v27.[int v30] <- v31
                let v32 : int32 = v30 + 1
                v28.l0 <- v32
                ()
            let v33 : char list = v27 |> Array.toList
            let v36 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
            let v37 : (char -> (UH0 -> UH0)) = method59()
            let v38 : (char list -> (UH0 -> UH0)) = v36 v37
            let v39 : (UH0 -> UH0) = v38 v33
            let v40 : UH0 = UH0_0
            let v41 : UH0 = v39 v40
            let struct (v50 : System.Text.StringBuilder, v51 : int32, v52 : int32) = method60(v41, v1, v2, v3)
            US15_0(v7, v15, v50, v51, v52)
        else
            let v54 : (string -> int32) = String.length
            let v55 : int32 = v54 v0
            let v56 : string = "\n"
            let v57 : int32 = v0.IndexOf v56 
            let v58 : int32 = v57 - 1
            let v59 : bool = -2 = v58
            let v60 : int32 =
                if v59 then
                    v55
                else
                    v58
            let v61 : (int32 -> int32) = int32
            let v62 : int32 = v61 0
            let v63 : (int32 -> int32) = int32
            let v64 : int32 = v63 v60
            let v65 : string = v0.[int v62..int v64]
            let v66 : string = $"parsing.p_char / expected: '{'''}' / line: {v2} / col: {v3}
{v1}{v65}"
            let v67 : int32 = v3 - 1
            let v70 : (int32 -> (string -> string)) = String.replicate
            let v71 : (string -> string) = v70 v67
            let v72 : string = " "
            let v73 : string = v71 v72
            let v80 : string = "^"
            let v81 : string = v73 + v80 
            let v82 : string = $"{v66}
{v81}
"
            US15_1(v82)
and method61 (v0 : string, v1 : System.Text.StringBuilder, v2 : UH1) : US15 =
    match v2 with
    | UH1_1(v5, v6) -> (* Cons *)
        let v7 : US15 = v5 struct (v0, v1, 1, 1)
        match v7 with
        | US15_1(v13) -> (* Error *)
            method61(v0, v1, v6)
        | US15_0(v8, v9, v10, v11, v12) -> (* Ok *)
            v7
    | UH1_0 -> (* Nil *)
        let v3 : string = "choice / no parsers succeeded"
        US15_1(v3)
and method62 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 2L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v11 : US17 =
            if v3 then
                US17_0('"')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US17_0(''')
                else
                    let v8 : int64 = v5 - 1L
                    US17_1
        let v15 : char =
            match v11 with
            | US17_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US17_0(v12) -> (* Some *)
                v12
        let v16 : bool = v0 = v15
        if v16 then
            true
        else
            let v17 : int64 = v1 + 1L
            method62(v0, v17)
and method63 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US16 =
    let v5 : bool = "" = v1
    let v118 : US15 =
        if v5 then
            let v6 : char list = []
            let v9 : char list = ''' :: v6 
            let v18 : char list = '"' :: v9 
            let v27 : (char list -> (char [])) = List.toArray
            let v28 : (char []) = v27 v18
            let v35 : string = $"parsing.none_of / unexpected end of input / chars: %A{v28} / s: %A{struct (v2, v3, v4)}"
            US15_1(v35)
        else
            let v37 : char = v1.[int 0]
            let v38 : (string -> int32) = String.length
            let v39 : int32 = v38 v1
            let v40 : (int32 -> int32) = int32
            let v41 : int32 = v40 1
            let v42 : (int32 -> int32) = int32
            let v43 : int32 = v42 v39
            let v44 : string = v1.[int v41..int v43]
            let v45 : int64 = 0L
            let v46 : bool = method62(v37, v45)
            let v47 : bool = v46 = false
            if v47 then
                let v50 : (char -> string) = _.ToString()
                let v51 : string = v50 v37
                let v58 : int32 = v51.Length
                let v59 : (char []) = Array.zeroCreate<char> (v58)
                let v60 : Mut5 = {l0 = 0} : Mut5
                while method58(v58, v60) do
                    let v62 : int32 = v60.l0
                    let v63 : char = v51.[int v62]
                    v59.[int v62] <- v63
                    let v64 : int32 = v62 + 1
                    v60.l0 <- v64
                    ()
                let v65 : char list = v59 |> Array.toList
                let v68 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v69 : (char -> (UH0 -> UH0)) = method59()
                let v70 : (char list -> (UH0 -> UH0)) = v68 v69
                let v71 : (UH0 -> UH0) = v70 v65
                let v72 : UH0 = UH0_0
                let v73 : UH0 = v71 v72
                let struct (v82 : System.Text.StringBuilder, v83 : int32, v84 : int32) = method60(v73, v2, v3, v4)
                US15_0(v37, v44, v82, v83, v84)
            else
                let v86 : char list = []
                let v89 : char list = ''' :: v86 
                let v98 : char list = '"' :: v89 
                let v107 : (char list -> (char [])) = List.toArray
                let v108 : (char []) = v107 v98
                let v115 : string = $"parsing.none_of / unexpected char: '{v37}' / chars: %A{v108} / s: %A{struct (v2, v3, v4)}"
                US15_1(v115)
    let v130 : US15 =
        match v118 with
        | US15_1(v127) -> (* Error *)
            US15_1(v127)
        | US15_0(v119, v120, v121, v122, v123) -> (* Ok *)
            let v124 : bool = '\\' = v119
            let v125 : char =
                if v124 then
                    '/'
                else
                    v119
            US15_0(v125, v120, v121, v122, v123)
    match v130 with
    | US15_1(v148) -> (* Error *)
        US16_0(v0, v1, v2, v3, v4)
    | US15_0(v131, v132, v133, v134, v135) -> (* Ok *)
        let v138 : (char -> string) = _.ToString()
        let v139 : string = v138 v131
        let v146 : string = v0 + v139 
        method63(v146, v132, v133, v134, v135)
and method64 (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32, v4 : UH1) : US15 =
    match v4 with
    | UH1_1(v7, v8) -> (* Cons *)
        let v9 : US15 = v7 struct (v0, v1, v2, v3)
        match v9 with
        | US15_1(v15) -> (* Error *)
            method64(v0, v1, v2, v3, v8)
        | US15_0(v10, v11, v12, v13, v14) -> (* Ok *)
            v9
    | UH1_0 -> (* Nil *)
        let v5 : string = "choice / no parsers succeeded"
        US15_1(v5)
and method65 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 3L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v15 : US17 =
            if v3 then
                US17_0('"')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US17_0(''')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US17_0(' ')
                    else
                        let v11 : int64 = v8 - 1L
                        US17_1
        let v19 : char =
            match v15 with
            | US17_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US17_0(v16) -> (* Some *)
                v16
        let v20 : bool = v0 = v19
        if v20 then
            true
        else
            let v21 : int64 = v1 + 1L
            method65(v0, v21)
and method66 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US16 =
    let v5 : bool = "" = v1
    let v136 : US15 =
        if v5 then
            let v6 : char list = []
            let v9 : char list = ' ' :: v6 
            let v18 : char list = ''' :: v9 
            let v27 : char list = '"' :: v18 
            let v36 : (char list -> (char [])) = List.toArray
            let v37 : (char []) = v36 v27
            let v44 : string = $"parsing.none_of / unexpected end of input / chars: %A{v37} / s: %A{struct (v2, v3, v4)}"
            US15_1(v44)
        else
            let v46 : char = v1.[int 0]
            let v47 : (string -> int32) = String.length
            let v48 : int32 = v47 v1
            let v49 : (int32 -> int32) = int32
            let v50 : int32 = v49 1
            let v51 : (int32 -> int32) = int32
            let v52 : int32 = v51 v48
            let v53 : string = v1.[int v50..int v52]
            let v54 : int64 = 0L
            let v55 : bool = method65(v46, v54)
            let v56 : bool = v55 = false
            if v56 then
                let v59 : (char -> string) = _.ToString()
                let v60 : string = v59 v46
                let v67 : int32 = v60.Length
                let v68 : (char []) = Array.zeroCreate<char> (v67)
                let v69 : Mut5 = {l0 = 0} : Mut5
                while method58(v67, v69) do
                    let v71 : int32 = v69.l0
                    let v72 : char = v60.[int v71]
                    v68.[int v71] <- v72
                    let v73 : int32 = v71 + 1
                    v69.l0 <- v73
                    ()
                let v74 : char list = v68 |> Array.toList
                let v77 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v78 : (char -> (UH0 -> UH0)) = method59()
                let v79 : (char list -> (UH0 -> UH0)) = v77 v78
                let v80 : (UH0 -> UH0) = v79 v74
                let v81 : UH0 = UH0_0
                let v82 : UH0 = v80 v81
                let struct (v91 : System.Text.StringBuilder, v92 : int32, v93 : int32) = method60(v82, v2, v3, v4)
                US15_0(v46, v53, v91, v92, v93)
            else
                let v95 : char list = []
                let v98 : char list = ' ' :: v95 
                let v107 : char list = ''' :: v98 
                let v116 : char list = '"' :: v107 
                let v125 : (char list -> (char [])) = List.toArray
                let v126 : (char []) = v125 v116
                let v133 : string = $"parsing.none_of / unexpected char: '{v46}' / chars: %A{v126} / s: %A{struct (v2, v3, v4)}"
                US15_1(v133)
    let v148 : US15 =
        match v136 with
        | US15_1(v145) -> (* Error *)
            US15_1(v145)
        | US15_0(v137, v138, v139, v140, v141) -> (* Ok *)
            let v142 : bool = '\\' = v137
            let v143 : char =
                if v142 then
                    '/'
                else
                    v137
            US15_0(v143, v138, v139, v140, v141)
    match v148 with
    | US15_1(v166) -> (* Error *)
        US16_0(v0, v1, v2, v3, v4)
    | US15_0(v149, v150, v151, v152, v153) -> (* Ok *)
        let v156 : (char -> string) = _.ToString()
        let v157 : string = v156 v149
        let v164 : string = v0 + v157 
        method66(v164, v150, v151, v152, v153)
and method67 (v0 : string, v1 : int32) : int32 =
    let v2 : int32 = v0.Length
    let v3 : bool = v1 >= v2
    if v3 then
        v1
    else
        let v4 : char = v0.[int v1]
        let v5 : bool = v4 = ' '
        if v5 then
            let v6 : int32 = v1 + 1
            method67(v0, v6)
        else
            v1
and method68 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US16 =
    let v5 : bool = "" = v1
    let v54 : US15 =
        if v5 then
            let v6 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v2, v3, v4)}"
            US15_1(v6)
        else
            let v8 : char = v1.[int 0]
            let v9 : (string -> int32) = String.length
            let v10 : int32 = v9 v1
            let v11 : (int32 -> int32) = int32
            let v12 : int32 = v11 1
            let v13 : (int32 -> int32) = int32
            let v14 : int32 = v13 v10
            let v15 : string = v1.[int v12..int v14]
            let v18 : (char -> string) = _.ToString()
            let v19 : string = v18 v8
            let v26 : int32 = v19.Length
            let v27 : (char []) = Array.zeroCreate<char> (v26)
            let v28 : Mut5 = {l0 = 0} : Mut5
            while method58(v26, v28) do
                let v30 : int32 = v28.l0
                let v31 : char = v19.[int v30]
                v27.[int v30] <- v31
                let v32 : int32 = v30 + 1
                v28.l0 <- v32
                ()
            let v33 : char list = v27 |> Array.toList
            let v36 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
            let v37 : (char -> (UH0 -> UH0)) = method59()
            let v38 : (char list -> (UH0 -> UH0)) = v36 v37
            let v39 : (UH0 -> UH0) = v38 v33
            let v40 : UH0 = UH0_0
            let v41 : UH0 = v39 v40
            let struct (v50 : System.Text.StringBuilder, v51 : int32, v52 : int32) = method60(v41, v2, v3, v4)
            US15_0(v8, v15, v50, v51, v52)
    match v54 with
    | US15_1(v72) -> (* Error *)
        US16_0(v0, v1, v2, v3, v4)
    | US15_0(v55, v56, v57, v58, v59) -> (* Ok *)
        let v62 : (char -> string) = _.ToString()
        let v63 : string = v62 v55
        let v70 : string = v0 + v63 
        method68(v70, v56, v57, v58, v59)
and method57 (v0 : string) : US14 =
    let mutable _v0 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v3 : (string -> string option) = Option.ofObj
    let v4 : string option = v3 v0
    v4 
    #else
    Some v0 
    #endif
    |> fun x -> _v0 <- Some x
    let v5 : string option = match _v0 with Some x -> x | None -> failwith "optionm'.of_obj / _v0=None"
    let v14 : string = ""
    let v15 : string = v5 |> Option.defaultValue v14 
    let v22 : (string -> System.Text.StringBuilder) = System.Text.StringBuilder 
    let v23 : System.Text.StringBuilder = v22 v14
    let v24 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US15) = closure29()
    let v25 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US15) = closure32()
    let v26 : UH1 = UH1_0
    let v27 : UH1 = UH1_1(v25, v26)
    let v28 : UH1 = UH1_1(v24, v27)
    let v29 : US15 = method61(v15, v23, v28)
    let v219 : US16 =
        match v29 with
        | US15_1(v216) -> (* Error *)
            US16_1(v216)
        | US15_0(v30, v31, v32, v33, v34) -> (* Ok *)
            let v35 : bool = "" = v31
            let v148 : US15 =
                if v35 then
                    let v36 : char list = []
                    let v39 : char list = ''' :: v36 
                    let v48 : char list = '"' :: v39 
                    let v57 : (char list -> (char [])) = List.toArray
                    let v58 : (char []) = v57 v48
                    let v65 : string = $"parsing.none_of / unexpected end of input / chars: %A{v58} / s: %A{struct (v32, v33, v34)}"
                    US15_1(v65)
                else
                    let v67 : char = v31.[int 0]
                    let v68 : (string -> int32) = String.length
                    let v69 : int32 = v68 v31
                    let v70 : (int32 -> int32) = int32
                    let v71 : int32 = v70 1
                    let v72 : (int32 -> int32) = int32
                    let v73 : int32 = v72 v69
                    let v74 : string = v31.[int v71..int v73]
                    let v75 : int64 = 0L
                    let v76 : bool = method62(v67, v75)
                    let v77 : bool = v76 = false
                    if v77 then
                        let v80 : (char -> string) = _.ToString()
                        let v81 : string = v80 v67
                        let v88 : int32 = v81.Length
                        let v89 : (char []) = Array.zeroCreate<char> (v88)
                        let v90 : Mut5 = {l0 = 0} : Mut5
                        while method58(v88, v90) do
                            let v92 : int32 = v90.l0
                            let v93 : char = v81.[int v92]
                            v89.[int v92] <- v93
                            let v94 : int32 = v92 + 1
                            v90.l0 <- v94
                            ()
                        let v95 : char list = v89 |> Array.toList
                        let v98 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v99 : (char -> (UH0 -> UH0)) = method59()
                        let v100 : (char list -> (UH0 -> UH0)) = v98 v99
                        let v101 : (UH0 -> UH0) = v100 v95
                        let v102 : UH0 = UH0_0
                        let v103 : UH0 = v101 v102
                        let struct (v112 : System.Text.StringBuilder, v113 : int32, v114 : int32) = method60(v103, v32, v33, v34)
                        US15_0(v67, v74, v112, v113, v114)
                    else
                        let v116 : char list = []
                        let v119 : char list = ''' :: v116 
                        let v128 : char list = '"' :: v119 
                        let v137 : (char list -> (char [])) = List.toArray
                        let v138 : (char []) = v137 v128
                        let v145 : string = $"parsing.none_of / unexpected char: '{v67}' / chars: %A{v138} / s: %A{struct (v32, v33, v34)}"
                        US15_1(v145)
            let v160 : US15 =
                match v148 with
                | US15_1(v157) -> (* Error *)
                    US15_1(v157)
                | US15_0(v149, v150, v151, v152, v153) -> (* Ok *)
                    let v154 : bool = '\\' = v149
                    let v155 : char =
                        if v154 then
                            '/'
                        else
                            v149
                    US15_0(v155, v150, v151, v152, v153)
            let v180 : US16 =
                match v160 with
                | US15_1(v161) -> (* Error *)
                    US16_1(v161)
                | US15_0(v163, v164, v165, v166, v167) -> (* Ok *)
                    let v170 : (char -> string) = _.ToString()
                    let v171 : string = v170 v163
                    method63(v171, v164, v165, v166, v167)
            let v190 : US16 =
                match v180 with
                | US16_1(v187) -> (* Error *)
                    US16_0(v14, v31, v32, v33, v34)
                | US16_0(v181, v182, v183, v184, v185) -> (* Ok *)
                    US16_0(v181, v182, v183, v184, v185)
            match v190 with
            | US16_1(v211) -> (* Error *)
                let v212 : string = "between / expected content"
                US16_1(v212)
            | US16_0(v191, v192, v193, v194, v195) -> (* Ok *)
                let v196 : UH1 = UH1_0
                let v197 : UH1 = UH1_1(v25, v196)
                let v198 : UH1 = UH1_1(v24, v197)
                let v199 : US15 = method64(v192, v193, v194, v195, v198)
                match v199 with
                | US15_1(v206) -> (* Error *)
                    let v207 : string = $"between / expected closing delimiter / e: %A{v206} / input: %A{struct (v15, v23, 1, 1)} / rest1: %A{struct (v31, v32, v33, v34)} / rest2: %A{struct (v192, v193, v194, v195)}"
                    US16_1(v207)
                | US15_0(v200, v201, v202, v203, v204) -> (* Ok *)
                    US16_0(v191, v201, v202, v203, v204)
    let v435 : US16 =
        match v219 with
        | US16_1(v225) -> (* Error *)
            let v226 : bool = "" = v15
            let v359 : US15 =
                if v226 then
                    let v227 : char list = []
                    let v230 : char list = ' ' :: v227 
                    let v239 : char list = ''' :: v230 
                    let v248 : char list = '"' :: v239 
                    let v257 : (char list -> (char [])) = List.toArray
                    let v258 : (char []) = v257 v248
                    let v265 : string = $"parsing.none_of / unexpected end of input / chars: %A{v258} / s: %A{struct (v23, 1, 1)}"
                    US15_1(v265)
                else
                    let v267 : char = v15.[int 0]
                    let v268 : (string -> int32) = String.length
                    let v269 : int32 = v268 v15
                    let v270 : (int32 -> int32) = int32
                    let v271 : int32 = v270 1
                    let v272 : (int32 -> int32) = int32
                    let v273 : int32 = v272 v269
                    let v274 : string = v15.[int v271..int v273]
                    let v275 : int64 = 0L
                    let v276 : bool = method65(v267, v275)
                    let v277 : bool = v276 = false
                    if v277 then
                        let v280 : (char -> string) = _.ToString()
                        let v281 : string = v280 v267
                        let v288 : int32 = v281.Length
                        let v289 : (char []) = Array.zeroCreate<char> (v288)
                        let v290 : Mut5 = {l0 = 0} : Mut5
                        while method58(v288, v290) do
                            let v292 : int32 = v290.l0
                            let v293 : char = v281.[int v292]
                            v289.[int v292] <- v293
                            let v294 : int32 = v292 + 1
                            v290.l0 <- v294
                            ()
                        let v295 : char list = v289 |> Array.toList
                        let v298 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v299 : (char -> (UH0 -> UH0)) = method59()
                        let v300 : (char list -> (UH0 -> UH0)) = v298 v299
                        let v301 : (UH0 -> UH0) = v300 v295
                        let v302 : UH0 = UH0_0
                        let v303 : UH0 = v301 v302
                        let v312 : int32 = 1
                        let v313 : int32 = 1
                        let struct (v314 : System.Text.StringBuilder, v315 : int32, v316 : int32) = method60(v303, v23, v312, v313)
                        US15_0(v267, v274, v314, v315, v316)
                    else
                        let v318 : char list = []
                        let v321 : char list = ' ' :: v318 
                        let v330 : char list = ''' :: v321 
                        let v339 : char list = '"' :: v330 
                        let v348 : (char list -> (char [])) = List.toArray
                        let v349 : (char []) = v348 v339
                        let v356 : string = $"parsing.none_of / unexpected char: '{v267}' / chars: %A{v349} / s: %A{struct (v23, 1, 1)}"
                        US15_1(v356)
            let v371 : US15 =
                match v359 with
                | US15_1(v368) -> (* Error *)
                    US15_1(v368)
                | US15_0(v360, v361, v362, v363, v364) -> (* Ok *)
                    let v365 : bool = '\\' = v360
                    let v366 : char =
                        if v365 then
                            '/'
                        else
                            v360
                    US15_0(v366, v361, v362, v363, v364)
            let v391 : US16 =
                match v371 with
                | US15_1(v372) -> (* Error *)
                    US16_1(v372)
                | US15_0(v374, v375, v376, v377, v378) -> (* Ok *)
                    let v381 : (char -> string) = _.ToString()
                    let v382 : string = v381 v374
                    method66(v382, v375, v376, v377, v378)
            match v391 with
            | US16_1(v397) -> (* Error *)
                let v398 : int32 = v15.Length
                let v399 : bool = v398 = 0
                let v403 : US18 =
                    if v399 then
                        US18_0(v15, v23, 1, 1)
                    else
                        let v401 : string = $"parsing.eof / expected end of input / input: %A{v15}"
                        US18_1(v401)
                let v412 : US16 =
                    match v403 with
                    | US18_1(v409) -> (* Error *)
                        US16_1(v409)
                    | US18_0(v404, v405, v406, v407) -> (* Ok *)
                        US16_0(v14, v404, v405, v406, v407)
                match v412 with
                | US16_1(v428) -> (* Error *)
                    US16_1(v428)
                | US16_0(v413, v414, v415, v416, v417) -> (* Ok *)
                    let v418 : int32 = 0
                    let v419 : int32 = method67(v414, v418)
                    let v420 : (string -> int32) = String.length
                    let v421 : int32 = v420 v414
                    let v422 : (int32 -> int32) = int32
                    let v423 : int32 = v422 v419
                    let v424 : (int32 -> int32) = int32
                    let v425 : int32 = v424 v421
                    let v426 : string = v414.[int v423..int v425]
                    US16_0(v413, v426, v415, v416, v417)
            | US16_0(v392, v393, v394, v395, v396) -> (* Ok *)
                v391
        | US16_0(v220, v221, v222, v223, v224) -> (* Ok *)
            v219
    let v639 : US19 =
        match v435 with
        | US16_1(v636) -> (* Error *)
            US19_1(v636)
        | US16_0(v436, v437, v438, v439, v440) -> (* Ok *)
            let v441 : bool = "" = v437
            let v522 : US15 =
                if v441 then
                    let v442 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v438, v439, v440)}"
                    US15_1(v442)
                else
                    let v444 : char = v437.[int 0]
                    let v445 : bool = v444 = ' '
                    if v445 then
                        let v446 : (string -> int32) = String.length
                        let v447 : int32 = v446 v437
                        let v448 : (int32 -> int32) = int32
                        let v449 : int32 = v448 1
                        let v450 : (int32 -> int32) = int32
                        let v451 : int32 = v450 v447
                        let v452 : string = v437.[int v449..int v451]
                        let v455 : (char -> string) = _.ToString()
                        let v456 : string = v455 v444
                        let v463 : int32 = v456.Length
                        let v464 : (char []) = Array.zeroCreate<char> (v463)
                        let v465 : Mut5 = {l0 = 0} : Mut5
                        while method58(v463, v465) do
                            let v467 : int32 = v465.l0
                            let v468 : char = v456.[int v467]
                            v464.[int v467] <- v468
                            let v469 : int32 = v467 + 1
                            v465.l0 <- v469
                            ()
                        let v470 : char list = v464 |> Array.toList
                        let v473 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v474 : (char -> (UH0 -> UH0)) = method59()
                        let v475 : (char list -> (UH0 -> UH0)) = v473 v474
                        let v476 : (UH0 -> UH0) = v475 v470
                        let v477 : UH0 = UH0_0
                        let v478 : UH0 = v476 v477
                        let struct (v487 : System.Text.StringBuilder, v488 : int32, v489 : int32) = method60(v478, v438, v439, v440)
                        US15_0(v444, v452, v487, v488, v489)
                    else
                        let v491 : (string -> int32) = String.length
                        let v492 : int32 = v491 v437
                        let v493 : string = "\n"
                        let v494 : int32 = v437.IndexOf v493 
                        let v495 : int32 = v494 - 1
                        let v496 : bool = -2 = v495
                        let v497 : int32 =
                            if v496 then
                                v492
                            else
                                v495
                        let v498 : (int32 -> int32) = int32
                        let v499 : int32 = v498 0
                        let v500 : (int32 -> int32) = int32
                        let v501 : int32 = v500 v497
                        let v502 : string = v437.[int v499..int v501]
                        let v503 : string = $"parsing.p_char / expected: '{' '}' / line: {v439} / col: {v440}
{v438}{v502}"
                        let v504 : int32 = v440 - 1
                        let v507 : (int32 -> (string -> string)) = String.replicate
                        let v508 : (string -> string) = v507 v504
                        let v509 : string = " "
                        let v510 : string = v508 v509
                        let v517 : string = "^"
                        let v518 : string = v510 + v517 
                        let v519 : string = $"{v503}
{v518}
"
                        US15_1(v519)
            let v534 : US20 =
                match v522 with
                | US15_1(v530) -> (* Error *)
                    let v531 : US17 = US17_1
                    US20_0(v531, v437, v438, v439, v440)
                | US15_0(v523, v524, v525, v526, v527) -> (* Ok *)
                    let v528 : US17 = US17_0(v523)
                    US20_0(v528, v524, v525, v526, v527)
            let v613 : US16 =
                match v534 with
                | US20_1(v610) -> (* Error *)
                    US16_1(v610)
                | US20_0(v535, v536, v537, v538, v539) -> (* Ok *)
                    let v540 : bool = "" = v536
                    let v589 : US15 =
                        if v540 then
                            let v541 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v537, v538, v539)}"
                            US15_1(v541)
                        else
                            let v543 : char = v536.[int 0]
                            let v544 : (string -> int32) = String.length
                            let v545 : int32 = v544 v536
                            let v546 : (int32 -> int32) = int32
                            let v547 : int32 = v546 1
                            let v548 : (int32 -> int32) = int32
                            let v549 : int32 = v548 v545
                            let v550 : string = v536.[int v547..int v549]
                            let v553 : (char -> string) = _.ToString()
                            let v554 : string = v553 v543
                            let v561 : int32 = v554.Length
                            let v562 : (char []) = Array.zeroCreate<char> (v561)
                            let v563 : Mut5 = {l0 = 0} : Mut5
                            while method58(v561, v563) do
                                let v565 : int32 = v563.l0
                                let v566 : char = v554.[int v565]
                                v562.[int v565] <- v566
                                let v567 : int32 = v565 + 1
                                v563.l0 <- v567
                                ()
                            let v568 : char list = v562 |> Array.toList
                            let v571 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                            let v572 : (char -> (UH0 -> UH0)) = method59()
                            let v573 : (char list -> (UH0 -> UH0)) = v571 v572
                            let v574 : (UH0 -> UH0) = v573 v568
                            let v575 : UH0 = UH0_0
                            let v576 : UH0 = v574 v575
                            let struct (v585 : System.Text.StringBuilder, v586 : int32, v587 : int32) = method60(v576, v537, v538, v539)
                            US15_0(v543, v550, v585, v586, v587)
                    match v589 with
                    | US15_1(v590) -> (* Error *)
                        US16_1(v590)
                    | US15_0(v592, v593, v594, v595, v596) -> (* Ok *)
                        let v599 : (char -> string) = _.ToString()
                        let v600 : string = v599 v592
                        method68(v600, v593, v594, v595, v596)
            let v625 : US21 =
                match v613 with
                | US16_1(v621) -> (* Error *)
                    let v622 : US3 = US3_1
                    US21_0(v622, v437, v438, v439, v440)
                | US16_0(v614, v615, v616, v617, v618) -> (* Ok *)
                    let v619 : US3 = US3_0(v614)
                    US21_0(v619, v615, v616, v617, v618)
            match v625 with
            | US21_1(v632) -> (* Error *)
                US19_1(v632)
            | US21_0(v626, v627, v628, v629, v630) -> (* Ok *)
                US19_0(v436, v626, v627, v628, v629, v630)
    match v639 with
    | US19_1(v647) -> (* Error *)
        US14_1(v647)
    | US19_0(v640, v641, v642, v643, v644, v645) -> (* Ok *)
        US14_0(v640, v641)
and method71 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 4L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v19 : US17 =
            if v3 then
                US17_0('\\')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US17_0('`')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US17_0('"')
                    else
                        let v11 : int64 = v8 - 1L
                        let v12 : bool = v11 = 0L
                        if v12 then
                            US17_0(' ')
                        else
                            let v14 : int64 = v11 - 1L
                            US17_1
        let v23 : char =
            match v19 with
            | US17_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US17_0(v20) -> (* Some *)
                v20
        let v24 : bool = v0 = v23
        if v24 then
            true
        else
            let v25 : int64 = v1 + 1L
            method71(v0, v25)
and method72 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US16 =
    let v5 : bool = "" = v1
    let v154 : US15 =
        if v5 then
            let v6 : char list = []
            let v9 : char list = ' ' :: v6 
            let v18 : char list = '"' :: v9 
            let v27 : char list = '`' :: v18 
            let v36 : char list = '\\' :: v27 
            let v45 : (char list -> (char [])) = List.toArray
            let v46 : (char []) = v45 v36
            let v53 : string = $"parsing.none_of / unexpected end of input / chars: %A{v46} / s: %A{struct (v2, v3, v4)}"
            US15_1(v53)
        else
            let v55 : char = v1.[int 0]
            let v56 : (string -> int32) = String.length
            let v57 : int32 = v56 v1
            let v58 : (int32 -> int32) = int32
            let v59 : int32 = v58 1
            let v60 : (int32 -> int32) = int32
            let v61 : int32 = v60 v57
            let v62 : string = v1.[int v59..int v61]
            let v63 : int64 = 0L
            let v64 : bool = method71(v55, v63)
            let v65 : bool = v64 = false
            if v65 then
                let v68 : (char -> string) = _.ToString()
                let v69 : string = v68 v55
                let v76 : int32 = v69.Length
                let v77 : (char []) = Array.zeroCreate<char> (v76)
                let v78 : Mut5 = {l0 = 0} : Mut5
                while method58(v76, v78) do
                    let v80 : int32 = v78.l0
                    let v81 : char = v69.[int v80]
                    v77.[int v80] <- v81
                    let v82 : int32 = v80 + 1
                    v78.l0 <- v82
                    ()
                let v83 : char list = v77 |> Array.toList
                let v86 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v87 : (char -> (UH0 -> UH0)) = method59()
                let v88 : (char list -> (UH0 -> UH0)) = v86 v87
                let v89 : (UH0 -> UH0) = v88 v83
                let v90 : UH0 = UH0_0
                let v91 : UH0 = v89 v90
                let struct (v100 : System.Text.StringBuilder, v101 : int32, v102 : int32) = method60(v91, v2, v3, v4)
                US15_0(v55, v62, v100, v101, v102)
            else
                let v104 : char list = []
                let v107 : char list = ' ' :: v104 
                let v116 : char list = '"' :: v107 
                let v125 : char list = '`' :: v116 
                let v134 : char list = '\\' :: v125 
                let v143 : (char list -> (char [])) = List.toArray
                let v144 : (char []) = v143 v134
                let v151 : string = $"parsing.none_of / unexpected char: '{v55}' / chars: %A{v144} / s: %A{struct (v2, v3, v4)}"
                US15_1(v151)
    match v154 with
    | US15_1(v172) -> (* Error *)
        US16_0(v0, v1, v2, v3, v4)
    | US15_0(v155, v156, v157, v158, v159) -> (* Ok *)
        let v162 : (char -> string) = _.ToString()
        let v163 : string = v162 v155
        let v170 : string = v0 + v163 
        method72(v170, v156, v157, v158, v159)
and method74 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 3L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v15 : US17 =
            if v3 then
                US17_0('\\')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US17_0('`')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US17_0('"')
                    else
                        let v11 : int64 = v8 - 1L
                        US17_1
        let v19 : char =
            match v15 with
            | US17_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US17_0(v16) -> (* Some *)
                v16
        let v20 : bool = v0 = v19
        if v20 then
            true
        else
            let v21 : int64 = v1 + 1L
            method74(v0, v21)
and closure33 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US16 =
    let v4 : bool = "" = v0
    let v85 : US15 =
        if v4 then
            let v5 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v1, v2, v3)}"
            US15_1(v5)
        else
            let v7 : char = v0.[int 0]
            let v8 : bool = v7 = '\\'
            if v8 then
                let v9 : (string -> int32) = String.length
                let v10 : int32 = v9 v0
                let v11 : (int32 -> int32) = int32
                let v12 : int32 = v11 1
                let v13 : (int32 -> int32) = int32
                let v14 : int32 = v13 v10
                let v15 : string = v0.[int v12..int v14]
                let v18 : (char -> string) = _.ToString()
                let v19 : string = v18 v7
                let v26 : int32 = v19.Length
                let v27 : (char []) = Array.zeroCreate<char> (v26)
                let v28 : Mut5 = {l0 = 0} : Mut5
                while method58(v26, v28) do
                    let v30 : int32 = v28.l0
                    let v31 : char = v19.[int v30]
                    v27.[int v30] <- v31
                    let v32 : int32 = v30 + 1
                    v28.l0 <- v32
                    ()
                let v33 : char list = v27 |> Array.toList
                let v36 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v37 : (char -> (UH0 -> UH0)) = method59()
                let v38 : (char list -> (UH0 -> UH0)) = v36 v37
                let v39 : (UH0 -> UH0) = v38 v33
                let v40 : UH0 = UH0_0
                let v41 : UH0 = v39 v40
                let struct (v50 : System.Text.StringBuilder, v51 : int32, v52 : int32) = method60(v41, v1, v2, v3)
                US15_0(v7, v15, v50, v51, v52)
            else
                let v54 : (string -> int32) = String.length
                let v55 : int32 = v54 v0
                let v56 : string = "\n"
                let v57 : int32 = v0.IndexOf v56 
                let v58 : int32 = v57 - 1
                let v59 : bool = -2 = v58
                let v60 : int32 =
                    if v59 then
                        v55
                    else
                        v58
                let v61 : (int32 -> int32) = int32
                let v62 : int32 = v61 0
                let v63 : (int32 -> int32) = int32
                let v64 : int32 = v63 v60
                let v65 : string = v0.[int v62..int v64]
                let v66 : string = $"parsing.p_char / expected: '{'\\'}' / line: {v2} / col: {v3}
{v1}{v65}"
                let v67 : int32 = v3 - 1
                let v70 : (int32 -> (string -> string)) = String.replicate
                let v71 : (string -> string) = v70 v67
                let v72 : string = " "
                let v73 : string = v71 v72
                let v80 : string = "^"
                let v81 : string = v73 + v80 
                let v82 : string = $"{v66}
{v81}
"
                US15_1(v82)
    let v144 : US15 =
        match v85 with
        | US15_1(v141) -> (* Error *)
            US15_1(v141)
        | US15_0(v86, v87, v88, v89, v90) -> (* Ok *)
            let v91 : bool = "" = v87
            if v91 then
                let v92 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v88, v89, v90)}"
                US15_1(v92)
            else
                let v94 : char = v87.[int 0]
                let v95 : (string -> int32) = String.length
                let v96 : int32 = v95 v87
                let v97 : (int32 -> int32) = int32
                let v98 : int32 = v97 1
                let v99 : (int32 -> int32) = int32
                let v100 : int32 = v99 v96
                let v101 : string = v87.[int v98..int v100]
                let v104 : (char -> string) = _.ToString()
                let v105 : string = v104 v94
                let v112 : int32 = v105.Length
                let v113 : (char []) = Array.zeroCreate<char> (v112)
                let v114 : Mut5 = {l0 = 0} : Mut5
                while method58(v112, v114) do
                    let v116 : int32 = v114.l0
                    let v117 : char = v105.[int v116]
                    v113.[int v116] <- v117
                    let v118 : int32 = v116 + 1
                    v114.l0 <- v118
                    ()
                let v119 : char list = v113 |> Array.toList
                let v122 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v123 : (char -> (UH0 -> UH0)) = method59()
                let v124 : (char list -> (UH0 -> UH0)) = v122 v123
                let v125 : (UH0 -> UH0) = v124 v119
                let v126 : UH0 = UH0_0
                let v127 : UH0 = v125 v126
                let struct (v136 : System.Text.StringBuilder, v137 : int32, v138 : int32) = method60(v127, v88, v89, v90)
                US15_0(v94, v101, v136, v137, v138)
    match v144 with
    | US15_1(v152) -> (* Error *)
        US16_1(v152)
    | US15_0(v145, v146, v147, v148, v149) -> (* Ok *)
        let v150 : string = $"{'\\'}{v145}"
        US16_0(v150, v146, v147, v148, v149)
and closure34 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US16 =
    let v4 : bool = "" = v0
    let v85 : US15 =
        if v4 then
            let v5 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v1, v2, v3)}"
            US15_1(v5)
        else
            let v7 : char = v0.[int 0]
            let v8 : bool = v7 = '`'
            if v8 then
                let v9 : (string -> int32) = String.length
                let v10 : int32 = v9 v0
                let v11 : (int32 -> int32) = int32
                let v12 : int32 = v11 1
                let v13 : (int32 -> int32) = int32
                let v14 : int32 = v13 v10
                let v15 : string = v0.[int v12..int v14]
                let v18 : (char -> string) = _.ToString()
                let v19 : string = v18 v7
                let v26 : int32 = v19.Length
                let v27 : (char []) = Array.zeroCreate<char> (v26)
                let v28 : Mut5 = {l0 = 0} : Mut5
                while method58(v26, v28) do
                    let v30 : int32 = v28.l0
                    let v31 : char = v19.[int v30]
                    v27.[int v30] <- v31
                    let v32 : int32 = v30 + 1
                    v28.l0 <- v32
                    ()
                let v33 : char list = v27 |> Array.toList
                let v36 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v37 : (char -> (UH0 -> UH0)) = method59()
                let v38 : (char list -> (UH0 -> UH0)) = v36 v37
                let v39 : (UH0 -> UH0) = v38 v33
                let v40 : UH0 = UH0_0
                let v41 : UH0 = v39 v40
                let struct (v50 : System.Text.StringBuilder, v51 : int32, v52 : int32) = method60(v41, v1, v2, v3)
                US15_0(v7, v15, v50, v51, v52)
            else
                let v54 : (string -> int32) = String.length
                let v55 : int32 = v54 v0
                let v56 : string = "\n"
                let v57 : int32 = v0.IndexOf v56 
                let v58 : int32 = v57 - 1
                let v59 : bool = -2 = v58
                let v60 : int32 =
                    if v59 then
                        v55
                    else
                        v58
                let v61 : (int32 -> int32) = int32
                let v62 : int32 = v61 0
                let v63 : (int32 -> int32) = int32
                let v64 : int32 = v63 v60
                let v65 : string = v0.[int v62..int v64]
                let v66 : string = $"parsing.p_char / expected: '{'`'}' / line: {v2} / col: {v3}
{v1}{v65}"
                let v67 : int32 = v3 - 1
                let v70 : (int32 -> (string -> string)) = String.replicate
                let v71 : (string -> string) = v70 v67
                let v72 : string = " "
                let v73 : string = v71 v72
                let v80 : string = "^"
                let v81 : string = v73 + v80 
                let v82 : string = $"{v66}
{v81}
"
                US15_1(v82)
    let v144 : US15 =
        match v85 with
        | US15_1(v141) -> (* Error *)
            US15_1(v141)
        | US15_0(v86, v87, v88, v89, v90) -> (* Ok *)
            let v91 : bool = "" = v87
            if v91 then
                let v92 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v88, v89, v90)}"
                US15_1(v92)
            else
                let v94 : char = v87.[int 0]
                let v95 : (string -> int32) = String.length
                let v96 : int32 = v95 v87
                let v97 : (int32 -> int32) = int32
                let v98 : int32 = v97 1
                let v99 : (int32 -> int32) = int32
                let v100 : int32 = v99 v96
                let v101 : string = v87.[int v98..int v100]
                let v104 : (char -> string) = _.ToString()
                let v105 : string = v104 v94
                let v112 : int32 = v105.Length
                let v113 : (char []) = Array.zeroCreate<char> (v112)
                let v114 : Mut5 = {l0 = 0} : Mut5
                while method58(v112, v114) do
                    let v116 : int32 = v114.l0
                    let v117 : char = v105.[int v116]
                    v113.[int v116] <- v117
                    let v118 : int32 = v116 + 1
                    v114.l0 <- v118
                    ()
                let v119 : char list = v113 |> Array.toList
                let v122 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v123 : (char -> (UH0 -> UH0)) = method59()
                let v124 : (char list -> (UH0 -> UH0)) = v122 v123
                let v125 : (UH0 -> UH0) = v124 v119
                let v126 : UH0 = UH0_0
                let v127 : UH0 = v125 v126
                let struct (v136 : System.Text.StringBuilder, v137 : int32, v138 : int32) = method60(v127, v88, v89, v90)
                US15_0(v94, v101, v136, v137, v138)
    match v144 with
    | US15_1(v152) -> (* Error *)
        US16_1(v152)
    | US15_0(v145, v146, v147, v148, v149) -> (* Ok *)
        let v150 : string = $"{'`'}{v145}"
        US16_0(v150, v146, v147, v148, v149)
and method75 (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32, v4 : UH3) : US16 =
    match v4 with
    | UH3_1(v7, v8) -> (* Cons *)
        let v9 : US16 = v7 struct (v0, v1, v2, v3)
        match v9 with
        | US16_1(v15) -> (* Error *)
            method75(v0, v1, v2, v3, v8)
        | US16_0(v10, v11, v12, v13, v14) -> (* Ok *)
            v9
    | UH3_0 -> (* Nil *)
        let v5 : string = "choice / no parsers succeeded"
        US16_1(v5)
and method76 (v0 : UH2, v1 : UH2) : UH2 =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : UH2 = UH2_1(v2, v1)
        method76(v3, v4)
    | UH2_0 -> (* Nil *)
        v1
and method73 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US23 =
    let v5 : bool = "" = v1
    let v136 : US15 =
        if v5 then
            let v6 : char list = []
            let v9 : char list = '"' :: v6 
            let v18 : char list = '`' :: v9 
            let v27 : char list = '\\' :: v18 
            let v36 : (char list -> (char [])) = List.toArray
            let v37 : (char []) = v36 v27
            let v44 : string = $"parsing.none_of / unexpected end of input / chars: %A{v37} / s: %A{struct (v2, v3, v4)}"
            US15_1(v44)
        else
            let v46 : char = v1.[int 0]
            let v47 : (string -> int32) = String.length
            let v48 : int32 = v47 v1
            let v49 : (int32 -> int32) = int32
            let v50 : int32 = v49 1
            let v51 : (int32 -> int32) = int32
            let v52 : int32 = v51 v48
            let v53 : string = v1.[int v50..int v52]
            let v54 : int64 = 0L
            let v55 : bool = method74(v46, v54)
            let v56 : bool = v55 = false
            if v56 then
                let v59 : (char -> string) = _.ToString()
                let v60 : string = v59 v46
                let v67 : int32 = v60.Length
                let v68 : (char []) = Array.zeroCreate<char> (v67)
                let v69 : Mut5 = {l0 = 0} : Mut5
                while method58(v67, v69) do
                    let v71 : int32 = v69.l0
                    let v72 : char = v60.[int v71]
                    v68.[int v71] <- v72
                    let v73 : int32 = v71 + 1
                    v69.l0 <- v73
                    ()
                let v74 : char list = v68 |> Array.toList
                let v77 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v78 : (char -> (UH0 -> UH0)) = method59()
                let v79 : (char list -> (UH0 -> UH0)) = v77 v78
                let v80 : (UH0 -> UH0) = v79 v74
                let v81 : UH0 = UH0_0
                let v82 : UH0 = v80 v81
                let struct (v91 : System.Text.StringBuilder, v92 : int32, v93 : int32) = method60(v82, v2, v3, v4)
                US15_0(v46, v53, v91, v92, v93)
            else
                let v95 : char list = []
                let v98 : char list = '"' :: v95 
                let v107 : char list = '`' :: v98 
                let v116 : char list = '\\' :: v107 
                let v125 : (char list -> (char [])) = List.toArray
                let v126 : (char []) = v125 v116
                let v133 : string = $"parsing.none_of / unexpected char: '{v46}' / chars: %A{v126} / s: %A{struct (v2, v3, v4)}"
                US15_1(v133)
    let v156 : US16 =
        match v136 with
        | US15_1(v153) -> (* Error *)
            US16_1(v153)
        | US15_0(v137, v138, v139, v140, v141) -> (* Ok *)
            let v144 : (char -> string) = _.ToString()
            let v145 : string = v144 v137
            US16_0(v145, v138, v139, v140, v141)
    let v170 : US16 =
        match v156 with
        | US16_1(v162) -> (* Error *)
            let v163 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) = closure33()
            let v164 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) = closure34()
            let v165 : UH3 = UH3_0
            let v166 : UH3 = UH3_1(v164, v165)
            let v167 : UH3 = UH3_1(v163, v166)
            method75(v1, v2, v3, v4, v167)
        | US16_0(v157, v158, v159, v160, v161) -> (* Ok *)
            v156
    match v170 with
    | US16_1(v178) -> (* Error *)
        let v179 : UH2 = UH2_0
        let v180 : UH2 = method76(v0, v179)
        US23_0(v180, v1, v2, v3, v4)
    | US16_0(v171, v172, v173, v174, v175) -> (* Ok *)
        let v176 : UH2 = UH2_1(v171, v0)
        method73(v176, v172, v173, v174, v175)
and method77 (v0 : UH2, v1 : string list) : string list =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : string list = method77(v3, v1)
        let v7 : string list = v2 :: v4 
        v7
    | UH2_0 -> (* Nil *)
        v1
and method78 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US23 =
    let v5 : bool = "" = v1
    let v136 : US15 =
        if v5 then
            let v6 : char list = []
            let v9 : char list = '"' :: v6 
            let v18 : char list = '`' :: v9 
            let v27 : char list = '\\' :: v18 
            let v36 : (char list -> (char [])) = List.toArray
            let v37 : (char []) = v36 v27
            let v44 : string = $"parsing.none_of / unexpected end of input / chars: %A{v37} / s: %A{struct (v2, v3, v4)}"
            US15_1(v44)
        else
            let v46 : char = v1.[int 0]
            let v47 : (string -> int32) = String.length
            let v48 : int32 = v47 v1
            let v49 : (int32 -> int32) = int32
            let v50 : int32 = v49 1
            let v51 : (int32 -> int32) = int32
            let v52 : int32 = v51 v48
            let v53 : string = v1.[int v50..int v52]
            let v54 : int64 = 0L
            let v55 : bool = method74(v46, v54)
            let v56 : bool = v55 = false
            if v56 then
                let v59 : (char -> string) = _.ToString()
                let v60 : string = v59 v46
                let v67 : int32 = v60.Length
                let v68 : (char []) = Array.zeroCreate<char> (v67)
                let v69 : Mut5 = {l0 = 0} : Mut5
                while method58(v67, v69) do
                    let v71 : int32 = v69.l0
                    let v72 : char = v60.[int v71]
                    v68.[int v71] <- v72
                    let v73 : int32 = v71 + 1
                    v69.l0 <- v73
                    ()
                let v74 : char list = v68 |> Array.toList
                let v77 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v78 : (char -> (UH0 -> UH0)) = method59()
                let v79 : (char list -> (UH0 -> UH0)) = v77 v78
                let v80 : (UH0 -> UH0) = v79 v74
                let v81 : UH0 = UH0_0
                let v82 : UH0 = v80 v81
                let struct (v91 : System.Text.StringBuilder, v92 : int32, v93 : int32) = method60(v82, v2, v3, v4)
                US15_0(v46, v53, v91, v92, v93)
            else
                let v95 : char list = []
                let v98 : char list = '"' :: v95 
                let v107 : char list = '`' :: v98 
                let v116 : char list = '\\' :: v107 
                let v125 : (char list -> (char [])) = List.toArray
                let v126 : (char []) = v125 v116
                let v133 : string = $"parsing.none_of / unexpected char: '{v46}' / chars: %A{v126} / s: %A{struct (v2, v3, v4)}"
                US15_1(v133)
    let v156 : US16 =
        match v136 with
        | US15_1(v153) -> (* Error *)
            US16_1(v153)
        | US15_0(v137, v138, v139, v140, v141) -> (* Ok *)
            let v144 : (char -> string) = _.ToString()
            let v145 : string = v144 v137
            US16_0(v145, v138, v139, v140, v141)
    match v156 with
    | US16_1(v164) -> (* Error *)
        let v165 : UH2 = UH2_0
        let v166 : UH2 = method76(v0, v165)
        US23_0(v166, v1, v2, v3, v4)
    | US16_0(v157, v158, v159, v160, v161) -> (* Ok *)
        let v162 : UH2 = UH2_1(v157, v0)
        method78(v162, v158, v159, v160, v161)
and method79 (v0 : string, v1 : int32) : int32 =
    let v2 : int32 = v0.Length
    let v3 : bool = v1 >= v2
    if v3 then
        v1
    else
        let v4 : char = v0.[int v1]
        let v5 : bool = v4 = ' '
        if v5 then
            let v6 : int32 = v1 + 1
            method79(v0, v6)
        else
            v1
and method70 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US23 =
    let v5 : bool = "" = v1
    let v154 : US15 =
        if v5 then
            let v6 : char list = []
            let v9 : char list = ' ' :: v6 
            let v18 : char list = '"' :: v9 
            let v27 : char list = '`' :: v18 
            let v36 : char list = '\\' :: v27 
            let v45 : (char list -> (char [])) = List.toArray
            let v46 : (char []) = v45 v36
            let v53 : string = $"parsing.none_of / unexpected end of input / chars: %A{v46} / s: %A{struct (v2, v3, v4)}"
            US15_1(v53)
        else
            let v55 : char = v1.[int 0]
            let v56 : (string -> int32) = String.length
            let v57 : int32 = v56 v1
            let v58 : (int32 -> int32) = int32
            let v59 : int32 = v58 1
            let v60 : (int32 -> int32) = int32
            let v61 : int32 = v60 v57
            let v62 : string = v1.[int v59..int v61]
            let v63 : int64 = 0L
            let v64 : bool = method71(v55, v63)
            let v65 : bool = v64 = false
            if v65 then
                let v68 : (char -> string) = _.ToString()
                let v69 : string = v68 v55
                let v76 : int32 = v69.Length
                let v77 : (char []) = Array.zeroCreate<char> (v76)
                let v78 : Mut5 = {l0 = 0} : Mut5
                while method58(v76, v78) do
                    let v80 : int32 = v78.l0
                    let v81 : char = v69.[int v80]
                    v77.[int v80] <- v81
                    let v82 : int32 = v80 + 1
                    v78.l0 <- v82
                    ()
                let v83 : char list = v77 |> Array.toList
                let v86 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v87 : (char -> (UH0 -> UH0)) = method59()
                let v88 : (char list -> (UH0 -> UH0)) = v86 v87
                let v89 : (UH0 -> UH0) = v88 v83
                let v90 : UH0 = UH0_0
                let v91 : UH0 = v89 v90
                let struct (v100 : System.Text.StringBuilder, v101 : int32, v102 : int32) = method60(v91, v2, v3, v4)
                US15_0(v55, v62, v100, v101, v102)
            else
                let v104 : char list = []
                let v107 : char list = ' ' :: v104 
                let v116 : char list = '"' :: v107 
                let v125 : char list = '`' :: v116 
                let v134 : char list = '\\' :: v125 
                let v143 : (char list -> (char [])) = List.toArray
                let v144 : (char []) = v143 v134
                let v151 : string = $"parsing.none_of / unexpected char: '{v55}' / chars: %A{v144} / s: %A{struct (v2, v3, v4)}"
                US15_1(v151)
    let v174 : US16 =
        match v154 with
        | US15_1(v155) -> (* Error *)
            US16_1(v155)
        | US15_0(v157, v158, v159, v160, v161) -> (* Ok *)
            let v164 : (char -> string) = _.ToString()
            let v165 : string = v164 v157
            method72(v165, v158, v159, v160, v161)
    let v479 : US16 =
        match v174 with
        | US16_1(v180) -> (* Error *)
            let v261 : US15 =
                if v5 then
                    let v181 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v2, v3, v4)}"
                    US15_1(v181)
                else
                    let v183 : char = v1.[int 0]
                    let v184 : bool = v183 = '"'
                    if v184 then
                        let v185 : (string -> int32) = String.length
                        let v186 : int32 = v185 v1
                        let v187 : (int32 -> int32) = int32
                        let v188 : int32 = v187 1
                        let v189 : (int32 -> int32) = int32
                        let v190 : int32 = v189 v186
                        let v191 : string = v1.[int v188..int v190]
                        let v194 : (char -> string) = _.ToString()
                        let v195 : string = v194 v183
                        let v202 : int32 = v195.Length
                        let v203 : (char []) = Array.zeroCreate<char> (v202)
                        let v204 : Mut5 = {l0 = 0} : Mut5
                        while method58(v202, v204) do
                            let v206 : int32 = v204.l0
                            let v207 : char = v195.[int v206]
                            v203.[int v206] <- v207
                            let v208 : int32 = v206 + 1
                            v204.l0 <- v208
                            ()
                        let v209 : char list = v203 |> Array.toList
                        let v212 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v213 : (char -> (UH0 -> UH0)) = method59()
                        let v214 : (char list -> (UH0 -> UH0)) = v212 v213
                        let v215 : (UH0 -> UH0) = v214 v209
                        let v216 : UH0 = UH0_0
                        let v217 : UH0 = v215 v216
                        let struct (v226 : System.Text.StringBuilder, v227 : int32, v228 : int32) = method60(v217, v2, v3, v4)
                        US15_0(v183, v191, v226, v227, v228)
                    else
                        let v230 : (string -> int32) = String.length
                        let v231 : int32 = v230 v1
                        let v232 : string = "\n"
                        let v233 : int32 = v1.IndexOf v232 
                        let v234 : int32 = v233 - 1
                        let v235 : bool = -2 = v234
                        let v236 : int32 =
                            if v235 then
                                v231
                            else
                                v234
                        let v237 : (int32 -> int32) = int32
                        let v238 : int32 = v237 0
                        let v239 : (int32 -> int32) = int32
                        let v240 : int32 = v239 v236
                        let v241 : string = v1.[int v238..int v240]
                        let v242 : string = $"parsing.p_char / expected: '{'"'}' / line: {v3} / col: {v4}
{v2}{v241}"
                        let v243 : int32 = v4 - 1
                        let v246 : (int32 -> (string -> string)) = String.replicate
                        let v247 : (string -> string) = v246 v243
                        let v248 : string = " "
                        let v249 : string = v247 v248
                        let v256 : string = "^"
                        let v257 : string = v249 + v256 
                        let v258 : string = $"{v242}
{v257}
"
                        US15_1(v258)
            let v408 : US16 =
                match v261 with
                | US15_1(v405) -> (* Error *)
                    US16_1(v405)
                | US15_0(v262, v263, v264, v265, v266) -> (* Ok *)
                    let v267 : UH2 = UH2_0
                    let v268 : US23 = method73(v267, v263, v264, v265, v266)
                    let v301 : US16 =
                        match v268 with
                        | US23_1(v298) -> (* Error *)
                            US16_1(v298)
                        | US23_0(v269, v270, v271, v272, v273) -> (* Ok *)
                            let v274 : string list = []
                            let v275 : string list = method77(v269, v274)
                            let v278 : string seq = seq { for i = 0 to v275.Length - 1 do yield v275.[i] }
                            let v287 : (string -> (string seq -> string)) = String.concat
                            let v288 : string = ""
                            let v289 : (string seq -> string) = v287 v288
                            let v290 : string = v289 v278
                            US16_0(v290, v270, v271, v272, v273)
                    match v301 with
                    | US16_1(v400) -> (* Error *)
                        let v401 : string = "between / expected content"
                        US16_1(v401)
                    | US16_0(v302, v303, v304, v305, v306) -> (* Ok *)
                        let v307 : bool = "" = v303
                        let v388 : US15 =
                            if v307 then
                                let v308 : string = $"parsing.p_char / unexpected end of input / s: %A{struct (v304, v305, v306)}"
                                US15_1(v308)
                            else
                                let v310 : char = v303.[int 0]
                                let v311 : bool = v310 = '"'
                                if v311 then
                                    let v312 : (string -> int32) = String.length
                                    let v313 : int32 = v312 v303
                                    let v314 : (int32 -> int32) = int32
                                    let v315 : int32 = v314 1
                                    let v316 : (int32 -> int32) = int32
                                    let v317 : int32 = v316 v313
                                    let v318 : string = v303.[int v315..int v317]
                                    let v321 : (char -> string) = _.ToString()
                                    let v322 : string = v321 v310
                                    let v329 : int32 = v322.Length
                                    let v330 : (char []) = Array.zeroCreate<char> (v329)
                                    let v331 : Mut5 = {l0 = 0} : Mut5
                                    while method58(v329, v331) do
                                        let v333 : int32 = v331.l0
                                        let v334 : char = v322.[int v333]
                                        v330.[int v333] <- v334
                                        let v335 : int32 = v333 + 1
                                        v331.l0 <- v335
                                        ()
                                    let v336 : char list = v330 |> Array.toList
                                    let v339 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                                    let v340 : (char -> (UH0 -> UH0)) = method59()
                                    let v341 : (char list -> (UH0 -> UH0)) = v339 v340
                                    let v342 : (UH0 -> UH0) = v341 v336
                                    let v343 : UH0 = UH0_0
                                    let v344 : UH0 = v342 v343
                                    let struct (v353 : System.Text.StringBuilder, v354 : int32, v355 : int32) = method60(v344, v304, v305, v306)
                                    US15_0(v310, v318, v353, v354, v355)
                                else
                                    let v357 : (string -> int32) = String.length
                                    let v358 : int32 = v357 v303
                                    let v359 : string = "\n"
                                    let v360 : int32 = v303.IndexOf v359 
                                    let v361 : int32 = v360 - 1
                                    let v362 : bool = -2 = v361
                                    let v363 : int32 =
                                        if v362 then
                                            v358
                                        else
                                            v361
                                    let v364 : (int32 -> int32) = int32
                                    let v365 : int32 = v364 0
                                    let v366 : (int32 -> int32) = int32
                                    let v367 : int32 = v366 v363
                                    let v368 : string = v303.[int v365..int v367]
                                    let v369 : string = $"parsing.p_char / expected: '{'"'}' / line: {v305} / col: {v306}
{v304}{v368}"
                                    let v370 : int32 = v306 - 1
                                    let v373 : (int32 -> (string -> string)) = String.replicate
                                    let v374 : (string -> string) = v373 v370
                                    let v375 : string = " "
                                    let v376 : string = v374 v375
                                    let v383 : string = "^"
                                    let v384 : string = v376 + v383 
                                    let v385 : string = $"{v369}
{v384}
"
                                    US15_1(v385)
                        match v388 with
                        | US15_1(v395) -> (* Error *)
                            let v396 : string = $"between / expected closing delimiter / e: %A{v395} / input: %A{struct (v1, v2, v3, v4)} / rest1: %A{struct (v263, v264, v265, v266)} / rest2: %A{struct (v303, v304, v305, v306)}"
                            US16_1(v396)
                        | US15_0(v389, v390, v391, v392, v393) -> (* Ok *)
                            US16_0(v302, v390, v391, v392, v393)
            match v408 with
            | US16_1(v414) -> (* Error *)
                let v415 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) = closure33()
                let v416 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) = closure34()
                let v417 : UH3 = UH3_0
                let v418 : UH3 = UH3_1(v416, v417)
                let v419 : UH3 = UH3_1(v415, v418)
                let v420 : US16 = method75(v1, v2, v3, v4, v419)
                let v431 : US16 =
                    match v420 with
                    | US16_1(v428) -> (* Error *)
                        US16_1(v428)
                    | US16_0(v421, v422, v423, v424, v425) -> (* Ok *)
                        let v426 : string = ""
                        US16_0(v426, v422, v423, v424, v425)
                let v442 : US23 =
                    match v431 with
                    | US16_1(v439) -> (* Error *)
                        US23_1(v439)
                    | US16_0(v432, v433, v434, v435, v436) -> (* Ok *)
                        let v437 : UH2 = UH2_0
                        method78(v437, v433, v434, v435, v436)
                match v442 with
                | US23_1(v472) -> (* Error *)
                    US16_1(v472)
                | US23_0(v443, v444, v445, v446, v447) -> (* Ok *)
                    let v448 : string list = []
                    let v449 : string list = method77(v443, v448)
                    let v452 : string seq = seq { for i = 0 to v449.Length - 1 do yield v449.[i] }
                    let v461 : (string -> (string seq -> string)) = String.concat
                    let v462 : string = ""
                    let v463 : (string seq -> string) = v461 v462
                    let v464 : string = v463 v452
                    US16_0(v464, v444, v445, v446, v447)
            | US16_0(v409, v410, v411, v412, v413) -> (* Ok *)
                v408
        | US16_0(v175, v176, v177, v178, v179) -> (* Ok *)
            v174
    match v479 with
    | US16_1(v480) -> (* Error *)
        let v481 : UH2 = UH2_0
        let v482 : UH2 = method76(v0, v481)
        US23_0(v482, v1, v2, v3, v4)
    | US16_0(v484, v485, v486, v487, v488) -> (* Ok *)
        let v489 : int32 = 0
        let v490 : int32 = method79(v485, v489)
        let v491 : bool = 0 = v490
        let v502 : US18 =
            if v491 then
                let v492 : string = "spaces1 / expected at least one space"
                US18_1(v492)
            else
                let v494 : (string -> int32) = String.length
                let v495 : int32 = v494 v485
                let v496 : (int32 -> int32) = int32
                let v497 : int32 = v496 v490
                let v498 : (int32 -> int32) = int32
                let v499 : int32 = v498 v495
                let v500 : string = v485.[int v497..int v499]
                US18_0(v500, v486, v487, v488)
        match v502 with
        | US18_1(v503) -> (* Error *)
            let v504 : UH2 = UH2_0
            let v505 : UH2 = UH2_1(v484, v504)
            let v506 : UH2 = method76(v0, v505)
            US23_0(v506, v485, v486, v487, v488)
        | US18_0(v508, v509, v510, v511) -> (* Ok *)
            let v512 : UH2 = UH2_1(v484, v0)
            method70(v512, v508, v509, v510, v511)
and method69 (v0 : string) : US22 =
    let mutable _v0 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v3 : (string -> string option) = Option.ofObj
    let v4 : string option = v3 v0
    v4 
    #else
    Some v0 
    #endif
    |> fun x -> _v0 <- Some x
    let v5 : string option = match _v0 with Some x -> x | None -> failwith "optionm'.of_obj / _v0=None"
    let v14 : string = ""
    let v15 : string = v5 |> Option.defaultValue v14 
    let v22 : (string -> System.Text.StringBuilder) = System.Text.StringBuilder 
    let v23 : System.Text.StringBuilder = v22 v14
    let v24 : UH2 = UH2_0
    let v25 : int32 = 1
    let v26 : int32 = 1
    let v27 : US23 = method70(v24, v15, v23, v25, v26)
    match v27 with
    | US23_1(v46) -> (* Error *)
        US22_1(v46)
    | US23_0(v28, v29, v30, v31, v32) -> (* Ok *)
        let v33 : string list = []
        let v34 : string list = method77(v28, v33)
        let v37 : (string list -> (string [])) = List.toArray
        let v38 : (string []) = v37 v34
        US22_0(v38)
and closure35 () () : string =
    let v0 : string = $"runtime.execute_with_options"
    v0
and closure36 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : string, v8 : Vec<std_string_String>) () : struct (string * Vec<std_string_String> * string * System.Threading.CancellationToken option * (struct (string * string) []) * (struct (int32 * string * bool) -> Async<unit>) option * (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option * bool * string option) =
    struct (v7, v8, v0, v1, v2, v3, v4, v5, v6)
and method82 (v0 : Mut4, v1 : Vec<std_string_String>) : unit =
    let v4 : string = $"%A{v1}"
    method10(v0, v4)
and method84 (v0 : Mut4, v1 : System.Threading.CancellationToken option) : unit =
    let v4 : string = $"%A{v1}"
    method10(v0, v4)
and method85 (v0 : Mut4, v1 : (struct (string * string) [])) : unit =
    let v4 : string = $"%A{v1}"
    method10(v0, v4)
and method86 (v0 : Mut4, v1 : (struct (int32 * string * bool) -> Async<unit>) option) : unit =
    let v4 : string = $"%A{v1}"
    method10(v0, v4)
and method87 (v0 : Mut4, v1 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option) : unit =
    let v4 : string = $"%A{v1}"
    method10(v0, v4)
and method88 (v0 : Mut4, v1 : bool) : unit =
    let v4 : string =
        if v1 then
            let v2 : string = "true"
            v2
        else
            let v3 : string = "false"
            v3
    let v7 : string = $"{v4}"
    let v14 : string = v0.l0
    let v15 : string = v14 + v7 
    v0.l0 <- v15
    ()
and method89 (v0 : Mut4, v1 : string option) : unit =
    let v4 : string = $"%A{v1}"
    method10(v0, v4)
and method83 (v0 : Mut4, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option) : unit =
    let v8 : string = "{ "
    method10(v0, v8)
    method11(v0)
    let v9 : string = "command"
    method10(v0, v9)
    let v10 : string = " = "
    method10(v0, v10)
    method10(v0, v1)
    let v11 : string = "; "
    method10(v0, v11)
    let v12 : string = "cancellation_token"
    method10(v0, v12)
    method10(v0, v10)
    method84(v0, v2)
    method10(v0, v11)
    let v13 : string = "environment_variables"
    method10(v0, v13)
    method10(v0, v10)
    method85(v0, v3)
    method10(v0, v11)
    let v14 : string = "on_line"
    method10(v0, v14)
    method10(v0, v10)
    method86(v0, v4)
    method10(v0, v11)
    let v15 : string = "stdin"
    method10(v0, v15)
    method10(v0, v10)
    method87(v0, v5)
    method10(v0, v11)
    let v16 : string = "trace"
    method10(v0, v16)
    method10(v0, v10)
    method88(v0, v6)
    method10(v0, v11)
    let v17 : string = "working_directory"
    method10(v0, v17)
    method10(v0, v10)
    method89(v0, v7)
    let v18 : string = " }"
    method10(v0, v18)
and method81 (v0 : Mut4, v1 : string, v2 : Vec<std_string_String>, v3 : string, v4 : System.Threading.CancellationToken option, v5 : (struct (string * string) []), v6 : (struct (int32 * string * bool) -> Async<unit>) option, v7 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v8 : bool, v9 : string option) : unit =
    let v10 : string = "{ "
    method10(v0, v10)
    method11(v0)
    let v11 : string = "file_name"
    method10(v0, v11)
    let v12 : string = " = "
    method10(v0, v12)
    method10(v0, v1)
    let v13 : string = "; "
    method10(v0, v13)
    let v14 : string = "arguments"
    method10(v0, v14)
    method10(v0, v12)
    method82(v0, v2)
    method10(v0, v13)
    let v15 : string = "options"
    method10(v0, v15)
    method10(v0, v12)
    method83(v0, v3, v4, v5, v6, v7, v8, v9)
    let v16 : string = " }"
    method10(v0, v16)
and closure37 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (string * Vec<std_string_String> * string * System.Threading.CancellationToken option * (struct (string * string) []) * (struct (int32 * string * bool) -> Async<unit>) option * (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option * bool * string option))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = $"near_sdk::env::block_timestamp()"
    let v331 : uint64 = Fable.Core.RustInterop.emitRustExpr () v330 
    let v334 : US2 option = None
    let _v334 = ref v334 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v335 : int64 = x
    let v336 : US2 = US2_0(v335)
    v336 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v334.Value <- x
    let v337 : US2 option = _v334.Value 
    let v360 : US2 = US2_1
    let v361 : US2 = v337 |> Option.defaultValue v360 
    let v374 : uint64 =
        match v361 with
        | US2_1 -> (* None *)
            v331
        | US2_0(v369) -> (* Some *)
            let v370 : (int64 -> uint64) = uint64
            let v371 : uint64 = v370 v369
            let v372 : uint64 = v331 - v371
            v372
    let v375 : uint64 = v374 / 1000000000UL
    let v376 : uint64 = v375 % 60UL
    let v377 : uint64 = v375 / 60UL
    let v378 : uint64 = v377 % 60UL
    let v379 : uint64 = v375 / 3600UL
    let v380 : uint64 = v379 % 24UL
    let v381 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v382 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v380, v378, v376) v381 
    let v383 : string = "fable_library_rust::String_::fromString($0)"
    let v384 : string = Fable.Core.RustInterop.emitRustExpr v382 v383 
    v384 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v387 : US2 option = None
    let _v387 = ref v387 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v388 : int64 = x
    let v389 : US2 = US2_0(v388)
    v389 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v387.Value <- x
    let v390 : US2 option = _v387.Value 
    let v413 : US2 = US2_1
    let v414 : US2 = v390 |> Option.defaultValue v413 
    let v512 : System.DateTime =
        match v414 with
        | US2_1 -> (* None *)
            let v504 : System.DateTime = System.DateTime.Now
            v504
        | US2_0(v422) -> (* Some *)
            let v425 : System.DateTime = System.DateTime.Now
            let v434 : (System.DateTime -> int64) = _.Ticks
            let v435 : int64 = v434 v425
            let v442 : int64 = v435 - v422
            let v445 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v446 : System.TimeSpan = v445 v442
            let v455 : (System.TimeSpan -> int32) = _.Hours
            let v456 : int32 = v455 v446
            let v465 : (System.TimeSpan -> int32) = _.Minutes
            let v466 : int32 = v465 v446
            let v475 : (System.TimeSpan -> int32) = _.Seconds
            let v476 : int32 = v475 v446
            let v485 : (System.TimeSpan -> int32) = _.Milliseconds
            let v486 : int32 = v485 v446
            let v495 : System.DateTime = System.DateTime (1, 1, 1, v456, v466, v476, v486)
            v495
    let v515 : string = method7()
    let v524 : (string -> string) = v512.ToString
    let v525 : string = v524 v515
    v525 
    #endif
#if FABLE_COMPILER_PYTHON
    let v534 : US2 option = None
    let _v534 = ref v534 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v535 : int64 = x
    let v536 : US2 = US2_0(v535)
    v536 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v534.Value <- x
    let v537 : US2 option = _v534.Value 
    let v560 : US2 = US2_1
    let v561 : US2 = v537 |> Option.defaultValue v560 
    let v659 : System.DateTime =
        match v561 with
        | US2_1 -> (* None *)
            let v651 : System.DateTime = System.DateTime.Now
            v651
        | US2_0(v569) -> (* Some *)
            let v572 : System.DateTime = System.DateTime.Now
            let v581 : (System.DateTime -> int64) = _.Ticks
            let v582 : int64 = v581 v572
            let v589 : int64 = v582 - v569
            let v592 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v593 : System.TimeSpan = v592 v589
            let v602 : (System.TimeSpan -> int32) = _.Hours
            let v603 : int32 = v602 v593
            let v612 : (System.TimeSpan -> int32) = _.Minutes
            let v613 : int32 = v612 v593
            let v622 : (System.TimeSpan -> int32) = _.Seconds
            let v623 : int32 = v622 v593
            let v632 : (System.TimeSpan -> int32) = _.Milliseconds
            let v633 : int32 = v632 v593
            let v642 : System.DateTime = System.DateTime (1, 1, 1, v603, v613, v623, v633)
            v642
    let v662 : string = method7()
    let v671 : (string -> string) = v659.ToString
    let v672 : string = v671 v662
    v672 
    #endif
#else
    let v681 : US2 option = None
    let _v681 = ref v681 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v682 : int64 = x
    let v683 : US2 = US2_0(v682)
    v683 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v681.Value <- x
    let v684 : US2 option = _v681.Value 
    let v707 : US2 = US2_1
    let v708 : US2 = v684 |> Option.defaultValue v707 
    let v806 : System.DateTime =
        match v708 with
        | US2_1 -> (* None *)
            let v798 : System.DateTime = System.DateTime.Now
            v798
        | US2_0(v716) -> (* Some *)
            let v719 : System.DateTime = System.DateTime.Now
            let v728 : (System.DateTime -> int64) = _.Ticks
            let v729 : int64 = v728 v719
            let v736 : int64 = v729 - v716
            let v739 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v740 : System.TimeSpan = v739 v736
            let v749 : (System.TimeSpan -> int32) = _.Hours
            let v750 : int32 = v749 v740
            let v759 : (System.TimeSpan -> int32) = _.Minutes
            let v760 : int32 = v759 v740
            let v769 : (System.TimeSpan -> int32) = _.Seconds
            let v770 : int32 = v769 v740
            let v779 : (System.TimeSpan -> int32) = _.Milliseconds
            let v780 : int32 = v779 v740
            let v789 : System.DateTime = System.DateTime (1, 1, 1, v750, v760, v770, v780)
            v789
    let v809 : string = method7()
    let v818 : (string -> string) = v806.ToString
    let v819 : string = v818 v809
    v819 
    #endif
    |> fun x -> _v35 <- Some x
    let v826 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v981 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v985 : US3 =
        if v981 then
            let v982 : string = "Verbose"
            US3_0(v982)
        else
            US3_1
    let v1034 : US3 =
        match v985 with
        | US3_1 -> (* None *)
            let v990 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v994 : US3 =
                if v990 then
                    let v991 : string = "Debug"
                    US3_0(v991)
                else
                    US3_1
            match v994 with
            | US3_1 -> (* None *)
                let v999 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v1003 : US3 =
                    if v999 then
                        let v1000 : string = "Info"
                        US3_0(v1000)
                    else
                        US3_1
                match v1003 with
                | US3_1 -> (* None *)
                    let v1008 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v1012 : US3 =
                        if v1008 then
                            let v1009 : string = "Warning"
                            US3_0(v1009)
                        else
                            US3_1
                    match v1012 with
                    | US3_1 -> (* None *)
                        let v1017 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v1021 : US3 =
                            if v1017 then
                                let v1018 : string = "Critical"
                                US3_0(v1018)
                            else
                                US3_1
                        match v1021 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v1022) -> (* Some *)
                            US3_0(v1022)
                    | US3_0(v1013) -> (* Some *)
                        US3_0(v1013)
                | US3_0(v1004) -> (* Some *)
                    US3_0(v1004)
            | US3_0(v995) -> (* Some *)
                US3_0(v995)
        | US3_0(v986) -> (* Some *)
            US3_0(v986)
    let v1038 : string =
        match v1034 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v1035) -> (* Some *)
            v1035
    let v1041 : (unit -> string) = v1038.ToLower
    let v1042 : string = v1041 ()
    let v1051 : string = v1042.PadLeft (7, ' ')
    let v1083 : bool = true
    let mutable _v1083 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1098 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1092 : string = "inline_colorization::color_bright_red"
            let v1093 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1092 
            v1093
        | US0_1 -> (* Debug *)
            let v1086 : string = "inline_colorization::color_bright_blue"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_2 -> (* Info *)
            let v1088 : string = "inline_colorization::color_bright_green"
            let v1089 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1088 
            v1089
        | US0_0 -> (* Verbose *)
            let v1084 : string = "inline_colorization::color_bright_black"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
        | US0_3 -> (* Warning *)
            let v1090 : string = "inline_colorization::color_yellow"
            let v1091 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1090 
            v1091
    let v1099 : string = "&*$0"
    let v1100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1099 
    let v1101 : string = "inline_colorization::color_reset"
    let v1102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1101 
    let v1103 : string = "\"{v1098}{v1100}{v1102}\""
    let v1104 : string = @$"format!(" + v1103 + ")"
    let v1105 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1104 
    let v1106 : string = "fable_library_rust::String_::fromString($0)"
    let v1107 : string = Fable.Core.RustInterop.emitRustExpr v1105 v1106 
    v1107 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1122 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1116 : string = "inline_colorization::color_bright_red"
            let v1117 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1116 
            v1117
        | US0_1 -> (* Debug *)
            let v1110 : string = "inline_colorization::color_bright_blue"
            let v1111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1110 
            v1111
        | US0_2 -> (* Info *)
            let v1112 : string = "inline_colorization::color_bright_green"
            let v1113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1112 
            v1113
        | US0_0 -> (* Verbose *)
            let v1108 : string = "inline_colorization::color_bright_black"
            let v1109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1108 
            v1109
        | US0_3 -> (* Warning *)
            let v1114 : string = "inline_colorization::color_yellow"
            let v1115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1114 
            v1115
    let v1123 : string = "&*$0"
    let v1124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1123 
    let v1125 : string = "inline_colorization::color_reset"
    let v1126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1125 
    let v1127 : string = "\"{v1122}{v1124}{v1126}\""
    let v1128 : string = @$"format!(" + v1127 + ")"
    let v1129 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1128 
    let v1130 : string = "fable_library_rust::String_::fromString($0)"
    let v1131 : string = Fable.Core.RustInterop.emitRustExpr v1129 v1130 
    v1131 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1146 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1140 : string = "inline_colorization::color_bright_red"
            let v1141 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1140 
            v1141
        | US0_1 -> (* Debug *)
            let v1134 : string = "inline_colorization::color_bright_blue"
            let v1135 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1134 
            v1135
        | US0_2 -> (* Info *)
            let v1136 : string = "inline_colorization::color_bright_green"
            let v1137 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1136 
            v1137
        | US0_0 -> (* Verbose *)
            let v1132 : string = "inline_colorization::color_bright_black"
            let v1133 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1132 
            v1133
        | US0_3 -> (* Warning *)
            let v1138 : string = "inline_colorization::color_yellow"
            let v1139 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1138 
            v1139
    let v1147 : string = "&*$0"
    let v1148 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1147 
    let v1149 : string = "inline_colorization::color_reset"
    let v1150 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1149 
    let v1151 : string = "\"{v1146}{v1148}{v1150}\""
    let v1152 : string = @$"format!(" + v1151 + ")"
    let v1153 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1152 
    let v1154 : string = "fable_library_rust::String_::fromString($0)"
    let v1155 : string = Fable.Core.RustInterop.emitRustExpr v1153 v1154 
    v1155 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1165 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1160 : string = "\u001b[91m"
            v1160
        | US0_1 -> (* Debug *)
            let v1157 : string = "\u001b[94m"
            v1157
        | US0_2 -> (* Info *)
            let v1158 : string = "\u001b[92m"
            v1158
        | US0_0 -> (* Verbose *)
            let v1156 : string = "\u001b[90m"
            v1156
        | US0_3 -> (* Warning *)
            let v1159 : string = "\u001b[93m"
            v1159
    let v1166 : string = method8()
    let v1167 : string = v1165 + v1051 
    let v1168 : string = v1167 + v1166 
    v1168 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1178 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1173 : string = "\u001b[91m"
            v1173
        | US0_1 -> (* Debug *)
            let v1170 : string = "\u001b[94m"
            v1170
        | US0_2 -> (* Info *)
            let v1171 : string = "\u001b[92m"
            v1171
        | US0_0 -> (* Verbose *)
            let v1169 : string = "\u001b[90m"
            v1169
        | US0_3 -> (* Warning *)
            let v1172 : string = "\u001b[93m"
            v1172
    let v1179 : string = method8()
    let v1180 : string = v1178 + v1051 
    let v1181 : string = v1180 + v1179 
    v1181 
    #endif
#else
    let v1191 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1186 : string = "\u001b[91m"
            v1186
        | US0_1 -> (* Debug *)
            let v1183 : string = "\u001b[94m"
            v1183
        | US0_2 -> (* Info *)
            let v1184 : string = "\u001b[92m"
            v1184
        | US0_0 -> (* Verbose *)
            let v1182 : string = "\u001b[90m"
            v1182
        | US0_3 -> (* Warning *)
            let v1185 : string = "\u001b[93m"
            v1185
    let v1192 : string = method8()
    let v1193 : string = v1191 + v1051 
    let v1194 : string = v1193 + v1192 
    v1194 
    #endif
    |> fun x -> _v1083 <- Some x
    let v1195 : string = match _v1083 with Some x -> x | None -> failwith "base.run_target / _v1083=None"
    let v1214 : int64 = v14.l0
    let struct (v1215 : string, v1216 : Vec<std_string_String>, v1217 : string, v1218 : System.Threading.CancellationToken option, v1219 : (struct (string * string) []), v1220 : (struct (int32 * string * bool) -> Async<unit>) option, v1221 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v1222 : bool, v1223 : string option) = v2 ()
    let v1224 : string = ""
    let v1225 : Mut4 = {l0 = v1224} : Mut4
    method81(v1225, v1215, v1216, v1217, v1218, v1219, v1220, v1221, v1222, v1223)
    let v1226 : string = v1225.l0
    let v1229 : string = $"{v826} {v1195} #{v1214} %s{v1 ()} / {v1226}"
    let v1236 : char list = []
    let v1241 : (char list -> (char [])) = List.toArray
    let v1242 : (char []) = v1241 v1236
    let v1249 : string = v1229.TrimStart v1242 
    let v1288 : char list = []
    let v1291 : char list = '/' :: v1288 
    let v1300 : char list = ' ' :: v1291 
    let v1311 : (char list -> (char [])) = List.toArray
    let v1312 : (char []) = v1311 v1300
    let v1319 : string = v1249.TrimEnd v1312 
    v1319
and method80 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (string * Vec<std_string_String> * string * System.Threading.CancellationToken option * (struct (string * string) []) * (struct (int32 * string * bool) -> Async<unit>) option * (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option * bool * string option))) : unit =
    let v3 : (unit -> string) = closure37(v0, v1, v2)
    method13(v0, v3)
and closure38 () (v0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>) : US24 =
    US24_0(v0)
and method90 () : (std_sync_Arc<std_sync_Mutex<std_process_Child option>> -> US24) =
    closure38()
and closure39 () (v0 : std_string_String) : US24 =
    US24_1(v0)
and method91 () : (std_string_String -> US24) =
    closure39()
and closure40 () () : string =
    let v0 : string = $"runtime.execute_with_options / child error"
    v0
and closure41 (v0 : std_string_String) () : std_string_String =
    v0
and method93 (v0 : Mut4, v1 : std_string_String) : unit =
    let v2 : string = "{ "
    method10(v0, v2)
    method11(v0)
    let v3 : string = "error"
    method10(v0, v3)
    let v4 : string = " = "
    method10(v0, v4)
    method39(v0, v1)
    let v5 : string = " }"
    method10(v0, v5)
and closure42 (v0 : US0, v1 : (unit -> string), v2 : (unit -> std_string_String)) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = $"near_sdk::env::block_timestamp()"
    let v331 : uint64 = Fable.Core.RustInterop.emitRustExpr () v330 
    let v334 : US2 option = None
    let _v334 = ref v334 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v335 : int64 = x
    let v336 : US2 = US2_0(v335)
    v336 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v334.Value <- x
    let v337 : US2 option = _v334.Value 
    let v360 : US2 = US2_1
    let v361 : US2 = v337 |> Option.defaultValue v360 
    let v374 : uint64 =
        match v361 with
        | US2_1 -> (* None *)
            v331
        | US2_0(v369) -> (* Some *)
            let v370 : (int64 -> uint64) = uint64
            let v371 : uint64 = v370 v369
            let v372 : uint64 = v331 - v371
            v372
    let v375 : uint64 = v374 / 1000000000UL
    let v376 : uint64 = v375 % 60UL
    let v377 : uint64 = v375 / 60UL
    let v378 : uint64 = v377 % 60UL
    let v379 : uint64 = v375 / 3600UL
    let v380 : uint64 = v379 % 24UL
    let v381 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v382 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v380, v378, v376) v381 
    let v383 : string = "fable_library_rust::String_::fromString($0)"
    let v384 : string = Fable.Core.RustInterop.emitRustExpr v382 v383 
    v384 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v387 : US2 option = None
    let _v387 = ref v387 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v388 : int64 = x
    let v389 : US2 = US2_0(v388)
    v389 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v387.Value <- x
    let v390 : US2 option = _v387.Value 
    let v413 : US2 = US2_1
    let v414 : US2 = v390 |> Option.defaultValue v413 
    let v512 : System.DateTime =
        match v414 with
        | US2_1 -> (* None *)
            let v504 : System.DateTime = System.DateTime.Now
            v504
        | US2_0(v422) -> (* Some *)
            let v425 : System.DateTime = System.DateTime.Now
            let v434 : (System.DateTime -> int64) = _.Ticks
            let v435 : int64 = v434 v425
            let v442 : int64 = v435 - v422
            let v445 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v446 : System.TimeSpan = v445 v442
            let v455 : (System.TimeSpan -> int32) = _.Hours
            let v456 : int32 = v455 v446
            let v465 : (System.TimeSpan -> int32) = _.Minutes
            let v466 : int32 = v465 v446
            let v475 : (System.TimeSpan -> int32) = _.Seconds
            let v476 : int32 = v475 v446
            let v485 : (System.TimeSpan -> int32) = _.Milliseconds
            let v486 : int32 = v485 v446
            let v495 : System.DateTime = System.DateTime (1, 1, 1, v456, v466, v476, v486)
            v495
    let v515 : string = method7()
    let v524 : (string -> string) = v512.ToString
    let v525 : string = v524 v515
    v525 
    #endif
#if FABLE_COMPILER_PYTHON
    let v534 : US2 option = None
    let _v534 = ref v534 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v535 : int64 = x
    let v536 : US2 = US2_0(v535)
    v536 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v534.Value <- x
    let v537 : US2 option = _v534.Value 
    let v560 : US2 = US2_1
    let v561 : US2 = v537 |> Option.defaultValue v560 
    let v659 : System.DateTime =
        match v561 with
        | US2_1 -> (* None *)
            let v651 : System.DateTime = System.DateTime.Now
            v651
        | US2_0(v569) -> (* Some *)
            let v572 : System.DateTime = System.DateTime.Now
            let v581 : (System.DateTime -> int64) = _.Ticks
            let v582 : int64 = v581 v572
            let v589 : int64 = v582 - v569
            let v592 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v593 : System.TimeSpan = v592 v589
            let v602 : (System.TimeSpan -> int32) = _.Hours
            let v603 : int32 = v602 v593
            let v612 : (System.TimeSpan -> int32) = _.Minutes
            let v613 : int32 = v612 v593
            let v622 : (System.TimeSpan -> int32) = _.Seconds
            let v623 : int32 = v622 v593
            let v632 : (System.TimeSpan -> int32) = _.Milliseconds
            let v633 : int32 = v632 v593
            let v642 : System.DateTime = System.DateTime (1, 1, 1, v603, v613, v623, v633)
            v642
    let v662 : string = method7()
    let v671 : (string -> string) = v659.ToString
    let v672 : string = v671 v662
    v672 
    #endif
#else
    let v681 : US2 option = None
    let _v681 = ref v681 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v682 : int64 = x
    let v683 : US2 = US2_0(v682)
    v683 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v681.Value <- x
    let v684 : US2 option = _v681.Value 
    let v707 : US2 = US2_1
    let v708 : US2 = v684 |> Option.defaultValue v707 
    let v806 : System.DateTime =
        match v708 with
        | US2_1 -> (* None *)
            let v798 : System.DateTime = System.DateTime.Now
            v798
        | US2_0(v716) -> (* Some *)
            let v719 : System.DateTime = System.DateTime.Now
            let v728 : (System.DateTime -> int64) = _.Ticks
            let v729 : int64 = v728 v719
            let v736 : int64 = v729 - v716
            let v739 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v740 : System.TimeSpan = v739 v736
            let v749 : (System.TimeSpan -> int32) = _.Hours
            let v750 : int32 = v749 v740
            let v759 : (System.TimeSpan -> int32) = _.Minutes
            let v760 : int32 = v759 v740
            let v769 : (System.TimeSpan -> int32) = _.Seconds
            let v770 : int32 = v769 v740
            let v779 : (System.TimeSpan -> int32) = _.Milliseconds
            let v780 : int32 = v779 v740
            let v789 : System.DateTime = System.DateTime (1, 1, 1, v750, v760, v770, v780)
            v789
    let v809 : string = method7()
    let v818 : (string -> string) = v806.ToString
    let v819 : string = v818 v809
    v819 
    #endif
    |> fun x -> _v35 <- Some x
    let v826 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v981 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v985 : US3 =
        if v981 then
            let v982 : string = "Verbose"
            US3_0(v982)
        else
            US3_1
    let v1034 : US3 =
        match v985 with
        | US3_1 -> (* None *)
            let v990 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v994 : US3 =
                if v990 then
                    let v991 : string = "Debug"
                    US3_0(v991)
                else
                    US3_1
            match v994 with
            | US3_1 -> (* None *)
                let v999 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v1003 : US3 =
                    if v999 then
                        let v1000 : string = "Info"
                        US3_0(v1000)
                    else
                        US3_1
                match v1003 with
                | US3_1 -> (* None *)
                    let v1008 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v1012 : US3 =
                        if v1008 then
                            let v1009 : string = "Warning"
                            US3_0(v1009)
                        else
                            US3_1
                    match v1012 with
                    | US3_1 -> (* None *)
                        let v1017 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v1021 : US3 =
                            if v1017 then
                                let v1018 : string = "Critical"
                                US3_0(v1018)
                            else
                                US3_1
                        match v1021 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v1022) -> (* Some *)
                            US3_0(v1022)
                    | US3_0(v1013) -> (* Some *)
                        US3_0(v1013)
                | US3_0(v1004) -> (* Some *)
                    US3_0(v1004)
            | US3_0(v995) -> (* Some *)
                US3_0(v995)
        | US3_0(v986) -> (* Some *)
            US3_0(v986)
    let v1038 : string =
        match v1034 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v1035) -> (* Some *)
            v1035
    let v1041 : (unit -> string) = v1038.ToLower
    let v1042 : string = v1041 ()
    let v1051 : string = v1042.PadLeft (7, ' ')
    let v1083 : bool = true
    let mutable _v1083 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1098 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1092 : string = "inline_colorization::color_bright_red"
            let v1093 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1092 
            v1093
        | US0_1 -> (* Debug *)
            let v1086 : string = "inline_colorization::color_bright_blue"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_2 -> (* Info *)
            let v1088 : string = "inline_colorization::color_bright_green"
            let v1089 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1088 
            v1089
        | US0_0 -> (* Verbose *)
            let v1084 : string = "inline_colorization::color_bright_black"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
        | US0_3 -> (* Warning *)
            let v1090 : string = "inline_colorization::color_yellow"
            let v1091 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1090 
            v1091
    let v1099 : string = "&*$0"
    let v1100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1099 
    let v1101 : string = "inline_colorization::color_reset"
    let v1102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1101 
    let v1103 : string = "\"{v1098}{v1100}{v1102}\""
    let v1104 : string = @$"format!(" + v1103 + ")"
    let v1105 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1104 
    let v1106 : string = "fable_library_rust::String_::fromString($0)"
    let v1107 : string = Fable.Core.RustInterop.emitRustExpr v1105 v1106 
    v1107 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1122 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1116 : string = "inline_colorization::color_bright_red"
            let v1117 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1116 
            v1117
        | US0_1 -> (* Debug *)
            let v1110 : string = "inline_colorization::color_bright_blue"
            let v1111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1110 
            v1111
        | US0_2 -> (* Info *)
            let v1112 : string = "inline_colorization::color_bright_green"
            let v1113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1112 
            v1113
        | US0_0 -> (* Verbose *)
            let v1108 : string = "inline_colorization::color_bright_black"
            let v1109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1108 
            v1109
        | US0_3 -> (* Warning *)
            let v1114 : string = "inline_colorization::color_yellow"
            let v1115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1114 
            v1115
    let v1123 : string = "&*$0"
    let v1124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1123 
    let v1125 : string = "inline_colorization::color_reset"
    let v1126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1125 
    let v1127 : string = "\"{v1122}{v1124}{v1126}\""
    let v1128 : string = @$"format!(" + v1127 + ")"
    let v1129 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1128 
    let v1130 : string = "fable_library_rust::String_::fromString($0)"
    let v1131 : string = Fable.Core.RustInterop.emitRustExpr v1129 v1130 
    v1131 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1146 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1140 : string = "inline_colorization::color_bright_red"
            let v1141 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1140 
            v1141
        | US0_1 -> (* Debug *)
            let v1134 : string = "inline_colorization::color_bright_blue"
            let v1135 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1134 
            v1135
        | US0_2 -> (* Info *)
            let v1136 : string = "inline_colorization::color_bright_green"
            let v1137 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1136 
            v1137
        | US0_0 -> (* Verbose *)
            let v1132 : string = "inline_colorization::color_bright_black"
            let v1133 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1132 
            v1133
        | US0_3 -> (* Warning *)
            let v1138 : string = "inline_colorization::color_yellow"
            let v1139 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1138 
            v1139
    let v1147 : string = "&*$0"
    let v1148 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1147 
    let v1149 : string = "inline_colorization::color_reset"
    let v1150 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1149 
    let v1151 : string = "\"{v1146}{v1148}{v1150}\""
    let v1152 : string = @$"format!(" + v1151 + ")"
    let v1153 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1152 
    let v1154 : string = "fable_library_rust::String_::fromString($0)"
    let v1155 : string = Fable.Core.RustInterop.emitRustExpr v1153 v1154 
    v1155 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1165 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1160 : string = "\u001b[91m"
            v1160
        | US0_1 -> (* Debug *)
            let v1157 : string = "\u001b[94m"
            v1157
        | US0_2 -> (* Info *)
            let v1158 : string = "\u001b[92m"
            v1158
        | US0_0 -> (* Verbose *)
            let v1156 : string = "\u001b[90m"
            v1156
        | US0_3 -> (* Warning *)
            let v1159 : string = "\u001b[93m"
            v1159
    let v1166 : string = method8()
    let v1167 : string = v1165 + v1051 
    let v1168 : string = v1167 + v1166 
    v1168 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1178 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1173 : string = "\u001b[91m"
            v1173
        | US0_1 -> (* Debug *)
            let v1170 : string = "\u001b[94m"
            v1170
        | US0_2 -> (* Info *)
            let v1171 : string = "\u001b[92m"
            v1171
        | US0_0 -> (* Verbose *)
            let v1169 : string = "\u001b[90m"
            v1169
        | US0_3 -> (* Warning *)
            let v1172 : string = "\u001b[93m"
            v1172
    let v1179 : string = method8()
    let v1180 : string = v1178 + v1051 
    let v1181 : string = v1180 + v1179 
    v1181 
    #endif
#else
    let v1191 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1186 : string = "\u001b[91m"
            v1186
        | US0_1 -> (* Debug *)
            let v1183 : string = "\u001b[94m"
            v1183
        | US0_2 -> (* Info *)
            let v1184 : string = "\u001b[92m"
            v1184
        | US0_0 -> (* Verbose *)
            let v1182 : string = "\u001b[90m"
            v1182
        | US0_3 -> (* Warning *)
            let v1185 : string = "\u001b[93m"
            v1185
    let v1192 : string = method8()
    let v1193 : string = v1191 + v1051 
    let v1194 : string = v1193 + v1192 
    v1194 
    #endif
    |> fun x -> _v1083 <- Some x
    let v1195 : string = match _v1083 with Some x -> x | None -> failwith "base.run_target / _v1083=None"
    let v1214 : int64 = v14.l0
    let v1215 : std_string_String = v2 ()
    let v1216 : string = ""
    let v1217 : Mut4 = {l0 = v1216} : Mut4
    method93(v1217, v1215)
    let v1218 : string = v1217.l0
    let v1221 : string = $"{v826} {v1195} #{v1214} %s{v1 ()} / {v1218}"
    let v1228 : char list = []
    let v1233 : (char list -> (char [])) = List.toArray
    let v1234 : (char []) = v1233 v1228
    let v1241 : string = v1221.TrimStart v1234 
    let v1280 : char list = []
    let v1283 : char list = '/' :: v1280 
    let v1292 : char list = ' ' :: v1283 
    let v1303 : (char list -> (char [])) = List.toArray
    let v1304 : (char []) = v1303 v1292
    let v1311 : string = v1241.TrimEnd v1304 
    v1311
and method92 (v0 : US0, v1 : (unit -> string), v2 : (unit -> std_string_String)) : unit =
    let v3 : (unit -> string) = closure42(v0, v1, v2)
    method13(v0, v3)
and method94 (v0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>) : std_sync_Arc<std_sync_Mutex<std_process_Child option>> =
    v0
and closure43 () (v0 : std_string_String) : US26 =
    US26_0(v0)
and method95 () : (std_string_String -> US26) =
    closure43()
and closure44 () (v0 : std_string_String) : US26 =
    US26_1(v0)
and method96 () : (std_string_String -> US26) =
    closure44()
and closure45 () () : string =
    let v0 : string = $"runtime.stdio_line"
    v0
and closure46 (v0 : std_string_String) () : std_string_String =
    v0
and method98 (v0 : Mut4, v1 : std_string_String) : unit =
    let v2 : string = "{ "
    method10(v0, v2)
    method11(v0)
    let v3 : string = "e"
    method10(v0, v3)
    let v4 : string = " = "
    method10(v0, v4)
    method39(v0, v1)
    let v5 : string = " }"
    method10(v0, v5)
and closure47 (v0 : US0, v1 : (unit -> string), v2 : (unit -> std_string_String)) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = $"near_sdk::env::block_timestamp()"
    let v331 : uint64 = Fable.Core.RustInterop.emitRustExpr () v330 
    let v334 : US2 option = None
    let _v334 = ref v334 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v335 : int64 = x
    let v336 : US2 = US2_0(v335)
    v336 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v334.Value <- x
    let v337 : US2 option = _v334.Value 
    let v360 : US2 = US2_1
    let v361 : US2 = v337 |> Option.defaultValue v360 
    let v374 : uint64 =
        match v361 with
        | US2_1 -> (* None *)
            v331
        | US2_0(v369) -> (* Some *)
            let v370 : (int64 -> uint64) = uint64
            let v371 : uint64 = v370 v369
            let v372 : uint64 = v331 - v371
            v372
    let v375 : uint64 = v374 / 1000000000UL
    let v376 : uint64 = v375 % 60UL
    let v377 : uint64 = v375 / 60UL
    let v378 : uint64 = v377 % 60UL
    let v379 : uint64 = v375 / 3600UL
    let v380 : uint64 = v379 % 24UL
    let v381 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v382 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v380, v378, v376) v381 
    let v383 : string = "fable_library_rust::String_::fromString($0)"
    let v384 : string = Fable.Core.RustInterop.emitRustExpr v382 v383 
    v384 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v387 : US2 option = None
    let _v387 = ref v387 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v388 : int64 = x
    let v389 : US2 = US2_0(v388)
    v389 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v387.Value <- x
    let v390 : US2 option = _v387.Value 
    let v413 : US2 = US2_1
    let v414 : US2 = v390 |> Option.defaultValue v413 
    let v512 : System.DateTime =
        match v414 with
        | US2_1 -> (* None *)
            let v504 : System.DateTime = System.DateTime.Now
            v504
        | US2_0(v422) -> (* Some *)
            let v425 : System.DateTime = System.DateTime.Now
            let v434 : (System.DateTime -> int64) = _.Ticks
            let v435 : int64 = v434 v425
            let v442 : int64 = v435 - v422
            let v445 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v446 : System.TimeSpan = v445 v442
            let v455 : (System.TimeSpan -> int32) = _.Hours
            let v456 : int32 = v455 v446
            let v465 : (System.TimeSpan -> int32) = _.Minutes
            let v466 : int32 = v465 v446
            let v475 : (System.TimeSpan -> int32) = _.Seconds
            let v476 : int32 = v475 v446
            let v485 : (System.TimeSpan -> int32) = _.Milliseconds
            let v486 : int32 = v485 v446
            let v495 : System.DateTime = System.DateTime (1, 1, 1, v456, v466, v476, v486)
            v495
    let v515 : string = method7()
    let v524 : (string -> string) = v512.ToString
    let v525 : string = v524 v515
    v525 
    #endif
#if FABLE_COMPILER_PYTHON
    let v534 : US2 option = None
    let _v534 = ref v534 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v535 : int64 = x
    let v536 : US2 = US2_0(v535)
    v536 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v534.Value <- x
    let v537 : US2 option = _v534.Value 
    let v560 : US2 = US2_1
    let v561 : US2 = v537 |> Option.defaultValue v560 
    let v659 : System.DateTime =
        match v561 with
        | US2_1 -> (* None *)
            let v651 : System.DateTime = System.DateTime.Now
            v651
        | US2_0(v569) -> (* Some *)
            let v572 : System.DateTime = System.DateTime.Now
            let v581 : (System.DateTime -> int64) = _.Ticks
            let v582 : int64 = v581 v572
            let v589 : int64 = v582 - v569
            let v592 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v593 : System.TimeSpan = v592 v589
            let v602 : (System.TimeSpan -> int32) = _.Hours
            let v603 : int32 = v602 v593
            let v612 : (System.TimeSpan -> int32) = _.Minutes
            let v613 : int32 = v612 v593
            let v622 : (System.TimeSpan -> int32) = _.Seconds
            let v623 : int32 = v622 v593
            let v632 : (System.TimeSpan -> int32) = _.Milliseconds
            let v633 : int32 = v632 v593
            let v642 : System.DateTime = System.DateTime (1, 1, 1, v603, v613, v623, v633)
            v642
    let v662 : string = method7()
    let v671 : (string -> string) = v659.ToString
    let v672 : string = v671 v662
    v672 
    #endif
#else
    let v681 : US2 option = None
    let _v681 = ref v681 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v682 : int64 = x
    let v683 : US2 = US2_0(v682)
    v683 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v681.Value <- x
    let v684 : US2 option = _v681.Value 
    let v707 : US2 = US2_1
    let v708 : US2 = v684 |> Option.defaultValue v707 
    let v806 : System.DateTime =
        match v708 with
        | US2_1 -> (* None *)
            let v798 : System.DateTime = System.DateTime.Now
            v798
        | US2_0(v716) -> (* Some *)
            let v719 : System.DateTime = System.DateTime.Now
            let v728 : (System.DateTime -> int64) = _.Ticks
            let v729 : int64 = v728 v719
            let v736 : int64 = v729 - v716
            let v739 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v740 : System.TimeSpan = v739 v736
            let v749 : (System.TimeSpan -> int32) = _.Hours
            let v750 : int32 = v749 v740
            let v759 : (System.TimeSpan -> int32) = _.Minutes
            let v760 : int32 = v759 v740
            let v769 : (System.TimeSpan -> int32) = _.Seconds
            let v770 : int32 = v769 v740
            let v779 : (System.TimeSpan -> int32) = _.Milliseconds
            let v780 : int32 = v779 v740
            let v789 : System.DateTime = System.DateTime (1, 1, 1, v750, v760, v770, v780)
            v789
    let v809 : string = method7()
    let v818 : (string -> string) = v806.ToString
    let v819 : string = v818 v809
    v819 
    #endif
    |> fun x -> _v35 <- Some x
    let v826 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v981 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v985 : US3 =
        if v981 then
            let v982 : string = "Verbose"
            US3_0(v982)
        else
            US3_1
    let v1034 : US3 =
        match v985 with
        | US3_1 -> (* None *)
            let v990 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v994 : US3 =
                if v990 then
                    let v991 : string = "Debug"
                    US3_0(v991)
                else
                    US3_1
            match v994 with
            | US3_1 -> (* None *)
                let v999 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v1003 : US3 =
                    if v999 then
                        let v1000 : string = "Info"
                        US3_0(v1000)
                    else
                        US3_1
                match v1003 with
                | US3_1 -> (* None *)
                    let v1008 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v1012 : US3 =
                        if v1008 then
                            let v1009 : string = "Warning"
                            US3_0(v1009)
                        else
                            US3_1
                    match v1012 with
                    | US3_1 -> (* None *)
                        let v1017 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v1021 : US3 =
                            if v1017 then
                                let v1018 : string = "Critical"
                                US3_0(v1018)
                            else
                                US3_1
                        match v1021 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v1022) -> (* Some *)
                            US3_0(v1022)
                    | US3_0(v1013) -> (* Some *)
                        US3_0(v1013)
                | US3_0(v1004) -> (* Some *)
                    US3_0(v1004)
            | US3_0(v995) -> (* Some *)
                US3_0(v995)
        | US3_0(v986) -> (* Some *)
            US3_0(v986)
    let v1038 : string =
        match v1034 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v1035) -> (* Some *)
            v1035
    let v1041 : (unit -> string) = v1038.ToLower
    let v1042 : string = v1041 ()
    let v1051 : string = v1042.PadLeft (7, ' ')
    let v1083 : bool = true
    let mutable _v1083 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1098 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1092 : string = "inline_colorization::color_bright_red"
            let v1093 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1092 
            v1093
        | US0_1 -> (* Debug *)
            let v1086 : string = "inline_colorization::color_bright_blue"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_2 -> (* Info *)
            let v1088 : string = "inline_colorization::color_bright_green"
            let v1089 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1088 
            v1089
        | US0_0 -> (* Verbose *)
            let v1084 : string = "inline_colorization::color_bright_black"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
        | US0_3 -> (* Warning *)
            let v1090 : string = "inline_colorization::color_yellow"
            let v1091 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1090 
            v1091
    let v1099 : string = "&*$0"
    let v1100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1099 
    let v1101 : string = "inline_colorization::color_reset"
    let v1102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1101 
    let v1103 : string = "\"{v1098}{v1100}{v1102}\""
    let v1104 : string = @$"format!(" + v1103 + ")"
    let v1105 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1104 
    let v1106 : string = "fable_library_rust::String_::fromString($0)"
    let v1107 : string = Fable.Core.RustInterop.emitRustExpr v1105 v1106 
    v1107 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1122 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1116 : string = "inline_colorization::color_bright_red"
            let v1117 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1116 
            v1117
        | US0_1 -> (* Debug *)
            let v1110 : string = "inline_colorization::color_bright_blue"
            let v1111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1110 
            v1111
        | US0_2 -> (* Info *)
            let v1112 : string = "inline_colorization::color_bright_green"
            let v1113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1112 
            v1113
        | US0_0 -> (* Verbose *)
            let v1108 : string = "inline_colorization::color_bright_black"
            let v1109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1108 
            v1109
        | US0_3 -> (* Warning *)
            let v1114 : string = "inline_colorization::color_yellow"
            let v1115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1114 
            v1115
    let v1123 : string = "&*$0"
    let v1124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1123 
    let v1125 : string = "inline_colorization::color_reset"
    let v1126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1125 
    let v1127 : string = "\"{v1122}{v1124}{v1126}\""
    let v1128 : string = @$"format!(" + v1127 + ")"
    let v1129 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1128 
    let v1130 : string = "fable_library_rust::String_::fromString($0)"
    let v1131 : string = Fable.Core.RustInterop.emitRustExpr v1129 v1130 
    v1131 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1146 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1140 : string = "inline_colorization::color_bright_red"
            let v1141 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1140 
            v1141
        | US0_1 -> (* Debug *)
            let v1134 : string = "inline_colorization::color_bright_blue"
            let v1135 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1134 
            v1135
        | US0_2 -> (* Info *)
            let v1136 : string = "inline_colorization::color_bright_green"
            let v1137 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1136 
            v1137
        | US0_0 -> (* Verbose *)
            let v1132 : string = "inline_colorization::color_bright_black"
            let v1133 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1132 
            v1133
        | US0_3 -> (* Warning *)
            let v1138 : string = "inline_colorization::color_yellow"
            let v1139 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1138 
            v1139
    let v1147 : string = "&*$0"
    let v1148 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1147 
    let v1149 : string = "inline_colorization::color_reset"
    let v1150 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1149 
    let v1151 : string = "\"{v1146}{v1148}{v1150}\""
    let v1152 : string = @$"format!(" + v1151 + ")"
    let v1153 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1152 
    let v1154 : string = "fable_library_rust::String_::fromString($0)"
    let v1155 : string = Fable.Core.RustInterop.emitRustExpr v1153 v1154 
    v1155 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1165 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1160 : string = "\u001b[91m"
            v1160
        | US0_1 -> (* Debug *)
            let v1157 : string = "\u001b[94m"
            v1157
        | US0_2 -> (* Info *)
            let v1158 : string = "\u001b[92m"
            v1158
        | US0_0 -> (* Verbose *)
            let v1156 : string = "\u001b[90m"
            v1156
        | US0_3 -> (* Warning *)
            let v1159 : string = "\u001b[93m"
            v1159
    let v1166 : string = method8()
    let v1167 : string = v1165 + v1051 
    let v1168 : string = v1167 + v1166 
    v1168 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1178 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1173 : string = "\u001b[91m"
            v1173
        | US0_1 -> (* Debug *)
            let v1170 : string = "\u001b[94m"
            v1170
        | US0_2 -> (* Info *)
            let v1171 : string = "\u001b[92m"
            v1171
        | US0_0 -> (* Verbose *)
            let v1169 : string = "\u001b[90m"
            v1169
        | US0_3 -> (* Warning *)
            let v1172 : string = "\u001b[93m"
            v1172
    let v1179 : string = method8()
    let v1180 : string = v1178 + v1051 
    let v1181 : string = v1180 + v1179 
    v1181 
    #endif
#else
    let v1191 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1186 : string = "\u001b[91m"
            v1186
        | US0_1 -> (* Debug *)
            let v1183 : string = "\u001b[94m"
            v1183
        | US0_2 -> (* Info *)
            let v1184 : string = "\u001b[92m"
            v1184
        | US0_0 -> (* Verbose *)
            let v1182 : string = "\u001b[90m"
            v1182
        | US0_3 -> (* Warning *)
            let v1185 : string = "\u001b[93m"
            v1185
    let v1192 : string = method8()
    let v1193 : string = v1191 + v1051 
    let v1194 : string = v1193 + v1192 
    v1194 
    #endif
    |> fun x -> _v1083 <- Some x
    let v1195 : string = match _v1083 with Some x -> x | None -> failwith "base.run_target / _v1083=None"
    let v1214 : int64 = v14.l0
    let v1215 : std_string_String = v2 ()
    let v1216 : string = ""
    let v1217 : Mut4 = {l0 = v1216} : Mut4
    method98(v1217, v1215)
    let v1218 : string = v1217.l0
    let v1221 : string = $"{v826} {v1195} #{v1214} %s{v1 ()} / {v1218}"
    let v1228 : char list = []
    let v1233 : (char list -> (char [])) = List.toArray
    let v1234 : (char []) = v1233 v1228
    let v1241 : string = v1221.TrimStart v1234 
    let v1280 : char list = []
    let v1283 : char list = '/' :: v1280 
    let v1292 : char list = ' ' :: v1283 
    let v1303 : (char list -> (char [])) = List.toArray
    let v1304 : (char []) = v1303 v1292
    let v1311 : string = v1241.TrimEnd v1304 
    v1311
and method97 (v0 : US0, v1 : (unit -> string), v2 : (unit -> std_string_String)) : unit =
    let v3 : (unit -> string) = closure47(v0, v1, v2)
    method13(v0, v3)
and closure48 (v0 : string) () : string =
    v0
and closure49 () () : unit =
    ()
and closure50 (v0 : US0, v1 : (unit -> string), v2 : (unit -> unit)) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = $"near_sdk::env::block_timestamp()"
    let v331 : uint64 = Fable.Core.RustInterop.emitRustExpr () v330 
    let v334 : US2 option = None
    let _v334 = ref v334 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v335 : int64 = x
    let v336 : US2 = US2_0(v335)
    v336 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v334.Value <- x
    let v337 : US2 option = _v334.Value 
    let v360 : US2 = US2_1
    let v361 : US2 = v337 |> Option.defaultValue v360 
    let v374 : uint64 =
        match v361 with
        | US2_1 -> (* None *)
            v331
        | US2_0(v369) -> (* Some *)
            let v370 : (int64 -> uint64) = uint64
            let v371 : uint64 = v370 v369
            let v372 : uint64 = v331 - v371
            v372
    let v375 : uint64 = v374 / 1000000000UL
    let v376 : uint64 = v375 % 60UL
    let v377 : uint64 = v375 / 60UL
    let v378 : uint64 = v377 % 60UL
    let v379 : uint64 = v375 / 3600UL
    let v380 : uint64 = v379 % 24UL
    let v381 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v382 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v380, v378, v376) v381 
    let v383 : string = "fable_library_rust::String_::fromString($0)"
    let v384 : string = Fable.Core.RustInterop.emitRustExpr v382 v383 
    v384 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v387 : US2 option = None
    let _v387 = ref v387 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v388 : int64 = x
    let v389 : US2 = US2_0(v388)
    v389 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v387.Value <- x
    let v390 : US2 option = _v387.Value 
    let v413 : US2 = US2_1
    let v414 : US2 = v390 |> Option.defaultValue v413 
    let v512 : System.DateTime =
        match v414 with
        | US2_1 -> (* None *)
            let v504 : System.DateTime = System.DateTime.Now
            v504
        | US2_0(v422) -> (* Some *)
            let v425 : System.DateTime = System.DateTime.Now
            let v434 : (System.DateTime -> int64) = _.Ticks
            let v435 : int64 = v434 v425
            let v442 : int64 = v435 - v422
            let v445 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v446 : System.TimeSpan = v445 v442
            let v455 : (System.TimeSpan -> int32) = _.Hours
            let v456 : int32 = v455 v446
            let v465 : (System.TimeSpan -> int32) = _.Minutes
            let v466 : int32 = v465 v446
            let v475 : (System.TimeSpan -> int32) = _.Seconds
            let v476 : int32 = v475 v446
            let v485 : (System.TimeSpan -> int32) = _.Milliseconds
            let v486 : int32 = v485 v446
            let v495 : System.DateTime = System.DateTime (1, 1, 1, v456, v466, v476, v486)
            v495
    let v515 : string = method7()
    let v524 : (string -> string) = v512.ToString
    let v525 : string = v524 v515
    v525 
    #endif
#if FABLE_COMPILER_PYTHON
    let v534 : US2 option = None
    let _v534 = ref v534 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v535 : int64 = x
    let v536 : US2 = US2_0(v535)
    v536 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v534.Value <- x
    let v537 : US2 option = _v534.Value 
    let v560 : US2 = US2_1
    let v561 : US2 = v537 |> Option.defaultValue v560 
    let v659 : System.DateTime =
        match v561 with
        | US2_1 -> (* None *)
            let v651 : System.DateTime = System.DateTime.Now
            v651
        | US2_0(v569) -> (* Some *)
            let v572 : System.DateTime = System.DateTime.Now
            let v581 : (System.DateTime -> int64) = _.Ticks
            let v582 : int64 = v581 v572
            let v589 : int64 = v582 - v569
            let v592 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v593 : System.TimeSpan = v592 v589
            let v602 : (System.TimeSpan -> int32) = _.Hours
            let v603 : int32 = v602 v593
            let v612 : (System.TimeSpan -> int32) = _.Minutes
            let v613 : int32 = v612 v593
            let v622 : (System.TimeSpan -> int32) = _.Seconds
            let v623 : int32 = v622 v593
            let v632 : (System.TimeSpan -> int32) = _.Milliseconds
            let v633 : int32 = v632 v593
            let v642 : System.DateTime = System.DateTime (1, 1, 1, v603, v613, v623, v633)
            v642
    let v662 : string = method7()
    let v671 : (string -> string) = v659.ToString
    let v672 : string = v671 v662
    v672 
    #endif
#else
    let v681 : US2 option = None
    let _v681 = ref v681 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v682 : int64 = x
    let v683 : US2 = US2_0(v682)
    v683 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v681.Value <- x
    let v684 : US2 option = _v681.Value 
    let v707 : US2 = US2_1
    let v708 : US2 = v684 |> Option.defaultValue v707 
    let v806 : System.DateTime =
        match v708 with
        | US2_1 -> (* None *)
            let v798 : System.DateTime = System.DateTime.Now
            v798
        | US2_0(v716) -> (* Some *)
            let v719 : System.DateTime = System.DateTime.Now
            let v728 : (System.DateTime -> int64) = _.Ticks
            let v729 : int64 = v728 v719
            let v736 : int64 = v729 - v716
            let v739 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v740 : System.TimeSpan = v739 v736
            let v749 : (System.TimeSpan -> int32) = _.Hours
            let v750 : int32 = v749 v740
            let v759 : (System.TimeSpan -> int32) = _.Minutes
            let v760 : int32 = v759 v740
            let v769 : (System.TimeSpan -> int32) = _.Seconds
            let v770 : int32 = v769 v740
            let v779 : (System.TimeSpan -> int32) = _.Milliseconds
            let v780 : int32 = v779 v740
            let v789 : System.DateTime = System.DateTime (1, 1, 1, v750, v760, v770, v780)
            v789
    let v809 : string = method7()
    let v818 : (string -> string) = v806.ToString
    let v819 : string = v818 v809
    v819 
    #endif
    |> fun x -> _v35 <- Some x
    let v826 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v981 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v985 : US3 =
        if v981 then
            let v982 : string = "Verbose"
            US3_0(v982)
        else
            US3_1
    let v1034 : US3 =
        match v985 with
        | US3_1 -> (* None *)
            let v990 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v994 : US3 =
                if v990 then
                    let v991 : string = "Debug"
                    US3_0(v991)
                else
                    US3_1
            match v994 with
            | US3_1 -> (* None *)
                let v999 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v1003 : US3 =
                    if v999 then
                        let v1000 : string = "Info"
                        US3_0(v1000)
                    else
                        US3_1
                match v1003 with
                | US3_1 -> (* None *)
                    let v1008 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v1012 : US3 =
                        if v1008 then
                            let v1009 : string = "Warning"
                            US3_0(v1009)
                        else
                            US3_1
                    match v1012 with
                    | US3_1 -> (* None *)
                        let v1017 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v1021 : US3 =
                            if v1017 then
                                let v1018 : string = "Critical"
                                US3_0(v1018)
                            else
                                US3_1
                        match v1021 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v1022) -> (* Some *)
                            US3_0(v1022)
                    | US3_0(v1013) -> (* Some *)
                        US3_0(v1013)
                | US3_0(v1004) -> (* Some *)
                    US3_0(v1004)
            | US3_0(v995) -> (* Some *)
                US3_0(v995)
        | US3_0(v986) -> (* Some *)
            US3_0(v986)
    let v1038 : string =
        match v1034 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v1035) -> (* Some *)
            v1035
    let v1041 : (unit -> string) = v1038.ToLower
    let v1042 : string = v1041 ()
    let v1051 : string = v1042.PadLeft (7, ' ')
    let v1083 : bool = true
    let mutable _v1083 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1098 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1092 : string = "inline_colorization::color_bright_red"
            let v1093 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1092 
            v1093
        | US0_1 -> (* Debug *)
            let v1086 : string = "inline_colorization::color_bright_blue"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_2 -> (* Info *)
            let v1088 : string = "inline_colorization::color_bright_green"
            let v1089 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1088 
            v1089
        | US0_0 -> (* Verbose *)
            let v1084 : string = "inline_colorization::color_bright_black"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
        | US0_3 -> (* Warning *)
            let v1090 : string = "inline_colorization::color_yellow"
            let v1091 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1090 
            v1091
    let v1099 : string = "&*$0"
    let v1100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1099 
    let v1101 : string = "inline_colorization::color_reset"
    let v1102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1101 
    let v1103 : string = "\"{v1098}{v1100}{v1102}\""
    let v1104 : string = @$"format!(" + v1103 + ")"
    let v1105 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1104 
    let v1106 : string = "fable_library_rust::String_::fromString($0)"
    let v1107 : string = Fable.Core.RustInterop.emitRustExpr v1105 v1106 
    v1107 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1122 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1116 : string = "inline_colorization::color_bright_red"
            let v1117 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1116 
            v1117
        | US0_1 -> (* Debug *)
            let v1110 : string = "inline_colorization::color_bright_blue"
            let v1111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1110 
            v1111
        | US0_2 -> (* Info *)
            let v1112 : string = "inline_colorization::color_bright_green"
            let v1113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1112 
            v1113
        | US0_0 -> (* Verbose *)
            let v1108 : string = "inline_colorization::color_bright_black"
            let v1109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1108 
            v1109
        | US0_3 -> (* Warning *)
            let v1114 : string = "inline_colorization::color_yellow"
            let v1115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1114 
            v1115
    let v1123 : string = "&*$0"
    let v1124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1123 
    let v1125 : string = "inline_colorization::color_reset"
    let v1126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1125 
    let v1127 : string = "\"{v1122}{v1124}{v1126}\""
    let v1128 : string = @$"format!(" + v1127 + ")"
    let v1129 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1128 
    let v1130 : string = "fable_library_rust::String_::fromString($0)"
    let v1131 : string = Fable.Core.RustInterop.emitRustExpr v1129 v1130 
    v1131 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1146 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1140 : string = "inline_colorization::color_bright_red"
            let v1141 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1140 
            v1141
        | US0_1 -> (* Debug *)
            let v1134 : string = "inline_colorization::color_bright_blue"
            let v1135 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1134 
            v1135
        | US0_2 -> (* Info *)
            let v1136 : string = "inline_colorization::color_bright_green"
            let v1137 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1136 
            v1137
        | US0_0 -> (* Verbose *)
            let v1132 : string = "inline_colorization::color_bright_black"
            let v1133 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1132 
            v1133
        | US0_3 -> (* Warning *)
            let v1138 : string = "inline_colorization::color_yellow"
            let v1139 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1138 
            v1139
    let v1147 : string = "&*$0"
    let v1148 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1147 
    let v1149 : string = "inline_colorization::color_reset"
    let v1150 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1149 
    let v1151 : string = "\"{v1146}{v1148}{v1150}\""
    let v1152 : string = @$"format!(" + v1151 + ")"
    let v1153 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1152 
    let v1154 : string = "fable_library_rust::String_::fromString($0)"
    let v1155 : string = Fable.Core.RustInterop.emitRustExpr v1153 v1154 
    v1155 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1165 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1160 : string = "\u001b[91m"
            v1160
        | US0_1 -> (* Debug *)
            let v1157 : string = "\u001b[94m"
            v1157
        | US0_2 -> (* Info *)
            let v1158 : string = "\u001b[92m"
            v1158
        | US0_0 -> (* Verbose *)
            let v1156 : string = "\u001b[90m"
            v1156
        | US0_3 -> (* Warning *)
            let v1159 : string = "\u001b[93m"
            v1159
    let v1166 : string = method8()
    let v1167 : string = v1165 + v1051 
    let v1168 : string = v1167 + v1166 
    v1168 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1178 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1173 : string = "\u001b[91m"
            v1173
        | US0_1 -> (* Debug *)
            let v1170 : string = "\u001b[94m"
            v1170
        | US0_2 -> (* Info *)
            let v1171 : string = "\u001b[92m"
            v1171
        | US0_0 -> (* Verbose *)
            let v1169 : string = "\u001b[90m"
            v1169
        | US0_3 -> (* Warning *)
            let v1172 : string = "\u001b[93m"
            v1172
    let v1179 : string = method8()
    let v1180 : string = v1178 + v1051 
    let v1181 : string = v1180 + v1179 
    v1181 
    #endif
#else
    let v1191 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1186 : string = "\u001b[91m"
            v1186
        | US0_1 -> (* Debug *)
            let v1183 : string = "\u001b[94m"
            v1183
        | US0_2 -> (* Info *)
            let v1184 : string = "\u001b[92m"
            v1184
        | US0_0 -> (* Verbose *)
            let v1182 : string = "\u001b[90m"
            v1182
        | US0_3 -> (* Warning *)
            let v1185 : string = "\u001b[93m"
            v1185
    let v1192 : string = method8()
    let v1193 : string = v1191 + v1051 
    let v1194 : string = v1193 + v1192 
    v1194 
    #endif
    |> fun x -> _v1083 <- Some x
    let v1195 : string = match _v1083 with Some x -> x | None -> failwith "base.run_target / _v1083=None"
    let v1214 : int64 = v14.l0
    v2 ()
    let v1215 : string = ""
    let v1216 : Mut4 = {l0 = v1215} : Mut4
    method11(v1216)
    let v1217 : string = v1216.l0
    let v1220 : string = $"{v826} {v1195} #{v1214} %s{v1 ()} / {v1217}"
    let v1227 : char list = []
    let v1232 : (char list -> (char [])) = List.toArray
    let v1233 : (char []) = v1232 v1227
    let v1240 : string = v1220.TrimStart v1233 
    let v1279 : char list = []
    let v1282 : char list = '/' :: v1279 
    let v1291 : char list = ' ' :: v1282 
    let v1302 : (char list -> (char [])) = List.toArray
    let v1303 : (char []) = v1302 v1291
    let v1310 : string = v1240.TrimEnd v1303 
    v1310
and method99 (v0 : US0, v1 : (unit -> string), v2 : (unit -> unit)) : unit =
    let v3 : (unit -> string) = closure50(v0, v1, v2)
    method13(v0, v3)
and method100 (v0 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>>) : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> =
    v0
and closure51 () (v0 : std_sync_mpsc_SendError<std_string_String>) : std_string_String =
    let v3 : bool = true
    let mutable _v3 : std_string_String option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    v5 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    v7 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    v9 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : std_string_String = null |> unbox<std_string_String>
    v12 
    #endif
#if FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    v21 
    #endif
#else
    let v30 : std_string_String = null |> unbox<std_string_String>
    v30 
    #endif
    |> fun x -> _v3 <- Some x
    let v37 : std_string_String = match _v3 with Some x -> x | None -> failwith "base.run_target / _v3=None"
    v37
and method101 () : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) =
    closure51()
and method102 (v0 : Result<unit, string>) : Result<unit, string> =
    v0
and method103 (v0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>>) : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> =
    v0
and method104 (v0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>>) : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> =
    v0
and method105 (v0 : std_sync_MutexGuard<std_process_ChildStdin>) : std_sync_MutexGuard<std_process_ChildStdin> =
    v0
and method106 (v0 : std_thread_JoinHandle<Result<unit, string>>) : std_thread_JoinHandle<Result<unit, string>> =
    v0
and closure52 () (v0 : std_process_Output) : US29 =
    US29_0(v0)
and closure53 () (v0 : std_string_String) : US29 =
    US29_1(v0)
and closure54 () () : string =
    let v0 : string = $"runtime.execute_with_options / output error"
    v0
and closure55 (v0 : std_string_String) () : std_string_String =
    v0
and method107 (v0 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>) : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> =
    v0
and closure56 () () : string =
    let v0 : string = $"runtime.execute_with_options / result"
    v0
and closure57 (v0 : int32, v1 : string) () : struct (int32 * int32) =
    let v2 : int32 = v1.Length
    struct (v0, v2)
and method110 (v0 : Mut4, v1 : int32) : unit =
    let v4 : string = $"{v1}"
    let v11 : string = v0.l0
    let v12 : string = v11 + v4 
    v0.l0 <- v12
    ()
and method109 (v0 : Mut4, v1 : int32, v2 : int32) : unit =
    let v3 : string = "{ "
    method10(v0, v3)
    method11(v0)
    let v4 : string = "exit_code"
    method10(v0, v4)
    let v5 : string = " = "
    method10(v0, v5)
    method110(v0, v1)
    let v6 : string = "; "
    method10(v0, v6)
    let v7 : string = "std_trace_length"
    method10(v0, v7)
    method10(v0, v5)
    method110(v0, v2)
    let v8 : string = " }"
    method10(v0, v8)
and closure58 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * int32))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = $"near_sdk::env::block_timestamp()"
    let v331 : uint64 = Fable.Core.RustInterop.emitRustExpr () v330 
    let v334 : US2 option = None
    let _v334 = ref v334 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v335 : int64 = x
    let v336 : US2 = US2_0(v335)
    v336 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v334.Value <- x
    let v337 : US2 option = _v334.Value 
    let v360 : US2 = US2_1
    let v361 : US2 = v337 |> Option.defaultValue v360 
    let v374 : uint64 =
        match v361 with
        | US2_1 -> (* None *)
            v331
        | US2_0(v369) -> (* Some *)
            let v370 : (int64 -> uint64) = uint64
            let v371 : uint64 = v370 v369
            let v372 : uint64 = v331 - v371
            v372
    let v375 : uint64 = v374 / 1000000000UL
    let v376 : uint64 = v375 % 60UL
    let v377 : uint64 = v375 / 60UL
    let v378 : uint64 = v377 % 60UL
    let v379 : uint64 = v375 / 3600UL
    let v380 : uint64 = v379 % 24UL
    let v381 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v382 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v380, v378, v376) v381 
    let v383 : string = "fable_library_rust::String_::fromString($0)"
    let v384 : string = Fable.Core.RustInterop.emitRustExpr v382 v383 
    v384 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v387 : US2 option = None
    let _v387 = ref v387 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v388 : int64 = x
    let v389 : US2 = US2_0(v388)
    v389 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v387.Value <- x
    let v390 : US2 option = _v387.Value 
    let v413 : US2 = US2_1
    let v414 : US2 = v390 |> Option.defaultValue v413 
    let v512 : System.DateTime =
        match v414 with
        | US2_1 -> (* None *)
            let v504 : System.DateTime = System.DateTime.Now
            v504
        | US2_0(v422) -> (* Some *)
            let v425 : System.DateTime = System.DateTime.Now
            let v434 : (System.DateTime -> int64) = _.Ticks
            let v435 : int64 = v434 v425
            let v442 : int64 = v435 - v422
            let v445 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v446 : System.TimeSpan = v445 v442
            let v455 : (System.TimeSpan -> int32) = _.Hours
            let v456 : int32 = v455 v446
            let v465 : (System.TimeSpan -> int32) = _.Minutes
            let v466 : int32 = v465 v446
            let v475 : (System.TimeSpan -> int32) = _.Seconds
            let v476 : int32 = v475 v446
            let v485 : (System.TimeSpan -> int32) = _.Milliseconds
            let v486 : int32 = v485 v446
            let v495 : System.DateTime = System.DateTime (1, 1, 1, v456, v466, v476, v486)
            v495
    let v515 : string = method7()
    let v524 : (string -> string) = v512.ToString
    let v525 : string = v524 v515
    v525 
    #endif
#if FABLE_COMPILER_PYTHON
    let v534 : US2 option = None
    let _v534 = ref v534 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v535 : int64 = x
    let v536 : US2 = US2_0(v535)
    v536 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v534.Value <- x
    let v537 : US2 option = _v534.Value 
    let v560 : US2 = US2_1
    let v561 : US2 = v537 |> Option.defaultValue v560 
    let v659 : System.DateTime =
        match v561 with
        | US2_1 -> (* None *)
            let v651 : System.DateTime = System.DateTime.Now
            v651
        | US2_0(v569) -> (* Some *)
            let v572 : System.DateTime = System.DateTime.Now
            let v581 : (System.DateTime -> int64) = _.Ticks
            let v582 : int64 = v581 v572
            let v589 : int64 = v582 - v569
            let v592 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v593 : System.TimeSpan = v592 v589
            let v602 : (System.TimeSpan -> int32) = _.Hours
            let v603 : int32 = v602 v593
            let v612 : (System.TimeSpan -> int32) = _.Minutes
            let v613 : int32 = v612 v593
            let v622 : (System.TimeSpan -> int32) = _.Seconds
            let v623 : int32 = v622 v593
            let v632 : (System.TimeSpan -> int32) = _.Milliseconds
            let v633 : int32 = v632 v593
            let v642 : System.DateTime = System.DateTime (1, 1, 1, v603, v613, v623, v633)
            v642
    let v662 : string = method7()
    let v671 : (string -> string) = v659.ToString
    let v672 : string = v671 v662
    v672 
    #endif
#else
    let v681 : US2 option = None
    let _v681 = ref v681 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v682 : int64 = x
    let v683 : US2 = US2_0(v682)
    v683 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v681.Value <- x
    let v684 : US2 option = _v681.Value 
    let v707 : US2 = US2_1
    let v708 : US2 = v684 |> Option.defaultValue v707 
    let v806 : System.DateTime =
        match v708 with
        | US2_1 -> (* None *)
            let v798 : System.DateTime = System.DateTime.Now
            v798
        | US2_0(v716) -> (* Some *)
            let v719 : System.DateTime = System.DateTime.Now
            let v728 : (System.DateTime -> int64) = _.Ticks
            let v729 : int64 = v728 v719
            let v736 : int64 = v729 - v716
            let v739 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v740 : System.TimeSpan = v739 v736
            let v749 : (System.TimeSpan -> int32) = _.Hours
            let v750 : int32 = v749 v740
            let v759 : (System.TimeSpan -> int32) = _.Minutes
            let v760 : int32 = v759 v740
            let v769 : (System.TimeSpan -> int32) = _.Seconds
            let v770 : int32 = v769 v740
            let v779 : (System.TimeSpan -> int32) = _.Milliseconds
            let v780 : int32 = v779 v740
            let v789 : System.DateTime = System.DateTime (1, 1, 1, v750, v760, v770, v780)
            v789
    let v809 : string = method7()
    let v818 : (string -> string) = v806.ToString
    let v819 : string = v818 v809
    v819 
    #endif
    |> fun x -> _v35 <- Some x
    let v826 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v981 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v985 : US3 =
        if v981 then
            let v982 : string = "Verbose"
            US3_0(v982)
        else
            US3_1
    let v1034 : US3 =
        match v985 with
        | US3_1 -> (* None *)
            let v990 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v994 : US3 =
                if v990 then
                    let v991 : string = "Debug"
                    US3_0(v991)
                else
                    US3_1
            match v994 with
            | US3_1 -> (* None *)
                let v999 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v1003 : US3 =
                    if v999 then
                        let v1000 : string = "Info"
                        US3_0(v1000)
                    else
                        US3_1
                match v1003 with
                | US3_1 -> (* None *)
                    let v1008 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v1012 : US3 =
                        if v1008 then
                            let v1009 : string = "Warning"
                            US3_0(v1009)
                        else
                            US3_1
                    match v1012 with
                    | US3_1 -> (* None *)
                        let v1017 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v1021 : US3 =
                            if v1017 then
                                let v1018 : string = "Critical"
                                US3_0(v1018)
                            else
                                US3_1
                        match v1021 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v1022) -> (* Some *)
                            US3_0(v1022)
                    | US3_0(v1013) -> (* Some *)
                        US3_0(v1013)
                | US3_0(v1004) -> (* Some *)
                    US3_0(v1004)
            | US3_0(v995) -> (* Some *)
                US3_0(v995)
        | US3_0(v986) -> (* Some *)
            US3_0(v986)
    let v1038 : string =
        match v1034 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v1035) -> (* Some *)
            v1035
    let v1041 : (unit -> string) = v1038.ToLower
    let v1042 : string = v1041 ()
    let v1051 : string = v1042.PadLeft (7, ' ')
    let v1083 : bool = true
    let mutable _v1083 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1098 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1092 : string = "inline_colorization::color_bright_red"
            let v1093 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1092 
            v1093
        | US0_1 -> (* Debug *)
            let v1086 : string = "inline_colorization::color_bright_blue"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_2 -> (* Info *)
            let v1088 : string = "inline_colorization::color_bright_green"
            let v1089 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1088 
            v1089
        | US0_0 -> (* Verbose *)
            let v1084 : string = "inline_colorization::color_bright_black"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
        | US0_3 -> (* Warning *)
            let v1090 : string = "inline_colorization::color_yellow"
            let v1091 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1090 
            v1091
    let v1099 : string = "&*$0"
    let v1100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1099 
    let v1101 : string = "inline_colorization::color_reset"
    let v1102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1101 
    let v1103 : string = "\"{v1098}{v1100}{v1102}\""
    let v1104 : string = @$"format!(" + v1103 + ")"
    let v1105 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1104 
    let v1106 : string = "fable_library_rust::String_::fromString($0)"
    let v1107 : string = Fable.Core.RustInterop.emitRustExpr v1105 v1106 
    v1107 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1122 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1116 : string = "inline_colorization::color_bright_red"
            let v1117 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1116 
            v1117
        | US0_1 -> (* Debug *)
            let v1110 : string = "inline_colorization::color_bright_blue"
            let v1111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1110 
            v1111
        | US0_2 -> (* Info *)
            let v1112 : string = "inline_colorization::color_bright_green"
            let v1113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1112 
            v1113
        | US0_0 -> (* Verbose *)
            let v1108 : string = "inline_colorization::color_bright_black"
            let v1109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1108 
            v1109
        | US0_3 -> (* Warning *)
            let v1114 : string = "inline_colorization::color_yellow"
            let v1115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1114 
            v1115
    let v1123 : string = "&*$0"
    let v1124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1123 
    let v1125 : string = "inline_colorization::color_reset"
    let v1126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1125 
    let v1127 : string = "\"{v1122}{v1124}{v1126}\""
    let v1128 : string = @$"format!(" + v1127 + ")"
    let v1129 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1128 
    let v1130 : string = "fable_library_rust::String_::fromString($0)"
    let v1131 : string = Fable.Core.RustInterop.emitRustExpr v1129 v1130 
    v1131 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1146 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1140 : string = "inline_colorization::color_bright_red"
            let v1141 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1140 
            v1141
        | US0_1 -> (* Debug *)
            let v1134 : string = "inline_colorization::color_bright_blue"
            let v1135 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1134 
            v1135
        | US0_2 -> (* Info *)
            let v1136 : string = "inline_colorization::color_bright_green"
            let v1137 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1136 
            v1137
        | US0_0 -> (* Verbose *)
            let v1132 : string = "inline_colorization::color_bright_black"
            let v1133 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1132 
            v1133
        | US0_3 -> (* Warning *)
            let v1138 : string = "inline_colorization::color_yellow"
            let v1139 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1138 
            v1139
    let v1147 : string = "&*$0"
    let v1148 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1147 
    let v1149 : string = "inline_colorization::color_reset"
    let v1150 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1149 
    let v1151 : string = "\"{v1146}{v1148}{v1150}\""
    let v1152 : string = @$"format!(" + v1151 + ")"
    let v1153 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1152 
    let v1154 : string = "fable_library_rust::String_::fromString($0)"
    let v1155 : string = Fable.Core.RustInterop.emitRustExpr v1153 v1154 
    v1155 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1165 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1160 : string = "\u001b[91m"
            v1160
        | US0_1 -> (* Debug *)
            let v1157 : string = "\u001b[94m"
            v1157
        | US0_2 -> (* Info *)
            let v1158 : string = "\u001b[92m"
            v1158
        | US0_0 -> (* Verbose *)
            let v1156 : string = "\u001b[90m"
            v1156
        | US0_3 -> (* Warning *)
            let v1159 : string = "\u001b[93m"
            v1159
    let v1166 : string = method8()
    let v1167 : string = v1165 + v1051 
    let v1168 : string = v1167 + v1166 
    v1168 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1178 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1173 : string = "\u001b[91m"
            v1173
        | US0_1 -> (* Debug *)
            let v1170 : string = "\u001b[94m"
            v1170
        | US0_2 -> (* Info *)
            let v1171 : string = "\u001b[92m"
            v1171
        | US0_0 -> (* Verbose *)
            let v1169 : string = "\u001b[90m"
            v1169
        | US0_3 -> (* Warning *)
            let v1172 : string = "\u001b[93m"
            v1172
    let v1179 : string = method8()
    let v1180 : string = v1178 + v1051 
    let v1181 : string = v1180 + v1179 
    v1181 
    #endif
#else
    let v1191 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1186 : string = "\u001b[91m"
            v1186
        | US0_1 -> (* Debug *)
            let v1183 : string = "\u001b[94m"
            v1183
        | US0_2 -> (* Info *)
            let v1184 : string = "\u001b[92m"
            v1184
        | US0_0 -> (* Verbose *)
            let v1182 : string = "\u001b[90m"
            v1182
        | US0_3 -> (* Warning *)
            let v1185 : string = "\u001b[93m"
            v1185
    let v1192 : string = method8()
    let v1193 : string = v1191 + v1051 
    let v1194 : string = v1193 + v1192 
    v1194 
    #endif
    |> fun x -> _v1083 <- Some x
    let v1195 : string = match _v1083 with Some x -> x | None -> failwith "base.run_target / _v1083=None"
    let v1214 : int64 = v14.l0
    let struct (v1215 : int32, v1216 : int32) = v2 ()
    let v1217 : string = ""
    let v1218 : Mut4 = {l0 = v1217} : Mut4
    method109(v1218, v1215, v1216)
    let v1219 : string = v1218.l0
    let v1222 : string = $"{v826} {v1195} #{v1214} %s{v1 ()} / {v1219}"
    let v1229 : char list = []
    let v1234 : (char list -> (char [])) = List.toArray
    let v1235 : (char []) = v1234 v1229
    let v1242 : string = v1222.TrimStart v1235 
    let v1281 : char list = []
    let v1284 : char list = '/' :: v1281 
    let v1293 : char list = ' ' :: v1284 
    let v1304 : (char list -> (char [])) = List.toArray
    let v1305 : (char []) = v1304 v1293
    let v1312 : string = v1242.TrimEnd v1305 
    v1312
and method108 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * int32))) : unit =
    let v3 : (unit -> string) = closure58(v0, v1, v2)
    method13(v0, v3)
and closure59 () () : string =
    let v0 : string = $"runtime.execute_with_options_async"
    v0
and closure60 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) () : struct (string * System.Threading.CancellationToken option * (struct (string * string) []) * (struct (int32 * string * bool) -> Async<unit>) option * (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option * bool * string option) =
    struct (v0, v1, v2, v3, v4, v5, v6)
and method113 (v0 : Mut4, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option) : unit =
    let v8 : string = "{ "
    method10(v0, v8)
    method11(v0)
    let v9 : string = "options"
    method10(v0, v9)
    let v10 : string = " = "
    method10(v0, v10)
    method83(v0, v1, v2, v3, v4, v5, v6, v7)
    let v11 : string = " }"
    method10(v0, v11)
and closure61 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (string * System.Threading.CancellationToken option * (struct (string * string) []) * (struct (int32 * string * bool) -> Async<unit>) option * (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option * bool * string option))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = $"near_sdk::env::block_timestamp()"
    let v331 : uint64 = Fable.Core.RustInterop.emitRustExpr () v330 
    let v334 : US2 option = None
    let _v334 = ref v334 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v335 : int64 = x
    let v336 : US2 = US2_0(v335)
    v336 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v334.Value <- x
    let v337 : US2 option = _v334.Value 
    let v360 : US2 = US2_1
    let v361 : US2 = v337 |> Option.defaultValue v360 
    let v374 : uint64 =
        match v361 with
        | US2_1 -> (* None *)
            v331
        | US2_0(v369) -> (* Some *)
            let v370 : (int64 -> uint64) = uint64
            let v371 : uint64 = v370 v369
            let v372 : uint64 = v331 - v371
            v372
    let v375 : uint64 = v374 / 1000000000UL
    let v376 : uint64 = v375 % 60UL
    let v377 : uint64 = v375 / 60UL
    let v378 : uint64 = v377 % 60UL
    let v379 : uint64 = v375 / 3600UL
    let v380 : uint64 = v379 % 24UL
    let v381 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v382 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v380, v378, v376) v381 
    let v383 : string = "fable_library_rust::String_::fromString($0)"
    let v384 : string = Fable.Core.RustInterop.emitRustExpr v382 v383 
    v384 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v387 : US2 option = None
    let _v387 = ref v387 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v388 : int64 = x
    let v389 : US2 = US2_0(v388)
    v389 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v387.Value <- x
    let v390 : US2 option = _v387.Value 
    let v413 : US2 = US2_1
    let v414 : US2 = v390 |> Option.defaultValue v413 
    let v512 : System.DateTime =
        match v414 with
        | US2_1 -> (* None *)
            let v504 : System.DateTime = System.DateTime.Now
            v504
        | US2_0(v422) -> (* Some *)
            let v425 : System.DateTime = System.DateTime.Now
            let v434 : (System.DateTime -> int64) = _.Ticks
            let v435 : int64 = v434 v425
            let v442 : int64 = v435 - v422
            let v445 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v446 : System.TimeSpan = v445 v442
            let v455 : (System.TimeSpan -> int32) = _.Hours
            let v456 : int32 = v455 v446
            let v465 : (System.TimeSpan -> int32) = _.Minutes
            let v466 : int32 = v465 v446
            let v475 : (System.TimeSpan -> int32) = _.Seconds
            let v476 : int32 = v475 v446
            let v485 : (System.TimeSpan -> int32) = _.Milliseconds
            let v486 : int32 = v485 v446
            let v495 : System.DateTime = System.DateTime (1, 1, 1, v456, v466, v476, v486)
            v495
    let v515 : string = method7()
    let v524 : (string -> string) = v512.ToString
    let v525 : string = v524 v515
    v525 
    #endif
#if FABLE_COMPILER_PYTHON
    let v534 : US2 option = None
    let _v534 = ref v534 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v535 : int64 = x
    let v536 : US2 = US2_0(v535)
    v536 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v534.Value <- x
    let v537 : US2 option = _v534.Value 
    let v560 : US2 = US2_1
    let v561 : US2 = v537 |> Option.defaultValue v560 
    let v659 : System.DateTime =
        match v561 with
        | US2_1 -> (* None *)
            let v651 : System.DateTime = System.DateTime.Now
            v651
        | US2_0(v569) -> (* Some *)
            let v572 : System.DateTime = System.DateTime.Now
            let v581 : (System.DateTime -> int64) = _.Ticks
            let v582 : int64 = v581 v572
            let v589 : int64 = v582 - v569
            let v592 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v593 : System.TimeSpan = v592 v589
            let v602 : (System.TimeSpan -> int32) = _.Hours
            let v603 : int32 = v602 v593
            let v612 : (System.TimeSpan -> int32) = _.Minutes
            let v613 : int32 = v612 v593
            let v622 : (System.TimeSpan -> int32) = _.Seconds
            let v623 : int32 = v622 v593
            let v632 : (System.TimeSpan -> int32) = _.Milliseconds
            let v633 : int32 = v632 v593
            let v642 : System.DateTime = System.DateTime (1, 1, 1, v603, v613, v623, v633)
            v642
    let v662 : string = method7()
    let v671 : (string -> string) = v659.ToString
    let v672 : string = v671 v662
    v672 
    #endif
#else
    let v681 : US2 option = None
    let _v681 = ref v681 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v682 : int64 = x
    let v683 : US2 = US2_0(v682)
    v683 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v681.Value <- x
    let v684 : US2 option = _v681.Value 
    let v707 : US2 = US2_1
    let v708 : US2 = v684 |> Option.defaultValue v707 
    let v806 : System.DateTime =
        match v708 with
        | US2_1 -> (* None *)
            let v798 : System.DateTime = System.DateTime.Now
            v798
        | US2_0(v716) -> (* Some *)
            let v719 : System.DateTime = System.DateTime.Now
            let v728 : (System.DateTime -> int64) = _.Ticks
            let v729 : int64 = v728 v719
            let v736 : int64 = v729 - v716
            let v739 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v740 : System.TimeSpan = v739 v736
            let v749 : (System.TimeSpan -> int32) = _.Hours
            let v750 : int32 = v749 v740
            let v759 : (System.TimeSpan -> int32) = _.Minutes
            let v760 : int32 = v759 v740
            let v769 : (System.TimeSpan -> int32) = _.Seconds
            let v770 : int32 = v769 v740
            let v779 : (System.TimeSpan -> int32) = _.Milliseconds
            let v780 : int32 = v779 v740
            let v789 : System.DateTime = System.DateTime (1, 1, 1, v750, v760, v770, v780)
            v789
    let v809 : string = method7()
    let v818 : (string -> string) = v806.ToString
    let v819 : string = v818 v809
    v819 
    #endif
    |> fun x -> _v35 <- Some x
    let v826 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v981 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v985 : US3 =
        if v981 then
            let v982 : string = "Verbose"
            US3_0(v982)
        else
            US3_1
    let v1034 : US3 =
        match v985 with
        | US3_1 -> (* None *)
            let v990 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v994 : US3 =
                if v990 then
                    let v991 : string = "Debug"
                    US3_0(v991)
                else
                    US3_1
            match v994 with
            | US3_1 -> (* None *)
                let v999 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v1003 : US3 =
                    if v999 then
                        let v1000 : string = "Info"
                        US3_0(v1000)
                    else
                        US3_1
                match v1003 with
                | US3_1 -> (* None *)
                    let v1008 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v1012 : US3 =
                        if v1008 then
                            let v1009 : string = "Warning"
                            US3_0(v1009)
                        else
                            US3_1
                    match v1012 with
                    | US3_1 -> (* None *)
                        let v1017 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v1021 : US3 =
                            if v1017 then
                                let v1018 : string = "Critical"
                                US3_0(v1018)
                            else
                                US3_1
                        match v1021 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v1022) -> (* Some *)
                            US3_0(v1022)
                    | US3_0(v1013) -> (* Some *)
                        US3_0(v1013)
                | US3_0(v1004) -> (* Some *)
                    US3_0(v1004)
            | US3_0(v995) -> (* Some *)
                US3_0(v995)
        | US3_0(v986) -> (* Some *)
            US3_0(v986)
    let v1038 : string =
        match v1034 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v1035) -> (* Some *)
            v1035
    let v1041 : (unit -> string) = v1038.ToLower
    let v1042 : string = v1041 ()
    let v1051 : string = v1042.PadLeft (7, ' ')
    let v1083 : bool = true
    let mutable _v1083 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1098 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1092 : string = "inline_colorization::color_bright_red"
            let v1093 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1092 
            v1093
        | US0_1 -> (* Debug *)
            let v1086 : string = "inline_colorization::color_bright_blue"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_2 -> (* Info *)
            let v1088 : string = "inline_colorization::color_bright_green"
            let v1089 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1088 
            v1089
        | US0_0 -> (* Verbose *)
            let v1084 : string = "inline_colorization::color_bright_black"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
        | US0_3 -> (* Warning *)
            let v1090 : string = "inline_colorization::color_yellow"
            let v1091 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1090 
            v1091
    let v1099 : string = "&*$0"
    let v1100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1099 
    let v1101 : string = "inline_colorization::color_reset"
    let v1102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1101 
    let v1103 : string = "\"{v1098}{v1100}{v1102}\""
    let v1104 : string = @$"format!(" + v1103 + ")"
    let v1105 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1104 
    let v1106 : string = "fable_library_rust::String_::fromString($0)"
    let v1107 : string = Fable.Core.RustInterop.emitRustExpr v1105 v1106 
    v1107 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1122 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1116 : string = "inline_colorization::color_bright_red"
            let v1117 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1116 
            v1117
        | US0_1 -> (* Debug *)
            let v1110 : string = "inline_colorization::color_bright_blue"
            let v1111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1110 
            v1111
        | US0_2 -> (* Info *)
            let v1112 : string = "inline_colorization::color_bright_green"
            let v1113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1112 
            v1113
        | US0_0 -> (* Verbose *)
            let v1108 : string = "inline_colorization::color_bright_black"
            let v1109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1108 
            v1109
        | US0_3 -> (* Warning *)
            let v1114 : string = "inline_colorization::color_yellow"
            let v1115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1114 
            v1115
    let v1123 : string = "&*$0"
    let v1124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1123 
    let v1125 : string = "inline_colorization::color_reset"
    let v1126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1125 
    let v1127 : string = "\"{v1122}{v1124}{v1126}\""
    let v1128 : string = @$"format!(" + v1127 + ")"
    let v1129 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1128 
    let v1130 : string = "fable_library_rust::String_::fromString($0)"
    let v1131 : string = Fable.Core.RustInterop.emitRustExpr v1129 v1130 
    v1131 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1146 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1140 : string = "inline_colorization::color_bright_red"
            let v1141 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1140 
            v1141
        | US0_1 -> (* Debug *)
            let v1134 : string = "inline_colorization::color_bright_blue"
            let v1135 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1134 
            v1135
        | US0_2 -> (* Info *)
            let v1136 : string = "inline_colorization::color_bright_green"
            let v1137 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1136 
            v1137
        | US0_0 -> (* Verbose *)
            let v1132 : string = "inline_colorization::color_bright_black"
            let v1133 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1132 
            v1133
        | US0_3 -> (* Warning *)
            let v1138 : string = "inline_colorization::color_yellow"
            let v1139 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1138 
            v1139
    let v1147 : string = "&*$0"
    let v1148 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1147 
    let v1149 : string = "inline_colorization::color_reset"
    let v1150 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1149 
    let v1151 : string = "\"{v1146}{v1148}{v1150}\""
    let v1152 : string = @$"format!(" + v1151 + ")"
    let v1153 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1152 
    let v1154 : string = "fable_library_rust::String_::fromString($0)"
    let v1155 : string = Fable.Core.RustInterop.emitRustExpr v1153 v1154 
    v1155 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1165 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1160 : string = "\u001b[91m"
            v1160
        | US0_1 -> (* Debug *)
            let v1157 : string = "\u001b[94m"
            v1157
        | US0_2 -> (* Info *)
            let v1158 : string = "\u001b[92m"
            v1158
        | US0_0 -> (* Verbose *)
            let v1156 : string = "\u001b[90m"
            v1156
        | US0_3 -> (* Warning *)
            let v1159 : string = "\u001b[93m"
            v1159
    let v1166 : string = method8()
    let v1167 : string = v1165 + v1051 
    let v1168 : string = v1167 + v1166 
    v1168 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1178 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1173 : string = "\u001b[91m"
            v1173
        | US0_1 -> (* Debug *)
            let v1170 : string = "\u001b[94m"
            v1170
        | US0_2 -> (* Info *)
            let v1171 : string = "\u001b[92m"
            v1171
        | US0_0 -> (* Verbose *)
            let v1169 : string = "\u001b[90m"
            v1169
        | US0_3 -> (* Warning *)
            let v1172 : string = "\u001b[93m"
            v1172
    let v1179 : string = method8()
    let v1180 : string = v1178 + v1051 
    let v1181 : string = v1180 + v1179 
    v1181 
    #endif
#else
    let v1191 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1186 : string = "\u001b[91m"
            v1186
        | US0_1 -> (* Debug *)
            let v1183 : string = "\u001b[94m"
            v1183
        | US0_2 -> (* Info *)
            let v1184 : string = "\u001b[92m"
            v1184
        | US0_0 -> (* Verbose *)
            let v1182 : string = "\u001b[90m"
            v1182
        | US0_3 -> (* Warning *)
            let v1185 : string = "\u001b[93m"
            v1185
    let v1192 : string = method8()
    let v1193 : string = v1191 + v1051 
    let v1194 : string = v1193 + v1192 
    v1194 
    #endif
    |> fun x -> _v1083 <- Some x
    let v1195 : string = match _v1083 with Some x -> x | None -> failwith "base.run_target / _v1083=None"
    let v1214 : int64 = v14.l0
    let struct (v1215 : string, v1216 : System.Threading.CancellationToken option, v1217 : (struct (string * string) []), v1218 : (struct (int32 * string * bool) -> Async<unit>) option, v1219 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v1220 : bool, v1221 : string option) = v2 ()
    let v1222 : string = ""
    let v1223 : Mut4 = {l0 = v1222} : Mut4
    method113(v1223, v1215, v1216, v1217, v1218, v1219, v1220, v1221)
    let v1224 : string = v1223.l0
    let v1227 : string = $"{v826} {v1195} #{v1214} %s{v1 ()} / {v1224}"
    let v1234 : char list = []
    let v1239 : (char list -> (char [])) = List.toArray
    let v1240 : (char []) = v1239 v1234
    let v1247 : string = v1227.TrimStart v1240 
    let v1286 : char list = []
    let v1289 : char list = '/' :: v1286 
    let v1298 : char list = ' ' :: v1289 
    let v1309 : (char list -> (char [])) = List.toArray
    let v1310 : (char []) = v1309 v1298
    let v1317 : string = v1247.TrimEnd v1310 
    v1317
and method112 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (string * System.Threading.CancellationToken option * (struct (string * string) []) * (struct (int32 * string * bool) -> Async<unit>) option * (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option * bool * string option))) : unit =
    let v3 : (unit -> string) = closure61(v0, v1, v2)
    method13(v0, v3)
and closure63 (v0 : string) () : string =
    v0
and closure62 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>) (v9 : System.Diagnostics.DataReceivedEventArgs) : unit =
    let v12 : bool = true
    let mutable _v12 : Async<unit> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v15 : Async<unit> = null |> unbox<Async<unit>>
    v15 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v24 : Async<unit> = null |> unbox<Async<unit>>
    v24 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v33 : Async<unit> = null |> unbox<Async<unit>>
    v33 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v42 : Async<unit> = null |> unbox<Async<unit>>
    v42 
    #endif
#if FABLE_COMPILER_PYTHON
    let v51 : Async<unit> = null |> unbox<Async<unit>>
    v51 
    #endif
#else
    let v58 : Async<unit> option = None
    let mutable _v58 = v58 
    async {
    let v59 : string = v9.Data
    let v62 : string = null |> unbox<string>
    let v69 : bool = v59 = v62
    let v70 : bool = v69 <> true
    if v70 then
        let v73 : US31 option = None
        let _v73 = ref v73 
        match v3 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v74 : (struct (int32 * string * bool) -> Async<unit>) = x
        let v75 : US31 = US31_0(v74)
        v75 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v73.Value <- x
        let v76 : US31 option = _v73.Value 
        let v99 : US31 = US31_1
        let v100 : US31 = v76 |> Option.defaultValue v99 
        match v100 with
        | US31_1 -> (* None *)
            ()
        | US31_0(v108) -> (* Some *)
            let v109 : int32 = v7.Id
            let v110 : Async<unit> = v108 struct (v109, v59, false)
            do! v110 
            ()
        let v111 : string = $"> {v59}"
        if v5 then
            let v112 : US0 = US0_0
            let v113 : (unit -> string) = closure63(v111)
            let v114 : (unit -> unit) = closure49()
            method99(v112, v113, v114)
        else
            v111 |> System.Console.WriteLine
            ()
        let v121 : string = ""
        let v122 : string = $"{v121}{v59}{v121}"
        let v123 : (string -> unit) = v8.Push
        v123 v122
    }
    |> fun x -> _v58 <- Some x
    let v124 : Async<unit> = match _v58 with Some x -> x | None -> failwith "async.new_async_unit / _v58=None"
    v124 
    #endif
    |> fun x -> _v12 <- Some x
    let v125 : Async<unit> = match _v12 with Some x -> x | None -> failwith "base.run_target / _v12=None"
    let v142 : bool = true
    let mutable _v142 : unit option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_PYTHON
    null |> unbox<unit>
    () 
    #endif
#else
    let v173 : (Async<unit> -> unit) = Async.StartImmediate
    v173 v125
    () 
    #endif
    |> fun x -> _v142 <- Some x
    match _v142 with Some x -> x | None -> failwith "base.run_target / _v142=None"
    ()
and closure64 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>) (v9 : System.Diagnostics.DataReceivedEventArgs) : unit =
    let v12 : bool = true
    let mutable _v12 : Async<unit> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v15 : Async<unit> = null |> unbox<Async<unit>>
    v15 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v24 : Async<unit> = null |> unbox<Async<unit>>
    v24 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v33 : Async<unit> = null |> unbox<Async<unit>>
    v33 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v42 : Async<unit> = null |> unbox<Async<unit>>
    v42 
    #endif
#if FABLE_COMPILER_PYTHON
    let v51 : Async<unit> = null |> unbox<Async<unit>>
    v51 
    #endif
#else
    let v58 : Async<unit> option = None
    let mutable _v58 = v58 
    async {
    let v59 : string = v9.Data
    let v62 : string = null |> unbox<string>
    let v69 : bool = v59 = v62
    let v70 : bool = v69 <> true
    if v70 then
        let v73 : US31 option = None
        let _v73 = ref v73 
        match v3 with
        | Some x -> (
        (fun () ->
        (fun () ->
        let v74 : (struct (int32 * string * bool) -> Async<unit>) = x
        let v75 : US31 = US31_0(v74)
        v75 
        )
        |> fun x -> x () |> Some
        ) () ) | None -> None
        |> fun x -> _v73.Value <- x
        let v76 : US31 option = _v73.Value 
        let v99 : US31 = US31_1
        let v100 : US31 = v76 |> Option.defaultValue v99 
        match v100 with
        | US31_1 -> (* None *)
            ()
        | US31_0(v108) -> (* Some *)
            let v109 : int32 = v7.Id
            let v110 : Async<unit> = v108 struct (v109, v59, true)
            do! v110 
            ()
        let v111 : string = $"! {v59}"
        if v5 then
            let v112 : US0 = US0_0
            let v113 : (unit -> string) = closure63(v111)
            let v114 : (unit -> unit) = closure49()
            method99(v112, v113, v114)
        else
            v111 |> System.Console.WriteLine
            ()
        let v121 : string = "\u001b[7;4m"
        let v122 : string = "\u001b[0m"
        let v123 : string = $"{v121}{v59}{v122}"
        let v124 : (string -> unit) = v8.Push
        v124 v123
    }
    |> fun x -> _v58 <- Some x
    let v125 : Async<unit> = match _v58 with Some x -> x | None -> failwith "async.new_async_unit / _v58=None"
    v125 
    #endif
    |> fun x -> _v12 <- Some x
    let v126 : Async<unit> = match _v12 with Some x -> x | None -> failwith "base.run_target / _v12=None"
    let v143 : bool = true
    let mutable _v143 : unit option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_PYTHON
    null |> unbox<unit>
    () 
    #endif
#else
    let v174 : (Async<unit> -> unit) = Async.StartImmediate
    v174 v126
    () 
    #endif
    |> fun x -> _v143 <- Some x
    match _v143 with Some x -> x | None -> failwith "base.run_target / _v143=None"
    ()
and closure65 (v0 : System.Diagnostics.Process) () : unit =
    let v3 : bool = true
    let mutable _v3 : bool option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : bool = null |> unbox<bool>
    v6 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v15 : bool = null |> unbox<bool>
    v15 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v24 : bool = null |> unbox<bool>
    v24 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : bool = null |> unbox<bool>
    v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v42 : bool = null |> unbox<bool>
    v42 
    #endif
#else
    let v49 : bool = v0.HasExited
    v49 
    #endif
    |> fun x -> _v3 <- Some x
    let v50 : bool = match _v3 with Some x -> x | None -> failwith "base.run_target / _v3=None"
    let v65 : bool = v50 = false
    if v65 then
        let v68 : bool = true
        let mutable _v68 : unit option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        null |> unbox<unit>
        () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        null |> unbox<unit>
        () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        null |> unbox<unit>
        () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        null |> unbox<unit>
        () 
        #endif
#if FABLE_COMPILER_PYTHON
        null |> unbox<unit>
        () 
        #endif
#else
        let v99 : (unit -> unit) = v0.Kill
        v99 ()
        () 
        #endif
        |> fun x -> _v68 <- Some x
        match _v68 with Some x -> x | None -> failwith "base.run_target / _v68=None"
        ()
and closure66 () () : string =
    let v0 : string = $"runtime.execute_with_options_async / WaitForExitAsync"
    v0
and closure67 (v0 : System.Threading.Tasks.TaskCanceledException) () : System.Threading.Tasks.TaskCanceledException =
    v0
and method116 (v0 : Mut4, v1 : System.Threading.Tasks.TaskCanceledException) : unit =
    let v4 : string = $"%A{v1}"
    method10(v0, v4)
and method115 (v0 : Mut4, v1 : System.Threading.Tasks.TaskCanceledException) : unit =
    let v2 : string = "{ "
    method10(v0, v2)
    method11(v0)
    let v3 : string = "ex"
    method10(v0, v3)
    let v4 : string = " = "
    method10(v0, v4)
    method116(v0, v1)
    let v5 : string = " }"
    method10(v0, v5)
and closure68 (v0 : US0, v1 : (unit -> string), v2 : (unit -> System.Threading.Tasks.TaskCanceledException)) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = $"near_sdk::env::block_timestamp()"
    let v331 : uint64 = Fable.Core.RustInterop.emitRustExpr () v330 
    let v334 : US2 option = None
    let _v334 = ref v334 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v335 : int64 = x
    let v336 : US2 = US2_0(v335)
    v336 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v334.Value <- x
    let v337 : US2 option = _v334.Value 
    let v360 : US2 = US2_1
    let v361 : US2 = v337 |> Option.defaultValue v360 
    let v374 : uint64 =
        match v361 with
        | US2_1 -> (* None *)
            v331
        | US2_0(v369) -> (* Some *)
            let v370 : (int64 -> uint64) = uint64
            let v371 : uint64 = v370 v369
            let v372 : uint64 = v331 - v371
            v372
    let v375 : uint64 = v374 / 1000000000UL
    let v376 : uint64 = v375 % 60UL
    let v377 : uint64 = v375 / 60UL
    let v378 : uint64 = v377 % 60UL
    let v379 : uint64 = v375 / 3600UL
    let v380 : uint64 = v379 % 24UL
    let v381 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v382 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v380, v378, v376) v381 
    let v383 : string = "fable_library_rust::String_::fromString($0)"
    let v384 : string = Fable.Core.RustInterop.emitRustExpr v382 v383 
    v384 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v387 : US2 option = None
    let _v387 = ref v387 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v388 : int64 = x
    let v389 : US2 = US2_0(v388)
    v389 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v387.Value <- x
    let v390 : US2 option = _v387.Value 
    let v413 : US2 = US2_1
    let v414 : US2 = v390 |> Option.defaultValue v413 
    let v512 : System.DateTime =
        match v414 with
        | US2_1 -> (* None *)
            let v504 : System.DateTime = System.DateTime.Now
            v504
        | US2_0(v422) -> (* Some *)
            let v425 : System.DateTime = System.DateTime.Now
            let v434 : (System.DateTime -> int64) = _.Ticks
            let v435 : int64 = v434 v425
            let v442 : int64 = v435 - v422
            let v445 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v446 : System.TimeSpan = v445 v442
            let v455 : (System.TimeSpan -> int32) = _.Hours
            let v456 : int32 = v455 v446
            let v465 : (System.TimeSpan -> int32) = _.Minutes
            let v466 : int32 = v465 v446
            let v475 : (System.TimeSpan -> int32) = _.Seconds
            let v476 : int32 = v475 v446
            let v485 : (System.TimeSpan -> int32) = _.Milliseconds
            let v486 : int32 = v485 v446
            let v495 : System.DateTime = System.DateTime (1, 1, 1, v456, v466, v476, v486)
            v495
    let v515 : string = method7()
    let v524 : (string -> string) = v512.ToString
    let v525 : string = v524 v515
    v525 
    #endif
#if FABLE_COMPILER_PYTHON
    let v534 : US2 option = None
    let _v534 = ref v534 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v535 : int64 = x
    let v536 : US2 = US2_0(v535)
    v536 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v534.Value <- x
    let v537 : US2 option = _v534.Value 
    let v560 : US2 = US2_1
    let v561 : US2 = v537 |> Option.defaultValue v560 
    let v659 : System.DateTime =
        match v561 with
        | US2_1 -> (* None *)
            let v651 : System.DateTime = System.DateTime.Now
            v651
        | US2_0(v569) -> (* Some *)
            let v572 : System.DateTime = System.DateTime.Now
            let v581 : (System.DateTime -> int64) = _.Ticks
            let v582 : int64 = v581 v572
            let v589 : int64 = v582 - v569
            let v592 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v593 : System.TimeSpan = v592 v589
            let v602 : (System.TimeSpan -> int32) = _.Hours
            let v603 : int32 = v602 v593
            let v612 : (System.TimeSpan -> int32) = _.Minutes
            let v613 : int32 = v612 v593
            let v622 : (System.TimeSpan -> int32) = _.Seconds
            let v623 : int32 = v622 v593
            let v632 : (System.TimeSpan -> int32) = _.Milliseconds
            let v633 : int32 = v632 v593
            let v642 : System.DateTime = System.DateTime (1, 1, 1, v603, v613, v623, v633)
            v642
    let v662 : string = method7()
    let v671 : (string -> string) = v659.ToString
    let v672 : string = v671 v662
    v672 
    #endif
#else
    let v681 : US2 option = None
    let _v681 = ref v681 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v682 : int64 = x
    let v683 : US2 = US2_0(v682)
    v683 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v681.Value <- x
    let v684 : US2 option = _v681.Value 
    let v707 : US2 = US2_1
    let v708 : US2 = v684 |> Option.defaultValue v707 
    let v806 : System.DateTime =
        match v708 with
        | US2_1 -> (* None *)
            let v798 : System.DateTime = System.DateTime.Now
            v798
        | US2_0(v716) -> (* Some *)
            let v719 : System.DateTime = System.DateTime.Now
            let v728 : (System.DateTime -> int64) = _.Ticks
            let v729 : int64 = v728 v719
            let v736 : int64 = v729 - v716
            let v739 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v740 : System.TimeSpan = v739 v736
            let v749 : (System.TimeSpan -> int32) = _.Hours
            let v750 : int32 = v749 v740
            let v759 : (System.TimeSpan -> int32) = _.Minutes
            let v760 : int32 = v759 v740
            let v769 : (System.TimeSpan -> int32) = _.Seconds
            let v770 : int32 = v769 v740
            let v779 : (System.TimeSpan -> int32) = _.Milliseconds
            let v780 : int32 = v779 v740
            let v789 : System.DateTime = System.DateTime (1, 1, 1, v750, v760, v770, v780)
            v789
    let v809 : string = method7()
    let v818 : (string -> string) = v806.ToString
    let v819 : string = v818 v809
    v819 
    #endif
    |> fun x -> _v35 <- Some x
    let v826 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v981 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v985 : US3 =
        if v981 then
            let v982 : string = "Verbose"
            US3_0(v982)
        else
            US3_1
    let v1034 : US3 =
        match v985 with
        | US3_1 -> (* None *)
            let v990 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v994 : US3 =
                if v990 then
                    let v991 : string = "Debug"
                    US3_0(v991)
                else
                    US3_1
            match v994 with
            | US3_1 -> (* None *)
                let v999 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v1003 : US3 =
                    if v999 then
                        let v1000 : string = "Info"
                        US3_0(v1000)
                    else
                        US3_1
                match v1003 with
                | US3_1 -> (* None *)
                    let v1008 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v1012 : US3 =
                        if v1008 then
                            let v1009 : string = "Warning"
                            US3_0(v1009)
                        else
                            US3_1
                    match v1012 with
                    | US3_1 -> (* None *)
                        let v1017 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v1021 : US3 =
                            if v1017 then
                                let v1018 : string = "Critical"
                                US3_0(v1018)
                            else
                                US3_1
                        match v1021 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v1022) -> (* Some *)
                            US3_0(v1022)
                    | US3_0(v1013) -> (* Some *)
                        US3_0(v1013)
                | US3_0(v1004) -> (* Some *)
                    US3_0(v1004)
            | US3_0(v995) -> (* Some *)
                US3_0(v995)
        | US3_0(v986) -> (* Some *)
            US3_0(v986)
    let v1038 : string =
        match v1034 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v1035) -> (* Some *)
            v1035
    let v1041 : (unit -> string) = v1038.ToLower
    let v1042 : string = v1041 ()
    let v1051 : string = v1042.PadLeft (7, ' ')
    let v1083 : bool = true
    let mutable _v1083 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1098 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1092 : string = "inline_colorization::color_bright_red"
            let v1093 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1092 
            v1093
        | US0_1 -> (* Debug *)
            let v1086 : string = "inline_colorization::color_bright_blue"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_2 -> (* Info *)
            let v1088 : string = "inline_colorization::color_bright_green"
            let v1089 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1088 
            v1089
        | US0_0 -> (* Verbose *)
            let v1084 : string = "inline_colorization::color_bright_black"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
        | US0_3 -> (* Warning *)
            let v1090 : string = "inline_colorization::color_yellow"
            let v1091 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1090 
            v1091
    let v1099 : string = "&*$0"
    let v1100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1099 
    let v1101 : string = "inline_colorization::color_reset"
    let v1102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1101 
    let v1103 : string = "\"{v1098}{v1100}{v1102}\""
    let v1104 : string = @$"format!(" + v1103 + ")"
    let v1105 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1104 
    let v1106 : string = "fable_library_rust::String_::fromString($0)"
    let v1107 : string = Fable.Core.RustInterop.emitRustExpr v1105 v1106 
    v1107 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1122 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1116 : string = "inline_colorization::color_bright_red"
            let v1117 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1116 
            v1117
        | US0_1 -> (* Debug *)
            let v1110 : string = "inline_colorization::color_bright_blue"
            let v1111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1110 
            v1111
        | US0_2 -> (* Info *)
            let v1112 : string = "inline_colorization::color_bright_green"
            let v1113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1112 
            v1113
        | US0_0 -> (* Verbose *)
            let v1108 : string = "inline_colorization::color_bright_black"
            let v1109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1108 
            v1109
        | US0_3 -> (* Warning *)
            let v1114 : string = "inline_colorization::color_yellow"
            let v1115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1114 
            v1115
    let v1123 : string = "&*$0"
    let v1124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1123 
    let v1125 : string = "inline_colorization::color_reset"
    let v1126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1125 
    let v1127 : string = "\"{v1122}{v1124}{v1126}\""
    let v1128 : string = @$"format!(" + v1127 + ")"
    let v1129 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1128 
    let v1130 : string = "fable_library_rust::String_::fromString($0)"
    let v1131 : string = Fable.Core.RustInterop.emitRustExpr v1129 v1130 
    v1131 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1146 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1140 : string = "inline_colorization::color_bright_red"
            let v1141 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1140 
            v1141
        | US0_1 -> (* Debug *)
            let v1134 : string = "inline_colorization::color_bright_blue"
            let v1135 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1134 
            v1135
        | US0_2 -> (* Info *)
            let v1136 : string = "inline_colorization::color_bright_green"
            let v1137 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1136 
            v1137
        | US0_0 -> (* Verbose *)
            let v1132 : string = "inline_colorization::color_bright_black"
            let v1133 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1132 
            v1133
        | US0_3 -> (* Warning *)
            let v1138 : string = "inline_colorization::color_yellow"
            let v1139 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1138 
            v1139
    let v1147 : string = "&*$0"
    let v1148 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1147 
    let v1149 : string = "inline_colorization::color_reset"
    let v1150 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1149 
    let v1151 : string = "\"{v1146}{v1148}{v1150}\""
    let v1152 : string = @$"format!(" + v1151 + ")"
    let v1153 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1152 
    let v1154 : string = "fable_library_rust::String_::fromString($0)"
    let v1155 : string = Fable.Core.RustInterop.emitRustExpr v1153 v1154 
    v1155 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1165 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1160 : string = "\u001b[91m"
            v1160
        | US0_1 -> (* Debug *)
            let v1157 : string = "\u001b[94m"
            v1157
        | US0_2 -> (* Info *)
            let v1158 : string = "\u001b[92m"
            v1158
        | US0_0 -> (* Verbose *)
            let v1156 : string = "\u001b[90m"
            v1156
        | US0_3 -> (* Warning *)
            let v1159 : string = "\u001b[93m"
            v1159
    let v1166 : string = method8()
    let v1167 : string = v1165 + v1051 
    let v1168 : string = v1167 + v1166 
    v1168 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1178 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1173 : string = "\u001b[91m"
            v1173
        | US0_1 -> (* Debug *)
            let v1170 : string = "\u001b[94m"
            v1170
        | US0_2 -> (* Info *)
            let v1171 : string = "\u001b[92m"
            v1171
        | US0_0 -> (* Verbose *)
            let v1169 : string = "\u001b[90m"
            v1169
        | US0_3 -> (* Warning *)
            let v1172 : string = "\u001b[93m"
            v1172
    let v1179 : string = method8()
    let v1180 : string = v1178 + v1051 
    let v1181 : string = v1180 + v1179 
    v1181 
    #endif
#else
    let v1191 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1186 : string = "\u001b[91m"
            v1186
        | US0_1 -> (* Debug *)
            let v1183 : string = "\u001b[94m"
            v1183
        | US0_2 -> (* Info *)
            let v1184 : string = "\u001b[92m"
            v1184
        | US0_0 -> (* Verbose *)
            let v1182 : string = "\u001b[90m"
            v1182
        | US0_3 -> (* Warning *)
            let v1185 : string = "\u001b[93m"
            v1185
    let v1192 : string = method8()
    let v1193 : string = v1191 + v1051 
    let v1194 : string = v1193 + v1192 
    v1194 
    #endif
    |> fun x -> _v1083 <- Some x
    let v1195 : string = match _v1083 with Some x -> x | None -> failwith "base.run_target / _v1083=None"
    let v1214 : int64 = v14.l0
    let v1215 : System.Threading.Tasks.TaskCanceledException = v2 ()
    let v1216 : string = ""
    let v1217 : Mut4 = {l0 = v1216} : Mut4
    method115(v1217, v1215)
    let v1218 : string = v1217.l0
    let v1221 : string = $"{v826} {v1195} #{v1214} %s{v1 ()} / {v1218}"
    let v1228 : char list = []
    let v1233 : (char list -> (char [])) = List.toArray
    let v1234 : (char []) = v1233 v1228
    let v1241 : string = v1221.TrimStart v1234 
    let v1280 : char list = []
    let v1283 : char list = '/' :: v1280 
    let v1292 : char list = ' ' :: v1283 
    let v1303 : (char list -> (char [])) = List.toArray
    let v1304 : (char []) = v1303 v1292
    let v1311 : string = v1241.TrimEnd v1304 
    v1311
and method114 (v0 : US0, v1 : (unit -> string), v2 : (unit -> System.Threading.Tasks.TaskCanceledException)) : unit =
    let v3 : (unit -> string) = closure68(v0, v1, v2)
    method13(v0, v3)
and closure69 () () : string =
    let v0 : string = $"runtime.execute_with_options_async"
    v0
and closure70 (v0 : int32, v1 : string) () : struct (int32 * int32) =
    let v2 : int32 = v1.Length
    struct (v0, v2)
and method118 (v0 : Mut4, v1 : int32, v2 : int32) : unit =
    let v3 : string = "{ "
    method10(v0, v3)
    method11(v0)
    let v4 : string = "exit_code"
    method10(v0, v4)
    let v5 : string = " = "
    method10(v0, v5)
    method110(v0, v1)
    let v6 : string = "; "
    method10(v0, v6)
    let v7 : string = "output_length"
    method10(v0, v7)
    method10(v0, v5)
    method110(v0, v2)
    let v8 : string = " }"
    method10(v0, v8)
and closure71 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * int32))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = $"near_sdk::env::block_timestamp()"
    let v331 : uint64 = Fable.Core.RustInterop.emitRustExpr () v330 
    let v334 : US2 option = None
    let _v334 = ref v334 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v335 : int64 = x
    let v336 : US2 = US2_0(v335)
    v336 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v334.Value <- x
    let v337 : US2 option = _v334.Value 
    let v360 : US2 = US2_1
    let v361 : US2 = v337 |> Option.defaultValue v360 
    let v374 : uint64 =
        match v361 with
        | US2_1 -> (* None *)
            v331
        | US2_0(v369) -> (* Some *)
            let v370 : (int64 -> uint64) = uint64
            let v371 : uint64 = v370 v369
            let v372 : uint64 = v331 - v371
            v372
    let v375 : uint64 = v374 / 1000000000UL
    let v376 : uint64 = v375 % 60UL
    let v377 : uint64 = v375 / 60UL
    let v378 : uint64 = v377 % 60UL
    let v379 : uint64 = v375 / 3600UL
    let v380 : uint64 = v379 % 24UL
    let v381 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v382 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v380, v378, v376) v381 
    let v383 : string = "fable_library_rust::String_::fromString($0)"
    let v384 : string = Fable.Core.RustInterop.emitRustExpr v382 v383 
    v384 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v387 : US2 option = None
    let _v387 = ref v387 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v388 : int64 = x
    let v389 : US2 = US2_0(v388)
    v389 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v387.Value <- x
    let v390 : US2 option = _v387.Value 
    let v413 : US2 = US2_1
    let v414 : US2 = v390 |> Option.defaultValue v413 
    let v512 : System.DateTime =
        match v414 with
        | US2_1 -> (* None *)
            let v504 : System.DateTime = System.DateTime.Now
            v504
        | US2_0(v422) -> (* Some *)
            let v425 : System.DateTime = System.DateTime.Now
            let v434 : (System.DateTime -> int64) = _.Ticks
            let v435 : int64 = v434 v425
            let v442 : int64 = v435 - v422
            let v445 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v446 : System.TimeSpan = v445 v442
            let v455 : (System.TimeSpan -> int32) = _.Hours
            let v456 : int32 = v455 v446
            let v465 : (System.TimeSpan -> int32) = _.Minutes
            let v466 : int32 = v465 v446
            let v475 : (System.TimeSpan -> int32) = _.Seconds
            let v476 : int32 = v475 v446
            let v485 : (System.TimeSpan -> int32) = _.Milliseconds
            let v486 : int32 = v485 v446
            let v495 : System.DateTime = System.DateTime (1, 1, 1, v456, v466, v476, v486)
            v495
    let v515 : string = method7()
    let v524 : (string -> string) = v512.ToString
    let v525 : string = v524 v515
    v525 
    #endif
#if FABLE_COMPILER_PYTHON
    let v534 : US2 option = None
    let _v534 = ref v534 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v535 : int64 = x
    let v536 : US2 = US2_0(v535)
    v536 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v534.Value <- x
    let v537 : US2 option = _v534.Value 
    let v560 : US2 = US2_1
    let v561 : US2 = v537 |> Option.defaultValue v560 
    let v659 : System.DateTime =
        match v561 with
        | US2_1 -> (* None *)
            let v651 : System.DateTime = System.DateTime.Now
            v651
        | US2_0(v569) -> (* Some *)
            let v572 : System.DateTime = System.DateTime.Now
            let v581 : (System.DateTime -> int64) = _.Ticks
            let v582 : int64 = v581 v572
            let v589 : int64 = v582 - v569
            let v592 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v593 : System.TimeSpan = v592 v589
            let v602 : (System.TimeSpan -> int32) = _.Hours
            let v603 : int32 = v602 v593
            let v612 : (System.TimeSpan -> int32) = _.Minutes
            let v613 : int32 = v612 v593
            let v622 : (System.TimeSpan -> int32) = _.Seconds
            let v623 : int32 = v622 v593
            let v632 : (System.TimeSpan -> int32) = _.Milliseconds
            let v633 : int32 = v632 v593
            let v642 : System.DateTime = System.DateTime (1, 1, 1, v603, v613, v623, v633)
            v642
    let v662 : string = method7()
    let v671 : (string -> string) = v659.ToString
    let v672 : string = v671 v662
    v672 
    #endif
#else
    let v681 : US2 option = None
    let _v681 = ref v681 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v682 : int64 = x
    let v683 : US2 = US2_0(v682)
    v683 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v681.Value <- x
    let v684 : US2 option = _v681.Value 
    let v707 : US2 = US2_1
    let v708 : US2 = v684 |> Option.defaultValue v707 
    let v806 : System.DateTime =
        match v708 with
        | US2_1 -> (* None *)
            let v798 : System.DateTime = System.DateTime.Now
            v798
        | US2_0(v716) -> (* Some *)
            let v719 : System.DateTime = System.DateTime.Now
            let v728 : (System.DateTime -> int64) = _.Ticks
            let v729 : int64 = v728 v719
            let v736 : int64 = v729 - v716
            let v739 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v740 : System.TimeSpan = v739 v736
            let v749 : (System.TimeSpan -> int32) = _.Hours
            let v750 : int32 = v749 v740
            let v759 : (System.TimeSpan -> int32) = _.Minutes
            let v760 : int32 = v759 v740
            let v769 : (System.TimeSpan -> int32) = _.Seconds
            let v770 : int32 = v769 v740
            let v779 : (System.TimeSpan -> int32) = _.Milliseconds
            let v780 : int32 = v779 v740
            let v789 : System.DateTime = System.DateTime (1, 1, 1, v750, v760, v770, v780)
            v789
    let v809 : string = method7()
    let v818 : (string -> string) = v806.ToString
    let v819 : string = v818 v809
    v819 
    #endif
    |> fun x -> _v35 <- Some x
    let v826 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v981 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v985 : US3 =
        if v981 then
            let v982 : string = "Verbose"
            US3_0(v982)
        else
            US3_1
    let v1034 : US3 =
        match v985 with
        | US3_1 -> (* None *)
            let v990 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v994 : US3 =
                if v990 then
                    let v991 : string = "Debug"
                    US3_0(v991)
                else
                    US3_1
            match v994 with
            | US3_1 -> (* None *)
                let v999 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v1003 : US3 =
                    if v999 then
                        let v1000 : string = "Info"
                        US3_0(v1000)
                    else
                        US3_1
                match v1003 with
                | US3_1 -> (* None *)
                    let v1008 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v1012 : US3 =
                        if v1008 then
                            let v1009 : string = "Warning"
                            US3_0(v1009)
                        else
                            US3_1
                    match v1012 with
                    | US3_1 -> (* None *)
                        let v1017 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v1021 : US3 =
                            if v1017 then
                                let v1018 : string = "Critical"
                                US3_0(v1018)
                            else
                                US3_1
                        match v1021 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v1022) -> (* Some *)
                            US3_0(v1022)
                    | US3_0(v1013) -> (* Some *)
                        US3_0(v1013)
                | US3_0(v1004) -> (* Some *)
                    US3_0(v1004)
            | US3_0(v995) -> (* Some *)
                US3_0(v995)
        | US3_0(v986) -> (* Some *)
            US3_0(v986)
    let v1038 : string =
        match v1034 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v1035) -> (* Some *)
            v1035
    let v1041 : (unit -> string) = v1038.ToLower
    let v1042 : string = v1041 ()
    let v1051 : string = v1042.PadLeft (7, ' ')
    let v1083 : bool = true
    let mutable _v1083 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1098 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1092 : string = "inline_colorization::color_bright_red"
            let v1093 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1092 
            v1093
        | US0_1 -> (* Debug *)
            let v1086 : string = "inline_colorization::color_bright_blue"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_2 -> (* Info *)
            let v1088 : string = "inline_colorization::color_bright_green"
            let v1089 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1088 
            v1089
        | US0_0 -> (* Verbose *)
            let v1084 : string = "inline_colorization::color_bright_black"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
        | US0_3 -> (* Warning *)
            let v1090 : string = "inline_colorization::color_yellow"
            let v1091 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1090 
            v1091
    let v1099 : string = "&*$0"
    let v1100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1099 
    let v1101 : string = "inline_colorization::color_reset"
    let v1102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1101 
    let v1103 : string = "\"{v1098}{v1100}{v1102}\""
    let v1104 : string = @$"format!(" + v1103 + ")"
    let v1105 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1104 
    let v1106 : string = "fable_library_rust::String_::fromString($0)"
    let v1107 : string = Fable.Core.RustInterop.emitRustExpr v1105 v1106 
    v1107 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1122 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1116 : string = "inline_colorization::color_bright_red"
            let v1117 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1116 
            v1117
        | US0_1 -> (* Debug *)
            let v1110 : string = "inline_colorization::color_bright_blue"
            let v1111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1110 
            v1111
        | US0_2 -> (* Info *)
            let v1112 : string = "inline_colorization::color_bright_green"
            let v1113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1112 
            v1113
        | US0_0 -> (* Verbose *)
            let v1108 : string = "inline_colorization::color_bright_black"
            let v1109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1108 
            v1109
        | US0_3 -> (* Warning *)
            let v1114 : string = "inline_colorization::color_yellow"
            let v1115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1114 
            v1115
    let v1123 : string = "&*$0"
    let v1124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1123 
    let v1125 : string = "inline_colorization::color_reset"
    let v1126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1125 
    let v1127 : string = "\"{v1122}{v1124}{v1126}\""
    let v1128 : string = @$"format!(" + v1127 + ")"
    let v1129 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1128 
    let v1130 : string = "fable_library_rust::String_::fromString($0)"
    let v1131 : string = Fable.Core.RustInterop.emitRustExpr v1129 v1130 
    v1131 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1146 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1140 : string = "inline_colorization::color_bright_red"
            let v1141 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1140 
            v1141
        | US0_1 -> (* Debug *)
            let v1134 : string = "inline_colorization::color_bright_blue"
            let v1135 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1134 
            v1135
        | US0_2 -> (* Info *)
            let v1136 : string = "inline_colorization::color_bright_green"
            let v1137 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1136 
            v1137
        | US0_0 -> (* Verbose *)
            let v1132 : string = "inline_colorization::color_bright_black"
            let v1133 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1132 
            v1133
        | US0_3 -> (* Warning *)
            let v1138 : string = "inline_colorization::color_yellow"
            let v1139 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1138 
            v1139
    let v1147 : string = "&*$0"
    let v1148 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1147 
    let v1149 : string = "inline_colorization::color_reset"
    let v1150 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1149 
    let v1151 : string = "\"{v1146}{v1148}{v1150}\""
    let v1152 : string = @$"format!(" + v1151 + ")"
    let v1153 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1152 
    let v1154 : string = "fable_library_rust::String_::fromString($0)"
    let v1155 : string = Fable.Core.RustInterop.emitRustExpr v1153 v1154 
    v1155 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1165 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1160 : string = "\u001b[91m"
            v1160
        | US0_1 -> (* Debug *)
            let v1157 : string = "\u001b[94m"
            v1157
        | US0_2 -> (* Info *)
            let v1158 : string = "\u001b[92m"
            v1158
        | US0_0 -> (* Verbose *)
            let v1156 : string = "\u001b[90m"
            v1156
        | US0_3 -> (* Warning *)
            let v1159 : string = "\u001b[93m"
            v1159
    let v1166 : string = method8()
    let v1167 : string = v1165 + v1051 
    let v1168 : string = v1167 + v1166 
    v1168 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1178 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1173 : string = "\u001b[91m"
            v1173
        | US0_1 -> (* Debug *)
            let v1170 : string = "\u001b[94m"
            v1170
        | US0_2 -> (* Info *)
            let v1171 : string = "\u001b[92m"
            v1171
        | US0_0 -> (* Verbose *)
            let v1169 : string = "\u001b[90m"
            v1169
        | US0_3 -> (* Warning *)
            let v1172 : string = "\u001b[93m"
            v1172
    let v1179 : string = method8()
    let v1180 : string = v1178 + v1051 
    let v1181 : string = v1180 + v1179 
    v1181 
    #endif
#else
    let v1191 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1186 : string = "\u001b[91m"
            v1186
        | US0_1 -> (* Debug *)
            let v1183 : string = "\u001b[94m"
            v1183
        | US0_2 -> (* Info *)
            let v1184 : string = "\u001b[92m"
            v1184
        | US0_0 -> (* Verbose *)
            let v1182 : string = "\u001b[90m"
            v1182
        | US0_3 -> (* Warning *)
            let v1185 : string = "\u001b[93m"
            v1185
    let v1192 : string = method8()
    let v1193 : string = v1191 + v1051 
    let v1194 : string = v1193 + v1192 
    v1194 
    #endif
    |> fun x -> _v1083 <- Some x
    let v1195 : string = match _v1083 with Some x -> x | None -> failwith "base.run_target / _v1083=None"
    let v1214 : int64 = v14.l0
    let struct (v1215 : int32, v1216 : int32) = v2 ()
    let v1217 : string = ""
    let v1218 : Mut4 = {l0 = v1217} : Mut4
    method118(v1218, v1215, v1216)
    let v1219 : string = v1218.l0
    let v1222 : string = $"{v826} {v1195} #{v1214} %s{v1 ()} / {v1219}"
    let v1229 : char list = []
    let v1234 : (char list -> (char [])) = List.toArray
    let v1235 : (char []) = v1234 v1229
    let v1242 : string = v1222.TrimStart v1235 
    let v1281 : char list = []
    let v1284 : char list = '/' :: v1281 
    let v1293 : char list = ' ' :: v1284 
    let v1304 : (char list -> (char [])) = List.toArray
    let v1305 : (char []) = v1304 v1293
    let v1312 : string = v1242.TrimEnd v1305 
    v1312
and method117 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * int32))) : unit =
    let v3 : (unit -> string) = closure71(v0, v1, v2)
    method13(v0, v3)
and method111 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : Async<struct (int32 * string)> =
    let v9 : bool = true
    let mutable _v9 : Async<struct (int32 * string)> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v12 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v21 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    v21 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    v30 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v39 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    v39 
    #endif
#if FABLE_COMPILER_PYTHON
    let v48 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    v48 
    #endif
#else
    let v57 : bool = true
    let mutable _v57 : Async<struct (int32 * string)> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v60 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    v60 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v69 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    v69 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v78 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    v78 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v87 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    v87 
    #endif
#if FABLE_COMPILER_PYTHON
    let v96 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    v96 
    #endif
#else
    let v103 : Async<struct (int32 * string)> option = None
    let mutable _v103 = v103 
    async {
    let v104 : US14 = method57(v0)
    let struct (v113 : string, v114 : US3) =
        match v104 with
        | US14_1(v107) -> (* Error *)
            let v108 : string = $"resultm.get / Result value was Error: {v107}"
            failwith<struct (string * US3)> v108
        | US14_0(v105, v106) -> (* Ok *)
            struct (v105, v106)
    let v117 : US3 option = None
    let _v117 = ref v117 
    match v6 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v118 : string = x
    let v119 : US3 = US3_0(v118)
    v119 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v117.Value <- x
    let v120 : US3 option = _v117.Value 
    let v143 : US3 = US3_1
    let v144 : US3 = v120 |> Option.defaultValue v143 
    let v155 : string =
        match v144 with
        | US3_1 -> (* None *)
            let v153 : string = ""
            v153
        | US3_0(v152) -> (* Some *)
            v152
    let v156 : US0 = US0_1
    let v157 : (unit -> string) = closure59()
    let v158 : (unit -> struct (string * System.Threading.CancellationToken option * (struct (string * string) []) * (struct (int32 * string * bool) -> Async<unit>) option * (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option * bool * string option)) = closure60(v0, v1, v2, v3, v4, v5, v6)
    method112(v156, v157, v158)
    let v159 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v163 : string =
        match v114 with
        | US3_1 -> (* None *)
            let v161 : string = ""
            v161
        | US3_0(v160) -> (* Some *)
            v160
    let start_info = System.Diagnostics.ProcessStartInfo (
      Arguments = v163,
      StandardOutputEncoding = v159,
      WorkingDirectory = v155,
      FileName = v113,
      CreateNoWindow = true,
      RedirectStandardError = true,
      RedirectStandardOutput = true,
      UseShellExecute = false
    )
    let v164 : System.Diagnostics.ProcessStartInfo = start_info
    let v165 : int32 = v2.Length
    let v166 : Mut5 = {l0 = 0} : Mut5
    while method58(v165, v166) do
        let v168 : int32 = v166.l0
        let struct (v169 : string, v170 : string) = v2.[int v168]
        v164.EnvironmentVariables.[v169] <- v170 
        let v171 : int32 = v168 + 1
        v166.l0 <- v171
        ()
    let v172 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v164)
    use v172 = v172 
    let v173 : System.Diagnostics.Process = v172 
    let v174 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
    let v175 : System.Collections.Concurrent.ConcurrentStack<string> = v174 ()
    let v176 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure62(v0, v1, v2, v3, v4, v5, v6, v173, v175)
    v173.OutputDataReceived.Add v176 
    let v177 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure64(v0, v1, v2, v3, v4, v5, v6, v173, v175)
    v173.ErrorDataReceived.Add v177 
    let v178 : (unit -> bool) = v173.Start
    let v179 : bool = v178 ()
    let v180 : bool = v179 = false
    if v180 then
        let v181 : string = $"runtime.execute_with_options_async / process_start error"
        failwith<unit> v181
    let v182 : (unit -> unit) = v173.BeginErrorReadLine
    v182 ()
    let v183 : (unit -> unit) = v173.BeginOutputReadLine
    v183 ()
    let v186 : US32 option = None
    let _v186 = ref v186 
    match v1 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v187 : System.Threading.CancellationToken = x
    let v188 : US32 = US32_0(v187)
    v188 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v186.Value <- x
    let v189 : US32 option = _v186.Value 
    let v212 : US32 = US32_1
    let v213 : US32 = v189 |> Option.defaultValue v212 
    let v224 : System.Threading.CancellationToken =
        match v213 with
        | US32_1 -> (* None *)
            let v222 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
            v222
        | US32_0(v221) -> (* Some *)
            v221
    let v227 : bool = true
    let mutable _v227 : Async<System.Threading.CancellationToken> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v230 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    v230 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v239 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    v239 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v248 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    v248 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v257 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    v257 
    #endif
#if FABLE_COMPILER_PYTHON
    let v266 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    v266 
    #endif
#else
    let v275 : bool = true
    let mutable _v275 : Async<System.Threading.CancellationToken> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v278 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    v278 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v287 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    v287 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v296 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    v296 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v305 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    v305 
    #endif
#if FABLE_COMPILER_PYTHON
    let v314 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    v314 
    #endif
#else
    let v321 : Async<System.Threading.CancellationToken> option = None
    let mutable _v321 = v321 
    async {
    let v322 : Async<System.Threading.CancellationToken> = Async.CancellationToken
    let! v322 = v322 
    let v323 : System.Threading.CancellationToken = v322 
    let v324 : System.Threading.CancellationToken = Async.DefaultCancellationToken
    let v325 : (System.Threading.CancellationToken []) = [|v323; v324; v224|]
    let v326 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
    let v327 : System.Threading.CancellationTokenSource = v326 v325
    let v328 : System.Threading.CancellationToken = v327.Token
    return v328 
    }
    |> fun x -> _v321 <- Some x
    let v329 : Async<System.Threading.CancellationToken> = match _v321 with Some x -> x | None -> failwith "async.new_async_unit / _v321=None"
    v329 
    #endif
    |> fun x -> _v275 <- Some x
    let v330 : Async<System.Threading.CancellationToken> = match _v275 with Some x -> x | None -> failwith "base.run_target / _v275=None"
    v330 
    #endif
    |> fun x -> _v227 <- Some x
    let v345 : Async<System.Threading.CancellationToken> = match _v227 with Some x -> x | None -> failwith "base.run_target / _v227=None"
    let! v345 = v345 
    let v360 : System.Threading.CancellationToken = v345 
    let v361 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v360.Register
    let v362 : (unit -> unit) = closure65(v173)
    let v363 : System.Threading.CancellationTokenRegistration = v361 v362
    use v363 = v363 
    let v364 : System.Threading.CancellationTokenRegistration = v363 
    let v367 : bool = true
    let mutable _v367 : Async<int32> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v370 : Async<int32> = null |> unbox<Async<int32>>
    v370 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v379 : Async<int32> = null |> unbox<Async<int32>>
    v379 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v388 : Async<int32> = null |> unbox<Async<int32>>
    v388 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v397 : Async<int32> = null |> unbox<Async<int32>>
    v397 
    #endif
#if FABLE_COMPILER_PYTHON
    let v406 : Async<int32> = null |> unbox<Async<int32>>
    v406 
    #endif
#else
    let v413 : Async<int32> option = None
    let mutable _v413 = v413 
    async {
    try
    let v414 : System.Threading.Tasks.Task = v173.WaitForExitAsync v360 
    let v417 : bool = true
    let mutable _v417 : Async<unit> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v420 : Async<unit> = null |> unbox<Async<unit>>
    v420 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v429 : Async<unit> = null |> unbox<Async<unit>>
    v429 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v438 : Async<unit> = null |> unbox<Async<unit>>
    v438 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v447 : Async<unit> = null |> unbox<Async<unit>>
    v447 
    #endif
#if FABLE_COMPILER_PYTHON
    let v456 : Async<unit> = null |> unbox<Async<unit>>
    v456 
    #endif
#else
    let v463 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
    let v464 : Async<unit> = v463 v414
    v464 
    #endif
    |> fun x -> _v417 <- Some x
    let v465 : Async<unit> = match _v417 with Some x -> x | None -> failwith "base.run_target / _v417=None"
    do! v465 
    let v480 : int32 = v173.ExitCode
    return v480 
    with ex ->
    let v481 : exn = ex
    let v484 : bool = true
    let mutable _v484 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v487 : string = $"%A{v481}"
    v487 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v496 : string = $"%A{v481}"
    v496 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v505 : string = $"%A{v481}"
    v505 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v514 : string = $"%A{v481}"
    v514 
    #endif
#if FABLE_COMPILER_PYTHON
    let v523 : string = $"%A{v481}"
    v523 
    #endif
#else
    let v530 : string = $"{v481.GetType ()}: {v481.Message}"
    v530 
    #endif
    |> fun x -> _v484 <- Some x
    let v531 : string = match _v484 with Some x -> x | None -> failwith "base.run_target / _v484=None"
    let v546 : (string -> unit) = v175.Push
    v546 v531
    let v549 : System.Threading.Tasks.TaskCanceledException = v481 |> unbox<System.Threading.Tasks.TaskCanceledException>
    let v556 : US0 = US0_3
    let v557 : (unit -> string) = closure66()
    let v558 : (unit -> System.Threading.Tasks.TaskCanceledException) = closure67(v549)
    method114(v556, v557, v558)
    return -2147483648 
    (*
    *)
    }
    |> fun x -> _v413 <- Some x
    let v559 : Async<int32> = match _v413 with Some x -> x | None -> failwith "async.new_async_unit / _v413=None"
    v559 
    #endif
    |> fun x -> _v367 <- Some x
    let v560 : Async<int32> = match _v367 with Some x -> x | None -> failwith "base.run_target / _v367=None"
    let! v560 = v560 
    let v575 : int32 = v560 
    let v578 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.rev
    let v579 : string seq = v578 v175
    let v588 : (string -> (string seq -> string)) = String.concat
    let v589 : string = "\n"
    let v590 : (string seq -> string) = v588 v589
    let v591 : string = v590 v579
    let v598 : US0 = US0_1
    let v599 : (unit -> string) = closure69()
    let v600 : (unit -> struct (int32 * int32)) = closure70(v575, v591)
    method117(v598, v599, v600)
    return struct (v575, v591) 
    }
    |> fun x -> _v103 <- Some x
    let v601 : Async<struct (int32 * string)> = match _v103 with Some x -> x | None -> failwith "async.new_async_unit / _v103=None"
    v601 
    #endif
    |> fun x -> _v57 <- Some x
    let v602 : Async<struct (int32 * string)> = match _v57 with Some x -> x | None -> failwith "base.run_target / _v57=None"
    v602 
    #endif
    |> fun x -> _v9 <- Some x
    let v617 : Async<struct (int32 * string)> = match _v9 with Some x -> x | None -> failwith "base.run_target / _v9=None"
    v617
and method55 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : struct (int32 * string) =
    let v9 : bool = true
    let mutable _v9 : struct (int32 * string) option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v10 : string = method56(v0, v1, v2, v3, v4, v5, v6)
    let v11 : US14 = method57(v10)
    let struct (v20 : string, v21 : US3) =
        match v11 with
        | US14_1(v14) -> (* Error *)
            let v15 : string = $"resultm.get / Result value was Error: {v14}"
            failwith<struct (string * US3)> v15
        | US14_0(v12, v13) -> (* Ok *)
            struct (v12, v13)
    let v25 : string =
        match v21 with
        | US3_1 -> (* None *)
            let v23 : string = ""
            v23
        | US3_0(v22) -> (* Some *)
            v22
    let v26 : US22 = method69(v25)
    let v32 : (string []) =
        match v26 with
        | US22_1(v28) -> (* Error *)
            let v29 : string = $"resultm.get / Result value was Error: {v28}"
            failwith<(string [])> v29
        | US22_0(v27) -> (* Ok *)
            v27
    let v33 : string = "$0.to_vec()"
    let v34 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v32 v33 
    let v35 : string = "true; let _result : Vec<_> = v34.into_iter().map(|x| { //"
    let v36 : bool = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "x"
    let v38 : string = Fable.Core.RustInterop.emitRustExpr () v37 
    let v39 : string = "&*$0"
    let v40 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = "String::from($0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v40 v41 
    let v43 : string = "true; $0 }).collect::<Vec<_>>()"
    let v44 : bool = Fable.Core.RustInterop.emitRustExpr v42 v43 
    let v45 : string = "_result"
    let v46 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v45 
    let v47 : US0 = US0_1
    let v48 : (unit -> string) = closure35()
    let v49 : (unit -> struct (string * Vec<std_string_String> * string * System.Threading.CancellationToken option * (struct (string * string) []) * (struct (int32 * string * bool) -> Async<unit>) option * (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option * bool * string option)) = closure36(v0, v1, v2, v3, v4, v5, v6, v20, v46)
    method80(v47, v48, v49)
    let v50 : bool = true
    let mutable _v50 : (int32 * string) option = None 
    (
    (fun () ->
    (fun () ->
    let v51 : string = "std::process::Command::new(&*$0)"
    let v52 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v20 v51 
    let v53 : string = "true; let mut v52 = v52"
    let v54 : bool = Fable.Core.RustInterop.emitRustExpr () v53 
    let v55 : string = "std::process::Command::args(&mut $0, &*$1)"
    let v56 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr struct (v52, v46) v55 
    let v57 : string = "std::process::Stdio::piped()"
    let v58 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v57 
    let v59 : string = "std::process::Command::stdout($0, std::process::Stdio::piped())"
    let v60 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr v56 v59 
    let v61 : string = "std::process::Stdio::piped()"
    let v62 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v61 
    let v63 : string = "std::process::Command::stderr($0, std::process::Stdio::piped())"
    let v64 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr v60 v63 
    let v65 : string = "std::process::Stdio::piped()"
    let v66 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v65 
    let v67 : string = "std::process::Command::stdin($0, std::process::Stdio::piped())"
    let v68 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr v64 v67 
    let v71 : US3 option = None
    let _v71 = ref v71 
    match v6 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v72 : string = x
    let v73 : US3 = US3_0(v72)
    v73 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v71.Value <- x
    let v74 : US3 option = _v71.Value 
    let v97 : US3 = US3_1
    let v98 : US3 = v74 |> Option.defaultValue v97 
    let v110 : Ref<Mut<std_process_Command>> =
        match v98 with
        | US3_1 -> (* None *)
            v68
        | US3_0(v106) -> (* Some *)
            let v107 : string = "std::process::Command::current_dir(v68, &*$0)"
            let v108 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr v106 v107 
            v108
    let v111 : uint64 = System.Convert.ToUInt64 v2.Length
    let v112 : bool = v111 = 0UL
    let v128 : Ref<Mut<std_process_Command>> =
        if v112 then
            v110
        else
            let v113 : string = "$0.to_vec()"
            let v114 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v2 v113 
            let v115 : string = "true; let _result = $0.into_iter().fold(v110, |acc, x| { //"
            let v116 : bool = Fable.Core.RustInterop.emitRustExpr v114 v115 
            let v117 : string = "acc"
            let v118 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr () v117 
            let v119 : string = "x"
            let struct (v120 : string, v121 : string) = Fable.Core.RustInterop.emitRustExpr () v119 
            let v122 : string = "std::process::Command::env(v118, &*$0, &*$1)"
            let v123 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr struct (v120, v121) v122 
            let v124 : string = "true; $0 })"
            let v125 : bool = Fable.Core.RustInterop.emitRustExpr v123 v124 
            let v126 : string = "_result"
            let v127 : Ref<Mut<std_process_Command>> = Fable.Core.RustInterop.emitRustExpr () v126 
            v127
    let v129 : string = "std::process::Command::spawn($0)"
    let v130 : Result<std_process_Child, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v128 v129 
    let v131 : (std_io_Error -> std_string_String) = method36()
    let v132 : string = "$0.map_err(|x| $1(x))"
    let v133 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v130, v131) v132 
    let v134 : string = "true; let _result = $0.map(|x| { //"
    let v135 : bool = Fable.Core.RustInterop.emitRustExpr v133 v134 
    let v136 : string = "x"
    let v137 : std_process_Child = Fable.Core.RustInterop.emitRustExpr () v136 
    let v140 : std_process_Child option = Some v137 
    let v147 : string = "std::sync::Mutex::new($0)"
    let v148 : std_sync_Mutex<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v140 v147 
    let v149 : string = "std::sync::Arc::new($0)"
    let v150 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v148 v149 
    let v151 : string = "true; $0 })"
    let v152 : bool = Fable.Core.RustInterop.emitRustExpr v150 v151 
    let v153 : string = "_result"
    let v154 : Result<std_sync_Arc<std_sync_Mutex<std_process_Child option>>, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v153 
    let v155 : (std_sync_Arc<std_sync_Mutex<std_process_Child option>> -> US24) = method90()
    let v156 : (std_string_String -> US24) = method91()
    let v157 : string = "match v154 { Ok(x) => $0(x), Err(e) => $1(e) }"
    let v158 : US24 = Fable.Core.RustInterop.emitRustExpr struct (v155, v156) v157 
    let struct (v665 : int32, v666 : US5, v667 : US25) =
        match v158 with
        | US24_1(v656) -> (* Error *)
            let v657 : US0 = US0_4
            let v658 : (unit -> string) = closure40()
            let v659 : (unit -> std_string_String) = closure41(v656)
            method92(v657, v658, v659)
            let v660 : US5 = US5_0(v656)
            let v661 : US25 = US25_1
            struct (-1, v660, v661)
        | US24_0(v159) -> (* Ok *)
            let v160 : string = "true; let _result = (|| { // rust.capture"
            let v161 : bool = Fable.Core.RustInterop.emitRustExpr () v160 
            let v162 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = method94(v159)
            let v163 : string = "v162.lock()"
            let v164 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v163 
            let v165 : string = "$0.unwrap()"
            let v166 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v164 v165 
            let v167 : string = "true; let mut v166 = v166"
            let v168 : bool = Fable.Core.RustInterop.emitRustExpr () v167 
            let v169 : string = "&mut $0"
            let v170 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v166 v169 
            let v171 : string = "$0.as_mut()"
            let v172 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v170 v171 
            let v173 : string = "$0.unwrap()"
            let v174 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v172 v173 
            let v175 : string = "&mut v174.stdout"
            let v176 : Ref<Mut<std_process_ChildStdout option>> = Fable.Core.RustInterop.emitRustExpr () v175 
            let v177 : string = "Option::take($0)"
            let v178 : std_process_ChildStdout option = Fable.Core.RustInterop.emitRustExpr v176 v177 
            let v179 : string = "$0.unwrap()"
            let v180 : std_process_ChildStdout = Fable.Core.RustInterop.emitRustExpr v178 v179 
            let v181 : string = "true; $0 })()"
            let v182 : bool = Fable.Core.RustInterop.emitRustExpr v180 v181 
            let v183 : string = "_result"
            let v184 : std_process_ChildStdout = Fable.Core.RustInterop.emitRustExpr () v183 
            let v185 : string = "true; let _result = (|| { // rust.capture"
            let v186 : bool = Fable.Core.RustInterop.emitRustExpr () v185 
            let v187 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = method94(v159)
            let v188 : string = "v187.lock()"
            let v189 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v188 
            let v190 : string = "$0.unwrap()"
            let v191 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v189 v190 
            let v192 : string = "true; let mut v191 = v191"
            let v193 : bool = Fable.Core.RustInterop.emitRustExpr () v192 
            let v194 : string = "&mut $0"
            let v195 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v191 v194 
            let v196 : string = "$0.as_mut()"
            let v197 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v195 v196 
            let v198 : string = "$0.unwrap()"
            let v199 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v197 v198 
            let v200 : string = "&mut v199.stderr"
            let v201 : Ref<Mut<std_process_ChildStderr option>> = Fable.Core.RustInterop.emitRustExpr () v200 
            let v202 : string = "Option::take($0)"
            let v203 : std_process_ChildStderr option = Fable.Core.RustInterop.emitRustExpr v201 v202 
            let v204 : string = "$0.unwrap()"
            let v205 : std_process_ChildStderr = Fable.Core.RustInterop.emitRustExpr v203 v204 
            let v206 : string = "true; $0 })()"
            let v207 : bool = Fable.Core.RustInterop.emitRustExpr v205 v206 
            let v208 : string = "_result"
            let v209 : std_process_ChildStderr = Fable.Core.RustInterop.emitRustExpr () v208 
            let v210 : string = "true; let _result = (|| { // rust.capture"
            let v211 : bool = Fable.Core.RustInterop.emitRustExpr () v210 
            let v212 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = method94(v159)
            let v213 : string = "v212.lock()"
            let v214 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v213 
            let v215 : string = "$0.unwrap()"
            let v216 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v214 v215 
            let v217 : string = "true; let mut v216 = v216"
            let v218 : bool = Fable.Core.RustInterop.emitRustExpr () v217 
            let v219 : string = "&mut $0"
            let v220 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v216 v219 
            let v221 : string = "$0.as_mut()"
            let v222 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v220 v221 
            let v223 : string = "$0.unwrap()"
            let v224 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v222 v223 
            let v225 : string = "&mut $0.stdin"
            let v226 : Ref<Mut<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v224 v225 
            let v227 : string = "Option::take($0)"
            let v228 : std_process_ChildStdin option = Fable.Core.RustInterop.emitRustExpr v226 v227 
            let v229 : string = "$0.unwrap()"
            let v230 : std_process_ChildStdin = Fable.Core.RustInterop.emitRustExpr v228 v229 
            let v233 : std_process_ChildStdin option = Some v230 
            let v240 : string = "std::sync::Mutex::new($0)"
            let v241 : std_sync_Mutex<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v233 v240 
            let v242 : string = "std::sync::Arc::new($0)"
            let v243 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v241 v242 
            let v244 : string = "true; $0 })()"
            let v245 : bool = Fable.Core.RustInterop.emitRustExpr v243 v244 
            let v246 : string = "_result"
            let v247 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr () v246 
            let v248 : string = "{ let (sender, receiver) = std::sync::mpsc::channel(); (sender, std::sync::Arc::new(receiver)) }"
            let struct (v249 : std_sync_mpsc_Sender<std_string_String>, v250 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) = Fable.Core.RustInterop.emitRustExpr () v248 
            let v251 : string = "std::sync::Mutex::new($0)"
            let v252 : std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v249 v251 
            let v253 : string = "std::sync::Arc::new($0)"
            let v254 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "std::sync::Mutex::new($0)"
            let v256 : std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v249 v255 
            let v257 : string = "std::sync::Arc::new($0)"
            let v258 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v256 v257 
            let v259 : string = "std::sync::Mutex::new($0)"
            let v260 : std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v250 v259 
            let v261 : string = "std::sync::Arc::new($0)"
            let v262 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "true; let __result = std::thread::spawn(move || { //"
            let v264 : bool = Fable.Core.RustInterop.emitRustExpr () v263 
            let v265 : string = "encoding_rs_io::DecodeReaderBytesBuilder::new().utf8_passthru(true).build($0)"
            let v266 : encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr v184 v265 
            let v267 : string = "std::io::BufReader::new(v266)"
            let v268 : std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr () v267 
            let v269 : string = "std::io::BufRead::lines(v268)"
            let v270 : std_io_Lines<std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v269 
            let v271 : string = "true; let mut v270 = v270; let _result = v270.try_for_each(|x| { //"
            let v272 : bool = Fable.Core.RustInterop.emitRustExpr () v271 
            let v273 : string = "x"
            let v274 : Result<std_string_String, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v273 
            let v275 : string = "$0.clone()"
            let v276 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v254 v275 
            let v277 : (std_io_Error -> std_string_String) = method36()
            let v278 : string = "$0.map_err(|x| $1(x))"
            let v279 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v274, v277) v278 
            let v280 : (std_string_String -> US26) = method95()
            let v281 : (std_string_String -> US26) = method96()
            let v282 : string = "match v279 { Ok(x) => $0(x), Err(e) => $1(e) }"
            let v283 : US26 = Fable.Core.RustInterop.emitRustExpr struct (v280, v281) v282 
            let v321 : std_string_String =
                match v283 with
                | US26_1(v311) -> (* Error *)
                    let v312 : US0 = US0_4
                    let v313 : (unit -> string) = closure45()
                    let v314 : (unit -> std_string_String) = closure46(v311)
                    method97(v312, v313, v314)
                    let v315 : string = $"\u001b[4;7m{v311}\u001b[0m"
                    let v316 : string = "&*$0"
                    let v317 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v315 v316 
                    let v318 : string = "String::from($0)"
                    let v319 : std_string_String = Fable.Core.RustInterop.emitRustExpr v317 v318 
                    v319
                | US26_0(v284) -> (* Ok *)
                    let v285 : string = "fable_library_rust::String_::fromString($0)"
                    let v286 : string = Fable.Core.RustInterop.emitRustExpr v284 v285 
                    let v287 : string = "encoding_rs::UTF_8"
                    let v288 : Ref<encoding_rs_Encoding> = Fable.Core.RustInterop.emitRustExpr () v287 
                    let v289 : string = "$0.encode(&*$1).0"
                    let v290 : std_borrow_Cow<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v288, v286) v289 
                    let v291 : string = "$0.as_ref()"
                    let v292 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr v290 v291 
                    let v293 : string = "std::str::from_utf8($0)"
                    let v294 : Result<Ref<Str>, std_str_Utf8Error> = Fable.Core.RustInterop.emitRustExpr v292 v293 
                    let v295 : string = "$0.unwrap()"
                    let v296 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v294 v295 
                    let v297 : string = "String::from($0)"
                    let v298 : std_string_String = Fable.Core.RustInterop.emitRustExpr v296 v297 
                    let v299 : string = "fable_library_rust::String_::fromString($0)"
                    let v300 : string = Fable.Core.RustInterop.emitRustExpr v298 v299 
                    let v301 : string = $"> {v300}"
                    if v5 then
                        let v302 : US0 = US0_0
                        let v303 : (unit -> string) = closure48(v301)
                        let v304 : (unit -> unit) = closure49()
                        method99(v302, v303, v304)
                    else
                        v301 |> System.Console.WriteLine
                        ()
                    v298
            let v322 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = method100(v276)
            let v323 : string = "v322.lock()"
            let v324 : Result<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v323 
            let v325 : string = "$0.unwrap()"
            let v326 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v324 v325 
            let v327 : string = "&$0"
            let v328 : Ref<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v326 v327 
            let v329 : string = "$0.send($1)"
            let v330 : Result<unit, std_sync_mpsc_SendError<std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v328, v321) v329 
            let v331 : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) = method101()
            let v332 : string = "$0.map_err(|x| $1(x))"
            let v333 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v330, v331) v332 
            let v334 : string = "$0"
            let v335 : core_ops_Try<unit> = Fable.Core.RustInterop.emitRustExpr v333 v334 
            let v336 : string = "true; $0 }); //"
            let v337 : bool = Fable.Core.RustInterop.emitRustExpr v335 v336 
            let v338 : string = "_result.map_err(|x| x.into())"
            let v339 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr () v338 
            let v340 : Result<unit, string> = method102(v339)
            let v341 : string = ""
            let v342 : string = "}"
            let v343 : string = v341 + v342 
            let v344 : string = "v340 " + v343 + "); " + v341 + " // rust.fix_closure'"
            Fable.Core.RustInterop.emitRustExpr () v344 
            let v345 : string = "__result"
            let v346 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v345 
            let v347 : string = "true; let __result = std::thread::spawn(move || { //"
            let v348 : bool = Fable.Core.RustInterop.emitRustExpr () v347 
            let v349 : string = "encoding_rs_io::DecodeReaderBytesBuilder::new().utf8_passthru(true).build($0)"
            let v350 : encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr v209 v349 
            let v351 : string = "std::io::BufReader::new(v350)"
            let v352 : std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr () v351 
            let v353 : string = "std::io::BufRead::lines(v352)"
            let v354 : std_io_Lines<std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v353 
            let v355 : string = "true; let mut v354 = v354; let _result = v354.try_for_each(|x| { //"
            let v356 : bool = Fable.Core.RustInterop.emitRustExpr () v355 
            let v357 : string = "x"
            let v358 : Result<std_string_String, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v357 
            let v359 : string = "$0.clone()"
            let v360 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v258 v359 
            let v361 : (std_io_Error -> std_string_String) = method36()
            let v362 : string = "$0.map_err(|x| $1(x))"
            let v363 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v358, v361) v362 
            let v364 : (std_string_String -> US26) = method95()
            let v365 : (std_string_String -> US26) = method96()
            let v366 : string = "match v363 { Ok(x) => $0(x), Err(e) => $1(e) }"
            let v367 : US26 = Fable.Core.RustInterop.emitRustExpr struct (v364, v365) v366 
            let v410 : std_string_String =
                match v367 with
                | US26_1(v400) -> (* Error *)
                    let v401 : US0 = US0_4
                    let v402 : (unit -> string) = closure45()
                    let v403 : (unit -> std_string_String) = closure46(v400)
                    method97(v401, v402, v403)
                    let v404 : string = $"\u001b[4;7m{v400}\u001b[0m"
                    let v405 : string = "&*$0"
                    let v406 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v404 v405 
                    let v407 : string = "String::from($0)"
                    let v408 : std_string_String = Fable.Core.RustInterop.emitRustExpr v406 v407 
                    v408
                | US26_0(v368) -> (* Ok *)
                    let v369 : string = "fable_library_rust::String_::fromString($0)"
                    let v370 : string = Fable.Core.RustInterop.emitRustExpr v368 v369 
                    let v371 : string = "encoding_rs::UTF_8"
                    let v372 : Ref<encoding_rs_Encoding> = Fable.Core.RustInterop.emitRustExpr () v371 
                    let v373 : string = "$0.encode(&*$1).0"
                    let v374 : std_borrow_Cow<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v372, v370) v373 
                    let v375 : string = "$0.as_ref()"
                    let v376 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr v374 v375 
                    let v377 : string = "std::str::from_utf8($0)"
                    let v378 : Result<Ref<Str>, std_str_Utf8Error> = Fable.Core.RustInterop.emitRustExpr v376 v377 
                    let v379 : string = "$0.unwrap()"
                    let v380 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v378 v379 
                    let v381 : string = "String::from($0)"
                    let v382 : std_string_String = Fable.Core.RustInterop.emitRustExpr v380 v381 
                    let v383 : string = "fable_library_rust::String_::fromString($0)"
                    let v384 : string = Fable.Core.RustInterop.emitRustExpr v382 v383 
                    let v385 : string = $"! {v384}"
                    if v5 then
                        let v386 : US0 = US0_0
                        let v387 : (unit -> string) = closure48(v385)
                        let v388 : (unit -> unit) = closure49()
                        method99(v386, v387, v388)
                    else
                        v385 |> System.Console.WriteLine
                        ()
                    let v395 : string = $"\u001b[4;7m{v382}\u001b[0m"
                    let v396 : string = "&*$0"
                    let v397 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v395 v396 
                    let v398 : string = "String::from($0)"
                    let v399 : std_string_String = Fable.Core.RustInterop.emitRustExpr v397 v398 
                    v399
            let v411 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = method100(v360)
            let v412 : string = "v411.lock()"
            let v413 : Result<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v412 
            let v414 : string = "$0.unwrap()"
            let v415 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v413 v414 
            let v416 : string = "&$0"
            let v417 : Ref<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v415 v416 
            let v418 : string = "$0.send($1)"
            let v419 : Result<unit, std_sync_mpsc_SendError<std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v417, v410) v418 
            let v420 : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) = method101()
            let v421 : string = "$0.map_err(|x| $1(x))"
            let v422 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v419, v420) v421 
            let v423 : string = "$0"
            let v424 : core_ops_Try<unit> = Fable.Core.RustInterop.emitRustExpr v422 v423 
            let v425 : string = "true; $0 }); //"
            let v426 : bool = Fable.Core.RustInterop.emitRustExpr v424 v425 
            let v427 : string = "_result.map_err(|x| x.into())"
            let v428 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr () v427 
            let v429 : Result<unit, string> = method102(v428)
            let v430 : string = v341 + v342 
            let v431 : string = "v429 " + v430 + "); " + v341 + " // rust.fix_closure'"
            Fable.Core.RustInterop.emitRustExpr () v431 
            let v432 : string = "__result"
            let v433 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v432 
            let v436 : US27 option = None
            let _v436 = ref v436 
            match v4 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v437 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) = x
            let v438 : US27 = US27_0(v437)
            v438 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v436.Value <- x
            let v439 : US27 option = _v436.Value 
            let v462 : US27 = US27_1
            let v463 : US27 = v439 |> Option.defaultValue v462 
            match v463 with
            | US27_1 -> (* None *)
                ()
            | US27_0(v471) -> (* Some *)
                let v472 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = method103(v247)
                let v473 : string = "v472.lock()"
                let v474 : Result<std_sync_MutexGuard<std_process_ChildStdin option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_ChildStdin option>>> = Fable.Core.RustInterop.emitRustExpr () v473 
                let v475 : string = "$0.unwrap()"
                let v476 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v474 v475 
                let v477 : string = "true; let mut v476 = v476"
                let v478 : bool = Fable.Core.RustInterop.emitRustExpr () v477 
                let v479 : string = "&mut $0"
                let v480 : Ref<Mut<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v476 v479 
                let v481 : string = "Option::take($0)"
                let v482 : std_process_ChildStdin option = Fable.Core.RustInterop.emitRustExpr v480 v481 
                let v483 : string = "true; let _result = v482.map(|x| { //"
                let v484 : bool = Fable.Core.RustInterop.emitRustExpr () v483 
                let v485 : string = "x"
                let v486 : std_process_ChildStdin = Fable.Core.RustInterop.emitRustExpr () v485 
                let v487 : string = "std::sync::Mutex::new($0)"
                let v488 : std_sync_Mutex<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v486 v487 
                let v489 : string = "std::sync::Arc::new($0)"
                let v490 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = Fable.Core.RustInterop.emitRustExpr v488 v489 
                let v491 : string = "true; $0 })"
                let v492 : bool = Fable.Core.RustInterop.emitRustExpr v490 v491 
                let v493 : string = "_result"
                let v494 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> option = Fable.Core.RustInterop.emitRustExpr () v493 
                let v497 : US28 option = None
                let _v497 = ref v497 
                match v494 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v498 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = x
                let v499 : US28 = US28_0(v498)
                v499 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v497.Value <- x
                let v500 : US28 option = _v497.Value 
                let v523 : US28 = US28_1
                let v524 : US28 = v500 |> Option.defaultValue v523 
                match v524 with
                | US28_1 -> (* None *)
                    ()
                | US28_0(v532) -> (* Some *)
                    v471 v532
                    let v533 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = method104(v532)
                    let v534 : string = "v533.lock()"
                    let v535 : Result<std_sync_MutexGuard<std_process_ChildStdin>, std_sync_PoisonError<std_sync_MutexGuard<std_process_ChildStdin>>> = Fable.Core.RustInterop.emitRustExpr () v534 
                    let v536 : string = "$0.unwrap()"
                    let v537 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v535 v536 
                    let v538 : std_sync_MutexGuard<std_process_ChildStdin> = method105(v537)
                    let v539 : string = "true; let mut v538 = v538"
                    let v540 : bool = Fable.Core.RustInterop.emitRustExpr () v539 
                    let v541 : string = "true; std::io::Write::flush(&mut *$0).unwrap()"
                    let v542 : bool = Fable.Core.RustInterop.emitRustExpr v538 v541 
                    ()
            let v543 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = method94(v159)
            let v544 : string = "v543.lock()"
            let v545 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v544 
            let v546 : string = "$0.unwrap()"
            let v547 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v545 v546 
            let v548 : string = "true; let mut v547 = v547"
            let v549 : bool = Fable.Core.RustInterop.emitRustExpr () v548 
            let v550 : string = "&mut $0"
            let v551 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v547 v550 
            let v552 : string = "Option::take($0)"
            let v553 : std_process_Child option = Fable.Core.RustInterop.emitRustExpr v551 v552 
            let v554 : string = "$0.unwrap()"
            let v555 : std_process_Child = Fable.Core.RustInterop.emitRustExpr v553 v554 
            let v556 : string = "$0.wait_with_output()"
            let v557 : Result<std_process_Output, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v555 v556 
            let v558 : (std_io_Error -> std_string_String) = method36()
            let v559 : string = "$0.map_err(|x| $1(x))"
            let v560 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v557, v558) v559 
            let v561 : std_thread_JoinHandle<Result<unit, string>> = method106(v433)
            let v562 : string = "v561"
            let v563 : string = v562 + v341 
            let v564 : string = v563 + v341 
            let v565 : std_thread_JoinHandle<Result<unit, string>> = method106(v346)
            let v566 : string = "v565"
            let v567 : string = ", "
            let v568 : string = v566 + v567 
            let v569 : string = v568 + v564 
            let v570 : string = "vec![" + v569 + "]"
            let v571 : Vec<std_thread_JoinHandle<Result<unit, string>>> = Fable.Core.RustInterop.emitRustExpr () v570 
            let v572 : string = "true; v571.into_iter().for_each(|x| { //"
            let v573 : bool = Fable.Core.RustInterop.emitRustExpr () v572 
            let v574 : string = "x"
            let v575 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v574 
            let v576 : string = "std::thread::JoinHandle::join($0)"
            let v577 : Result<Result<unit, string>, Box<LifetimeRef<Dyn<LifetimeJoin<core_any_Any, LifetimeRef<LifetimeJoin<StaticLifetime, Send<StaticLifetime>>>>>>>> = Fable.Core.RustInterop.emitRustExpr v575 v576 
            let v578 : string = "$0.unwrap()"
            let v579 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v577 v578 
            let v580 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v579 v580 
            let v581 : string = "true; () }}); { //"
            let v582 : bool = Fable.Core.RustInterop.emitRustExpr () v581 
            let v583 : (std_process_Output -> US29) = closure52()
            let v584 : (std_string_String -> US29) = closure53()
            let v585 : US29 = match v560 with Ok x -> v583 x | Error x -> v584 x
            match v585 with
            | US29_1(v644) -> (* Error *)
                let v645 : US0 = US0_4
                let v646 : (unit -> string) = closure54()
                let v647 : (unit -> std_string_String) = closure55(v644)
                method92(v645, v646, v647)
                let v648 : US5 = US5_0(v644)
                let v649 : US25 = US25_1
                struct (-2, v648, v649)
            | US29_0(v586) -> (* Ok *)
                let v587 : string = "$0.status"
                let v588 : std_process_ExitStatus = Fable.Core.RustInterop.emitRustExpr v586 v587 
                let v589 : string = "$0.code()"
                let v590 : int32 option = Fable.Core.RustInterop.emitRustExpr v588 v589 
                let v593 : US30 option = None
                let _v593 = ref v593 
                match v590 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v594 : int32 = x
                let v595 : US30 = US30_0(v594)
                v595 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v593.Value <- x
                let v596 : US30 option = _v593.Value 
                let v619 : US30 = US30_1
                let v620 : US30 = v596 |> Option.defaultValue v619 
                match v620 with
                | US30_1 -> (* None *)
                    let v631 : string = "&*$0"
                    let v632 : string = "runtime.execute_with_options / exit_code=None"
                    let v633 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v632 v631 
                    let v634 : string = "String::from($0)"
                    let v635 : std_string_String = Fable.Core.RustInterop.emitRustExpr v633 v634 
                    let v636 : US5 = US5_0(v635)
                    let v637 : US25 = US25_0(v262)
                    struct (-1, v636, v637)
                | US30_0(v628) -> (* Some *)
                    let v629 : US5 = US5_1
                    let v630 : US25 = US25_0(v262)
                    struct (v628, v629, v630)
    let v680 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option =
        match v667 with
        | US25_1 -> (* None *)
            let v678 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option = None
            v678
        | US25_0(v668) -> (* Some *)
            let v671 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option = Some v668 
            v671
    let v681 : string = "true; let _result = v680.map(|x| { //"
    let v682 : bool = Fable.Core.RustInterop.emitRustExpr () v681 
    let v683 : string = "x"
    let v684 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v683 
    let v685 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = method107(v684)
    let v686 : string = "v685.lock()"
    let v687 : Result<std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v686 
    let v688 : string = "$0.unwrap()"
    let v689 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v687 v688 
    let v690 : string = "v689.iter()"
    let v691 : _ = Fable.Core.RustInterop.emitRustExpr () v690 
    let v692 : string = "v691.collect::<Vec<_>>()"
    let v693 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v692 
    let v694 : string = "true; let _result : Vec<_> = v693.into_iter().map(|x| { //"
    let v695 : bool = Fable.Core.RustInterop.emitRustExpr () v694 
    let v696 : string = "x"
    let v697 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v696 
    let v698 : string = "fable_library_rust::String_::fromString($0)"
    let v699 : string = Fable.Core.RustInterop.emitRustExpr v697 v698 
    let v700 : string = "true; $0 }).collect::<Vec<_>>()"
    let v701 : bool = Fable.Core.RustInterop.emitRustExpr v699 v700 
    let v702 : string = "_result"
    let v703 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v702 
    let v704 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v705 : (string []) = Fable.Core.RustInterop.emitRustExpr v703 v704 
    let v708 : string seq = v705 |> Seq.ofArray
    let v717 : (string -> (string seq -> string)) = String.concat
    let v718 : string = "\n"
    let v719 : (string seq -> string) = v717 v718
    let v720 : string = v719 v708
    let v727 : string = "true; $0 })"
    let v728 : bool = Fable.Core.RustInterop.emitRustExpr v720 v727 
    let v729 : string = "_result"
    let v730 : string option = Fable.Core.RustInterop.emitRustExpr () v729 
    let v737 : US3 =
        match v666 with
        | US5_1 -> (* None *)
            US3_1
        | US5_0(v731) -> (* Some *)
            let v732 : string = "fable_library_rust::String_::fromString($0)"
            let v733 : string = Fable.Core.RustInterop.emitRustExpr v731 v732 
            US3_0(v733)
    let v741 : string =
        match v737 with
        | US3_1 -> (* None *)
            let v739 : string = ""
            v739
        | US3_0(v738) -> (* Some *)
            v738
    let v744 : string = v730 |> Option.defaultValue v741 
    let v751 : US0 = US0_0
    let v752 : (unit -> string) = closure56()
    let v753 : (unit -> struct (int32 * int32)) = closure57(v665, v744)
    method108(v751, v752, v753)
    let v754 : (int32 * string) = v665, v744 
    v754 
    )
    |> fun x -> x ()
    ) () )
    |> fun x -> _v50 <- Some x
    let v755 : (int32 * string) = match _v50 with Some x -> x | None -> failwith "base.capture / _v50=None"
    let (a, b) = v755 
    let v758 : int32 = a
    let v759 : string = b
    struct (v758, v759) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let struct (v770 : int32, v771 : string) = null |> unbox<struct (int32 * string)>
    struct (v770, v771) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let struct (v782 : int32, v783 : string) = null |> unbox<struct (int32 * string)>
    struct (v782, v783) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v794 : int32, v795 : string) = null |> unbox<struct (int32 * string)>
    struct (v794, v795) 
    #endif
#if FABLE_COMPILER_PYTHON
    let struct (v806 : int32, v807 : string) = null |> unbox<struct (int32 * string)>
    struct (v806, v807) 
    #endif
#else
    let v816 : Async<struct (int32 * string)> = method111(v0, v1, v2, v3, v4, v5, v6)
    let v819 : bool = true
    let mutable _v819 : struct (int32 * string) option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let struct (v822 : int32, v823 : string) = null |> unbox<struct (int32 * string)>
    struct (v822, v823) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let struct (v834 : int32, v835 : string) = null |> unbox<struct (int32 * string)>
    struct (v834, v835) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let struct (v846 : int32, v847 : string) = null |> unbox<struct (int32 * string)>
    struct (v846, v847) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v858 : int32, v859 : string) = null |> unbox<struct (int32 * string)>
    struct (v858, v859) 
    #endif
#if FABLE_COMPILER_PYTHON
    let struct (v870 : int32, v871 : string) = null |> unbox<struct (int32 * string)>
    struct (v870, v871) 
    #endif
#else
    let v880 : (Async<struct (int32 * string)> -> struct (int32 * string)) = Async.RunSynchronously
    let struct (v881 : int32, v882 : string) = v880 v816
    struct (v881, v882) 
    #endif
    |> fun x -> _v819 <- Some x
    let struct (v883 : int32, v884 : string) = match _v819 with Some x -> x | None -> failwith "base.run_target / _v819=None"
    struct (v883, v884) 
    #endif
    |> fun x -> _v9 <- Some x
    let struct (v903 : int32, v904 : string) = match _v9 with Some x -> x | None -> failwith "base.run_target / _v9=None"
    struct (v903, v904)
and closure72 () () : string =
    let v0 : string = "spiral_builder.process_cuda / env install error"
    v0
and closure73 (v0 : US8, v1 : string, v2 : string, v3 : int32) () : struct (US8 * int32 * string * string) =
    struct (v0, v3, v2, v1)
and method121 (v0 : Mut4, v1 : US8) : unit =
    let v4 : string = $"%A{v1}"
    method10(v0, v4)
and method120 (v0 : Mut4, v1 : US8, v2 : int32, v3 : string, v4 : string) : unit =
    let v5 : string = "{ "
    method10(v0, v5)
    method11(v0)
    let v6 : string = "env"
    method10(v0, v6)
    let v7 : string = " = "
    method10(v0, v7)
    method121(v0, v1)
    let v8 : string = "; "
    method10(v0, v8)
    let v9 : string = "exit_code"
    method10(v0, v9)
    method10(v0, v7)
    method110(v0, v2)
    method10(v0, v8)
    let v10 : string = "run_result"
    method10(v0, v10)
    method10(v0, v7)
    method10(v0, v3)
    method10(v0, v8)
    let v11 : string = "new_code_path"
    method10(v0, v11)
    method10(v0, v7)
    method10(v0, v4)
    let v12 : string = " }"
    method10(v0, v12)
and closure74 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (US8 * int32 * string * string))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = $"near_sdk::env::block_timestamp()"
    let v331 : uint64 = Fable.Core.RustInterop.emitRustExpr () v330 
    let v334 : US2 option = None
    let _v334 = ref v334 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v335 : int64 = x
    let v336 : US2 = US2_0(v335)
    v336 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v334.Value <- x
    let v337 : US2 option = _v334.Value 
    let v360 : US2 = US2_1
    let v361 : US2 = v337 |> Option.defaultValue v360 
    let v374 : uint64 =
        match v361 with
        | US2_1 -> (* None *)
            v331
        | US2_0(v369) -> (* Some *)
            let v370 : (int64 -> uint64) = uint64
            let v371 : uint64 = v370 v369
            let v372 : uint64 = v331 - v371
            v372
    let v375 : uint64 = v374 / 1000000000UL
    let v376 : uint64 = v375 % 60UL
    let v377 : uint64 = v375 / 60UL
    let v378 : uint64 = v377 % 60UL
    let v379 : uint64 = v375 / 3600UL
    let v380 : uint64 = v379 % 24UL
    let v381 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v382 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v380, v378, v376) v381 
    let v383 : string = "fable_library_rust::String_::fromString($0)"
    let v384 : string = Fable.Core.RustInterop.emitRustExpr v382 v383 
    v384 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v387 : US2 option = None
    let _v387 = ref v387 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v388 : int64 = x
    let v389 : US2 = US2_0(v388)
    v389 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v387.Value <- x
    let v390 : US2 option = _v387.Value 
    let v413 : US2 = US2_1
    let v414 : US2 = v390 |> Option.defaultValue v413 
    let v512 : System.DateTime =
        match v414 with
        | US2_1 -> (* None *)
            let v504 : System.DateTime = System.DateTime.Now
            v504
        | US2_0(v422) -> (* Some *)
            let v425 : System.DateTime = System.DateTime.Now
            let v434 : (System.DateTime -> int64) = _.Ticks
            let v435 : int64 = v434 v425
            let v442 : int64 = v435 - v422
            let v445 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v446 : System.TimeSpan = v445 v442
            let v455 : (System.TimeSpan -> int32) = _.Hours
            let v456 : int32 = v455 v446
            let v465 : (System.TimeSpan -> int32) = _.Minutes
            let v466 : int32 = v465 v446
            let v475 : (System.TimeSpan -> int32) = _.Seconds
            let v476 : int32 = v475 v446
            let v485 : (System.TimeSpan -> int32) = _.Milliseconds
            let v486 : int32 = v485 v446
            let v495 : System.DateTime = System.DateTime (1, 1, 1, v456, v466, v476, v486)
            v495
    let v515 : string = method7()
    let v524 : (string -> string) = v512.ToString
    let v525 : string = v524 v515
    v525 
    #endif
#if FABLE_COMPILER_PYTHON
    let v534 : US2 option = None
    let _v534 = ref v534 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v535 : int64 = x
    let v536 : US2 = US2_0(v535)
    v536 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v534.Value <- x
    let v537 : US2 option = _v534.Value 
    let v560 : US2 = US2_1
    let v561 : US2 = v537 |> Option.defaultValue v560 
    let v659 : System.DateTime =
        match v561 with
        | US2_1 -> (* None *)
            let v651 : System.DateTime = System.DateTime.Now
            v651
        | US2_0(v569) -> (* Some *)
            let v572 : System.DateTime = System.DateTime.Now
            let v581 : (System.DateTime -> int64) = _.Ticks
            let v582 : int64 = v581 v572
            let v589 : int64 = v582 - v569
            let v592 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v593 : System.TimeSpan = v592 v589
            let v602 : (System.TimeSpan -> int32) = _.Hours
            let v603 : int32 = v602 v593
            let v612 : (System.TimeSpan -> int32) = _.Minutes
            let v613 : int32 = v612 v593
            let v622 : (System.TimeSpan -> int32) = _.Seconds
            let v623 : int32 = v622 v593
            let v632 : (System.TimeSpan -> int32) = _.Milliseconds
            let v633 : int32 = v632 v593
            let v642 : System.DateTime = System.DateTime (1, 1, 1, v603, v613, v623, v633)
            v642
    let v662 : string = method7()
    let v671 : (string -> string) = v659.ToString
    let v672 : string = v671 v662
    v672 
    #endif
#else
    let v681 : US2 option = None
    let _v681 = ref v681 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v682 : int64 = x
    let v683 : US2 = US2_0(v682)
    v683 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v681.Value <- x
    let v684 : US2 option = _v681.Value 
    let v707 : US2 = US2_1
    let v708 : US2 = v684 |> Option.defaultValue v707 
    let v806 : System.DateTime =
        match v708 with
        | US2_1 -> (* None *)
            let v798 : System.DateTime = System.DateTime.Now
            v798
        | US2_0(v716) -> (* Some *)
            let v719 : System.DateTime = System.DateTime.Now
            let v728 : (System.DateTime -> int64) = _.Ticks
            let v729 : int64 = v728 v719
            let v736 : int64 = v729 - v716
            let v739 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v740 : System.TimeSpan = v739 v736
            let v749 : (System.TimeSpan -> int32) = _.Hours
            let v750 : int32 = v749 v740
            let v759 : (System.TimeSpan -> int32) = _.Minutes
            let v760 : int32 = v759 v740
            let v769 : (System.TimeSpan -> int32) = _.Seconds
            let v770 : int32 = v769 v740
            let v779 : (System.TimeSpan -> int32) = _.Milliseconds
            let v780 : int32 = v779 v740
            let v789 : System.DateTime = System.DateTime (1, 1, 1, v750, v760, v770, v780)
            v789
    let v809 : string = method7()
    let v818 : (string -> string) = v806.ToString
    let v819 : string = v818 v809
    v819 
    #endif
    |> fun x -> _v35 <- Some x
    let v826 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v981 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v985 : US3 =
        if v981 then
            let v982 : string = "Verbose"
            US3_0(v982)
        else
            US3_1
    let v1034 : US3 =
        match v985 with
        | US3_1 -> (* None *)
            let v990 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v994 : US3 =
                if v990 then
                    let v991 : string = "Debug"
                    US3_0(v991)
                else
                    US3_1
            match v994 with
            | US3_1 -> (* None *)
                let v999 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v1003 : US3 =
                    if v999 then
                        let v1000 : string = "Info"
                        US3_0(v1000)
                    else
                        US3_1
                match v1003 with
                | US3_1 -> (* None *)
                    let v1008 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v1012 : US3 =
                        if v1008 then
                            let v1009 : string = "Warning"
                            US3_0(v1009)
                        else
                            US3_1
                    match v1012 with
                    | US3_1 -> (* None *)
                        let v1017 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v1021 : US3 =
                            if v1017 then
                                let v1018 : string = "Critical"
                                US3_0(v1018)
                            else
                                US3_1
                        match v1021 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v1022) -> (* Some *)
                            US3_0(v1022)
                    | US3_0(v1013) -> (* Some *)
                        US3_0(v1013)
                | US3_0(v1004) -> (* Some *)
                    US3_0(v1004)
            | US3_0(v995) -> (* Some *)
                US3_0(v995)
        | US3_0(v986) -> (* Some *)
            US3_0(v986)
    let v1038 : string =
        match v1034 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v1035) -> (* Some *)
            v1035
    let v1041 : (unit -> string) = v1038.ToLower
    let v1042 : string = v1041 ()
    let v1051 : string = v1042.PadLeft (7, ' ')
    let v1083 : bool = true
    let mutable _v1083 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1098 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1092 : string = "inline_colorization::color_bright_red"
            let v1093 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1092 
            v1093
        | US0_1 -> (* Debug *)
            let v1086 : string = "inline_colorization::color_bright_blue"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_2 -> (* Info *)
            let v1088 : string = "inline_colorization::color_bright_green"
            let v1089 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1088 
            v1089
        | US0_0 -> (* Verbose *)
            let v1084 : string = "inline_colorization::color_bright_black"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
        | US0_3 -> (* Warning *)
            let v1090 : string = "inline_colorization::color_yellow"
            let v1091 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1090 
            v1091
    let v1099 : string = "&*$0"
    let v1100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1099 
    let v1101 : string = "inline_colorization::color_reset"
    let v1102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1101 
    let v1103 : string = "\"{v1098}{v1100}{v1102}\""
    let v1104 : string = @$"format!(" + v1103 + ")"
    let v1105 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1104 
    let v1106 : string = "fable_library_rust::String_::fromString($0)"
    let v1107 : string = Fable.Core.RustInterop.emitRustExpr v1105 v1106 
    v1107 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1122 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1116 : string = "inline_colorization::color_bright_red"
            let v1117 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1116 
            v1117
        | US0_1 -> (* Debug *)
            let v1110 : string = "inline_colorization::color_bright_blue"
            let v1111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1110 
            v1111
        | US0_2 -> (* Info *)
            let v1112 : string = "inline_colorization::color_bright_green"
            let v1113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1112 
            v1113
        | US0_0 -> (* Verbose *)
            let v1108 : string = "inline_colorization::color_bright_black"
            let v1109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1108 
            v1109
        | US0_3 -> (* Warning *)
            let v1114 : string = "inline_colorization::color_yellow"
            let v1115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1114 
            v1115
    let v1123 : string = "&*$0"
    let v1124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1123 
    let v1125 : string = "inline_colorization::color_reset"
    let v1126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1125 
    let v1127 : string = "\"{v1122}{v1124}{v1126}\""
    let v1128 : string = @$"format!(" + v1127 + ")"
    let v1129 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1128 
    let v1130 : string = "fable_library_rust::String_::fromString($0)"
    let v1131 : string = Fable.Core.RustInterop.emitRustExpr v1129 v1130 
    v1131 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1146 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1140 : string = "inline_colorization::color_bright_red"
            let v1141 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1140 
            v1141
        | US0_1 -> (* Debug *)
            let v1134 : string = "inline_colorization::color_bright_blue"
            let v1135 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1134 
            v1135
        | US0_2 -> (* Info *)
            let v1136 : string = "inline_colorization::color_bright_green"
            let v1137 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1136 
            v1137
        | US0_0 -> (* Verbose *)
            let v1132 : string = "inline_colorization::color_bright_black"
            let v1133 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1132 
            v1133
        | US0_3 -> (* Warning *)
            let v1138 : string = "inline_colorization::color_yellow"
            let v1139 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1138 
            v1139
    let v1147 : string = "&*$0"
    let v1148 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1147 
    let v1149 : string = "inline_colorization::color_reset"
    let v1150 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1149 
    let v1151 : string = "\"{v1146}{v1148}{v1150}\""
    let v1152 : string = @$"format!(" + v1151 + ")"
    let v1153 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1152 
    let v1154 : string = "fable_library_rust::String_::fromString($0)"
    let v1155 : string = Fable.Core.RustInterop.emitRustExpr v1153 v1154 
    v1155 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1165 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1160 : string = "\u001b[91m"
            v1160
        | US0_1 -> (* Debug *)
            let v1157 : string = "\u001b[94m"
            v1157
        | US0_2 -> (* Info *)
            let v1158 : string = "\u001b[92m"
            v1158
        | US0_0 -> (* Verbose *)
            let v1156 : string = "\u001b[90m"
            v1156
        | US0_3 -> (* Warning *)
            let v1159 : string = "\u001b[93m"
            v1159
    let v1166 : string = method8()
    let v1167 : string = v1165 + v1051 
    let v1168 : string = v1167 + v1166 
    v1168 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1178 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1173 : string = "\u001b[91m"
            v1173
        | US0_1 -> (* Debug *)
            let v1170 : string = "\u001b[94m"
            v1170
        | US0_2 -> (* Info *)
            let v1171 : string = "\u001b[92m"
            v1171
        | US0_0 -> (* Verbose *)
            let v1169 : string = "\u001b[90m"
            v1169
        | US0_3 -> (* Warning *)
            let v1172 : string = "\u001b[93m"
            v1172
    let v1179 : string = method8()
    let v1180 : string = v1178 + v1051 
    let v1181 : string = v1180 + v1179 
    v1181 
    #endif
#else
    let v1191 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1186 : string = "\u001b[91m"
            v1186
        | US0_1 -> (* Debug *)
            let v1183 : string = "\u001b[94m"
            v1183
        | US0_2 -> (* Info *)
            let v1184 : string = "\u001b[92m"
            v1184
        | US0_0 -> (* Verbose *)
            let v1182 : string = "\u001b[90m"
            v1182
        | US0_3 -> (* Warning *)
            let v1185 : string = "\u001b[93m"
            v1185
    let v1192 : string = method8()
    let v1193 : string = v1191 + v1051 
    let v1194 : string = v1193 + v1192 
    v1194 
    #endif
    |> fun x -> _v1083 <- Some x
    let v1195 : string = match _v1083 with Some x -> x | None -> failwith "base.run_target / _v1083=None"
    let v1214 : int64 = v14.l0
    let struct (v1215 : US8, v1216 : int32, v1217 : string, v1218 : string) = v2 ()
    let v1219 : string = ""
    let v1220 : Mut4 = {l0 = v1219} : Mut4
    method120(v1220, v1215, v1216, v1217, v1218)
    let v1221 : string = v1220.l0
    let v1224 : string = $"{v826} {v1195} #{v1214} %s{v1 ()} / {v1221}"
    let v1231 : char list = []
    let v1236 : (char list -> (char [])) = List.toArray
    let v1237 : (char []) = v1236 v1231
    let v1244 : string = v1224.TrimStart v1237 
    let v1283 : char list = []
    let v1286 : char list = '/' :: v1283 
    let v1295 : char list = ' ' :: v1286 
    let v1306 : (char list -> (char [])) = List.toArray
    let v1307 : (char []) = v1306 v1295
    let v1314 : string = v1244.TrimEnd v1307 
    v1314
and method119 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (US8 * int32 * string * string))) : unit =
    let v3 : (unit -> string) = closure74(v0, v1, v2)
    method13(v0, v3)
and closure75 () (v0 : string) : US3 =
    US3_0(v0)
and closure76 (v0 : string) () : string =
    let v1 : string = "\n"
    let v2 : (string []) = v0.Split v1 
    let v5 : string seq = v2 |> Seq.ofArray
    let v14 : (string -> (string seq -> string)) = String.concat
    let v15 : (string seq -> string) = v14 v1
    v15 v5
and closure78 () () : string =
    let v0 : string = "spiral_builder.process_cuda / Exception"
    v0
and closure79 (v0 : string, v1 : string, v2 : string, v3 : exn) () : struct (exn * string * string * string) =
    struct (v3, v1, v0, v2)
and method124 (v0 : Mut4, v1 : exn) : unit =
    let v4 : string = $"%A{v1}"
    method10(v0, v4)
and method123 (v0 : Mut4, v1 : exn, v2 : string, v3 : string, v4 : string) : unit =
    let v5 : string = "{ "
    method10(v0, v5)
    method11(v0)
    let v6 : string = "ex"
    method10(v0, v6)
    let v7 : string = " = "
    method10(v0, v7)
    method124(v0, v1)
    let v8 : string = "; "
    method10(v0, v8)
    let v9 : string = "run_result"
    method10(v0, v9)
    method10(v0, v7)
    method10(v0, v2)
    method10(v0, v8)
    let v10 : string = "new_code_path"
    method10(v0, v10)
    method10(v0, v7)
    method10(v0, v3)
    method10(v0, v8)
    let v11 : string = "external_command"
    method10(v0, v11)
    method10(v0, v7)
    method10(v0, v4)
    let v12 : string = " }"
    method10(v0, v12)
and closure80 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (exn * string * string * string))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = $"near_sdk::env::block_timestamp()"
    let v331 : uint64 = Fable.Core.RustInterop.emitRustExpr () v330 
    let v334 : US2 option = None
    let _v334 = ref v334 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v335 : int64 = x
    let v336 : US2 = US2_0(v335)
    v336 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v334.Value <- x
    let v337 : US2 option = _v334.Value 
    let v360 : US2 = US2_1
    let v361 : US2 = v337 |> Option.defaultValue v360 
    let v374 : uint64 =
        match v361 with
        | US2_1 -> (* None *)
            v331
        | US2_0(v369) -> (* Some *)
            let v370 : (int64 -> uint64) = uint64
            let v371 : uint64 = v370 v369
            let v372 : uint64 = v331 - v371
            v372
    let v375 : uint64 = v374 / 1000000000UL
    let v376 : uint64 = v375 % 60UL
    let v377 : uint64 = v375 / 60UL
    let v378 : uint64 = v377 % 60UL
    let v379 : uint64 = v375 / 3600UL
    let v380 : uint64 = v379 % 24UL
    let v381 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v382 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v380, v378, v376) v381 
    let v383 : string = "fable_library_rust::String_::fromString($0)"
    let v384 : string = Fable.Core.RustInterop.emitRustExpr v382 v383 
    v384 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v387 : US2 option = None
    let _v387 = ref v387 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v388 : int64 = x
    let v389 : US2 = US2_0(v388)
    v389 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v387.Value <- x
    let v390 : US2 option = _v387.Value 
    let v413 : US2 = US2_1
    let v414 : US2 = v390 |> Option.defaultValue v413 
    let v512 : System.DateTime =
        match v414 with
        | US2_1 -> (* None *)
            let v504 : System.DateTime = System.DateTime.Now
            v504
        | US2_0(v422) -> (* Some *)
            let v425 : System.DateTime = System.DateTime.Now
            let v434 : (System.DateTime -> int64) = _.Ticks
            let v435 : int64 = v434 v425
            let v442 : int64 = v435 - v422
            let v445 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v446 : System.TimeSpan = v445 v442
            let v455 : (System.TimeSpan -> int32) = _.Hours
            let v456 : int32 = v455 v446
            let v465 : (System.TimeSpan -> int32) = _.Minutes
            let v466 : int32 = v465 v446
            let v475 : (System.TimeSpan -> int32) = _.Seconds
            let v476 : int32 = v475 v446
            let v485 : (System.TimeSpan -> int32) = _.Milliseconds
            let v486 : int32 = v485 v446
            let v495 : System.DateTime = System.DateTime (1, 1, 1, v456, v466, v476, v486)
            v495
    let v515 : string = method7()
    let v524 : (string -> string) = v512.ToString
    let v525 : string = v524 v515
    v525 
    #endif
#if FABLE_COMPILER_PYTHON
    let v534 : US2 option = None
    let _v534 = ref v534 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v535 : int64 = x
    let v536 : US2 = US2_0(v535)
    v536 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v534.Value <- x
    let v537 : US2 option = _v534.Value 
    let v560 : US2 = US2_1
    let v561 : US2 = v537 |> Option.defaultValue v560 
    let v659 : System.DateTime =
        match v561 with
        | US2_1 -> (* None *)
            let v651 : System.DateTime = System.DateTime.Now
            v651
        | US2_0(v569) -> (* Some *)
            let v572 : System.DateTime = System.DateTime.Now
            let v581 : (System.DateTime -> int64) = _.Ticks
            let v582 : int64 = v581 v572
            let v589 : int64 = v582 - v569
            let v592 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v593 : System.TimeSpan = v592 v589
            let v602 : (System.TimeSpan -> int32) = _.Hours
            let v603 : int32 = v602 v593
            let v612 : (System.TimeSpan -> int32) = _.Minutes
            let v613 : int32 = v612 v593
            let v622 : (System.TimeSpan -> int32) = _.Seconds
            let v623 : int32 = v622 v593
            let v632 : (System.TimeSpan -> int32) = _.Milliseconds
            let v633 : int32 = v632 v593
            let v642 : System.DateTime = System.DateTime (1, 1, 1, v603, v613, v623, v633)
            v642
    let v662 : string = method7()
    let v671 : (string -> string) = v659.ToString
    let v672 : string = v671 v662
    v672 
    #endif
#else
    let v681 : US2 option = None
    let _v681 = ref v681 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v682 : int64 = x
    let v683 : US2 = US2_0(v682)
    v683 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v681.Value <- x
    let v684 : US2 option = _v681.Value 
    let v707 : US2 = US2_1
    let v708 : US2 = v684 |> Option.defaultValue v707 
    let v806 : System.DateTime =
        match v708 with
        | US2_1 -> (* None *)
            let v798 : System.DateTime = System.DateTime.Now
            v798
        | US2_0(v716) -> (* Some *)
            let v719 : System.DateTime = System.DateTime.Now
            let v728 : (System.DateTime -> int64) = _.Ticks
            let v729 : int64 = v728 v719
            let v736 : int64 = v729 - v716
            let v739 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v740 : System.TimeSpan = v739 v736
            let v749 : (System.TimeSpan -> int32) = _.Hours
            let v750 : int32 = v749 v740
            let v759 : (System.TimeSpan -> int32) = _.Minutes
            let v760 : int32 = v759 v740
            let v769 : (System.TimeSpan -> int32) = _.Seconds
            let v770 : int32 = v769 v740
            let v779 : (System.TimeSpan -> int32) = _.Milliseconds
            let v780 : int32 = v779 v740
            let v789 : System.DateTime = System.DateTime (1, 1, 1, v750, v760, v770, v780)
            v789
    let v809 : string = method7()
    let v818 : (string -> string) = v806.ToString
    let v819 : string = v818 v809
    v819 
    #endif
    |> fun x -> _v35 <- Some x
    let v826 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v981 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v985 : US3 =
        if v981 then
            let v982 : string = "Verbose"
            US3_0(v982)
        else
            US3_1
    let v1034 : US3 =
        match v985 with
        | US3_1 -> (* None *)
            let v990 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v994 : US3 =
                if v990 then
                    let v991 : string = "Debug"
                    US3_0(v991)
                else
                    US3_1
            match v994 with
            | US3_1 -> (* None *)
                let v999 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v1003 : US3 =
                    if v999 then
                        let v1000 : string = "Info"
                        US3_0(v1000)
                    else
                        US3_1
                match v1003 with
                | US3_1 -> (* None *)
                    let v1008 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v1012 : US3 =
                        if v1008 then
                            let v1009 : string = "Warning"
                            US3_0(v1009)
                        else
                            US3_1
                    match v1012 with
                    | US3_1 -> (* None *)
                        let v1017 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v1021 : US3 =
                            if v1017 then
                                let v1018 : string = "Critical"
                                US3_0(v1018)
                            else
                                US3_1
                        match v1021 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v1022) -> (* Some *)
                            US3_0(v1022)
                    | US3_0(v1013) -> (* Some *)
                        US3_0(v1013)
                | US3_0(v1004) -> (* Some *)
                    US3_0(v1004)
            | US3_0(v995) -> (* Some *)
                US3_0(v995)
        | US3_0(v986) -> (* Some *)
            US3_0(v986)
    let v1038 : string =
        match v1034 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v1035) -> (* Some *)
            v1035
    let v1041 : (unit -> string) = v1038.ToLower
    let v1042 : string = v1041 ()
    let v1051 : string = v1042.PadLeft (7, ' ')
    let v1083 : bool = true
    let mutable _v1083 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1098 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1092 : string = "inline_colorization::color_bright_red"
            let v1093 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1092 
            v1093
        | US0_1 -> (* Debug *)
            let v1086 : string = "inline_colorization::color_bright_blue"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_2 -> (* Info *)
            let v1088 : string = "inline_colorization::color_bright_green"
            let v1089 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1088 
            v1089
        | US0_0 -> (* Verbose *)
            let v1084 : string = "inline_colorization::color_bright_black"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
        | US0_3 -> (* Warning *)
            let v1090 : string = "inline_colorization::color_yellow"
            let v1091 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1090 
            v1091
    let v1099 : string = "&*$0"
    let v1100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1099 
    let v1101 : string = "inline_colorization::color_reset"
    let v1102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1101 
    let v1103 : string = "\"{v1098}{v1100}{v1102}\""
    let v1104 : string = @$"format!(" + v1103 + ")"
    let v1105 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1104 
    let v1106 : string = "fable_library_rust::String_::fromString($0)"
    let v1107 : string = Fable.Core.RustInterop.emitRustExpr v1105 v1106 
    v1107 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1122 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1116 : string = "inline_colorization::color_bright_red"
            let v1117 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1116 
            v1117
        | US0_1 -> (* Debug *)
            let v1110 : string = "inline_colorization::color_bright_blue"
            let v1111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1110 
            v1111
        | US0_2 -> (* Info *)
            let v1112 : string = "inline_colorization::color_bright_green"
            let v1113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1112 
            v1113
        | US0_0 -> (* Verbose *)
            let v1108 : string = "inline_colorization::color_bright_black"
            let v1109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1108 
            v1109
        | US0_3 -> (* Warning *)
            let v1114 : string = "inline_colorization::color_yellow"
            let v1115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1114 
            v1115
    let v1123 : string = "&*$0"
    let v1124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1123 
    let v1125 : string = "inline_colorization::color_reset"
    let v1126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1125 
    let v1127 : string = "\"{v1122}{v1124}{v1126}\""
    let v1128 : string = @$"format!(" + v1127 + ")"
    let v1129 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1128 
    let v1130 : string = "fable_library_rust::String_::fromString($0)"
    let v1131 : string = Fable.Core.RustInterop.emitRustExpr v1129 v1130 
    v1131 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1146 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1140 : string = "inline_colorization::color_bright_red"
            let v1141 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1140 
            v1141
        | US0_1 -> (* Debug *)
            let v1134 : string = "inline_colorization::color_bright_blue"
            let v1135 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1134 
            v1135
        | US0_2 -> (* Info *)
            let v1136 : string = "inline_colorization::color_bright_green"
            let v1137 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1136 
            v1137
        | US0_0 -> (* Verbose *)
            let v1132 : string = "inline_colorization::color_bright_black"
            let v1133 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1132 
            v1133
        | US0_3 -> (* Warning *)
            let v1138 : string = "inline_colorization::color_yellow"
            let v1139 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1138 
            v1139
    let v1147 : string = "&*$0"
    let v1148 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1147 
    let v1149 : string = "inline_colorization::color_reset"
    let v1150 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1149 
    let v1151 : string = "\"{v1146}{v1148}{v1150}\""
    let v1152 : string = @$"format!(" + v1151 + ")"
    let v1153 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1152 
    let v1154 : string = "fable_library_rust::String_::fromString($0)"
    let v1155 : string = Fable.Core.RustInterop.emitRustExpr v1153 v1154 
    v1155 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1165 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1160 : string = "\u001b[91m"
            v1160
        | US0_1 -> (* Debug *)
            let v1157 : string = "\u001b[94m"
            v1157
        | US0_2 -> (* Info *)
            let v1158 : string = "\u001b[92m"
            v1158
        | US0_0 -> (* Verbose *)
            let v1156 : string = "\u001b[90m"
            v1156
        | US0_3 -> (* Warning *)
            let v1159 : string = "\u001b[93m"
            v1159
    let v1166 : string = method8()
    let v1167 : string = v1165 + v1051 
    let v1168 : string = v1167 + v1166 
    v1168 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1178 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1173 : string = "\u001b[91m"
            v1173
        | US0_1 -> (* Debug *)
            let v1170 : string = "\u001b[94m"
            v1170
        | US0_2 -> (* Info *)
            let v1171 : string = "\u001b[92m"
            v1171
        | US0_0 -> (* Verbose *)
            let v1169 : string = "\u001b[90m"
            v1169
        | US0_3 -> (* Warning *)
            let v1172 : string = "\u001b[93m"
            v1172
    let v1179 : string = method8()
    let v1180 : string = v1178 + v1051 
    let v1181 : string = v1180 + v1179 
    v1181 
    #endif
#else
    let v1191 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1186 : string = "\u001b[91m"
            v1186
        | US0_1 -> (* Debug *)
            let v1183 : string = "\u001b[94m"
            v1183
        | US0_2 -> (* Info *)
            let v1184 : string = "\u001b[92m"
            v1184
        | US0_0 -> (* Verbose *)
            let v1182 : string = "\u001b[90m"
            v1182
        | US0_3 -> (* Warning *)
            let v1185 : string = "\u001b[93m"
            v1185
    let v1192 : string = method8()
    let v1193 : string = v1191 + v1051 
    let v1194 : string = v1193 + v1192 
    v1194 
    #endif
    |> fun x -> _v1083 <- Some x
    let v1195 : string = match _v1083 with Some x -> x | None -> failwith "base.run_target / _v1083=None"
    let v1214 : int64 = v14.l0
    let struct (v1215 : exn, v1216 : string, v1217 : string, v1218 : string) = v2 ()
    let v1219 : string = ""
    let v1220 : Mut4 = {l0 = v1219} : Mut4
    method123(v1220, v1215, v1216, v1217, v1218)
    let v1221 : string = v1220.l0
    let v1224 : string = $"{v826} {v1195} #{v1214} %s{v1 ()} / {v1221}"
    let v1231 : char list = []
    let v1236 : (char list -> (char [])) = List.toArray
    let v1237 : (char []) = v1236 v1231
    let v1244 : string = v1224.TrimStart v1237 
    let v1283 : char list = []
    let v1286 : char list = '/' :: v1283 
    let v1295 : char list = ' ' :: v1286 
    let v1306 : (char list -> (char [])) = List.toArray
    let v1307 : (char []) = v1306 v1295
    let v1314 : string = v1244.TrimEnd v1307 
    v1314
and method122 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (exn * string * string * string))) : unit =
    let v3 : (unit -> string) = closure80(v0, v1, v2)
    method13(v0, v3)
and closure77 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US3 =
    let v4 : US0 = US0_4
    let v5 : (unit -> string) = closure78()
    let v6 : (unit -> struct (exn * string * string * string)) = closure79(v0, v1, v2, v3)
    method122(v4, v5, v6)
    US3_1
and closure81 () () : string =
    let v0 : string = "spiral_builder.process_cuda / error"
    v0
and closure82 (v0 : string, v1 : string, v2 : int32, v3 : string) () : struct (int32 * string * string * string) =
    struct (v2, v1, v0, v3)
and method126 (v0 : Mut4, v1 : int32, v2 : string, v3 : string, v4 : string) : unit =
    let v5 : string = "{ "
    method10(v0, v5)
    method11(v0)
    let v6 : string = "exit_code"
    method10(v0, v6)
    let v7 : string = " = "
    method10(v0, v7)
    method110(v0, v1)
    let v8 : string = "; "
    method10(v0, v8)
    let v9 : string = "run_result"
    method10(v0, v9)
    method10(v0, v7)
    method10(v0, v2)
    method10(v0, v8)
    let v10 : string = "new_code_path"
    method10(v0, v10)
    method10(v0, v7)
    method10(v0, v3)
    method10(v0, v8)
    let v11 : string = "external_command"
    method10(v0, v11)
    method10(v0, v7)
    method10(v0, v4)
    let v12 : string = " }"
    method10(v0, v12)
and closure83 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * string * string * string))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = $"near_sdk::env::block_timestamp()"
    let v331 : uint64 = Fable.Core.RustInterop.emitRustExpr () v330 
    let v334 : US2 option = None
    let _v334 = ref v334 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v335 : int64 = x
    let v336 : US2 = US2_0(v335)
    v336 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v334.Value <- x
    let v337 : US2 option = _v334.Value 
    let v360 : US2 = US2_1
    let v361 : US2 = v337 |> Option.defaultValue v360 
    let v374 : uint64 =
        match v361 with
        | US2_1 -> (* None *)
            v331
        | US2_0(v369) -> (* Some *)
            let v370 : (int64 -> uint64) = uint64
            let v371 : uint64 = v370 v369
            let v372 : uint64 = v331 - v371
            v372
    let v375 : uint64 = v374 / 1000000000UL
    let v376 : uint64 = v375 % 60UL
    let v377 : uint64 = v375 / 60UL
    let v378 : uint64 = v377 % 60UL
    let v379 : uint64 = v375 / 3600UL
    let v380 : uint64 = v379 % 24UL
    let v381 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v382 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v380, v378, v376) v381 
    let v383 : string = "fable_library_rust::String_::fromString($0)"
    let v384 : string = Fable.Core.RustInterop.emitRustExpr v382 v383 
    v384 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v387 : US2 option = None
    let _v387 = ref v387 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v388 : int64 = x
    let v389 : US2 = US2_0(v388)
    v389 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v387.Value <- x
    let v390 : US2 option = _v387.Value 
    let v413 : US2 = US2_1
    let v414 : US2 = v390 |> Option.defaultValue v413 
    let v512 : System.DateTime =
        match v414 with
        | US2_1 -> (* None *)
            let v504 : System.DateTime = System.DateTime.Now
            v504
        | US2_0(v422) -> (* Some *)
            let v425 : System.DateTime = System.DateTime.Now
            let v434 : (System.DateTime -> int64) = _.Ticks
            let v435 : int64 = v434 v425
            let v442 : int64 = v435 - v422
            let v445 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v446 : System.TimeSpan = v445 v442
            let v455 : (System.TimeSpan -> int32) = _.Hours
            let v456 : int32 = v455 v446
            let v465 : (System.TimeSpan -> int32) = _.Minutes
            let v466 : int32 = v465 v446
            let v475 : (System.TimeSpan -> int32) = _.Seconds
            let v476 : int32 = v475 v446
            let v485 : (System.TimeSpan -> int32) = _.Milliseconds
            let v486 : int32 = v485 v446
            let v495 : System.DateTime = System.DateTime (1, 1, 1, v456, v466, v476, v486)
            v495
    let v515 : string = method7()
    let v524 : (string -> string) = v512.ToString
    let v525 : string = v524 v515
    v525 
    #endif
#if FABLE_COMPILER_PYTHON
    let v534 : US2 option = None
    let _v534 = ref v534 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v535 : int64 = x
    let v536 : US2 = US2_0(v535)
    v536 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v534.Value <- x
    let v537 : US2 option = _v534.Value 
    let v560 : US2 = US2_1
    let v561 : US2 = v537 |> Option.defaultValue v560 
    let v659 : System.DateTime =
        match v561 with
        | US2_1 -> (* None *)
            let v651 : System.DateTime = System.DateTime.Now
            v651
        | US2_0(v569) -> (* Some *)
            let v572 : System.DateTime = System.DateTime.Now
            let v581 : (System.DateTime -> int64) = _.Ticks
            let v582 : int64 = v581 v572
            let v589 : int64 = v582 - v569
            let v592 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v593 : System.TimeSpan = v592 v589
            let v602 : (System.TimeSpan -> int32) = _.Hours
            let v603 : int32 = v602 v593
            let v612 : (System.TimeSpan -> int32) = _.Minutes
            let v613 : int32 = v612 v593
            let v622 : (System.TimeSpan -> int32) = _.Seconds
            let v623 : int32 = v622 v593
            let v632 : (System.TimeSpan -> int32) = _.Milliseconds
            let v633 : int32 = v632 v593
            let v642 : System.DateTime = System.DateTime (1, 1, 1, v603, v613, v623, v633)
            v642
    let v662 : string = method7()
    let v671 : (string -> string) = v659.ToString
    let v672 : string = v671 v662
    v672 
    #endif
#else
    let v681 : US2 option = None
    let _v681 = ref v681 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v682 : int64 = x
    let v683 : US2 = US2_0(v682)
    v683 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v681.Value <- x
    let v684 : US2 option = _v681.Value 
    let v707 : US2 = US2_1
    let v708 : US2 = v684 |> Option.defaultValue v707 
    let v806 : System.DateTime =
        match v708 with
        | US2_1 -> (* None *)
            let v798 : System.DateTime = System.DateTime.Now
            v798
        | US2_0(v716) -> (* Some *)
            let v719 : System.DateTime = System.DateTime.Now
            let v728 : (System.DateTime -> int64) = _.Ticks
            let v729 : int64 = v728 v719
            let v736 : int64 = v729 - v716
            let v739 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v740 : System.TimeSpan = v739 v736
            let v749 : (System.TimeSpan -> int32) = _.Hours
            let v750 : int32 = v749 v740
            let v759 : (System.TimeSpan -> int32) = _.Minutes
            let v760 : int32 = v759 v740
            let v769 : (System.TimeSpan -> int32) = _.Seconds
            let v770 : int32 = v769 v740
            let v779 : (System.TimeSpan -> int32) = _.Milliseconds
            let v780 : int32 = v779 v740
            let v789 : System.DateTime = System.DateTime (1, 1, 1, v750, v760, v770, v780)
            v789
    let v809 : string = method7()
    let v818 : (string -> string) = v806.ToString
    let v819 : string = v818 v809
    v819 
    #endif
    |> fun x -> _v35 <- Some x
    let v826 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v981 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v985 : US3 =
        if v981 then
            let v982 : string = "Verbose"
            US3_0(v982)
        else
            US3_1
    let v1034 : US3 =
        match v985 with
        | US3_1 -> (* None *)
            let v990 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v994 : US3 =
                if v990 then
                    let v991 : string = "Debug"
                    US3_0(v991)
                else
                    US3_1
            match v994 with
            | US3_1 -> (* None *)
                let v999 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v1003 : US3 =
                    if v999 then
                        let v1000 : string = "Info"
                        US3_0(v1000)
                    else
                        US3_1
                match v1003 with
                | US3_1 -> (* None *)
                    let v1008 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v1012 : US3 =
                        if v1008 then
                            let v1009 : string = "Warning"
                            US3_0(v1009)
                        else
                            US3_1
                    match v1012 with
                    | US3_1 -> (* None *)
                        let v1017 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v1021 : US3 =
                            if v1017 then
                                let v1018 : string = "Critical"
                                US3_0(v1018)
                            else
                                US3_1
                        match v1021 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v1022) -> (* Some *)
                            US3_0(v1022)
                    | US3_0(v1013) -> (* Some *)
                        US3_0(v1013)
                | US3_0(v1004) -> (* Some *)
                    US3_0(v1004)
            | US3_0(v995) -> (* Some *)
                US3_0(v995)
        | US3_0(v986) -> (* Some *)
            US3_0(v986)
    let v1038 : string =
        match v1034 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v1035) -> (* Some *)
            v1035
    let v1041 : (unit -> string) = v1038.ToLower
    let v1042 : string = v1041 ()
    let v1051 : string = v1042.PadLeft (7, ' ')
    let v1083 : bool = true
    let mutable _v1083 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1098 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1092 : string = "inline_colorization::color_bright_red"
            let v1093 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1092 
            v1093
        | US0_1 -> (* Debug *)
            let v1086 : string = "inline_colorization::color_bright_blue"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_2 -> (* Info *)
            let v1088 : string = "inline_colorization::color_bright_green"
            let v1089 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1088 
            v1089
        | US0_0 -> (* Verbose *)
            let v1084 : string = "inline_colorization::color_bright_black"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
        | US0_3 -> (* Warning *)
            let v1090 : string = "inline_colorization::color_yellow"
            let v1091 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1090 
            v1091
    let v1099 : string = "&*$0"
    let v1100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1099 
    let v1101 : string = "inline_colorization::color_reset"
    let v1102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1101 
    let v1103 : string = "\"{v1098}{v1100}{v1102}\""
    let v1104 : string = @$"format!(" + v1103 + ")"
    let v1105 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1104 
    let v1106 : string = "fable_library_rust::String_::fromString($0)"
    let v1107 : string = Fable.Core.RustInterop.emitRustExpr v1105 v1106 
    v1107 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1122 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1116 : string = "inline_colorization::color_bright_red"
            let v1117 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1116 
            v1117
        | US0_1 -> (* Debug *)
            let v1110 : string = "inline_colorization::color_bright_blue"
            let v1111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1110 
            v1111
        | US0_2 -> (* Info *)
            let v1112 : string = "inline_colorization::color_bright_green"
            let v1113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1112 
            v1113
        | US0_0 -> (* Verbose *)
            let v1108 : string = "inline_colorization::color_bright_black"
            let v1109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1108 
            v1109
        | US0_3 -> (* Warning *)
            let v1114 : string = "inline_colorization::color_yellow"
            let v1115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1114 
            v1115
    let v1123 : string = "&*$0"
    let v1124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1123 
    let v1125 : string = "inline_colorization::color_reset"
    let v1126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1125 
    let v1127 : string = "\"{v1122}{v1124}{v1126}\""
    let v1128 : string = @$"format!(" + v1127 + ")"
    let v1129 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1128 
    let v1130 : string = "fable_library_rust::String_::fromString($0)"
    let v1131 : string = Fable.Core.RustInterop.emitRustExpr v1129 v1130 
    v1131 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1146 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1140 : string = "inline_colorization::color_bright_red"
            let v1141 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1140 
            v1141
        | US0_1 -> (* Debug *)
            let v1134 : string = "inline_colorization::color_bright_blue"
            let v1135 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1134 
            v1135
        | US0_2 -> (* Info *)
            let v1136 : string = "inline_colorization::color_bright_green"
            let v1137 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1136 
            v1137
        | US0_0 -> (* Verbose *)
            let v1132 : string = "inline_colorization::color_bright_black"
            let v1133 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1132 
            v1133
        | US0_3 -> (* Warning *)
            let v1138 : string = "inline_colorization::color_yellow"
            let v1139 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1138 
            v1139
    let v1147 : string = "&*$0"
    let v1148 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1147 
    let v1149 : string = "inline_colorization::color_reset"
    let v1150 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1149 
    let v1151 : string = "\"{v1146}{v1148}{v1150}\""
    let v1152 : string = @$"format!(" + v1151 + ")"
    let v1153 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1152 
    let v1154 : string = "fable_library_rust::String_::fromString($0)"
    let v1155 : string = Fable.Core.RustInterop.emitRustExpr v1153 v1154 
    v1155 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1165 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1160 : string = "\u001b[91m"
            v1160
        | US0_1 -> (* Debug *)
            let v1157 : string = "\u001b[94m"
            v1157
        | US0_2 -> (* Info *)
            let v1158 : string = "\u001b[92m"
            v1158
        | US0_0 -> (* Verbose *)
            let v1156 : string = "\u001b[90m"
            v1156
        | US0_3 -> (* Warning *)
            let v1159 : string = "\u001b[93m"
            v1159
    let v1166 : string = method8()
    let v1167 : string = v1165 + v1051 
    let v1168 : string = v1167 + v1166 
    v1168 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1178 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1173 : string = "\u001b[91m"
            v1173
        | US0_1 -> (* Debug *)
            let v1170 : string = "\u001b[94m"
            v1170
        | US0_2 -> (* Info *)
            let v1171 : string = "\u001b[92m"
            v1171
        | US0_0 -> (* Verbose *)
            let v1169 : string = "\u001b[90m"
            v1169
        | US0_3 -> (* Warning *)
            let v1172 : string = "\u001b[93m"
            v1172
    let v1179 : string = method8()
    let v1180 : string = v1178 + v1051 
    let v1181 : string = v1180 + v1179 
    v1181 
    #endif
#else
    let v1191 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1186 : string = "\u001b[91m"
            v1186
        | US0_1 -> (* Debug *)
            let v1183 : string = "\u001b[94m"
            v1183
        | US0_2 -> (* Info *)
            let v1184 : string = "\u001b[92m"
            v1184
        | US0_0 -> (* Verbose *)
            let v1182 : string = "\u001b[90m"
            v1182
        | US0_3 -> (* Warning *)
            let v1185 : string = "\u001b[93m"
            v1185
    let v1192 : string = method8()
    let v1193 : string = v1191 + v1051 
    let v1194 : string = v1193 + v1192 
    v1194 
    #endif
    |> fun x -> _v1083 <- Some x
    let v1195 : string = match _v1083 with Some x -> x | None -> failwith "base.run_target / _v1083=None"
    let v1214 : int64 = v14.l0
    let struct (v1215 : int32, v1216 : string, v1217 : string, v1218 : string) = v2 ()
    let v1219 : string = ""
    let v1220 : Mut4 = {l0 = v1219} : Mut4
    method126(v1220, v1215, v1216, v1217, v1218)
    let v1221 : string = v1220.l0
    let v1224 : string = $"{v826} {v1195} #{v1214} %s{v1 ()} / {v1221}"
    let v1231 : char list = []
    let v1236 : (char list -> (char [])) = List.toArray
    let v1237 : (char []) = v1236 v1231
    let v1244 : string = v1224.TrimStart v1237 
    let v1283 : char list = []
    let v1286 : char list = '/' :: v1283 
    let v1295 : char list = ' ' :: v1286 
    let v1306 : (char list -> (char [])) = List.toArray
    let v1307 : (char []) = v1306 v1295
    let v1314 : string = v1244.TrimEnd v1307 
    v1314
and method125 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * string * string * string))) : unit =
    let v3 : (unit -> string) = closure83(v0, v1, v2)
    method13(v0, v3)
and closure84 () struct (v0 : string, v1 : string) : (std_string_String * std_string_String) =
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v6 
    let v8 : string = "String::from($0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : (std_string_String * std_string_String) = v5, v9 
    v10
and method127 () : string =
    let v0 : string = "fs-path"
    v0
and method128 () : string =
    let v0 : string = "command"
    v0
and method129 () : string =
    let v0 : string = "path"
    v0
and method133 (v0 : string) : string =
    v0
and method135 () : string =
    let v0 : string = ""
    v0
and method136 (v0 : string) : string =
    v0
and method137 () : string =
    let v0 : string = "^\\\\\\\\\\?\\\\"
    v0
and method134 (v0 : string) : string =
    let v2 : bool = v0 = ""
    if v2 then
        let v3 : string = ""
        v3
    else
        let v4 : string = method135()
        let v7 : bool = true
        let mutable _v7 : string option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v8 : string = method136(v0)
        let v9 : string = $"regex::Regex::new(&$0)"
        let v10 : string = "^\\\\\\\\\\?\\\\"
        let v11 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v10 v9 
        let v12 : string = "$0.unwrap()"
        let v13 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v11 v12 
        let v14 : string = $"$0.replace_all(&$1, &*$2)"
        let v15 : std_borrow_Cow<Str> = Fable.Core.RustInterop.emitRustExpr struct (v13, v8, v4) v14 
        let v16 : string = "String::from($0)"
        let v17 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v16 
        let v18 : string = "fable_library_rust::String_::fromString($0)"
        let v19 : string = Fable.Core.RustInterop.emitRustExpr v17 v18 
        v19 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v22 : string = null |> unbox<string>
        v22 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v31 : string = null |> unbox<string>
        v31 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v40 : string = null |> unbox<string>
        v40 
        #endif
#if FABLE_COMPILER_PYTHON
        let v49 : string = null |> unbox<string>
        v49 
        #endif
#else
        let v56 : string = method137()
        let v57 : string = System.Text.RegularExpressions.Regex.Replace (v0, v56, v4)
        v57 
        #endif
        |> fun x -> _v7 <- Some x
        let v58 : string = match _v7 with Some x -> x | None -> failwith "base.run_target / _v7=None"
        let v73 : string = $"{v58.[0] |> string |> _.ToLower()}{v58.[1..]}"
        let v74 : string = "\\"
        let v75 : string = "/"
        let v76 : string = v73.Replace (v74, v75)
        v76
and method138 (v0 : int32, v1 : Mut6) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and method139 () : char =
    let v2 : bool = true
    let mutable _v2 : char option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "std::path::MAIN_SEPARATOR"
    let v4 : char = Fable.Core.RustInterop.emitRustExpr () v3 
    v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : char = System.IO.Path.DirectorySeparatorChar
    v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : char = System.IO.Path.DirectorySeparatorChar
    v6 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v7 : char = System.IO.Path.DirectorySeparatorChar
    v7 
    #endif
#if FABLE_COMPILER_PYTHON
    let v8 : char = System.IO.Path.DirectorySeparatorChar
    v8 
    #endif
#else
    let v9 : char = System.IO.Path.DirectorySeparatorChar
    v9 
    #endif
    |> fun x -> _v2 <- Some x
    let v10 : char = match _v2 with Some x -> x | None -> failwith "base.run_target / _v2=None"
    v10
and method140 (v0 : string) : string =
    v0
and method132 (v0 : string) : string =
    let v3 : bool = true
    let mutable _v3 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = method133(v0)
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "String::from($0)"
    let v8 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v9 : string = "std::path::PathBuf::from($0)"
    let v10 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v8 v9 
    let v11 : string = "$0.exists()"
    let v12 : bool = Fable.Core.RustInterop.emitRustExpr v10 v11 
    let v13 : bool = v12 = false
    let v167 : string =
        if v13 then
            let v14 : string = method29()
            let v15 : string = method19(v14, v4)
            let v16 : string = method134(v15)
            let v17 : string = "/"
            let v18 : (string []) = v16.Split v17 
            let v19 : (string []) = [||]
            let v20 : int32 = v18.Length
            let v21 : Mut6 = {l0 = 0; l1 = 0; l2 = v19} : Mut6
            while method138(v20, v21) do
                let v23 : int32 = v21.l0
                let v24 : int32 =  -v23
                let v25 : int32 = v24 + v20
                let v26 : int32 = v25 - 1
                let struct (v27 : int32, v28 : (string [])) = v21.l1, v21.l2
                let v29 : string = v18.[int v26]
                let v30 : bool = ".." = v29
                let struct (v72 : int32, v73 : (string [])) =
                    if v30 then
                        let v31 : int32 = v27 + 1
                        struct (v31, v28)
                    else
                        let v32 : bool = "." = v29
                        if v32 then
                            struct (v27, v28)
                        else
                            let v33 : bool = 0 = v27
                            if v33 then
                                let v34 : string = ":"
                                let v35 : bool = v29.EndsWith v34 
                                if v35 then
                                    let v36 : string = $"{v14.[0]}:"
                                    let v37 : (string []) = [|v36|]
                                    let v38 : int32 = v37.Length
                                    let v39 : int32 = v28.Length
                                    let v40 : int32 = v38 + v39
                                    let v41 : (string []) = Array.zeroCreate<string> (v40)
                                    let v42 : Mut5 = {l0 = 0} : Mut5
                                    while method58(v40, v42) do
                                        let v44 : int32 = v42.l0
                                        let v45 : bool = v44 < v38
                                        let v49 : string =
                                            if v45 then
                                                let v46 : string = v37.[int v44]
                                                v46
                                            else
                                                let v47 : int32 = v44 - v38
                                                let v48 : string = v28.[int v47]
                                                v48
                                        v41.[int v44] <- v49
                                        let v50 : int32 = v44 + 1
                                        v42.l0 <- v50
                                        ()
                                    struct (0, v41)
                                else
                                    let v51 : (string []) = [|v29|]
                                    let v52 : int32 = v51.Length
                                    let v53 : int32 = v28.Length
                                    let v54 : int32 = v52 + v53
                                    let v55 : (string []) = Array.zeroCreate<string> (v54)
                                    let v56 : Mut5 = {l0 = 0} : Mut5
                                    while method58(v54, v56) do
                                        let v58 : int32 = v56.l0
                                        let v59 : bool = v58 < v52
                                        let v63 : string =
                                            if v59 then
                                                let v60 : string = v51.[int v58]
                                                v60
                                            else
                                                let v61 : int32 = v58 - v52
                                                let v62 : string = v28.[int v61]
                                                v62
                                        v55.[int v58] <- v63
                                        let v64 : int32 = v58 + 1
                                        v56.l0 <- v64
                                        ()
                                    struct (0, v55)
                            else
                                let v67 : int32 = v27 - 1
                                struct (v67, v28)
                let v74 : int32 = v23 + 1
                v21.l0 <- v74
                v21.l1 <- v72
                v21.l2 <- v73
                ()
            let struct (v75 : int32, v76 : (string [])) = v21.l1, v21.l2
            let v79 : string seq = seq { for i = 0 to v76.Length - 1 do yield v76.[i] }
            let v86 : char = method139()
            let v89 : (char -> string) = _.ToString()
            let v90 : string = v89 v86
            let v99 : (string -> (string seq -> string)) = String.concat
            let v100 : (string seq -> string) = v99 v90
            v100 v79
        else
            let v108 : string = "std::fs::canonicalize(&*$0)"
            let v109 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v4 v108 
            let v110 : string = "$0.unwrap()"
            let v111 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v109 v110 
            let v112 : string = "$0.display()"
            let v113 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v111 v112 
            let v116 : bool = true
            let mutable _v116 : std_string_String option = None 
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v117 : string = "format!(\"{}\", $0)"
            let v118 : std_string_String = Fable.Core.RustInterop.emitRustExpr v113 v117 
            v118 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v119 : string = "format!(\"{}\", $0)"
            let v120 : std_string_String = Fable.Core.RustInterop.emitRustExpr v113 v119 
            v120 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v121 : string = "format!(\"{}\", $0)"
            let v122 : std_string_String = Fable.Core.RustInterop.emitRustExpr v113 v121 
            v122 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v125 : std_string_String = null |> unbox<std_string_String>
            v125 
            #endif
#if FABLE_COMPILER_PYTHON
            let v134 : std_string_String = null |> unbox<std_string_String>
            v134 
            #endif
#else
            let v143 : std_string_String = null |> unbox<std_string_String>
            v143 
            #endif
            |> fun x -> _v116 <- Some x
            let v150 : std_string_String = match _v116 with Some x -> x | None -> failwith "base.run_target / _v116=None"
            let v165 : string = "fable_library_rust::String_::fromString($0)"
            let v166 : string = Fable.Core.RustInterop.emitRustExpr v150 v165 
            v166
    v167 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v170 : string = null |> unbox<string>
    v170 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v179 : string = null |> unbox<string>
    v179 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v188 : string = null |> unbox<string>
    v188 
    #endif
#if FABLE_COMPILER_PYTHON
    let v197 : string = null |> unbox<string>
    v197 
    #endif
#else
    let v204 : string = method140(v0)
    let v205 : (string -> string) = System.IO.Path.GetFullPath
    let v206 : string = v205 v204
    v206 
    #endif
    |> fun x -> _v3 <- Some x
    let v207 : string = match _v3 with Some x -> x | None -> failwith "base.run_target / _v3=None"
    v207
and method131 (v0 : string) : string =
    let v1 : string = method132(v0)
    method134(v1)
and method130 (v0 : string) : string =
    let v1 : string = method29()
    let v2 : string = method19(v1, v0)
    method131(v2)
and closure85 () (v0 : std_string_String) : string =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    method130(v2)
and method141 () : string =
    let v0 : string = "retries"
    v0
and method142 () : string =
    let v0 : string = "working-directory"
    v0
and closure86 () () : string =
    let v0 : string = "spiral_builder.run / repl error"
    v0
and closure87 (v0 : uint8, v1 : uint8, v2 : string, v3 : int32) () : struct (int32 * string * string) =
    let v4 : string = $"{v1}/{v0}"
    struct (v3, v2, v4)
and method145 (v0 : Mut4, v1 : int32, v2 : string, v3 : string) : unit =
    let v4 : string = "{ "
    method10(v0, v4)
    method11(v0)
    let v5 : string = "exit_code"
    method10(v0, v5)
    let v6 : string = " = "
    method10(v0, v6)
    method110(v0, v1)
    let v7 : string = "; "
    method10(v0, v7)
    let v8 : string = "repl_result"
    method10(v0, v8)
    method10(v0, v6)
    method10(v0, v2)
    method10(v0, v7)
    let v9 : string = "retry"
    method10(v0, v9)
    method10(v0, v6)
    method10(v0, v3)
    let v10 : string = " }"
    method10(v0, v10)
and closure88 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * string * string))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = $"near_sdk::env::block_timestamp()"
    let v331 : uint64 = Fable.Core.RustInterop.emitRustExpr () v330 
    let v334 : US2 option = None
    let _v334 = ref v334 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v335 : int64 = x
    let v336 : US2 = US2_0(v335)
    v336 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v334.Value <- x
    let v337 : US2 option = _v334.Value 
    let v360 : US2 = US2_1
    let v361 : US2 = v337 |> Option.defaultValue v360 
    let v374 : uint64 =
        match v361 with
        | US2_1 -> (* None *)
            v331
        | US2_0(v369) -> (* Some *)
            let v370 : (int64 -> uint64) = uint64
            let v371 : uint64 = v370 v369
            let v372 : uint64 = v331 - v371
            v372
    let v375 : uint64 = v374 / 1000000000UL
    let v376 : uint64 = v375 % 60UL
    let v377 : uint64 = v375 / 60UL
    let v378 : uint64 = v377 % 60UL
    let v379 : uint64 = v375 / 3600UL
    let v380 : uint64 = v379 % 24UL
    let v381 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v382 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v380, v378, v376) v381 
    let v383 : string = "fable_library_rust::String_::fromString($0)"
    let v384 : string = Fable.Core.RustInterop.emitRustExpr v382 v383 
    v384 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v387 : US2 option = None
    let _v387 = ref v387 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v388 : int64 = x
    let v389 : US2 = US2_0(v388)
    v389 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v387.Value <- x
    let v390 : US2 option = _v387.Value 
    let v413 : US2 = US2_1
    let v414 : US2 = v390 |> Option.defaultValue v413 
    let v512 : System.DateTime =
        match v414 with
        | US2_1 -> (* None *)
            let v504 : System.DateTime = System.DateTime.Now
            v504
        | US2_0(v422) -> (* Some *)
            let v425 : System.DateTime = System.DateTime.Now
            let v434 : (System.DateTime -> int64) = _.Ticks
            let v435 : int64 = v434 v425
            let v442 : int64 = v435 - v422
            let v445 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v446 : System.TimeSpan = v445 v442
            let v455 : (System.TimeSpan -> int32) = _.Hours
            let v456 : int32 = v455 v446
            let v465 : (System.TimeSpan -> int32) = _.Minutes
            let v466 : int32 = v465 v446
            let v475 : (System.TimeSpan -> int32) = _.Seconds
            let v476 : int32 = v475 v446
            let v485 : (System.TimeSpan -> int32) = _.Milliseconds
            let v486 : int32 = v485 v446
            let v495 : System.DateTime = System.DateTime (1, 1, 1, v456, v466, v476, v486)
            v495
    let v515 : string = method7()
    let v524 : (string -> string) = v512.ToString
    let v525 : string = v524 v515
    v525 
    #endif
#if FABLE_COMPILER_PYTHON
    let v534 : US2 option = None
    let _v534 = ref v534 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v535 : int64 = x
    let v536 : US2 = US2_0(v535)
    v536 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v534.Value <- x
    let v537 : US2 option = _v534.Value 
    let v560 : US2 = US2_1
    let v561 : US2 = v537 |> Option.defaultValue v560 
    let v659 : System.DateTime =
        match v561 with
        | US2_1 -> (* None *)
            let v651 : System.DateTime = System.DateTime.Now
            v651
        | US2_0(v569) -> (* Some *)
            let v572 : System.DateTime = System.DateTime.Now
            let v581 : (System.DateTime -> int64) = _.Ticks
            let v582 : int64 = v581 v572
            let v589 : int64 = v582 - v569
            let v592 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v593 : System.TimeSpan = v592 v589
            let v602 : (System.TimeSpan -> int32) = _.Hours
            let v603 : int32 = v602 v593
            let v612 : (System.TimeSpan -> int32) = _.Minutes
            let v613 : int32 = v612 v593
            let v622 : (System.TimeSpan -> int32) = _.Seconds
            let v623 : int32 = v622 v593
            let v632 : (System.TimeSpan -> int32) = _.Milliseconds
            let v633 : int32 = v632 v593
            let v642 : System.DateTime = System.DateTime (1, 1, 1, v603, v613, v623, v633)
            v642
    let v662 : string = method7()
    let v671 : (string -> string) = v659.ToString
    let v672 : string = v671 v662
    v672 
    #endif
#else
    let v681 : US2 option = None
    let _v681 = ref v681 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v682 : int64 = x
    let v683 : US2 = US2_0(v682)
    v683 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v681.Value <- x
    let v684 : US2 option = _v681.Value 
    let v707 : US2 = US2_1
    let v708 : US2 = v684 |> Option.defaultValue v707 
    let v806 : System.DateTime =
        match v708 with
        | US2_1 -> (* None *)
            let v798 : System.DateTime = System.DateTime.Now
            v798
        | US2_0(v716) -> (* Some *)
            let v719 : System.DateTime = System.DateTime.Now
            let v728 : (System.DateTime -> int64) = _.Ticks
            let v729 : int64 = v728 v719
            let v736 : int64 = v729 - v716
            let v739 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v740 : System.TimeSpan = v739 v736
            let v749 : (System.TimeSpan -> int32) = _.Hours
            let v750 : int32 = v749 v740
            let v759 : (System.TimeSpan -> int32) = _.Minutes
            let v760 : int32 = v759 v740
            let v769 : (System.TimeSpan -> int32) = _.Seconds
            let v770 : int32 = v769 v740
            let v779 : (System.TimeSpan -> int32) = _.Milliseconds
            let v780 : int32 = v779 v740
            let v789 : System.DateTime = System.DateTime (1, 1, 1, v750, v760, v770, v780)
            v789
    let v809 : string = method7()
    let v818 : (string -> string) = v806.ToString
    let v819 : string = v818 v809
    v819 
    #endif
    |> fun x -> _v35 <- Some x
    let v826 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v981 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v985 : US3 =
        if v981 then
            let v982 : string = "Verbose"
            US3_0(v982)
        else
            US3_1
    let v1034 : US3 =
        match v985 with
        | US3_1 -> (* None *)
            let v990 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v994 : US3 =
                if v990 then
                    let v991 : string = "Debug"
                    US3_0(v991)
                else
                    US3_1
            match v994 with
            | US3_1 -> (* None *)
                let v999 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v1003 : US3 =
                    if v999 then
                        let v1000 : string = "Info"
                        US3_0(v1000)
                    else
                        US3_1
                match v1003 with
                | US3_1 -> (* None *)
                    let v1008 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v1012 : US3 =
                        if v1008 then
                            let v1009 : string = "Warning"
                            US3_0(v1009)
                        else
                            US3_1
                    match v1012 with
                    | US3_1 -> (* None *)
                        let v1017 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v1021 : US3 =
                            if v1017 then
                                let v1018 : string = "Critical"
                                US3_0(v1018)
                            else
                                US3_1
                        match v1021 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v1022) -> (* Some *)
                            US3_0(v1022)
                    | US3_0(v1013) -> (* Some *)
                        US3_0(v1013)
                | US3_0(v1004) -> (* Some *)
                    US3_0(v1004)
            | US3_0(v995) -> (* Some *)
                US3_0(v995)
        | US3_0(v986) -> (* Some *)
            US3_0(v986)
    let v1038 : string =
        match v1034 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v1035) -> (* Some *)
            v1035
    let v1041 : (unit -> string) = v1038.ToLower
    let v1042 : string = v1041 ()
    let v1051 : string = v1042.PadLeft (7, ' ')
    let v1083 : bool = true
    let mutable _v1083 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1098 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1092 : string = "inline_colorization::color_bright_red"
            let v1093 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1092 
            v1093
        | US0_1 -> (* Debug *)
            let v1086 : string = "inline_colorization::color_bright_blue"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_2 -> (* Info *)
            let v1088 : string = "inline_colorization::color_bright_green"
            let v1089 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1088 
            v1089
        | US0_0 -> (* Verbose *)
            let v1084 : string = "inline_colorization::color_bright_black"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
        | US0_3 -> (* Warning *)
            let v1090 : string = "inline_colorization::color_yellow"
            let v1091 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1090 
            v1091
    let v1099 : string = "&*$0"
    let v1100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1099 
    let v1101 : string = "inline_colorization::color_reset"
    let v1102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1101 
    let v1103 : string = "\"{v1098}{v1100}{v1102}\""
    let v1104 : string = @$"format!(" + v1103 + ")"
    let v1105 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1104 
    let v1106 : string = "fable_library_rust::String_::fromString($0)"
    let v1107 : string = Fable.Core.RustInterop.emitRustExpr v1105 v1106 
    v1107 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1122 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1116 : string = "inline_colorization::color_bright_red"
            let v1117 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1116 
            v1117
        | US0_1 -> (* Debug *)
            let v1110 : string = "inline_colorization::color_bright_blue"
            let v1111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1110 
            v1111
        | US0_2 -> (* Info *)
            let v1112 : string = "inline_colorization::color_bright_green"
            let v1113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1112 
            v1113
        | US0_0 -> (* Verbose *)
            let v1108 : string = "inline_colorization::color_bright_black"
            let v1109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1108 
            v1109
        | US0_3 -> (* Warning *)
            let v1114 : string = "inline_colorization::color_yellow"
            let v1115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1114 
            v1115
    let v1123 : string = "&*$0"
    let v1124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1123 
    let v1125 : string = "inline_colorization::color_reset"
    let v1126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1125 
    let v1127 : string = "\"{v1122}{v1124}{v1126}\""
    let v1128 : string = @$"format!(" + v1127 + ")"
    let v1129 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1128 
    let v1130 : string = "fable_library_rust::String_::fromString($0)"
    let v1131 : string = Fable.Core.RustInterop.emitRustExpr v1129 v1130 
    v1131 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1146 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1140 : string = "inline_colorization::color_bright_red"
            let v1141 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1140 
            v1141
        | US0_1 -> (* Debug *)
            let v1134 : string = "inline_colorization::color_bright_blue"
            let v1135 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1134 
            v1135
        | US0_2 -> (* Info *)
            let v1136 : string = "inline_colorization::color_bright_green"
            let v1137 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1136 
            v1137
        | US0_0 -> (* Verbose *)
            let v1132 : string = "inline_colorization::color_bright_black"
            let v1133 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1132 
            v1133
        | US0_3 -> (* Warning *)
            let v1138 : string = "inline_colorization::color_yellow"
            let v1139 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1138 
            v1139
    let v1147 : string = "&*$0"
    let v1148 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1147 
    let v1149 : string = "inline_colorization::color_reset"
    let v1150 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1149 
    let v1151 : string = "\"{v1146}{v1148}{v1150}\""
    let v1152 : string = @$"format!(" + v1151 + ")"
    let v1153 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1152 
    let v1154 : string = "fable_library_rust::String_::fromString($0)"
    let v1155 : string = Fable.Core.RustInterop.emitRustExpr v1153 v1154 
    v1155 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1165 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1160 : string = "\u001b[91m"
            v1160
        | US0_1 -> (* Debug *)
            let v1157 : string = "\u001b[94m"
            v1157
        | US0_2 -> (* Info *)
            let v1158 : string = "\u001b[92m"
            v1158
        | US0_0 -> (* Verbose *)
            let v1156 : string = "\u001b[90m"
            v1156
        | US0_3 -> (* Warning *)
            let v1159 : string = "\u001b[93m"
            v1159
    let v1166 : string = method8()
    let v1167 : string = v1165 + v1051 
    let v1168 : string = v1167 + v1166 
    v1168 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1178 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1173 : string = "\u001b[91m"
            v1173
        | US0_1 -> (* Debug *)
            let v1170 : string = "\u001b[94m"
            v1170
        | US0_2 -> (* Info *)
            let v1171 : string = "\u001b[92m"
            v1171
        | US0_0 -> (* Verbose *)
            let v1169 : string = "\u001b[90m"
            v1169
        | US0_3 -> (* Warning *)
            let v1172 : string = "\u001b[93m"
            v1172
    let v1179 : string = method8()
    let v1180 : string = v1178 + v1051 
    let v1181 : string = v1180 + v1179 
    v1181 
    #endif
#else
    let v1191 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1186 : string = "\u001b[91m"
            v1186
        | US0_1 -> (* Debug *)
            let v1183 : string = "\u001b[94m"
            v1183
        | US0_2 -> (* Info *)
            let v1184 : string = "\u001b[92m"
            v1184
        | US0_0 -> (* Verbose *)
            let v1182 : string = "\u001b[90m"
            v1182
        | US0_3 -> (* Warning *)
            let v1185 : string = "\u001b[93m"
            v1185
    let v1192 : string = method8()
    let v1193 : string = v1191 + v1051 
    let v1194 : string = v1193 + v1192 
    v1194 
    #endif
    |> fun x -> _v1083 <- Some x
    let v1195 : string = match _v1083 with Some x -> x | None -> failwith "base.run_target / _v1083=None"
    let v1214 : int64 = v14.l0
    let struct (v1215 : int32, v1216 : string, v1217 : string) = v2 ()
    let v1218 : string = ""
    let v1219 : Mut4 = {l0 = v1218} : Mut4
    method145(v1219, v1215, v1216, v1217)
    let v1220 : string = v1219.l0
    let v1223 : string = $"{v826} {v1195} #{v1214} %s{v1 ()} / {v1220}"
    let v1230 : char list = []
    let v1235 : (char list -> (char [])) = List.toArray
    let v1236 : (char []) = v1235 v1230
    let v1243 : string = v1223.TrimStart v1236 
    let v1282 : char list = []
    let v1285 : char list = '/' :: v1282 
    let v1294 : char list = ' ' :: v1285 
    let v1305 : (char list -> (char [])) = List.toArray
    let v1306 : (char []) = v1305 v1294
    let v1313 : string = v1243.TrimEnd v1306 
    v1313
and method144 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * string * string))) : unit =
    let v3 : (unit -> string) = closure88(v0, v1, v2)
    method13(v0, v3)
and method143 (v0 : string option, v1 : uint8, v2 : string, v3 : uint8) : struct (int32 * string) =
    let v4 : System.Threading.CancellationToken option = None
    let v5 : (struct (string * string) []) = [||]
    let v6 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v7 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v8 : string option = None
    let v9 : string = $"dotnet repl --exit-after-run --run \"{v2}\" --output-path \"{v2}.ipynb\""
    let v10 : string = "TRACE_LEVEL"
    let v11 : string = "Verbose"
    let v12 : string = "AUTOMATION"
    let v13 : string = "True"
    let v14 : (struct (string * string) []) = [|struct (v10, v11); struct (v12, v13)|]
    let v15 : bool = false
    let struct (v16 : int32, v17 : string) = method55(v9, v4, v14, v6, v7, v15, v0)
    let v18 : bool = v16 = 0
    let v20 : bool =
        if v18 then
            true
        else
            let v19 : bool = v3 >= v1
            v19
    if v20 then
        struct (v16, v17)
    else
        let v21 : US0 = US0_1
        let v22 : (unit -> string) = closure86()
        let v23 : (unit -> struct (int32 * string * string)) = closure87(v1, v3, v17, v16)
        method144(v21, v22, v23)
        let v24 : uint8 = v3 + 1uy
        method143(v0, v1, v2, v24)
and closure89 () () : string =
    let v0 : string = "spiral_builder.run / dib / jupyter nbconvert"
    v0
and closure90 (v0 : string, v1 : int32) () : struct (int32 * int32) =
    let v2 : int32 = v0.Length
    struct (v1, v2)
and method147 (v0 : Mut4, v1 : int32, v2 : int32) : unit =
    let v3 : string = "{ "
    method10(v0, v3)
    method11(v0)
    let v4 : string = "exit_code"
    method10(v0, v4)
    let v5 : string = " = "
    method10(v0, v5)
    method110(v0, v1)
    let v6 : string = "; "
    method10(v0, v6)
    let v7 : string = "jupyter_result_length"
    method10(v0, v7)
    method10(v0, v5)
    method110(v0, v2)
    let v8 : string = " }"
    method10(v0, v8)
and closure91 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * int32))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = $"near_sdk::env::block_timestamp()"
    let v331 : uint64 = Fable.Core.RustInterop.emitRustExpr () v330 
    let v334 : US2 option = None
    let _v334 = ref v334 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v335 : int64 = x
    let v336 : US2 = US2_0(v335)
    v336 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v334.Value <- x
    let v337 : US2 option = _v334.Value 
    let v360 : US2 = US2_1
    let v361 : US2 = v337 |> Option.defaultValue v360 
    let v374 : uint64 =
        match v361 with
        | US2_1 -> (* None *)
            v331
        | US2_0(v369) -> (* Some *)
            let v370 : (int64 -> uint64) = uint64
            let v371 : uint64 = v370 v369
            let v372 : uint64 = v331 - v371
            v372
    let v375 : uint64 = v374 / 1000000000UL
    let v376 : uint64 = v375 % 60UL
    let v377 : uint64 = v375 / 60UL
    let v378 : uint64 = v377 % 60UL
    let v379 : uint64 = v375 / 3600UL
    let v380 : uint64 = v379 % 24UL
    let v381 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v382 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v380, v378, v376) v381 
    let v383 : string = "fable_library_rust::String_::fromString($0)"
    let v384 : string = Fable.Core.RustInterop.emitRustExpr v382 v383 
    v384 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v387 : US2 option = None
    let _v387 = ref v387 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v388 : int64 = x
    let v389 : US2 = US2_0(v388)
    v389 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v387.Value <- x
    let v390 : US2 option = _v387.Value 
    let v413 : US2 = US2_1
    let v414 : US2 = v390 |> Option.defaultValue v413 
    let v512 : System.DateTime =
        match v414 with
        | US2_1 -> (* None *)
            let v504 : System.DateTime = System.DateTime.Now
            v504
        | US2_0(v422) -> (* Some *)
            let v425 : System.DateTime = System.DateTime.Now
            let v434 : (System.DateTime -> int64) = _.Ticks
            let v435 : int64 = v434 v425
            let v442 : int64 = v435 - v422
            let v445 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v446 : System.TimeSpan = v445 v442
            let v455 : (System.TimeSpan -> int32) = _.Hours
            let v456 : int32 = v455 v446
            let v465 : (System.TimeSpan -> int32) = _.Minutes
            let v466 : int32 = v465 v446
            let v475 : (System.TimeSpan -> int32) = _.Seconds
            let v476 : int32 = v475 v446
            let v485 : (System.TimeSpan -> int32) = _.Milliseconds
            let v486 : int32 = v485 v446
            let v495 : System.DateTime = System.DateTime (1, 1, 1, v456, v466, v476, v486)
            v495
    let v515 : string = method7()
    let v524 : (string -> string) = v512.ToString
    let v525 : string = v524 v515
    v525 
    #endif
#if FABLE_COMPILER_PYTHON
    let v534 : US2 option = None
    let _v534 = ref v534 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v535 : int64 = x
    let v536 : US2 = US2_0(v535)
    v536 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v534.Value <- x
    let v537 : US2 option = _v534.Value 
    let v560 : US2 = US2_1
    let v561 : US2 = v537 |> Option.defaultValue v560 
    let v659 : System.DateTime =
        match v561 with
        | US2_1 -> (* None *)
            let v651 : System.DateTime = System.DateTime.Now
            v651
        | US2_0(v569) -> (* Some *)
            let v572 : System.DateTime = System.DateTime.Now
            let v581 : (System.DateTime -> int64) = _.Ticks
            let v582 : int64 = v581 v572
            let v589 : int64 = v582 - v569
            let v592 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v593 : System.TimeSpan = v592 v589
            let v602 : (System.TimeSpan -> int32) = _.Hours
            let v603 : int32 = v602 v593
            let v612 : (System.TimeSpan -> int32) = _.Minutes
            let v613 : int32 = v612 v593
            let v622 : (System.TimeSpan -> int32) = _.Seconds
            let v623 : int32 = v622 v593
            let v632 : (System.TimeSpan -> int32) = _.Milliseconds
            let v633 : int32 = v632 v593
            let v642 : System.DateTime = System.DateTime (1, 1, 1, v603, v613, v623, v633)
            v642
    let v662 : string = method7()
    let v671 : (string -> string) = v659.ToString
    let v672 : string = v671 v662
    v672 
    #endif
#else
    let v681 : US2 option = None
    let _v681 = ref v681 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v682 : int64 = x
    let v683 : US2 = US2_0(v682)
    v683 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v681.Value <- x
    let v684 : US2 option = _v681.Value 
    let v707 : US2 = US2_1
    let v708 : US2 = v684 |> Option.defaultValue v707 
    let v806 : System.DateTime =
        match v708 with
        | US2_1 -> (* None *)
            let v798 : System.DateTime = System.DateTime.Now
            v798
        | US2_0(v716) -> (* Some *)
            let v719 : System.DateTime = System.DateTime.Now
            let v728 : (System.DateTime -> int64) = _.Ticks
            let v729 : int64 = v728 v719
            let v736 : int64 = v729 - v716
            let v739 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v740 : System.TimeSpan = v739 v736
            let v749 : (System.TimeSpan -> int32) = _.Hours
            let v750 : int32 = v749 v740
            let v759 : (System.TimeSpan -> int32) = _.Minutes
            let v760 : int32 = v759 v740
            let v769 : (System.TimeSpan -> int32) = _.Seconds
            let v770 : int32 = v769 v740
            let v779 : (System.TimeSpan -> int32) = _.Milliseconds
            let v780 : int32 = v779 v740
            let v789 : System.DateTime = System.DateTime (1, 1, 1, v750, v760, v770, v780)
            v789
    let v809 : string = method7()
    let v818 : (string -> string) = v806.ToString
    let v819 : string = v818 v809
    v819 
    #endif
    |> fun x -> _v35 <- Some x
    let v826 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v981 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v985 : US3 =
        if v981 then
            let v982 : string = "Verbose"
            US3_0(v982)
        else
            US3_1
    let v1034 : US3 =
        match v985 with
        | US3_1 -> (* None *)
            let v990 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v994 : US3 =
                if v990 then
                    let v991 : string = "Debug"
                    US3_0(v991)
                else
                    US3_1
            match v994 with
            | US3_1 -> (* None *)
                let v999 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v1003 : US3 =
                    if v999 then
                        let v1000 : string = "Info"
                        US3_0(v1000)
                    else
                        US3_1
                match v1003 with
                | US3_1 -> (* None *)
                    let v1008 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v1012 : US3 =
                        if v1008 then
                            let v1009 : string = "Warning"
                            US3_0(v1009)
                        else
                            US3_1
                    match v1012 with
                    | US3_1 -> (* None *)
                        let v1017 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v1021 : US3 =
                            if v1017 then
                                let v1018 : string = "Critical"
                                US3_0(v1018)
                            else
                                US3_1
                        match v1021 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v1022) -> (* Some *)
                            US3_0(v1022)
                    | US3_0(v1013) -> (* Some *)
                        US3_0(v1013)
                | US3_0(v1004) -> (* Some *)
                    US3_0(v1004)
            | US3_0(v995) -> (* Some *)
                US3_0(v995)
        | US3_0(v986) -> (* Some *)
            US3_0(v986)
    let v1038 : string =
        match v1034 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v1035) -> (* Some *)
            v1035
    let v1041 : (unit -> string) = v1038.ToLower
    let v1042 : string = v1041 ()
    let v1051 : string = v1042.PadLeft (7, ' ')
    let v1083 : bool = true
    let mutable _v1083 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1098 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1092 : string = "inline_colorization::color_bright_red"
            let v1093 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1092 
            v1093
        | US0_1 -> (* Debug *)
            let v1086 : string = "inline_colorization::color_bright_blue"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_2 -> (* Info *)
            let v1088 : string = "inline_colorization::color_bright_green"
            let v1089 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1088 
            v1089
        | US0_0 -> (* Verbose *)
            let v1084 : string = "inline_colorization::color_bright_black"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
        | US0_3 -> (* Warning *)
            let v1090 : string = "inline_colorization::color_yellow"
            let v1091 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1090 
            v1091
    let v1099 : string = "&*$0"
    let v1100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1099 
    let v1101 : string = "inline_colorization::color_reset"
    let v1102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1101 
    let v1103 : string = "\"{v1098}{v1100}{v1102}\""
    let v1104 : string = @$"format!(" + v1103 + ")"
    let v1105 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1104 
    let v1106 : string = "fable_library_rust::String_::fromString($0)"
    let v1107 : string = Fable.Core.RustInterop.emitRustExpr v1105 v1106 
    v1107 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1122 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1116 : string = "inline_colorization::color_bright_red"
            let v1117 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1116 
            v1117
        | US0_1 -> (* Debug *)
            let v1110 : string = "inline_colorization::color_bright_blue"
            let v1111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1110 
            v1111
        | US0_2 -> (* Info *)
            let v1112 : string = "inline_colorization::color_bright_green"
            let v1113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1112 
            v1113
        | US0_0 -> (* Verbose *)
            let v1108 : string = "inline_colorization::color_bright_black"
            let v1109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1108 
            v1109
        | US0_3 -> (* Warning *)
            let v1114 : string = "inline_colorization::color_yellow"
            let v1115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1114 
            v1115
    let v1123 : string = "&*$0"
    let v1124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1123 
    let v1125 : string = "inline_colorization::color_reset"
    let v1126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1125 
    let v1127 : string = "\"{v1122}{v1124}{v1126}\""
    let v1128 : string = @$"format!(" + v1127 + ")"
    let v1129 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1128 
    let v1130 : string = "fable_library_rust::String_::fromString($0)"
    let v1131 : string = Fable.Core.RustInterop.emitRustExpr v1129 v1130 
    v1131 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1146 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1140 : string = "inline_colorization::color_bright_red"
            let v1141 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1140 
            v1141
        | US0_1 -> (* Debug *)
            let v1134 : string = "inline_colorization::color_bright_blue"
            let v1135 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1134 
            v1135
        | US0_2 -> (* Info *)
            let v1136 : string = "inline_colorization::color_bright_green"
            let v1137 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1136 
            v1137
        | US0_0 -> (* Verbose *)
            let v1132 : string = "inline_colorization::color_bright_black"
            let v1133 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1132 
            v1133
        | US0_3 -> (* Warning *)
            let v1138 : string = "inline_colorization::color_yellow"
            let v1139 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1138 
            v1139
    let v1147 : string = "&*$0"
    let v1148 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1147 
    let v1149 : string = "inline_colorization::color_reset"
    let v1150 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1149 
    let v1151 : string = "\"{v1146}{v1148}{v1150}\""
    let v1152 : string = @$"format!(" + v1151 + ")"
    let v1153 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1152 
    let v1154 : string = "fable_library_rust::String_::fromString($0)"
    let v1155 : string = Fable.Core.RustInterop.emitRustExpr v1153 v1154 
    v1155 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1165 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1160 : string = "\u001b[91m"
            v1160
        | US0_1 -> (* Debug *)
            let v1157 : string = "\u001b[94m"
            v1157
        | US0_2 -> (* Info *)
            let v1158 : string = "\u001b[92m"
            v1158
        | US0_0 -> (* Verbose *)
            let v1156 : string = "\u001b[90m"
            v1156
        | US0_3 -> (* Warning *)
            let v1159 : string = "\u001b[93m"
            v1159
    let v1166 : string = method8()
    let v1167 : string = v1165 + v1051 
    let v1168 : string = v1167 + v1166 
    v1168 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1178 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1173 : string = "\u001b[91m"
            v1173
        | US0_1 -> (* Debug *)
            let v1170 : string = "\u001b[94m"
            v1170
        | US0_2 -> (* Info *)
            let v1171 : string = "\u001b[92m"
            v1171
        | US0_0 -> (* Verbose *)
            let v1169 : string = "\u001b[90m"
            v1169
        | US0_3 -> (* Warning *)
            let v1172 : string = "\u001b[93m"
            v1172
    let v1179 : string = method8()
    let v1180 : string = v1178 + v1051 
    let v1181 : string = v1180 + v1179 
    v1181 
    #endif
#else
    let v1191 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1186 : string = "\u001b[91m"
            v1186
        | US0_1 -> (* Debug *)
            let v1183 : string = "\u001b[94m"
            v1183
        | US0_2 -> (* Info *)
            let v1184 : string = "\u001b[92m"
            v1184
        | US0_0 -> (* Verbose *)
            let v1182 : string = "\u001b[90m"
            v1182
        | US0_3 -> (* Warning *)
            let v1185 : string = "\u001b[93m"
            v1185
    let v1192 : string = method8()
    let v1193 : string = v1191 + v1051 
    let v1194 : string = v1193 + v1192 
    v1194 
    #endif
    |> fun x -> _v1083 <- Some x
    let v1195 : string = match _v1083 with Some x -> x | None -> failwith "base.run_target / _v1083=None"
    let v1214 : int64 = v14.l0
    let struct (v1215 : int32, v1216 : int32) = v2 ()
    let v1217 : string = ""
    let v1218 : Mut4 = {l0 = v1217} : Mut4
    method147(v1218, v1215, v1216)
    let v1219 : string = v1218.l0
    let v1222 : string = $"{v826} {v1195} #{v1214} %s{v1 ()} / {v1219}"
    let v1229 : char list = []
    let v1234 : (char list -> (char [])) = List.toArray
    let v1235 : (char []) = v1234 v1229
    let v1242 : string = v1222.TrimStart v1235 
    let v1281 : char list = []
    let v1284 : char list = '/' :: v1281 
    let v1293 : char list = ' ' :: v1284 
    let v1304 : (char list -> (char [])) = List.toArray
    let v1305 : (char []) = v1304 v1293
    let v1312 : string = v1242.TrimEnd v1305 
    v1312
and method146 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * int32))) : unit =
    let v3 : (unit -> string) = closure91(v0, v1, v2)
    method13(v0, v3)
and closure92 () () : string =
    let v0 : string = "spiral_builder.run / dib / html cell ids"
    v0
and closure93 (v0 : string, v1 : int32) () : struct (int32 * int32) =
    let v2 : int32 = v0.Length
    struct (v1, v2)
and method149 (v0 : Mut4, v1 : int32, v2 : int32) : unit =
    let v3 : string = "{ "
    method10(v0, v3)
    method11(v0)
    let v4 : string = "exit_code"
    method10(v0, v4)
    let v5 : string = " = "
    method10(v0, v5)
    method110(v0, v1)
    let v6 : string = "; "
    method10(v0, v6)
    let v7 : string = "pwsh_replace_html_result_length"
    method10(v0, v7)
    method10(v0, v5)
    method110(v0, v2)
    let v8 : string = " }"
    method10(v0, v8)
and closure94 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * int32))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = $"near_sdk::env::block_timestamp()"
    let v331 : uint64 = Fable.Core.RustInterop.emitRustExpr () v330 
    let v334 : US2 option = None
    let _v334 = ref v334 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v335 : int64 = x
    let v336 : US2 = US2_0(v335)
    v336 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v334.Value <- x
    let v337 : US2 option = _v334.Value 
    let v360 : US2 = US2_1
    let v361 : US2 = v337 |> Option.defaultValue v360 
    let v374 : uint64 =
        match v361 with
        | US2_1 -> (* None *)
            v331
        | US2_0(v369) -> (* Some *)
            let v370 : (int64 -> uint64) = uint64
            let v371 : uint64 = v370 v369
            let v372 : uint64 = v331 - v371
            v372
    let v375 : uint64 = v374 / 1000000000UL
    let v376 : uint64 = v375 % 60UL
    let v377 : uint64 = v375 / 60UL
    let v378 : uint64 = v377 % 60UL
    let v379 : uint64 = v375 / 3600UL
    let v380 : uint64 = v379 % 24UL
    let v381 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v382 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v380, v378, v376) v381 
    let v383 : string = "fable_library_rust::String_::fromString($0)"
    let v384 : string = Fable.Core.RustInterop.emitRustExpr v382 v383 
    v384 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v387 : US2 option = None
    let _v387 = ref v387 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v388 : int64 = x
    let v389 : US2 = US2_0(v388)
    v389 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v387.Value <- x
    let v390 : US2 option = _v387.Value 
    let v413 : US2 = US2_1
    let v414 : US2 = v390 |> Option.defaultValue v413 
    let v512 : System.DateTime =
        match v414 with
        | US2_1 -> (* None *)
            let v504 : System.DateTime = System.DateTime.Now
            v504
        | US2_0(v422) -> (* Some *)
            let v425 : System.DateTime = System.DateTime.Now
            let v434 : (System.DateTime -> int64) = _.Ticks
            let v435 : int64 = v434 v425
            let v442 : int64 = v435 - v422
            let v445 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v446 : System.TimeSpan = v445 v442
            let v455 : (System.TimeSpan -> int32) = _.Hours
            let v456 : int32 = v455 v446
            let v465 : (System.TimeSpan -> int32) = _.Minutes
            let v466 : int32 = v465 v446
            let v475 : (System.TimeSpan -> int32) = _.Seconds
            let v476 : int32 = v475 v446
            let v485 : (System.TimeSpan -> int32) = _.Milliseconds
            let v486 : int32 = v485 v446
            let v495 : System.DateTime = System.DateTime (1, 1, 1, v456, v466, v476, v486)
            v495
    let v515 : string = method7()
    let v524 : (string -> string) = v512.ToString
    let v525 : string = v524 v515
    v525 
    #endif
#if FABLE_COMPILER_PYTHON
    let v534 : US2 option = None
    let _v534 = ref v534 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v535 : int64 = x
    let v536 : US2 = US2_0(v535)
    v536 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v534.Value <- x
    let v537 : US2 option = _v534.Value 
    let v560 : US2 = US2_1
    let v561 : US2 = v537 |> Option.defaultValue v560 
    let v659 : System.DateTime =
        match v561 with
        | US2_1 -> (* None *)
            let v651 : System.DateTime = System.DateTime.Now
            v651
        | US2_0(v569) -> (* Some *)
            let v572 : System.DateTime = System.DateTime.Now
            let v581 : (System.DateTime -> int64) = _.Ticks
            let v582 : int64 = v581 v572
            let v589 : int64 = v582 - v569
            let v592 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v593 : System.TimeSpan = v592 v589
            let v602 : (System.TimeSpan -> int32) = _.Hours
            let v603 : int32 = v602 v593
            let v612 : (System.TimeSpan -> int32) = _.Minutes
            let v613 : int32 = v612 v593
            let v622 : (System.TimeSpan -> int32) = _.Seconds
            let v623 : int32 = v622 v593
            let v632 : (System.TimeSpan -> int32) = _.Milliseconds
            let v633 : int32 = v632 v593
            let v642 : System.DateTime = System.DateTime (1, 1, 1, v603, v613, v623, v633)
            v642
    let v662 : string = method7()
    let v671 : (string -> string) = v659.ToString
    let v672 : string = v671 v662
    v672 
    #endif
#else
    let v681 : US2 option = None
    let _v681 = ref v681 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v682 : int64 = x
    let v683 : US2 = US2_0(v682)
    v683 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v681.Value <- x
    let v684 : US2 option = _v681.Value 
    let v707 : US2 = US2_1
    let v708 : US2 = v684 |> Option.defaultValue v707 
    let v806 : System.DateTime =
        match v708 with
        | US2_1 -> (* None *)
            let v798 : System.DateTime = System.DateTime.Now
            v798
        | US2_0(v716) -> (* Some *)
            let v719 : System.DateTime = System.DateTime.Now
            let v728 : (System.DateTime -> int64) = _.Ticks
            let v729 : int64 = v728 v719
            let v736 : int64 = v729 - v716
            let v739 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v740 : System.TimeSpan = v739 v736
            let v749 : (System.TimeSpan -> int32) = _.Hours
            let v750 : int32 = v749 v740
            let v759 : (System.TimeSpan -> int32) = _.Minutes
            let v760 : int32 = v759 v740
            let v769 : (System.TimeSpan -> int32) = _.Seconds
            let v770 : int32 = v769 v740
            let v779 : (System.TimeSpan -> int32) = _.Milliseconds
            let v780 : int32 = v779 v740
            let v789 : System.DateTime = System.DateTime (1, 1, 1, v750, v760, v770, v780)
            v789
    let v809 : string = method7()
    let v818 : (string -> string) = v806.ToString
    let v819 : string = v818 v809
    v819 
    #endif
    |> fun x -> _v35 <- Some x
    let v826 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v981 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v985 : US3 =
        if v981 then
            let v982 : string = "Verbose"
            US3_0(v982)
        else
            US3_1
    let v1034 : US3 =
        match v985 with
        | US3_1 -> (* None *)
            let v990 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v994 : US3 =
                if v990 then
                    let v991 : string = "Debug"
                    US3_0(v991)
                else
                    US3_1
            match v994 with
            | US3_1 -> (* None *)
                let v999 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v1003 : US3 =
                    if v999 then
                        let v1000 : string = "Info"
                        US3_0(v1000)
                    else
                        US3_1
                match v1003 with
                | US3_1 -> (* None *)
                    let v1008 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v1012 : US3 =
                        if v1008 then
                            let v1009 : string = "Warning"
                            US3_0(v1009)
                        else
                            US3_1
                    match v1012 with
                    | US3_1 -> (* None *)
                        let v1017 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v1021 : US3 =
                            if v1017 then
                                let v1018 : string = "Critical"
                                US3_0(v1018)
                            else
                                US3_1
                        match v1021 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v1022) -> (* Some *)
                            US3_0(v1022)
                    | US3_0(v1013) -> (* Some *)
                        US3_0(v1013)
                | US3_0(v1004) -> (* Some *)
                    US3_0(v1004)
            | US3_0(v995) -> (* Some *)
                US3_0(v995)
        | US3_0(v986) -> (* Some *)
            US3_0(v986)
    let v1038 : string =
        match v1034 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v1035) -> (* Some *)
            v1035
    let v1041 : (unit -> string) = v1038.ToLower
    let v1042 : string = v1041 ()
    let v1051 : string = v1042.PadLeft (7, ' ')
    let v1083 : bool = true
    let mutable _v1083 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1098 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1092 : string = "inline_colorization::color_bright_red"
            let v1093 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1092 
            v1093
        | US0_1 -> (* Debug *)
            let v1086 : string = "inline_colorization::color_bright_blue"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_2 -> (* Info *)
            let v1088 : string = "inline_colorization::color_bright_green"
            let v1089 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1088 
            v1089
        | US0_0 -> (* Verbose *)
            let v1084 : string = "inline_colorization::color_bright_black"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
        | US0_3 -> (* Warning *)
            let v1090 : string = "inline_colorization::color_yellow"
            let v1091 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1090 
            v1091
    let v1099 : string = "&*$0"
    let v1100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1099 
    let v1101 : string = "inline_colorization::color_reset"
    let v1102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1101 
    let v1103 : string = "\"{v1098}{v1100}{v1102}\""
    let v1104 : string = @$"format!(" + v1103 + ")"
    let v1105 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1104 
    let v1106 : string = "fable_library_rust::String_::fromString($0)"
    let v1107 : string = Fable.Core.RustInterop.emitRustExpr v1105 v1106 
    v1107 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1122 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1116 : string = "inline_colorization::color_bright_red"
            let v1117 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1116 
            v1117
        | US0_1 -> (* Debug *)
            let v1110 : string = "inline_colorization::color_bright_blue"
            let v1111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1110 
            v1111
        | US0_2 -> (* Info *)
            let v1112 : string = "inline_colorization::color_bright_green"
            let v1113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1112 
            v1113
        | US0_0 -> (* Verbose *)
            let v1108 : string = "inline_colorization::color_bright_black"
            let v1109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1108 
            v1109
        | US0_3 -> (* Warning *)
            let v1114 : string = "inline_colorization::color_yellow"
            let v1115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1114 
            v1115
    let v1123 : string = "&*$0"
    let v1124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1123 
    let v1125 : string = "inline_colorization::color_reset"
    let v1126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1125 
    let v1127 : string = "\"{v1122}{v1124}{v1126}\""
    let v1128 : string = @$"format!(" + v1127 + ")"
    let v1129 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1128 
    let v1130 : string = "fable_library_rust::String_::fromString($0)"
    let v1131 : string = Fable.Core.RustInterop.emitRustExpr v1129 v1130 
    v1131 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1146 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1140 : string = "inline_colorization::color_bright_red"
            let v1141 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1140 
            v1141
        | US0_1 -> (* Debug *)
            let v1134 : string = "inline_colorization::color_bright_blue"
            let v1135 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1134 
            v1135
        | US0_2 -> (* Info *)
            let v1136 : string = "inline_colorization::color_bright_green"
            let v1137 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1136 
            v1137
        | US0_0 -> (* Verbose *)
            let v1132 : string = "inline_colorization::color_bright_black"
            let v1133 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1132 
            v1133
        | US0_3 -> (* Warning *)
            let v1138 : string = "inline_colorization::color_yellow"
            let v1139 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1138 
            v1139
    let v1147 : string = "&*$0"
    let v1148 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1147 
    let v1149 : string = "inline_colorization::color_reset"
    let v1150 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1149 
    let v1151 : string = "\"{v1146}{v1148}{v1150}\""
    let v1152 : string = @$"format!(" + v1151 + ")"
    let v1153 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1152 
    let v1154 : string = "fable_library_rust::String_::fromString($0)"
    let v1155 : string = Fable.Core.RustInterop.emitRustExpr v1153 v1154 
    v1155 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1165 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1160 : string = "\u001b[91m"
            v1160
        | US0_1 -> (* Debug *)
            let v1157 : string = "\u001b[94m"
            v1157
        | US0_2 -> (* Info *)
            let v1158 : string = "\u001b[92m"
            v1158
        | US0_0 -> (* Verbose *)
            let v1156 : string = "\u001b[90m"
            v1156
        | US0_3 -> (* Warning *)
            let v1159 : string = "\u001b[93m"
            v1159
    let v1166 : string = method8()
    let v1167 : string = v1165 + v1051 
    let v1168 : string = v1167 + v1166 
    v1168 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1178 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1173 : string = "\u001b[91m"
            v1173
        | US0_1 -> (* Debug *)
            let v1170 : string = "\u001b[94m"
            v1170
        | US0_2 -> (* Info *)
            let v1171 : string = "\u001b[92m"
            v1171
        | US0_0 -> (* Verbose *)
            let v1169 : string = "\u001b[90m"
            v1169
        | US0_3 -> (* Warning *)
            let v1172 : string = "\u001b[93m"
            v1172
    let v1179 : string = method8()
    let v1180 : string = v1178 + v1051 
    let v1181 : string = v1180 + v1179 
    v1181 
    #endif
#else
    let v1191 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1186 : string = "\u001b[91m"
            v1186
        | US0_1 -> (* Debug *)
            let v1183 : string = "\u001b[94m"
            v1183
        | US0_2 -> (* Info *)
            let v1184 : string = "\u001b[92m"
            v1184
        | US0_0 -> (* Verbose *)
            let v1182 : string = "\u001b[90m"
            v1182
        | US0_3 -> (* Warning *)
            let v1185 : string = "\u001b[93m"
            v1185
    let v1192 : string = method8()
    let v1193 : string = v1191 + v1051 
    let v1194 : string = v1193 + v1192 
    v1194 
    #endif
    |> fun x -> _v1083 <- Some x
    let v1195 : string = match _v1083 with Some x -> x | None -> failwith "base.run_target / _v1083=None"
    let v1214 : int64 = v14.l0
    let struct (v1215 : int32, v1216 : int32) = v2 ()
    let v1217 : string = ""
    let v1218 : Mut4 = {l0 = v1217} : Mut4
    method149(v1218, v1215, v1216)
    let v1219 : string = v1218.l0
    let v1222 : string = $"{v826} {v1195} #{v1214} %s{v1 ()} / {v1219}"
    let v1229 : char list = []
    let v1234 : (char list -> (char [])) = List.toArray
    let v1235 : (char []) = v1234 v1229
    let v1242 : string = v1222.TrimStart v1235 
    let v1281 : char list = []
    let v1284 : char list = '/' :: v1281 
    let v1293 : char list = ' ' :: v1284 
    let v1304 : (char list -> (char [])) = List.toArray
    let v1305 : (char []) = v1304 v1293
    let v1312 : string = v1242.TrimEnd v1305 
    v1312
and method148 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * int32))) : unit =
    let v3 : (unit -> string) = closure94(v0, v1, v2)
    method13(v0, v3)
and closure95 () () : string =
    let v0 : string = "spiral_builder.run / dib"
    v0
and closure96 (v0 : string, v1 : int32) () : struct (int32 * int32) =
    let v2 : int32 = v0.Length
    struct (v1, v2)
and method151 (v0 : Mut4, v1 : int32, v2 : int32) : unit =
    let v3 : string = "{ "
    method10(v0, v3)
    method11(v0)
    let v4 : string = "exit_code"
    method10(v0, v4)
    let v5 : string = " = "
    method10(v0, v5)
    method110(v0, v1)
    let v6 : string = "; "
    method10(v0, v6)
    let v7 : string = "result_length"
    method10(v0, v7)
    method10(v0, v5)
    method110(v0, v2)
    let v8 : string = " }"
    method10(v0, v8)
and closure97 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * int32))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = $"near_sdk::env::block_timestamp()"
    let v331 : uint64 = Fable.Core.RustInterop.emitRustExpr () v330 
    let v334 : US2 option = None
    let _v334 = ref v334 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v335 : int64 = x
    let v336 : US2 = US2_0(v335)
    v336 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v334.Value <- x
    let v337 : US2 option = _v334.Value 
    let v360 : US2 = US2_1
    let v361 : US2 = v337 |> Option.defaultValue v360 
    let v374 : uint64 =
        match v361 with
        | US2_1 -> (* None *)
            v331
        | US2_0(v369) -> (* Some *)
            let v370 : (int64 -> uint64) = uint64
            let v371 : uint64 = v370 v369
            let v372 : uint64 = v331 - v371
            v372
    let v375 : uint64 = v374 / 1000000000UL
    let v376 : uint64 = v375 % 60UL
    let v377 : uint64 = v375 / 60UL
    let v378 : uint64 = v377 % 60UL
    let v379 : uint64 = v375 / 3600UL
    let v380 : uint64 = v379 % 24UL
    let v381 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v382 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v380, v378, v376) v381 
    let v383 : string = "fable_library_rust::String_::fromString($0)"
    let v384 : string = Fable.Core.RustInterop.emitRustExpr v382 v383 
    v384 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v387 : US2 option = None
    let _v387 = ref v387 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v388 : int64 = x
    let v389 : US2 = US2_0(v388)
    v389 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v387.Value <- x
    let v390 : US2 option = _v387.Value 
    let v413 : US2 = US2_1
    let v414 : US2 = v390 |> Option.defaultValue v413 
    let v512 : System.DateTime =
        match v414 with
        | US2_1 -> (* None *)
            let v504 : System.DateTime = System.DateTime.Now
            v504
        | US2_0(v422) -> (* Some *)
            let v425 : System.DateTime = System.DateTime.Now
            let v434 : (System.DateTime -> int64) = _.Ticks
            let v435 : int64 = v434 v425
            let v442 : int64 = v435 - v422
            let v445 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v446 : System.TimeSpan = v445 v442
            let v455 : (System.TimeSpan -> int32) = _.Hours
            let v456 : int32 = v455 v446
            let v465 : (System.TimeSpan -> int32) = _.Minutes
            let v466 : int32 = v465 v446
            let v475 : (System.TimeSpan -> int32) = _.Seconds
            let v476 : int32 = v475 v446
            let v485 : (System.TimeSpan -> int32) = _.Milliseconds
            let v486 : int32 = v485 v446
            let v495 : System.DateTime = System.DateTime (1, 1, 1, v456, v466, v476, v486)
            v495
    let v515 : string = method7()
    let v524 : (string -> string) = v512.ToString
    let v525 : string = v524 v515
    v525 
    #endif
#if FABLE_COMPILER_PYTHON
    let v534 : US2 option = None
    let _v534 = ref v534 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v535 : int64 = x
    let v536 : US2 = US2_0(v535)
    v536 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v534.Value <- x
    let v537 : US2 option = _v534.Value 
    let v560 : US2 = US2_1
    let v561 : US2 = v537 |> Option.defaultValue v560 
    let v659 : System.DateTime =
        match v561 with
        | US2_1 -> (* None *)
            let v651 : System.DateTime = System.DateTime.Now
            v651
        | US2_0(v569) -> (* Some *)
            let v572 : System.DateTime = System.DateTime.Now
            let v581 : (System.DateTime -> int64) = _.Ticks
            let v582 : int64 = v581 v572
            let v589 : int64 = v582 - v569
            let v592 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v593 : System.TimeSpan = v592 v589
            let v602 : (System.TimeSpan -> int32) = _.Hours
            let v603 : int32 = v602 v593
            let v612 : (System.TimeSpan -> int32) = _.Minutes
            let v613 : int32 = v612 v593
            let v622 : (System.TimeSpan -> int32) = _.Seconds
            let v623 : int32 = v622 v593
            let v632 : (System.TimeSpan -> int32) = _.Milliseconds
            let v633 : int32 = v632 v593
            let v642 : System.DateTime = System.DateTime (1, 1, 1, v603, v613, v623, v633)
            v642
    let v662 : string = method7()
    let v671 : (string -> string) = v659.ToString
    let v672 : string = v671 v662
    v672 
    #endif
#else
    let v681 : US2 option = None
    let _v681 = ref v681 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v682 : int64 = x
    let v683 : US2 = US2_0(v682)
    v683 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v681.Value <- x
    let v684 : US2 option = _v681.Value 
    let v707 : US2 = US2_1
    let v708 : US2 = v684 |> Option.defaultValue v707 
    let v806 : System.DateTime =
        match v708 with
        | US2_1 -> (* None *)
            let v798 : System.DateTime = System.DateTime.Now
            v798
        | US2_0(v716) -> (* Some *)
            let v719 : System.DateTime = System.DateTime.Now
            let v728 : (System.DateTime -> int64) = _.Ticks
            let v729 : int64 = v728 v719
            let v736 : int64 = v729 - v716
            let v739 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v740 : System.TimeSpan = v739 v736
            let v749 : (System.TimeSpan -> int32) = _.Hours
            let v750 : int32 = v749 v740
            let v759 : (System.TimeSpan -> int32) = _.Minutes
            let v760 : int32 = v759 v740
            let v769 : (System.TimeSpan -> int32) = _.Seconds
            let v770 : int32 = v769 v740
            let v779 : (System.TimeSpan -> int32) = _.Milliseconds
            let v780 : int32 = v779 v740
            let v789 : System.DateTime = System.DateTime (1, 1, 1, v750, v760, v770, v780)
            v789
    let v809 : string = method7()
    let v818 : (string -> string) = v806.ToString
    let v819 : string = v818 v809
    v819 
    #endif
    |> fun x -> _v35 <- Some x
    let v826 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v981 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v985 : US3 =
        if v981 then
            let v982 : string = "Verbose"
            US3_0(v982)
        else
            US3_1
    let v1034 : US3 =
        match v985 with
        | US3_1 -> (* None *)
            let v990 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v994 : US3 =
                if v990 then
                    let v991 : string = "Debug"
                    US3_0(v991)
                else
                    US3_1
            match v994 with
            | US3_1 -> (* None *)
                let v999 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v1003 : US3 =
                    if v999 then
                        let v1000 : string = "Info"
                        US3_0(v1000)
                    else
                        US3_1
                match v1003 with
                | US3_1 -> (* None *)
                    let v1008 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v1012 : US3 =
                        if v1008 then
                            let v1009 : string = "Warning"
                            US3_0(v1009)
                        else
                            US3_1
                    match v1012 with
                    | US3_1 -> (* None *)
                        let v1017 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v1021 : US3 =
                            if v1017 then
                                let v1018 : string = "Critical"
                                US3_0(v1018)
                            else
                                US3_1
                        match v1021 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v1022) -> (* Some *)
                            US3_0(v1022)
                    | US3_0(v1013) -> (* Some *)
                        US3_0(v1013)
                | US3_0(v1004) -> (* Some *)
                    US3_0(v1004)
            | US3_0(v995) -> (* Some *)
                US3_0(v995)
        | US3_0(v986) -> (* Some *)
            US3_0(v986)
    let v1038 : string =
        match v1034 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v1035) -> (* Some *)
            v1035
    let v1041 : (unit -> string) = v1038.ToLower
    let v1042 : string = v1041 ()
    let v1051 : string = v1042.PadLeft (7, ' ')
    let v1083 : bool = true
    let mutable _v1083 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1098 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1092 : string = "inline_colorization::color_bright_red"
            let v1093 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1092 
            v1093
        | US0_1 -> (* Debug *)
            let v1086 : string = "inline_colorization::color_bright_blue"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_2 -> (* Info *)
            let v1088 : string = "inline_colorization::color_bright_green"
            let v1089 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1088 
            v1089
        | US0_0 -> (* Verbose *)
            let v1084 : string = "inline_colorization::color_bright_black"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
        | US0_3 -> (* Warning *)
            let v1090 : string = "inline_colorization::color_yellow"
            let v1091 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1090 
            v1091
    let v1099 : string = "&*$0"
    let v1100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1099 
    let v1101 : string = "inline_colorization::color_reset"
    let v1102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1101 
    let v1103 : string = "\"{v1098}{v1100}{v1102}\""
    let v1104 : string = @$"format!(" + v1103 + ")"
    let v1105 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1104 
    let v1106 : string = "fable_library_rust::String_::fromString($0)"
    let v1107 : string = Fable.Core.RustInterop.emitRustExpr v1105 v1106 
    v1107 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1122 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1116 : string = "inline_colorization::color_bright_red"
            let v1117 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1116 
            v1117
        | US0_1 -> (* Debug *)
            let v1110 : string = "inline_colorization::color_bright_blue"
            let v1111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1110 
            v1111
        | US0_2 -> (* Info *)
            let v1112 : string = "inline_colorization::color_bright_green"
            let v1113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1112 
            v1113
        | US0_0 -> (* Verbose *)
            let v1108 : string = "inline_colorization::color_bright_black"
            let v1109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1108 
            v1109
        | US0_3 -> (* Warning *)
            let v1114 : string = "inline_colorization::color_yellow"
            let v1115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1114 
            v1115
    let v1123 : string = "&*$0"
    let v1124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1123 
    let v1125 : string = "inline_colorization::color_reset"
    let v1126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1125 
    let v1127 : string = "\"{v1122}{v1124}{v1126}\""
    let v1128 : string = @$"format!(" + v1127 + ")"
    let v1129 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1128 
    let v1130 : string = "fable_library_rust::String_::fromString($0)"
    let v1131 : string = Fable.Core.RustInterop.emitRustExpr v1129 v1130 
    v1131 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1146 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1140 : string = "inline_colorization::color_bright_red"
            let v1141 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1140 
            v1141
        | US0_1 -> (* Debug *)
            let v1134 : string = "inline_colorization::color_bright_blue"
            let v1135 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1134 
            v1135
        | US0_2 -> (* Info *)
            let v1136 : string = "inline_colorization::color_bright_green"
            let v1137 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1136 
            v1137
        | US0_0 -> (* Verbose *)
            let v1132 : string = "inline_colorization::color_bright_black"
            let v1133 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1132 
            v1133
        | US0_3 -> (* Warning *)
            let v1138 : string = "inline_colorization::color_yellow"
            let v1139 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1138 
            v1139
    let v1147 : string = "&*$0"
    let v1148 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1147 
    let v1149 : string = "inline_colorization::color_reset"
    let v1150 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1149 
    let v1151 : string = "\"{v1146}{v1148}{v1150}\""
    let v1152 : string = @$"format!(" + v1151 + ")"
    let v1153 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1152 
    let v1154 : string = "fable_library_rust::String_::fromString($0)"
    let v1155 : string = Fable.Core.RustInterop.emitRustExpr v1153 v1154 
    v1155 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1165 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1160 : string = "\u001b[91m"
            v1160
        | US0_1 -> (* Debug *)
            let v1157 : string = "\u001b[94m"
            v1157
        | US0_2 -> (* Info *)
            let v1158 : string = "\u001b[92m"
            v1158
        | US0_0 -> (* Verbose *)
            let v1156 : string = "\u001b[90m"
            v1156
        | US0_3 -> (* Warning *)
            let v1159 : string = "\u001b[93m"
            v1159
    let v1166 : string = method8()
    let v1167 : string = v1165 + v1051 
    let v1168 : string = v1167 + v1166 
    v1168 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1178 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1173 : string = "\u001b[91m"
            v1173
        | US0_1 -> (* Debug *)
            let v1170 : string = "\u001b[94m"
            v1170
        | US0_2 -> (* Info *)
            let v1171 : string = "\u001b[92m"
            v1171
        | US0_0 -> (* Verbose *)
            let v1169 : string = "\u001b[90m"
            v1169
        | US0_3 -> (* Warning *)
            let v1172 : string = "\u001b[93m"
            v1172
    let v1179 : string = method8()
    let v1180 : string = v1178 + v1051 
    let v1181 : string = v1180 + v1179 
    v1181 
    #endif
#else
    let v1191 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1186 : string = "\u001b[91m"
            v1186
        | US0_1 -> (* Debug *)
            let v1183 : string = "\u001b[94m"
            v1183
        | US0_2 -> (* Info *)
            let v1184 : string = "\u001b[92m"
            v1184
        | US0_0 -> (* Verbose *)
            let v1182 : string = "\u001b[90m"
            v1182
        | US0_3 -> (* Warning *)
            let v1185 : string = "\u001b[93m"
            v1185
    let v1192 : string = method8()
    let v1193 : string = v1191 + v1051 
    let v1194 : string = v1193 + v1192 
    v1194 
    #endif
    |> fun x -> _v1083 <- Some x
    let v1195 : string = match _v1083 with Some x -> x | None -> failwith "base.run_target / _v1083=None"
    let v1214 : int64 = v14.l0
    let struct (v1215 : int32, v1216 : int32) = v2 ()
    let v1217 : string = ""
    let v1218 : Mut4 = {l0 = v1217} : Mut4
    method151(v1218, v1215, v1216)
    let v1219 : string = v1218.l0
    let v1222 : string = $"{v826} {v1195} #{v1214} %s{v1 ()} / {v1219}"
    let v1229 : char list = []
    let v1234 : (char list -> (char [])) = List.toArray
    let v1235 : (char []) = v1234 v1229
    let v1242 : string = v1222.TrimStart v1235 
    let v1281 : char list = []
    let v1284 : char list = '/' :: v1281 
    let v1293 : char list = ' ' :: v1284 
    let v1304 : (char list -> (char [])) = List.toArray
    let v1305 : (char []) = v1304 v1293
    let v1312 : string = v1242.TrimEnd v1305 
    v1312
and method150 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * int32))) : unit =
    let v3 : (unit -> string) = closure97(v0, v1, v2)
    method13(v0, v3)
and method152 () : string =
    let v0 : string = "wasm"
    v0
and method153 () : string =
    let v0 : string = "contract"
    v0
and method155 (v0 : Mut4, v1 : US33) : unit =
    let v4 : string = $"%A{v1}"
    method10(v0, v4)
and method154 (v0 : Mut4, v1 : string, v2 : string, v3 : US33) : unit =
    let v4 : string = "{ "
    method10(v0, v4)
    method11(v0)
    let v5 : string = "extension"
    method10(v0, v5)
    let v6 : string = " = "
    method10(v0, v6)
    method10(v0, v1)
    let v7 : string = "; "
    method10(v0, v7)
    let v8 : string = "code"
    method10(v0, v8)
    method10(v0, v6)
    method10(v0, v2)
    method10(v0, v7)
    let v9 : string = "runtime"
    method10(v0, v9)
    method10(v0, v6)
    method155(v0, v3)
    let v10 : string = " }"
    method10(v0, v10)
and method157 () : string =
    let v0 : string = ""
    v0
and method156 (v0 : string) : string =
    let v3 : bool = true
    let mutable _v3 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v5 : (System.Text.Encoding -> (string -> (uint8 []))) = _.GetBytes
    let v6 : (string -> (uint8 [])) = v5 v4
    let v7 : (uint8 []) = v6 v0
    let v8 : string = "$0.to_vec()"
    let v9 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "std::io::Cursor::new(v9)"
    let v11 : std_io_Cursor<Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr () v10 
    let v12 : string = "std::io::BufReader::new(v11)"
    let v13 : std_io_BufReader<std_io_Cursor<Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = "true; let mut v13 = v13"
    let v15 : bool = Fable.Core.RustInterop.emitRustExpr () v14 
    let v16 : string = "let result : sha2::Sha256 = sha2::Digest::new()"
    Fable.Core.RustInterop.emitRustExpr () v16 
    let v17 : string = "result"
    let v18 : sha2_Sha256 = Fable.Core.RustInterop.emitRustExpr () v17 
    let v19 : string = "true; let mut v18 = v18"
    let v20 : bool = Fable.Core.RustInterop.emitRustExpr () v19 
    let v23 : unativeint = 0 |> unativeint 
    let v30 : string = "[$0; 1024]"
    let v31 : Slice'<uint8> = Fable.Core.RustInterop.emitRustExpr 0uy v30 
    let v32 : string = "true; loop { // rust.loop"
    let v33 : bool = Fable.Core.RustInterop.emitRustExpr () v32 
    let v34 : string = "true; let mut v31 = v31"
    let v35 : bool = Fable.Core.RustInterop.emitRustExpr () v34 
    let v36 : string = "std::io::Read::read(&mut v13, &mut v31)"
    let v37 : Result<unativeint, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v36 
    let v38 : string = "$0.unwrap()"
    let v39 : unativeint = Fable.Core.RustInterop.emitRustExpr v37 v38 
    let v42 : bool = v39 = v23 
    if v42 then
        let v49 : string = "true; break"
        let v50 : bool = Fable.Core.RustInterop.emitRustExpr () v49 
        ()
    let v51 : string = "v31.len()"
    let v52 : unativeint = Fable.Core.RustInterop.emitRustExpr () v51 
    let v55 : uint8 = v52 |> uint8 
    let v64 : unativeint = v39 |> unativeint 
    let v73 : unativeint = v64 |> unbox<unativeint>
    let v82 : bool = v73 = v52 
    let v93 : Ref<Slice'<uint8>> =
        if v82 then
            let v89 : string = "&v31[v23..]"
            let v90 : Ref<Slice'<uint8>> = Fable.Core.RustInterop.emitRustExpr () v89 
            v90
        else
            let v91 : string = "&v31[$0..$1]"
            let v92 : Ref<Slice'<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v23, v64) v91 
            v92
    let v94 : string = "sha2::Digest::update(&mut v18, v93)"
    Fable.Core.RustInterop.emitRustExpr () v94 
    let v95 : string = "true; } // rust.loop"
    let v96 : bool = Fable.Core.RustInterop.emitRustExpr () v95 
    let v97 : string = "true; } // rust.loop"
    let v98 : bool = Fable.Core.RustInterop.emitRustExpr () v97 
    let v99 : string = "true; } // rust.loop"
    let v100 : bool = Fable.Core.RustInterop.emitRustExpr () v99 
    let v101 : string = "true; { // rust.loop"
    let v102 : bool = Fable.Core.RustInterop.emitRustExpr () v101 
    let v103 : string = "true; { // rust.loop"
    let v104 : bool = Fable.Core.RustInterop.emitRustExpr () v103 
    let v105 : string = "&sha2::Digest::finalize(v18)"
    let v106 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr () v105 
    let v107 : string = "$0.iter().map(|x| *x).collect::<Vec<_>>()"
    let v108 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v106 v107 
    let v109 : string = "true; let _result : Vec<_> = v108.into_iter().map(|x| { //"
    let v110 : bool = Fable.Core.RustInterop.emitRustExpr () v109 
    let v111 : string = "x"
    let v112 : uint8 = Fable.Core.RustInterop.emitRustExpr () v111 
    let v113 : string = "format!(\"{:02x}\", $0)"
    let v114 : std_string_String = Fable.Core.RustInterop.emitRustExpr v112 v113 
    let v115 : string = "fable_library_rust::String_::fromString($0)"
    let v116 : string = Fable.Core.RustInterop.emitRustExpr v114 v115 
    let v117 : string = "true; $0 }).collect::<Vec<_>>()"
    let v118 : bool = Fable.Core.RustInterop.emitRustExpr v116 v117 
    let v119 : string = "_result"
    let v120 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v119 
    let v121 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v122 : (string []) = Fable.Core.RustInterop.emitRustExpr v120 v121 
    let v125 : string seq = seq { for i = 0 to v122.Length - 1 do yield v122.[i] }
    let v134 : (string -> (string seq -> string)) = String.concat
    let v135 : string = ""
    let v136 : (string seq -> string) = v134 v135
    let v137 : string = v136 v125
    let v144 : Result<string, std_io_Error> = Ok v137 
    let v145 : string = "$0.unwrap()"
    let v146 : string = Fable.Core.RustInterop.emitRustExpr v144 v145 
    v146 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v149 : string = null |> unbox<string>
    v149 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v158 : string = null |> unbox<string>
    v158 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v165 : string = "crypto"
    let v166 : ICryptoCreateHash = Fable.Core.JsInterop.importAll v165 
    let v167 : string = "v166.createHash($0)"
    let v168 : string = "sha256"
    let v169 : obj = Fable.Core.JsInterop.emitJsExpr v168 v167 
    let v170 : string = "$0.update($1, 'utf8')"
    let v171 : obj = Fable.Core.JsInterop.emitJsExpr struct (v169, v0) v170 
    let v172 : string = "$0.digest($1)"
    let v173 : string = "hex"
    let v174 : string = Fable.Core.JsInterop.emitJsExpr struct (v171, v173) v172 
    v174 
    #endif
#if FABLE_COMPILER_PYTHON
    let v177 : string = "hashlib"
    let v178 : IHashlibSha256 = Fable.Core.PyInterop.importAll v177 
    let v179 : string = "v178.sha256()"
    let v180 : obj = Fable.Core.PyInterop.emitPyExpr () v179 
    let v189 : string = "$0.encode($1)"
    let v190 : string = "utf-8"
    let v191 : string = Fable.Core.PyInterop.emitPyExpr struct (v0, v190) v189 
    let v200 : string = "v180.update($0)"
    Fable.Core.PyInterop.emitPyExpr v191 v200 
    let v207 : string = "v180.hexdigest()"
    let v208 : string = Fable.Core.PyInterop.emitPyExpr () v207 
    v208 
    #endif
#else
    let v215 : (unit -> System.Security.Cryptography.SHA256) = System.Security.Cryptography.SHA256.Create
    let v216 : System.Security.Cryptography.SHA256 = v215 ()
    use v216 = v216 
    let v217 : System.Security.Cryptography.SHA256 = v216 
    let v218 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v219 : (System.Text.Encoding -> (string -> (uint8 []))) = _.GetBytes
    let v220 : (string -> (uint8 [])) = v219 v218
    let v221 : (uint8 []) = v220 v0
    let v222 : ((uint8 []) -> (uint8 [])) = v217.ComputeHash
    let v223 : (uint8 []) = v222 v221
    let v224 : int32 = v223.Length
    let v225 : (string []) = Array.zeroCreate<string> (v224)
    let v226 : Mut5 = {l0 = 0} : Mut5
    while method58(v224, v226) do
        let v228 : int32 = v226.l0
        let v229 : uint8 = v223.[int v228]
        let v230 : (string -> string) = v229.ToString
        let v231 : string = "x2"
        let v232 : string = v230 v231
        v225.[int v228] <- v232
        let v233 : int32 = v228 + 1
        v226.l0 <- v233
        ()
    let v236 : string seq = seq { for i = 0 to v225.Length - 1 do yield v225.[i] }
    let v243 : string = method157()
    let v246 : (string -> (string seq -> string)) = String.concat
    let v247 : (string seq -> string) = v246 v243
    let v248 : string = v247 v236
    v248 
    #endif
    |> fun x -> _v3 <- Some x
    let v255 : string = match _v3 with Some x -> x | None -> failwith "base.run_target / _v3=None"
    v255
and method159 () : string =
    let v0 : string = "hh:mm"
    v0
and method160 () : string =
    let v0 : string = "yyyyMMdd-HHmm-ssff-ffff-f"
    v0
and method161 () : string =
    let v0 : string = "hhmm"
    v0
and method158 (v0 : System.Guid, v1 : System.DateTime) : System.Guid =
    let v4 : bool = true
    let mutable _v4 : System.Guid option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : System.DateTime = System.DateTime (1970, 1, 1, 0, 0, 0, System.DateTimeKind.Utc)
    let v16 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v17 : System.DateTime = v16 v7
    let v24 : System.DateTimeKind = System.DateTimeKind.Local
    let v25 : System.DateTime = System.DateTime.SpecifyKind (v1, v24)
    let v28 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v29 : System.DateTime = v28 v25
    let v38 : (System.DateTime -> int64) = _.Ticks
    let v39 : int64 = v38 v29
    let v48 : (System.DateTime -> int64) = _.Ticks
    let v49 : int64 = v48 v17
    let v56 : int64 = v39 - v49
    let v57 : int64 = v56 / 10L
    let v58 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v59 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v57 v58 
    let v62 : US35 option = None
    let _v62 = ref v62 
    match v59 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v63 : chrono_DateTime<chrono_Utc> = x
    let v64 : US35 = US35_0(v63)
    v64 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v62.Value <- x
    let v65 : US35 option = _v62.Value 
    let v88 : US35 = US35_1
    let v89 : US35 = v65 |> Option.defaultValue v88 
    let v113 : US3 =
        match v89 with
        | US35_1 -> (* None *)
            US3_1
        | US35_0(v97) -> (* Some *)
            let v98 : string = "$0.naive_utc()"
            let v99 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v97 v98 
            let v100 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
            let v101 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v99 v100 
            let v102 : string = "%Y%m%d-%H%M-%S%f"
            let v103 : string = "r#\"" + v102 + "\"#"
            let v104 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v103 
            let v105 : string = "$0.format($1).to_string()"
            let v106 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v101, v104) v105 
            let v107 : string = "fable_library_rust::String_::fromString($0)"
            let v108 : string = Fable.Core.RustInterop.emitRustExpr v106 v107 
            let v109 : string = $"{v108.[0..17]}-{v108.[18..21]}-{v108.[22]}"
            US3_0(v109)
    let v117 : string =
        match v113 with
        | US3_1 -> (* None *)
            let v115 : string = ""
            v115
        | US3_0(v114) -> (* Some *)
            v114
    let v120 : bool = true
    let mutable _v120 : System.TimeZoneInfo option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v121 : string = "0i64.into()"
    let v122 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v121 
    v122 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v125 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v125 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v134 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v134 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v143 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v143 
    #endif
#if FABLE_COMPILER_PYTHON
    let v152 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v152 
    #endif
#else
    let v159 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    v159 
    #endif
    |> fun x -> _v120 <- Some x
    let v160 : System.TimeZoneInfo = match _v120 with Some x -> x | None -> failwith "base.run_target / _v120=None"
    let v177 : bool = true
    let mutable _v177 : System.TimeSpan option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v180 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v181 : System.TimeSpan = v180 ()
    v181 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v190 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v191 : System.TimeSpan = v190 ()
    v191 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v200 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v201 : System.TimeSpan = v200 ()
    v201 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v208 : US10 = US10_0
    let v209 : US11 = US11_3(v208)
    let v210 : string = $"date_time.get_utc_offset / target: {v209}"
    let v211 : System.TimeSpan = failwith<System.TimeSpan> v210
    v211 
    #endif
#if FABLE_COMPILER_PYTHON
    let v212 : US10 = US10_0
    let v213 : US11 = US11_4(v212)
    let v214 : string = $"date_time.get_utc_offset / target: {v213}"
    let v215 : System.TimeSpan = failwith<System.TimeSpan> v214
    v215 
    #endif
#else
    let v216 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v219 : bool = true
    let mutable _v219 : System.TimeZoneInfo option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v220 : string = "0i64.into()"
    let v221 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v220 
    v221 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v224 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v224 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v233 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v233 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v242 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v242 
    #endif
#if FABLE_COMPILER_PYTHON
    let v251 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v251 
    #endif
#else
    let v258 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    v258 
    #endif
    |> fun x -> _v219 <- Some x
    let v259 : System.TimeZoneInfo = match _v219 with Some x -> x | None -> failwith "base.run_target / _v219=None"
    let v274 : (System.DateTime -> System.TimeSpan) = v216 v259
    let v275 : System.TimeSpan = v274 v29
    v275 
    #endif
    |> fun x -> _v177 <- Some x
    let v276 : System.TimeSpan = match _v177 with Some x -> x | None -> failwith "base.run_target / _v177=None"
    let v288 : (System.TimeSpan -> int32) = _.Hours
    let v289 : int32 = v288 v276
    let v296 : bool = v289 > 0
    let v297 : uint8 =
        if v296 then
            1uy
        else
            0uy
    let v298 : string = method159()
    let v301 : bool = true
    let mutable _v301 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v302 : string = v276.ToString v298 
    v302 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v303 : string = v276.ToString v298 
    v303 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v304 : string = v276.ToString v298 
    v304 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v305 : string = v276.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    v305 
    #endif
#if FABLE_COMPILER_PYTHON
    let v306 : string = v276.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    v306 
    #endif
#else
    let v307 : string = v276.ToString v298 
    v307 
    #endif
    |> fun x -> _v301 <- Some x
    let v308 : string = match _v301 with Some x -> x | None -> failwith "base.run_target / _v301=None"
    let v315 : string = $"{v297}{v308.[0..1]}{v308.[3..4]}"
    let v318 : (System.Guid -> string) = _.ToString()
    let v319 : string = v318 v0
    let v326 : System.Guid = System.Guid $"{v117}{v315}{v319.[v117.Length + v315.Length..]}"
    v326 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v329 : System.DateTime = System.DateTime (1970, 1, 1, 0, 0, 0, System.DateTimeKind.Utc)
    let v338 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v339 : System.DateTime = v338 v329
    let v346 : System.DateTimeKind = System.DateTimeKind.Local
    let v347 : System.DateTime = System.DateTime.SpecifyKind (v1, v346)
    let v350 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v351 : System.DateTime = v350 v347
    let v360 : (System.DateTime -> int64) = _.Ticks
    let v361 : int64 = v360 v351
    let v370 : (System.DateTime -> int64) = _.Ticks
    let v371 : int64 = v370 v339
    let v378 : int64 = v361 - v371
    let v379 : int64 = v378 / 10L
    let v380 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v381 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v379 v380 
    let v384 : US35 option = None
    let _v384 = ref v384 
    match v381 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v385 : chrono_DateTime<chrono_Utc> = x
    let v386 : US35 = US35_0(v385)
    v386 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v384.Value <- x
    let v387 : US35 option = _v384.Value 
    let v410 : US35 = US35_1
    let v411 : US35 = v387 |> Option.defaultValue v410 
    let v435 : US3 =
        match v411 with
        | US35_1 -> (* None *)
            US3_1
        | US35_0(v419) -> (* Some *)
            let v420 : string = "$0.naive_utc()"
            let v421 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v419 v420 
            let v422 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
            let v423 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v421 v422 
            let v424 : string = "%Y%m%d-%H%M-%S%f"
            let v425 : string = "r#\"" + v424 + "\"#"
            let v426 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v425 
            let v427 : string = "$0.format($1).to_string()"
            let v428 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v423, v426) v427 
            let v429 : string = "fable_library_rust::String_::fromString($0)"
            let v430 : string = Fable.Core.RustInterop.emitRustExpr v428 v429 
            let v431 : string = $"{v430.[0..17]}-{v430.[18..21]}-{v430.[22]}"
            US3_0(v431)
    let v439 : string =
        match v435 with
        | US3_1 -> (* None *)
            let v437 : string = ""
            v437
        | US3_0(v436) -> (* Some *)
            v436
    let v442 : bool = true
    let mutable _v442 : System.TimeZoneInfo option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v443 : string = "0i64.into()"
    let v444 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v443 
    v444 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v447 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v447 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v456 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v456 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v465 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v465 
    #endif
#if FABLE_COMPILER_PYTHON
    let v474 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v474 
    #endif
#else
    let v481 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    v481 
    #endif
    |> fun x -> _v442 <- Some x
    let v482 : System.TimeZoneInfo = match _v442 with Some x -> x | None -> failwith "base.run_target / _v442=None"
    let v499 : bool = true
    let mutable _v499 : System.TimeSpan option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v502 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v503 : System.TimeSpan = v502 ()
    v503 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v512 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v513 : System.TimeSpan = v512 ()
    v513 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v522 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v523 : System.TimeSpan = v522 ()
    v523 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v530 : US10 = US10_0
    let v531 : US11 = US11_3(v530)
    let v532 : string = $"date_time.get_utc_offset / target: {v531}"
    let v533 : System.TimeSpan = failwith<System.TimeSpan> v532
    v533 
    #endif
#if FABLE_COMPILER_PYTHON
    let v534 : US10 = US10_0
    let v535 : US11 = US11_4(v534)
    let v536 : string = $"date_time.get_utc_offset / target: {v535}"
    let v537 : System.TimeSpan = failwith<System.TimeSpan> v536
    v537 
    #endif
#else
    let v538 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v541 : bool = true
    let mutable _v541 : System.TimeZoneInfo option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v542 : string = "0i64.into()"
    let v543 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v542 
    v543 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v546 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v546 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v555 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v555 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v564 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v564 
    #endif
#if FABLE_COMPILER_PYTHON
    let v573 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v573 
    #endif
#else
    let v580 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    v580 
    #endif
    |> fun x -> _v541 <- Some x
    let v581 : System.TimeZoneInfo = match _v541 with Some x -> x | None -> failwith "base.run_target / _v541=None"
    let v596 : (System.DateTime -> System.TimeSpan) = v538 v581
    let v597 : System.TimeSpan = v596 v351
    v597 
    #endif
    |> fun x -> _v499 <- Some x
    let v598 : System.TimeSpan = match _v499 with Some x -> x | None -> failwith "base.run_target / _v499=None"
    let v610 : (System.TimeSpan -> int32) = _.Hours
    let v611 : int32 = v610 v598
    let v618 : bool = v611 > 0
    let v619 : uint8 =
        if v618 then
            1uy
        else
            0uy
    let v620 : string = method159()
    let v623 : bool = true
    let mutable _v623 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v624 : string = v598.ToString v620 
    v624 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v625 : string = v598.ToString v620 
    v625 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v626 : string = v598.ToString v620 
    v626 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v627 : string = v598.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    v627 
    #endif
#if FABLE_COMPILER_PYTHON
    let v628 : string = v598.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    v628 
    #endif
#else
    let v629 : string = v598.ToString v620 
    v629 
    #endif
    |> fun x -> _v623 <- Some x
    let v630 : string = match _v623 with Some x -> x | None -> failwith "base.run_target / _v623=None"
    let v637 : string = $"{v619}{v630.[0..1]}{v630.[3..4]}"
    let v640 : (System.Guid -> string) = _.ToString()
    let v641 : string = v640 v0
    let v648 : System.Guid = System.Guid $"{v439}{v637}{v641.[v439.Length + v637.Length..]}"
    v648 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v651 : System.Guid = null |> unbox<System.Guid>
    v651 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v658 : string = method160()
    let v661 : (string -> string) = v1.ToString
    let v662 : string = v661 v658
    let v671 : bool = true
    let mutable _v671 : System.TimeZoneInfo option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v672 : string = "0i64.into()"
    let v673 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v672 
    v673 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v676 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v676 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v685 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v685 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v694 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v694 
    #endif
#if FABLE_COMPILER_PYTHON
    let v703 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v703 
    #endif
#else
    let v710 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    v710 
    #endif
    |> fun x -> _v671 <- Some x
    let v711 : System.TimeZoneInfo = match _v671 with Some x -> x | None -> failwith "base.run_target / _v671=None"
    let v728 : bool = true
    let mutable _v728 : System.TimeSpan option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v731 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v732 : System.TimeSpan = v731 ()
    v732 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v741 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v742 : System.TimeSpan = v741 ()
    v742 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v751 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v752 : System.TimeSpan = v751 ()
    v752 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v759 : US10 = US10_0
    let v760 : US11 = US11_3(v759)
    let v761 : string = $"date_time.get_utc_offset / target: {v760}"
    let v762 : System.TimeSpan = failwith<System.TimeSpan> v761
    v762 
    #endif
#if FABLE_COMPILER_PYTHON
    let v763 : US10 = US10_0
    let v764 : US11 = US11_4(v763)
    let v765 : string = $"date_time.get_utc_offset / target: {v764}"
    let v766 : System.TimeSpan = failwith<System.TimeSpan> v765
    v766 
    #endif
#else
    let v767 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v770 : bool = true
    let mutable _v770 : System.TimeZoneInfo option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v771 : string = "0i64.into()"
    let v772 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v771 
    v772 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v775 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v775 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v784 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v784 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v793 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v793 
    #endif
#if FABLE_COMPILER_PYTHON
    let v802 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v802 
    #endif
#else
    let v809 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    v809 
    #endif
    |> fun x -> _v770 <- Some x
    let v810 : System.TimeZoneInfo = match _v770 with Some x -> x | None -> failwith "base.run_target / _v770=None"
    let v825 : (System.DateTime -> System.TimeSpan) = v767 v810
    let v826 : System.TimeSpan = v825 v1
    v826 
    #endif
    |> fun x -> _v728 <- Some x
    let v827 : System.TimeSpan = match _v728 with Some x -> x | None -> failwith "base.run_target / _v728=None"
    let v839 : (System.TimeSpan -> int32) = _.Hours
    let v840 : int32 = v839 v827
    let v847 : bool = v840 > 0
    let v848 : uint8 =
        if v847 then
            1uy
        else
            0uy
    let v849 : string = method161()
    let v852 : bool = true
    let mutable _v852 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v853 : string = v827.ToString v849 
    v853 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v854 : string = v827.ToString v849 
    v854 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v855 : string = v827.ToString v849 
    v855 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v856 : string = v827.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    v856 
    #endif
#if FABLE_COMPILER_PYTHON
    let v857 : string = v827.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    v857 
    #endif
#else
    let v858 : string = v827.ToString v849 
    v858 
    #endif
    |> fun x -> _v852 <- Some x
    let v859 : string = match _v852 with Some x -> x | None -> failwith "base.run_target / _v852=None"
    let v866 : string = $"{v848}{v859}"
    let v869 : (System.Guid -> string) = _.ToString()
    let v870 : string = v869 v0
    let v877 : System.Guid = System.Guid $"{v662}{v866}{v870.[v662.Length + v866.Length..]}"
    v877 
    #endif
#if FABLE_COMPILER_PYTHON
    let v878 : string = method160()
    let v881 : (string -> string) = v1.ToString
    let v882 : string = v881 v878
    let v891 : bool = true
    let mutable _v891 : System.TimeZoneInfo option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v892 : string = "0i64.into()"
    let v893 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v892 
    v893 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v896 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v896 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v905 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v905 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v914 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v914 
    #endif
#if FABLE_COMPILER_PYTHON
    let v923 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v923 
    #endif
#else
    let v930 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    v930 
    #endif
    |> fun x -> _v891 <- Some x
    let v931 : System.TimeZoneInfo = match _v891 with Some x -> x | None -> failwith "base.run_target / _v891=None"
    let v948 : bool = true
    let mutable _v948 : System.TimeSpan option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v951 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v952 : System.TimeSpan = v951 ()
    v952 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v961 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v962 : System.TimeSpan = v961 ()
    v962 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v971 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v972 : System.TimeSpan = v971 ()
    v972 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v979 : US10 = US10_0
    let v980 : US11 = US11_3(v979)
    let v981 : string = $"date_time.get_utc_offset / target: {v980}"
    let v982 : System.TimeSpan = failwith<System.TimeSpan> v981
    v982 
    #endif
#if FABLE_COMPILER_PYTHON
    let v983 : US10 = US10_0
    let v984 : US11 = US11_4(v983)
    let v985 : string = $"date_time.get_utc_offset / target: {v984}"
    let v986 : System.TimeSpan = failwith<System.TimeSpan> v985
    v986 
    #endif
#else
    let v987 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v990 : bool = true
    let mutable _v990 : System.TimeZoneInfo option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v991 : string = "0i64.into()"
    let v992 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v991 
    v992 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v995 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v995 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1004 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v1004 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1013 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v1013 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1022 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v1022 
    #endif
#else
    let v1029 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    v1029 
    #endif
    |> fun x -> _v990 <- Some x
    let v1030 : System.TimeZoneInfo = match _v990 with Some x -> x | None -> failwith "base.run_target / _v990=None"
    let v1045 : (System.DateTime -> System.TimeSpan) = v987 v1030
    let v1046 : System.TimeSpan = v1045 v1
    v1046 
    #endif
    |> fun x -> _v948 <- Some x
    let v1047 : System.TimeSpan = match _v948 with Some x -> x | None -> failwith "base.run_target / _v948=None"
    let v1059 : (System.TimeSpan -> int32) = _.Hours
    let v1060 : int32 = v1059 v1047
    let v1067 : bool = v1060 > 0
    let v1068 : uint8 =
        if v1067 then
            1uy
        else
            0uy
    let v1069 : string = method161()
    let v1072 : bool = true
    let mutable _v1072 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1073 : string = v1047.ToString v1069 
    v1073 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1074 : string = v1047.ToString v1069 
    v1074 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1075 : string = v1047.ToString v1069 
    v1075 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1076 : string = v1047.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    v1076 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1077 : string = v1047.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    v1077 
    #endif
#else
    let v1078 : string = v1047.ToString v1069 
    v1078 
    #endif
    |> fun x -> _v1072 <- Some x
    let v1079 : string = match _v1072 with Some x -> x | None -> failwith "base.run_target / _v1072=None"
    let v1086 : string = $"{v1068}{v1079}"
    let v1089 : (System.Guid -> string) = _.ToString()
    let v1090 : string = v1089 v0
    let v1097 : System.Guid = System.Guid $"{v882}{v1086}{v1090.[v882.Length + v1086.Length..]}"
    v1097 
    #endif
#else
    let v1098 : string = method160()
    let v1101 : (string -> string) = v1.ToString
    let v1102 : string = v1101 v1098
    let v1111 : bool = true
    let mutable _v1111 : System.TimeZoneInfo option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1112 : string = "0i64.into()"
    let v1113 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1112 
    v1113 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1116 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v1116 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1125 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v1125 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1134 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v1134 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1143 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v1143 
    #endif
#else
    let v1150 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    v1150 
    #endif
    |> fun x -> _v1111 <- Some x
    let v1151 : System.TimeZoneInfo = match _v1111 with Some x -> x | None -> failwith "base.run_target / _v1111=None"
    let v1168 : bool = true
    let mutable _v1168 : System.TimeSpan option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1171 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v1172 : System.TimeSpan = v1171 ()
    v1172 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1181 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v1182 : System.TimeSpan = v1181 ()
    v1182 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1191 : (unit -> System.TimeSpan) = System.TimeSpan 
    let v1192 : System.TimeSpan = v1191 ()
    v1192 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1199 : US10 = US10_0
    let v1200 : US11 = US11_3(v1199)
    let v1201 : string = $"date_time.get_utc_offset / target: {v1200}"
    let v1202 : System.TimeSpan = failwith<System.TimeSpan> v1201
    v1202 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1203 : US10 = US10_0
    let v1204 : US11 = US11_4(v1203)
    let v1205 : string = $"date_time.get_utc_offset / target: {v1204}"
    let v1206 : System.TimeSpan = failwith<System.TimeSpan> v1205
    v1206 
    #endif
#else
    let v1207 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v1210 : bool = true
    let mutable _v1210 : System.TimeZoneInfo option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1211 : string = "0i64.into()"
    let v1212 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1211 
    v1212 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1215 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v1215 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1224 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v1224 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1233 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v1233 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1242 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    v1242 
    #endif
#else
    let v1249 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    v1249 
    #endif
    |> fun x -> _v1210 <- Some x
    let v1250 : System.TimeZoneInfo = match _v1210 with Some x -> x | None -> failwith "base.run_target / _v1210=None"
    let v1265 : (System.DateTime -> System.TimeSpan) = v1207 v1250
    let v1266 : System.TimeSpan = v1265 v1
    v1266 
    #endif
    |> fun x -> _v1168 <- Some x
    let v1267 : System.TimeSpan = match _v1168 with Some x -> x | None -> failwith "base.run_target / _v1168=None"
    let v1279 : (System.TimeSpan -> int32) = _.Hours
    let v1280 : int32 = v1279 v1267
    let v1287 : bool = v1280 > 0
    let v1288 : uint8 =
        if v1287 then
            1uy
        else
            0uy
    let v1289 : string = method161()
    let v1292 : bool = true
    let mutable _v1292 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1293 : string = v1267.ToString v1289 
    v1293 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1294 : string = v1267.ToString v1289 
    v1294 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1295 : string = v1267.ToString v1289 
    v1295 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1296 : string = v1267.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    v1296 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1297 : string = v1267.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    v1297 
    #endif
#else
    let v1298 : string = v1267.ToString v1289 
    v1298 
    #endif
    |> fun x -> _v1292 <- Some x
    let v1299 : string = match _v1292 with Some x -> x | None -> failwith "base.run_target / _v1292=None"
    let v1306 : string = $"{v1288}{v1299}"
    let v1309 : (System.Guid -> string) = _.ToString()
    let v1310 : string = v1309 v0
    let v1317 : System.Guid = System.Guid $"{v1102}{v1306}{v1310.[v1102.Length + v1306.Length..]}"
    v1317 
    #endif
    |> fun x -> _v4 <- Some x
    let v1318 : System.Guid = match _v4 with Some x -> x | None -> failwith "base.run_target / _v4=None"
    v1318
and method162 (v0 : string, v1 : string) : unit =
    let v2 : bool = method23(v0)
    let v3 : bool = v2 = false
    if v3 then
        let v4 : System.IDisposable = method34(v0)
        ()
    let v5 : string = method30(v1)
    let v6 : bool = method23(v5)
    let v7 : bool = v6 = false
    if v7 then
        let v8 : System.IDisposable = method34(v5)
        ()
    let v9 : bool = method23(v1)
    let v14 : bool =
        if v9 then
            let v10 : string = "std::fs::read_link(&*$0)"
            let v11 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1 v10 
            let v12 : string = "v11.is_err()"
            let v13 : bool = Fable.Core.RustInterop.emitRustExpr () v12 
            v13
        else
            false
    if v14 then
        let v15 : bool = true
        method43(v15, v1)
    let v16 : bool = method23(v1)
    let v17 : bool = v16 = false
    if v17 then
        let v20 : bool = true
        let mutable _v20 : unit option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v21 : bool = true
        let mutable _v21 : unit option = None 
        
#if _FREEBSD
        let v22 : string = "std::os::unix::fs::symlink(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v22 
        () 
        #endif
#if _LINUX
        let v23 : string = "std::os::unix::fs::symlink(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v23 
        () 
        #endif
#if _OSX
        let v24 : string = "std::os::unix::fs::symlink(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v24 
        () 
        #endif
#if _WINDOWS
        let v25 : string = "std::os::windows::fs::symlink_dir(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v25 
        () 
        #endif
        |> fun x -> _v21 <- Some x
        match _v21 with Some x -> x | None -> failwith "runtime.run_platform / _v21=None"
        () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        null |> unbox<unit>
        () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        null |> unbox<unit>
        () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        null |> unbox<unit>
        () 
        #endif
#if FABLE_COMPILER_PYTHON
        null |> unbox<unit>
        () 
        #endif
#else
        let v50 : System.IO.FileSystemInfo = System.IO.Directory.CreateSymbolicLink (v1, v0)
        () 
        #endif
        |> fun x -> _v20 <- Some x
        match _v20 with Some x -> x | None -> failwith "base.run_target / _v20=None"
        ()
and closure98 () () : string =
    let v0 : string = "common.retry_fn' / loop"
    v0
and closure99 (v0 : uint8, v1 : uint8, v2 : int32, v3 : string, v4 : bool) () : struct (bool * string * int32 * string) =
    let v5 : string = $"{v1}/{v0}"
    struct (v4, v5, v2, v3)
and method168 (v0 : Mut4, v1 : int32, v2 : string) : unit =
    method110(v0, v1)
    let v3 : string = ", "
    method10(v0, v3)
    method10(v0, v2)
and method167 (v0 : Mut4, v1 : bool, v2 : string, v3 : int32, v4 : string) : unit =
    let v5 : string = "{ "
    method10(v0, v5)
    method11(v0)
    let v6 : string = "is_error"
    method10(v0, v6)
    let v7 : string = " = "
    method10(v0, v7)
    method88(v0, v1)
    let v8 : string = "; "
    method10(v0, v8)
    let v9 : string = "retry"
    method10(v0, v9)
    method10(v0, v7)
    method10(v0, v2)
    method10(v0, v8)
    let v10 : string = "result"
    method10(v0, v10)
    method10(v0, v7)
    method168(v0, v3, v4)
    let v11 : string = " }"
    method10(v0, v11)
and closure100 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (bool * string * int32 * string))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = $"near_sdk::env::block_timestamp()"
    let v331 : uint64 = Fable.Core.RustInterop.emitRustExpr () v330 
    let v334 : US2 option = None
    let _v334 = ref v334 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v335 : int64 = x
    let v336 : US2 = US2_0(v335)
    v336 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v334.Value <- x
    let v337 : US2 option = _v334.Value 
    let v360 : US2 = US2_1
    let v361 : US2 = v337 |> Option.defaultValue v360 
    let v374 : uint64 =
        match v361 with
        | US2_1 -> (* None *)
            v331
        | US2_0(v369) -> (* Some *)
            let v370 : (int64 -> uint64) = uint64
            let v371 : uint64 = v370 v369
            let v372 : uint64 = v331 - v371
            v372
    let v375 : uint64 = v374 / 1000000000UL
    let v376 : uint64 = v375 % 60UL
    let v377 : uint64 = v375 / 60UL
    let v378 : uint64 = v377 % 60UL
    let v379 : uint64 = v375 / 3600UL
    let v380 : uint64 = v379 % 24UL
    let v381 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v382 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v380, v378, v376) v381 
    let v383 : string = "fable_library_rust::String_::fromString($0)"
    let v384 : string = Fable.Core.RustInterop.emitRustExpr v382 v383 
    v384 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v387 : US2 option = None
    let _v387 = ref v387 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v388 : int64 = x
    let v389 : US2 = US2_0(v388)
    v389 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v387.Value <- x
    let v390 : US2 option = _v387.Value 
    let v413 : US2 = US2_1
    let v414 : US2 = v390 |> Option.defaultValue v413 
    let v512 : System.DateTime =
        match v414 with
        | US2_1 -> (* None *)
            let v504 : System.DateTime = System.DateTime.Now
            v504
        | US2_0(v422) -> (* Some *)
            let v425 : System.DateTime = System.DateTime.Now
            let v434 : (System.DateTime -> int64) = _.Ticks
            let v435 : int64 = v434 v425
            let v442 : int64 = v435 - v422
            let v445 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v446 : System.TimeSpan = v445 v442
            let v455 : (System.TimeSpan -> int32) = _.Hours
            let v456 : int32 = v455 v446
            let v465 : (System.TimeSpan -> int32) = _.Minutes
            let v466 : int32 = v465 v446
            let v475 : (System.TimeSpan -> int32) = _.Seconds
            let v476 : int32 = v475 v446
            let v485 : (System.TimeSpan -> int32) = _.Milliseconds
            let v486 : int32 = v485 v446
            let v495 : System.DateTime = System.DateTime (1, 1, 1, v456, v466, v476, v486)
            v495
    let v515 : string = method7()
    let v524 : (string -> string) = v512.ToString
    let v525 : string = v524 v515
    v525 
    #endif
#if FABLE_COMPILER_PYTHON
    let v534 : US2 option = None
    let _v534 = ref v534 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v535 : int64 = x
    let v536 : US2 = US2_0(v535)
    v536 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v534.Value <- x
    let v537 : US2 option = _v534.Value 
    let v560 : US2 = US2_1
    let v561 : US2 = v537 |> Option.defaultValue v560 
    let v659 : System.DateTime =
        match v561 with
        | US2_1 -> (* None *)
            let v651 : System.DateTime = System.DateTime.Now
            v651
        | US2_0(v569) -> (* Some *)
            let v572 : System.DateTime = System.DateTime.Now
            let v581 : (System.DateTime -> int64) = _.Ticks
            let v582 : int64 = v581 v572
            let v589 : int64 = v582 - v569
            let v592 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v593 : System.TimeSpan = v592 v589
            let v602 : (System.TimeSpan -> int32) = _.Hours
            let v603 : int32 = v602 v593
            let v612 : (System.TimeSpan -> int32) = _.Minutes
            let v613 : int32 = v612 v593
            let v622 : (System.TimeSpan -> int32) = _.Seconds
            let v623 : int32 = v622 v593
            let v632 : (System.TimeSpan -> int32) = _.Milliseconds
            let v633 : int32 = v632 v593
            let v642 : System.DateTime = System.DateTime (1, 1, 1, v603, v613, v623, v633)
            v642
    let v662 : string = method7()
    let v671 : (string -> string) = v659.ToString
    let v672 : string = v671 v662
    v672 
    #endif
#else
    let v681 : US2 option = None
    let _v681 = ref v681 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v682 : int64 = x
    let v683 : US2 = US2_0(v682)
    v683 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v681.Value <- x
    let v684 : US2 option = _v681.Value 
    let v707 : US2 = US2_1
    let v708 : US2 = v684 |> Option.defaultValue v707 
    let v806 : System.DateTime =
        match v708 with
        | US2_1 -> (* None *)
            let v798 : System.DateTime = System.DateTime.Now
            v798
        | US2_0(v716) -> (* Some *)
            let v719 : System.DateTime = System.DateTime.Now
            let v728 : (System.DateTime -> int64) = _.Ticks
            let v729 : int64 = v728 v719
            let v736 : int64 = v729 - v716
            let v739 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v740 : System.TimeSpan = v739 v736
            let v749 : (System.TimeSpan -> int32) = _.Hours
            let v750 : int32 = v749 v740
            let v759 : (System.TimeSpan -> int32) = _.Minutes
            let v760 : int32 = v759 v740
            let v769 : (System.TimeSpan -> int32) = _.Seconds
            let v770 : int32 = v769 v740
            let v779 : (System.TimeSpan -> int32) = _.Milliseconds
            let v780 : int32 = v779 v740
            let v789 : System.DateTime = System.DateTime (1, 1, 1, v750, v760, v770, v780)
            v789
    let v809 : string = method7()
    let v818 : (string -> string) = v806.ToString
    let v819 : string = v818 v809
    v819 
    #endif
    |> fun x -> _v35 <- Some x
    let v826 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v981 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v985 : US3 =
        if v981 then
            let v982 : string = "Verbose"
            US3_0(v982)
        else
            US3_1
    let v1034 : US3 =
        match v985 with
        | US3_1 -> (* None *)
            let v990 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v994 : US3 =
                if v990 then
                    let v991 : string = "Debug"
                    US3_0(v991)
                else
                    US3_1
            match v994 with
            | US3_1 -> (* None *)
                let v999 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v1003 : US3 =
                    if v999 then
                        let v1000 : string = "Info"
                        US3_0(v1000)
                    else
                        US3_1
                match v1003 with
                | US3_1 -> (* None *)
                    let v1008 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v1012 : US3 =
                        if v1008 then
                            let v1009 : string = "Warning"
                            US3_0(v1009)
                        else
                            US3_1
                    match v1012 with
                    | US3_1 -> (* None *)
                        let v1017 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v1021 : US3 =
                            if v1017 then
                                let v1018 : string = "Critical"
                                US3_0(v1018)
                            else
                                US3_1
                        match v1021 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v1022) -> (* Some *)
                            US3_0(v1022)
                    | US3_0(v1013) -> (* Some *)
                        US3_0(v1013)
                | US3_0(v1004) -> (* Some *)
                    US3_0(v1004)
            | US3_0(v995) -> (* Some *)
                US3_0(v995)
        | US3_0(v986) -> (* Some *)
            US3_0(v986)
    let v1038 : string =
        match v1034 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v1035) -> (* Some *)
            v1035
    let v1041 : (unit -> string) = v1038.ToLower
    let v1042 : string = v1041 ()
    let v1051 : string = v1042.PadLeft (7, ' ')
    let v1083 : bool = true
    let mutable _v1083 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1098 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1092 : string = "inline_colorization::color_bright_red"
            let v1093 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1092 
            v1093
        | US0_1 -> (* Debug *)
            let v1086 : string = "inline_colorization::color_bright_blue"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_2 -> (* Info *)
            let v1088 : string = "inline_colorization::color_bright_green"
            let v1089 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1088 
            v1089
        | US0_0 -> (* Verbose *)
            let v1084 : string = "inline_colorization::color_bright_black"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
        | US0_3 -> (* Warning *)
            let v1090 : string = "inline_colorization::color_yellow"
            let v1091 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1090 
            v1091
    let v1099 : string = "&*$0"
    let v1100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1099 
    let v1101 : string = "inline_colorization::color_reset"
    let v1102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1101 
    let v1103 : string = "\"{v1098}{v1100}{v1102}\""
    let v1104 : string = @$"format!(" + v1103 + ")"
    let v1105 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1104 
    let v1106 : string = "fable_library_rust::String_::fromString($0)"
    let v1107 : string = Fable.Core.RustInterop.emitRustExpr v1105 v1106 
    v1107 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1122 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1116 : string = "inline_colorization::color_bright_red"
            let v1117 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1116 
            v1117
        | US0_1 -> (* Debug *)
            let v1110 : string = "inline_colorization::color_bright_blue"
            let v1111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1110 
            v1111
        | US0_2 -> (* Info *)
            let v1112 : string = "inline_colorization::color_bright_green"
            let v1113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1112 
            v1113
        | US0_0 -> (* Verbose *)
            let v1108 : string = "inline_colorization::color_bright_black"
            let v1109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1108 
            v1109
        | US0_3 -> (* Warning *)
            let v1114 : string = "inline_colorization::color_yellow"
            let v1115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1114 
            v1115
    let v1123 : string = "&*$0"
    let v1124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1123 
    let v1125 : string = "inline_colorization::color_reset"
    let v1126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1125 
    let v1127 : string = "\"{v1122}{v1124}{v1126}\""
    let v1128 : string = @$"format!(" + v1127 + ")"
    let v1129 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1128 
    let v1130 : string = "fable_library_rust::String_::fromString($0)"
    let v1131 : string = Fable.Core.RustInterop.emitRustExpr v1129 v1130 
    v1131 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1146 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1140 : string = "inline_colorization::color_bright_red"
            let v1141 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1140 
            v1141
        | US0_1 -> (* Debug *)
            let v1134 : string = "inline_colorization::color_bright_blue"
            let v1135 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1134 
            v1135
        | US0_2 -> (* Info *)
            let v1136 : string = "inline_colorization::color_bright_green"
            let v1137 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1136 
            v1137
        | US0_0 -> (* Verbose *)
            let v1132 : string = "inline_colorization::color_bright_black"
            let v1133 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1132 
            v1133
        | US0_3 -> (* Warning *)
            let v1138 : string = "inline_colorization::color_yellow"
            let v1139 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1138 
            v1139
    let v1147 : string = "&*$0"
    let v1148 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1147 
    let v1149 : string = "inline_colorization::color_reset"
    let v1150 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1149 
    let v1151 : string = "\"{v1146}{v1148}{v1150}\""
    let v1152 : string = @$"format!(" + v1151 + ")"
    let v1153 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1152 
    let v1154 : string = "fable_library_rust::String_::fromString($0)"
    let v1155 : string = Fable.Core.RustInterop.emitRustExpr v1153 v1154 
    v1155 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1165 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1160 : string = "\u001b[91m"
            v1160
        | US0_1 -> (* Debug *)
            let v1157 : string = "\u001b[94m"
            v1157
        | US0_2 -> (* Info *)
            let v1158 : string = "\u001b[92m"
            v1158
        | US0_0 -> (* Verbose *)
            let v1156 : string = "\u001b[90m"
            v1156
        | US0_3 -> (* Warning *)
            let v1159 : string = "\u001b[93m"
            v1159
    let v1166 : string = method8()
    let v1167 : string = v1165 + v1051 
    let v1168 : string = v1167 + v1166 
    v1168 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1178 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1173 : string = "\u001b[91m"
            v1173
        | US0_1 -> (* Debug *)
            let v1170 : string = "\u001b[94m"
            v1170
        | US0_2 -> (* Info *)
            let v1171 : string = "\u001b[92m"
            v1171
        | US0_0 -> (* Verbose *)
            let v1169 : string = "\u001b[90m"
            v1169
        | US0_3 -> (* Warning *)
            let v1172 : string = "\u001b[93m"
            v1172
    let v1179 : string = method8()
    let v1180 : string = v1178 + v1051 
    let v1181 : string = v1180 + v1179 
    v1181 
    #endif
#else
    let v1191 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1186 : string = "\u001b[91m"
            v1186
        | US0_1 -> (* Debug *)
            let v1183 : string = "\u001b[94m"
            v1183
        | US0_2 -> (* Info *)
            let v1184 : string = "\u001b[92m"
            v1184
        | US0_0 -> (* Verbose *)
            let v1182 : string = "\u001b[90m"
            v1182
        | US0_3 -> (* Warning *)
            let v1185 : string = "\u001b[93m"
            v1185
    let v1192 : string = method8()
    let v1193 : string = v1191 + v1051 
    let v1194 : string = v1193 + v1192 
    v1194 
    #endif
    |> fun x -> _v1083 <- Some x
    let v1195 : string = match _v1083 with Some x -> x | None -> failwith "base.run_target / _v1083=None"
    let v1214 : int64 = v14.l0
    let struct (v1215 : bool, v1216 : string, v1217 : int32, v1218 : string) = v2 ()
    let v1219 : string = ""
    let v1220 : Mut4 = {l0 = v1219} : Mut4
    method167(v1220, v1215, v1216, v1217, v1218)
    let v1221 : string = v1220.l0
    let v1224 : string = $"{v826} {v1195} #{v1214} %s{v1 ()} / {v1221}"
    let v1231 : char list = []
    let v1236 : (char list -> (char [])) = List.toArray
    let v1237 : (char []) = v1236 v1231
    let v1244 : string = v1224.TrimStart v1237 
    let v1283 : char list = []
    let v1286 : char list = '/' :: v1283 
    let v1295 : char list = ' ' :: v1286 
    let v1306 : (char list -> (char [])) = List.toArray
    let v1307 : (char []) = v1306 v1295
    let v1314 : string = v1244.TrimEnd v1307 
    v1314
and method166 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (bool * string * int32 * string))) : unit =
    let v3 : (unit -> string) = closure100(v0, v1, v2)
    method13(v0, v3)
and method165 (v0 : uint8, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option, v8 : uint8) : struct (int32 * string) =
    let struct (v9 : int32, v10 : string) = method55(v1, v2, v3, v4, v5, v6, v7)
    let v11 : bool = v9 = 0
    let v14 : US36 =
        if v11 then
            US36_0(v9, v10)
        else
            US36_1(v9, v10)
    let struct (v22 : bool, v23 : int32, v24 : string) =
        match v14 with
        | US36_1(v17, v18) -> (* Error *)
            struct (true, v17, v18)
        | US36_0(v15, v16) -> (* Ok *)
            struct (false, v15, v16)
    let v25 : bool = v22 = false
    let v27 : bool =
        if v25 then
            true
        else
            let v26 : bool = v8 >= v0
            v26
    if v27 then
        struct (v23, v24)
    else
        let v28 : US0 = US0_1
        let v29 : (unit -> string) = closure98()
        let v30 : (unit -> struct (bool * string * int32 * string)) = closure99(v0, v8, v23, v24, v22)
        method166(v28, v29, v30)
        let v31 : uint8 = v8 + 1uy
        method165(v0, v1, v2, v3, v4, v5, v6, v7, v31)
and method164 (v0 : uint8, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option) : struct (int32 * string) =
    let v8 : uint8 = 1uy
    method165(v0, v1, v2, v3, v4, v5, v6, v7, v8)
and method163 (v0 : US33, v1 : string, v2 : string, v3 : string, v4 : US12) : struct (int32 * string) =
    let v5 : System.Threading.CancellationToken option = None
    let v6 : (struct (string * string) []) = [||]
    let v7 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v8 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v9 : string option = None
    let v12 : bool = true
    let mutable _v12 : bool option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v13 : string = "cfg!(windows)"
    let v14 : bool = Fable.Core.RustInterop.emitRustExpr () v13 
    v14 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v15 : string = "cfg!(windows)"
    let v16 : bool = Fable.Core.RustInterop.emitRustExpr () v15 
    v16 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : string = "cfg!(windows)"
    let v18 : bool = Fable.Core.RustInterop.emitRustExpr () v17 
    v18 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : US10 = US10_0
    let v20 : US11 = US11_3(v19)
    let v21 : string = $"platform.is_windows / target: {v20}"
    let v22 : bool = failwith<bool> v21
    v22 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : US10 = US10_0
    let v24 : US11 = US11_4(v23)
    let v25 : string = $"platform.is_windows / target: {v24}"
    let v26 : bool = failwith<bool> v25
    v26 
    #endif
#else
    let v27 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
    let v28 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
    let v29 : bool = v28 v27
    v29 
    #endif
    |> fun x -> _v12 <- Some x
    let v30 : bool = match _v12 with Some x -> x | None -> failwith "base.run_target / _v12=None"
    let v42 : string =
        if v30 then
            let v40 : string = "_WINDOWS"
            v40
        else
            let v41 : string = "_LINUX"
            v41
    let v43 : string = $" --define {v42}"
    let v77 : string =
        match v0 with
        | US33_1 -> (* None *)
            let v75 : string = ""
            v75
        | US33_0(v44) -> (* Some *)
            let v47 : bool =
                match v44 with
                | US34_0 -> (* Wasm *)
                    true
                | _ ->
                    false
            let v51 : US3 =
                if v47 then
                    let v48 : string = "Wasm"
                    US3_0(v48)
                else
                    US3_1
            let v67 : US3 =
                match v51 with
                | US3_1 -> (* None *)
                    let v56 : bool =
                        match v44 with
                        | US34_1 -> (* Contract *)
                            true
                        | _ ->
                            false
                    let v60 : US3 =
                        if v56 then
                            let v57 : string = "Contract"
                            US3_0(v57)
                        else
                            US3_1
                    match v60 with
                    | US3_1 -> (* None *)
                        US3_1
                    | US3_0(v61) -> (* Some *)
                        US3_0(v61)
                | US3_0(v52) -> (* Some *)
                    US3_0(v52)
            let v71 : string =
                match v67 with
                | US3_1 -> (* None *)
                    failwith<string> "Option does not have a value."
                | US3_0(v68) -> (* Some *)
                    v68
            let v72 : (unit -> string) = v71.ToUpper
            let v73 : string = v72 ()
            let v74 : string = $" --define {v73}"
            v74
    let v78 : string = $"dotnet fable \"{v3}\" --optimize --lang {v2} --extension .{v2} --outDir \"{v1}\"{v43}{v77}"
    let v84 : Result<string, string> =
        match v4 with
        | US12_1(v81) -> (* Error *)
            let v82 : Result<string, string> = Error v81 
            v82
        | US12_0(v79) -> (* Ok *)
            let v80 : Result<string, string> = Ok v79 
            v80
    let v85 : string = "v84.ok()"
    let v86 : string option = Fable.Core.RustInterop.emitRustExpr () v85 
    let v87 : uint8 = 3uy
    let v88 : bool = true
    method164(v87, v78, v5, v6, v7, v8, v88, v86)
and closure101 () () : string =
    let v0 : string = "spiral_builder.process_rust / dotnet fable error"
    v0
and closure102 (v0 : string, v1 : int32) () : struct (int32 * string) =
    struct (v1, v0)
and method170 (v0 : Mut4, v1 : int32, v2 : string) : unit =
    let v3 : string = "{ "
    method10(v0, v3)
    method11(v0)
    let v4 : string = "exit_code"
    method10(v0, v4)
    let v5 : string = " = "
    method10(v0, v5)
    method110(v0, v1)
    let v6 : string = "; "
    method10(v0, v6)
    let v7 : string = "dotnet_fable_result"
    method10(v0, v7)
    method10(v0, v5)
    method10(v0, v2)
    let v8 : string = " }"
    method10(v0, v8)
and closure103 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * string))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = $"near_sdk::env::block_timestamp()"
    let v331 : uint64 = Fable.Core.RustInterop.emitRustExpr () v330 
    let v334 : US2 option = None
    let _v334 = ref v334 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v335 : int64 = x
    let v336 : US2 = US2_0(v335)
    v336 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v334.Value <- x
    let v337 : US2 option = _v334.Value 
    let v360 : US2 = US2_1
    let v361 : US2 = v337 |> Option.defaultValue v360 
    let v374 : uint64 =
        match v361 with
        | US2_1 -> (* None *)
            v331
        | US2_0(v369) -> (* Some *)
            let v370 : (int64 -> uint64) = uint64
            let v371 : uint64 = v370 v369
            let v372 : uint64 = v331 - v371
            v372
    let v375 : uint64 = v374 / 1000000000UL
    let v376 : uint64 = v375 % 60UL
    let v377 : uint64 = v375 / 60UL
    let v378 : uint64 = v377 % 60UL
    let v379 : uint64 = v375 / 3600UL
    let v380 : uint64 = v379 % 24UL
    let v381 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v382 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v380, v378, v376) v381 
    let v383 : string = "fable_library_rust::String_::fromString($0)"
    let v384 : string = Fable.Core.RustInterop.emitRustExpr v382 v383 
    v384 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v387 : US2 option = None
    let _v387 = ref v387 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v388 : int64 = x
    let v389 : US2 = US2_0(v388)
    v389 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v387.Value <- x
    let v390 : US2 option = _v387.Value 
    let v413 : US2 = US2_1
    let v414 : US2 = v390 |> Option.defaultValue v413 
    let v512 : System.DateTime =
        match v414 with
        | US2_1 -> (* None *)
            let v504 : System.DateTime = System.DateTime.Now
            v504
        | US2_0(v422) -> (* Some *)
            let v425 : System.DateTime = System.DateTime.Now
            let v434 : (System.DateTime -> int64) = _.Ticks
            let v435 : int64 = v434 v425
            let v442 : int64 = v435 - v422
            let v445 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v446 : System.TimeSpan = v445 v442
            let v455 : (System.TimeSpan -> int32) = _.Hours
            let v456 : int32 = v455 v446
            let v465 : (System.TimeSpan -> int32) = _.Minutes
            let v466 : int32 = v465 v446
            let v475 : (System.TimeSpan -> int32) = _.Seconds
            let v476 : int32 = v475 v446
            let v485 : (System.TimeSpan -> int32) = _.Milliseconds
            let v486 : int32 = v485 v446
            let v495 : System.DateTime = System.DateTime (1, 1, 1, v456, v466, v476, v486)
            v495
    let v515 : string = method7()
    let v524 : (string -> string) = v512.ToString
    let v525 : string = v524 v515
    v525 
    #endif
#if FABLE_COMPILER_PYTHON
    let v534 : US2 option = None
    let _v534 = ref v534 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v535 : int64 = x
    let v536 : US2 = US2_0(v535)
    v536 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v534.Value <- x
    let v537 : US2 option = _v534.Value 
    let v560 : US2 = US2_1
    let v561 : US2 = v537 |> Option.defaultValue v560 
    let v659 : System.DateTime =
        match v561 with
        | US2_1 -> (* None *)
            let v651 : System.DateTime = System.DateTime.Now
            v651
        | US2_0(v569) -> (* Some *)
            let v572 : System.DateTime = System.DateTime.Now
            let v581 : (System.DateTime -> int64) = _.Ticks
            let v582 : int64 = v581 v572
            let v589 : int64 = v582 - v569
            let v592 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v593 : System.TimeSpan = v592 v589
            let v602 : (System.TimeSpan -> int32) = _.Hours
            let v603 : int32 = v602 v593
            let v612 : (System.TimeSpan -> int32) = _.Minutes
            let v613 : int32 = v612 v593
            let v622 : (System.TimeSpan -> int32) = _.Seconds
            let v623 : int32 = v622 v593
            let v632 : (System.TimeSpan -> int32) = _.Milliseconds
            let v633 : int32 = v632 v593
            let v642 : System.DateTime = System.DateTime (1, 1, 1, v603, v613, v623, v633)
            v642
    let v662 : string = method7()
    let v671 : (string -> string) = v659.ToString
    let v672 : string = v671 v662
    v672 
    #endif
#else
    let v681 : US2 option = None
    let _v681 = ref v681 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v682 : int64 = x
    let v683 : US2 = US2_0(v682)
    v683 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v681.Value <- x
    let v684 : US2 option = _v681.Value 
    let v707 : US2 = US2_1
    let v708 : US2 = v684 |> Option.defaultValue v707 
    let v806 : System.DateTime =
        match v708 with
        | US2_1 -> (* None *)
            let v798 : System.DateTime = System.DateTime.Now
            v798
        | US2_0(v716) -> (* Some *)
            let v719 : System.DateTime = System.DateTime.Now
            let v728 : (System.DateTime -> int64) = _.Ticks
            let v729 : int64 = v728 v719
            let v736 : int64 = v729 - v716
            let v739 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v740 : System.TimeSpan = v739 v736
            let v749 : (System.TimeSpan -> int32) = _.Hours
            let v750 : int32 = v749 v740
            let v759 : (System.TimeSpan -> int32) = _.Minutes
            let v760 : int32 = v759 v740
            let v769 : (System.TimeSpan -> int32) = _.Seconds
            let v770 : int32 = v769 v740
            let v779 : (System.TimeSpan -> int32) = _.Milliseconds
            let v780 : int32 = v779 v740
            let v789 : System.DateTime = System.DateTime (1, 1, 1, v750, v760, v770, v780)
            v789
    let v809 : string = method7()
    let v818 : (string -> string) = v806.ToString
    let v819 : string = v818 v809
    v819 
    #endif
    |> fun x -> _v35 <- Some x
    let v826 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v981 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v985 : US3 =
        if v981 then
            let v982 : string = "Verbose"
            US3_0(v982)
        else
            US3_1
    let v1034 : US3 =
        match v985 with
        | US3_1 -> (* None *)
            let v990 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v994 : US3 =
                if v990 then
                    let v991 : string = "Debug"
                    US3_0(v991)
                else
                    US3_1
            match v994 with
            | US3_1 -> (* None *)
                let v999 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v1003 : US3 =
                    if v999 then
                        let v1000 : string = "Info"
                        US3_0(v1000)
                    else
                        US3_1
                match v1003 with
                | US3_1 -> (* None *)
                    let v1008 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v1012 : US3 =
                        if v1008 then
                            let v1009 : string = "Warning"
                            US3_0(v1009)
                        else
                            US3_1
                    match v1012 with
                    | US3_1 -> (* None *)
                        let v1017 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v1021 : US3 =
                            if v1017 then
                                let v1018 : string = "Critical"
                                US3_0(v1018)
                            else
                                US3_1
                        match v1021 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v1022) -> (* Some *)
                            US3_0(v1022)
                    | US3_0(v1013) -> (* Some *)
                        US3_0(v1013)
                | US3_0(v1004) -> (* Some *)
                    US3_0(v1004)
            | US3_0(v995) -> (* Some *)
                US3_0(v995)
        | US3_0(v986) -> (* Some *)
            US3_0(v986)
    let v1038 : string =
        match v1034 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v1035) -> (* Some *)
            v1035
    let v1041 : (unit -> string) = v1038.ToLower
    let v1042 : string = v1041 ()
    let v1051 : string = v1042.PadLeft (7, ' ')
    let v1083 : bool = true
    let mutable _v1083 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1098 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1092 : string = "inline_colorization::color_bright_red"
            let v1093 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1092 
            v1093
        | US0_1 -> (* Debug *)
            let v1086 : string = "inline_colorization::color_bright_blue"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_2 -> (* Info *)
            let v1088 : string = "inline_colorization::color_bright_green"
            let v1089 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1088 
            v1089
        | US0_0 -> (* Verbose *)
            let v1084 : string = "inline_colorization::color_bright_black"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
        | US0_3 -> (* Warning *)
            let v1090 : string = "inline_colorization::color_yellow"
            let v1091 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1090 
            v1091
    let v1099 : string = "&*$0"
    let v1100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1099 
    let v1101 : string = "inline_colorization::color_reset"
    let v1102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1101 
    let v1103 : string = "\"{v1098}{v1100}{v1102}\""
    let v1104 : string = @$"format!(" + v1103 + ")"
    let v1105 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1104 
    let v1106 : string = "fable_library_rust::String_::fromString($0)"
    let v1107 : string = Fable.Core.RustInterop.emitRustExpr v1105 v1106 
    v1107 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1122 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1116 : string = "inline_colorization::color_bright_red"
            let v1117 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1116 
            v1117
        | US0_1 -> (* Debug *)
            let v1110 : string = "inline_colorization::color_bright_blue"
            let v1111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1110 
            v1111
        | US0_2 -> (* Info *)
            let v1112 : string = "inline_colorization::color_bright_green"
            let v1113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1112 
            v1113
        | US0_0 -> (* Verbose *)
            let v1108 : string = "inline_colorization::color_bright_black"
            let v1109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1108 
            v1109
        | US0_3 -> (* Warning *)
            let v1114 : string = "inline_colorization::color_yellow"
            let v1115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1114 
            v1115
    let v1123 : string = "&*$0"
    let v1124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1123 
    let v1125 : string = "inline_colorization::color_reset"
    let v1126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1125 
    let v1127 : string = "\"{v1122}{v1124}{v1126}\""
    let v1128 : string = @$"format!(" + v1127 + ")"
    let v1129 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1128 
    let v1130 : string = "fable_library_rust::String_::fromString($0)"
    let v1131 : string = Fable.Core.RustInterop.emitRustExpr v1129 v1130 
    v1131 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1146 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1140 : string = "inline_colorization::color_bright_red"
            let v1141 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1140 
            v1141
        | US0_1 -> (* Debug *)
            let v1134 : string = "inline_colorization::color_bright_blue"
            let v1135 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1134 
            v1135
        | US0_2 -> (* Info *)
            let v1136 : string = "inline_colorization::color_bright_green"
            let v1137 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1136 
            v1137
        | US0_0 -> (* Verbose *)
            let v1132 : string = "inline_colorization::color_bright_black"
            let v1133 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1132 
            v1133
        | US0_3 -> (* Warning *)
            let v1138 : string = "inline_colorization::color_yellow"
            let v1139 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1138 
            v1139
    let v1147 : string = "&*$0"
    let v1148 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1147 
    let v1149 : string = "inline_colorization::color_reset"
    let v1150 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1149 
    let v1151 : string = "\"{v1146}{v1148}{v1150}\""
    let v1152 : string = @$"format!(" + v1151 + ")"
    let v1153 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1152 
    let v1154 : string = "fable_library_rust::String_::fromString($0)"
    let v1155 : string = Fable.Core.RustInterop.emitRustExpr v1153 v1154 
    v1155 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1165 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1160 : string = "\u001b[91m"
            v1160
        | US0_1 -> (* Debug *)
            let v1157 : string = "\u001b[94m"
            v1157
        | US0_2 -> (* Info *)
            let v1158 : string = "\u001b[92m"
            v1158
        | US0_0 -> (* Verbose *)
            let v1156 : string = "\u001b[90m"
            v1156
        | US0_3 -> (* Warning *)
            let v1159 : string = "\u001b[93m"
            v1159
    let v1166 : string = method8()
    let v1167 : string = v1165 + v1051 
    let v1168 : string = v1167 + v1166 
    v1168 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1178 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1173 : string = "\u001b[91m"
            v1173
        | US0_1 -> (* Debug *)
            let v1170 : string = "\u001b[94m"
            v1170
        | US0_2 -> (* Info *)
            let v1171 : string = "\u001b[92m"
            v1171
        | US0_0 -> (* Verbose *)
            let v1169 : string = "\u001b[90m"
            v1169
        | US0_3 -> (* Warning *)
            let v1172 : string = "\u001b[93m"
            v1172
    let v1179 : string = method8()
    let v1180 : string = v1178 + v1051 
    let v1181 : string = v1180 + v1179 
    v1181 
    #endif
#else
    let v1191 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1186 : string = "\u001b[91m"
            v1186
        | US0_1 -> (* Debug *)
            let v1183 : string = "\u001b[94m"
            v1183
        | US0_2 -> (* Info *)
            let v1184 : string = "\u001b[92m"
            v1184
        | US0_0 -> (* Verbose *)
            let v1182 : string = "\u001b[90m"
            v1182
        | US0_3 -> (* Warning *)
            let v1185 : string = "\u001b[93m"
            v1185
    let v1192 : string = method8()
    let v1193 : string = v1191 + v1051 
    let v1194 : string = v1193 + v1192 
    v1194 
    #endif
    |> fun x -> _v1083 <- Some x
    let v1195 : string = match _v1083 with Some x -> x | None -> failwith "base.run_target / _v1083=None"
    let v1214 : int64 = v14.l0
    let struct (v1215 : int32, v1216 : string) = v2 ()
    let v1217 : string = ""
    let v1218 : Mut4 = {l0 = v1217} : Mut4
    method170(v1218, v1215, v1216)
    let v1219 : string = v1218.l0
    let v1222 : string = $"{v826} {v1195} #{v1214} %s{v1 ()} / {v1219}"
    let v1229 : char list = []
    let v1234 : (char list -> (char [])) = List.toArray
    let v1235 : (char []) = v1234 v1229
    let v1242 : string = v1222.TrimStart v1235 
    let v1281 : char list = []
    let v1284 : char list = '/' :: v1281 
    let v1293 : char list = ' ' :: v1284 
    let v1304 : (char list -> (char [])) = List.toArray
    let v1305 : (char []) = v1304 v1293
    let v1312 : string = v1242.TrimEnd v1305 
    v1312
and method169 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * string))) : unit =
    let v3 : (unit -> string) = closure103(v0, v1, v2)
    method13(v0, v3)
and closure104 () (v0 : std_string_String) : bool =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v5 : string = "near-sdk"
    let v6 : bool = v2.Contains v5 
    v6
and method171 () : (std_string_String -> bool) =
    closure104()
and method172 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method173 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method174 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method176 () : string =
    let v0 : string = "a"
    v0
and closure105 (v0 : uint8, v1 : int32, v2 : string, v3 : bool) () : struct (bool * string * int32 * string) =
    let v4 : string = $"{v0}/{3uy}"
    struct (v3, v4, v1, v2)
and method175 (v0 : US12, v1 : string, v2 : uint8) : struct (int32 * string) =
    let v3 : System.Threading.CancellationToken option = None
    let v4 : (struct (string * string) []) = [||]
    let v5 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v6 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v7 : string option = None
    let v8 : string = $"cargo fmt --manifest-path \"{v1}\" --"
    let v14 : Result<string, string> =
        match v0 with
        | US12_1(v11) -> (* Error *)
            let v12 : Result<string, string> = Error v11 
            v12
        | US12_0(v9) -> (* Ok *)
            let v10 : Result<string, string> = Ok v9 
            v10
    let v15 : string = "v14.ok()"
    let v16 : string option = Fable.Core.RustInterop.emitRustExpr () v15 
    let v17 : bool = true
    let struct (v18 : int32, v19 : string) = method55(v8, v3, v4, v5, v6, v17, v16)
    let v22 : string = "failed to load manifest for workspace member"
    let v23 : bool = v19.Contains v22 
    let v30 : bool = v23 = false
    let v279 : US36 =
        if v30 then
            let v31 : bool = v18 = 0
            if v31 then
                US36_0(v18, v19)
            else
                US36_1(v18, v19)
        else
            let v35 : string = $"regex::Regex::new(&$0)"
            let v36 : string = "failed to read `(?<a>.*?Cargo.toml)`"
            let v37 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v36 v35 
            let v38 : string = "$0.unwrap()"
            let v39 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v37 v38 
            let v40 : string = "&*$0"
            let v41 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v19 v40 
            let v42 : string = "String::from($0)"
            let v43 : std_string_String = Fable.Core.RustInterop.emitRustExpr v41 v42 
            let v44 : string = "true; let _result = (move || { // rust.capture_move"
            let v45 : bool = Fable.Core.RustInterop.emitRustExpr () v44 
            let v46 : string = "Box::new($0)"
            let v47 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v43 v46 
            let v48 : string = "Box::leak($0)"
            let v49 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v47 v48 
            let v50 : string = $"v39.captures_iter(v49)"
            let v51 : regex_CaptureMatches = Fable.Core.RustInterop.emitRustExpr () v50 
            let v52 : string = "true; let _result : Vec<_> = v51.map(|x| { //"
            let v53 : bool = Fable.Core.RustInterop.emitRustExpr () v52 
            let v54 : string = $"x"
            let v55 : regex_Captures<StaticLifetime> = Fable.Core.RustInterop.emitRustExpr () v54 
            let v56 : string = "Box::new($0)"
            let v57 : Box<regex_Captures<StaticLifetime>> = Fable.Core.RustInterop.emitRustExpr v55 v56 
            let v58 : string = "Box::leak($0)"
            let v59 : Ref<Lifetime<StaticLifetime, Mut<regex_Captures<StaticLifetime>>>> = Fable.Core.RustInterop.emitRustExpr v57 v58 
            let v60 : string = $"$0.capture_names()"
            let v61 : regex_CaptureNames = Fable.Core.RustInterop.emitRustExpr v39 v60 
            let v62 : string = "true; let _result : std::collections::HashMap<_, _> = v61.map(|x| { //"
            let v63 : bool = Fable.Core.RustInterop.emitRustExpr () v62 
            let v64 : string = "x.unwrap_or(\"\").to_string().into()"
            let v65 : string = Fable.Core.RustInterop.emitRustExpr () v64 
            let v66 : string = "$0.clone()"
            let v67 : string = Fable.Core.RustInterop.emitRustExpr v65 v66 
            let v68 : string = $"v59.name(&$0).map(|x| x.as_str()).unwrap_or(\"\").to_string().into()"
            let v69 : string = Fable.Core.RustInterop.emitRustExpr v65 v68 
            let v70 : (string * string) = v67, v69 
            let v71 : string = "true; $0 }).map(|x| std::sync::Arc::try_unwrap(x).unwrap_or_else(|x| (*x).clone())).collect()"
            let v72 : bool = Fable.Core.RustInterop.emitRustExpr v70 v71 
            let v73 : string = "_result"
            let v74 : std_collections_HashMap<string, string> = Fable.Core.RustInterop.emitRustExpr () v73 
            let v75 : string = "true; $0 }).collect::<Vec<_>>()"
            let v76 : bool = Fable.Core.RustInterop.emitRustExpr v74 v75 
            let v77 : string = "_result"
            let v78 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v77 
            let v79 : string = "true; $0 })()"
            let v80 : bool = Fable.Core.RustInterop.emitRustExpr v78 v79 
            let v81 : string = "_result"
            let v82 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v81 
            let v83 : string = "fable_library_rust::NativeArray_::array_from($0)"
            let v84 : (std_collections_HashMap<string, string> []) = Fable.Core.RustInterop.emitRustExpr v82 v83 
            let v85 : std_collections_HashMap<string, string> option = v84 |> Array.tryItem 0 
            let v88 : US37 option = None
            let _v88 = ref v88 
            match v85 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v89 : std_collections_HashMap<string, string> = x
            let v90 : US37 = US37_0(v89)
            v90 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v88.Value <- x
            let v91 : US37 option = _v88.Value 
            let v114 : US37 = US37_1
            let v115 : US37 = v91 |> Option.defaultValue v114 
            let v167 : US38 =
                match v115 with
                | US37_1 -> (* None *)
                    US38_1
                | US37_0(v123) -> (* Some *)
                    let v124 : string = method176()
                    let v125 : string = "std::collections::HashMap::get(&$0, &v124).map(|x| x).cloned()"
                    let v126 : string option = Fable.Core.RustInterop.emitRustExpr v123 v125 
                    let v129 : US3 option = None
                    let _v129 = ref v129 
                    match v126 with
                    | Some x -> (
                    (fun () ->
                    (fun () ->
                    let v130 : string = x
                    let v131 : US3 = US3_0(v130)
                    v131 
                    )
                    |> fun x -> x () |> Some
                    ) () ) | None -> None
                    |> fun x -> _v129.Value <- x
                    let v132 : US3 option = _v129.Value 
                    let v155 : US3 = US3_1
                    let v156 : US3 = v132 |> Option.defaultValue v155 
                    US38_0(v156)
            let v174 : US3 =
                match v167 with
                | US38_0(v168) -> (* Some *)
                    match v168 with
                    | US3_0(v169) -> (* Some *)
                        US3_0(v169)
                    | _ ->
                        US3_1
                | _ ->
                    US3_1
            match v174 with
            | US3_1 -> (* None *)
                US36_1(v18, v19)
            | US3_0(v176) -> (* Some *)
                let v177 : bool = method33(v176)
                let v178 : bool = v177 = false
                if v178 then
                    let v179 : string = method30(v176)
                    let v180 : System.IDisposable = method34(v179)
                    let v183 : System.DateTime = System.DateTime.Now
                    let v192 : (unit -> System.Guid) = System.Guid.NewGuid
                    let v193 : System.Guid = v192 ()
                    let v200 : System.Guid = method158(v193, v183)
                    let v203 : (System.Guid -> string) = _.ToString()
                    let v204 : string = v203 v200
                    let v211 : string = $"[package]"
                    let v212 : string = $"name = \"spiral_builder_{v204}\""
                    let v213 : string = "\n"
                    let v214 : string = v211 + v213 
                    let v215 : string = v214 + v212 
                    let v216 : string = $"version = \"0.0.1\""
                    let v217 : string = v215 + v213 
                    let v218 : string = v217 + v216 
                    let v219 : string = $"edition = \"2021\""
                    let v220 : string = v218 + v213 
                    let v221 : string = v220 + v219 
                    let v222 : string = $""
                    let v223 : string = v221 + v213 
                    let v224 : string = v223 + v222 
                    let v225 : string = $"[[bin]]"
                    let v226 : string = v224 + v213 
                    let v227 : string = v226 + v225 
                    let v228 : string = $"name = \"spiral_builder_{v204}\""
                    let v229 : string = v227 + v213 
                    let v230 : string = v229 + v228 
                    let v231 : string = $"path = \"spiral_builder.rs\""
                    let v232 : string = v230 + v213 
                    let v233 : string = v232 + v231 
                    let v236 : bool = true
                    let mutable _v236 : unit option = None 
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v237 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                    Fable.Core.RustInterop.emitRustExpr struct (v176, v233) v237 
                    () 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    null |> unbox<unit>
                    () 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    null |> unbox<unit>
                    () 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    null |> unbox<unit>
                    () 
                    #endif
#if FABLE_COMPILER_PYTHON
                    null |> unbox<unit>
                    () 
                    #endif
#else
                    let v262 : string = method54(v233)
                    System.IO.File.WriteAllText (v176, v262)
                    () 
                    #endif
                    |> fun x -> _v236 <- Some x
                    match _v236 with Some x -> x | None -> failwith "base.run_target / _v236=None"
                    ()
                let v273 : bool = v18 = 0
                if v273 then
                    US36_0(v18, v19)
                else
                    US36_1(v18, v19)
    let struct (v287 : bool, v288 : int32, v289 : string) =
        match v279 with
        | US36_1(v282, v283) -> (* Error *)
            struct (true, v282, v283)
        | US36_0(v280, v281) -> (* Ok *)
            struct (false, v280, v281)
    let v290 : bool = v287 = false
    let v292 : bool =
        if v290 then
            true
        else
            let v291 : bool = v2 >= 3uy
            v291
    if v292 then
        struct (v288, v289)
    else
        let v293 : US0 = US0_1
        let v294 : (unit -> string) = closure98()
        let v295 : (unit -> struct (bool * string * int32 * string)) = closure105(v2, v288, v289, v287)
        method166(v293, v294, v295)
        let v296 : uint8 = v2 + 1uy
        method175(v0, v1, v296)
and closure106 () () : string =
    let v0 : string = "spiral_builder.process_rust / cargo fmt error"
    v0
and closure107 (v0 : string, v1 : int32) () : struct (int32 * string) =
    struct (v1, v0)
and method178 (v0 : Mut4, v1 : int32, v2 : string) : unit =
    let v3 : string = "{ "
    method10(v0, v3)
    method11(v0)
    let v4 : string = "exit_code"
    method10(v0, v4)
    let v5 : string = " = "
    method10(v0, v5)
    method110(v0, v1)
    let v6 : string = "; "
    method10(v0, v6)
    let v7 : string = "cargo_fmt_result"
    method10(v0, v7)
    method10(v0, v5)
    method10(v0, v2)
    let v8 : string = " }"
    method10(v0, v8)
and closure108 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * string))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = $"near_sdk::env::block_timestamp()"
    let v331 : uint64 = Fable.Core.RustInterop.emitRustExpr () v330 
    let v334 : US2 option = None
    let _v334 = ref v334 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v335 : int64 = x
    let v336 : US2 = US2_0(v335)
    v336 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v334.Value <- x
    let v337 : US2 option = _v334.Value 
    let v360 : US2 = US2_1
    let v361 : US2 = v337 |> Option.defaultValue v360 
    let v374 : uint64 =
        match v361 with
        | US2_1 -> (* None *)
            v331
        | US2_0(v369) -> (* Some *)
            let v370 : (int64 -> uint64) = uint64
            let v371 : uint64 = v370 v369
            let v372 : uint64 = v331 - v371
            v372
    let v375 : uint64 = v374 / 1000000000UL
    let v376 : uint64 = v375 % 60UL
    let v377 : uint64 = v375 / 60UL
    let v378 : uint64 = v377 % 60UL
    let v379 : uint64 = v375 / 3600UL
    let v380 : uint64 = v379 % 24UL
    let v381 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v382 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v380, v378, v376) v381 
    let v383 : string = "fable_library_rust::String_::fromString($0)"
    let v384 : string = Fable.Core.RustInterop.emitRustExpr v382 v383 
    v384 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v387 : US2 option = None
    let _v387 = ref v387 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v388 : int64 = x
    let v389 : US2 = US2_0(v388)
    v389 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v387.Value <- x
    let v390 : US2 option = _v387.Value 
    let v413 : US2 = US2_1
    let v414 : US2 = v390 |> Option.defaultValue v413 
    let v512 : System.DateTime =
        match v414 with
        | US2_1 -> (* None *)
            let v504 : System.DateTime = System.DateTime.Now
            v504
        | US2_0(v422) -> (* Some *)
            let v425 : System.DateTime = System.DateTime.Now
            let v434 : (System.DateTime -> int64) = _.Ticks
            let v435 : int64 = v434 v425
            let v442 : int64 = v435 - v422
            let v445 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v446 : System.TimeSpan = v445 v442
            let v455 : (System.TimeSpan -> int32) = _.Hours
            let v456 : int32 = v455 v446
            let v465 : (System.TimeSpan -> int32) = _.Minutes
            let v466 : int32 = v465 v446
            let v475 : (System.TimeSpan -> int32) = _.Seconds
            let v476 : int32 = v475 v446
            let v485 : (System.TimeSpan -> int32) = _.Milliseconds
            let v486 : int32 = v485 v446
            let v495 : System.DateTime = System.DateTime (1, 1, 1, v456, v466, v476, v486)
            v495
    let v515 : string = method7()
    let v524 : (string -> string) = v512.ToString
    let v525 : string = v524 v515
    v525 
    #endif
#if FABLE_COMPILER_PYTHON
    let v534 : US2 option = None
    let _v534 = ref v534 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v535 : int64 = x
    let v536 : US2 = US2_0(v535)
    v536 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v534.Value <- x
    let v537 : US2 option = _v534.Value 
    let v560 : US2 = US2_1
    let v561 : US2 = v537 |> Option.defaultValue v560 
    let v659 : System.DateTime =
        match v561 with
        | US2_1 -> (* None *)
            let v651 : System.DateTime = System.DateTime.Now
            v651
        | US2_0(v569) -> (* Some *)
            let v572 : System.DateTime = System.DateTime.Now
            let v581 : (System.DateTime -> int64) = _.Ticks
            let v582 : int64 = v581 v572
            let v589 : int64 = v582 - v569
            let v592 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v593 : System.TimeSpan = v592 v589
            let v602 : (System.TimeSpan -> int32) = _.Hours
            let v603 : int32 = v602 v593
            let v612 : (System.TimeSpan -> int32) = _.Minutes
            let v613 : int32 = v612 v593
            let v622 : (System.TimeSpan -> int32) = _.Seconds
            let v623 : int32 = v622 v593
            let v632 : (System.TimeSpan -> int32) = _.Milliseconds
            let v633 : int32 = v632 v593
            let v642 : System.DateTime = System.DateTime (1, 1, 1, v603, v613, v623, v633)
            v642
    let v662 : string = method7()
    let v671 : (string -> string) = v659.ToString
    let v672 : string = v671 v662
    v672 
    #endif
#else
    let v681 : US2 option = None
    let _v681 = ref v681 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v682 : int64 = x
    let v683 : US2 = US2_0(v682)
    v683 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v681.Value <- x
    let v684 : US2 option = _v681.Value 
    let v707 : US2 = US2_1
    let v708 : US2 = v684 |> Option.defaultValue v707 
    let v806 : System.DateTime =
        match v708 with
        | US2_1 -> (* None *)
            let v798 : System.DateTime = System.DateTime.Now
            v798
        | US2_0(v716) -> (* Some *)
            let v719 : System.DateTime = System.DateTime.Now
            let v728 : (System.DateTime -> int64) = _.Ticks
            let v729 : int64 = v728 v719
            let v736 : int64 = v729 - v716
            let v739 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v740 : System.TimeSpan = v739 v736
            let v749 : (System.TimeSpan -> int32) = _.Hours
            let v750 : int32 = v749 v740
            let v759 : (System.TimeSpan -> int32) = _.Minutes
            let v760 : int32 = v759 v740
            let v769 : (System.TimeSpan -> int32) = _.Seconds
            let v770 : int32 = v769 v740
            let v779 : (System.TimeSpan -> int32) = _.Milliseconds
            let v780 : int32 = v779 v740
            let v789 : System.DateTime = System.DateTime (1, 1, 1, v750, v760, v770, v780)
            v789
    let v809 : string = method7()
    let v818 : (string -> string) = v806.ToString
    let v819 : string = v818 v809
    v819 
    #endif
    |> fun x -> _v35 <- Some x
    let v826 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v981 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v985 : US3 =
        if v981 then
            let v982 : string = "Verbose"
            US3_0(v982)
        else
            US3_1
    let v1034 : US3 =
        match v985 with
        | US3_1 -> (* None *)
            let v990 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v994 : US3 =
                if v990 then
                    let v991 : string = "Debug"
                    US3_0(v991)
                else
                    US3_1
            match v994 with
            | US3_1 -> (* None *)
                let v999 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v1003 : US3 =
                    if v999 then
                        let v1000 : string = "Info"
                        US3_0(v1000)
                    else
                        US3_1
                match v1003 with
                | US3_1 -> (* None *)
                    let v1008 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v1012 : US3 =
                        if v1008 then
                            let v1009 : string = "Warning"
                            US3_0(v1009)
                        else
                            US3_1
                    match v1012 with
                    | US3_1 -> (* None *)
                        let v1017 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v1021 : US3 =
                            if v1017 then
                                let v1018 : string = "Critical"
                                US3_0(v1018)
                            else
                                US3_1
                        match v1021 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v1022) -> (* Some *)
                            US3_0(v1022)
                    | US3_0(v1013) -> (* Some *)
                        US3_0(v1013)
                | US3_0(v1004) -> (* Some *)
                    US3_0(v1004)
            | US3_0(v995) -> (* Some *)
                US3_0(v995)
        | US3_0(v986) -> (* Some *)
            US3_0(v986)
    let v1038 : string =
        match v1034 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v1035) -> (* Some *)
            v1035
    let v1041 : (unit -> string) = v1038.ToLower
    let v1042 : string = v1041 ()
    let v1051 : string = v1042.PadLeft (7, ' ')
    let v1083 : bool = true
    let mutable _v1083 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1098 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1092 : string = "inline_colorization::color_bright_red"
            let v1093 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1092 
            v1093
        | US0_1 -> (* Debug *)
            let v1086 : string = "inline_colorization::color_bright_blue"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_2 -> (* Info *)
            let v1088 : string = "inline_colorization::color_bright_green"
            let v1089 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1088 
            v1089
        | US0_0 -> (* Verbose *)
            let v1084 : string = "inline_colorization::color_bright_black"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
        | US0_3 -> (* Warning *)
            let v1090 : string = "inline_colorization::color_yellow"
            let v1091 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1090 
            v1091
    let v1099 : string = "&*$0"
    let v1100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1099 
    let v1101 : string = "inline_colorization::color_reset"
    let v1102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1101 
    let v1103 : string = "\"{v1098}{v1100}{v1102}\""
    let v1104 : string = @$"format!(" + v1103 + ")"
    let v1105 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1104 
    let v1106 : string = "fable_library_rust::String_::fromString($0)"
    let v1107 : string = Fable.Core.RustInterop.emitRustExpr v1105 v1106 
    v1107 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1122 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1116 : string = "inline_colorization::color_bright_red"
            let v1117 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1116 
            v1117
        | US0_1 -> (* Debug *)
            let v1110 : string = "inline_colorization::color_bright_blue"
            let v1111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1110 
            v1111
        | US0_2 -> (* Info *)
            let v1112 : string = "inline_colorization::color_bright_green"
            let v1113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1112 
            v1113
        | US0_0 -> (* Verbose *)
            let v1108 : string = "inline_colorization::color_bright_black"
            let v1109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1108 
            v1109
        | US0_3 -> (* Warning *)
            let v1114 : string = "inline_colorization::color_yellow"
            let v1115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1114 
            v1115
    let v1123 : string = "&*$0"
    let v1124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1123 
    let v1125 : string = "inline_colorization::color_reset"
    let v1126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1125 
    let v1127 : string = "\"{v1122}{v1124}{v1126}\""
    let v1128 : string = @$"format!(" + v1127 + ")"
    let v1129 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1128 
    let v1130 : string = "fable_library_rust::String_::fromString($0)"
    let v1131 : string = Fable.Core.RustInterop.emitRustExpr v1129 v1130 
    v1131 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1146 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1140 : string = "inline_colorization::color_bright_red"
            let v1141 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1140 
            v1141
        | US0_1 -> (* Debug *)
            let v1134 : string = "inline_colorization::color_bright_blue"
            let v1135 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1134 
            v1135
        | US0_2 -> (* Info *)
            let v1136 : string = "inline_colorization::color_bright_green"
            let v1137 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1136 
            v1137
        | US0_0 -> (* Verbose *)
            let v1132 : string = "inline_colorization::color_bright_black"
            let v1133 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1132 
            v1133
        | US0_3 -> (* Warning *)
            let v1138 : string = "inline_colorization::color_yellow"
            let v1139 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1138 
            v1139
    let v1147 : string = "&*$0"
    let v1148 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1147 
    let v1149 : string = "inline_colorization::color_reset"
    let v1150 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1149 
    let v1151 : string = "\"{v1146}{v1148}{v1150}\""
    let v1152 : string = @$"format!(" + v1151 + ")"
    let v1153 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1152 
    let v1154 : string = "fable_library_rust::String_::fromString($0)"
    let v1155 : string = Fable.Core.RustInterop.emitRustExpr v1153 v1154 
    v1155 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1165 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1160 : string = "\u001b[91m"
            v1160
        | US0_1 -> (* Debug *)
            let v1157 : string = "\u001b[94m"
            v1157
        | US0_2 -> (* Info *)
            let v1158 : string = "\u001b[92m"
            v1158
        | US0_0 -> (* Verbose *)
            let v1156 : string = "\u001b[90m"
            v1156
        | US0_3 -> (* Warning *)
            let v1159 : string = "\u001b[93m"
            v1159
    let v1166 : string = method8()
    let v1167 : string = v1165 + v1051 
    let v1168 : string = v1167 + v1166 
    v1168 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1178 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1173 : string = "\u001b[91m"
            v1173
        | US0_1 -> (* Debug *)
            let v1170 : string = "\u001b[94m"
            v1170
        | US0_2 -> (* Info *)
            let v1171 : string = "\u001b[92m"
            v1171
        | US0_0 -> (* Verbose *)
            let v1169 : string = "\u001b[90m"
            v1169
        | US0_3 -> (* Warning *)
            let v1172 : string = "\u001b[93m"
            v1172
    let v1179 : string = method8()
    let v1180 : string = v1178 + v1051 
    let v1181 : string = v1180 + v1179 
    v1181 
    #endif
#else
    let v1191 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1186 : string = "\u001b[91m"
            v1186
        | US0_1 -> (* Debug *)
            let v1183 : string = "\u001b[94m"
            v1183
        | US0_2 -> (* Info *)
            let v1184 : string = "\u001b[92m"
            v1184
        | US0_0 -> (* Verbose *)
            let v1182 : string = "\u001b[90m"
            v1182
        | US0_3 -> (* Warning *)
            let v1185 : string = "\u001b[93m"
            v1185
    let v1192 : string = method8()
    let v1193 : string = v1191 + v1051 
    let v1194 : string = v1193 + v1192 
    v1194 
    #endif
    |> fun x -> _v1083 <- Some x
    let v1195 : string = match _v1083 with Some x -> x | None -> failwith "base.run_target / _v1083=None"
    let v1214 : int64 = v14.l0
    let struct (v1215 : int32, v1216 : string) = v2 ()
    let v1217 : string = ""
    let v1218 : Mut4 = {l0 = v1217} : Mut4
    method178(v1218, v1215, v1216)
    let v1219 : string = v1218.l0
    let v1222 : string = $"{v826} {v1195} #{v1214} %s{v1 ()} / {v1219}"
    let v1229 : char list = []
    let v1234 : (char list -> (char [])) = List.toArray
    let v1235 : (char []) = v1234 v1229
    let v1242 : string = v1222.TrimStart v1235 
    let v1281 : char list = []
    let v1284 : char list = '/' :: v1281 
    let v1293 : char list = ' ' :: v1284 
    let v1304 : (char list -> (char [])) = List.toArray
    let v1305 : (char []) = v1304 v1293
    let v1312 : string = v1242.TrimEnd v1305 
    v1312
and method177 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * string))) : unit =
    let v3 : (unit -> string) = closure108(v0, v1, v2)
    method13(v0, v3)
and method179 () : string =
    let v0 : string = " defaultOf::<()>();"
    v0
and method180 () : string =
    let v0 : string = "\\s\\sdefaultOf\\(\\);"
    v0
and closure110 () (v0 : string) : bool =
    let v3 : string = "profile [optimized] target"
    let v4 : bool = v0.Contains v3 
    let v11 : bool = v4 = false
    if v11 then
        let v14 : string = "profile [unoptimized] target"
        let v15 : bool = v0.Contains v14 
        let v22 : bool = v15 = false
        if v22 then
            let v25 : string = "profile [unoptimized + debuginfo] target"
            let v26 : bool = v0.Contains v25 
            let v33 : bool = v26 = false
            v33
        else
            false
    else
        false
and closure109 (v0 : string) () : string =
    let v1 : string = "\n"
    let v2 : (string []) = v0.Split v1 
    let v3 : (string -> bool) = closure110()
    let v4 : (string []) = v2 |> Array.skipWhile v3 
    let v5 : (string []) = v4 |> Array.skip 2 
    let v8 : string seq = v5 |> Seq.ofArray
    let v17 : (string -> (string seq -> string)) = String.concat
    let v18 : (string seq -> string) = v17 v1
    v18 v8
and closure112 () () : string =
    let v0 : string = "spiral_builder.process_rust / Exception"
    v0
and closure113 (v0 : string, v1 : string, v2 : string, v3 : exn) () : struct (exn * string * string * string) =
    struct (v3, v1, v0, v2)
and method182 (v0 : Mut4, v1 : exn, v2 : string, v3 : string, v4 : string) : unit =
    let v5 : string = "{ "
    method10(v0, v5)
    method11(v0)
    let v6 : string = "ex"
    method10(v0, v6)
    let v7 : string = " = "
    method10(v0, v7)
    method124(v0, v1)
    let v8 : string = "; "
    method10(v0, v8)
    let v9 : string = "cargo_result"
    method10(v0, v9)
    method10(v0, v7)
    method10(v0, v2)
    method10(v0, v8)
    let v10 : string = "new_code_path"
    method10(v0, v10)
    method10(v0, v7)
    method10(v0, v3)
    method10(v0, v8)
    let v11 : string = "external_command"
    method10(v0, v11)
    method10(v0, v7)
    method10(v0, v4)
    let v12 : string = " }"
    method10(v0, v12)
and closure114 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (exn * string * string * string))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = $"near_sdk::env::block_timestamp()"
    let v331 : uint64 = Fable.Core.RustInterop.emitRustExpr () v330 
    let v334 : US2 option = None
    let _v334 = ref v334 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v335 : int64 = x
    let v336 : US2 = US2_0(v335)
    v336 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v334.Value <- x
    let v337 : US2 option = _v334.Value 
    let v360 : US2 = US2_1
    let v361 : US2 = v337 |> Option.defaultValue v360 
    let v374 : uint64 =
        match v361 with
        | US2_1 -> (* None *)
            v331
        | US2_0(v369) -> (* Some *)
            let v370 : (int64 -> uint64) = uint64
            let v371 : uint64 = v370 v369
            let v372 : uint64 = v331 - v371
            v372
    let v375 : uint64 = v374 / 1000000000UL
    let v376 : uint64 = v375 % 60UL
    let v377 : uint64 = v375 / 60UL
    let v378 : uint64 = v377 % 60UL
    let v379 : uint64 = v375 / 3600UL
    let v380 : uint64 = v379 % 24UL
    let v381 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v382 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v380, v378, v376) v381 
    let v383 : string = "fable_library_rust::String_::fromString($0)"
    let v384 : string = Fable.Core.RustInterop.emitRustExpr v382 v383 
    v384 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v387 : US2 option = None
    let _v387 = ref v387 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v388 : int64 = x
    let v389 : US2 = US2_0(v388)
    v389 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v387.Value <- x
    let v390 : US2 option = _v387.Value 
    let v413 : US2 = US2_1
    let v414 : US2 = v390 |> Option.defaultValue v413 
    let v512 : System.DateTime =
        match v414 with
        | US2_1 -> (* None *)
            let v504 : System.DateTime = System.DateTime.Now
            v504
        | US2_0(v422) -> (* Some *)
            let v425 : System.DateTime = System.DateTime.Now
            let v434 : (System.DateTime -> int64) = _.Ticks
            let v435 : int64 = v434 v425
            let v442 : int64 = v435 - v422
            let v445 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v446 : System.TimeSpan = v445 v442
            let v455 : (System.TimeSpan -> int32) = _.Hours
            let v456 : int32 = v455 v446
            let v465 : (System.TimeSpan -> int32) = _.Minutes
            let v466 : int32 = v465 v446
            let v475 : (System.TimeSpan -> int32) = _.Seconds
            let v476 : int32 = v475 v446
            let v485 : (System.TimeSpan -> int32) = _.Milliseconds
            let v486 : int32 = v485 v446
            let v495 : System.DateTime = System.DateTime (1, 1, 1, v456, v466, v476, v486)
            v495
    let v515 : string = method7()
    let v524 : (string -> string) = v512.ToString
    let v525 : string = v524 v515
    v525 
    #endif
#if FABLE_COMPILER_PYTHON
    let v534 : US2 option = None
    let _v534 = ref v534 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v535 : int64 = x
    let v536 : US2 = US2_0(v535)
    v536 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v534.Value <- x
    let v537 : US2 option = _v534.Value 
    let v560 : US2 = US2_1
    let v561 : US2 = v537 |> Option.defaultValue v560 
    let v659 : System.DateTime =
        match v561 with
        | US2_1 -> (* None *)
            let v651 : System.DateTime = System.DateTime.Now
            v651
        | US2_0(v569) -> (* Some *)
            let v572 : System.DateTime = System.DateTime.Now
            let v581 : (System.DateTime -> int64) = _.Ticks
            let v582 : int64 = v581 v572
            let v589 : int64 = v582 - v569
            let v592 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v593 : System.TimeSpan = v592 v589
            let v602 : (System.TimeSpan -> int32) = _.Hours
            let v603 : int32 = v602 v593
            let v612 : (System.TimeSpan -> int32) = _.Minutes
            let v613 : int32 = v612 v593
            let v622 : (System.TimeSpan -> int32) = _.Seconds
            let v623 : int32 = v622 v593
            let v632 : (System.TimeSpan -> int32) = _.Milliseconds
            let v633 : int32 = v632 v593
            let v642 : System.DateTime = System.DateTime (1, 1, 1, v603, v613, v623, v633)
            v642
    let v662 : string = method7()
    let v671 : (string -> string) = v659.ToString
    let v672 : string = v671 v662
    v672 
    #endif
#else
    let v681 : US2 option = None
    let _v681 = ref v681 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v682 : int64 = x
    let v683 : US2 = US2_0(v682)
    v683 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v681.Value <- x
    let v684 : US2 option = _v681.Value 
    let v707 : US2 = US2_1
    let v708 : US2 = v684 |> Option.defaultValue v707 
    let v806 : System.DateTime =
        match v708 with
        | US2_1 -> (* None *)
            let v798 : System.DateTime = System.DateTime.Now
            v798
        | US2_0(v716) -> (* Some *)
            let v719 : System.DateTime = System.DateTime.Now
            let v728 : (System.DateTime -> int64) = _.Ticks
            let v729 : int64 = v728 v719
            let v736 : int64 = v729 - v716
            let v739 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v740 : System.TimeSpan = v739 v736
            let v749 : (System.TimeSpan -> int32) = _.Hours
            let v750 : int32 = v749 v740
            let v759 : (System.TimeSpan -> int32) = _.Minutes
            let v760 : int32 = v759 v740
            let v769 : (System.TimeSpan -> int32) = _.Seconds
            let v770 : int32 = v769 v740
            let v779 : (System.TimeSpan -> int32) = _.Milliseconds
            let v780 : int32 = v779 v740
            let v789 : System.DateTime = System.DateTime (1, 1, 1, v750, v760, v770, v780)
            v789
    let v809 : string = method7()
    let v818 : (string -> string) = v806.ToString
    let v819 : string = v818 v809
    v819 
    #endif
    |> fun x -> _v35 <- Some x
    let v826 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v981 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v985 : US3 =
        if v981 then
            let v982 : string = "Verbose"
            US3_0(v982)
        else
            US3_1
    let v1034 : US3 =
        match v985 with
        | US3_1 -> (* None *)
            let v990 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v994 : US3 =
                if v990 then
                    let v991 : string = "Debug"
                    US3_0(v991)
                else
                    US3_1
            match v994 with
            | US3_1 -> (* None *)
                let v999 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v1003 : US3 =
                    if v999 then
                        let v1000 : string = "Info"
                        US3_0(v1000)
                    else
                        US3_1
                match v1003 with
                | US3_1 -> (* None *)
                    let v1008 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v1012 : US3 =
                        if v1008 then
                            let v1009 : string = "Warning"
                            US3_0(v1009)
                        else
                            US3_1
                    match v1012 with
                    | US3_1 -> (* None *)
                        let v1017 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v1021 : US3 =
                            if v1017 then
                                let v1018 : string = "Critical"
                                US3_0(v1018)
                            else
                                US3_1
                        match v1021 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v1022) -> (* Some *)
                            US3_0(v1022)
                    | US3_0(v1013) -> (* Some *)
                        US3_0(v1013)
                | US3_0(v1004) -> (* Some *)
                    US3_0(v1004)
            | US3_0(v995) -> (* Some *)
                US3_0(v995)
        | US3_0(v986) -> (* Some *)
            US3_0(v986)
    let v1038 : string =
        match v1034 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v1035) -> (* Some *)
            v1035
    let v1041 : (unit -> string) = v1038.ToLower
    let v1042 : string = v1041 ()
    let v1051 : string = v1042.PadLeft (7, ' ')
    let v1083 : bool = true
    let mutable _v1083 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1098 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1092 : string = "inline_colorization::color_bright_red"
            let v1093 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1092 
            v1093
        | US0_1 -> (* Debug *)
            let v1086 : string = "inline_colorization::color_bright_blue"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_2 -> (* Info *)
            let v1088 : string = "inline_colorization::color_bright_green"
            let v1089 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1088 
            v1089
        | US0_0 -> (* Verbose *)
            let v1084 : string = "inline_colorization::color_bright_black"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
        | US0_3 -> (* Warning *)
            let v1090 : string = "inline_colorization::color_yellow"
            let v1091 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1090 
            v1091
    let v1099 : string = "&*$0"
    let v1100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1099 
    let v1101 : string = "inline_colorization::color_reset"
    let v1102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1101 
    let v1103 : string = "\"{v1098}{v1100}{v1102}\""
    let v1104 : string = @$"format!(" + v1103 + ")"
    let v1105 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1104 
    let v1106 : string = "fable_library_rust::String_::fromString($0)"
    let v1107 : string = Fable.Core.RustInterop.emitRustExpr v1105 v1106 
    v1107 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1122 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1116 : string = "inline_colorization::color_bright_red"
            let v1117 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1116 
            v1117
        | US0_1 -> (* Debug *)
            let v1110 : string = "inline_colorization::color_bright_blue"
            let v1111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1110 
            v1111
        | US0_2 -> (* Info *)
            let v1112 : string = "inline_colorization::color_bright_green"
            let v1113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1112 
            v1113
        | US0_0 -> (* Verbose *)
            let v1108 : string = "inline_colorization::color_bright_black"
            let v1109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1108 
            v1109
        | US0_3 -> (* Warning *)
            let v1114 : string = "inline_colorization::color_yellow"
            let v1115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1114 
            v1115
    let v1123 : string = "&*$0"
    let v1124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1123 
    let v1125 : string = "inline_colorization::color_reset"
    let v1126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1125 
    let v1127 : string = "\"{v1122}{v1124}{v1126}\""
    let v1128 : string = @$"format!(" + v1127 + ")"
    let v1129 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1128 
    let v1130 : string = "fable_library_rust::String_::fromString($0)"
    let v1131 : string = Fable.Core.RustInterop.emitRustExpr v1129 v1130 
    v1131 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1146 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1140 : string = "inline_colorization::color_bright_red"
            let v1141 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1140 
            v1141
        | US0_1 -> (* Debug *)
            let v1134 : string = "inline_colorization::color_bright_blue"
            let v1135 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1134 
            v1135
        | US0_2 -> (* Info *)
            let v1136 : string = "inline_colorization::color_bright_green"
            let v1137 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1136 
            v1137
        | US0_0 -> (* Verbose *)
            let v1132 : string = "inline_colorization::color_bright_black"
            let v1133 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1132 
            v1133
        | US0_3 -> (* Warning *)
            let v1138 : string = "inline_colorization::color_yellow"
            let v1139 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1138 
            v1139
    let v1147 : string = "&*$0"
    let v1148 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1147 
    let v1149 : string = "inline_colorization::color_reset"
    let v1150 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1149 
    let v1151 : string = "\"{v1146}{v1148}{v1150}\""
    let v1152 : string = @$"format!(" + v1151 + ")"
    let v1153 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1152 
    let v1154 : string = "fable_library_rust::String_::fromString($0)"
    let v1155 : string = Fable.Core.RustInterop.emitRustExpr v1153 v1154 
    v1155 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1165 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1160 : string = "\u001b[91m"
            v1160
        | US0_1 -> (* Debug *)
            let v1157 : string = "\u001b[94m"
            v1157
        | US0_2 -> (* Info *)
            let v1158 : string = "\u001b[92m"
            v1158
        | US0_0 -> (* Verbose *)
            let v1156 : string = "\u001b[90m"
            v1156
        | US0_3 -> (* Warning *)
            let v1159 : string = "\u001b[93m"
            v1159
    let v1166 : string = method8()
    let v1167 : string = v1165 + v1051 
    let v1168 : string = v1167 + v1166 
    v1168 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1178 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1173 : string = "\u001b[91m"
            v1173
        | US0_1 -> (* Debug *)
            let v1170 : string = "\u001b[94m"
            v1170
        | US0_2 -> (* Info *)
            let v1171 : string = "\u001b[92m"
            v1171
        | US0_0 -> (* Verbose *)
            let v1169 : string = "\u001b[90m"
            v1169
        | US0_3 -> (* Warning *)
            let v1172 : string = "\u001b[93m"
            v1172
    let v1179 : string = method8()
    let v1180 : string = v1178 + v1051 
    let v1181 : string = v1180 + v1179 
    v1181 
    #endif
#else
    let v1191 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1186 : string = "\u001b[91m"
            v1186
        | US0_1 -> (* Debug *)
            let v1183 : string = "\u001b[94m"
            v1183
        | US0_2 -> (* Info *)
            let v1184 : string = "\u001b[92m"
            v1184
        | US0_0 -> (* Verbose *)
            let v1182 : string = "\u001b[90m"
            v1182
        | US0_3 -> (* Warning *)
            let v1185 : string = "\u001b[93m"
            v1185
    let v1192 : string = method8()
    let v1193 : string = v1191 + v1051 
    let v1194 : string = v1193 + v1192 
    v1194 
    #endif
    |> fun x -> _v1083 <- Some x
    let v1195 : string = match _v1083 with Some x -> x | None -> failwith "base.run_target / _v1083=None"
    let v1214 : int64 = v14.l0
    let struct (v1215 : exn, v1216 : string, v1217 : string, v1218 : string) = v2 ()
    let v1219 : string = ""
    let v1220 : Mut4 = {l0 = v1219} : Mut4
    method182(v1220, v1215, v1216, v1217, v1218)
    let v1221 : string = v1220.l0
    let v1224 : string = $"{v826} {v1195} #{v1214} %s{v1 ()} / {v1221}"
    let v1231 : char list = []
    let v1236 : (char list -> (char [])) = List.toArray
    let v1237 : (char []) = v1236 v1231
    let v1244 : string = v1224.TrimStart v1237 
    let v1283 : char list = []
    let v1286 : char list = '/' :: v1283 
    let v1295 : char list = ' ' :: v1286 
    let v1306 : (char list -> (char [])) = List.toArray
    let v1307 : (char []) = v1306 v1295
    let v1314 : string = v1244.TrimEnd v1307 
    v1314
and method181 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (exn * string * string * string))) : unit =
    let v3 : (unit -> string) = closure114(v0, v1, v2)
    method13(v0, v3)
and closure111 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US3 =
    let v4 : US0 = US0_4
    let v5 : (unit -> string) = closure112()
    let v6 : (unit -> struct (exn * string * string * string)) = closure113(v0, v1, v2, v3)
    method181(v4, v5, v6)
    US3_1
and closure115 () () : string =
    let v0 : string = "spiral_builder.process_rust / error"
    v0
and closure116 (v0 : string, v1 : string, v2 : int32, v3 : string) () : struct (int32 * string * string * string) =
    struct (v2, v1, v0, v3)
and method184 (v0 : Mut4, v1 : int32, v2 : string, v3 : string, v4 : string) : unit =
    let v5 : string = "{ "
    method10(v0, v5)
    method11(v0)
    let v6 : string = "exit_code"
    method10(v0, v6)
    let v7 : string = " = "
    method10(v0, v7)
    method110(v0, v1)
    let v8 : string = "; "
    method10(v0, v8)
    let v9 : string = "cargo_result"
    method10(v0, v9)
    method10(v0, v7)
    method10(v0, v2)
    method10(v0, v8)
    let v10 : string = "new_code_path"
    method10(v0, v10)
    method10(v0, v7)
    method10(v0, v3)
    method10(v0, v8)
    let v11 : string = "external_command"
    method10(v0, v11)
    method10(v0, v7)
    method10(v0, v4)
    let v12 : string = " }"
    method10(v0, v12)
and closure117 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * string * string * string))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = $"near_sdk::env::block_timestamp()"
    let v331 : uint64 = Fable.Core.RustInterop.emitRustExpr () v330 
    let v334 : US2 option = None
    let _v334 = ref v334 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v335 : int64 = x
    let v336 : US2 = US2_0(v335)
    v336 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v334.Value <- x
    let v337 : US2 option = _v334.Value 
    let v360 : US2 = US2_1
    let v361 : US2 = v337 |> Option.defaultValue v360 
    let v374 : uint64 =
        match v361 with
        | US2_1 -> (* None *)
            v331
        | US2_0(v369) -> (* Some *)
            let v370 : (int64 -> uint64) = uint64
            let v371 : uint64 = v370 v369
            let v372 : uint64 = v331 - v371
            v372
    let v375 : uint64 = v374 / 1000000000UL
    let v376 : uint64 = v375 % 60UL
    let v377 : uint64 = v375 / 60UL
    let v378 : uint64 = v377 % 60UL
    let v379 : uint64 = v375 / 3600UL
    let v380 : uint64 = v379 % 24UL
    let v381 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v382 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v380, v378, v376) v381 
    let v383 : string = "fable_library_rust::String_::fromString($0)"
    let v384 : string = Fable.Core.RustInterop.emitRustExpr v382 v383 
    v384 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v387 : US2 option = None
    let _v387 = ref v387 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v388 : int64 = x
    let v389 : US2 = US2_0(v388)
    v389 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v387.Value <- x
    let v390 : US2 option = _v387.Value 
    let v413 : US2 = US2_1
    let v414 : US2 = v390 |> Option.defaultValue v413 
    let v512 : System.DateTime =
        match v414 with
        | US2_1 -> (* None *)
            let v504 : System.DateTime = System.DateTime.Now
            v504
        | US2_0(v422) -> (* Some *)
            let v425 : System.DateTime = System.DateTime.Now
            let v434 : (System.DateTime -> int64) = _.Ticks
            let v435 : int64 = v434 v425
            let v442 : int64 = v435 - v422
            let v445 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v446 : System.TimeSpan = v445 v442
            let v455 : (System.TimeSpan -> int32) = _.Hours
            let v456 : int32 = v455 v446
            let v465 : (System.TimeSpan -> int32) = _.Minutes
            let v466 : int32 = v465 v446
            let v475 : (System.TimeSpan -> int32) = _.Seconds
            let v476 : int32 = v475 v446
            let v485 : (System.TimeSpan -> int32) = _.Milliseconds
            let v486 : int32 = v485 v446
            let v495 : System.DateTime = System.DateTime (1, 1, 1, v456, v466, v476, v486)
            v495
    let v515 : string = method7()
    let v524 : (string -> string) = v512.ToString
    let v525 : string = v524 v515
    v525 
    #endif
#if FABLE_COMPILER_PYTHON
    let v534 : US2 option = None
    let _v534 = ref v534 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v535 : int64 = x
    let v536 : US2 = US2_0(v535)
    v536 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v534.Value <- x
    let v537 : US2 option = _v534.Value 
    let v560 : US2 = US2_1
    let v561 : US2 = v537 |> Option.defaultValue v560 
    let v659 : System.DateTime =
        match v561 with
        | US2_1 -> (* None *)
            let v651 : System.DateTime = System.DateTime.Now
            v651
        | US2_0(v569) -> (* Some *)
            let v572 : System.DateTime = System.DateTime.Now
            let v581 : (System.DateTime -> int64) = _.Ticks
            let v582 : int64 = v581 v572
            let v589 : int64 = v582 - v569
            let v592 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v593 : System.TimeSpan = v592 v589
            let v602 : (System.TimeSpan -> int32) = _.Hours
            let v603 : int32 = v602 v593
            let v612 : (System.TimeSpan -> int32) = _.Minutes
            let v613 : int32 = v612 v593
            let v622 : (System.TimeSpan -> int32) = _.Seconds
            let v623 : int32 = v622 v593
            let v632 : (System.TimeSpan -> int32) = _.Milliseconds
            let v633 : int32 = v632 v593
            let v642 : System.DateTime = System.DateTime (1, 1, 1, v603, v613, v623, v633)
            v642
    let v662 : string = method7()
    let v671 : (string -> string) = v659.ToString
    let v672 : string = v671 v662
    v672 
    #endif
#else
    let v681 : US2 option = None
    let _v681 = ref v681 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v682 : int64 = x
    let v683 : US2 = US2_0(v682)
    v683 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v681.Value <- x
    let v684 : US2 option = _v681.Value 
    let v707 : US2 = US2_1
    let v708 : US2 = v684 |> Option.defaultValue v707 
    let v806 : System.DateTime =
        match v708 with
        | US2_1 -> (* None *)
            let v798 : System.DateTime = System.DateTime.Now
            v798
        | US2_0(v716) -> (* Some *)
            let v719 : System.DateTime = System.DateTime.Now
            let v728 : (System.DateTime -> int64) = _.Ticks
            let v729 : int64 = v728 v719
            let v736 : int64 = v729 - v716
            let v739 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v740 : System.TimeSpan = v739 v736
            let v749 : (System.TimeSpan -> int32) = _.Hours
            let v750 : int32 = v749 v740
            let v759 : (System.TimeSpan -> int32) = _.Minutes
            let v760 : int32 = v759 v740
            let v769 : (System.TimeSpan -> int32) = _.Seconds
            let v770 : int32 = v769 v740
            let v779 : (System.TimeSpan -> int32) = _.Milliseconds
            let v780 : int32 = v779 v740
            let v789 : System.DateTime = System.DateTime (1, 1, 1, v750, v760, v770, v780)
            v789
    let v809 : string = method7()
    let v818 : (string -> string) = v806.ToString
    let v819 : string = v818 v809
    v819 
    #endif
    |> fun x -> _v35 <- Some x
    let v826 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v981 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v985 : US3 =
        if v981 then
            let v982 : string = "Verbose"
            US3_0(v982)
        else
            US3_1
    let v1034 : US3 =
        match v985 with
        | US3_1 -> (* None *)
            let v990 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v994 : US3 =
                if v990 then
                    let v991 : string = "Debug"
                    US3_0(v991)
                else
                    US3_1
            match v994 with
            | US3_1 -> (* None *)
                let v999 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v1003 : US3 =
                    if v999 then
                        let v1000 : string = "Info"
                        US3_0(v1000)
                    else
                        US3_1
                match v1003 with
                | US3_1 -> (* None *)
                    let v1008 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v1012 : US3 =
                        if v1008 then
                            let v1009 : string = "Warning"
                            US3_0(v1009)
                        else
                            US3_1
                    match v1012 with
                    | US3_1 -> (* None *)
                        let v1017 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v1021 : US3 =
                            if v1017 then
                                let v1018 : string = "Critical"
                                US3_0(v1018)
                            else
                                US3_1
                        match v1021 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v1022) -> (* Some *)
                            US3_0(v1022)
                    | US3_0(v1013) -> (* Some *)
                        US3_0(v1013)
                | US3_0(v1004) -> (* Some *)
                    US3_0(v1004)
            | US3_0(v995) -> (* Some *)
                US3_0(v995)
        | US3_0(v986) -> (* Some *)
            US3_0(v986)
    let v1038 : string =
        match v1034 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v1035) -> (* Some *)
            v1035
    let v1041 : (unit -> string) = v1038.ToLower
    let v1042 : string = v1041 ()
    let v1051 : string = v1042.PadLeft (7, ' ')
    let v1083 : bool = true
    let mutable _v1083 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1098 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1092 : string = "inline_colorization::color_bright_red"
            let v1093 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1092 
            v1093
        | US0_1 -> (* Debug *)
            let v1086 : string = "inline_colorization::color_bright_blue"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_2 -> (* Info *)
            let v1088 : string = "inline_colorization::color_bright_green"
            let v1089 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1088 
            v1089
        | US0_0 -> (* Verbose *)
            let v1084 : string = "inline_colorization::color_bright_black"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
        | US0_3 -> (* Warning *)
            let v1090 : string = "inline_colorization::color_yellow"
            let v1091 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1090 
            v1091
    let v1099 : string = "&*$0"
    let v1100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1099 
    let v1101 : string = "inline_colorization::color_reset"
    let v1102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1101 
    let v1103 : string = "\"{v1098}{v1100}{v1102}\""
    let v1104 : string = @$"format!(" + v1103 + ")"
    let v1105 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1104 
    let v1106 : string = "fable_library_rust::String_::fromString($0)"
    let v1107 : string = Fable.Core.RustInterop.emitRustExpr v1105 v1106 
    v1107 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1122 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1116 : string = "inline_colorization::color_bright_red"
            let v1117 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1116 
            v1117
        | US0_1 -> (* Debug *)
            let v1110 : string = "inline_colorization::color_bright_blue"
            let v1111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1110 
            v1111
        | US0_2 -> (* Info *)
            let v1112 : string = "inline_colorization::color_bright_green"
            let v1113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1112 
            v1113
        | US0_0 -> (* Verbose *)
            let v1108 : string = "inline_colorization::color_bright_black"
            let v1109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1108 
            v1109
        | US0_3 -> (* Warning *)
            let v1114 : string = "inline_colorization::color_yellow"
            let v1115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1114 
            v1115
    let v1123 : string = "&*$0"
    let v1124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1123 
    let v1125 : string = "inline_colorization::color_reset"
    let v1126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1125 
    let v1127 : string = "\"{v1122}{v1124}{v1126}\""
    let v1128 : string = @$"format!(" + v1127 + ")"
    let v1129 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1128 
    let v1130 : string = "fable_library_rust::String_::fromString($0)"
    let v1131 : string = Fable.Core.RustInterop.emitRustExpr v1129 v1130 
    v1131 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1146 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1140 : string = "inline_colorization::color_bright_red"
            let v1141 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1140 
            v1141
        | US0_1 -> (* Debug *)
            let v1134 : string = "inline_colorization::color_bright_blue"
            let v1135 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1134 
            v1135
        | US0_2 -> (* Info *)
            let v1136 : string = "inline_colorization::color_bright_green"
            let v1137 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1136 
            v1137
        | US0_0 -> (* Verbose *)
            let v1132 : string = "inline_colorization::color_bright_black"
            let v1133 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1132 
            v1133
        | US0_3 -> (* Warning *)
            let v1138 : string = "inline_colorization::color_yellow"
            let v1139 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1138 
            v1139
    let v1147 : string = "&*$0"
    let v1148 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1147 
    let v1149 : string = "inline_colorization::color_reset"
    let v1150 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1149 
    let v1151 : string = "\"{v1146}{v1148}{v1150}\""
    let v1152 : string = @$"format!(" + v1151 + ")"
    let v1153 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1152 
    let v1154 : string = "fable_library_rust::String_::fromString($0)"
    let v1155 : string = Fable.Core.RustInterop.emitRustExpr v1153 v1154 
    v1155 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1165 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1160 : string = "\u001b[91m"
            v1160
        | US0_1 -> (* Debug *)
            let v1157 : string = "\u001b[94m"
            v1157
        | US0_2 -> (* Info *)
            let v1158 : string = "\u001b[92m"
            v1158
        | US0_0 -> (* Verbose *)
            let v1156 : string = "\u001b[90m"
            v1156
        | US0_3 -> (* Warning *)
            let v1159 : string = "\u001b[93m"
            v1159
    let v1166 : string = method8()
    let v1167 : string = v1165 + v1051 
    let v1168 : string = v1167 + v1166 
    v1168 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1178 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1173 : string = "\u001b[91m"
            v1173
        | US0_1 -> (* Debug *)
            let v1170 : string = "\u001b[94m"
            v1170
        | US0_2 -> (* Info *)
            let v1171 : string = "\u001b[92m"
            v1171
        | US0_0 -> (* Verbose *)
            let v1169 : string = "\u001b[90m"
            v1169
        | US0_3 -> (* Warning *)
            let v1172 : string = "\u001b[93m"
            v1172
    let v1179 : string = method8()
    let v1180 : string = v1178 + v1051 
    let v1181 : string = v1180 + v1179 
    v1181 
    #endif
#else
    let v1191 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1186 : string = "\u001b[91m"
            v1186
        | US0_1 -> (* Debug *)
            let v1183 : string = "\u001b[94m"
            v1183
        | US0_2 -> (* Info *)
            let v1184 : string = "\u001b[92m"
            v1184
        | US0_0 -> (* Verbose *)
            let v1182 : string = "\u001b[90m"
            v1182
        | US0_3 -> (* Warning *)
            let v1185 : string = "\u001b[93m"
            v1185
    let v1192 : string = method8()
    let v1193 : string = v1191 + v1051 
    let v1194 : string = v1193 + v1192 
    v1194 
    #endif
    |> fun x -> _v1083 <- Some x
    let v1195 : string = match _v1083 with Some x -> x | None -> failwith "base.run_target / _v1083=None"
    let v1214 : int64 = v14.l0
    let struct (v1215 : int32, v1216 : string, v1217 : string, v1218 : string) = v2 ()
    let v1219 : string = ""
    let v1220 : Mut4 = {l0 = v1219} : Mut4
    method184(v1220, v1215, v1216, v1217, v1218)
    let v1221 : string = v1220.l0
    let v1224 : string = $"{v826} {v1195} #{v1214} %s{v1 ()} / {v1221}"
    let v1231 : char list = []
    let v1236 : (char list -> (char [])) = List.toArray
    let v1237 : (char []) = v1236 v1231
    let v1244 : string = v1224.TrimStart v1237 
    let v1283 : char list = []
    let v1286 : char list = '/' :: v1283 
    let v1295 : char list = ' ' :: v1286 
    let v1306 : (char list -> (char [])) = List.toArray
    let v1307 : (char []) = v1306 v1295
    let v1314 : string = v1244.TrimEnd v1307 
    v1314
and method183 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * string * string * string))) : unit =
    let v3 : (unit -> string) = closure117(v0, v1, v2)
    method13(v0, v3)
and closure118 () () : string =
    let v0 : string = "spiral_builder.process_rust / wasm error"
    v0
and closure119 (v0 : string, v1 : string, v2 : string, v3 : int32) () : struct (int32 * string * string * string) =
    struct (v3, v2, v1, v0)
and method186 (v0 : Mut4, v1 : int32, v2 : string, v3 : string, v4 : string) : unit =
    let v5 : string = "{ "
    method10(v0, v5)
    method11(v0)
    let v6 : string = "exit_code"
    method10(v0, v6)
    let v7 : string = " = "
    method10(v0, v7)
    method110(v0, v1)
    let v8 : string = "; "
    method10(v0, v8)
    let v9 : string = "spiral_wasm_result"
    method10(v0, v9)
    method10(v0, v7)
    method10(v0, v2)
    method10(v0, v8)
    let v10 : string = "cargo_result"
    method10(v0, v10)
    method10(v0, v7)
    method10(v0, v3)
    method10(v0, v8)
    let v11 : string = "new_code_path"
    method10(v0, v11)
    method10(v0, v7)
    method10(v0, v4)
    let v12 : string = " }"
    method10(v0, v12)
and closure120 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * string * string * string))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = $"near_sdk::env::block_timestamp()"
    let v331 : uint64 = Fable.Core.RustInterop.emitRustExpr () v330 
    let v334 : US2 option = None
    let _v334 = ref v334 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v335 : int64 = x
    let v336 : US2 = US2_0(v335)
    v336 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v334.Value <- x
    let v337 : US2 option = _v334.Value 
    let v360 : US2 = US2_1
    let v361 : US2 = v337 |> Option.defaultValue v360 
    let v374 : uint64 =
        match v361 with
        | US2_1 -> (* None *)
            v331
        | US2_0(v369) -> (* Some *)
            let v370 : (int64 -> uint64) = uint64
            let v371 : uint64 = v370 v369
            let v372 : uint64 = v331 - v371
            v372
    let v375 : uint64 = v374 / 1000000000UL
    let v376 : uint64 = v375 % 60UL
    let v377 : uint64 = v375 / 60UL
    let v378 : uint64 = v377 % 60UL
    let v379 : uint64 = v375 / 3600UL
    let v380 : uint64 = v379 % 24UL
    let v381 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v382 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v380, v378, v376) v381 
    let v383 : string = "fable_library_rust::String_::fromString($0)"
    let v384 : string = Fable.Core.RustInterop.emitRustExpr v382 v383 
    v384 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v387 : US2 option = None
    let _v387 = ref v387 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v388 : int64 = x
    let v389 : US2 = US2_0(v388)
    v389 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v387.Value <- x
    let v390 : US2 option = _v387.Value 
    let v413 : US2 = US2_1
    let v414 : US2 = v390 |> Option.defaultValue v413 
    let v512 : System.DateTime =
        match v414 with
        | US2_1 -> (* None *)
            let v504 : System.DateTime = System.DateTime.Now
            v504
        | US2_0(v422) -> (* Some *)
            let v425 : System.DateTime = System.DateTime.Now
            let v434 : (System.DateTime -> int64) = _.Ticks
            let v435 : int64 = v434 v425
            let v442 : int64 = v435 - v422
            let v445 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v446 : System.TimeSpan = v445 v442
            let v455 : (System.TimeSpan -> int32) = _.Hours
            let v456 : int32 = v455 v446
            let v465 : (System.TimeSpan -> int32) = _.Minutes
            let v466 : int32 = v465 v446
            let v475 : (System.TimeSpan -> int32) = _.Seconds
            let v476 : int32 = v475 v446
            let v485 : (System.TimeSpan -> int32) = _.Milliseconds
            let v486 : int32 = v485 v446
            let v495 : System.DateTime = System.DateTime (1, 1, 1, v456, v466, v476, v486)
            v495
    let v515 : string = method7()
    let v524 : (string -> string) = v512.ToString
    let v525 : string = v524 v515
    v525 
    #endif
#if FABLE_COMPILER_PYTHON
    let v534 : US2 option = None
    let _v534 = ref v534 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v535 : int64 = x
    let v536 : US2 = US2_0(v535)
    v536 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v534.Value <- x
    let v537 : US2 option = _v534.Value 
    let v560 : US2 = US2_1
    let v561 : US2 = v537 |> Option.defaultValue v560 
    let v659 : System.DateTime =
        match v561 with
        | US2_1 -> (* None *)
            let v651 : System.DateTime = System.DateTime.Now
            v651
        | US2_0(v569) -> (* Some *)
            let v572 : System.DateTime = System.DateTime.Now
            let v581 : (System.DateTime -> int64) = _.Ticks
            let v582 : int64 = v581 v572
            let v589 : int64 = v582 - v569
            let v592 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v593 : System.TimeSpan = v592 v589
            let v602 : (System.TimeSpan -> int32) = _.Hours
            let v603 : int32 = v602 v593
            let v612 : (System.TimeSpan -> int32) = _.Minutes
            let v613 : int32 = v612 v593
            let v622 : (System.TimeSpan -> int32) = _.Seconds
            let v623 : int32 = v622 v593
            let v632 : (System.TimeSpan -> int32) = _.Milliseconds
            let v633 : int32 = v632 v593
            let v642 : System.DateTime = System.DateTime (1, 1, 1, v603, v613, v623, v633)
            v642
    let v662 : string = method7()
    let v671 : (string -> string) = v659.ToString
    let v672 : string = v671 v662
    v672 
    #endif
#else
    let v681 : US2 option = None
    let _v681 = ref v681 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v682 : int64 = x
    let v683 : US2 = US2_0(v682)
    v683 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v681.Value <- x
    let v684 : US2 option = _v681.Value 
    let v707 : US2 = US2_1
    let v708 : US2 = v684 |> Option.defaultValue v707 
    let v806 : System.DateTime =
        match v708 with
        | US2_1 -> (* None *)
            let v798 : System.DateTime = System.DateTime.Now
            v798
        | US2_0(v716) -> (* Some *)
            let v719 : System.DateTime = System.DateTime.Now
            let v728 : (System.DateTime -> int64) = _.Ticks
            let v729 : int64 = v728 v719
            let v736 : int64 = v729 - v716
            let v739 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v740 : System.TimeSpan = v739 v736
            let v749 : (System.TimeSpan -> int32) = _.Hours
            let v750 : int32 = v749 v740
            let v759 : (System.TimeSpan -> int32) = _.Minutes
            let v760 : int32 = v759 v740
            let v769 : (System.TimeSpan -> int32) = _.Seconds
            let v770 : int32 = v769 v740
            let v779 : (System.TimeSpan -> int32) = _.Milliseconds
            let v780 : int32 = v779 v740
            let v789 : System.DateTime = System.DateTime (1, 1, 1, v750, v760, v770, v780)
            v789
    let v809 : string = method7()
    let v818 : (string -> string) = v806.ToString
    let v819 : string = v818 v809
    v819 
    #endif
    |> fun x -> _v35 <- Some x
    let v826 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v981 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v985 : US3 =
        if v981 then
            let v982 : string = "Verbose"
            US3_0(v982)
        else
            US3_1
    let v1034 : US3 =
        match v985 with
        | US3_1 -> (* None *)
            let v990 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v994 : US3 =
                if v990 then
                    let v991 : string = "Debug"
                    US3_0(v991)
                else
                    US3_1
            match v994 with
            | US3_1 -> (* None *)
                let v999 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v1003 : US3 =
                    if v999 then
                        let v1000 : string = "Info"
                        US3_0(v1000)
                    else
                        US3_1
                match v1003 with
                | US3_1 -> (* None *)
                    let v1008 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v1012 : US3 =
                        if v1008 then
                            let v1009 : string = "Warning"
                            US3_0(v1009)
                        else
                            US3_1
                    match v1012 with
                    | US3_1 -> (* None *)
                        let v1017 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v1021 : US3 =
                            if v1017 then
                                let v1018 : string = "Critical"
                                US3_0(v1018)
                            else
                                US3_1
                        match v1021 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v1022) -> (* Some *)
                            US3_0(v1022)
                    | US3_0(v1013) -> (* Some *)
                        US3_0(v1013)
                | US3_0(v1004) -> (* Some *)
                    US3_0(v1004)
            | US3_0(v995) -> (* Some *)
                US3_0(v995)
        | US3_0(v986) -> (* Some *)
            US3_0(v986)
    let v1038 : string =
        match v1034 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v1035) -> (* Some *)
            v1035
    let v1041 : (unit -> string) = v1038.ToLower
    let v1042 : string = v1041 ()
    let v1051 : string = v1042.PadLeft (7, ' ')
    let v1083 : bool = true
    let mutable _v1083 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1098 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1092 : string = "inline_colorization::color_bright_red"
            let v1093 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1092 
            v1093
        | US0_1 -> (* Debug *)
            let v1086 : string = "inline_colorization::color_bright_blue"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_2 -> (* Info *)
            let v1088 : string = "inline_colorization::color_bright_green"
            let v1089 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1088 
            v1089
        | US0_0 -> (* Verbose *)
            let v1084 : string = "inline_colorization::color_bright_black"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
        | US0_3 -> (* Warning *)
            let v1090 : string = "inline_colorization::color_yellow"
            let v1091 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1090 
            v1091
    let v1099 : string = "&*$0"
    let v1100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1099 
    let v1101 : string = "inline_colorization::color_reset"
    let v1102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1101 
    let v1103 : string = "\"{v1098}{v1100}{v1102}\""
    let v1104 : string = @$"format!(" + v1103 + ")"
    let v1105 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1104 
    let v1106 : string = "fable_library_rust::String_::fromString($0)"
    let v1107 : string = Fable.Core.RustInterop.emitRustExpr v1105 v1106 
    v1107 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1122 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1116 : string = "inline_colorization::color_bright_red"
            let v1117 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1116 
            v1117
        | US0_1 -> (* Debug *)
            let v1110 : string = "inline_colorization::color_bright_blue"
            let v1111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1110 
            v1111
        | US0_2 -> (* Info *)
            let v1112 : string = "inline_colorization::color_bright_green"
            let v1113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1112 
            v1113
        | US0_0 -> (* Verbose *)
            let v1108 : string = "inline_colorization::color_bright_black"
            let v1109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1108 
            v1109
        | US0_3 -> (* Warning *)
            let v1114 : string = "inline_colorization::color_yellow"
            let v1115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1114 
            v1115
    let v1123 : string = "&*$0"
    let v1124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1123 
    let v1125 : string = "inline_colorization::color_reset"
    let v1126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1125 
    let v1127 : string = "\"{v1122}{v1124}{v1126}\""
    let v1128 : string = @$"format!(" + v1127 + ")"
    let v1129 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1128 
    let v1130 : string = "fable_library_rust::String_::fromString($0)"
    let v1131 : string = Fable.Core.RustInterop.emitRustExpr v1129 v1130 
    v1131 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1146 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1140 : string = "inline_colorization::color_bright_red"
            let v1141 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1140 
            v1141
        | US0_1 -> (* Debug *)
            let v1134 : string = "inline_colorization::color_bright_blue"
            let v1135 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1134 
            v1135
        | US0_2 -> (* Info *)
            let v1136 : string = "inline_colorization::color_bright_green"
            let v1137 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1136 
            v1137
        | US0_0 -> (* Verbose *)
            let v1132 : string = "inline_colorization::color_bright_black"
            let v1133 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1132 
            v1133
        | US0_3 -> (* Warning *)
            let v1138 : string = "inline_colorization::color_yellow"
            let v1139 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1138 
            v1139
    let v1147 : string = "&*$0"
    let v1148 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1147 
    let v1149 : string = "inline_colorization::color_reset"
    let v1150 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1149 
    let v1151 : string = "\"{v1146}{v1148}{v1150}\""
    let v1152 : string = @$"format!(" + v1151 + ")"
    let v1153 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1152 
    let v1154 : string = "fable_library_rust::String_::fromString($0)"
    let v1155 : string = Fable.Core.RustInterop.emitRustExpr v1153 v1154 
    v1155 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1165 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1160 : string = "\u001b[91m"
            v1160
        | US0_1 -> (* Debug *)
            let v1157 : string = "\u001b[94m"
            v1157
        | US0_2 -> (* Info *)
            let v1158 : string = "\u001b[92m"
            v1158
        | US0_0 -> (* Verbose *)
            let v1156 : string = "\u001b[90m"
            v1156
        | US0_3 -> (* Warning *)
            let v1159 : string = "\u001b[93m"
            v1159
    let v1166 : string = method8()
    let v1167 : string = v1165 + v1051 
    let v1168 : string = v1167 + v1166 
    v1168 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1178 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1173 : string = "\u001b[91m"
            v1173
        | US0_1 -> (* Debug *)
            let v1170 : string = "\u001b[94m"
            v1170
        | US0_2 -> (* Info *)
            let v1171 : string = "\u001b[92m"
            v1171
        | US0_0 -> (* Verbose *)
            let v1169 : string = "\u001b[90m"
            v1169
        | US0_3 -> (* Warning *)
            let v1172 : string = "\u001b[93m"
            v1172
    let v1179 : string = method8()
    let v1180 : string = v1178 + v1051 
    let v1181 : string = v1180 + v1179 
    v1181 
    #endif
#else
    let v1191 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1186 : string = "\u001b[91m"
            v1186
        | US0_1 -> (* Debug *)
            let v1183 : string = "\u001b[94m"
            v1183
        | US0_2 -> (* Info *)
            let v1184 : string = "\u001b[92m"
            v1184
        | US0_0 -> (* Verbose *)
            let v1182 : string = "\u001b[90m"
            v1182
        | US0_3 -> (* Warning *)
            let v1185 : string = "\u001b[93m"
            v1185
    let v1192 : string = method8()
    let v1193 : string = v1191 + v1051 
    let v1194 : string = v1193 + v1192 
    v1194 
    #endif
    |> fun x -> _v1083 <- Some x
    let v1195 : string = match _v1083 with Some x -> x | None -> failwith "base.run_target / _v1083=None"
    let v1214 : int64 = v14.l0
    let struct (v1215 : int32, v1216 : string, v1217 : string, v1218 : string) = v2 ()
    let v1219 : string = ""
    let v1220 : Mut4 = {l0 = v1219} : Mut4
    method186(v1220, v1215, v1216, v1217, v1218)
    let v1221 : string = v1220.l0
    let v1224 : string = $"{v826} {v1195} #{v1214} %s{v1 ()} / {v1221}"
    let v1231 : char list = []
    let v1236 : (char list -> (char [])) = List.toArray
    let v1237 : (char []) = v1236 v1231
    let v1244 : string = v1224.TrimStart v1237 
    let v1283 : char list = []
    let v1286 : char list = '/' :: v1283 
    let v1295 : char list = ' ' :: v1286 
    let v1306 : (char list -> (char [])) = List.toArray
    let v1307 : (char []) = v1306 v1295
    let v1314 : string = v1244.TrimEnd v1307 
    v1314
and method185 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * string * string * string))) : unit =
    let v3 : (unit -> string) = closure120(v0, v1, v2)
    method13(v0, v3)
and closure121 () () : string =
    let v0 : string = "spiral_builder.process_rust / error"
    v0
and closure122 (v0 : string, v1 : string, v2 : int32, v3 : string, v4 : string) () : struct (int32 * string * string * string * string) =
    struct (v2, v1, v0, v3, v4)
and method188 (v0 : Mut4, v1 : int32, v2 : string, v3 : string, v4 : string, v5 : string) : unit =
    let v6 : string = "{ "
    method10(v0, v6)
    method11(v0)
    let v7 : string = "exit_code"
    method10(v0, v7)
    let v8 : string = " = "
    method10(v0, v8)
    method110(v0, v1)
    let v9 : string = "; "
    method10(v0, v9)
    let v10 : string = "cargo_result"
    method10(v0, v10)
    method10(v0, v8)
    method10(v0, v2)
    method10(v0, v9)
    let v11 : string = "new_code_path"
    method10(v0, v11)
    method10(v0, v8)
    method10(v0, v3)
    method10(v0, v9)
    let v12 : string = "wasm_path"
    method10(v0, v12)
    method10(v0, v8)
    method10(v0, v4)
    method10(v0, v9)
    let v13 : string = "command"
    method10(v0, v13)
    method10(v0, v8)
    method10(v0, v5)
    let v14 : string = " }"
    method10(v0, v14)
and closure123 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * string * string * string * string))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = $"near_sdk::env::block_timestamp()"
    let v331 : uint64 = Fable.Core.RustInterop.emitRustExpr () v330 
    let v334 : US2 option = None
    let _v334 = ref v334 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v335 : int64 = x
    let v336 : US2 = US2_0(v335)
    v336 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v334.Value <- x
    let v337 : US2 option = _v334.Value 
    let v360 : US2 = US2_1
    let v361 : US2 = v337 |> Option.defaultValue v360 
    let v374 : uint64 =
        match v361 with
        | US2_1 -> (* None *)
            v331
        | US2_0(v369) -> (* Some *)
            let v370 : (int64 -> uint64) = uint64
            let v371 : uint64 = v370 v369
            let v372 : uint64 = v331 - v371
            v372
    let v375 : uint64 = v374 / 1000000000UL
    let v376 : uint64 = v375 % 60UL
    let v377 : uint64 = v375 / 60UL
    let v378 : uint64 = v377 % 60UL
    let v379 : uint64 = v375 / 3600UL
    let v380 : uint64 = v379 % 24UL
    let v381 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v382 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v380, v378, v376) v381 
    let v383 : string = "fable_library_rust::String_::fromString($0)"
    let v384 : string = Fable.Core.RustInterop.emitRustExpr v382 v383 
    v384 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v387 : US2 option = None
    let _v387 = ref v387 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v388 : int64 = x
    let v389 : US2 = US2_0(v388)
    v389 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v387.Value <- x
    let v390 : US2 option = _v387.Value 
    let v413 : US2 = US2_1
    let v414 : US2 = v390 |> Option.defaultValue v413 
    let v512 : System.DateTime =
        match v414 with
        | US2_1 -> (* None *)
            let v504 : System.DateTime = System.DateTime.Now
            v504
        | US2_0(v422) -> (* Some *)
            let v425 : System.DateTime = System.DateTime.Now
            let v434 : (System.DateTime -> int64) = _.Ticks
            let v435 : int64 = v434 v425
            let v442 : int64 = v435 - v422
            let v445 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v446 : System.TimeSpan = v445 v442
            let v455 : (System.TimeSpan -> int32) = _.Hours
            let v456 : int32 = v455 v446
            let v465 : (System.TimeSpan -> int32) = _.Minutes
            let v466 : int32 = v465 v446
            let v475 : (System.TimeSpan -> int32) = _.Seconds
            let v476 : int32 = v475 v446
            let v485 : (System.TimeSpan -> int32) = _.Milliseconds
            let v486 : int32 = v485 v446
            let v495 : System.DateTime = System.DateTime (1, 1, 1, v456, v466, v476, v486)
            v495
    let v515 : string = method7()
    let v524 : (string -> string) = v512.ToString
    let v525 : string = v524 v515
    v525 
    #endif
#if FABLE_COMPILER_PYTHON
    let v534 : US2 option = None
    let _v534 = ref v534 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v535 : int64 = x
    let v536 : US2 = US2_0(v535)
    v536 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v534.Value <- x
    let v537 : US2 option = _v534.Value 
    let v560 : US2 = US2_1
    let v561 : US2 = v537 |> Option.defaultValue v560 
    let v659 : System.DateTime =
        match v561 with
        | US2_1 -> (* None *)
            let v651 : System.DateTime = System.DateTime.Now
            v651
        | US2_0(v569) -> (* Some *)
            let v572 : System.DateTime = System.DateTime.Now
            let v581 : (System.DateTime -> int64) = _.Ticks
            let v582 : int64 = v581 v572
            let v589 : int64 = v582 - v569
            let v592 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v593 : System.TimeSpan = v592 v589
            let v602 : (System.TimeSpan -> int32) = _.Hours
            let v603 : int32 = v602 v593
            let v612 : (System.TimeSpan -> int32) = _.Minutes
            let v613 : int32 = v612 v593
            let v622 : (System.TimeSpan -> int32) = _.Seconds
            let v623 : int32 = v622 v593
            let v632 : (System.TimeSpan -> int32) = _.Milliseconds
            let v633 : int32 = v632 v593
            let v642 : System.DateTime = System.DateTime (1, 1, 1, v603, v613, v623, v633)
            v642
    let v662 : string = method7()
    let v671 : (string -> string) = v659.ToString
    let v672 : string = v671 v662
    v672 
    #endif
#else
    let v681 : US2 option = None
    let _v681 = ref v681 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v682 : int64 = x
    let v683 : US2 = US2_0(v682)
    v683 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v681.Value <- x
    let v684 : US2 option = _v681.Value 
    let v707 : US2 = US2_1
    let v708 : US2 = v684 |> Option.defaultValue v707 
    let v806 : System.DateTime =
        match v708 with
        | US2_1 -> (* None *)
            let v798 : System.DateTime = System.DateTime.Now
            v798
        | US2_0(v716) -> (* Some *)
            let v719 : System.DateTime = System.DateTime.Now
            let v728 : (System.DateTime -> int64) = _.Ticks
            let v729 : int64 = v728 v719
            let v736 : int64 = v729 - v716
            let v739 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v740 : System.TimeSpan = v739 v736
            let v749 : (System.TimeSpan -> int32) = _.Hours
            let v750 : int32 = v749 v740
            let v759 : (System.TimeSpan -> int32) = _.Minutes
            let v760 : int32 = v759 v740
            let v769 : (System.TimeSpan -> int32) = _.Seconds
            let v770 : int32 = v769 v740
            let v779 : (System.TimeSpan -> int32) = _.Milliseconds
            let v780 : int32 = v779 v740
            let v789 : System.DateTime = System.DateTime (1, 1, 1, v750, v760, v770, v780)
            v789
    let v809 : string = method7()
    let v818 : (string -> string) = v806.ToString
    let v819 : string = v818 v809
    v819 
    #endif
    |> fun x -> _v35 <- Some x
    let v826 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v981 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v985 : US3 =
        if v981 then
            let v982 : string = "Verbose"
            US3_0(v982)
        else
            US3_1
    let v1034 : US3 =
        match v985 with
        | US3_1 -> (* None *)
            let v990 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v994 : US3 =
                if v990 then
                    let v991 : string = "Debug"
                    US3_0(v991)
                else
                    US3_1
            match v994 with
            | US3_1 -> (* None *)
                let v999 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v1003 : US3 =
                    if v999 then
                        let v1000 : string = "Info"
                        US3_0(v1000)
                    else
                        US3_1
                match v1003 with
                | US3_1 -> (* None *)
                    let v1008 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v1012 : US3 =
                        if v1008 then
                            let v1009 : string = "Warning"
                            US3_0(v1009)
                        else
                            US3_1
                    match v1012 with
                    | US3_1 -> (* None *)
                        let v1017 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v1021 : US3 =
                            if v1017 then
                                let v1018 : string = "Critical"
                                US3_0(v1018)
                            else
                                US3_1
                        match v1021 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v1022) -> (* Some *)
                            US3_0(v1022)
                    | US3_0(v1013) -> (* Some *)
                        US3_0(v1013)
                | US3_0(v1004) -> (* Some *)
                    US3_0(v1004)
            | US3_0(v995) -> (* Some *)
                US3_0(v995)
        | US3_0(v986) -> (* Some *)
            US3_0(v986)
    let v1038 : string =
        match v1034 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v1035) -> (* Some *)
            v1035
    let v1041 : (unit -> string) = v1038.ToLower
    let v1042 : string = v1041 ()
    let v1051 : string = v1042.PadLeft (7, ' ')
    let v1083 : bool = true
    let mutable _v1083 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1098 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1092 : string = "inline_colorization::color_bright_red"
            let v1093 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1092 
            v1093
        | US0_1 -> (* Debug *)
            let v1086 : string = "inline_colorization::color_bright_blue"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_2 -> (* Info *)
            let v1088 : string = "inline_colorization::color_bright_green"
            let v1089 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1088 
            v1089
        | US0_0 -> (* Verbose *)
            let v1084 : string = "inline_colorization::color_bright_black"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
        | US0_3 -> (* Warning *)
            let v1090 : string = "inline_colorization::color_yellow"
            let v1091 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1090 
            v1091
    let v1099 : string = "&*$0"
    let v1100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1099 
    let v1101 : string = "inline_colorization::color_reset"
    let v1102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1101 
    let v1103 : string = "\"{v1098}{v1100}{v1102}\""
    let v1104 : string = @$"format!(" + v1103 + ")"
    let v1105 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1104 
    let v1106 : string = "fable_library_rust::String_::fromString($0)"
    let v1107 : string = Fable.Core.RustInterop.emitRustExpr v1105 v1106 
    v1107 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1122 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1116 : string = "inline_colorization::color_bright_red"
            let v1117 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1116 
            v1117
        | US0_1 -> (* Debug *)
            let v1110 : string = "inline_colorization::color_bright_blue"
            let v1111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1110 
            v1111
        | US0_2 -> (* Info *)
            let v1112 : string = "inline_colorization::color_bright_green"
            let v1113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1112 
            v1113
        | US0_0 -> (* Verbose *)
            let v1108 : string = "inline_colorization::color_bright_black"
            let v1109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1108 
            v1109
        | US0_3 -> (* Warning *)
            let v1114 : string = "inline_colorization::color_yellow"
            let v1115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1114 
            v1115
    let v1123 : string = "&*$0"
    let v1124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1123 
    let v1125 : string = "inline_colorization::color_reset"
    let v1126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1125 
    let v1127 : string = "\"{v1122}{v1124}{v1126}\""
    let v1128 : string = @$"format!(" + v1127 + ")"
    let v1129 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1128 
    let v1130 : string = "fable_library_rust::String_::fromString($0)"
    let v1131 : string = Fable.Core.RustInterop.emitRustExpr v1129 v1130 
    v1131 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1146 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1140 : string = "inline_colorization::color_bright_red"
            let v1141 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1140 
            v1141
        | US0_1 -> (* Debug *)
            let v1134 : string = "inline_colorization::color_bright_blue"
            let v1135 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1134 
            v1135
        | US0_2 -> (* Info *)
            let v1136 : string = "inline_colorization::color_bright_green"
            let v1137 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1136 
            v1137
        | US0_0 -> (* Verbose *)
            let v1132 : string = "inline_colorization::color_bright_black"
            let v1133 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1132 
            v1133
        | US0_3 -> (* Warning *)
            let v1138 : string = "inline_colorization::color_yellow"
            let v1139 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1138 
            v1139
    let v1147 : string = "&*$0"
    let v1148 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1147 
    let v1149 : string = "inline_colorization::color_reset"
    let v1150 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1149 
    let v1151 : string = "\"{v1146}{v1148}{v1150}\""
    let v1152 : string = @$"format!(" + v1151 + ")"
    let v1153 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1152 
    let v1154 : string = "fable_library_rust::String_::fromString($0)"
    let v1155 : string = Fable.Core.RustInterop.emitRustExpr v1153 v1154 
    v1155 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1165 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1160 : string = "\u001b[91m"
            v1160
        | US0_1 -> (* Debug *)
            let v1157 : string = "\u001b[94m"
            v1157
        | US0_2 -> (* Info *)
            let v1158 : string = "\u001b[92m"
            v1158
        | US0_0 -> (* Verbose *)
            let v1156 : string = "\u001b[90m"
            v1156
        | US0_3 -> (* Warning *)
            let v1159 : string = "\u001b[93m"
            v1159
    let v1166 : string = method8()
    let v1167 : string = v1165 + v1051 
    let v1168 : string = v1167 + v1166 
    v1168 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1178 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1173 : string = "\u001b[91m"
            v1173
        | US0_1 -> (* Debug *)
            let v1170 : string = "\u001b[94m"
            v1170
        | US0_2 -> (* Info *)
            let v1171 : string = "\u001b[92m"
            v1171
        | US0_0 -> (* Verbose *)
            let v1169 : string = "\u001b[90m"
            v1169
        | US0_3 -> (* Warning *)
            let v1172 : string = "\u001b[93m"
            v1172
    let v1179 : string = method8()
    let v1180 : string = v1178 + v1051 
    let v1181 : string = v1180 + v1179 
    v1181 
    #endif
#else
    let v1191 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1186 : string = "\u001b[91m"
            v1186
        | US0_1 -> (* Debug *)
            let v1183 : string = "\u001b[94m"
            v1183
        | US0_2 -> (* Info *)
            let v1184 : string = "\u001b[92m"
            v1184
        | US0_0 -> (* Verbose *)
            let v1182 : string = "\u001b[90m"
            v1182
        | US0_3 -> (* Warning *)
            let v1185 : string = "\u001b[93m"
            v1185
    let v1192 : string = method8()
    let v1193 : string = v1191 + v1051 
    let v1194 : string = v1193 + v1192 
    v1194 
    #endif
    |> fun x -> _v1083 <- Some x
    let v1195 : string = match _v1083 with Some x -> x | None -> failwith "base.run_target / _v1083=None"
    let v1214 : int64 = v14.l0
    let struct (v1215 : int32, v1216 : string, v1217 : string, v1218 : string, v1219 : string) = v2 ()
    let v1220 : string = ""
    let v1221 : Mut4 = {l0 = v1220} : Mut4
    method188(v1221, v1215, v1216, v1217, v1218, v1219)
    let v1222 : string = v1221.l0
    let v1225 : string = $"{v826} {v1195} #{v1214} %s{v1 ()} / {v1222}"
    let v1232 : char list = []
    let v1237 : (char list -> (char [])) = List.toArray
    let v1238 : (char []) = v1237 v1232
    let v1245 : string = v1225.TrimStart v1238 
    let v1284 : char list = []
    let v1287 : char list = '/' :: v1284 
    let v1296 : char list = ' ' :: v1287 
    let v1307 : (char list -> (char [])) = List.toArray
    let v1308 : (char []) = v1307 v1296
    let v1315 : string = v1245.TrimEnd v1308 
    v1315
and method187 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (int32 * string * string * string * string))) : unit =
    let v3 : (unit -> string) = closure123(v0, v1, v2)
    method13(v0, v3)
and closure124 () () : string =
    let v0 : string = "spiral_builder.process_rust / cleanup"
    v0
and closure125 (v0 : string, v1 : string, v2 : bool, v3 : string, v4 : bool, v5 : string, v6 : bool, v7 : string, v8 : bool, v9 : string, v10 : bool) () : struct (string * UH4) =
    let v11 : UH4 = UH4_0
    let v12 : UH4 = UH4_1(v9, v10, v11)
    let v13 : UH4 = UH4_1(v7, v8, v12)
    let v14 : UH4 = UH4_1(v5, v6, v13)
    let v15 : UH4 = UH4_1(v3, v4, v14)
    let v16 : UH4 = UH4_1(v1, v2, v15)
    struct (v0, v16)
and method191 (v0 : Mut4, v1 : UH4) : unit =
    let v4 : string = $"%A{v1}"
    method10(v0, v4)
and method190 (v0 : Mut4, v1 : string, v2 : UH4) : unit =
    let v3 : string = "{ "
    method10(v0, v3)
    method11(v0)
    let v4 : string = "new_code_path"
    method10(v0, v4)
    let v5 : string = " = "
    method10(v0, v5)
    method10(v0, v1)
    let v6 : string = "; "
    method10(v0, v6)
    let v7 : string = "cleanup"
    method10(v0, v7)
    method10(v0, v5)
    method191(v0, v2)
    let v8 : string = " }"
    method10(v0, v8)
and closure126 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (string * UH4))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = $"near_sdk::env::block_timestamp()"
    let v331 : uint64 = Fable.Core.RustInterop.emitRustExpr () v330 
    let v334 : US2 option = None
    let _v334 = ref v334 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v335 : int64 = x
    let v336 : US2 = US2_0(v335)
    v336 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v334.Value <- x
    let v337 : US2 option = _v334.Value 
    let v360 : US2 = US2_1
    let v361 : US2 = v337 |> Option.defaultValue v360 
    let v374 : uint64 =
        match v361 with
        | US2_1 -> (* None *)
            v331
        | US2_0(v369) -> (* Some *)
            let v370 : (int64 -> uint64) = uint64
            let v371 : uint64 = v370 v369
            let v372 : uint64 = v331 - v371
            v372
    let v375 : uint64 = v374 / 1000000000UL
    let v376 : uint64 = v375 % 60UL
    let v377 : uint64 = v375 / 60UL
    let v378 : uint64 = v377 % 60UL
    let v379 : uint64 = v375 / 3600UL
    let v380 : uint64 = v379 % 24UL
    let v381 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v382 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v380, v378, v376) v381 
    let v383 : string = "fable_library_rust::String_::fromString($0)"
    let v384 : string = Fable.Core.RustInterop.emitRustExpr v382 v383 
    v384 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v387 : US2 option = None
    let _v387 = ref v387 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v388 : int64 = x
    let v389 : US2 = US2_0(v388)
    v389 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v387.Value <- x
    let v390 : US2 option = _v387.Value 
    let v413 : US2 = US2_1
    let v414 : US2 = v390 |> Option.defaultValue v413 
    let v512 : System.DateTime =
        match v414 with
        | US2_1 -> (* None *)
            let v504 : System.DateTime = System.DateTime.Now
            v504
        | US2_0(v422) -> (* Some *)
            let v425 : System.DateTime = System.DateTime.Now
            let v434 : (System.DateTime -> int64) = _.Ticks
            let v435 : int64 = v434 v425
            let v442 : int64 = v435 - v422
            let v445 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v446 : System.TimeSpan = v445 v442
            let v455 : (System.TimeSpan -> int32) = _.Hours
            let v456 : int32 = v455 v446
            let v465 : (System.TimeSpan -> int32) = _.Minutes
            let v466 : int32 = v465 v446
            let v475 : (System.TimeSpan -> int32) = _.Seconds
            let v476 : int32 = v475 v446
            let v485 : (System.TimeSpan -> int32) = _.Milliseconds
            let v486 : int32 = v485 v446
            let v495 : System.DateTime = System.DateTime (1, 1, 1, v456, v466, v476, v486)
            v495
    let v515 : string = method7()
    let v524 : (string -> string) = v512.ToString
    let v525 : string = v524 v515
    v525 
    #endif
#if FABLE_COMPILER_PYTHON
    let v534 : US2 option = None
    let _v534 = ref v534 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v535 : int64 = x
    let v536 : US2 = US2_0(v535)
    v536 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v534.Value <- x
    let v537 : US2 option = _v534.Value 
    let v560 : US2 = US2_1
    let v561 : US2 = v537 |> Option.defaultValue v560 
    let v659 : System.DateTime =
        match v561 with
        | US2_1 -> (* None *)
            let v651 : System.DateTime = System.DateTime.Now
            v651
        | US2_0(v569) -> (* Some *)
            let v572 : System.DateTime = System.DateTime.Now
            let v581 : (System.DateTime -> int64) = _.Ticks
            let v582 : int64 = v581 v572
            let v589 : int64 = v582 - v569
            let v592 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v593 : System.TimeSpan = v592 v589
            let v602 : (System.TimeSpan -> int32) = _.Hours
            let v603 : int32 = v602 v593
            let v612 : (System.TimeSpan -> int32) = _.Minutes
            let v613 : int32 = v612 v593
            let v622 : (System.TimeSpan -> int32) = _.Seconds
            let v623 : int32 = v622 v593
            let v632 : (System.TimeSpan -> int32) = _.Milliseconds
            let v633 : int32 = v632 v593
            let v642 : System.DateTime = System.DateTime (1, 1, 1, v603, v613, v623, v633)
            v642
    let v662 : string = method7()
    let v671 : (string -> string) = v659.ToString
    let v672 : string = v671 v662
    v672 
    #endif
#else
    let v681 : US2 option = None
    let _v681 = ref v681 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v682 : int64 = x
    let v683 : US2 = US2_0(v682)
    v683 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v681.Value <- x
    let v684 : US2 option = _v681.Value 
    let v707 : US2 = US2_1
    let v708 : US2 = v684 |> Option.defaultValue v707 
    let v806 : System.DateTime =
        match v708 with
        | US2_1 -> (* None *)
            let v798 : System.DateTime = System.DateTime.Now
            v798
        | US2_0(v716) -> (* Some *)
            let v719 : System.DateTime = System.DateTime.Now
            let v728 : (System.DateTime -> int64) = _.Ticks
            let v729 : int64 = v728 v719
            let v736 : int64 = v729 - v716
            let v739 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v740 : System.TimeSpan = v739 v736
            let v749 : (System.TimeSpan -> int32) = _.Hours
            let v750 : int32 = v749 v740
            let v759 : (System.TimeSpan -> int32) = _.Minutes
            let v760 : int32 = v759 v740
            let v769 : (System.TimeSpan -> int32) = _.Seconds
            let v770 : int32 = v769 v740
            let v779 : (System.TimeSpan -> int32) = _.Milliseconds
            let v780 : int32 = v779 v740
            let v789 : System.DateTime = System.DateTime (1, 1, 1, v750, v760, v770, v780)
            v789
    let v809 : string = method7()
    let v818 : (string -> string) = v806.ToString
    let v819 : string = v818 v809
    v819 
    #endif
    |> fun x -> _v35 <- Some x
    let v826 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v981 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v985 : US3 =
        if v981 then
            let v982 : string = "Verbose"
            US3_0(v982)
        else
            US3_1
    let v1034 : US3 =
        match v985 with
        | US3_1 -> (* None *)
            let v990 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v994 : US3 =
                if v990 then
                    let v991 : string = "Debug"
                    US3_0(v991)
                else
                    US3_1
            match v994 with
            | US3_1 -> (* None *)
                let v999 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v1003 : US3 =
                    if v999 then
                        let v1000 : string = "Info"
                        US3_0(v1000)
                    else
                        US3_1
                match v1003 with
                | US3_1 -> (* None *)
                    let v1008 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v1012 : US3 =
                        if v1008 then
                            let v1009 : string = "Warning"
                            US3_0(v1009)
                        else
                            US3_1
                    match v1012 with
                    | US3_1 -> (* None *)
                        let v1017 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v1021 : US3 =
                            if v1017 then
                                let v1018 : string = "Critical"
                                US3_0(v1018)
                            else
                                US3_1
                        match v1021 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v1022) -> (* Some *)
                            US3_0(v1022)
                    | US3_0(v1013) -> (* Some *)
                        US3_0(v1013)
                | US3_0(v1004) -> (* Some *)
                    US3_0(v1004)
            | US3_0(v995) -> (* Some *)
                US3_0(v995)
        | US3_0(v986) -> (* Some *)
            US3_0(v986)
    let v1038 : string =
        match v1034 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v1035) -> (* Some *)
            v1035
    let v1041 : (unit -> string) = v1038.ToLower
    let v1042 : string = v1041 ()
    let v1051 : string = v1042.PadLeft (7, ' ')
    let v1083 : bool = true
    let mutable _v1083 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1098 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1092 : string = "inline_colorization::color_bright_red"
            let v1093 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1092 
            v1093
        | US0_1 -> (* Debug *)
            let v1086 : string = "inline_colorization::color_bright_blue"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_2 -> (* Info *)
            let v1088 : string = "inline_colorization::color_bright_green"
            let v1089 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1088 
            v1089
        | US0_0 -> (* Verbose *)
            let v1084 : string = "inline_colorization::color_bright_black"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
        | US0_3 -> (* Warning *)
            let v1090 : string = "inline_colorization::color_yellow"
            let v1091 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1090 
            v1091
    let v1099 : string = "&*$0"
    let v1100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1099 
    let v1101 : string = "inline_colorization::color_reset"
    let v1102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1101 
    let v1103 : string = "\"{v1098}{v1100}{v1102}\""
    let v1104 : string = @$"format!(" + v1103 + ")"
    let v1105 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1104 
    let v1106 : string = "fable_library_rust::String_::fromString($0)"
    let v1107 : string = Fable.Core.RustInterop.emitRustExpr v1105 v1106 
    v1107 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1122 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1116 : string = "inline_colorization::color_bright_red"
            let v1117 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1116 
            v1117
        | US0_1 -> (* Debug *)
            let v1110 : string = "inline_colorization::color_bright_blue"
            let v1111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1110 
            v1111
        | US0_2 -> (* Info *)
            let v1112 : string = "inline_colorization::color_bright_green"
            let v1113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1112 
            v1113
        | US0_0 -> (* Verbose *)
            let v1108 : string = "inline_colorization::color_bright_black"
            let v1109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1108 
            v1109
        | US0_3 -> (* Warning *)
            let v1114 : string = "inline_colorization::color_yellow"
            let v1115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1114 
            v1115
    let v1123 : string = "&*$0"
    let v1124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1123 
    let v1125 : string = "inline_colorization::color_reset"
    let v1126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1125 
    let v1127 : string = "\"{v1122}{v1124}{v1126}\""
    let v1128 : string = @$"format!(" + v1127 + ")"
    let v1129 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1128 
    let v1130 : string = "fable_library_rust::String_::fromString($0)"
    let v1131 : string = Fable.Core.RustInterop.emitRustExpr v1129 v1130 
    v1131 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1146 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1140 : string = "inline_colorization::color_bright_red"
            let v1141 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1140 
            v1141
        | US0_1 -> (* Debug *)
            let v1134 : string = "inline_colorization::color_bright_blue"
            let v1135 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1134 
            v1135
        | US0_2 -> (* Info *)
            let v1136 : string = "inline_colorization::color_bright_green"
            let v1137 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1136 
            v1137
        | US0_0 -> (* Verbose *)
            let v1132 : string = "inline_colorization::color_bright_black"
            let v1133 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1132 
            v1133
        | US0_3 -> (* Warning *)
            let v1138 : string = "inline_colorization::color_yellow"
            let v1139 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1138 
            v1139
    let v1147 : string = "&*$0"
    let v1148 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1147 
    let v1149 : string = "inline_colorization::color_reset"
    let v1150 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1149 
    let v1151 : string = "\"{v1146}{v1148}{v1150}\""
    let v1152 : string = @$"format!(" + v1151 + ")"
    let v1153 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1152 
    let v1154 : string = "fable_library_rust::String_::fromString($0)"
    let v1155 : string = Fable.Core.RustInterop.emitRustExpr v1153 v1154 
    v1155 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1165 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1160 : string = "\u001b[91m"
            v1160
        | US0_1 -> (* Debug *)
            let v1157 : string = "\u001b[94m"
            v1157
        | US0_2 -> (* Info *)
            let v1158 : string = "\u001b[92m"
            v1158
        | US0_0 -> (* Verbose *)
            let v1156 : string = "\u001b[90m"
            v1156
        | US0_3 -> (* Warning *)
            let v1159 : string = "\u001b[93m"
            v1159
    let v1166 : string = method8()
    let v1167 : string = v1165 + v1051 
    let v1168 : string = v1167 + v1166 
    v1168 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1178 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1173 : string = "\u001b[91m"
            v1173
        | US0_1 -> (* Debug *)
            let v1170 : string = "\u001b[94m"
            v1170
        | US0_2 -> (* Info *)
            let v1171 : string = "\u001b[92m"
            v1171
        | US0_0 -> (* Verbose *)
            let v1169 : string = "\u001b[90m"
            v1169
        | US0_3 -> (* Warning *)
            let v1172 : string = "\u001b[93m"
            v1172
    let v1179 : string = method8()
    let v1180 : string = v1178 + v1051 
    let v1181 : string = v1180 + v1179 
    v1181 
    #endif
#else
    let v1191 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1186 : string = "\u001b[91m"
            v1186
        | US0_1 -> (* Debug *)
            let v1183 : string = "\u001b[94m"
            v1183
        | US0_2 -> (* Info *)
            let v1184 : string = "\u001b[92m"
            v1184
        | US0_0 -> (* Verbose *)
            let v1182 : string = "\u001b[90m"
            v1182
        | US0_3 -> (* Warning *)
            let v1185 : string = "\u001b[93m"
            v1185
    let v1192 : string = method8()
    let v1193 : string = v1191 + v1051 
    let v1194 : string = v1193 + v1192 
    v1194 
    #endif
    |> fun x -> _v1083 <- Some x
    let v1195 : string = match _v1083 with Some x -> x | None -> failwith "base.run_target / _v1083=None"
    let v1214 : int64 = v14.l0
    let struct (v1215 : string, v1216 : UH4) = v2 ()
    let v1217 : string = ""
    let v1218 : Mut4 = {l0 = v1217} : Mut4
    method190(v1218, v1215, v1216)
    let v1219 : string = v1218.l0
    let v1222 : string = $"{v826} {v1195} #{v1214} %s{v1 ()} / {v1219}"
    let v1229 : char list = []
    let v1234 : (char list -> (char [])) = List.toArray
    let v1235 : (char []) = v1234 v1229
    let v1242 : string = v1222.TrimStart v1235 
    let v1281 : char list = []
    let v1284 : char list = '/' :: v1281 
    let v1293 : char list = ' ' :: v1284 
    let v1304 : (char list -> (char [])) = List.toArray
    let v1305 : (char []) = v1304 v1293
    let v1312 : string = v1242.TrimEnd v1305 
    v1312
and method189 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (string * UH4))) : unit =
    let v3 : (unit -> string) = closure126(v0, v1, v2)
    method13(v0, v3)
and method192 (v0 : UH4) : unit =
    match v0 with
    | UH4_1(v1, v2, v3) -> (* Cons *)
        let v6 : bool = true
        let mutable _v6 : unit option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v7 : string = "std::fs::remove_file(&*$0).unwrap()"
        Fable.Core.RustInterop.emitRustExpr v1 v7 
        () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        null |> unbox<unit>
        () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        null |> unbox<unit>
        () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        null |> unbox<unit>
        () 
        #endif
#if FABLE_COMPILER_PYTHON
        null |> unbox<unit>
        () 
        #endif
#else
        let v32 : (string -> unit) = System.IO.File.Delete
        v32 v1
        () 
        #endif
        |> fun x -> _v6 <- Some x
        match _v6 with Some x -> x | None -> failwith "base.run_target / _v6=None"
        method192(v3)
    | UH4_0 -> (* Nil *)
        ()
and method195 (v0 : async_walkdir_DirEntry) : async_walkdir_DirEntry =
    v0
and closure128 () (v0 : std_fs_FileType) : US40 =
    US40_0(v0)
and closure129 () (v0 : std_string_String) : US40 =
    US40_1(v0)
and method196 (v0 : std_fs_FileType) : std_fs_FileType =
    v0
and method197 (v0 : US39) : US39 =
    v0
and method194 (v0 : async_walkdir_DirEntry) : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<US39>>, Send<Dyn<std_future_Future<US39>>>>>> =
    let v1 : string = "let __result = Box::pin(async move { //"
    Fable.Core.RustInterop.emitRustExpr () v1 
    let v2 : async_walkdir_DirEntry = method195(v0)
    let v3 : string = "Box::pin(async_walkdir::DirEntry::file_type(&v2))"
    let v4 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<Result<std_fs_FileType, std_io_Error>>>, Send<Dyn<std_future_Future<Result<std_fs_FileType, std_io_Error>>>>>>> = Fable.Core.RustInterop.emitRustExpr () v3 
    let v5 : string = "v4.await"
    let v6 : Result<std_fs_FileType, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v5 
    let v7 : (std_io_Error -> std_string_String) = method36()
    let v8 : string = "$0.map_err(|x| $1(x))"
    let v9 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v6, v7) v8 
    let v10 : (std_fs_FileType -> US40) = closure128()
    let v11 : (std_string_String -> US40) = closure129()
    let v12 : US40 = match v9 with Ok x -> v10 x | Error x -> v11 x
    let v22 : US39 =
        match v12 with
        | US40_0(v13) -> (* Ok *)
            let v14 : std_fs_FileType = method196(v13)
            let v15 : string = "std::fs::FileType::is_dir(&v14)"
            let v16 : bool = Fable.Core.RustInterop.emitRustExpr () v15 
            let v17 : bool = v16 = false
            if v17 then
                US39_0
            else
                US39_2
        | _ ->
            US39_2
    let v23 : US39 = method197(v22)
    let v24 : string = ""
    let v25 : string = "}"
    let v26 : string = v24 + v25 
    let v27 : string = v26 + v25 
    let v28 : string = "{"
    let v29 : string = v24 + v28 
    let v30 : string = "v23 " + v27 + "); " + v29 + " // rust.fix_closure'"
    Fable.Core.RustInterop.emitRustExpr () v30 
    let v31 : string = "__result"
    let v32 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<US39>>, Send<Dyn<std_future_Future<US39>>>>>> = Fable.Core.RustInterop.emitRustExpr () v31 
    v32
and method198 (v0 : async_walkdir_Filtering) : async_walkdir_Filtering =
    v0
and method193 (v0 : async_walkdir_DirEntry) : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> =
    let v1 : string = "let __result = Box::pin(async { //"
    Fable.Core.RustInterop.emitRustExpr () v1 
    let v2 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<US39>>, Send<Dyn<std_future_Future<US39>>>>>> = method194(v0)
    let v3 : string = "v2.await"
    let v4 : US39 = Fable.Core.RustInterop.emitRustExpr () v3 
    let v13 : async_walkdir_Filtering =
        match v4 with
        | US39_2 -> (* Continue *)
            let v9 : string = "async_walkdir::Filtering::Continue"
            let v10 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v9 
            v10
        | US39_0 -> (* Ignore *)
            let v5 : string = "async_walkdir::Filtering::Ignore"
            let v6 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v5 
            v6
        | US39_1 -> (* IgnoreDir *)
            let v7 : string = "async_walkdir::Filtering::IgnoreDir"
            let v8 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v7 
            v8
    let v14 : async_walkdir_Filtering = method198(v13)
    let v15 : string = ""
    let v16 : string = "}"
    let v17 : string = v15 + v16 
    let v18 : string = v17 + v16 
    let v19 : string = "{"
    let v20 : string = v15 + v19 
    let v21 : string = "v14 " + v18 + "); " + v20 + " // rust.fix_closure'"
    Fable.Core.RustInterop.emitRustExpr () v21 
    let v22 : string = "__result"
    let v23 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> = Fable.Core.RustInterop.emitRustExpr () v22 
    v23
and closure127 () (v0 : async_walkdir_DirEntry) : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> =
    method193(v0)
and closure131 () (v0 : async_walkdir_Error) : std_string_String =
    let v3 : bool = true
    let mutable _v3 : std_string_String option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    v5 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    v7 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    v9 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : std_string_String = null |> unbox<std_string_String>
    v12 
    #endif
#if FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    v21 
    #endif
#else
    let v30 : std_string_String = null |> unbox<std_string_String>
    v30 
    #endif
    |> fun x -> _v3 <- Some x
    let v37 : std_string_String = match _v3 with Some x -> x | None -> failwith "base.run_target / _v3=None"
    v37
and method200 () : (async_walkdir_Error -> std_string_String) =
    closure131()
and closure132 () (v0 : async_walkdir_DirEntry) : US41 =
    US41_0(v0)
and closure133 () (v0 : std_string_String) : US41 =
    US41_1(v0)
and closure134 () () : string =
    let v0 : string = "spiral_builder.process_typescript / stream_filter_map"
    v0
and closure135 (v0 : std_string_String) () : std_string_String =
    v0
and closure130 () (v0 : Result<async_walkdir_DirEntry, async_walkdir_Error>) : struct (string * string) option =
    let v1 : (async_walkdir_Error -> std_string_String) = method200()
    let v2 : string = "$0.map_err(|x| $1(x))"
    let v3 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v2 
    let v4 : (async_walkdir_DirEntry -> US41) = closure132()
    let v5 : (std_string_String -> US41) = closure133()
    let v6 : US41 = match v3 with Ok x -> v4 x | Error x -> v5 x
    let v217 : US42 =
        match v6 with
        | US41_1(v211) -> (* Error *)
            let v212 : US0 = US0_4
            let v213 : (unit -> string) = closure134()
            let v214 : (unit -> std_string_String) = closure135(v211)
            method92(v212, v213, v214)
            US42_1
        | US41_0(v7) -> (* Ok *)
            let v8 : string = "async_walkdir::DirEntry::path(&$0)"
            let v9 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v7 v8 
            let v10 : string = "$0.display()"
            let v11 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v9 v10 
            let v14 : bool = true
            let mutable _v14 : std_string_String option = None 
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v15 : string = "format!(\"{}\", $0)"
            let v16 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11 v15 
            v16 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v17 : string = "format!(\"{}\", $0)"
            let v18 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11 v17 
            v18 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v19 : string = "format!(\"{}\", $0)"
            let v20 : std_string_String = Fable.Core.RustInterop.emitRustExpr v11 v19 
            v20 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v23 : std_string_String = null |> unbox<std_string_String>
            v23 
            #endif
#if FABLE_COMPILER_PYTHON
            let v32 : std_string_String = null |> unbox<std_string_String>
            v32 
            #endif
#else
            let v41 : std_string_String = null |> unbox<std_string_String>
            v41 
            #endif
            |> fun x -> _v14 <- Some x
            let v48 : std_string_String = match _v14 with Some x -> x | None -> failwith "base.run_target / _v14=None"
            let v63 : string = "fable_library_rust::String_::fromString($0)"
            let v64 : string = Fable.Core.RustInterop.emitRustExpr v48 v63 
            let v65 : string = "ts"
            let v66 : string = $"fable-library-{v65}\.(?<a>[\d.]+)$"
            let v67 : string = $"regex::Regex::new(&$0)"
            let v68 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v66 v67 
            let v69 : string = "$0.unwrap()"
            let v70 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v68 v69 
            let v71 : string = "&*$0"
            let v72 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v64 v71 
            let v73 : string = "String::from($0)"
            let v74 : std_string_String = Fable.Core.RustInterop.emitRustExpr v72 v73 
            let v75 : string = "true; let _result = (move || { // rust.capture_move"
            let v76 : bool = Fable.Core.RustInterop.emitRustExpr () v75 
            let v77 : string = "Box::new($0)"
            let v78 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v74 v77 
            let v79 : string = "Box::leak($0)"
            let v80 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v78 v79 
            let v81 : string = $"v70.captures_iter(v80)"
            let v82 : regex_CaptureMatches = Fable.Core.RustInterop.emitRustExpr () v81 
            let v83 : string = "true; let _result : Vec<_> = v82.map(|x| { //"
            let v84 : bool = Fable.Core.RustInterop.emitRustExpr () v83 
            let v85 : string = $"x"
            let v86 : regex_Captures<StaticLifetime> = Fable.Core.RustInterop.emitRustExpr () v85 
            let v87 : string = "Box::new($0)"
            let v88 : Box<regex_Captures<StaticLifetime>> = Fable.Core.RustInterop.emitRustExpr v86 v87 
            let v89 : string = "Box::leak($0)"
            let v90 : Ref<Lifetime<StaticLifetime, Mut<regex_Captures<StaticLifetime>>>> = Fable.Core.RustInterop.emitRustExpr v88 v89 
            let v91 : string = $"$0.capture_names()"
            let v92 : regex_CaptureNames = Fable.Core.RustInterop.emitRustExpr v70 v91 
            let v93 : string = "true; let _result : std::collections::HashMap<_, _> = v92.map(|x| { //"
            let v94 : bool = Fable.Core.RustInterop.emitRustExpr () v93 
            let v95 : string = "x.unwrap_or(\"\").to_string().into()"
            let v96 : string = Fable.Core.RustInterop.emitRustExpr () v95 
            let v97 : string = "$0.clone()"
            let v98 : string = Fable.Core.RustInterop.emitRustExpr v96 v97 
            let v99 : string = $"v90.name(&$0).map(|x| x.as_str()).unwrap_or(\"\").to_string().into()"
            let v100 : string = Fable.Core.RustInterop.emitRustExpr v96 v99 
            let v101 : (string * string) = v98, v100 
            let v102 : string = "true; $0 }).map(|x| std::sync::Arc::try_unwrap(x).unwrap_or_else(|x| (*x).clone())).collect()"
            let v103 : bool = Fable.Core.RustInterop.emitRustExpr v101 v102 
            let v104 : string = "_result"
            let v105 : std_collections_HashMap<string, string> = Fable.Core.RustInterop.emitRustExpr () v104 
            let v106 : string = "true; $0 }).collect::<Vec<_>>()"
            let v107 : bool = Fable.Core.RustInterop.emitRustExpr v105 v106 
            let v108 : string = "_result"
            let v109 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v108 
            let v110 : string = "true; $0 })()"
            let v111 : bool = Fable.Core.RustInterop.emitRustExpr v109 v110 
            let v112 : string = "_result"
            let v113 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v112 
            let v114 : string = "fable_library_rust::NativeArray_::array_from($0)"
            let v115 : (std_collections_HashMap<string, string> []) = Fable.Core.RustInterop.emitRustExpr v113 v114 
            let v116 : std_collections_HashMap<string, string> option = v115 |> Array.tryItem 0 
            let v119 : US37 option = None
            let _v119 = ref v119 
            match v116 with
            | Some x -> (
            (fun () ->
            (fun () ->
            let v120 : std_collections_HashMap<string, string> = x
            let v121 : US37 = US37_0(v120)
            v121 
            )
            |> fun x -> x () |> Some
            ) () ) | None -> None
            |> fun x -> _v119.Value <- x
            let v122 : US37 option = _v119.Value 
            let v145 : US37 = US37_1
            let v146 : US37 = v122 |> Option.defaultValue v145 
            let v198 : US38 =
                match v146 with
                | US37_1 -> (* None *)
                    US38_1
                | US37_0(v154) -> (* Some *)
                    let v155 : string = method176()
                    let v156 : string = "std::collections::HashMap::get(&$0, &v155).map(|x| x).cloned()"
                    let v157 : string option = Fable.Core.RustInterop.emitRustExpr v154 v156 
                    let v160 : US3 option = None
                    let _v160 = ref v160 
                    match v157 with
                    | Some x -> (
                    (fun () ->
                    (fun () ->
                    let v161 : string = x
                    let v162 : US3 = US3_0(v161)
                    v162 
                    )
                    |> fun x -> x () |> Some
                    ) () ) | None -> None
                    |> fun x -> _v160.Value <- x
                    let v163 : US3 option = _v160.Value 
                    let v186 : US3 = US3_1
                    let v187 : US3 = v163 |> Option.defaultValue v186 
                    US38_0(v187)
            let v205 : US3 =
                match v198 with
                | US38_0(v199) -> (* Some *)
                    match v199 with
                    | US3_0(v200) -> (* Some *)
                        US3_0(v200)
                    | _ ->
                        US3_1
                | _ ->
                    US3_1
            match v205 with
            | US3_1 -> (* None *)
                US42_1
            | US3_0(v207) -> (* Some *)
                US42_0(v64, v207)
    match v217 with
    | US42_1 -> (* None *)
        let v229 : struct (string * string) option = None
        v229
    | US42_0(v218, v219) -> (* Some *)
        let v222 : struct (string * string) option = Some struct (v218, v219) 
        v222
and method199 () : (Result<async_walkdir_DirEntry, async_walkdir_Error> -> struct (string * string) option) =
    closure130()
and closure136 () struct (v0 : string, v1 : string) : struct (string * string) =
    struct (v0, v1)
and closure137 () () : string =
    let v0 : string = "spiral_builder.process_typescript"
    v0
and closure138 (v0 : US42) () : std_string_String =
    let v3 : bool = true
    let mutable _v3 : std_string_String option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "format!(\"{:#?}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    v5 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : string = "format!(\"{:#?}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    v7 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : string = "format!(\"{:#?}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    v9 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : std_string_String = null |> unbox<std_string_String>
    v12 
    #endif
#if FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    v21 
    #endif
#else
    let v30 : std_string_String = null |> unbox<std_string_String>
    v30 
    #endif
    |> fun x -> _v3 <- Some x
    let v37 : std_string_String = match _v3 with Some x -> x | None -> failwith "base.run_target / _v3=None"
    v37
and method202 (v0 : Mut4, v1 : std_string_String) : unit =
    let v2 : string = "{ "
    method10(v0, v2)
    method11(v0)
    let v3 : string = "version"
    method10(v0, v3)
    let v4 : string = " = "
    method10(v0, v4)
    method39(v0, v1)
    let v5 : string = " }"
    method10(v0, v5)
and closure139 (v0 : US0, v1 : (unit -> string), v2 : (unit -> std_string_String)) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = $"near_sdk::env::block_timestamp()"
    let v331 : uint64 = Fable.Core.RustInterop.emitRustExpr () v330 
    let v334 : US2 option = None
    let _v334 = ref v334 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v335 : int64 = x
    let v336 : US2 = US2_0(v335)
    v336 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v334.Value <- x
    let v337 : US2 option = _v334.Value 
    let v360 : US2 = US2_1
    let v361 : US2 = v337 |> Option.defaultValue v360 
    let v374 : uint64 =
        match v361 with
        | US2_1 -> (* None *)
            v331
        | US2_0(v369) -> (* Some *)
            let v370 : (int64 -> uint64) = uint64
            let v371 : uint64 = v370 v369
            let v372 : uint64 = v331 - v371
            v372
    let v375 : uint64 = v374 / 1000000000UL
    let v376 : uint64 = v375 % 60UL
    let v377 : uint64 = v375 / 60UL
    let v378 : uint64 = v377 % 60UL
    let v379 : uint64 = v375 / 3600UL
    let v380 : uint64 = v379 % 24UL
    let v381 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v382 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v380, v378, v376) v381 
    let v383 : string = "fable_library_rust::String_::fromString($0)"
    let v384 : string = Fable.Core.RustInterop.emitRustExpr v382 v383 
    v384 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v387 : US2 option = None
    let _v387 = ref v387 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v388 : int64 = x
    let v389 : US2 = US2_0(v388)
    v389 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v387.Value <- x
    let v390 : US2 option = _v387.Value 
    let v413 : US2 = US2_1
    let v414 : US2 = v390 |> Option.defaultValue v413 
    let v512 : System.DateTime =
        match v414 with
        | US2_1 -> (* None *)
            let v504 : System.DateTime = System.DateTime.Now
            v504
        | US2_0(v422) -> (* Some *)
            let v425 : System.DateTime = System.DateTime.Now
            let v434 : (System.DateTime -> int64) = _.Ticks
            let v435 : int64 = v434 v425
            let v442 : int64 = v435 - v422
            let v445 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v446 : System.TimeSpan = v445 v442
            let v455 : (System.TimeSpan -> int32) = _.Hours
            let v456 : int32 = v455 v446
            let v465 : (System.TimeSpan -> int32) = _.Minutes
            let v466 : int32 = v465 v446
            let v475 : (System.TimeSpan -> int32) = _.Seconds
            let v476 : int32 = v475 v446
            let v485 : (System.TimeSpan -> int32) = _.Milliseconds
            let v486 : int32 = v485 v446
            let v495 : System.DateTime = System.DateTime (1, 1, 1, v456, v466, v476, v486)
            v495
    let v515 : string = method7()
    let v524 : (string -> string) = v512.ToString
    let v525 : string = v524 v515
    v525 
    #endif
#if FABLE_COMPILER_PYTHON
    let v534 : US2 option = None
    let _v534 = ref v534 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v535 : int64 = x
    let v536 : US2 = US2_0(v535)
    v536 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v534.Value <- x
    let v537 : US2 option = _v534.Value 
    let v560 : US2 = US2_1
    let v561 : US2 = v537 |> Option.defaultValue v560 
    let v659 : System.DateTime =
        match v561 with
        | US2_1 -> (* None *)
            let v651 : System.DateTime = System.DateTime.Now
            v651
        | US2_0(v569) -> (* Some *)
            let v572 : System.DateTime = System.DateTime.Now
            let v581 : (System.DateTime -> int64) = _.Ticks
            let v582 : int64 = v581 v572
            let v589 : int64 = v582 - v569
            let v592 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v593 : System.TimeSpan = v592 v589
            let v602 : (System.TimeSpan -> int32) = _.Hours
            let v603 : int32 = v602 v593
            let v612 : (System.TimeSpan -> int32) = _.Minutes
            let v613 : int32 = v612 v593
            let v622 : (System.TimeSpan -> int32) = _.Seconds
            let v623 : int32 = v622 v593
            let v632 : (System.TimeSpan -> int32) = _.Milliseconds
            let v633 : int32 = v632 v593
            let v642 : System.DateTime = System.DateTime (1, 1, 1, v603, v613, v623, v633)
            v642
    let v662 : string = method7()
    let v671 : (string -> string) = v659.ToString
    let v672 : string = v671 v662
    v672 
    #endif
#else
    let v681 : US2 option = None
    let _v681 = ref v681 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v682 : int64 = x
    let v683 : US2 = US2_0(v682)
    v683 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v681.Value <- x
    let v684 : US2 option = _v681.Value 
    let v707 : US2 = US2_1
    let v708 : US2 = v684 |> Option.defaultValue v707 
    let v806 : System.DateTime =
        match v708 with
        | US2_1 -> (* None *)
            let v798 : System.DateTime = System.DateTime.Now
            v798
        | US2_0(v716) -> (* Some *)
            let v719 : System.DateTime = System.DateTime.Now
            let v728 : (System.DateTime -> int64) = _.Ticks
            let v729 : int64 = v728 v719
            let v736 : int64 = v729 - v716
            let v739 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v740 : System.TimeSpan = v739 v736
            let v749 : (System.TimeSpan -> int32) = _.Hours
            let v750 : int32 = v749 v740
            let v759 : (System.TimeSpan -> int32) = _.Minutes
            let v760 : int32 = v759 v740
            let v769 : (System.TimeSpan -> int32) = _.Seconds
            let v770 : int32 = v769 v740
            let v779 : (System.TimeSpan -> int32) = _.Milliseconds
            let v780 : int32 = v779 v740
            let v789 : System.DateTime = System.DateTime (1, 1, 1, v750, v760, v770, v780)
            v789
    let v809 : string = method7()
    let v818 : (string -> string) = v806.ToString
    let v819 : string = v818 v809
    v819 
    #endif
    |> fun x -> _v35 <- Some x
    let v826 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v981 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v985 : US3 =
        if v981 then
            let v982 : string = "Verbose"
            US3_0(v982)
        else
            US3_1
    let v1034 : US3 =
        match v985 with
        | US3_1 -> (* None *)
            let v990 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v994 : US3 =
                if v990 then
                    let v991 : string = "Debug"
                    US3_0(v991)
                else
                    US3_1
            match v994 with
            | US3_1 -> (* None *)
                let v999 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v1003 : US3 =
                    if v999 then
                        let v1000 : string = "Info"
                        US3_0(v1000)
                    else
                        US3_1
                match v1003 with
                | US3_1 -> (* None *)
                    let v1008 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v1012 : US3 =
                        if v1008 then
                            let v1009 : string = "Warning"
                            US3_0(v1009)
                        else
                            US3_1
                    match v1012 with
                    | US3_1 -> (* None *)
                        let v1017 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v1021 : US3 =
                            if v1017 then
                                let v1018 : string = "Critical"
                                US3_0(v1018)
                            else
                                US3_1
                        match v1021 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v1022) -> (* Some *)
                            US3_0(v1022)
                    | US3_0(v1013) -> (* Some *)
                        US3_0(v1013)
                | US3_0(v1004) -> (* Some *)
                    US3_0(v1004)
            | US3_0(v995) -> (* Some *)
                US3_0(v995)
        | US3_0(v986) -> (* Some *)
            US3_0(v986)
    let v1038 : string =
        match v1034 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v1035) -> (* Some *)
            v1035
    let v1041 : (unit -> string) = v1038.ToLower
    let v1042 : string = v1041 ()
    let v1051 : string = v1042.PadLeft (7, ' ')
    let v1083 : bool = true
    let mutable _v1083 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1098 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1092 : string = "inline_colorization::color_bright_red"
            let v1093 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1092 
            v1093
        | US0_1 -> (* Debug *)
            let v1086 : string = "inline_colorization::color_bright_blue"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_2 -> (* Info *)
            let v1088 : string = "inline_colorization::color_bright_green"
            let v1089 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1088 
            v1089
        | US0_0 -> (* Verbose *)
            let v1084 : string = "inline_colorization::color_bright_black"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
        | US0_3 -> (* Warning *)
            let v1090 : string = "inline_colorization::color_yellow"
            let v1091 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1090 
            v1091
    let v1099 : string = "&*$0"
    let v1100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1099 
    let v1101 : string = "inline_colorization::color_reset"
    let v1102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1101 
    let v1103 : string = "\"{v1098}{v1100}{v1102}\""
    let v1104 : string = @$"format!(" + v1103 + ")"
    let v1105 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1104 
    let v1106 : string = "fable_library_rust::String_::fromString($0)"
    let v1107 : string = Fable.Core.RustInterop.emitRustExpr v1105 v1106 
    v1107 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1122 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1116 : string = "inline_colorization::color_bright_red"
            let v1117 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1116 
            v1117
        | US0_1 -> (* Debug *)
            let v1110 : string = "inline_colorization::color_bright_blue"
            let v1111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1110 
            v1111
        | US0_2 -> (* Info *)
            let v1112 : string = "inline_colorization::color_bright_green"
            let v1113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1112 
            v1113
        | US0_0 -> (* Verbose *)
            let v1108 : string = "inline_colorization::color_bright_black"
            let v1109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1108 
            v1109
        | US0_3 -> (* Warning *)
            let v1114 : string = "inline_colorization::color_yellow"
            let v1115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1114 
            v1115
    let v1123 : string = "&*$0"
    let v1124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1123 
    let v1125 : string = "inline_colorization::color_reset"
    let v1126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1125 
    let v1127 : string = "\"{v1122}{v1124}{v1126}\""
    let v1128 : string = @$"format!(" + v1127 + ")"
    let v1129 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1128 
    let v1130 : string = "fable_library_rust::String_::fromString($0)"
    let v1131 : string = Fable.Core.RustInterop.emitRustExpr v1129 v1130 
    v1131 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1146 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1140 : string = "inline_colorization::color_bright_red"
            let v1141 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1140 
            v1141
        | US0_1 -> (* Debug *)
            let v1134 : string = "inline_colorization::color_bright_blue"
            let v1135 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1134 
            v1135
        | US0_2 -> (* Info *)
            let v1136 : string = "inline_colorization::color_bright_green"
            let v1137 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1136 
            v1137
        | US0_0 -> (* Verbose *)
            let v1132 : string = "inline_colorization::color_bright_black"
            let v1133 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1132 
            v1133
        | US0_3 -> (* Warning *)
            let v1138 : string = "inline_colorization::color_yellow"
            let v1139 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1138 
            v1139
    let v1147 : string = "&*$0"
    let v1148 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1147 
    let v1149 : string = "inline_colorization::color_reset"
    let v1150 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1149 
    let v1151 : string = "\"{v1146}{v1148}{v1150}\""
    let v1152 : string = @$"format!(" + v1151 + ")"
    let v1153 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1152 
    let v1154 : string = "fable_library_rust::String_::fromString($0)"
    let v1155 : string = Fable.Core.RustInterop.emitRustExpr v1153 v1154 
    v1155 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1165 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1160 : string = "\u001b[91m"
            v1160
        | US0_1 -> (* Debug *)
            let v1157 : string = "\u001b[94m"
            v1157
        | US0_2 -> (* Info *)
            let v1158 : string = "\u001b[92m"
            v1158
        | US0_0 -> (* Verbose *)
            let v1156 : string = "\u001b[90m"
            v1156
        | US0_3 -> (* Warning *)
            let v1159 : string = "\u001b[93m"
            v1159
    let v1166 : string = method8()
    let v1167 : string = v1165 + v1051 
    let v1168 : string = v1167 + v1166 
    v1168 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1178 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1173 : string = "\u001b[91m"
            v1173
        | US0_1 -> (* Debug *)
            let v1170 : string = "\u001b[94m"
            v1170
        | US0_2 -> (* Info *)
            let v1171 : string = "\u001b[92m"
            v1171
        | US0_0 -> (* Verbose *)
            let v1169 : string = "\u001b[90m"
            v1169
        | US0_3 -> (* Warning *)
            let v1172 : string = "\u001b[93m"
            v1172
    let v1179 : string = method8()
    let v1180 : string = v1178 + v1051 
    let v1181 : string = v1180 + v1179 
    v1181 
    #endif
#else
    let v1191 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1186 : string = "\u001b[91m"
            v1186
        | US0_1 -> (* Debug *)
            let v1183 : string = "\u001b[94m"
            v1183
        | US0_2 -> (* Info *)
            let v1184 : string = "\u001b[92m"
            v1184
        | US0_0 -> (* Verbose *)
            let v1182 : string = "\u001b[90m"
            v1182
        | US0_3 -> (* Warning *)
            let v1185 : string = "\u001b[93m"
            v1185
    let v1192 : string = method8()
    let v1193 : string = v1191 + v1051 
    let v1194 : string = v1193 + v1192 
    v1194 
    #endif
    |> fun x -> _v1083 <- Some x
    let v1195 : string = match _v1083 with Some x -> x | None -> failwith "base.run_target / _v1083=None"
    let v1214 : int64 = v14.l0
    let v1215 : std_string_String = v2 ()
    let v1216 : string = ""
    let v1217 : Mut4 = {l0 = v1216} : Mut4
    method202(v1217, v1215)
    let v1218 : string = v1217.l0
    let v1221 : string = $"{v826} {v1195} #{v1214} %s{v1 ()} / {v1218}"
    let v1228 : char list = []
    let v1233 : (char list -> (char [])) = List.toArray
    let v1234 : (char []) = v1233 v1228
    let v1241 : string = v1221.TrimStart v1234 
    let v1280 : char list = []
    let v1283 : char list = '/' :: v1280 
    let v1292 : char list = ' ' :: v1283 
    let v1303 : (char list -> (char [])) = List.toArray
    let v1304 : (char []) = v1303 v1292
    let v1311 : string = v1241.TrimEnd v1304 
    v1311
and method201 (v0 : US0, v1 : (unit -> string), v2 : (unit -> std_string_String)) : unit =
    let v3 : (unit -> string) = closure139(v0, v1, v2)
    method13(v0, v3)
and closure140 () () : string =
    let v0 : string = $"spiral_builder.process_typescript"
    v0
and closure141 (v0 : string, v1 : int32) () : struct (int32 * string) =
    struct (v1, v0)
and closure142 () () : string =
    let v0 : string = "spiral_builder.process_typescript"
    v0
and closure143 (v0 : string) () : string =
    v0
and method204 (v0 : Mut4, v1 : string) : unit =
    let v2 : string = "{ "
    method10(v0, v2)
    method11(v0)
    let v3 : string = "new_code_path"
    method10(v0, v3)
    let v4 : string = " = "
    method10(v0, v4)
    method10(v0, v1)
    let v5 : string = " }"
    method10(v0, v5)
and closure144 (v0 : US0, v1 : (unit -> string), v2 : (unit -> string)) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = $"near_sdk::env::block_timestamp()"
    let v331 : uint64 = Fable.Core.RustInterop.emitRustExpr () v330 
    let v334 : US2 option = None
    let _v334 = ref v334 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v335 : int64 = x
    let v336 : US2 = US2_0(v335)
    v336 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v334.Value <- x
    let v337 : US2 option = _v334.Value 
    let v360 : US2 = US2_1
    let v361 : US2 = v337 |> Option.defaultValue v360 
    let v374 : uint64 =
        match v361 with
        | US2_1 -> (* None *)
            v331
        | US2_0(v369) -> (* Some *)
            let v370 : (int64 -> uint64) = uint64
            let v371 : uint64 = v370 v369
            let v372 : uint64 = v331 - v371
            v372
    let v375 : uint64 = v374 / 1000000000UL
    let v376 : uint64 = v375 % 60UL
    let v377 : uint64 = v375 / 60UL
    let v378 : uint64 = v377 % 60UL
    let v379 : uint64 = v375 / 3600UL
    let v380 : uint64 = v379 % 24UL
    let v381 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v382 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v380, v378, v376) v381 
    let v383 : string = "fable_library_rust::String_::fromString($0)"
    let v384 : string = Fable.Core.RustInterop.emitRustExpr v382 v383 
    v384 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v387 : US2 option = None
    let _v387 = ref v387 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v388 : int64 = x
    let v389 : US2 = US2_0(v388)
    v389 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v387.Value <- x
    let v390 : US2 option = _v387.Value 
    let v413 : US2 = US2_1
    let v414 : US2 = v390 |> Option.defaultValue v413 
    let v512 : System.DateTime =
        match v414 with
        | US2_1 -> (* None *)
            let v504 : System.DateTime = System.DateTime.Now
            v504
        | US2_0(v422) -> (* Some *)
            let v425 : System.DateTime = System.DateTime.Now
            let v434 : (System.DateTime -> int64) = _.Ticks
            let v435 : int64 = v434 v425
            let v442 : int64 = v435 - v422
            let v445 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v446 : System.TimeSpan = v445 v442
            let v455 : (System.TimeSpan -> int32) = _.Hours
            let v456 : int32 = v455 v446
            let v465 : (System.TimeSpan -> int32) = _.Minutes
            let v466 : int32 = v465 v446
            let v475 : (System.TimeSpan -> int32) = _.Seconds
            let v476 : int32 = v475 v446
            let v485 : (System.TimeSpan -> int32) = _.Milliseconds
            let v486 : int32 = v485 v446
            let v495 : System.DateTime = System.DateTime (1, 1, 1, v456, v466, v476, v486)
            v495
    let v515 : string = method7()
    let v524 : (string -> string) = v512.ToString
    let v525 : string = v524 v515
    v525 
    #endif
#if FABLE_COMPILER_PYTHON
    let v534 : US2 option = None
    let _v534 = ref v534 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v535 : int64 = x
    let v536 : US2 = US2_0(v535)
    v536 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v534.Value <- x
    let v537 : US2 option = _v534.Value 
    let v560 : US2 = US2_1
    let v561 : US2 = v537 |> Option.defaultValue v560 
    let v659 : System.DateTime =
        match v561 with
        | US2_1 -> (* None *)
            let v651 : System.DateTime = System.DateTime.Now
            v651
        | US2_0(v569) -> (* Some *)
            let v572 : System.DateTime = System.DateTime.Now
            let v581 : (System.DateTime -> int64) = _.Ticks
            let v582 : int64 = v581 v572
            let v589 : int64 = v582 - v569
            let v592 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v593 : System.TimeSpan = v592 v589
            let v602 : (System.TimeSpan -> int32) = _.Hours
            let v603 : int32 = v602 v593
            let v612 : (System.TimeSpan -> int32) = _.Minutes
            let v613 : int32 = v612 v593
            let v622 : (System.TimeSpan -> int32) = _.Seconds
            let v623 : int32 = v622 v593
            let v632 : (System.TimeSpan -> int32) = _.Milliseconds
            let v633 : int32 = v632 v593
            let v642 : System.DateTime = System.DateTime (1, 1, 1, v603, v613, v623, v633)
            v642
    let v662 : string = method7()
    let v671 : (string -> string) = v659.ToString
    let v672 : string = v671 v662
    v672 
    #endif
#else
    let v681 : US2 option = None
    let _v681 = ref v681 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v682 : int64 = x
    let v683 : US2 = US2_0(v682)
    v683 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v681.Value <- x
    let v684 : US2 option = _v681.Value 
    let v707 : US2 = US2_1
    let v708 : US2 = v684 |> Option.defaultValue v707 
    let v806 : System.DateTime =
        match v708 with
        | US2_1 -> (* None *)
            let v798 : System.DateTime = System.DateTime.Now
            v798
        | US2_0(v716) -> (* Some *)
            let v719 : System.DateTime = System.DateTime.Now
            let v728 : (System.DateTime -> int64) = _.Ticks
            let v729 : int64 = v728 v719
            let v736 : int64 = v729 - v716
            let v739 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v740 : System.TimeSpan = v739 v736
            let v749 : (System.TimeSpan -> int32) = _.Hours
            let v750 : int32 = v749 v740
            let v759 : (System.TimeSpan -> int32) = _.Minutes
            let v760 : int32 = v759 v740
            let v769 : (System.TimeSpan -> int32) = _.Seconds
            let v770 : int32 = v769 v740
            let v779 : (System.TimeSpan -> int32) = _.Milliseconds
            let v780 : int32 = v779 v740
            let v789 : System.DateTime = System.DateTime (1, 1, 1, v750, v760, v770, v780)
            v789
    let v809 : string = method7()
    let v818 : (string -> string) = v806.ToString
    let v819 : string = v818 v809
    v819 
    #endif
    |> fun x -> _v35 <- Some x
    let v826 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v981 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v985 : US3 =
        if v981 then
            let v982 : string = "Verbose"
            US3_0(v982)
        else
            US3_1
    let v1034 : US3 =
        match v985 with
        | US3_1 -> (* None *)
            let v990 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v994 : US3 =
                if v990 then
                    let v991 : string = "Debug"
                    US3_0(v991)
                else
                    US3_1
            match v994 with
            | US3_1 -> (* None *)
                let v999 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v1003 : US3 =
                    if v999 then
                        let v1000 : string = "Info"
                        US3_0(v1000)
                    else
                        US3_1
                match v1003 with
                | US3_1 -> (* None *)
                    let v1008 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v1012 : US3 =
                        if v1008 then
                            let v1009 : string = "Warning"
                            US3_0(v1009)
                        else
                            US3_1
                    match v1012 with
                    | US3_1 -> (* None *)
                        let v1017 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v1021 : US3 =
                            if v1017 then
                                let v1018 : string = "Critical"
                                US3_0(v1018)
                            else
                                US3_1
                        match v1021 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v1022) -> (* Some *)
                            US3_0(v1022)
                    | US3_0(v1013) -> (* Some *)
                        US3_0(v1013)
                | US3_0(v1004) -> (* Some *)
                    US3_0(v1004)
            | US3_0(v995) -> (* Some *)
                US3_0(v995)
        | US3_0(v986) -> (* Some *)
            US3_0(v986)
    let v1038 : string =
        match v1034 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v1035) -> (* Some *)
            v1035
    let v1041 : (unit -> string) = v1038.ToLower
    let v1042 : string = v1041 ()
    let v1051 : string = v1042.PadLeft (7, ' ')
    let v1083 : bool = true
    let mutable _v1083 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1098 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1092 : string = "inline_colorization::color_bright_red"
            let v1093 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1092 
            v1093
        | US0_1 -> (* Debug *)
            let v1086 : string = "inline_colorization::color_bright_blue"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_2 -> (* Info *)
            let v1088 : string = "inline_colorization::color_bright_green"
            let v1089 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1088 
            v1089
        | US0_0 -> (* Verbose *)
            let v1084 : string = "inline_colorization::color_bright_black"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
        | US0_3 -> (* Warning *)
            let v1090 : string = "inline_colorization::color_yellow"
            let v1091 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1090 
            v1091
    let v1099 : string = "&*$0"
    let v1100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1099 
    let v1101 : string = "inline_colorization::color_reset"
    let v1102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1101 
    let v1103 : string = "\"{v1098}{v1100}{v1102}\""
    let v1104 : string = @$"format!(" + v1103 + ")"
    let v1105 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1104 
    let v1106 : string = "fable_library_rust::String_::fromString($0)"
    let v1107 : string = Fable.Core.RustInterop.emitRustExpr v1105 v1106 
    v1107 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1122 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1116 : string = "inline_colorization::color_bright_red"
            let v1117 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1116 
            v1117
        | US0_1 -> (* Debug *)
            let v1110 : string = "inline_colorization::color_bright_blue"
            let v1111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1110 
            v1111
        | US0_2 -> (* Info *)
            let v1112 : string = "inline_colorization::color_bright_green"
            let v1113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1112 
            v1113
        | US0_0 -> (* Verbose *)
            let v1108 : string = "inline_colorization::color_bright_black"
            let v1109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1108 
            v1109
        | US0_3 -> (* Warning *)
            let v1114 : string = "inline_colorization::color_yellow"
            let v1115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1114 
            v1115
    let v1123 : string = "&*$0"
    let v1124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1123 
    let v1125 : string = "inline_colorization::color_reset"
    let v1126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1125 
    let v1127 : string = "\"{v1122}{v1124}{v1126}\""
    let v1128 : string = @$"format!(" + v1127 + ")"
    let v1129 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1128 
    let v1130 : string = "fable_library_rust::String_::fromString($0)"
    let v1131 : string = Fable.Core.RustInterop.emitRustExpr v1129 v1130 
    v1131 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1146 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1140 : string = "inline_colorization::color_bright_red"
            let v1141 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1140 
            v1141
        | US0_1 -> (* Debug *)
            let v1134 : string = "inline_colorization::color_bright_blue"
            let v1135 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1134 
            v1135
        | US0_2 -> (* Info *)
            let v1136 : string = "inline_colorization::color_bright_green"
            let v1137 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1136 
            v1137
        | US0_0 -> (* Verbose *)
            let v1132 : string = "inline_colorization::color_bright_black"
            let v1133 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1132 
            v1133
        | US0_3 -> (* Warning *)
            let v1138 : string = "inline_colorization::color_yellow"
            let v1139 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1138 
            v1139
    let v1147 : string = "&*$0"
    let v1148 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1147 
    let v1149 : string = "inline_colorization::color_reset"
    let v1150 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1149 
    let v1151 : string = "\"{v1146}{v1148}{v1150}\""
    let v1152 : string = @$"format!(" + v1151 + ")"
    let v1153 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1152 
    let v1154 : string = "fable_library_rust::String_::fromString($0)"
    let v1155 : string = Fable.Core.RustInterop.emitRustExpr v1153 v1154 
    v1155 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1165 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1160 : string = "\u001b[91m"
            v1160
        | US0_1 -> (* Debug *)
            let v1157 : string = "\u001b[94m"
            v1157
        | US0_2 -> (* Info *)
            let v1158 : string = "\u001b[92m"
            v1158
        | US0_0 -> (* Verbose *)
            let v1156 : string = "\u001b[90m"
            v1156
        | US0_3 -> (* Warning *)
            let v1159 : string = "\u001b[93m"
            v1159
    let v1166 : string = method8()
    let v1167 : string = v1165 + v1051 
    let v1168 : string = v1167 + v1166 
    v1168 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1178 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1173 : string = "\u001b[91m"
            v1173
        | US0_1 -> (* Debug *)
            let v1170 : string = "\u001b[94m"
            v1170
        | US0_2 -> (* Info *)
            let v1171 : string = "\u001b[92m"
            v1171
        | US0_0 -> (* Verbose *)
            let v1169 : string = "\u001b[90m"
            v1169
        | US0_3 -> (* Warning *)
            let v1172 : string = "\u001b[93m"
            v1172
    let v1179 : string = method8()
    let v1180 : string = v1178 + v1051 
    let v1181 : string = v1180 + v1179 
    v1181 
    #endif
#else
    let v1191 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1186 : string = "\u001b[91m"
            v1186
        | US0_1 -> (* Debug *)
            let v1183 : string = "\u001b[94m"
            v1183
        | US0_2 -> (* Info *)
            let v1184 : string = "\u001b[92m"
            v1184
        | US0_0 -> (* Verbose *)
            let v1182 : string = "\u001b[90m"
            v1182
        | US0_3 -> (* Warning *)
            let v1185 : string = "\u001b[93m"
            v1185
    let v1192 : string = method8()
    let v1193 : string = v1191 + v1051 
    let v1194 : string = v1193 + v1192 
    v1194 
    #endif
    |> fun x -> _v1083 <- Some x
    let v1195 : string = match _v1083 with Some x -> x | None -> failwith "base.run_target / _v1083=None"
    let v1214 : int64 = v14.l0
    let v1215 : string = v2 ()
    let v1216 : string = ""
    let v1217 : Mut4 = {l0 = v1216} : Mut4
    method204(v1217, v1215)
    let v1218 : string = v1217.l0
    let v1221 : string = $"{v826} {v1195} #{v1214} %s{v1 ()} / {v1218}"
    let v1228 : char list = []
    let v1233 : (char list -> (char [])) = List.toArray
    let v1234 : (char []) = v1233 v1228
    let v1241 : string = v1221.TrimStart v1234 
    let v1280 : char list = []
    let v1283 : char list = '/' :: v1280 
    let v1292 : char list = ' ' :: v1283 
    let v1303 : (char list -> (char [])) = List.toArray
    let v1304 : (char []) = v1303 v1292
    let v1311 : string = v1241.TrimEnd v1304 
    v1311
and method203 (v0 : US0, v1 : (unit -> string), v2 : (unit -> string)) : unit =
    let v3 : (unit -> string) = closure144(v0, v1, v2)
    method13(v0, v3)
and method205 (v0 : UH5, v1 : UH5) : UH5 =
    match v0 with
    | UH5_1(v2, v3, v4) -> (* Cons *)
        let v5 : UH5 = method205(v4, v1)
        UH5_1(v2, v3, v5)
    | UH5_0 -> (* Nil *)
        v1
and method206 (v0 : UH5, v1 : struct (string * string) list) : struct (string * string) list =
    match v0 with
    | UH5_1(v2, v3, v4) -> (* Cons *)
        let v5 : struct (string * string) list = method206(v4, v1)
        let v8 : struct (string * string) list = struct (v2, v3) :: v5 
        v8
    | UH5_0 -> (* Nil *)
        v1
and closure145 (v0 : string) () : string =
    let v1 : string = "\n"
    let v2 : (string []) = v0.Split v1 
    let v5 : string seq = v2 |> Seq.ofArray
    let v14 : (string -> (string seq -> string)) = String.concat
    let v15 : (string seq -> string) = v14 v1
    v15 v5
and closure147 () () : string =
    let v0 : string = "spiral_builder.process_typescript / Exception"
    v0
and closure148 (v0 : string, v1 : string, v2 : string, v3 : exn) () : struct (exn * string * string * string) =
    struct (v3, v0, v2, v1)
and method208 (v0 : Mut4, v1 : exn, v2 : string, v3 : string, v4 : string) : unit =
    let v5 : string = "{ "
    method10(v0, v5)
    method11(v0)
    let v6 : string = "ex"
    method10(v0, v6)
    let v7 : string = " = "
    method10(v0, v7)
    method124(v0, v1)
    let v8 : string = "; "
    method10(v0, v8)
    let v9 : string = "new_code_path"
    method10(v0, v9)
    method10(v0, v7)
    method10(v0, v2)
    method10(v0, v8)
    let v10 : string = "external_command"
    method10(v0, v10)
    method10(v0, v7)
    method10(v0, v3)
    method10(v0, v8)
    let v11 : string = "run_result"
    method10(v0, v11)
    method10(v0, v7)
    method10(v0, v4)
    let v12 : string = " }"
    method10(v0, v12)
and closure149 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (exn * string * string * string))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = $"near_sdk::env::block_timestamp()"
    let v331 : uint64 = Fable.Core.RustInterop.emitRustExpr () v330 
    let v334 : US2 option = None
    let _v334 = ref v334 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v335 : int64 = x
    let v336 : US2 = US2_0(v335)
    v336 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v334.Value <- x
    let v337 : US2 option = _v334.Value 
    let v360 : US2 = US2_1
    let v361 : US2 = v337 |> Option.defaultValue v360 
    let v374 : uint64 =
        match v361 with
        | US2_1 -> (* None *)
            v331
        | US2_0(v369) -> (* Some *)
            let v370 : (int64 -> uint64) = uint64
            let v371 : uint64 = v370 v369
            let v372 : uint64 = v331 - v371
            v372
    let v375 : uint64 = v374 / 1000000000UL
    let v376 : uint64 = v375 % 60UL
    let v377 : uint64 = v375 / 60UL
    let v378 : uint64 = v377 % 60UL
    let v379 : uint64 = v375 / 3600UL
    let v380 : uint64 = v379 % 24UL
    let v381 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v382 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v380, v378, v376) v381 
    let v383 : string = "fable_library_rust::String_::fromString($0)"
    let v384 : string = Fable.Core.RustInterop.emitRustExpr v382 v383 
    v384 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v387 : US2 option = None
    let _v387 = ref v387 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v388 : int64 = x
    let v389 : US2 = US2_0(v388)
    v389 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v387.Value <- x
    let v390 : US2 option = _v387.Value 
    let v413 : US2 = US2_1
    let v414 : US2 = v390 |> Option.defaultValue v413 
    let v512 : System.DateTime =
        match v414 with
        | US2_1 -> (* None *)
            let v504 : System.DateTime = System.DateTime.Now
            v504
        | US2_0(v422) -> (* Some *)
            let v425 : System.DateTime = System.DateTime.Now
            let v434 : (System.DateTime -> int64) = _.Ticks
            let v435 : int64 = v434 v425
            let v442 : int64 = v435 - v422
            let v445 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v446 : System.TimeSpan = v445 v442
            let v455 : (System.TimeSpan -> int32) = _.Hours
            let v456 : int32 = v455 v446
            let v465 : (System.TimeSpan -> int32) = _.Minutes
            let v466 : int32 = v465 v446
            let v475 : (System.TimeSpan -> int32) = _.Seconds
            let v476 : int32 = v475 v446
            let v485 : (System.TimeSpan -> int32) = _.Milliseconds
            let v486 : int32 = v485 v446
            let v495 : System.DateTime = System.DateTime (1, 1, 1, v456, v466, v476, v486)
            v495
    let v515 : string = method7()
    let v524 : (string -> string) = v512.ToString
    let v525 : string = v524 v515
    v525 
    #endif
#if FABLE_COMPILER_PYTHON
    let v534 : US2 option = None
    let _v534 = ref v534 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v535 : int64 = x
    let v536 : US2 = US2_0(v535)
    v536 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v534.Value <- x
    let v537 : US2 option = _v534.Value 
    let v560 : US2 = US2_1
    let v561 : US2 = v537 |> Option.defaultValue v560 
    let v659 : System.DateTime =
        match v561 with
        | US2_1 -> (* None *)
            let v651 : System.DateTime = System.DateTime.Now
            v651
        | US2_0(v569) -> (* Some *)
            let v572 : System.DateTime = System.DateTime.Now
            let v581 : (System.DateTime -> int64) = _.Ticks
            let v582 : int64 = v581 v572
            let v589 : int64 = v582 - v569
            let v592 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v593 : System.TimeSpan = v592 v589
            let v602 : (System.TimeSpan -> int32) = _.Hours
            let v603 : int32 = v602 v593
            let v612 : (System.TimeSpan -> int32) = _.Minutes
            let v613 : int32 = v612 v593
            let v622 : (System.TimeSpan -> int32) = _.Seconds
            let v623 : int32 = v622 v593
            let v632 : (System.TimeSpan -> int32) = _.Milliseconds
            let v633 : int32 = v632 v593
            let v642 : System.DateTime = System.DateTime (1, 1, 1, v603, v613, v623, v633)
            v642
    let v662 : string = method7()
    let v671 : (string -> string) = v659.ToString
    let v672 : string = v671 v662
    v672 
    #endif
#else
    let v681 : US2 option = None
    let _v681 = ref v681 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v682 : int64 = x
    let v683 : US2 = US2_0(v682)
    v683 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v681.Value <- x
    let v684 : US2 option = _v681.Value 
    let v707 : US2 = US2_1
    let v708 : US2 = v684 |> Option.defaultValue v707 
    let v806 : System.DateTime =
        match v708 with
        | US2_1 -> (* None *)
            let v798 : System.DateTime = System.DateTime.Now
            v798
        | US2_0(v716) -> (* Some *)
            let v719 : System.DateTime = System.DateTime.Now
            let v728 : (System.DateTime -> int64) = _.Ticks
            let v729 : int64 = v728 v719
            let v736 : int64 = v729 - v716
            let v739 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v740 : System.TimeSpan = v739 v736
            let v749 : (System.TimeSpan -> int32) = _.Hours
            let v750 : int32 = v749 v740
            let v759 : (System.TimeSpan -> int32) = _.Minutes
            let v760 : int32 = v759 v740
            let v769 : (System.TimeSpan -> int32) = _.Seconds
            let v770 : int32 = v769 v740
            let v779 : (System.TimeSpan -> int32) = _.Milliseconds
            let v780 : int32 = v779 v740
            let v789 : System.DateTime = System.DateTime (1, 1, 1, v750, v760, v770, v780)
            v789
    let v809 : string = method7()
    let v818 : (string -> string) = v806.ToString
    let v819 : string = v818 v809
    v819 
    #endif
    |> fun x -> _v35 <- Some x
    let v826 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v981 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v985 : US3 =
        if v981 then
            let v982 : string = "Verbose"
            US3_0(v982)
        else
            US3_1
    let v1034 : US3 =
        match v985 with
        | US3_1 -> (* None *)
            let v990 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v994 : US3 =
                if v990 then
                    let v991 : string = "Debug"
                    US3_0(v991)
                else
                    US3_1
            match v994 with
            | US3_1 -> (* None *)
                let v999 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v1003 : US3 =
                    if v999 then
                        let v1000 : string = "Info"
                        US3_0(v1000)
                    else
                        US3_1
                match v1003 with
                | US3_1 -> (* None *)
                    let v1008 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v1012 : US3 =
                        if v1008 then
                            let v1009 : string = "Warning"
                            US3_0(v1009)
                        else
                            US3_1
                    match v1012 with
                    | US3_1 -> (* None *)
                        let v1017 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v1021 : US3 =
                            if v1017 then
                                let v1018 : string = "Critical"
                                US3_0(v1018)
                            else
                                US3_1
                        match v1021 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v1022) -> (* Some *)
                            US3_0(v1022)
                    | US3_0(v1013) -> (* Some *)
                        US3_0(v1013)
                | US3_0(v1004) -> (* Some *)
                    US3_0(v1004)
            | US3_0(v995) -> (* Some *)
                US3_0(v995)
        | US3_0(v986) -> (* Some *)
            US3_0(v986)
    let v1038 : string =
        match v1034 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v1035) -> (* Some *)
            v1035
    let v1041 : (unit -> string) = v1038.ToLower
    let v1042 : string = v1041 ()
    let v1051 : string = v1042.PadLeft (7, ' ')
    let v1083 : bool = true
    let mutable _v1083 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1098 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1092 : string = "inline_colorization::color_bright_red"
            let v1093 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1092 
            v1093
        | US0_1 -> (* Debug *)
            let v1086 : string = "inline_colorization::color_bright_blue"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_2 -> (* Info *)
            let v1088 : string = "inline_colorization::color_bright_green"
            let v1089 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1088 
            v1089
        | US0_0 -> (* Verbose *)
            let v1084 : string = "inline_colorization::color_bright_black"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
        | US0_3 -> (* Warning *)
            let v1090 : string = "inline_colorization::color_yellow"
            let v1091 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1090 
            v1091
    let v1099 : string = "&*$0"
    let v1100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1099 
    let v1101 : string = "inline_colorization::color_reset"
    let v1102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1101 
    let v1103 : string = "\"{v1098}{v1100}{v1102}\""
    let v1104 : string = @$"format!(" + v1103 + ")"
    let v1105 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1104 
    let v1106 : string = "fable_library_rust::String_::fromString($0)"
    let v1107 : string = Fable.Core.RustInterop.emitRustExpr v1105 v1106 
    v1107 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1122 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1116 : string = "inline_colorization::color_bright_red"
            let v1117 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1116 
            v1117
        | US0_1 -> (* Debug *)
            let v1110 : string = "inline_colorization::color_bright_blue"
            let v1111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1110 
            v1111
        | US0_2 -> (* Info *)
            let v1112 : string = "inline_colorization::color_bright_green"
            let v1113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1112 
            v1113
        | US0_0 -> (* Verbose *)
            let v1108 : string = "inline_colorization::color_bright_black"
            let v1109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1108 
            v1109
        | US0_3 -> (* Warning *)
            let v1114 : string = "inline_colorization::color_yellow"
            let v1115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1114 
            v1115
    let v1123 : string = "&*$0"
    let v1124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1123 
    let v1125 : string = "inline_colorization::color_reset"
    let v1126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1125 
    let v1127 : string = "\"{v1122}{v1124}{v1126}\""
    let v1128 : string = @$"format!(" + v1127 + ")"
    let v1129 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1128 
    let v1130 : string = "fable_library_rust::String_::fromString($0)"
    let v1131 : string = Fable.Core.RustInterop.emitRustExpr v1129 v1130 
    v1131 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1146 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1140 : string = "inline_colorization::color_bright_red"
            let v1141 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1140 
            v1141
        | US0_1 -> (* Debug *)
            let v1134 : string = "inline_colorization::color_bright_blue"
            let v1135 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1134 
            v1135
        | US0_2 -> (* Info *)
            let v1136 : string = "inline_colorization::color_bright_green"
            let v1137 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1136 
            v1137
        | US0_0 -> (* Verbose *)
            let v1132 : string = "inline_colorization::color_bright_black"
            let v1133 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1132 
            v1133
        | US0_3 -> (* Warning *)
            let v1138 : string = "inline_colorization::color_yellow"
            let v1139 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1138 
            v1139
    let v1147 : string = "&*$0"
    let v1148 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1147 
    let v1149 : string = "inline_colorization::color_reset"
    let v1150 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1149 
    let v1151 : string = "\"{v1146}{v1148}{v1150}\""
    let v1152 : string = @$"format!(" + v1151 + ")"
    let v1153 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1152 
    let v1154 : string = "fable_library_rust::String_::fromString($0)"
    let v1155 : string = Fable.Core.RustInterop.emitRustExpr v1153 v1154 
    v1155 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1165 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1160 : string = "\u001b[91m"
            v1160
        | US0_1 -> (* Debug *)
            let v1157 : string = "\u001b[94m"
            v1157
        | US0_2 -> (* Info *)
            let v1158 : string = "\u001b[92m"
            v1158
        | US0_0 -> (* Verbose *)
            let v1156 : string = "\u001b[90m"
            v1156
        | US0_3 -> (* Warning *)
            let v1159 : string = "\u001b[93m"
            v1159
    let v1166 : string = method8()
    let v1167 : string = v1165 + v1051 
    let v1168 : string = v1167 + v1166 
    v1168 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1178 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1173 : string = "\u001b[91m"
            v1173
        | US0_1 -> (* Debug *)
            let v1170 : string = "\u001b[94m"
            v1170
        | US0_2 -> (* Info *)
            let v1171 : string = "\u001b[92m"
            v1171
        | US0_0 -> (* Verbose *)
            let v1169 : string = "\u001b[90m"
            v1169
        | US0_3 -> (* Warning *)
            let v1172 : string = "\u001b[93m"
            v1172
    let v1179 : string = method8()
    let v1180 : string = v1178 + v1051 
    let v1181 : string = v1180 + v1179 
    v1181 
    #endif
#else
    let v1191 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1186 : string = "\u001b[91m"
            v1186
        | US0_1 -> (* Debug *)
            let v1183 : string = "\u001b[94m"
            v1183
        | US0_2 -> (* Info *)
            let v1184 : string = "\u001b[92m"
            v1184
        | US0_0 -> (* Verbose *)
            let v1182 : string = "\u001b[90m"
            v1182
        | US0_3 -> (* Warning *)
            let v1185 : string = "\u001b[93m"
            v1185
    let v1192 : string = method8()
    let v1193 : string = v1191 + v1051 
    let v1194 : string = v1193 + v1192 
    v1194 
    #endif
    |> fun x -> _v1083 <- Some x
    let v1195 : string = match _v1083 with Some x -> x | None -> failwith "base.run_target / _v1083=None"
    let v1214 : int64 = v14.l0
    let struct (v1215 : exn, v1216 : string, v1217 : string, v1218 : string) = v2 ()
    let v1219 : string = ""
    let v1220 : Mut4 = {l0 = v1219} : Mut4
    method208(v1220, v1215, v1216, v1217, v1218)
    let v1221 : string = v1220.l0
    let v1224 : string = $"{v826} {v1195} #{v1214} %s{v1 ()} / {v1221}"
    let v1231 : char list = []
    let v1236 : (char list -> (char [])) = List.toArray
    let v1237 : (char []) = v1236 v1231
    let v1244 : string = v1224.TrimStart v1237 
    let v1283 : char list = []
    let v1286 : char list = '/' :: v1283 
    let v1295 : char list = ' ' :: v1286 
    let v1306 : (char list -> (char [])) = List.toArray
    let v1307 : (char []) = v1306 v1295
    let v1314 : string = v1244.TrimEnd v1307 
    v1314
and method207 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (exn * string * string * string))) : unit =
    let v3 : (unit -> string) = closure149(v0, v1, v2)
    method13(v0, v3)
and closure146 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US3 =
    let v4 : US0 = US0_4
    let v5 : (unit -> string) = closure147()
    let v6 : (unit -> struct (exn * string * string * string)) = closure148(v0, v1, v2, v3)
    method207(v4, v5, v6)
    US3_1
and closure150 () () : string =
    let v0 : string = "spiral_builder.process_typescript / error"
    v0
and closure151 (v0 : string, v1 : string, v2 : int32, v3 : string) () : struct (int32 * string * string * string) =
    struct (v2, v1, v0, v3)
and closure152 () () : string =
    let v0 : string = $"spiral_builder.process_python"
    v0
and closure153 (v0 : string, v1 : int32) () : struct (int32 * string) =
    struct (v1, v0)
and closure154 () () : string =
    let v0 : string = "spiral_builder.process_python"
    v0
and closure155 (v0 : string) () : string =
    v0
and closure156 (v0 : string) () : string =
    let v1 : string = "\n"
    let v2 : (string []) = v0.Split v1 
    let v5 : string seq = v2 |> Seq.ofArray
    let v14 : (string -> (string seq -> string)) = String.concat
    let v15 : (string seq -> string) = v14 v1
    v15 v5
and closure158 () () : string =
    let v0 : string = "spiral_builder.process_python / Exception"
    v0
and closure159 (v0 : string, v1 : string, v2 : string, v3 : exn) () : struct (exn * string * string * string) =
    struct (v3, v1, v0, v2)
and closure157 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US3 =
    let v4 : US0 = US0_4
    let v5 : (unit -> string) = closure158()
    let v6 : (unit -> struct (exn * string * string * string)) = closure159(v0, v1, v2, v3)
    method122(v4, v5, v6)
    US3_1
and closure160 () () : string =
    let v0 : string = "spiral_builder.process_python / error"
    v0
and closure161 (v0 : string, v1 : string, v2 : int32, v3 : string) () : struct (int32 * string * string * string) =
    struct (v2, v1, v0, v3)
and closure162 () () : string =
    let v0 : string = "spiral_builder.run / invalid subcommand"
    v0
and closure163 (v0 : clap_ArgMatches, v1 : std_string_String) () : struct (std_string_String * clap_ArgMatches) =
    struct (v1, v0)
and method211 (v0 : Mut4, v1 : clap_ArgMatches) : unit =
    let v4 : string = $"%A{v1}"
    method10(v0, v4)
and method210 (v0 : Mut4, v1 : std_string_String, v2 : clap_ArgMatches) : unit =
    let v3 : string = "{ "
    method10(v0, v3)
    method11(v0)
    let v4 : string = "subcommand"
    method10(v0, v4)
    let v5 : string = " = "
    method10(v0, v5)
    method39(v0, v1)
    let v6 : string = "; "
    method10(v0, v6)
    let v7 : string = "arg_matches"
    method10(v0, v7)
    method10(v0, v5)
    method211(v0, v2)
    let v8 : string = " }"
    method10(v0, v8)
and closure164 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (std_string_String * clap_ArgMatches))) () : string =
    let v5 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v6 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v5 v6 |> Some
    let struct (v14 : Mut0, v15 : Mut1, v16 : Mut2, v17 : Mut3, v18 : int64 option) = State.trace_state.Value
    let v35 : bool = true
    let mutable _v35 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : US2 option = None
    let _v38 = ref v38 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v39 : int64 = x
    let v40 : US2 = US2_0(v39)
    v40 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v38.Value <- x
    let v41 : US2 option = _v38.Value 
    let v64 : US2 = US2_1
    let v65 : US2 = v41 |> Option.defaultValue v64 
    let v163 : System.DateTime =
        match v65 with
        | US2_1 -> (* None *)
            let v155 : System.DateTime = System.DateTime.Now
            v155
        | US2_0(v73) -> (* Some *)
            let v76 : System.DateTime = System.DateTime.Now
            let v85 : (System.DateTime -> int64) = _.Ticks
            let v86 : int64 = v85 v76
            let v93 : int64 = v86 - v73
            let v96 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v97 : System.TimeSpan = v96 v93
            let v106 : (System.TimeSpan -> int32) = _.Hours
            let v107 : int32 = v106 v97
            let v116 : (System.TimeSpan -> int32) = _.Minutes
            let v117 : int32 = v116 v97
            let v126 : (System.TimeSpan -> int32) = _.Seconds
            let v127 : int32 = v126 v97
            let v136 : (System.TimeSpan -> int32) = _.Milliseconds
            let v137 : int32 = v136 v97
            let v146 : System.DateTime = System.DateTime (1, 1, 1, v107, v117, v127, v137)
            v146
    let v166 : string = method6()
    let v175 : (string -> string) = v163.ToString
    let v176 : string = v175 v166
    v176 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v185 : US2 option = None
    let _v185 = ref v185 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v186 : int64 = x
    let v187 : US2 = US2_0(v186)
    v187 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v185.Value <- x
    let v188 : US2 option = _v185.Value 
    let v211 : US2 = US2_1
    let v212 : US2 = v188 |> Option.defaultValue v211 
    let v310 : System.DateTime =
        match v212 with
        | US2_1 -> (* None *)
            let v302 : System.DateTime = System.DateTime.Now
            v302
        | US2_0(v220) -> (* Some *)
            let v223 : System.DateTime = System.DateTime.Now
            let v232 : (System.DateTime -> int64) = _.Ticks
            let v233 : int64 = v232 v223
            let v240 : int64 = v233 - v220
            let v243 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v244 : System.TimeSpan = v243 v240
            let v253 : (System.TimeSpan -> int32) = _.Hours
            let v254 : int32 = v253 v244
            let v263 : (System.TimeSpan -> int32) = _.Minutes
            let v264 : int32 = v263 v244
            let v273 : (System.TimeSpan -> int32) = _.Seconds
            let v274 : int32 = v273 v244
            let v283 : (System.TimeSpan -> int32) = _.Milliseconds
            let v284 : int32 = v283 v244
            let v293 : System.DateTime = System.DateTime (1, 1, 1, v254, v264, v274, v284)
            v293
    let v313 : string = method6()
    let v322 : (string -> string) = v310.ToString
    let v323 : string = v322 v313
    v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v330 : string = $"near_sdk::env::block_timestamp()"
    let v331 : uint64 = Fable.Core.RustInterop.emitRustExpr () v330 
    let v334 : US2 option = None
    let _v334 = ref v334 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v335 : int64 = x
    let v336 : US2 = US2_0(v335)
    v336 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v334.Value <- x
    let v337 : US2 option = _v334.Value 
    let v360 : US2 = US2_1
    let v361 : US2 = v337 |> Option.defaultValue v360 
    let v374 : uint64 =
        match v361 with
        | US2_1 -> (* None *)
            v331
        | US2_0(v369) -> (* Some *)
            let v370 : (int64 -> uint64) = uint64
            let v371 : uint64 = v370 v369
            let v372 : uint64 = v331 - v371
            v372
    let v375 : uint64 = v374 / 1000000000UL
    let v376 : uint64 = v375 % 60UL
    let v377 : uint64 = v375 / 60UL
    let v378 : uint64 = v377 % 60UL
    let v379 : uint64 = v375 / 3600UL
    let v380 : uint64 = v379 % 24UL
    let v381 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v382 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v380, v378, v376) v381 
    let v383 : string = "fable_library_rust::String_::fromString($0)"
    let v384 : string = Fable.Core.RustInterop.emitRustExpr v382 v383 
    v384 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v387 : US2 option = None
    let _v387 = ref v387 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v388 : int64 = x
    let v389 : US2 = US2_0(v388)
    v389 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v387.Value <- x
    let v390 : US2 option = _v387.Value 
    let v413 : US2 = US2_1
    let v414 : US2 = v390 |> Option.defaultValue v413 
    let v512 : System.DateTime =
        match v414 with
        | US2_1 -> (* None *)
            let v504 : System.DateTime = System.DateTime.Now
            v504
        | US2_0(v422) -> (* Some *)
            let v425 : System.DateTime = System.DateTime.Now
            let v434 : (System.DateTime -> int64) = _.Ticks
            let v435 : int64 = v434 v425
            let v442 : int64 = v435 - v422
            let v445 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v446 : System.TimeSpan = v445 v442
            let v455 : (System.TimeSpan -> int32) = _.Hours
            let v456 : int32 = v455 v446
            let v465 : (System.TimeSpan -> int32) = _.Minutes
            let v466 : int32 = v465 v446
            let v475 : (System.TimeSpan -> int32) = _.Seconds
            let v476 : int32 = v475 v446
            let v485 : (System.TimeSpan -> int32) = _.Milliseconds
            let v486 : int32 = v485 v446
            let v495 : System.DateTime = System.DateTime (1, 1, 1, v456, v466, v476, v486)
            v495
    let v515 : string = method7()
    let v524 : (string -> string) = v512.ToString
    let v525 : string = v524 v515
    v525 
    #endif
#if FABLE_COMPILER_PYTHON
    let v534 : US2 option = None
    let _v534 = ref v534 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v535 : int64 = x
    let v536 : US2 = US2_0(v535)
    v536 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v534.Value <- x
    let v537 : US2 option = _v534.Value 
    let v560 : US2 = US2_1
    let v561 : US2 = v537 |> Option.defaultValue v560 
    let v659 : System.DateTime =
        match v561 with
        | US2_1 -> (* None *)
            let v651 : System.DateTime = System.DateTime.Now
            v651
        | US2_0(v569) -> (* Some *)
            let v572 : System.DateTime = System.DateTime.Now
            let v581 : (System.DateTime -> int64) = _.Ticks
            let v582 : int64 = v581 v572
            let v589 : int64 = v582 - v569
            let v592 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v593 : System.TimeSpan = v592 v589
            let v602 : (System.TimeSpan -> int32) = _.Hours
            let v603 : int32 = v602 v593
            let v612 : (System.TimeSpan -> int32) = _.Minutes
            let v613 : int32 = v612 v593
            let v622 : (System.TimeSpan -> int32) = _.Seconds
            let v623 : int32 = v622 v593
            let v632 : (System.TimeSpan -> int32) = _.Milliseconds
            let v633 : int32 = v632 v593
            let v642 : System.DateTime = System.DateTime (1, 1, 1, v603, v613, v623, v633)
            v642
    let v662 : string = method7()
    let v671 : (string -> string) = v659.ToString
    let v672 : string = v671 v662
    v672 
    #endif
#else
    let v681 : US2 option = None
    let _v681 = ref v681 
    match v18 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v682 : int64 = x
    let v683 : US2 = US2_0(v682)
    v683 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v681.Value <- x
    let v684 : US2 option = _v681.Value 
    let v707 : US2 = US2_1
    let v708 : US2 = v684 |> Option.defaultValue v707 
    let v806 : System.DateTime =
        match v708 with
        | US2_1 -> (* None *)
            let v798 : System.DateTime = System.DateTime.Now
            v798
        | US2_0(v716) -> (* Some *)
            let v719 : System.DateTime = System.DateTime.Now
            let v728 : (System.DateTime -> int64) = _.Ticks
            let v729 : int64 = v728 v719
            let v736 : int64 = v729 - v716
            let v739 : (int64 -> System.TimeSpan) = System.TimeSpan 
            let v740 : System.TimeSpan = v739 v736
            let v749 : (System.TimeSpan -> int32) = _.Hours
            let v750 : int32 = v749 v740
            let v759 : (System.TimeSpan -> int32) = _.Minutes
            let v760 : int32 = v759 v740
            let v769 : (System.TimeSpan -> int32) = _.Seconds
            let v770 : int32 = v769 v740
            let v779 : (System.TimeSpan -> int32) = _.Milliseconds
            let v780 : int32 = v779 v740
            let v789 : System.DateTime = System.DateTime (1, 1, 1, v750, v760, v770, v780)
            v789
    let v809 : string = method7()
    let v818 : (string -> string) = v806.ToString
    let v819 : string = v818 v809
    v819 
    #endif
    |> fun x -> _v35 <- Some x
    let v826 : string = match _v35 with Some x -> x | None -> failwith "base.run_target / _v35=None"
    let v981 : bool =
        match v0 with
        | US0_0 -> (* Verbose *)
            true
        | _ ->
            false
    let v985 : US3 =
        if v981 then
            let v982 : string = "Verbose"
            US3_0(v982)
        else
            US3_1
    let v1034 : US3 =
        match v985 with
        | US3_1 -> (* None *)
            let v990 : bool =
                match v0 with
                | US0_1 -> (* Debug *)
                    true
                | _ ->
                    false
            let v994 : US3 =
                if v990 then
                    let v991 : string = "Debug"
                    US3_0(v991)
                else
                    US3_1
            match v994 with
            | US3_1 -> (* None *)
                let v999 : bool =
                    match v0 with
                    | US0_2 -> (* Info *)
                        true
                    | _ ->
                        false
                let v1003 : US3 =
                    if v999 then
                        let v1000 : string = "Info"
                        US3_0(v1000)
                    else
                        US3_1
                match v1003 with
                | US3_1 -> (* None *)
                    let v1008 : bool =
                        match v0 with
                        | US0_3 -> (* Warning *)
                            true
                        | _ ->
                            false
                    let v1012 : US3 =
                        if v1008 then
                            let v1009 : string = "Warning"
                            US3_0(v1009)
                        else
                            US3_1
                    match v1012 with
                    | US3_1 -> (* None *)
                        let v1017 : bool =
                            match v0 with
                            | US0_4 -> (* Critical *)
                                true
                            | _ ->
                                false
                        let v1021 : US3 =
                            if v1017 then
                                let v1018 : string = "Critical"
                                US3_0(v1018)
                            else
                                US3_1
                        match v1021 with
                        | US3_1 -> (* None *)
                            US3_1
                        | US3_0(v1022) -> (* Some *)
                            US3_0(v1022)
                    | US3_0(v1013) -> (* Some *)
                        US3_0(v1013)
                | US3_0(v1004) -> (* Some *)
                    US3_0(v1004)
            | US3_0(v995) -> (* Some *)
                US3_0(v995)
        | US3_0(v986) -> (* Some *)
            US3_0(v986)
    let v1038 : string =
        match v1034 with
        | US3_1 -> (* None *)
            failwith<string> "Option does not have a value."
        | US3_0(v1035) -> (* Some *)
            v1035
    let v1041 : (unit -> string) = v1038.ToLower
    let v1042 : string = v1041 ()
    let v1051 : string = v1042.PadLeft (7, ' ')
    let v1083 : bool = true
    let mutable _v1083 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1098 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1092 : string = "inline_colorization::color_bright_red"
            let v1093 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1092 
            v1093
        | US0_1 -> (* Debug *)
            let v1086 : string = "inline_colorization::color_bright_blue"
            let v1087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1086 
            v1087
        | US0_2 -> (* Info *)
            let v1088 : string = "inline_colorization::color_bright_green"
            let v1089 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1088 
            v1089
        | US0_0 -> (* Verbose *)
            let v1084 : string = "inline_colorization::color_bright_black"
            let v1085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1084 
            v1085
        | US0_3 -> (* Warning *)
            let v1090 : string = "inline_colorization::color_yellow"
            let v1091 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1090 
            v1091
    let v1099 : string = "&*$0"
    let v1100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1099 
    let v1101 : string = "inline_colorization::color_reset"
    let v1102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1101 
    let v1103 : string = "\"{v1098}{v1100}{v1102}\""
    let v1104 : string = @$"format!(" + v1103 + ")"
    let v1105 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1104 
    let v1106 : string = "fable_library_rust::String_::fromString($0)"
    let v1107 : string = Fable.Core.RustInterop.emitRustExpr v1105 v1106 
    v1107 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1122 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1116 : string = "inline_colorization::color_bright_red"
            let v1117 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1116 
            v1117
        | US0_1 -> (* Debug *)
            let v1110 : string = "inline_colorization::color_bright_blue"
            let v1111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1110 
            v1111
        | US0_2 -> (* Info *)
            let v1112 : string = "inline_colorization::color_bright_green"
            let v1113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1112 
            v1113
        | US0_0 -> (* Verbose *)
            let v1108 : string = "inline_colorization::color_bright_black"
            let v1109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1108 
            v1109
        | US0_3 -> (* Warning *)
            let v1114 : string = "inline_colorization::color_yellow"
            let v1115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1114 
            v1115
    let v1123 : string = "&*$0"
    let v1124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1123 
    let v1125 : string = "inline_colorization::color_reset"
    let v1126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1125 
    let v1127 : string = "\"{v1122}{v1124}{v1126}\""
    let v1128 : string = @$"format!(" + v1127 + ")"
    let v1129 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1128 
    let v1130 : string = "fable_library_rust::String_::fromString($0)"
    let v1131 : string = Fable.Core.RustInterop.emitRustExpr v1129 v1130 
    v1131 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1146 : Ref<Str> =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1140 : string = "inline_colorization::color_bright_red"
            let v1141 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1140 
            v1141
        | US0_1 -> (* Debug *)
            let v1134 : string = "inline_colorization::color_bright_blue"
            let v1135 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1134 
            v1135
        | US0_2 -> (* Info *)
            let v1136 : string = "inline_colorization::color_bright_green"
            let v1137 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1136 
            v1137
        | US0_0 -> (* Verbose *)
            let v1132 : string = "inline_colorization::color_bright_black"
            let v1133 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1132 
            v1133
        | US0_3 -> (* Warning *)
            let v1138 : string = "inline_colorization::color_yellow"
            let v1139 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1138 
            v1139
    let v1147 : string = "&*$0"
    let v1148 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1147 
    let v1149 : string = "inline_colorization::color_reset"
    let v1150 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1149 
    let v1151 : string = "\"{v1146}{v1148}{v1150}\""
    let v1152 : string = @$"format!(" + v1151 + ")"
    let v1153 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1152 
    let v1154 : string = "fable_library_rust::String_::fromString($0)"
    let v1155 : string = Fable.Core.RustInterop.emitRustExpr v1153 v1154 
    v1155 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1165 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1160 : string = "\u001b[91m"
            v1160
        | US0_1 -> (* Debug *)
            let v1157 : string = "\u001b[94m"
            v1157
        | US0_2 -> (* Info *)
            let v1158 : string = "\u001b[92m"
            v1158
        | US0_0 -> (* Verbose *)
            let v1156 : string = "\u001b[90m"
            v1156
        | US0_3 -> (* Warning *)
            let v1159 : string = "\u001b[93m"
            v1159
    let v1166 : string = method8()
    let v1167 : string = v1165 + v1051 
    let v1168 : string = v1167 + v1166 
    v1168 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1178 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1173 : string = "\u001b[91m"
            v1173
        | US0_1 -> (* Debug *)
            let v1170 : string = "\u001b[94m"
            v1170
        | US0_2 -> (* Info *)
            let v1171 : string = "\u001b[92m"
            v1171
        | US0_0 -> (* Verbose *)
            let v1169 : string = "\u001b[90m"
            v1169
        | US0_3 -> (* Warning *)
            let v1172 : string = "\u001b[93m"
            v1172
    let v1179 : string = method8()
    let v1180 : string = v1178 + v1051 
    let v1181 : string = v1180 + v1179 
    v1181 
    #endif
#else
    let v1191 : string =
        match v0 with
        | US0_4 -> (* Critical *)
            let v1186 : string = "\u001b[91m"
            v1186
        | US0_1 -> (* Debug *)
            let v1183 : string = "\u001b[94m"
            v1183
        | US0_2 -> (* Info *)
            let v1184 : string = "\u001b[92m"
            v1184
        | US0_0 -> (* Verbose *)
            let v1182 : string = "\u001b[90m"
            v1182
        | US0_3 -> (* Warning *)
            let v1185 : string = "\u001b[93m"
            v1185
    let v1192 : string = method8()
    let v1193 : string = v1191 + v1051 
    let v1194 : string = v1193 + v1192 
    v1194 
    #endif
    |> fun x -> _v1083 <- Some x
    let v1195 : string = match _v1083 with Some x -> x | None -> failwith "base.run_target / _v1083=None"
    let v1214 : int64 = v14.l0
    let struct (v1215 : std_string_String, v1216 : clap_ArgMatches) = v2 ()
    let v1217 : string = ""
    let v1218 : Mut4 = {l0 = v1217} : Mut4
    method210(v1218, v1215, v1216)
    let v1219 : string = v1218.l0
    let v1222 : string = $"{v826} {v1195} #{v1214} %s{v1 ()} / {v1219}"
    let v1229 : char list = []
    let v1234 : (char list -> (char [])) = List.toArray
    let v1235 : (char []) = v1234 v1229
    let v1242 : string = v1222.TrimStart v1235 
    let v1281 : char list = []
    let v1284 : char list = '/' :: v1281 
    let v1293 : char list = ' ' :: v1284 
    let v1304 : (char list -> (char [])) = List.toArray
    let v1305 : (char []) = v1304 v1293
    let v1312 : string = v1242.TrimEnd v1305 
    v1312
and method209 (v0 : US0, v1 : (unit -> string), v2 : (unit -> struct (std_string_String * clap_ArgMatches))) : unit =
    let v3 : (unit -> string) = closure164(v0, v1, v2)
    method13(v0, v3)
and closure165 () struct (v0 : string, v1 : string) : (std_string_String * std_string_String) =
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v6 
    let v8 : string = "String::from($0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : (std_string_String * std_string_String) = v5, v9 
    v10
and closure166 () (v0 : serde_json_Error) : string =
    let v3 : bool = true
    let mutable _v3 : std_string_String option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    v5 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    v7 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    v9 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : std_string_String = null |> unbox<std_string_String>
    v12 
    #endif
#if FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    v21 
    #endif
#else
    let v30 : std_string_String = null |> unbox<std_string_String>
    v30 
    #endif
    |> fun x -> _v3 <- Some x
    let v37 : std_string_String = match _v3 with Some x -> x | None -> failwith "base.run_target / _v3=None"
    let v52 : string = "fable_library_rust::String_::fromString($0)"
    let v53 : string = Fable.Core.RustInterop.emitRustExpr v37 v52 
    v53
and method212 () : (serde_json_Error -> string) =
    closure166()
and method213 (v0 : Result<string, string>) : Result<string, string> =
    v0
and method14 (v0 : US0, v1 : clap_ArgMatches) : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> =
    let v2 : string = "let __result = Box::pin(async move { //"
    Fable.Core.RustInterop.emitRustExpr () v2 
    let v3 : string = "clap::ArgMatches::subcommand(Box::leak(Box::new($0))).map(|(a, b)| ($1(a), b.clone()))"
    let v4 : (Ref<Str> -> std_string_String) = closure7()
    let v5 : struct (std_string_String * clap_ArgMatches) option = Fable.Core.RustInterop.emitRustExpr struct (v1, v4) v3 
    let v8 : US4 option = None
    let _v8 = ref v8 
    match v5 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let struct (v9 : std_string_String, v10 : clap_ArgMatches) = x
    let v11 : US4 = US4_0(v9, v10)
    v11 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> fun x -> _v8.Value <- x
    let v12 : US4 option = _v8.Value 
    let v36 : US4 = US4_1
    let v37 : US4 = v12 |> Option.defaultValue v36 
    let v4799 : (struct (string * string) []) =
        match v37 with
        | US4_0(v45, v46) -> (* Some *)
            let v47 : string = "fable_library_rust::String_::fromString($0)"
            let v48 : string = Fable.Core.RustInterop.emitRustExpr v45 v47 
            let v50 : bool = v48 = "cuda"
            if v50 then
                let v51 : string = method15()
                let v52 : string = "&*$0"
                let v53 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v51 v52 
                let v54 : string = "clap::ArgMatches::get_one(&$0, v53).cloned()"
                let v55 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v46 v54 
                let v58 : US5 option = None
                let _v58 = ref v58 
                match v55 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v59 : std_string_String = x
                let v60 : US5 = US5_0(v59)
                v60 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v58.Value <- x
                let v61 : US5 option = _v58.Value 
                let v84 : US5 = US5_1
                let v85 : US5 = v61 |> Option.defaultValue v84 
                let v96 : std_string_String =
                    match v85 with
                    | US5_1 -> (* None *)
                        failwith<std_string_String> "Option does not have a value."
                    | US5_0(v93) -> (* Some *)
                        v93
                let v97 : string = "fable_library_rust::String_::fromString($0)"
                let v98 : string = Fable.Core.RustInterop.emitRustExpr v96 v97 
                let v99 : string = method16()
                let v100 : string = "&*$0"
                let v101 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v99 v100 
                let v102 : string = "clap::ArgMatches::get_one(&$0, v101).cloned()"
                let v103 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v46 v102 
                let v106 : US5 option = None
                let _v106 = ref v106 
                match v103 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v107 : std_string_String = x
                let v108 : US5 = US5_0(v107)
                v108 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v106.Value <- x
                let v109 : US5 option = _v106.Value 
                let v132 : US5 = US5_1
                let v133 : US5 = v109 |> Option.defaultValue v132 
                let v168 : US6 =
                    match v133 with
                    | US5_1 -> (* None *)
                        US6_1
                    | US5_0(v141) -> (* Some *)
                        let v142 : string = "fable_library_rust::String_::fromString($0)"
                        let v143 : string = Fable.Core.RustInterop.emitRustExpr v141 v142 
                        let v145 : bool = "Pip" = v143
                        let v149 : US7 =
                            if v145 then
                                let v146 : US8 = US8_0
                                US7_0(v146)
                            else
                                US7_1
                        let v164 : US7 =
                            match v149 with
                            | US7_1 -> (* None *)
                                let v153 : bool = "Poetry" = v143
                                let v157 : US7 =
                                    if v153 then
                                        let v154 : US8 = US8_1
                                        US7_0(v154)
                                    else
                                        US7_1
                                match v157 with
                                | US7_1 -> (* None *)
                                    US7_1
                                | US7_0(v158) -> (* Some *)
                                    US7_0(v158)
                            | US7_0(v150) -> (* Some *)
                                US7_0(v150)
                        US6_0(v164)
                let v175 : US7 =
                    match v168 with
                    | US6_0(v169) -> (* Some *)
                        match v169 with
                        | US7_0(v170) -> (* Some *)
                            US7_0(v170)
                        | _ ->
                            US7_1
                    | _ ->
                        US7_1
                let v179 : US8 =
                    match v175 with
                    | US7_1 -> (* None *)
                        US8_0
                    | US7_0(v176) -> (* Some *)
                        v176
                let v180 : string = method17()
                let v181 : string = "&*$0"
                let v182 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v180 v181 
                let v183 : string = "clap::ArgMatches::get_many(&$0, v182).map(|x| x.cloned().into_iter().collect())"
                let v184 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr v46 v183 
                let v187 : US9 option = None
                let _v187 = ref v187 
                match v184 with
                | Some x -> (
                (fun () ->
                (fun () ->
                let v188 : Vec<std_string_String> = x
                let v189 : US9 = US9_0(v188)
                v189 
                )
                |> fun x -> x () |> Some
                ) () ) | None -> None
                |> fun x -> _v187.Value <- x
                let v190 : US9 option = _v187.Value 
                let v213 : US9 = US9_1
                let v214 : US9 = v190 |> Option.defaultValue v213 
                let v222 : (std_string_String []) = [||]
                let v223 : string = "$0.to_vec()"
                let v224 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v222 v223 
                let v227 : Vec<std_string_String> =
                    match v214 with
                    | US9_1 -> (* None *)
                        v224
                    | US9_0(v225) -> (* Some *)
                        v225
                let v230 : bool = true
                let mutable _v230 : string option = None 
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v233 : bool = true
                let mutable _v233 : Vec<uint8> option = None 
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v234 : string = "std::fs::read(&*$0).unwrap()"
                let v235 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v98 v234 
                v235 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v238 : Vec<uint8> = null |> unbox<Vec<uint8>>
                v238 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v247 : Vec<uint8> = null |> unbox<Vec<uint8>>
                v247 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v256 : Vec<uint8> = null |> unbox<Vec<uint8>>
                v256 
                #endif
#if FABLE_COMPILER_PYTHON
                let v265 : Vec<uint8> = null |> unbox<Vec<uint8>>
                v265 
                #endif
#else
                let v272 : (uint8 []) = v98 |> System.IO.File.ReadAllBytes
                let v273 : string = "$0.to_vec()"
                let v274 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v272 v273 
                v274 
                #endif
                |> fun x -> _v233 <- Some x
                let v275 : Vec<uint8> = match _v233 with Some x -> x | None -> failwith "base.run_target / _v233=None"
                let v290 : Vec<uint8> = method18(v275)
                let v291 : string = "std::string::String::from_utf8($0)"
                let v292 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v290 v291 
                let v293 : string = "$0.unwrap()"
                let v294 : std_string_String = Fable.Core.RustInterop.emitRustExpr v292 v293 
                let v295 : string = "fable_library_rust::String_::fromString($0)"
                let v296 : string = Fable.Core.RustInterop.emitRustExpr v294 v295 
                v296 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v299 : string = null |> unbox<string>
                v299 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v308 : string = null |> unbox<string>
                v308 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v317 : string = null |> unbox<string>
                v317 
                #endif
#if FABLE_COMPILER_PYTHON
                let v326 : string = null |> unbox<string>
                v326 
                #endif
#else
                let v333 : string = v98 |> System.IO.File.ReadAllText
                v333 
                #endif
                |> fun x -> _v230 <- Some x
                let v334 : string = match _v230 with Some x -> x | None -> failwith "base.run_target / _v230=None"
                let v349 : string = __SOURCE_DIRECTORY__
                let v350 : string = "polyglot"
                let v351 : string = ".devcontainer"
                let v352 : string = method19(v350, v351)
                let v353 : US12 = method22(v352, v349)
                let v362 : US3 =
                    match v353 with
                    | US12_1(v356) -> (* Error *)
                        let v357 : US0 = US0_3
                        let v358 : (unit -> string) = closure9()
                        let v359 : (unit -> string) = closure10(v356)
                        method27(v357, v358, v359)
                        US3_1
                    | US12_0(v354) -> (* Ok *)
                        US3_0(v354)
                let v378 : US3 =
                    match v362 with
                    | US3_1 -> (* None *)
                        let v365 : string = method29()
                        let v366 : string = method19(v350, v351)
                        let v367 : US12 = method22(v366, v365)
                        match v367 with
                        | US12_1(v370) -> (* Error *)
                            let v371 : US0 = US0_3
                            let v372 : (unit -> string) = closure9()
                            let v373 : (unit -> string) = closure10(v370)
                            method27(v371, v372, v373)
                            US3_1
                        | US12_0(v368) -> (* Ok *)
                            US3_0(v368)
                    | US3_0(v363) -> (* Some *)
                        US3_0(v363)
                let v382 : string =
                    match v378 with
                    | US3_1 -> (* None *)
                        failwith<string> "Option does not have a value."
                    | US3_0(v379) -> (* Some *)
                        v379
                let v383 : string = method19(v382, v350)
                let v384 : string = method29()
                let v387 : (unit -> string) = v384.ToLower
                let v388 : string = v387 ()
                let v397 : (unit -> string) = v383.ToLower
                let v398 : string = v397 ()
                let v405 : bool = v388.StartsWith v398 
                let v408 : US12 =
                    if v405 then
                        US12_1(v398)
                    else
                        US12_0(v398)
                let v414 : Result<string, string> =
                    match v408 with
                    | US12_1(v411) -> (* Error *)
                        let v412 : Result<string, string> = Error v411 
                        v412
                    | US12_0(v409) -> (* Ok *)
                        let v410 : Result<string, string> = Ok v409 
                        v410
                let v415 : string = "true; let _result = $0.unwrap_or_else(|x| { //"
                let v416 : bool = Fable.Core.RustInterop.emitRustExpr v414 v415 
                let v417 : string = "x"
                let v418 : string = Fable.Core.RustInterop.emitRustExpr () v417 
                let v419 : string = "true; $0 })"
                let v420 : bool = Fable.Core.RustInterop.emitRustExpr v418 v419 
                let v421 : string = "_result"
                let v422 : string = Fable.Core.RustInterop.emitRustExpr () v421 
                let v423 : string = method30(v98)
                let v429 : string =
                    match v179 with
                    | US8_0 -> (* Pip *)
                        let v424 : string = "requirements.txt"
                        method19(v423, v424)
                    | US8_1 -> (* Poetry *)
                        let v426 : string = "pyproject.toml"
                        method19(v423, v426)
                let v430 : string = "true; let _result : Vec<_> = v227.into_iter().map(|x| { //"
                let v431 : bool = Fable.Core.RustInterop.emitRustExpr () v430 
                let v432 : string = "x"
                let v433 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v432 
                let v434 : string = "fable_library_rust::String_::fromString($0)"
                let v435 : string = Fable.Core.RustInterop.emitRustExpr v433 v434 
                let v438 : string = "="
                let v439 : bool = v435.Contains v438 
                let v454 : string =
                    if v439 then
                        v435
                    else
                        let v446 : string = "]"
                        let v447 : bool = v435.EndsWith v446 
                        if v447 then
                            let v448 : string = $"={{version='*',features=["
                            let v449 : string = "["
                            let v450 : string = v435.Replace (v449, v448)
                            let v451 : string = $"{v450}}}"
                            v451
                        else
                            let v452 : string = $"{v435}='*'"
                            v452
                let v455 : string = "true; $0 }).collect::<Vec<_>>()"
                let v456 : bool = Fable.Core.RustInterop.emitRustExpr v454 v455 
                let v457 : string = "_result"
                let v458 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v457 
                let v459 : string = "fable_library_rust::NativeArray_::array_from($0)"
                let v460 : (string []) = Fable.Core.RustInterop.emitRustExpr v458 v459 
                let v463 : string seq = seq { for i = 0 to v460.Length - 1 do yield v460.[i] }
                let v472 : (string -> (string seq -> string)) = String.concat
                let v473 : string = "\n"
                let v474 : (string seq -> string) = v472 v473
                let v475 : string = v474 v463
                let v483 : bool = v475 = ""
                let struct (v545 : int32, v546 : string) =
                    if v483 then
                        let v484 : string = ""
                        struct (0, v484)
                    else
                        let v523 : string =
                            match v179 with
                            | US8_0 -> (* Pip *)
                                v475
                            | US8_1 -> (* Poetry *)
                                let v485 : string = $"[tool.poetry]"
                                let v486 : string = $"name = \"test\""
                                let v487 : string = v485 + v473 
                                let v488 : string = v487 + v486 
                                let v489 : string = $"version = \"0.0.1\""
                                let v490 : string = v488 + v473 
                                let v491 : string = v490 + v489 
                                let v492 : string = $"description = \"\""
                                let v493 : string = v491 + v473 
                                let v494 : string = v493 + v492 
                                let v495 : string = $"authors = []"
                                let v496 : string = v494 + v473 
                                let v497 : string = v496 + v495 
                                let v498 : string = $""
                                let v499 : string = v497 + v473 
                                let v500 : string = v499 + v498 
                                let v501 : string = $"[tool.poetry.dependencies]"
                                let v502 : string = v500 + v473 
                                let v503 : string = v502 + v501 
                                let v504 : string = $"python=\"~3.12\""
                                let v505 : string = v503 + v473 
                                let v506 : string = v505 + v504 
                                let v507 : string = $"{v475}"
                                let v508 : string = v506 + v473 
                                let v509 : string = v508 + v507 
                                let v510 : string = $""
                                let v511 : string = v509 + v473 
                                let v512 : string = v511 + v510 
                                let v513 : string = $"[build-system]"
                                let v514 : string = v512 + v473 
                                let v515 : string = v514 + v513 
                                let v516 : string = $"requires = [\"poetry-core\"]"
                                let v517 : string = v515 + v473 
                                let v518 : string = v517 + v516 
                                let v519 : string = $"build-backend = \"poetry.core.masonry.api\""
                                let v520 : string = v518 + v473 
                                let v521 : string = v520 + v519 
                                v521
                        method31(v429, v523)
                        let v524 : System.Threading.CancellationToken option = None
                        let v525 : (struct (string * string) []) = [||]
                        let v526 : (struct (int32 * string * bool) -> Async<unit>) option = None
                        let v527 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                        let v528 : string option = None
                        let v532 : string =
                            match v179 with
                            | US8_0 -> (* Pip *)
                                let v529 : string = $"pip install -r requirements.txt"
                                v529
                            | US8_1 -> (* Poetry *)
                                let v530 : string = $"poetry install"
                                v530
                        let v535 : string option = Some v423 
                        let v542 : bool = true
                        method55(v532, v524, v525, v526, v527, v542, v535)
                let v549 : bool = v545 <> 0 
                let struct (v673 : US3, v674 : US3, v675 : US3) =
                    if v549 then
                        let v556 : US0 = US0_4
                        let v557 : (unit -> string) = closure72()
                        let v558 : (unit -> struct (US8 * int32 * string * string)) = closure73(v179, v98, v546, v545)
                        method119(v556, v557, v558)
                        let v559 : string = "py"
                        let v560 : US3 = US3_0(v559)
                        let v561 : US3 = US3_1
                        let v562 : US3 = US3_1
                        struct (v560, v561, v562)
                    else
                        let v566 : string =
                            match v179 with
                            | US8_0 -> (* Pip *)
                                let v563 : string = $"python \"{v98}\""
                                v563
                            | US8_1 -> (* Poetry *)
                                let v564 : string = $"poetry run python \"{v98}\""
                                v564
                        let v567 : string = "TRACE_LEVEL"
                        let v568 : string = "Verbose"
                        let v569 : (struct (string * string) []) = [|struct (v567, v568)|]
                        let v570 : System.Threading.CancellationToken option = None
                        let v571 : (struct (string * string) []) = [||]
                        let v572 : (struct (int32 * string * bool) -> Async<unit>) option = None
                        let v573 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                        let v574 : string option = None
                        let v577 : string option = Some v423 
                        let v584 : bool = true
                        let struct (v585 : int32, v586 : string) = method55(v566, v570, v569, v572, v573, v584, v577)
                        let v587 : int32 = v569.Length
                        let v588 : (string []) = Array.zeroCreate<string> (v587)
                        let v589 : Mut5 = {l0 = 0} : Mut5
                        while method58(v587, v589) do
                            let v591 : int32 = v589.l0
                            let struct (v592 : string, v593 : string) = v569.[int v591]
                            let v594 : string = $"$env:{v592}=''{v593}''"
                            v588.[int v591] <- v594
                            let v595 : int32 = v591 + 1
                            v589.l0 <- v595
                            ()
                        let v598 : string seq = v588 |> Seq.ofArray
                        let v607 : (string -> (string seq -> string)) = String.concat
                        let v608 : string = ";"
                        let v609 : (string seq -> string) = v607 v608
                        let v610 : string = v609 v598
                        let v617 : string = $"pwsh -c '{v610}; {v566}'"
                        let v618 : bool = v585 = 0
                        let v629 : bool =
                            if v618 then
                                true
                            else
                                let v621 : string = "cupy_backends.cuda.api.runtime.CUDARuntimeError: cudaErrorInsufficientDriver"
                                let v622 : bool = v586.Contains v621 
                                v622
                        let struct (v670 : US3, v671 : US3, v672 : US3) =
                            if v629 then
                                let v632 : (string -> US3) = closure75()
                                let v633 : (unit -> string) = closure76(v586)
                                let v634 : (exn -> US3) = closure77(v98, v586, v617)
                                let v635 : US3 = US3_1
                                let result = ref v635
                                try
                                    result.Value <- v633 () |> v632 
                                with ex ->
                                    result.Value <- v634 ex 
                                let v636 : US3 = result.Value
                                let v656 : string option =
                                    match v636 with
                                    | US3_1 -> (* None *)
                                        let v654 : string option = None
                                        v654
                                    | US3_0(v644) -> (* Some *)
                                        let v647 : string option = Some v644 
                                        v647
                                let v657 : string = "$0.unwrap()"
                                let v658 : string = Fable.Core.RustInterop.emitRustExpr v656 v657 
                                let v659 : string = "py"
                                let v660 : US3 = US3_0(v659)
                                let v661 : US3 = US3_0(v334)
                                let v662 : US3 = US3_0(v658)
                                struct (v660, v661, v662)
                            else
                                let v663 : US0 = US0_4
                                let v664 : (unit -> string) = closure81()
                                let v665 : (unit -> struct (int32 * string * string * string)) = closure82(v98, v586, v585, v617)
                                method125(v663, v664, v665)
                                let v666 : string = "py"
                                let v667 : US3 = US3_0(v666)
                                let v668 : US3 = US3_1
                                let v669 : US3 = US3_1
                                struct (v667, v668, v669)
                        struct (v670, v671, v672)
                let v679 : string =
                    match v673 with
                    | US3_1 -> (* None *)
                        let v677 : string = ""
                        v677
                    | US3_0(v676) -> (* Some *)
                        v676
                let v680 : string = "extension"
                let v684 : string =
                    match v674 with
                    | US3_1 -> (* None *)
                        let v682 : string = ""
                        v682
                    | US3_0(v681) -> (* Some *)
                        v681
                let v685 : string = "code"
                let v689 : string =
                    match v675 with
                    | US3_1 -> (* None *)
                        let v687 : string = ""
                        v687
                    | US3_0(v686) -> (* Some *)
                        v686
                let v690 : string = "output"
                let v691 : (struct (string * string) []) = [|struct (v680, v679); struct (v685, v684); struct (v690, v689)|]
                let v692 : string = "$0.to_vec()"
                let v693 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v691 v692 
                let v694 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                let v695 : (struct (string * string) -> (std_string_String * std_string_String)) = closure84()
                let v696 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v693, v695) v694 
                let v697 : string = "std::collections::BTreeMap::from_iter(v696.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
                let v698 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v697 
                let v699 : string = "serde_json::to_string(&v698)"
                let v700 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v699 
                let v701 : string = "$0.unwrap()"
                let v702 : std_string_String = Fable.Core.RustInterop.emitRustExpr v700 v701 
                let v703 : string = "fable_library_rust::String_::fromString($0)"
                let v704 : string = Fable.Core.RustInterop.emitRustExpr v702 v703 
                let v705 : string = "command_result"
                [|struct (v705, v704)|]
            else
                let v707 : string = "fable_library_rust::String_::fromString($0)"
                let v708 : string = Fable.Core.RustInterop.emitRustExpr v45 v707 
                let v710 : bool = v708 = "fable"
                if v710 then
                    let v711 : string = method127()
                    let v712 : string = "&*$0"
                    let v713 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v711 v712 
                    let v714 : string = "clap::ArgMatches::get_one(&$0, v713).cloned()"
                    let v715 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v46 v714 
                    let v718 : US5 option = None
                    let _v718 = ref v718 
                    match v715 with
                    | Some x -> (
                    (fun () ->
                    (fun () ->
                    let v719 : std_string_String = x
                    let v720 : US5 = US5_0(v719)
                    v720 
                    )
                    |> fun x -> x () |> Some
                    ) () ) | None -> None
                    |> fun x -> _v718.Value <- x
                    let v721 : US5 option = _v718.Value 
                    let v744 : US5 = US5_1
                    let v745 : US5 = v721 |> Option.defaultValue v744 
                    let v756 : std_string_String =
                        match v745 with
                        | US5_1 -> (* None *)
                            failwith<std_string_String> "Option does not have a value."
                        | US5_0(v753) -> (* Some *)
                            v753
                    let v757 : string = "fable_library_rust::String_::fromString($0)"
                    let v758 : string = Fable.Core.RustInterop.emitRustExpr v756 v757 
                    let v759 : string = method128()
                    let v760 : string = "&*$0"
                    let v761 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v759 v760 
                    let v762 : string = "clap::ArgMatches::get_one(&$0, v761).cloned()"
                    let v763 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v46 v762 
                    let v766 : US5 option = None
                    let _v766 = ref v766 
                    match v763 with
                    | Some x -> (
                    (fun () ->
                    (fun () ->
                    let v767 : std_string_String = x
                    let v768 : US5 = US5_0(v767)
                    v768 
                    )
                    |> fun x -> x () |> Some
                    ) () ) | None -> None
                    |> fun x -> _v766.Value <- x
                    let v769 : US5 option = _v766.Value 
                    let v792 : US5 = US5_1
                    let v793 : US5 = v769 |> Option.defaultValue v792 
                    let v807 : US3 =
                        match v793 with
                        | US5_1 -> (* None *)
                            US3_1
                        | US5_0(v801) -> (* Some *)
                            let v802 : string = "fable_library_rust::String_::fromString($0)"
                            let v803 : string = Fable.Core.RustInterop.emitRustExpr v801 v802 
                            US3_0(v803)
                    let v841 : string =
                        match v807 with
                        | US3_1 -> (* None *)
                            let v839 : string = "{}"
                            v839
                        | US3_0(v808) -> (* Some *)
                            let v809 : clap_Command = method0()
                            let v810 : string = $"_ {v808} --fs-path \"{v758}\""
                            let v811 : US22 = method69(v810)
                            let v817 : (string []) =
                                match v811 with
                                | US22_1(v813) -> (* Error *)
                                    let v814 : string = $"resultm.get / Result value was Error: {v813}"
                                    failwith<(string [])> v814
                                | US22_0(v812) -> (* Ok *)
                                    v812
                            let v818 : string = "$0.to_vec()"
                            let v819 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v817 v818 
                            let v820 : string = "true; let _result : Vec<_> = v819.into_iter().map(|x| { //"
                            let v821 : bool = Fable.Core.RustInterop.emitRustExpr () v820 
                            let v822 : string = "x"
                            let v823 : string = Fable.Core.RustInterop.emitRustExpr () v822 
                            let v824 : string = "&*$0"
                            let v825 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v823 v824 
                            let v826 : string = "String::from($0)"
                            let v827 : std_string_String = Fable.Core.RustInterop.emitRustExpr v825 v826 
                            let v828 : string = "true; $0 }).collect::<Vec<_>>()"
                            let v829 : bool = Fable.Core.RustInterop.emitRustExpr v827 v828 
                            let v830 : string = "_result"
                            let v831 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v830 
                            let v832 : string = "clap::Command::get_matches_from($0, v831)"
                            let v833 : clap_ArgMatches = Fable.Core.RustInterop.emitRustExpr v809 v832 
                            let v834 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = method14(v0, v833)
                            let v835 : string = "v834.await"
                            let v836 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr () v835 
                            let v837 : string = "$0.unwrap()"
                            let v838 : string = Fable.Core.RustInterop.emitRustExpr v836 v837 
                            v838
                    let v842 : string = "command_result"
                    [|struct (v842, v841)|]
                else
                    let v844 : string = "fable_library_rust::String_::fromString($0)"
                    let v845 : string = Fable.Core.RustInterop.emitRustExpr v45 v844 
                    let v847 : bool = v845 = "dib"
                    if v847 then
                        let v848 : string = method129()
                        let v849 : string = "&*$0"
                        let v850 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v848 v849 
                        let v851 : string = "clap::ArgMatches::get_one(&$0, v850).cloned()"
                        let v852 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v46 v851 
                        let v855 : (std_string_String -> string) = closure85()
                        let v856 : string option = v852 |> Option.map v855 
                        let v892 : string = "$0.unwrap()"
                        let v893 : string = Fable.Core.RustInterop.emitRustExpr v856 v892 
                        let v894 : string = method141()
                        let v895 : string = "&*$0"
                        let v896 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v894 v895 
                        let v897 : string = "clap::ArgMatches::get_one(&$0, v896).cloned()"
                        let v898 : uint8 option = Fable.Core.RustInterop.emitRustExpr v46 v897 
                        let v901 : uint8 = v898 |> Option.defaultValue 1uy 
                        let v908 : string = method142()
                        let v909 : string = "&*$0"
                        let v910 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v908 v909 
                        let v911 : string = "clap::ArgMatches::get_one(&$0, v910).cloned()"
                        let v912 : string option = Fable.Core.RustInterop.emitRustExpr v46 v911 
                        let v913 : uint8 = 1uy
                        let struct (v914 : int32, v915 : string) = method143(v912, v901, v893, v913)
                        let v918 : bool = v914 <> 0 
                        let struct (v1296 : int32, v1297 : string) =
                            if v918 then
                                struct (v914, v915)
                            else
                                let v925 : System.Threading.CancellationToken option = None
                                let v926 : (struct (string * string) []) = [||]
                                let v927 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                let v928 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                let v929 : string option = None
                                let v930 : string = $"jupyter nbconvert \"{v893}.ipynb\" --to html --HTMLExporter.theme=dark"
                                let v931 : bool = true
                                let struct (v932 : int32, v933 : string) = method55(v930, v925, v926, v927, v928, v931, v929)
                                let v934 : US0 = US0_1
                                let v935 : (unit -> string) = closure89()
                                let v936 : (unit -> struct (int32 * int32)) = closure90(v933, v932)
                                method146(v934, v935, v936)
                                let v939 : bool = v932 <> 0 
                                if v939 then
                                    let v946 : string = $"repl_result: {v915}

jupyter_result: {v933}"
                                    struct (v932, v946)
                                else
                                    let v947 : string = "'"
                                    let v948 : string = "''"
                                    let v949 : string = v893.Replace (v947, v948)
                                    let v950 : System.Threading.CancellationToken option = None
                                    let v951 : (struct (string * string) []) = [||]
                                    let v952 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                    let v953 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                    let v954 : string option = None
                                    let v955 : string = $"pwsh -c \"$counter = 1; $path = '{v949}.html'; (Get-Content $path -Raw) -replace '(id=\\\"cell-id=)[a-fA-F0-9]{{8}}', {{ $_.Groups[1].Value + $counter++ }} | Set-Content $path\""
                                    let v956 : bool = true
                                    let struct (v957 : int32, v958 : string) = method55(v955, v950, v951, v952, v953, v956, v954)
                                    let v959 : US0 = US0_1
                                    let v960 : (unit -> string) = closure92()
                                    let v961 : (unit -> struct (int32 * int32)) = closure93(v958, v957)
                                    method148(v959, v960, v961)
                                    let v962 : string = $"{v893}.html"
                                    let v965 : bool = true
                                    let mutable _v965 : string option = None 
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v968 : bool = true
                                    let mutable _v968 : Vec<uint8> option = None 
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v969 : string = "std::fs::read(&*$0).unwrap()"
                                    let v970 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v962 v969 
                                    v970 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v973 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    v973 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v982 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    v982 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v991 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    v991 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v1000 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    v1000 
                                    #endif
#else
                                    let v1007 : (uint8 []) = v962 |> System.IO.File.ReadAllBytes
                                    let v1008 : string = "$0.to_vec()"
                                    let v1009 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1007 v1008 
                                    v1009 
                                    #endif
                                    |> fun x -> _v968 <- Some x
                                    let v1010 : Vec<uint8> = match _v968 with Some x -> x | None -> failwith "base.run_target / _v968=None"
                                    let v1025 : Vec<uint8> = method18(v1010)
                                    let v1026 : string = "std::string::String::from_utf8($0)"
                                    let v1027 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v1025 v1026 
                                    let v1028 : string = "$0.unwrap()"
                                    let v1029 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1027 v1028 
                                    let v1030 : string = "fable_library_rust::String_::fromString($0)"
                                    let v1031 : string = Fable.Core.RustInterop.emitRustExpr v1029 v1030 
                                    v1031 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v1034 : string = null |> unbox<string>
                                    v1034 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v1043 : string = null |> unbox<string>
                                    v1043 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v1052 : string = null |> unbox<string>
                                    v1052 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v1061 : string = null |> unbox<string>
                                    v1061 
                                    #endif
#else
                                    let v1068 : string = v962 |> System.IO.File.ReadAllText
                                    v1068 
                                    #endif
                                    |> fun x -> _v965 <- Some x
                                    let v1069 : string = match _v965 with Some x -> x | None -> failwith "base.run_target / _v965=None"
                                    let v1084 : string = "\r\n"
                                    let v1085 : string = "\n"
                                    let v1086 : string = v1069.Replace (v1084, v1085)
                                    let v1087 : string = $"{v893}.html"
                                    let v1090 : bool = true
                                    let mutable _v1090 : unit option = None 
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1091 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                    Fable.Core.RustInterop.emitRustExpr struct (v1087, v1086) v1091 
                                    () 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    null |> unbox<unit>
                                    () 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    null |> unbox<unit>
                                    () 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    null |> unbox<unit>
                                    () 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    null |> unbox<unit>
                                    () 
                                    #endif
#else
                                    let v1116 : string = method54(v1086)
                                    System.IO.File.WriteAllText (v1087, v1116)
                                    () 
                                    #endif
                                    |> fun x -> _v1090 <- Some x
                                    match _v1090 with Some x -> x | None -> failwith "base.run_target / _v1090=None"
                                    let v1127 : string = $"{v893}.ipynb"
                                    let v1130 : bool = true
                                    let mutable _v1130 : string option = None 
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1133 : bool = true
                                    let mutable _v1133 : Vec<uint8> option = None 
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1134 : string = "std::fs::read(&*$0).unwrap()"
                                    let v1135 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1127 v1134 
                                    v1135 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v1138 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    v1138 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v1147 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    v1147 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v1156 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    v1156 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v1165 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    v1165 
                                    #endif
#else
                                    let v1172 : (uint8 []) = v1127 |> System.IO.File.ReadAllBytes
                                    let v1173 : string = "$0.to_vec()"
                                    let v1174 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1172 v1173 
                                    v1174 
                                    #endif
                                    |> fun x -> _v1133 <- Some x
                                    let v1175 : Vec<uint8> = match _v1133 with Some x -> x | None -> failwith "base.run_target / _v1133=None"
                                    let v1190 : Vec<uint8> = method18(v1175)
                                    let v1191 : string = "std::string::String::from_utf8($0)"
                                    let v1192 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v1190 v1191 
                                    let v1193 : string = "$0.unwrap()"
                                    let v1194 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1192 v1193 
                                    let v1195 : string = "fable_library_rust::String_::fromString($0)"
                                    let v1196 : string = Fable.Core.RustInterop.emitRustExpr v1194 v1195 
                                    v1196 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v1199 : string = null |> unbox<string>
                                    v1199 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v1208 : string = null |> unbox<string>
                                    v1208 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v1217 : string = null |> unbox<string>
                                    v1217 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v1226 : string = null |> unbox<string>
                                    v1226 
                                    #endif
#else
                                    let v1233 : string = v1127 |> System.IO.File.ReadAllText
                                    v1233 
                                    #endif
                                    |> fun x -> _v1130 <- Some x
                                    let v1234 : string = match _v1130 with Some x -> x | None -> failwith "base.run_target / _v1130=None"
                                    let v1249 : string = v1234.Replace (v1084, v1085)
                                    let v1250 : string = "\\r\\n"
                                    let v1251 : string = "\\n"
                                    let v1252 : string = v1249.Replace (v1250, v1251)
                                    let v1253 : string = $"{v893}.ipynb"
                                    let v1256 : bool = true
                                    let mutable _v1256 : unit option = None 
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1257 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                    Fable.Core.RustInterop.emitRustExpr struct (v1253, v1252) v1257 
                                    () 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    null |> unbox<unit>
                                    () 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    null |> unbox<unit>
                                    () 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    null |> unbox<unit>
                                    () 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    null |> unbox<unit>
                                    () 
                                    #endif
#else
                                    let v1282 : string = method54(v1252)
                                    System.IO.File.WriteAllText (v1253, v1282)
                                    () 
                                    #endif
                                    |> fun x -> _v1256 <- Some x
                                    match _v1256 with Some x -> x | None -> failwith "base.run_target / _v1256=None"
                                    let v1293 : string = $"repl_result: {v915}

jupyter_result: {v933}

pwsh_replace_html_result: {v958}"
                                    struct (v957, v1293)
                        let v1298 : US0 = US0_1
                        let v1299 : (unit -> string) = closure95()
                        let v1300 : (unit -> struct (int32 * int32)) = closure96(v1297, v1296)
                        method150(v1298, v1299, v1300)
                        let v1303 : bool = v1296 <> 0 
                        if v1303 then
                            let v1310 : string = $"spiral_builder.run / dib / exit_code: {v1296} / result: {v1297}"
                            failwith<unit> v1310
                        let v1311 : string = "stdio"
                        [|struct (v1311, v1297)|]
                    else
                        let v1313 : string = "fable_library_rust::String_::fromString($0)"
                        let v1314 : string = Fable.Core.RustInterop.emitRustExpr v45 v1313 
                        let v1316 : bool = v1314 = "rust"
                        let struct (v4772 : US3, v4773 : US3, v4774 : US3) =
                            if v1316 then
                                let v1317 : string = method127()
                                let v1318 : string = "&*$0"
                                let v1319 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1317 v1318 
                                let v1320 : string = "clap::ArgMatches::get_one(&$0, v1319).cloned()"
                                let v1321 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v46 v1320 
                                let v1324 : US5 option = None
                                let _v1324 = ref v1324 
                                match v1321 with
                                | Some x -> (
                                (fun () ->
                                (fun () ->
                                let v1325 : std_string_String = x
                                let v1326 : US5 = US5_0(v1325)
                                v1326 
                                )
                                |> fun x -> x () |> Some
                                ) () ) | None -> None
                                |> fun x -> _v1324.Value <- x
                                let v1327 : US5 option = _v1324.Value 
                                let v1350 : US5 = US5_1
                                let v1351 : US5 = v1327 |> Option.defaultValue v1350 
                                let v1362 : std_string_String =
                                    match v1351 with
                                    | US5_1 -> (* None *)
                                        failwith<std_string_String> "Option does not have a value."
                                    | US5_0(v1359) -> (* Some *)
                                        v1359
                                let v1363 : string = "fable_library_rust::String_::fromString($0)"
                                let v1364 : string = Fable.Core.RustInterop.emitRustExpr v1362 v1363 
                                let v1365 : string = method17()
                                let v1366 : string = "&*$0"
                                let v1367 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1365 v1366 
                                let v1368 : string = "clap::ArgMatches::get_many(&$0, v1367).map(|x| x.cloned().into_iter().collect())"
                                let v1369 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr v46 v1368 
                                let v1372 : US9 option = None
                                let _v1372 = ref v1372 
                                match v1369 with
                                | Some x -> (
                                (fun () ->
                                (fun () ->
                                let v1373 : Vec<std_string_String> = x
                                let v1374 : US9 = US9_0(v1373)
                                v1374 
                                )
                                |> fun x -> x () |> Some
                                ) () ) | None -> None
                                |> fun x -> _v1372.Value <- x
                                let v1375 : US9 option = _v1372.Value 
                                let v1398 : US9 = US9_1
                                let v1399 : US9 = v1375 |> Option.defaultValue v1398 
                                let v1407 : (std_string_String []) = [||]
                                let v1408 : string = "$0.to_vec()"
                                let v1409 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v1407 v1408 
                                let v1412 : Vec<std_string_String> =
                                    match v1399 with
                                    | US9_1 -> (* None *)
                                        v1409
                                    | US9_0(v1410) -> (* Some *)
                                        v1410
                                let v1413 : string = method152()
                                let v1414 : string = "&*$0"
                                let v1415 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1413 v1414 
                                let v1416 : string = "clap::ArgMatches::get_flag(&v46, v1415)"
                                let v1417 : bool = Fable.Core.RustInterop.emitRustExpr () v1416 
                                let v1418 : string = method153()
                                let v1419 : string = "&*$0"
                                let v1420 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1418 v1419 
                                let v1421 : string = "clap::ArgMatches::get_flag(&v46, v1420)"
                                let v1422 : bool = Fable.Core.RustInterop.emitRustExpr () v1421 
                                let v1429 : US33 =
                                    if v1417 then
                                        let v1423 : US34 = US34_0
                                        US33_0(v1423)
                                    else
                                        if v1422 then
                                            let v1425 : US34 = US34_1
                                            US33_0(v1425)
                                        else
                                            US33_1
                                let v1431 : bool =
                                    match v0 with
                                    | US0_0 -> (* Verbose *)
                                        true
                                    | _ ->
                                        false
                                let v1434 : bool = true
                                let mutable _v1434 : string option = None 
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1437 : bool = true
                                let mutable _v1437 : Vec<uint8> option = None 
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1438 : string = "std::fs::read(&*$0).unwrap()"
                                let v1439 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1364 v1438 
                                v1439 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1442 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                v1442 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1451 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                v1451 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1460 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                v1460 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1469 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                v1469 
                                #endif
#else
                                let v1476 : (uint8 []) = v1364 |> System.IO.File.ReadAllBytes
                                let v1477 : string = "$0.to_vec()"
                                let v1478 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1476 v1477 
                                v1478 
                                #endif
                                |> fun x -> _v1437 <- Some x
                                let v1479 : Vec<uint8> = match _v1437 with Some x -> x | None -> failwith "base.run_target / _v1437=None"
                                let v1494 : Vec<uint8> = method18(v1479)
                                let v1495 : string = "std::string::String::from_utf8($0)"
                                let v1496 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v1494 v1495 
                                let v1497 : string = "$0.unwrap()"
                                let v1498 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1496 v1497 
                                let v1499 : string = "fable_library_rust::String_::fromString($0)"
                                let v1500 : string = Fable.Core.RustInterop.emitRustExpr v1498 v1499 
                                v1500 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1503 : string = null |> unbox<string>
                                v1503 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1512 : string = null |> unbox<string>
                                v1512 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1521 : string = null |> unbox<string>
                                v1521 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1530 : string = null |> unbox<string>
                                v1530 
                                #endif
#else
                                let v1537 : string = v1364 |> System.IO.File.ReadAllText
                                v1537 
                                #endif
                                |> fun x -> _v1434 <- Some x
                                let v1538 : string = match _v1434 with Some x -> x | None -> failwith "base.run_target / _v1434=None"
                                let v1553 : string = ""
                                let v1554 : Mut4 = {l0 = v1553} : Mut4
                                let v1555 : string = "rs"
                                method154(v1554, v1555, v1538, v1429)
                                let v1556 : string = v1554.l0
                                let v1557 : string = method156(v1556)
                                let v1558 : string = __SOURCE_DIRECTORY__
                                let v1559 : string = "polyglot"
                                let v1560 : string = ".devcontainer"
                                let v1561 : string = method19(v1559, v1560)
                                let v1562 : US12 = method22(v1561, v1558)
                                let v1571 : US3 =
                                    match v1562 with
                                    | US12_1(v1565) -> (* Error *)
                                        let v1566 : US0 = US0_3
                                        let v1567 : (unit -> string) = closure9()
                                        let v1568 : (unit -> string) = closure10(v1565)
                                        method27(v1566, v1567, v1568)
                                        US3_1
                                    | US12_0(v1563) -> (* Ok *)
                                        US3_0(v1563)
                                let v1587 : US3 =
                                    match v1571 with
                                    | US3_1 -> (* None *)
                                        let v1574 : string = method29()
                                        let v1575 : string = method19(v1559, v1560)
                                        let v1576 : US12 = method22(v1575, v1574)
                                        match v1576 with
                                        | US12_1(v1579) -> (* Error *)
                                            let v1580 : US0 = US0_3
                                            let v1581 : (unit -> string) = closure9()
                                            let v1582 : (unit -> string) = closure10(v1579)
                                            method27(v1580, v1581, v1582)
                                            US3_1
                                        | US12_0(v1577) -> (* Ok *)
                                            US3_0(v1577)
                                    | US3_0(v1572) -> (* Some *)
                                        US3_0(v1572)
                                let v1591 : string =
                                    match v1587 with
                                    | US3_1 -> (* None *)
                                        failwith<string> "Option does not have a value."
                                    | US3_0(v1588) -> (* Some *)
                                        v1588
                                let v1592 : string = method19(v1591, v1559)
                                let v1593 : string = method29()
                                let v1596 : (unit -> string) = v1593.ToLower
                                let v1597 : string = v1596 ()
                                let v1606 : (unit -> string) = v1592.ToLower
                                let v1607 : string = v1606 ()
                                let v1614 : bool = v1597.StartsWith v1607 
                                let v1617 : US12 =
                                    if v1614 then
                                        US12_1(v1607)
                                    else
                                        US12_0(v1607)
                                let v1623 : Result<string, string> =
                                    match v1617 with
                                    | US12_1(v1620) -> (* Error *)
                                        let v1621 : Result<string, string> = Error v1620 
                                        v1621
                                    | US12_0(v1618) -> (* Ok *)
                                        let v1619 : Result<string, string> = Ok v1618 
                                        v1619
                                let v1624 : string = "true; let _result = $0.unwrap_or_else(|x| { //"
                                let v1625 : bool = Fable.Core.RustInterop.emitRustExpr v1623 v1624 
                                let v1626 : string = "x"
                                let v1627 : string = Fable.Core.RustInterop.emitRustExpr () v1626 
                                let v1628 : string = "true; $0 })"
                                let v1629 : bool = Fable.Core.RustInterop.emitRustExpr v1627 v1628 
                                let v1630 : string = "_result"
                                let v1631 : string = Fable.Core.RustInterop.emitRustExpr () v1630 
                                let v1632 : string = "target/spiral_builder"
                                let v1633 : string = method19(v1631, v1632)
                                let v1634 : string = "spiral_builder"
                                let v1635 : string = method19(v1633, v1634)
                                let v1636 : string = "packages"
                                let v1637 : string = method19(v1635, v1636)
                                let v1641 : string = "Rust"
                                let v1642 : string = method19(v1637, v1641)
                                let v1643 : string = method19(v1642, v1557)
                                let v1644 : System.IDisposable = method34(v1643)
                                let v1645 : string = $"{v1634}.fs"
                                let v1646 : string = method19(v1643, v1645)
                                let v1647 : string = method134(v1646)
                                method31(v1647, v1538)
                                let v1648 : string list = []
                                let v1651 : string seq = seq { for i = 0 to v1648.Length - 1 do yield v1648.[i] }
                                let v1660 : (string -> (string seq -> string)) = String.concat
                                let v1661 : string = "\\n        "
                                let v1662 : (string seq -> string) = v1660 v1661
                                let v1663 : string = v1662 v1651
                                let v1670 : string = "Fable.Core"
                                let v1671 : string = $"<PackageReference Include=\"{v1670}\" Version=\"*\" />"
                                let v1672 : string list = []
                                let v1675 : string list = v1671 :: v1672 
                                let v1684 : string seq = seq { for i = 0 to v1675.Length - 1 do yield v1675.[i] }
                                let v1693 : (string -> (string seq -> string)) = String.concat
                                let v1694 : (string seq -> string) = v1693 v1661
                                let v1695 : string = v1694 v1684
                                let v1702 : string = $"{v1634}.fsproj"
                                let v1703 : string = method19(v1643, v1702)
                                let v1704 : string = method134(v1703)
                                let v1705 : string = $"<Project Sdk=\"Microsoft.NET.Sdk\">"
                                let v1706 : string = $"<PropertyGroup>"
                                let v1707 : string = "\n"
                                let v1708 : string = v1705 + v1707 
                                let v1709 : string = v1708 + v1706 
                                let v1710 : string = $"    <TargetFramework>net9.0</TargetFramework>"
                                let v1711 : string = v1709 + v1707 
                                let v1712 : string = v1711 + v1710 
                                let v1713 : string = $"    <LangVersion>preview</LangVersion>"
                                let v1714 : string = v1712 + v1707 
                                let v1715 : string = v1714 + v1713 
                                let v1716 : string = $"    <RollForward>Major</RollForward>"
                                let v1717 : string = v1715 + v1707 
                                let v1718 : string = v1717 + v1716 
                                let v1719 : string = $"    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>"
                                let v1720 : string = v1718 + v1707 
                                let v1721 : string = v1720 + v1719 
                                let v1722 : string = $"    <PublishAot>false</PublishAot>"
                                let v1723 : string = v1721 + v1707 
                                let v1724 : string = v1723 + v1722 
                                let v1725 : string = $"    <PublishTrimmed>false</PublishTrimmed>"
                                let v1726 : string = v1724 + v1707 
                                let v1727 : string = v1726 + v1725 
                                let v1728 : string = $"    <PublishSingleFile>true</PublishSingleFile>"
                                let v1729 : string = v1727 + v1707 
                                let v1730 : string = v1729 + v1728 
                                let v1731 : string = $"    <SelfContained>true</SelfContained>"
                                let v1732 : string = v1730 + v1707 
                                let v1733 : string = v1732 + v1731 
                                let v1734 : string = $"    <Version>0.0.1-alpha.1</Version>"
                                let v1735 : string = v1733 + v1707 
                                let v1736 : string = v1735 + v1734 
                                let v1737 : string = $"    <OutputType>Exe</OutputType>"
                                let v1738 : string = v1736 + v1707 
                                let v1739 : string = v1738 + v1737 
                                let v1740 : string = $"</PropertyGroup>"
                                let v1741 : string = v1739 + v1707 
                                let v1742 : string = v1741 + v1740 
                                let v1743 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('FreeBSD'))\">"
                                let v1744 : string = v1742 + v1707 
                                let v1745 : string = v1744 + v1743 
                                let v1746 : string = $"    <DefineConstants>_FREEBSD</DefineConstants>"
                                let v1747 : string = v1745 + v1707 
                                let v1748 : string = v1747 + v1746 
                                let v1749 : string = $"</PropertyGroup>"
                                let v1750 : string = v1748 + v1707 
                                let v1751 : string = v1750 + v1749 
                                let v1752 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Linux'))\">"
                                let v1753 : string = v1751 + v1707 
                                let v1754 : string = v1753 + v1752 
                                let v1755 : string = $"    <DefineConstants>_LINUX</DefineConstants>"
                                let v1756 : string = v1754 + v1707 
                                let v1757 : string = v1756 + v1755 
                                let v1758 : string = $"</PropertyGroup>"
                                let v1759 : string = v1757 + v1707 
                                let v1760 : string = v1759 + v1758 
                                let v1761 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('OSX'))\">"
                                let v1762 : string = v1760 + v1707 
                                let v1763 : string = v1762 + v1761 
                                let v1764 : string = $"    <DefineConstants>_OSX</DefineConstants>"
                                let v1765 : string = v1763 + v1707 
                                let v1766 : string = v1765 + v1764 
                                let v1767 : string = $"</PropertyGroup>"
                                let v1768 : string = v1766 + v1707 
                                let v1769 : string = v1768 + v1767 
                                let v1770 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Windows'))\">"
                                let v1771 : string = v1769 + v1707 
                                let v1772 : string = v1771 + v1770 
                                let v1773 : string = $"    <DefineConstants>_WINDOWS</DefineConstants>"
                                let v1774 : string = v1772 + v1707 
                                let v1775 : string = v1774 + v1773 
                                let v1776 : string = $"</PropertyGroup>"
                                let v1777 : string = v1775 + v1707 
                                let v1778 : string = v1777 + v1776 
                                let v1779 : string = $"<ItemGroup>"
                                let v1780 : string = v1778 + v1707 
                                let v1781 : string = v1780 + v1779 
                                let v1782 : string = $"    {v1663}"
                                let v1783 : string = v1781 + v1707 
                                let v1784 : string = v1783 + v1782 
                                let v1785 : string = $"    <Compile Include=\"{v1647}\" />"
                                let v1786 : string = v1784 + v1707 
                                let v1787 : string = v1786 + v1785 
                                let v1788 : string = $"</ItemGroup>"
                                let v1789 : string = v1787 + v1707 
                                let v1790 : string = v1789 + v1788 
                                let v1791 : string = $"<ItemGroup>"
                                let v1792 : string = v1790 + v1707 
                                let v1793 : string = v1792 + v1791 
                                let v1794 : string = $"    {v1695}"
                                let v1795 : string = v1793 + v1707 
                                let v1796 : string = v1795 + v1794 
                                let v1797 : string = $"</ItemGroup>"
                                let v1798 : string = v1796 + v1707 
                                let v1799 : string = v1798 + v1797 
                                let v1800 : string = $"</Project>"
                                let v1801 : string = v1799 + v1707 
                                let v1802 : string = v1801 + v1800 
                                method31(v1704, v1802)
                                let v1803 : string = "../../.."
                                let v1804 : string = method19(v1643, v1803)
                                let v1805 : string = "Cargo.toml"
                                let v1806 : string = method19(v1804, v1805)
                                let v1807 : bool = method33(v1806)
                                let v1808 : bool = v1807 = false
                                if v1808 then
                                    let v1811 : System.DateTime = System.DateTime.Now
                                    let v1820 : (unit -> System.Guid) = System.Guid.NewGuid
                                    let v1821 : System.Guid = v1820 ()
                                    let v1828 : System.Guid = method158(v1821, v1811)
                                    let v1831 : (System.Guid -> string) = _.ToString()
                                    let v1832 : string = v1831 v1828
                                    let v1839 : string = $"[package]"
                                    let v1840 : string = $"name = \"spiral_builder_{v1832}\""
                                    let v1841 : string = v1839 + v1707 
                                    let v1842 : string = v1841 + v1840 
                                    let v1843 : string = $"version = \"0.0.1\""
                                    let v1844 : string = v1842 + v1707 
                                    let v1845 : string = v1844 + v1843 
                                    let v1846 : string = $"edition = \"2021\""
                                    let v1847 : string = v1845 + v1707 
                                    let v1848 : string = v1847 + v1846 
                                    let v1849 : string = $""
                                    let v1850 : string = v1848 + v1707 
                                    let v1851 : string = v1850 + v1849 
                                    let v1852 : string = $"[[bin]]"
                                    let v1853 : string = v1851 + v1707 
                                    let v1854 : string = v1853 + v1852 
                                    let v1855 : string = $"name = \"spiral_builder_{v1832}\""
                                    let v1856 : string = v1854 + v1707 
                                    let v1857 : string = v1856 + v1855 
                                    let v1858 : string = $"path = \"spiral_builder.rs\""
                                    let v1859 : string = v1857 + v1707 
                                    let v1860 : string = v1859 + v1858 
                                    let v1863 : bool = true
                                    let mutable _v1863 : unit option = None 
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1864 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                    Fable.Core.RustInterop.emitRustExpr struct (v1806, v1860) v1864 
                                    () 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    null |> unbox<unit>
                                    () 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    null |> unbox<unit>
                                    () 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    null |> unbox<unit>
                                    () 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    null |> unbox<unit>
                                    () 
                                    #endif
#else
                                    let v1889 : string = method54(v1860)
                                    System.IO.File.WriteAllText (v1806, v1889)
                                    () 
                                    #endif
                                    |> fun x -> _v1863 <- Some x
                                    match _v1863 with Some x -> x | None -> failwith "base.run_target / _v1863=None"
                                    ()
                                let v1900 : string = method19(v1643, v1805)
                                let v1901 : bool = method33(v1900)
                                let v1902 : bool = v1901 = false
                                if v1902 then
                                    let v1905 : System.DateTime = System.DateTime.Now
                                    let v1914 : (unit -> System.Guid) = System.Guid.NewGuid
                                    let v1915 : System.Guid = v1914 ()
                                    let v1922 : System.Guid = method158(v1915, v1905)
                                    let v1925 : (System.Guid -> string) = _.ToString()
                                    let v1926 : string = v1925 v1922
                                    let v1933 : string = $"[package]"
                                    let v1934 : string = $"name = \"spiral_builder_{v1926}\""
                                    let v1935 : string = v1933 + v1707 
                                    let v1936 : string = v1935 + v1934 
                                    let v1937 : string = $"version = \"0.0.1\""
                                    let v1938 : string = v1936 + v1707 
                                    let v1939 : string = v1938 + v1937 
                                    let v1940 : string = $"edition = \"2021\""
                                    let v1941 : string = v1939 + v1707 
                                    let v1942 : string = v1941 + v1940 
                                    let v1943 : string = $""
                                    let v1944 : string = v1942 + v1707 
                                    let v1945 : string = v1944 + v1943 
                                    let v1946 : string = $"[[bin]]"
                                    let v1947 : string = v1945 + v1707 
                                    let v1948 : string = v1947 + v1946 
                                    let v1949 : string = $"name = \"spiral_builder_{v1926}\""
                                    let v1950 : string = v1948 + v1707 
                                    let v1951 : string = v1950 + v1949 
                                    let v1952 : string = $"path = \"spiral_builder.rs\""
                                    let v1953 : string = v1951 + v1707 
                                    let v1954 : string = v1953 + v1952 
                                    let v1957 : bool = true
                                    let mutable _v1957 : unit option = None 
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1958 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                    Fable.Core.RustInterop.emitRustExpr struct (v1900, v1954) v1958 
                                    () 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    null |> unbox<unit>
                                    () 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    null |> unbox<unit>
                                    () 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    null |> unbox<unit>
                                    () 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    null |> unbox<unit>
                                    () 
                                    #endif
#else
                                    let v1983 : string = method54(v1954)
                                    System.IO.File.WriteAllText (v1900, v1983)
                                    () 
                                    #endif
                                    |> fun x -> _v1957 <- Some x
                                    match _v1957 with Some x -> x | None -> failwith "base.run_target / _v1957=None"
                                    ()
                                let v1994 : string = "lib/rust/fable/fable_modules/fable-library-rust"
                                let v1995 : string = method19(v1631, v1994)
                                let v1996 : string = "fable_modules/fable-library-rust"
                                let v1997 : string = method19(v1643, v1996)
                                method162(v1995, v1997)
                                let struct (v1998 : int32, v1999 : string) = method163(v1429, v1643, v1555, v1704, v1617)
                                let v2002 : bool = v1998 <> 0 
                                let struct (v2872 : US3, v2873 : US3, v2874 : US3) =
                                    if v2002 then
                                        let v2009 : US0 = US0_4
                                        let v2010 : (unit -> string) = closure101()
                                        let v2011 : (unit -> struct (int32 * string)) = closure102(v1999, v1998)
                                        method169(v2009, v2010, v2011)
                                        let v2012 : US3 = US3_0(v1555)
                                        let v2013 : US3 = US3_1
                                        let v2014 : US3 = US3_0(v1999)
                                        struct (v2012, v2013, v2014)
                                    else
                                        let v2016 : bool =
                                            match v1429 with
                                            | US33_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v2043 : Vec<std_string_String> =
                                            if v2016 then
                                                v1412
                                            else
                                                let v2017 : (std_string_String -> bool) = method171()
                                                let v2018 : Vec<std_string_String> = method172(v1412)
                                                let v2019 : string = "v2018.into_iter().filter(|x| v2017(x.clone().clone())).collect::<Vec<_>>()"
                                                let v2020 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v2019 
                                                let v2021 : string = "$0.len()"
                                                let v2022 : unativeint = Fable.Core.RustInterop.emitRustExpr v2020 v2021 
                                                let v2023 : (unativeint -> int32) = int32
                                                let v2024 : int32 = v2023 v2022
                                                let v2025 : bool = v2024 > 0
                                                if v2025 then
                                                    v1412
                                                else
                                                    let v2026 : string = "&*$0"
                                                    let v2027 : string = "near-sdk"
                                                    let v2028 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2027 v2026 
                                                    let v2029 : string = "String::from($0)"
                                                    let v2030 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2028 v2029 
                                                    let v2031 : (std_string_String []) = [|v2030|]
                                                    let v2032 : string = "$0.to_vec()"
                                                    let v2033 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v2031 v2032 
                                                    let v2034 : Vec<std_string_String> = method173(v2033)
                                                    let v2035 : Vec<std_string_String> = method174(v1412)
                                                    let v2036 : string = "true; let mut v2035 = v2035"
                                                    let v2037 : bool = Fable.Core.RustInterop.emitRustExpr () v2036 
                                                    let v2038 : string = "true; v2035.extend(v2034)"
                                                    let v2039 : bool = Fable.Core.RustInterop.emitRustExpr () v2038 
                                                    let v2040 : string = "v2035"
                                                    let v2041 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v2040 
                                                    v2041
                                        let v2044 : string = "true; let _result : Vec<_> = v2043.into_iter().map(|x| { //"
                                        let v2045 : bool = Fable.Core.RustInterop.emitRustExpr () v2044 
                                        let v2046 : string = "x"
                                        let v2047 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v2046 
                                        let v2048 : string = "fable_library_rust::String_::fromString($0)"
                                        let v2049 : string = Fable.Core.RustInterop.emitRustExpr v2047 v2048 
                                        let v2052 : string = "="
                                        let v2053 : bool = v2049.Contains v2052 
                                        let v2068 : string =
                                            if v2053 then
                                                v2049
                                            else
                                                let v2060 : string = "]"
                                                let v2061 : bool = v2049.EndsWith v2060 
                                                if v2061 then
                                                    let v2062 : string = $"={{version='*',features=["
                                                    let v2063 : string = "["
                                                    let v2064 : string = v2049.Replace (v2063, v2062)
                                                    let v2065 : string = $"{v2064}}}"
                                                    v2065
                                                else
                                                    let v2066 : string = $"{v2049}='*'"
                                                    v2066
                                        let v2069 : string = "true; $0 }).collect::<Vec<_>>()"
                                        let v2070 : bool = Fable.Core.RustInterop.emitRustExpr v2068 v2069 
                                        let v2071 : string = "_result"
                                        let v2072 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v2071 
                                        let v2073 : string = "fable_library_rust::NativeArray_::array_from($0)"
                                        let v2074 : (string []) = Fable.Core.RustInterop.emitRustExpr v2072 v2073 
                                        let v2077 : string seq = seq { for i = 0 to v2074.Length - 1 do yield v2074.[i] }
                                        let v2086 : (string -> (string seq -> string)) = String.concat
                                        let v2087 : (string seq -> string) = v2086 v1707
                                        let v2088 : string = v2087 v2077
                                        let v2095 : string = $"[package]"
                                        let v2096 : string = $"name = \"spiral_builder_{v1557}\""
                                        let v2097 : string = v2095 + v1707 
                                        let v2098 : string = v2097 + v2096 
                                        let v2099 : string = $"version = \"0.0.1\""
                                        let v2100 : string = v2098 + v1707 
                                        let v2101 : string = v2100 + v2099 
                                        let v2102 : string = $"edition = \"2021\""
                                        let v2103 : string = v2101 + v1707 
                                        let v2104 : string = v2103 + v2102 
                                        let v2105 : string = $""
                                        let v2106 : string = v2104 + v1707 
                                        let v2107 : string = v2106 + v2105 
                                        let v2108 : string = $"[dependencies]"
                                        let v2109 : string = v2107 + v1707 
                                        let v2110 : string = v2109 + v2108 
                                        let v2112 : bool =
                                            match v1429 with
                                            | US33_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v2115 : string =
                                            if v2112 then
                                                let v2113 : string = $"fable_library_rust = {{ workspace = true, features = [\"static_do_bindings\", \"datetime\", \"guid\", \"threaded\"] }}"
                                                v2113
                                            else
                                                let v2114 : string = $"fable_library_rust = {{ workspace = true }}"
                                                v2114
                                        let v2116 : string = v2110 + v1707 
                                        let v2117 : string = v2116 + v2115 
                                        let v2118 : string = $"inline_colorization = {{ workspace = true }}"
                                        let v2119 : string = v2117 + v1707 
                                        let v2120 : string = v2119 + v2118 
                                        let v2121 : string = $"{v2088}"
                                        let v2122 : string = v2120 + v1707 
                                        let v2123 : string = v2122 + v2121 
                                        let v2124 : string = $""
                                        let v2125 : string = v2123 + v1707 
                                        let v2126 : string = v2125 + v2124 
                                        let v2128 : bool =
                                            match v1429 with
                                            | US33_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v2137 : string =
                                            if v2128 then
                                                let v2129 : string = $"[[bin]]"
                                                let v2130 : string = $"name = \"spiral_builder_{v1557}\""
                                                let v2131 : string = v2129 + v1707 
                                                let v2132 : string = v2131 + v2130 
                                                v2132
                                            else
                                                let v2133 : string = $"[lib]"
                                                let v2134 : string = $"crate-type = [\"cdylib\"]"
                                                let v2135 : string = v2133 + v1707 
                                                let v2136 : string = v2135 + v2134 
                                                v2136
                                        let v2138 : string = v2126 + v1707 
                                        let v2139 : string = v2138 + v2137 
                                        let v2140 : string = $"path = \"spiral_builder.rs\" "
                                        let v2141 : string = v2139 + v1707 
                                        let v2142 : string = v2141 + v2140 
                                        let v2143 : string = method134(v1631)
                                        let v2144 : string = $"cargo-features = [\"profile-rustflags\"]"
                                        let v2145 : string = $""
                                        let v2146 : string = v2144 + v1707 
                                        let v2147 : string = v2146 + v2145 
                                        let v2148 : string = $"[workspace]"
                                        let v2149 : string = v2147 + v1707 
                                        let v2150 : string = v2149 + v2148 
                                        let v2151 : string = $"resolver = \"2\""
                                        let v2152 : string = v2150 + v1707 
                                        let v2153 : string = v2152 + v2151 
                                        let v2154 : string = $"members = [\"packages/Rust/*\"]"
                                        let v2155 : string = v2153 + v1707 
                                        let v2156 : string = v2155 + v2154 
                                        let v2157 : string = $""
                                        let v2158 : string = v2156 + v1707 
                                        let v2159 : string = v2158 + v2157 
                                        let v2160 : string = $"[workspace.dependencies.fable_library_rust]"
                                        let v2161 : string = v2159 + v1707 
                                        let v2162 : string = v2161 + v2160 
                                        let v2163 : string = $"path = \"{v2143}/lib/rust/fable/fable_modules/fable-library-rust\""
                                        let v2164 : string = v2162 + v1707 
                                        let v2165 : string = v2164 + v2163 
                                        let v2166 : string = $"default-features = false"
                                        let v2167 : string = v2165 + v1707 
                                        let v2168 : string = v2167 + v2166 
                                        let v2169 : string = $"features = []"
                                        let v2170 : string = v2168 + v1707 
                                        let v2171 : string = v2170 + v2169 
                                        let v2172 : string = $""
                                        let v2173 : string = v2171 + v1707 
                                        let v2174 : string = v2173 + v2172 
                                        let v2175 : string = $"[workspace.dependencies]"
                                        let v2176 : string = v2174 + v1707 
                                        let v2177 : string = v2176 + v2175 
                                        let v2178 : string = $"inline_colorization = \"~0.1\""
                                        let v2179 : string = v2177 + v1707 
                                        let v2180 : string = v2179 + v2178 
                                        let v2181 : string = $""
                                        let v2182 : string = v2180 + v1707 
                                        let v2183 : string = v2182 + v2181 
                                        let v2184 : string = $"[profile.release]"
                                        let v2185 : string = v2183 + v1707 
                                        let v2186 : string = v2185 + v2184 
                                        let v2187 : string = $"codegen-units = 1"
                                        let v2188 : string = v2186 + v1707 
                                        let v2189 : string = v2188 + v2187 
                                        let v2190 : string = $"opt-level = \"z\""
                                        let v2191 : string = v2189 + v1707 
                                        let v2192 : string = v2191 + v2190 
                                        let v2193 : string = $"lto = true"
                                        let v2194 : string = v2192 + v1707 
                                        let v2195 : string = v2194 + v2193 
                                        let v2196 : string = $"debug = false"
                                        let v2197 : string = v2195 + v1707 
                                        let v2198 : string = v2197 + v2196 
                                        let v2199 : string = $"panic = \"abort\""
                                        let v2200 : string = v2198 + v1707 
                                        let v2201 : string = v2200 + v2199 
                                        let v2202 : string = $"overflow-checks = true"
                                        let v2203 : string = v2201 + v1707 
                                        let v2204 : string = v2203 + v2202 
                                        let v2205 : string = $"rustflags = [\"-C\", \"link-arg=-s\"]"
                                        let v2206 : string = v2204 + v1707 
                                        let v2207 : string = v2206 + v2205 
                                        method31(v1900, v2142)
                                        method31(v1806, v2207)
                                        let v2208 : string = "src/Range.rs"
                                        let v2209 : string = method19(v1997, v2208)
                                        let v2210 : bool = method33(v2209)
                                        if v2210 then
                                            let v2213 : bool = true
                                            let mutable _v2213 : string option = None 
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v2216 : bool = true
                                            let mutable _v2216 : Vec<uint8> option = None 
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v2217 : string = "std::fs::read(&*$0).unwrap()"
                                            let v2218 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2209 v2217 
                                            v2218 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v2221 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            v2221 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v2230 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            v2230 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v2239 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            v2239 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v2248 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            v2248 
                                            #endif
#else
                                            let v2255 : (uint8 []) = v2209 |> System.IO.File.ReadAllBytes
                                            let v2256 : string = "$0.to_vec()"
                                            let v2257 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2255 v2256 
                                            v2257 
                                            #endif
                                            |> fun x -> _v2216 <- Some x
                                            let v2258 : Vec<uint8> = match _v2216 with Some x -> x | None -> failwith "base.run_target / _v2216=None"
                                            let v2273 : Vec<uint8> = method18(v2258)
                                            let v2274 : string = "std::string::String::from_utf8($0)"
                                            let v2275 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v2273 v2274 
                                            let v2276 : string = "$0.unwrap()"
                                            let v2277 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2275 v2276 
                                            let v2278 : string = "fable_library_rust::String_::fromString($0)"
                                            let v2279 : string = Fable.Core.RustInterop.emitRustExpr v2277 v2278 
                                            v2279 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v2282 : string = null |> unbox<string>
                                            v2282 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v2291 : string = null |> unbox<string>
                                            v2291 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v2300 : string = null |> unbox<string>
                                            v2300 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v2309 : string = null |> unbox<string>
                                            v2309 
                                            #endif
#else
                                            let v2316 : string = v2209 |> System.IO.File.ReadAllText
                                            v2316 
                                            #endif
                                            |> fun x -> _v2213 <- Some x
                                            let v2317 : string = match _v2213 with Some x -> x | None -> failwith "base.run_target / _v2213=None"
                                            let v2332 : string = "use crate::String_::fromCharCode;"
                                            let v2333 : string = "use crate::String_::fromChar;"
                                            let v2334 : string = v2317.Replace (v2332, v2333)
                                            let v2335 : string = "fromCharCode(c)"
                                            let v2336 : string = "std::char::from_u32(c).unwrap()"
                                            let v2337 : string = v2334.Replace (v2335, v2336)
                                            method31(v2209, v2337)
                                        let v2338 : uint8 = 1uy
                                        let struct (v2339 : int32, v2340 : string) = method175(v1617, v1900, v2338)
                                        let v2343 : bool = v2339 <> 0 
                                        if v2343 then
                                            let v2350 : US0 = US0_4
                                            let v2351 : (unit -> string) = closure106()
                                            let v2352 : (unit -> struct (int32 * string)) = closure107(v2340, v2339)
                                            method177(v2350, v2351, v2352)
                                        let v2353 : string = $"{v1634}.{v1555}"
                                        let v2354 : string = method19(v1643, v2353)
                                        let v2357 : bool = true
                                        let mutable _v2357 : string option = None 
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2360 : bool = true
                                        let mutable _v2360 : Vec<uint8> option = None 
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2361 : string = "std::fs::read(&*$0).unwrap()"
                                        let v2362 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2354 v2361 
                                        v2362 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2365 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        v2365 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2374 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        v2374 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2383 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        v2383 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2392 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        v2392 
                                        #endif
#else
                                        let v2399 : (uint8 []) = v2354 |> System.IO.File.ReadAllBytes
                                        let v2400 : string = "$0.to_vec()"
                                        let v2401 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2399 v2400 
                                        v2401 
                                        #endif
                                        |> fun x -> _v2360 <- Some x
                                        let v2402 : Vec<uint8> = match _v2360 with Some x -> x | None -> failwith "base.run_target / _v2360=None"
                                        let v2417 : Vec<uint8> = method18(v2402)
                                        let v2418 : string = "std::string::String::from_utf8($0)"
                                        let v2419 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v2417 v2418 
                                        let v2420 : string = "$0.unwrap()"
                                        let v2421 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2419 v2420 
                                        let v2422 : string = "fable_library_rust::String_::fromString($0)"
                                        let v2423 : string = Fable.Core.RustInterop.emitRustExpr v2421 v2422 
                                        v2423 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2426 : string = null |> unbox<string>
                                        v2426 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2435 : string = null |> unbox<string>
                                        v2435 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2444 : string = null |> unbox<string>
                                        v2444 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2453 : string = null |> unbox<string>
                                        v2453 
                                        #endif
#else
                                        let v2460 : string = v2354 |> System.IO.File.ReadAllText
                                        v2460 
                                        #endif
                                        |> fun x -> _v2357 <- Some x
                                        let v2461 : string = match _v2357 with Some x -> x | None -> failwith "base.run_target / _v2357=None"
                                        let v2476 : string = "\"{\".into()"
                                        let v2477 : string = Fable.Core.RustInterop.emitRustExpr () v2476 
                                        let v2478 : string = "pub fn main() -> Result<(), String> "
                                        let v2479 : string = v2478 + v2477 
                                        let v2481 : bool =
                                            match v1429 with
                                            | US33_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v2513 : string =
                                            if v2481 then
                                                v1553
                                            else
                                                let v2482 : string = $"#[near_sdk::near_bindgen]"
                                                let v2483 : string = $"#[derive(near_sdk::PanicOnDefault)]"
                                                let v2484 : string = v2482 + v1707 
                                                let v2485 : string = v2484 + v2483 
                                                let v2486 : string = $"pub struct MainState {{"
                                                let v2487 : string = v2485 + v1707 
                                                let v2488 : string = v2487 + v2486 
                                                let v2489 : string = $"}}"
                                                let v2490 : string = v2488 + v1707 
                                                let v2491 : string = v2490 + v2489 
                                                let v2492 : string = $""
                                                let v2493 : string = v2491 + v1707 
                                                let v2494 : string = v2493 + v2492 
                                                let v2495 : string = $"#[near_sdk::near_bindgen]"
                                                let v2496 : string = v2494 + v1707 
                                                let v2497 : string = v2496 + v2495 
                                                let v2498 : string = $"impl MainState {{"
                                                let v2499 : string = v2497 + v1707 
                                                let v2500 : string = v2499 + v2498 
                                                let v2501 : string = $"    pub fn state_main() {{"
                                                let v2502 : string = v2500 + v1707 
                                                let v2503 : string = v2502 + v2501 
                                                let v2504 : string = $"        Spiral_builder::method0();"
                                                let v2505 : string = v2503 + v1707 
                                                let v2506 : string = v2505 + v2504 
                                                let v2507 : string = $"    }}"
                                                let v2508 : string = v2506 + v1707 
                                                let v2509 : string = v2508 + v2507 
                                                let v2510 : string = $"}}"
                                                let v2511 : string = v2509 + v1707 
                                                let v2512 : string = v2511 + v2510 
                                                v2512
                                        let v2514 : string = $"{v2479} Ok(()) }}"
                                        let v2515 : string = v2513 + v1707 
                                        let v2516 : string = v2515 + v2514 
                                        let v2519 : bool = v2461.Contains v2479 
                                        let v2652 : string =
                                            if v2519 then
                                                v2461
                                            else
                                                let v2526 : string = "\";\".into()"
                                                let v2527 : string = Fable.Core.RustInterop.emitRustExpr () v2526 
                                                let v2528 : string = "),)"
                                                let v2529 : string = v2528 + v2527 
                                                let v2530 : string = "));"
                                                let v2531 : string = v2461.Replace (v2529, v2530)
                                                let v2532 : string = "\";\".into()"
                                                let v2533 : string = Fable.Core.RustInterop.emitRustExpr () v2532 
                                                let v2534 : string = "},)"
                                                let v2535 : string = v2534 + v2533 
                                                let v2536 : string = "});"
                                                let v2537 : string = v2531.Replace (v2535, v2536)
                                                let v2538 : string = method179()
                                                let v2541 : bool = true
                                                let mutable _v2541 : string option = None 
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v2542 : string = method136(v2537)
                                                let v2543 : string = $"regex::Regex::new(&$0)"
                                                let v2544 : string = "\\s\\sdefaultOf\\(\\);"
                                                let v2545 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v2544 v2543 
                                                let v2546 : string = "$0.unwrap()"
                                                let v2547 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v2545 v2546 
                                                let v2548 : string = $"$0.replace_all(&$1, &*$2)"
                                                let v2549 : std_borrow_Cow<Str> = Fable.Core.RustInterop.emitRustExpr struct (v2547, v2542, v2538) v2548 
                                                let v2550 : string = "String::from($0)"
                                                let v2551 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2549 v2550 
                                                let v2552 : string = "fable_library_rust::String_::fromString($0)"
                                                let v2553 : string = Fable.Core.RustInterop.emitRustExpr v2551 v2552 
                                                v2553 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v2556 : string = null |> unbox<string>
                                                v2556 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v2565 : string = null |> unbox<string>
                                                v2565 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v2574 : string = null |> unbox<string>
                                                v2574 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v2583 : string = null |> unbox<string>
                                                v2583 
                                                #endif
#else
                                                let v2590 : string = method180()
                                                let v2591 : string = System.Text.RegularExpressions.Regex.Replace (v2537, v2590, v2538)
                                                v2591 
                                                #endif
                                                |> fun x -> _v2541 <- Some x
                                                let v2592 : string = match _v2541 with Some x -> x | None -> failwith "base.run_target / _v2541=None"
                                                let v2607 : string = "::Slice'_"
                                                let v2608 : string = "::Slice__"
                                                let v2609 : string = v2592.Replace (v2607, v2608)
                                                let v2610 : string = "\",\".into()"
                                                let v2611 : string = Fable.Core.RustInterop.emitRustExpr () v2610 
                                                let v2612 : string = "defaultOf()"
                                                let v2613 : string = v2612 + v2611 
                                                let v2614 : string = "defaultOf::<std::sync::Arc<dyn IDisposable>>(),"
                                                let v2615 : string = v2609.Replace (v2613, v2614)
                                                let v2616 : string = "\"_.\".into()"
                                                let v2617 : string = Fable.Core.RustInterop.emitRustExpr () v2616 
                                                let v2618 : string = "_self"
                                                let v2619 : string = v2618 + v2617 
                                                let v2620 : string = "self."
                                                let v2621 : string = v2615.Replace (v2619, v2620)
                                                let v2622 : string = "\"h\".into()"
                                                let v2623 : string = Fable.Core.RustInterop.emitRustExpr () v2622 
                                                let v2624 : string = "get_or_insert_wit"
                                                let v2625 : string = v2624 + v2623 
                                                let v2626 : string = "get_or_init"
                                                let v2627 : string = v2621.Replace (v2625, v2626)
                                                let v2628 : string = "\";\".into()"
                                                let v2629 : string = Fable.Core.RustInterop.emitRustExpr () v2628 
                                                let v2630 : string = "use fable_library_rust::System::Collections::Concurrent::ConcurrentStack_1"
                                                let v2631 : string = v2630 + v2629 
                                                let v2632 : string = "type ConcurrentStack_1<T> = T;"
                                                let v2633 : string = v2627.Replace (v2631, v2632)
                                                let v2634 : string = "\";\".into()"
                                                let v2635 : string = Fable.Core.RustInterop.emitRustExpr () v2634 
                                                let v2636 : string = "use fable_library_rust::System::Threading::CancellationToken"
                                                let v2637 : string = v2636 + v2635 
                                                let v2638 : string = "type CancellationToken = ();"
                                                let v2639 : string = v2633.Replace (v2637, v2638)
                                                let v2640 : string = "\";\".into()"
                                                let v2641 : string = Fable.Core.RustInterop.emitRustExpr () v2640 
                                                let v2642 : string = "use fable_library_rust::System::TimeZoneInfo"
                                                let v2643 : string = v2642 + v2641 
                                                let v2644 : string = "type TimeZoneInfo = i64;"
                                                let v2645 : string = v2639.Replace (v2643, v2644)
                                                let v2646 : string = "\";\".into()"
                                                let v2647 : string = Fable.Core.RustInterop.emitRustExpr () v2646 
                                                let v2648 : string = "use fable_library_rust::System::Threading::Tasks::TaskCanceledException"
                                                let v2649 : string = v2648 + v2647 
                                                let v2650 : string = "type TaskCanceledException = ();"
                                                let v2651 : string = v2645.Replace (v2649, v2650)
                                                v2651
                                        let v2653 : bool = v2519 = false
                                        if v2653 then
                                            let v2654 : string = $"{v2652}\n\n{v2516}\n"
                                            method31(v2354, v2654)
                                        let v2656 : bool =
                                            match v1429 with
                                            | US33_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v2657 : bool = v2656 <> true
                                        let v2660 : string =
                                            if v2657 then
                                                let v2658 : string = $"cargo build --release --target wasm32-unknown-unknown --manifest-path \"{v1900}\""
                                                v2658
                                            else
                                                let v2659 : string = $"cargo run --manifest-path \"{v1900}\""
                                                v2659
                                        let v2662 : bool =
                                            match v1429 with
                                            | US33_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v2663 : bool = v2662 <> true
                                        let v2672 : (struct (string * string) []) =
                                            if v2663 then
                                                [||]
                                            else
                                                let v2665 : string = "TRACE_LEVEL"
                                                let v2666 : string = "Verbose"
                                                let v2667 : string = "RUSTC_WRAPPER"
                                                let v2668 : string = "sccache"
                                                let v2669 : string = "RUSTFLAGS"
                                                let v2670 : string = "-C prefer-dynamic"
                                                [|struct (v2665, v2666); struct (v2667, v2668); struct (v2669, v2670)|]
                                        let v2673 : System.Threading.CancellationToken option = None
                                        let v2674 : (struct (string * string) []) = [||]
                                        let v2675 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                        let v2676 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                        let v2677 : string option = None
                                        let v2683 : Result<string, string> =
                                            match v1617 with
                                            | US12_1(v2680) -> (* Error *)
                                                let v2681 : Result<string, string> = Error v2680 
                                                v2681
                                            | US12_0(v2678) -> (* Ok *)
                                                let v2679 : Result<string, string> = Ok v2678 
                                                v2679
                                        let v2684 : string = "v2683.ok()"
                                        let v2685 : string option = Fable.Core.RustInterop.emitRustExpr () v2684 
                                        let v2686 : bool = true
                                        let struct (v2687 : int32, v2688 : string) = method55(v2660, v2673, v2672, v2675, v2676, v2686, v2685)
                                        let v2690 : bool =
                                            match v1429 with
                                            | US33_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let struct (v2829 : US3, v2830 : US3, v2831 : US3) =
                                            if v2690 then
                                                let v2691 : int32 = v2672.Length
                                                let v2692 : (string []) = Array.zeroCreate<string> (v2691)
                                                let v2693 : Mut5 = {l0 = 0} : Mut5
                                                while method58(v2691, v2693) do
                                                    let v2695 : int32 = v2693.l0
                                                    let struct (v2696 : string, v2697 : string) = v2672.[int v2695]
                                                    let v2698 : string = $"$env:{v2696}=''{v2697}''"
                                                    v2692.[int v2695] <- v2698
                                                    let v2699 : int32 = v2695 + 1
                                                    v2693.l0 <- v2699
                                                    ()
                                                let v2702 : string seq = v2692 |> Seq.ofArray
                                                let v2711 : (string -> (string seq -> string)) = String.concat
                                                let v2712 : string = ";"
                                                let v2713 : (string seq -> string) = v2711 v2712
                                                let v2714 : string = v2713 v2702
                                                let v2721 : (string []) = [|v2714; v2660|]
                                                let v2724 : string seq = v2721 |> Seq.ofArray
                                                let v2733 : (string -> (string seq -> string)) = String.concat
                                                let v2734 : (string seq -> string) = v2733 v2712
                                                let v2735 : string = v2734 v2724
                                                let v2742 : string = $"pwsh -c '{v2735}'"
                                                let v2743 : bool = v2687 = 0
                                                let struct (v2782 : US3, v2783 : US3, v2784 : US3) =
                                                    if v2743 then
                                                        let v2746 : (string -> US3) = closure75()
                                                        let v2747 : (unit -> string) = closure109(v2688)
                                                        let v2748 : (exn -> US3) = closure111(v2354, v2688, v2742)
                                                        let v2749 : US3 = US3_1
                                                        let result = ref v2749
                                                        try
                                                            result.Value <- v2747 () |> v2746 
                                                        with ex ->
                                                            result.Value <- v2748 ex 
                                                        let v2750 : US3 = result.Value
                                                        let v2770 : string option =
                                                            match v2750 with
                                                            | US3_1 -> (* None *)
                                                                let v2768 : string option = None
                                                                v2768
                                                            | US3_0(v2758) -> (* Some *)
                                                                let v2761 : string option = Some v2758 
                                                                v2761
                                                        let v2771 : string = "$0.unwrap()"
                                                        let v2772 : string = Fable.Core.RustInterop.emitRustExpr v2770 v2771 
                                                        let v2773 : US3 = US3_0(v1555)
                                                        let v2774 : US3 = US3_0(v2652)
                                                        let v2775 : US3 = US3_0(v2772)
                                                        struct (v2773, v2774, v2775)
                                                    else
                                                        let v2776 : US0 = US0_4
                                                        let v2777 : (unit -> string) = closure115()
                                                        let v2778 : (unit -> struct (int32 * string * string * string)) = closure116(v2354, v2688, v2687, v2742)
                                                        method183(v2776, v2777, v2778)
                                                        let v2779 : US3 = US3_0(v1555)
                                                        let v2780 : US3 = US3_1
                                                        let v2781 : US3 = US3_1
                                                        struct (v2779, v2780, v2781)
                                                struct (v2782, v2783, v2784)
                                            else
                                                let v2785 : string = $"target/spiral_builder/{v1634}/target/wasm32-unknown-unknown/release/spiral_builder_{v1557}.wasm"
                                                let v2786 : string = "scripts/invoke-block.ps1"
                                                let v2787 : string = "workspace/target/release/spiral_wasm"
                                                let v2788 : string = $"pwsh -c \"pwsh {v2786} {v2787} -Linux -EnvironmentVariables NEAR_RPC_TIMEOUT_SECS=100`nWASM_PATH={v2785}\""
                                                let v2789 : bool = v2687 = 0
                                                let struct (v2826 : US3, v2827 : US3, v2828 : US3) =
                                                    if v2789 then
                                                        let v2790 : System.Threading.CancellationToken option = None
                                                        let v2791 : (struct (string * string) []) = [||]
                                                        let v2792 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                        let v2793 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                        let v2794 : string option = None
                                                        let v2797 : string option = Some v1631 
                                                        let v2804 : bool = true
                                                        let struct (v2805 : int32, v2806 : string) = method55(v2788, v2790, v2791, v2792, v2793, v2804, v2797)
                                                        let v2807 : bool = v2805 = 0
                                                        let struct (v2817 : US3, v2818 : US3, v2819 : US3) =
                                                            if v2807 then
                                                                let v2808 : US3 = US3_0(v1555)
                                                                let v2809 : US3 = US3_0(v2652)
                                                                let v2810 : US3 = US3_0(v2806)
                                                                struct (v2808, v2809, v2810)
                                                            else
                                                                let v2811 : US0 = US0_4
                                                                let v2812 : (unit -> string) = closure118()
                                                                let v2813 : (unit -> struct (int32 * string * string * string)) = closure119(v2354, v2688, v2806, v2805)
                                                                method185(v2811, v2812, v2813)
                                                                let v2814 : US3 = US3_0(v1555)
                                                                let v2815 : US3 = US3_1
                                                                let v2816 : US3 = US3_1
                                                                struct (v2814, v2815, v2816)
                                                        struct (v2817, v2818, v2819)
                                                    else
                                                        let v2820 : US0 = US0_4
                                                        let v2821 : (unit -> string) = closure121()
                                                        let v2822 : (unit -> struct (int32 * string * string * string * string)) = closure122(v2354, v2688, v2687, v2785, v2788)
                                                        method187(v2820, v2821, v2822)
                                                        let v2823 : US3 = US3_0(v1555)
                                                        let v2824 : US3 = US3_1
                                                        let v2825 : US3 = US3_1
                                                        struct (v2823, v2824, v2825)
                                                struct (v2826, v2827, v2828)
                                        let v2833 : bool =
                                            match v1429 with
                                            | US33_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v2834 : bool = v2833 <> true
                                        let v2837 : string =
                                            if v2834 then
                                                let v2835 : string = "wasm32-unknown-unknown/release"
                                                v2835
                                            else
                                                let v2836 : string = "debug"
                                                v2836
                                        let v2838 : string = $"target/{v2837}/spiral_builder_{v1557}{v1553}"
                                        let v2839 : string = method19(v1804, v2838)
                                        let v2840 : string = ".wasm"
                                        let v2841 : string = $"target/{v2837}/spiral_builder_{v1557}{v2840}"
                                        let v2842 : string = method19(v1804, v2841)
                                        let v2843 : string = ".pdb"
                                        let v2844 : string = $"target/{v2837}/spiral_builder_{v1557}{v2843}"
                                        let v2845 : string = method19(v1804, v2844)
                                        let v2846 : string = ".exe"
                                        let v2847 : string = $"target/{v2837}/spiral_builder_{v1557}{v2846}"
                                        let v2848 : string = method19(v1804, v2847)
                                        let v2849 : string = ".d"
                                        let v2850 : string = $"target/{v2837}/spiral_builder_{v1557}{v2849}"
                                        let v2851 : string = method19(v1804, v2850)
                                        let v2852 : bool = method33(v2839)
                                        let v2853 : bool = method33(v2842)
                                        let v2854 : bool = method33(v2845)
                                        let v2855 : bool = method33(v2848)
                                        let v2856 : bool = method33(v2851)
                                        let v2857 : US0 = US0_0
                                        let v2858 : (unit -> string) = closure124()
                                        let v2859 : (unit -> struct (string * UH4)) = closure125(v2354, v2851, v2856, v2848, v2855, v2845, v2854, v2842, v2853, v2839, v2852)
                                        method189(v2857, v2858, v2859)
                                        let v2863 : UH4 =
                                            if v2852 then
                                                let v2860 : UH4 = UH4_0
                                                UH4_1(v2839, v2852, v2860)
                                            else
                                                UH4_0
                                        let v2865 : UH4 =
                                            if v2853 then
                                                UH4_1(v2842, v2853, v2863)
                                            else
                                                v2863
                                        let v2867 : UH4 =
                                            if v2854 then
                                                UH4_1(v2845, v2854, v2865)
                                            else
                                                v2865
                                        let v2869 : UH4 =
                                            if v2855 then
                                                UH4_1(v2848, v2855, v2867)
                                            else
                                                v2867
                                        let v2871 : UH4 =
                                            if v2856 then
                                                UH4_1(v2851, v2856, v2869)
                                            else
                                                v2869
                                        method192(v2871)
                                        struct (v2829, v2830, v2831)
                                struct (v2872, v2873, v2874)
                            else
                                let v2875 : string = "fable_library_rust::String_::fromString($0)"
                                let v2876 : string = Fable.Core.RustInterop.emitRustExpr v45 v2875 
                                let v2878 : bool = v2876 = "typescript"
                                let struct (v4769 : US3, v4770 : US3, v4771 : US3) =
                                    if v2878 then
                                        let v2879 : string = method127()
                                        let v2880 : string = "&*$0"
                                        let v2881 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2879 v2880 
                                        let v2882 : string = "clap::ArgMatches::get_one(&$0, v2881).cloned()"
                                        let v2883 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v46 v2882 
                                        let v2886 : US5 option = None
                                        let _v2886 = ref v2886 
                                        match v2883 with
                                        | Some x -> (
                                        (fun () ->
                                        (fun () ->
                                        let v2887 : std_string_String = x
                                        let v2888 : US5 = US5_0(v2887)
                                        v2888 
                                        )
                                        |> fun x -> x () |> Some
                                        ) () ) | None -> None
                                        |> fun x -> _v2886.Value <- x
                                        let v2889 : US5 option = _v2886.Value 
                                        let v2912 : US5 = US5_1
                                        let v2913 : US5 = v2889 |> Option.defaultValue v2912 
                                        let v2924 : std_string_String =
                                            match v2913 with
                                            | US5_1 -> (* None *)
                                                failwith<std_string_String> "Option does not have a value."
                                            | US5_0(v2921) -> (* Some *)
                                                v2921
                                        let v2925 : string = "fable_library_rust::String_::fromString($0)"
                                        let v2926 : string = Fable.Core.RustInterop.emitRustExpr v2924 v2925 
                                        let v2927 : string = method17()
                                        let v2928 : string = "&*$0"
                                        let v2929 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2927 v2928 
                                        let v2930 : string = "clap::ArgMatches::get_many(&$0, v2929).map(|x| x.cloned().into_iter().collect())"
                                        let v2931 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr v46 v2930 
                                        let v2934 : US9 option = None
                                        let _v2934 = ref v2934 
                                        match v2931 with
                                        | Some x -> (
                                        (fun () ->
                                        (fun () ->
                                        let v2935 : Vec<std_string_String> = x
                                        let v2936 : US9 = US9_0(v2935)
                                        v2936 
                                        )
                                        |> fun x -> x () |> Some
                                        ) () ) | None -> None
                                        |> fun x -> _v2934.Value <- x
                                        let v2937 : US9 option = _v2934.Value 
                                        let v2960 : US9 = US9_1
                                        let v2961 : US9 = v2937 |> Option.defaultValue v2960 
                                        let v2969 : (std_string_String []) = [||]
                                        let v2970 : string = "$0.to_vec()"
                                        let v2971 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v2969 v2970 
                                        let v2974 : Vec<std_string_String> =
                                            match v2961 with
                                            | US9_1 -> (* None *)
                                                v2971
                                            | US9_0(v2972) -> (* Some *)
                                                v2972
                                        let v2976 : bool =
                                            match v0 with
                                            | US0_0 -> (* Verbose *)
                                                true
                                            | _ ->
                                                false
                                        let v2979 : bool = true
                                        let mutable _v2979 : string option = None 
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2982 : bool = true
                                        let mutable _v2982 : Vec<uint8> option = None 
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2983 : string = "std::fs::read(&*$0).unwrap()"
                                        let v2984 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2926 v2983 
                                        v2984 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2987 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        v2987 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2996 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        v2996 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v3005 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        v3005 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v3014 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        v3014 
                                        #endif
#else
                                        let v3021 : (uint8 []) = v2926 |> System.IO.File.ReadAllBytes
                                        let v3022 : string = "$0.to_vec()"
                                        let v3023 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3021 v3022 
                                        v3023 
                                        #endif
                                        |> fun x -> _v2982 <- Some x
                                        let v3024 : Vec<uint8> = match _v2982 with Some x -> x | None -> failwith "base.run_target / _v2982=None"
                                        let v3039 : Vec<uint8> = method18(v3024)
                                        let v3040 : string = "std::string::String::from_utf8($0)"
                                        let v3041 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v3039 v3040 
                                        let v3042 : string = "$0.unwrap()"
                                        let v3043 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3041 v3042 
                                        let v3044 : string = "fable_library_rust::String_::fromString($0)"
                                        let v3045 : string = Fable.Core.RustInterop.emitRustExpr v3043 v3044 
                                        v3045 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v3048 : string = null |> unbox<string>
                                        v3048 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v3057 : string = null |> unbox<string>
                                        v3057 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v3066 : string = null |> unbox<string>
                                        v3066 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v3075 : string = null |> unbox<string>
                                        v3075 
                                        #endif
#else
                                        let v3082 : string = v2926 |> System.IO.File.ReadAllText
                                        v3082 
                                        #endif
                                        |> fun x -> _v2979 <- Some x
                                        let v3083 : string = match _v2979 with Some x -> x | None -> failwith "base.run_target / _v2979=None"
                                        let v3100 : string = "ts"
                                        let v3101 : string = $"%A{struct (v3100, v3083)}"
                                        let v3108 : string = method156(v3101)
                                        let v3109 : string = __SOURCE_DIRECTORY__
                                        let v3110 : string = "polyglot"
                                        let v3111 : string = ".devcontainer"
                                        let v3112 : string = method19(v3110, v3111)
                                        let v3113 : US12 = method22(v3112, v3109)
                                        let v3122 : US3 =
                                            match v3113 with
                                            | US12_1(v3116) -> (* Error *)
                                                let v3117 : US0 = US0_3
                                                let v3118 : (unit -> string) = closure9()
                                                let v3119 : (unit -> string) = closure10(v3116)
                                                method27(v3117, v3118, v3119)
                                                US3_1
                                            | US12_0(v3114) -> (* Ok *)
                                                US3_0(v3114)
                                        let v3138 : US3 =
                                            match v3122 with
                                            | US3_1 -> (* None *)
                                                let v3125 : string = method29()
                                                let v3126 : string = method19(v3110, v3111)
                                                let v3127 : US12 = method22(v3126, v3125)
                                                match v3127 with
                                                | US12_1(v3130) -> (* Error *)
                                                    let v3131 : US0 = US0_3
                                                    let v3132 : (unit -> string) = closure9()
                                                    let v3133 : (unit -> string) = closure10(v3130)
                                                    method27(v3131, v3132, v3133)
                                                    US3_1
                                                | US12_0(v3128) -> (* Ok *)
                                                    US3_0(v3128)
                                            | US3_0(v3123) -> (* Some *)
                                                US3_0(v3123)
                                        let v3142 : string =
                                            match v3138 with
                                            | US3_1 -> (* None *)
                                                failwith<string> "Option does not have a value."
                                            | US3_0(v3139) -> (* Some *)
                                                v3139
                                        let v3143 : string = method19(v3142, v3110)
                                        let v3144 : string = method29()
                                        let v3147 : (unit -> string) = v3144.ToLower
                                        let v3148 : string = v3147 ()
                                        let v3157 : (unit -> string) = v3143.ToLower
                                        let v3158 : string = v3157 ()
                                        let v3165 : bool = v3148.StartsWith v3158 
                                        let v3168 : US12 =
                                            if v3165 then
                                                US12_1(v3158)
                                            else
                                                US12_0(v3158)
                                        let v3174 : Result<string, string> =
                                            match v3168 with
                                            | US12_1(v3171) -> (* Error *)
                                                let v3172 : Result<string, string> = Error v3171 
                                                v3172
                                            | US12_0(v3169) -> (* Ok *)
                                                let v3170 : Result<string, string> = Ok v3169 
                                                v3170
                                        let v3175 : string = "true; let _result = $0.unwrap_or_else(|x| { //"
                                        let v3176 : bool = Fable.Core.RustInterop.emitRustExpr v3174 v3175 
                                        let v3177 : string = "x"
                                        let v3178 : string = Fable.Core.RustInterop.emitRustExpr () v3177 
                                        let v3179 : string = "true; $0 })"
                                        let v3180 : bool = Fable.Core.RustInterop.emitRustExpr v3178 v3179 
                                        let v3181 : string = "_result"
                                        let v3182 : string = Fable.Core.RustInterop.emitRustExpr () v3181 
                                        let v3183 : string = "target/spiral_builder"
                                        let v3184 : string = method19(v3182, v3183)
                                        let v3185 : string = "spiral_builder"
                                        let v3186 : string = method19(v3184, v3185)
                                        let v3187 : string = "packages"
                                        let v3188 : string = method19(v3186, v3187)
                                        let v3195 : string = "TypeScript"
                                        let v3196 : string = method19(v3188, v3195)
                                        let v3197 : string = method19(v3196, v3108)
                                        let v3198 : System.IDisposable = method34(v3197)
                                        let v3199 : string = $"{v3185}.fs"
                                        let v3200 : string = method19(v3197, v3199)
                                        let v3201 : string = method134(v3200)
                                        method31(v3201, v3083)
                                        let v3202 : string list = []
                                        let v3205 : string seq = seq { for i = 0 to v3202.Length - 1 do yield v3202.[i] }
                                        let v3214 : (string -> (string seq -> string)) = String.concat
                                        let v3215 : string = "\\n        "
                                        let v3216 : (string seq -> string) = v3214 v3215
                                        let v3217 : string = v3216 v3205
                                        let v3224 : string = "Fable.Core"
                                        let v3225 : string = $"<PackageReference Include=\"{v3224}\" Version=\"*\" />"
                                        let v3226 : string list = []
                                        let v3229 : string list = v3225 :: v3226 
                                        let v3238 : string seq = seq { for i = 0 to v3229.Length - 1 do yield v3229.[i] }
                                        let v3247 : (string -> (string seq -> string)) = String.concat
                                        let v3248 : (string seq -> string) = v3247 v3215
                                        let v3249 : string = v3248 v3238
                                        let v3256 : string = $"{v3185}.fsproj"
                                        let v3257 : string = method19(v3197, v3256)
                                        let v3258 : string = method134(v3257)
                                        let v3259 : string = $"<Project Sdk=\"Microsoft.NET.Sdk\">"
                                        let v3260 : string = $"<PropertyGroup>"
                                        let v3261 : string = "\n"
                                        let v3262 : string = v3259 + v3261 
                                        let v3263 : string = v3262 + v3260 
                                        let v3264 : string = $"    <TargetFramework>net9.0</TargetFramework>"
                                        let v3265 : string = v3263 + v3261 
                                        let v3266 : string = v3265 + v3264 
                                        let v3267 : string = $"    <LangVersion>preview</LangVersion>"
                                        let v3268 : string = v3266 + v3261 
                                        let v3269 : string = v3268 + v3267 
                                        let v3270 : string = $"    <RollForward>Major</RollForward>"
                                        let v3271 : string = v3269 + v3261 
                                        let v3272 : string = v3271 + v3270 
                                        let v3273 : string = $"    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>"
                                        let v3274 : string = v3272 + v3261 
                                        let v3275 : string = v3274 + v3273 
                                        let v3276 : string = $"    <PublishAot>false</PublishAot>"
                                        let v3277 : string = v3275 + v3261 
                                        let v3278 : string = v3277 + v3276 
                                        let v3279 : string = $"    <PublishTrimmed>false</PublishTrimmed>"
                                        let v3280 : string = v3278 + v3261 
                                        let v3281 : string = v3280 + v3279 
                                        let v3282 : string = $"    <PublishSingleFile>true</PublishSingleFile>"
                                        let v3283 : string = v3281 + v3261 
                                        let v3284 : string = v3283 + v3282 
                                        let v3285 : string = $"    <SelfContained>true</SelfContained>"
                                        let v3286 : string = v3284 + v3261 
                                        let v3287 : string = v3286 + v3285 
                                        let v3288 : string = $"    <Version>0.0.1-alpha.1</Version>"
                                        let v3289 : string = v3287 + v3261 
                                        let v3290 : string = v3289 + v3288 
                                        let v3291 : string = $"    <OutputType>Exe</OutputType>"
                                        let v3292 : string = v3290 + v3261 
                                        let v3293 : string = v3292 + v3291 
                                        let v3294 : string = $"</PropertyGroup>"
                                        let v3295 : string = v3293 + v3261 
                                        let v3296 : string = v3295 + v3294 
                                        let v3297 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('FreeBSD'))\">"
                                        let v3298 : string = v3296 + v3261 
                                        let v3299 : string = v3298 + v3297 
                                        let v3300 : string = $"    <DefineConstants>_FREEBSD</DefineConstants>"
                                        let v3301 : string = v3299 + v3261 
                                        let v3302 : string = v3301 + v3300 
                                        let v3303 : string = $"</PropertyGroup>"
                                        let v3304 : string = v3302 + v3261 
                                        let v3305 : string = v3304 + v3303 
                                        let v3306 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Linux'))\">"
                                        let v3307 : string = v3305 + v3261 
                                        let v3308 : string = v3307 + v3306 
                                        let v3309 : string = $"    <DefineConstants>_LINUX</DefineConstants>"
                                        let v3310 : string = v3308 + v3261 
                                        let v3311 : string = v3310 + v3309 
                                        let v3312 : string = $"</PropertyGroup>"
                                        let v3313 : string = v3311 + v3261 
                                        let v3314 : string = v3313 + v3312 
                                        let v3315 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('OSX'))\">"
                                        let v3316 : string = v3314 + v3261 
                                        let v3317 : string = v3316 + v3315 
                                        let v3318 : string = $"    <DefineConstants>_OSX</DefineConstants>"
                                        let v3319 : string = v3317 + v3261 
                                        let v3320 : string = v3319 + v3318 
                                        let v3321 : string = $"</PropertyGroup>"
                                        let v3322 : string = v3320 + v3261 
                                        let v3323 : string = v3322 + v3321 
                                        let v3324 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Windows'))\">"
                                        let v3325 : string = v3323 + v3261 
                                        let v3326 : string = v3325 + v3324 
                                        let v3327 : string = $"    <DefineConstants>_WINDOWS</DefineConstants>"
                                        let v3328 : string = v3326 + v3261 
                                        let v3329 : string = v3328 + v3327 
                                        let v3330 : string = $"</PropertyGroup>"
                                        let v3331 : string = v3329 + v3261 
                                        let v3332 : string = v3331 + v3330 
                                        let v3333 : string = $"<ItemGroup>"
                                        let v3334 : string = v3332 + v3261 
                                        let v3335 : string = v3334 + v3333 
                                        let v3336 : string = $"    {v3217}"
                                        let v3337 : string = v3335 + v3261 
                                        let v3338 : string = v3337 + v3336 
                                        let v3339 : string = $"    <Compile Include=\"{v3201}\" />"
                                        let v3340 : string = v3338 + v3261 
                                        let v3341 : string = v3340 + v3339 
                                        let v3342 : string = $"</ItemGroup>"
                                        let v3343 : string = v3341 + v3261 
                                        let v3344 : string = v3343 + v3342 
                                        let v3345 : string = $"<ItemGroup>"
                                        let v3346 : string = v3344 + v3261 
                                        let v3347 : string = v3346 + v3345 
                                        let v3348 : string = $"    {v3249}"
                                        let v3349 : string = v3347 + v3261 
                                        let v3350 : string = v3349 + v3348 
                                        let v3351 : string = $"</ItemGroup>"
                                        let v3352 : string = v3350 + v3261 
                                        let v3353 : string = v3352 + v3351 
                                        let v3354 : string = $"</Project>"
                                        let v3355 : string = v3353 + v3261 
                                        let v3356 : string = v3355 + v3354 
                                        method31(v3258, v3356)
                                        let v3357 : string = "lib/typescript/fable/fable_modules"
                                        let v3358 : string = method19(v3182, v3357)
                                        let v3359 : string = "async_walkdir::WalkDir::new(&*$0)"
                                        let v3360 : async_walkdir_WalkDir = Fable.Core.RustInterop.emitRustExpr v3358 v3359 
                                        let v3361 : string = "async_walkdir::WalkDir::filter($0, |x| $1(x))"
                                        let v3362 : (async_walkdir_DirEntry -> std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>>) = closure127()
                                        let v3363 : async_walkdir_WalkDir = Fable.Core.RustInterop.emitRustExpr struct (v3360, v3362) v3361 
                                        let v3364 : (Result<async_walkdir_DirEntry, async_walkdir_Error> -> struct (string * string) option) = method199()
                                        let v3365 : string = "tokio_stream::StreamExt::collect(tokio_stream::StreamExt::filter_map(v3363, |x| v3364(x))).await"
                                        let v3366 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr () v3365 
                                        let v3367 : string = "rayon::iter::IntoParallelIterator::into_par_iter(v3366)"
                                        let v3368 : rayon_vec_IntoIter<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr () v3367 
                                        let v3369 : string = "rayon::iter::ParallelIterator::map($0, |x| $1(x))"
                                        let v3370 : (struct (string * string) -> struct (string * string)) = closure136()
                                        let v3371 : rayon_iter_Map<rayon_vec_IntoIter<struct (string * string)>> = Fable.Core.RustInterop.emitRustExpr struct (v3368, v3370) v3369 
                                        let v3372 : string = "rayon::iter::ParallelIterator::collect($0)"
                                        let v3373 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v3371 v3372 
                                        let v3374 : string = "fable_library_rust::NativeArray_::array_from($0)"
                                        let v3375 : (struct (string * string) []) = Fable.Core.RustInterop.emitRustExpr v3373 v3374 
                                        let v3376 : struct (string * string) option = v3375 |> Array.tryItem 0 
                                        let v3379 : US42 option = None
                                        let _v3379 = ref v3379 
                                        match v3376 with
                                        | Some x -> (
                                        (fun () ->
                                        (fun () ->
                                        let struct (v3380 : string, v3381 : string) = x
                                        let v3382 : US42 = US42_0(v3380, v3381)
                                        v3382 
                                        )
                                        |> fun x -> x () |> Some
                                        ) () ) | None -> None
                                        |> fun x -> _v3379.Value <- x
                                        let v3383 : US42 option = _v3379.Value 
                                        let v3407 : US42 = US42_1
                                        let v3408 : US42 = v3383 |> Option.defaultValue v3407 
                                        let v3416 : US0 = US0_1
                                        let v3417 : (unit -> string) = closure137()
                                        let v3418 : (unit -> std_string_String) = closure138(v3408)
                                        method201(v3416, v3417, v3418)
                                        match v3408 with
                                        | US42_1 -> (* None *)
                                            ()
                                        | US42_0(v3419, v3420) -> (* Some *)
                                            let v3421 : string = $"fable-library-{v3100}.{v3420}"
                                            let v3422 : string = method19(v3358, v3421)
                                            let v3423 : string = $"fable_modules/fable-library-{v3100}.{v3420}"
                                            let v3424 : string = method19(v3197, v3423)
                                            method162(v3422, v3424)
                                        let v3425 : US33 = US33_1
                                        let struct (v3426 : int32, v3427 : string) = method163(v3425, v3197, v3100, v3258, v3168)
                                        let v3430 : bool = v3426 <> 0 
                                        let struct (v3873 : US3, v3874 : US3, v3875 : US3) =
                                            if v3430 then
                                                let v3437 : US0 = US0_4
                                                let v3438 : (unit -> string) = closure140()
                                                let v3439 : (unit -> struct (int32 * string)) = closure141(v3427, v3426)
                                                method169(v3437, v3438, v3439)
                                                let v3440 : US3 = US3_0(v3100)
                                                let v3441 : US3 = US3_1
                                                let v3442 : US3 = US3_0(v3427)
                                                struct (v3440, v3441, v3442)
                                            else
                                                let v3443 : string = "true; let _result : Vec<_> = v2974.into_iter().map(|x| { //"
                                                let v3444 : bool = Fable.Core.RustInterop.emitRustExpr () v3443 
                                                let v3445 : string = "x"
                                                let v3446 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v3445 
                                                let v3447 : string = "fable_library_rust::String_::fromString($0)"
                                                let v3448 : string = Fable.Core.RustInterop.emitRustExpr v3446 v3447 
                                                let v3451 : string = "="
                                                let v3452 : bool = v3448.Contains v3451 
                                                let v3460 : string =
                                                    if v3452 then
                                                        v3448
                                                    else
                                                        let v3459 : string = $"\"{v3448}\":\"*\""
                                                        v3459
                                                let v3461 : string = "true; $0 }).collect::<Vec<_>>()"
                                                let v3462 : bool = Fable.Core.RustInterop.emitRustExpr v3460 v3461 
                                                let v3463 : string = "_result"
                                                let v3464 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v3463 
                                                let v3465 : string = "fable_library_rust::NativeArray_::array_from($0)"
                                                let v3466 : (string []) = Fable.Core.RustInterop.emitRustExpr v3464 v3465 
                                                let v3469 : string seq = seq { for i = 0 to v3466.Length - 1 do yield v3466.[i] }
                                                let v3478 : (string -> (string seq -> string)) = String.concat
                                                let v3479 : string = ",\n"
                                                let v3480 : (string seq -> string) = v3478 v3479
                                                let v3481 : string = v3480 v3469
                                                let v3488 : string = $"{{"
                                                let v3489 : string = $"  \"name\": \"spiral_builder_{v3108}\","
                                                let v3490 : string = v3488 + v3489 
                                                let v3491 : string = $"  \"dependencies\": {{"
                                                let v3492 : string = v3490 + v3491 
                                                let v3493 : string = v3492 + v3481 
                                                let v3494 : string = $"  }},"
                                                let v3495 : string = v3493 + v3494 
                                                let v3496 : string = $"    \"devDependencies\": {{"
                                                let v3497 : string = v3495 + v3496 
                                                let v3498 : string = $"  }},"
                                                let v3499 : string = v3497 + v3498 
                                                let v3500 : string = $"}}"
                                                let v3501 : string = v3499 + v3500 
                                                let v3502 : string = "package.json"
                                                let v3503 : string = method19(v3197, v3502)
                                                let v3504 : string = "../.."
                                                let v3505 : string = method19(v3197, v3504)
                                                let v3506 : string = method19(v3505, v3502)
                                                method31(v3503, v3501)
                                                let v3507 : string = ""
                                                method31(v3506, v3507)
                                                let v3508 : string = $"{v3185}.{v3100}"
                                                let v3509 : string = method19(v3197, v3508)
                                                let v3510 : US0 = US0_1
                                                let v3511 : (unit -> string) = closure142()
                                                let v3512 : (unit -> string) = closure143(v3509)
                                                method203(v3510, v3511, v3512)
                                                let v3515 : bool = true
                                                let mutable _v3515 : string option = None 
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3518 : bool = true
                                                let mutable _v3518 : Vec<uint8> option = None 
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3519 : string = "std::fs::read(&*$0).unwrap()"
                                                let v3520 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3509 v3519 
                                                v3520 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3523 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                v3523 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3532 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                v3532 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3541 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                v3541 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3550 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                v3550 
                                                #endif
#else
                                                let v3557 : (uint8 []) = v3509 |> System.IO.File.ReadAllBytes
                                                let v3558 : string = "$0.to_vec()"
                                                let v3559 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3557 v3558 
                                                v3559 
                                                #endif
                                                |> fun x -> _v3518 <- Some x
                                                let v3560 : Vec<uint8> = match _v3518 with Some x -> x | None -> failwith "base.run_target / _v3518=None"
                                                let v3575 : Vec<uint8> = method18(v3560)
                                                let v3576 : string = "std::string::String::from_utf8($0)"
                                                let v3577 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v3575 v3576 
                                                let v3578 : string = "$0.unwrap()"
                                                let v3579 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3577 v3578 
                                                let v3580 : string = "fable_library_rust::String_::fromString($0)"
                                                let v3581 : string = Fable.Core.RustInterop.emitRustExpr v3579 v3580 
                                                v3581 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3584 : string = null |> unbox<string>
                                                v3584 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3593 : string = null |> unbox<string>
                                                v3593 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3602 : string = null |> unbox<string>
                                                v3602 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3611 : string = null |> unbox<string>
                                                v3611 
                                                #endif
#else
                                                let v3618 : string = v3509 |> System.IO.File.ReadAllText
                                                v3618 
                                                #endif
                                                |> fun x -> _v3515 <- Some x
                                                let v3619 : string = match _v3515 with Some x -> x | None -> failwith "base.run_target / _v3515=None"
                                                let v3636 : string = "// spiral_builder.process_typescript"
                                                let v3637 : bool = v3619.Contains v3636 
                                                let v3716 : string =
                                                    if v3637 then
                                                        v3619
                                                    else
                                                        let v3644 : string = $"\"./fable_modules/fable-library-ts.{v3408}/"
                                                        let v3645 : string = $"\"{v3182}/lib/typescript/fable/fable_modules/fable-library-ts.{v3408}/"
                                                        let v3646 : string = v3619.Replace (v3644, v3645)
                                                        let v3647 : string = method179()
                                                        let v3650 : bool = true
                                                        let mutable _v3650 : string option = None 
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v3651 : string = method136(v3646)
                                                        let v3652 : string = $"regex::Regex::new(&$0)"
                                                        let v3653 : string = "\\s\\sdefaultOf\\(\\);"
                                                        let v3654 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v3653 v3652 
                                                        let v3655 : string = "$0.unwrap()"
                                                        let v3656 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v3654 v3655 
                                                        let v3657 : string = $"$0.replace_all(&$1, &*$2)"
                                                        let v3658 : std_borrow_Cow<Str> = Fable.Core.RustInterop.emitRustExpr struct (v3656, v3651, v3647) v3657 
                                                        let v3659 : string = "String::from($0)"
                                                        let v3660 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3658 v3659 
                                                        let v3661 : string = "fable_library_rust::String_::fromString($0)"
                                                        let v3662 : string = Fable.Core.RustInterop.emitRustExpr v3660 v3661 
                                                        v3662 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v3665 : string = null |> unbox<string>
                                                        v3665 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v3674 : string = null |> unbox<string>
                                                        v3674 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v3683 : string = null |> unbox<string>
                                                        v3683 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v3692 : string = null |> unbox<string>
                                                        v3692 
                                                        #endif
#else
                                                        let v3699 : string = method180()
                                                        let v3700 : string = System.Text.RegularExpressions.Regex.Replace (v3646, v3699, v3647)
                                                        v3700 
                                                        #endif
                                                        |> fun x -> _v3650 <- Some x
                                                        let v3701 : string = match _v3650 with Some x -> x | None -> failwith "base.run_target / _v3650=None"
                                                        v3701
                                                let v3717 : bool = v3637 = false
                                                if v3717 then
                                                    let v3718 : string = $"{v3716}\n\n{v3636}\n"
                                                    method31(v3509, v3718)
                                                let v3719 : string = $"bun run \"{v3509}\""
                                                let v3720 : string = "PATH"
                                                let v3721 : string = method2(v3720)
                                                let v3722 : bool = v3721 = ""
                                                let v3760 : US3 =
                                                    if v3722 then
                                                        US3_1
                                                    else
                                                        let v3726 : bool = true
                                                        let mutable _v3726 : bool option = None 
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v3727 : string = "cfg!(windows)"
                                                        let v3728 : bool = Fable.Core.RustInterop.emitRustExpr () v3727 
                                                        v3728 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v3729 : string = "cfg!(windows)"
                                                        let v3730 : bool = Fable.Core.RustInterop.emitRustExpr () v3729 
                                                        v3730 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v3731 : string = "cfg!(windows)"
                                                        let v3732 : bool = Fable.Core.RustInterop.emitRustExpr () v3731 
                                                        v3732 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v3733 : US10 = US10_0
                                                        let v3734 : US11 = US11_3(v3733)
                                                        let v3735 : string = $"platform.is_windows / target: {v3734}"
                                                        let v3736 : bool = failwith<bool> v3735
                                                        v3736 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v3737 : US10 = US10_0
                                                        let v3738 : US11 = US11_4(v3737)
                                                        let v3739 : string = $"platform.is_windows / target: {v3738}"
                                                        let v3740 : bool = failwith<bool> v3739
                                                        v3740 
                                                        #endif
#else
                                                        let v3741 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                        let v3742 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                        let v3743 : bool = v3742 v3741
                                                        v3743 
                                                        #endif
                                                        |> fun x -> _v3726 <- Some x
                                                        let v3744 : bool = match _v3726 with Some x -> x | None -> failwith "base.run_target / _v3726=None"
                                                        let v3756 : string =
                                                            if v3744 then
                                                                let v3754 : string = ";"
                                                                v3754
                                                            else
                                                                let v3755 : string = ":"
                                                                v3755
                                                        let v3757 : string = "~/.bun/bin"
                                                        let v3758 : string = $"{v3757}{v3756}{v3721}"
                                                        US3_0(v3758)
                                                let v3766 : UH5 =
                                                    match v3760 with
                                                    | US3_1 -> (* None *)
                                                        UH5_0
                                                    | US3_0(v3761) -> (* Some *)
                                                        let v3762 : UH5 = UH5_0
                                                        UH5_1(v3720, v3761, v3762)
                                                let v3767 : string = "TRACE_LEVEL"
                                                let v3768 : string = "Verbose"
                                                let v3769 : UH5 = UH5_0
                                                let v3770 : UH5 = UH5_1(v3767, v3768, v3769)
                                                let v3771 : UH5 = method205(v3766, v3770)
                                                let v3772 : struct (string * string) list = []
                                                let v3773 : struct (string * string) list = method206(v3771, v3772)
                                                let v3776 : (struct (string * string) list -> (struct (string * string) [])) = List.toArray
                                                let v3777 : (struct (string * string) []) = v3776 v3773
                                                let v3784 : System.Threading.CancellationToken option = None
                                                let v3785 : (struct (string * string) []) = [||]
                                                let v3786 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                let v3787 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                let v3788 : string option = None
                                                let v3794 : Result<string, string> =
                                                    match v3168 with
                                                    | US12_1(v3791) -> (* Error *)
                                                        let v3792 : Result<string, string> = Error v3791 
                                                        v3792
                                                    | US12_0(v3789) -> (* Ok *)
                                                        let v3790 : Result<string, string> = Ok v3789 
                                                        v3790
                                                let v3795 : string = "v3794.ok()"
                                                let v3796 : string option = Fable.Core.RustInterop.emitRustExpr () v3795 
                                                let v3797 : bool = true
                                                let struct (v3798 : int32, v3799 : string) = method55(v3719, v3784, v3777, v3786, v3787, v3797, v3796)
                                                let v3800 : int32 = v3777.Length
                                                let v3801 : (string []) = Array.zeroCreate<string> (v3800)
                                                let v3802 : Mut5 = {l0 = 0} : Mut5
                                                while method58(v3800, v3802) do
                                                    let v3804 : int32 = v3802.l0
                                                    let struct (v3805 : string, v3806 : string) = v3777.[int v3804]
                                                    let v3807 : string = $"$env:{v3805}=''{v3806}''"
                                                    v3801.[int v3804] <- v3807
                                                    let v3808 : int32 = v3804 + 1
                                                    v3802.l0 <- v3808
                                                    ()
                                                let v3811 : string seq = v3801 |> Seq.ofArray
                                                let v3820 : (string -> (string seq -> string)) = String.concat
                                                let v3821 : string = ";"
                                                let v3822 : (string seq -> string) = v3820 v3821
                                                let v3823 : string = v3822 v3811
                                                let v3830 : string = $"pwsh -c '{v3823}; {v3719}'"
                                                let v3831 : bool = v3798 = 0
                                                let struct (v3870 : US3, v3871 : US3, v3872 : US3) =
                                                    if v3831 then
                                                        let v3834 : (string -> US3) = closure75()
                                                        let v3835 : (unit -> string) = closure145(v3799)
                                                        let v3836 : (exn -> US3) = closure146(v3509, v3799, v3830)
                                                        let v3837 : US3 = US3_1
                                                        let result = ref v3837
                                                        try
                                                            result.Value <- v3835 () |> v3834 
                                                        with ex ->
                                                            result.Value <- v3836 ex 
                                                        let v3838 : US3 = result.Value
                                                        let v3858 : string option =
                                                            match v3838 with
                                                            | US3_1 -> (* None *)
                                                                let v3856 : string option = None
                                                                v3856
                                                            | US3_0(v3846) -> (* Some *)
                                                                let v3849 : string option = Some v3846 
                                                                v3849
                                                        let v3859 : string = "$0.unwrap()"
                                                        let v3860 : string = Fable.Core.RustInterop.emitRustExpr v3858 v3859 
                                                        let v3861 : US3 = US3_0(v3100)
                                                        let v3862 : US3 = US3_0(v3716)
                                                        let v3863 : US3 = US3_0(v3860)
                                                        struct (v3861, v3862, v3863)
                                                    else
                                                        let v3864 : US0 = US0_4
                                                        let v3865 : (unit -> string) = closure150()
                                                        let v3866 : (unit -> struct (int32 * string * string * string)) = closure151(v3509, v3799, v3798, v3830)
                                                        method125(v3864, v3865, v3866)
                                                        let v3867 : US3 = US3_0(v3100)
                                                        let v3868 : US3 = US3_1
                                                        let v3869 : US3 = US3_1
                                                        struct (v3867, v3868, v3869)
                                                struct (v3870, v3871, v3872)
                                        struct (v3873, v3874, v3875)
                                    else
                                        let v3876 : string = "fable_library_rust::String_::fromString($0)"
                                        let v3877 : string = Fable.Core.RustInterop.emitRustExpr v45 v3876 
                                        let v3879 : bool = v3877 = "python"
                                        let struct (v4766 : US3, v4767 : US3, v4768 : US3) =
                                            if v3879 then
                                                let v3880 : string = method127()
                                                let v3881 : string = "&*$0"
                                                let v3882 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3880 v3881 
                                                let v3883 : string = "clap::ArgMatches::get_one(&$0, v3882).cloned()"
                                                let v3884 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v46 v3883 
                                                let v3887 : US5 option = None
                                                let _v3887 = ref v3887 
                                                match v3884 with
                                                | Some x -> (
                                                (fun () ->
                                                (fun () ->
                                                let v3888 : std_string_String = x
                                                let v3889 : US5 = US5_0(v3888)
                                                v3889 
                                                )
                                                |> fun x -> x () |> Some
                                                ) () ) | None -> None
                                                |> fun x -> _v3887.Value <- x
                                                let v3890 : US5 option = _v3887.Value 
                                                let v3913 : US5 = US5_1
                                                let v3914 : US5 = v3890 |> Option.defaultValue v3913 
                                                let v3925 : std_string_String =
                                                    match v3914 with
                                                    | US5_1 -> (* None *)
                                                        failwith<std_string_String> "Option does not have a value."
                                                    | US5_0(v3922) -> (* Some *)
                                                        v3922
                                                let v3926 : string = "fable_library_rust::String_::fromString($0)"
                                                let v3927 : string = Fable.Core.RustInterop.emitRustExpr v3925 v3926 
                                                let v3928 : string = method17()
                                                let v3929 : string = "&*$0"
                                                let v3930 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3928 v3929 
                                                let v3931 : string = "clap::ArgMatches::get_many(&$0, v3930).map(|x| x.cloned().into_iter().collect())"
                                                let v3932 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr v46 v3931 
                                                let v3935 : US9 option = None
                                                let _v3935 = ref v3935 
                                                match v3932 with
                                                | Some x -> (
                                                (fun () ->
                                                (fun () ->
                                                let v3936 : Vec<std_string_String> = x
                                                let v3937 : US9 = US9_0(v3936)
                                                v3937 
                                                )
                                                |> fun x -> x () |> Some
                                                ) () ) | None -> None
                                                |> fun x -> _v3935.Value <- x
                                                let v3938 : US9 option = _v3935.Value 
                                                let v3961 : US9 = US9_1
                                                let v3962 : US9 = v3938 |> Option.defaultValue v3961 
                                                let v3970 : (std_string_String []) = [||]
                                                let v3971 : string = "$0.to_vec()"
                                                let v3972 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v3970 v3971 
                                                let v3975 : Vec<std_string_String> =
                                                    match v3962 with
                                                    | US9_1 -> (* None *)
                                                        v3972
                                                    | US9_0(v3973) -> (* Some *)
                                                        v3973
                                                let v3977 : bool =
                                                    match v0 with
                                                    | US0_0 -> (* Verbose *)
                                                        true
                                                    | _ ->
                                                        false
                                                let v3980 : bool = true
                                                let mutable _v3980 : string option = None 
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3983 : bool = true
                                                let mutable _v3983 : Vec<uint8> option = None 
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3984 : string = "std::fs::read(&*$0).unwrap()"
                                                let v3985 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3927 v3984 
                                                v3985 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3988 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                v3988 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3997 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                v3997 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v4006 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                v4006 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v4015 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                v4015 
                                                #endif
#else
                                                let v4022 : (uint8 []) = v3927 |> System.IO.File.ReadAllBytes
                                                let v4023 : string = "$0.to_vec()"
                                                let v4024 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4022 v4023 
                                                v4024 
                                                #endif
                                                |> fun x -> _v3983 <- Some x
                                                let v4025 : Vec<uint8> = match _v3983 with Some x -> x | None -> failwith "base.run_target / _v3983=None"
                                                let v4040 : Vec<uint8> = method18(v4025)
                                                let v4041 : string = "std::string::String::from_utf8($0)"
                                                let v4042 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v4040 v4041 
                                                let v4043 : string = "$0.unwrap()"
                                                let v4044 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4042 v4043 
                                                let v4045 : string = "fable_library_rust::String_::fromString($0)"
                                                let v4046 : string = Fable.Core.RustInterop.emitRustExpr v4044 v4045 
                                                v4046 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v4049 : string = null |> unbox<string>
                                                v4049 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v4058 : string = null |> unbox<string>
                                                v4058 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v4067 : string = null |> unbox<string>
                                                v4067 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v4076 : string = null |> unbox<string>
                                                v4076 
                                                #endif
#else
                                                let v4083 : string = v3927 |> System.IO.File.ReadAllText
                                                v4083 
                                                #endif
                                                |> fun x -> _v3980 <- Some x
                                                let v4084 : string = match _v3980 with Some x -> x | None -> failwith "base.run_target / _v3980=None"
                                                let v4101 : string = "py"
                                                let v4102 : string = $"%A{struct (v4101, v4084)}"
                                                let v4109 : string = method156(v4102)
                                                let v4110 : string = __SOURCE_DIRECTORY__
                                                let v4111 : string = "polyglot"
                                                let v4112 : string = ".devcontainer"
                                                let v4113 : string = method19(v4111, v4112)
                                                let v4114 : US12 = method22(v4113, v4110)
                                                let v4123 : US3 =
                                                    match v4114 with
                                                    | US12_1(v4117) -> (* Error *)
                                                        let v4118 : US0 = US0_3
                                                        let v4119 : (unit -> string) = closure9()
                                                        let v4120 : (unit -> string) = closure10(v4117)
                                                        method27(v4118, v4119, v4120)
                                                        US3_1
                                                    | US12_0(v4115) -> (* Ok *)
                                                        US3_0(v4115)
                                                let v4139 : US3 =
                                                    match v4123 with
                                                    | US3_1 -> (* None *)
                                                        let v4126 : string = method29()
                                                        let v4127 : string = method19(v4111, v4112)
                                                        let v4128 : US12 = method22(v4127, v4126)
                                                        match v4128 with
                                                        | US12_1(v4131) -> (* Error *)
                                                            let v4132 : US0 = US0_3
                                                            let v4133 : (unit -> string) = closure9()
                                                            let v4134 : (unit -> string) = closure10(v4131)
                                                            method27(v4132, v4133, v4134)
                                                            US3_1
                                                        | US12_0(v4129) -> (* Ok *)
                                                            US3_0(v4129)
                                                    | US3_0(v4124) -> (* Some *)
                                                        US3_0(v4124)
                                                let v4143 : string =
                                                    match v4139 with
                                                    | US3_1 -> (* None *)
                                                        failwith<string> "Option does not have a value."
                                                    | US3_0(v4140) -> (* Some *)
                                                        v4140
                                                let v4144 : string = method19(v4143, v4111)
                                                let v4145 : string = method29()
                                                let v4148 : (unit -> string) = v4145.ToLower
                                                let v4149 : string = v4148 ()
                                                let v4158 : (unit -> string) = v4144.ToLower
                                                let v4159 : string = v4158 ()
                                                let v4166 : bool = v4149.StartsWith v4159 
                                                let v4169 : US12 =
                                                    if v4166 then
                                                        US12_1(v4159)
                                                    else
                                                        US12_0(v4159)
                                                let v4175 : Result<string, string> =
                                                    match v4169 with
                                                    | US12_1(v4172) -> (* Error *)
                                                        let v4173 : Result<string, string> = Error v4172 
                                                        v4173
                                                    | US12_0(v4170) -> (* Ok *)
                                                        let v4171 : Result<string, string> = Ok v4170 
                                                        v4171
                                                let v4176 : string = "true; let _result = $0.unwrap_or_else(|x| { //"
                                                let v4177 : bool = Fable.Core.RustInterop.emitRustExpr v4175 v4176 
                                                let v4178 : string = "x"
                                                let v4179 : string = Fable.Core.RustInterop.emitRustExpr () v4178 
                                                let v4180 : string = "true; $0 })"
                                                let v4181 : bool = Fable.Core.RustInterop.emitRustExpr v4179 v4180 
                                                let v4182 : string = "_result"
                                                let v4183 : string = Fable.Core.RustInterop.emitRustExpr () v4182 
                                                let v4184 : string = "target/spiral_builder"
                                                let v4185 : string = method19(v4183, v4184)
                                                let v4186 : string = "spiral_builder"
                                                let v4187 : string = method19(v4185, v4186)
                                                let v4188 : string = "packages"
                                                let v4189 : string = method19(v4187, v4188)
                                                let v4199 : string = "Python"
                                                let v4200 : string = method19(v4189, v4199)
                                                let v4201 : string = method19(v4200, v4109)
                                                let v4202 : System.IDisposable = method34(v4201)
                                                let v4203 : string = $"{v4186}.fs"
                                                let v4204 : string = method19(v4201, v4203)
                                                let v4205 : string = method134(v4204)
                                                method31(v4205, v4084)
                                                let v4206 : string list = []
                                                let v4209 : string seq = seq { for i = 0 to v4206.Length - 1 do yield v4206.[i] }
                                                let v4218 : (string -> (string seq -> string)) = String.concat
                                                let v4219 : string = "\\n        "
                                                let v4220 : (string seq -> string) = v4218 v4219
                                                let v4221 : string = v4220 v4209
                                                let v4228 : string = "Fable.Core"
                                                let v4229 : string = $"<PackageReference Include=\"{v4228}\" Version=\"*\" />"
                                                let v4230 : string list = []
                                                let v4233 : string list = v4229 :: v4230 
                                                let v4242 : string seq = seq { for i = 0 to v4233.Length - 1 do yield v4233.[i] }
                                                let v4251 : (string -> (string seq -> string)) = String.concat
                                                let v4252 : (string seq -> string) = v4251 v4219
                                                let v4253 : string = v4252 v4242
                                                let v4260 : string = $"{v4186}.fsproj"
                                                let v4261 : string = method19(v4201, v4260)
                                                let v4262 : string = method134(v4261)
                                                let v4263 : string = $"<Project Sdk=\"Microsoft.NET.Sdk\">"
                                                let v4264 : string = $"<PropertyGroup>"
                                                let v4265 : string = "\n"
                                                let v4266 : string = v4263 + v4265 
                                                let v4267 : string = v4266 + v4264 
                                                let v4268 : string = $"    <TargetFramework>net9.0</TargetFramework>"
                                                let v4269 : string = v4267 + v4265 
                                                let v4270 : string = v4269 + v4268 
                                                let v4271 : string = $"    <LangVersion>preview</LangVersion>"
                                                let v4272 : string = v4270 + v4265 
                                                let v4273 : string = v4272 + v4271 
                                                let v4274 : string = $"    <RollForward>Major</RollForward>"
                                                let v4275 : string = v4273 + v4265 
                                                let v4276 : string = v4275 + v4274 
                                                let v4277 : string = $"    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>"
                                                let v4278 : string = v4276 + v4265 
                                                let v4279 : string = v4278 + v4277 
                                                let v4280 : string = $"    <PublishAot>false</PublishAot>"
                                                let v4281 : string = v4279 + v4265 
                                                let v4282 : string = v4281 + v4280 
                                                let v4283 : string = $"    <PublishTrimmed>false</PublishTrimmed>"
                                                let v4284 : string = v4282 + v4265 
                                                let v4285 : string = v4284 + v4283 
                                                let v4286 : string = $"    <PublishSingleFile>true</PublishSingleFile>"
                                                let v4287 : string = v4285 + v4265 
                                                let v4288 : string = v4287 + v4286 
                                                let v4289 : string = $"    <SelfContained>true</SelfContained>"
                                                let v4290 : string = v4288 + v4265 
                                                let v4291 : string = v4290 + v4289 
                                                let v4292 : string = $"    <Version>0.0.1-alpha.1</Version>"
                                                let v4293 : string = v4291 + v4265 
                                                let v4294 : string = v4293 + v4292 
                                                let v4295 : string = $"    <OutputType>Exe</OutputType>"
                                                let v4296 : string = v4294 + v4265 
                                                let v4297 : string = v4296 + v4295 
                                                let v4298 : string = $"</PropertyGroup>"
                                                let v4299 : string = v4297 + v4265 
                                                let v4300 : string = v4299 + v4298 
                                                let v4301 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('FreeBSD'))\">"
                                                let v4302 : string = v4300 + v4265 
                                                let v4303 : string = v4302 + v4301 
                                                let v4304 : string = $"    <DefineConstants>_FREEBSD</DefineConstants>"
                                                let v4305 : string = v4303 + v4265 
                                                let v4306 : string = v4305 + v4304 
                                                let v4307 : string = $"</PropertyGroup>"
                                                let v4308 : string = v4306 + v4265 
                                                let v4309 : string = v4308 + v4307 
                                                let v4310 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Linux'))\">"
                                                let v4311 : string = v4309 + v4265 
                                                let v4312 : string = v4311 + v4310 
                                                let v4313 : string = $"    <DefineConstants>_LINUX</DefineConstants>"
                                                let v4314 : string = v4312 + v4265 
                                                let v4315 : string = v4314 + v4313 
                                                let v4316 : string = $"</PropertyGroup>"
                                                let v4317 : string = v4315 + v4265 
                                                let v4318 : string = v4317 + v4316 
                                                let v4319 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('OSX'))\">"
                                                let v4320 : string = v4318 + v4265 
                                                let v4321 : string = v4320 + v4319 
                                                let v4322 : string = $"    <DefineConstants>_OSX</DefineConstants>"
                                                let v4323 : string = v4321 + v4265 
                                                let v4324 : string = v4323 + v4322 
                                                let v4325 : string = $"</PropertyGroup>"
                                                let v4326 : string = v4324 + v4265 
                                                let v4327 : string = v4326 + v4325 
                                                let v4328 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Windows'))\">"
                                                let v4329 : string = v4327 + v4265 
                                                let v4330 : string = v4329 + v4328 
                                                let v4331 : string = $"    <DefineConstants>_WINDOWS</DefineConstants>"
                                                let v4332 : string = v4330 + v4265 
                                                let v4333 : string = v4332 + v4331 
                                                let v4334 : string = $"</PropertyGroup>"
                                                let v4335 : string = v4333 + v4265 
                                                let v4336 : string = v4335 + v4334 
                                                let v4337 : string = $"<ItemGroup>"
                                                let v4338 : string = v4336 + v4265 
                                                let v4339 : string = v4338 + v4337 
                                                let v4340 : string = $"    {v4221}"
                                                let v4341 : string = v4339 + v4265 
                                                let v4342 : string = v4341 + v4340 
                                                let v4343 : string = $"    <Compile Include=\"{v4205}\" />"
                                                let v4344 : string = v4342 + v4265 
                                                let v4345 : string = v4344 + v4343 
                                                let v4346 : string = $"</ItemGroup>"
                                                let v4347 : string = v4345 + v4265 
                                                let v4348 : string = v4347 + v4346 
                                                let v4349 : string = $"<ItemGroup>"
                                                let v4350 : string = v4348 + v4265 
                                                let v4351 : string = v4350 + v4349 
                                                let v4352 : string = $"    {v4253}"
                                                let v4353 : string = v4351 + v4265 
                                                let v4354 : string = v4353 + v4352 
                                                let v4355 : string = $"</ItemGroup>"
                                                let v4356 : string = v4354 + v4265 
                                                let v4357 : string = v4356 + v4355 
                                                let v4358 : string = $"</Project>"
                                                let v4359 : string = v4357 + v4265 
                                                let v4360 : string = v4359 + v4358 
                                                method31(v4262, v4360)
                                                let v4361 : string = "lib/python/fable/fable_modules"
                                                let v4362 : string = method19(v4183, v4361)
                                                let v4363 : string = $"fable_library"
                                                let v4364 : string = method19(v4362, v4363)
                                                let v4365 : string = $"fable_modules/fable_library"
                                                let v4366 : string = method19(v4201, v4365)
                                                method162(v4364, v4366)
                                                let v4367 : US33 = US33_1
                                                let struct (v4368 : int32, v4369 : string) = method163(v4367, v4201, v4101, v4262, v4169)
                                                let v4372 : bool = v4368 <> 0 
                                                let struct (v4757 : US3, v4758 : US3, v4759 : US3) =
                                                    if v4372 then
                                                        let v4379 : US0 = US0_4
                                                        let v4380 : (unit -> string) = closure152()
                                                        let v4381 : (unit -> struct (int32 * string)) = closure153(v4369, v4368)
                                                        method169(v4379, v4380, v4381)
                                                        let v4382 : US3 = US3_0(v4101)
                                                        let v4383 : US3 = US3_1
                                                        let v4384 : US3 = US3_0(v4369)
                                                        struct (v4382, v4383, v4384)
                                                    else
                                                        let v4385 : string = "true; let _result : Vec<_> = v3975.into_iter().map(|x| { //"
                                                        let v4386 : bool = Fable.Core.RustInterop.emitRustExpr () v4385 
                                                        let v4387 : string = "x"
                                                        let v4388 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v4387 
                                                        let v4389 : string = "fable_library_rust::String_::fromString($0)"
                                                        let v4390 : string = Fable.Core.RustInterop.emitRustExpr v4388 v4389 
                                                        let v4393 : string = "="
                                                        let v4394 : bool = v4390.Contains v4393 
                                                        let v4402 : string =
                                                            if v4394 then
                                                                v4390
                                                            else
                                                                let v4401 : string = $"\"{v4390}\":\"*\""
                                                                v4401
                                                        let v4403 : string = "true; $0 }).collect::<Vec<_>>()"
                                                        let v4404 : bool = Fable.Core.RustInterop.emitRustExpr v4402 v4403 
                                                        let v4405 : string = "_result"
                                                        let v4406 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v4405 
                                                        let v4407 : string = "fable_library_rust::NativeArray_::array_from($0)"
                                                        let v4408 : (string []) = Fable.Core.RustInterop.emitRustExpr v4406 v4407 
                                                        let v4411 : string seq = seq { for i = 0 to v4408.Length - 1 do yield v4408.[i] }
                                                        let v4420 : (string -> (string seq -> string)) = String.concat
                                                        let v4421 : string = ",\n"
                                                        let v4422 : (string seq -> string) = v4420 v4421
                                                        let v4423 : string = v4422 v4411
                                                        let v4430 : string = $"{{"
                                                        let v4431 : string = $"  \"name\": \"spiral_builder_{v4109}\","
                                                        let v4432 : string = v4430 + v4431 
                                                        let v4433 : string = $"  \"dependencies\": {{"
                                                        let v4434 : string = v4432 + v4433 
                                                        let v4435 : string = v4434 + v4423 
                                                        let v4436 : string = $"  }},"
                                                        let v4437 : string = v4435 + v4436 
                                                        let v4438 : string = $"    \"devDependencies\": {{"
                                                        let v4439 : string = v4437 + v4438 
                                                        let v4440 : string = $"  }},"
                                                        let v4441 : string = v4439 + v4440 
                                                        let v4442 : string = $"}}"
                                                        let v4443 : string = v4441 + v4442 
                                                        let v4444 : string = "package.json"
                                                        let v4445 : string = method19(v4201, v4444)
                                                        let v4446 : string = "../.."
                                                        let v4447 : string = method19(v4201, v4446)
                                                        let v4448 : string = method19(v4447, v4444)
                                                        method31(v4445, v4443)
                                                        let v4449 : string = ""
                                                        method31(v4448, v4449)
                                                        let v4450 : string = $"{v4186}.{v4101}"
                                                        let v4451 : string = method19(v4201, v4450)
                                                        let v4452 : US0 = US0_1
                                                        let v4453 : (unit -> string) = closure154()
                                                        let v4454 : (unit -> string) = closure155(v4451)
                                                        method203(v4452, v4453, v4454)
                                                        let v4457 : bool = true
                                                        let mutable _v4457 : string option = None 
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v4460 : bool = true
                                                        let mutable _v4460 : Vec<uint8> option = None 
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v4461 : string = "std::fs::read(&*$0).unwrap()"
                                                        let v4462 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4451 v4461 
                                                        v4462 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v4465 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        v4465 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v4474 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        v4474 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v4483 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        v4483 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v4492 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        v4492 
                                                        #endif
#else
                                                        let v4499 : (uint8 []) = v4451 |> System.IO.File.ReadAllBytes
                                                        let v4500 : string = "$0.to_vec()"
                                                        let v4501 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4499 v4500 
                                                        v4501 
                                                        #endif
                                                        |> fun x -> _v4460 <- Some x
                                                        let v4502 : Vec<uint8> = match _v4460 with Some x -> x | None -> failwith "base.run_target / _v4460=None"
                                                        let v4517 : Vec<uint8> = method18(v4502)
                                                        let v4518 : string = "std::string::String::from_utf8($0)"
                                                        let v4519 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v4517 v4518 
                                                        let v4520 : string = "$0.unwrap()"
                                                        let v4521 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4519 v4520 
                                                        let v4522 : string = "fable_library_rust::String_::fromString($0)"
                                                        let v4523 : string = Fable.Core.RustInterop.emitRustExpr v4521 v4522 
                                                        v4523 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v4526 : string = null |> unbox<string>
                                                        v4526 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v4535 : string = null |> unbox<string>
                                                        v4535 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v4544 : string = null |> unbox<string>
                                                        v4544 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v4553 : string = null |> unbox<string>
                                                        v4553 
                                                        #endif
#else
                                                        let v4560 : string = v4451 |> System.IO.File.ReadAllText
                                                        v4560 
                                                        #endif
                                                        |> fun x -> _v4457 <- Some x
                                                        let v4561 : string = match _v4457 with Some x -> x | None -> failwith "base.run_target / _v4457=None"
                                                        let v4578 : string = "# spiral_builder.process_python"
                                                        let v4579 : bool = v4561.Contains v4578 
                                                        let v4661 : string =
                                                            if v4579 then
                                                                v4561
                                                            else
                                                                let v4586 : string = "\";\".into()"
                                                                let v4587 : string = Fable.Core.RustInterop.emitRustExpr () v4586 
                                                                let v4588 : string = "),)"
                                                                let v4589 : string = v4588 + v4587 
                                                                let v4590 : string = "));"
                                                                let v4591 : string = v4561.Replace (v4589, v4590)
                                                                let v4592 : string = method179()
                                                                let v4595 : bool = true
                                                                let mutable _v4595 : string option = None 
                                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                                let v4596 : string = method136(v4591)
                                                                let v4597 : string = $"regex::Regex::new(&$0)"
                                                                let v4598 : string = "\\s\\sdefaultOf\\(\\);"
                                                                let v4599 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v4598 v4597 
                                                                let v4600 : string = "$0.unwrap()"
                                                                let v4601 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v4599 v4600 
                                                                let v4602 : string = $"$0.replace_all(&$1, &*$2)"
                                                                let v4603 : std_borrow_Cow<Str> = Fable.Core.RustInterop.emitRustExpr struct (v4601, v4596, v4592) v4602 
                                                                let v4604 : string = "String::from($0)"
                                                                let v4605 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4603 v4604 
                                                                let v4606 : string = "fable_library_rust::String_::fromString($0)"
                                                                let v4607 : string = Fable.Core.RustInterop.emitRustExpr v4605 v4606 
                                                                v4607 
                                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                                let v4610 : string = null |> unbox<string>
                                                                v4610 
                                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                                let v4619 : string = null |> unbox<string>
                                                                v4619 
                                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                                let v4628 : string = null |> unbox<string>
                                                                v4628 
                                                                #endif
#if FABLE_COMPILER_PYTHON
                                                                let v4637 : string = null |> unbox<string>
                                                                v4637 
                                                                #endif
#else
                                                                let v4644 : string = method180()
                                                                let v4645 : string = System.Text.RegularExpressions.Regex.Replace (v4591, v4644, v4592)
                                                                v4645 
                                                                #endif
                                                                |> fun x -> _v4595 <- Some x
                                                                let v4646 : string = match _v4595 with Some x -> x | None -> failwith "base.run_target / _v4595=None"
                                                                v4646
                                                        let v4662 : bool = v4579 = false
                                                        if v4662 then
                                                            let v4663 : string = $"{v4661}\n\n{v4578}\n"
                                                            method31(v4451, v4663)
                                                        let v4664 : string = $"python \"{v4451}\""
                                                        let v4665 : string = "TRACE_LEVEL"
                                                        let v4666 : string = "Verbose"
                                                        let v4667 : (struct (string * string) []) = [|struct (v4665, v4666)|]
                                                        let v4668 : System.Threading.CancellationToken option = None
                                                        let v4669 : (struct (string * string) []) = [||]
                                                        let v4670 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                        let v4671 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                        let v4672 : string option = None
                                                        let v4678 : Result<string, string> =
                                                            match v4169 with
                                                            | US12_1(v4675) -> (* Error *)
                                                                let v4676 : Result<string, string> = Error v4675 
                                                                v4676
                                                            | US12_0(v4673) -> (* Ok *)
                                                                let v4674 : Result<string, string> = Ok v4673 
                                                                v4674
                                                        let v4679 : string = "v4678.ok()"
                                                        let v4680 : string option = Fable.Core.RustInterop.emitRustExpr () v4679 
                                                        let v4681 : bool = true
                                                        let struct (v4682 : int32, v4683 : string) = method55(v4664, v4668, v4667, v4670, v4671, v4681, v4680)
                                                        let v4684 : int32 = v4667.Length
                                                        let v4685 : (string []) = Array.zeroCreate<string> (v4684)
                                                        let v4686 : Mut5 = {l0 = 0} : Mut5
                                                        while method58(v4684, v4686) do
                                                            let v4688 : int32 = v4686.l0
                                                            let struct (v4689 : string, v4690 : string) = v4667.[int v4688]
                                                            let v4691 : string = $"$env:{v4689}=''{v4690}''"
                                                            v4685.[int v4688] <- v4691
                                                            let v4692 : int32 = v4688 + 1
                                                            v4686.l0 <- v4692
                                                            ()
                                                        let v4695 : string seq = v4685 |> Seq.ofArray
                                                        let v4704 : (string -> (string seq -> string)) = String.concat
                                                        let v4705 : string = ";"
                                                        let v4706 : (string seq -> string) = v4704 v4705
                                                        let v4707 : string = v4706 v4695
                                                        let v4714 : string = $"pwsh -c '{v4707}; {v4664}'"
                                                        let v4715 : bool = v4682 = 0
                                                        let struct (v4754 : US3, v4755 : US3, v4756 : US3) =
                                                            if v4715 then
                                                                let v4718 : (string -> US3) = closure75()
                                                                let v4719 : (unit -> string) = closure156(v4683)
                                                                let v4720 : (exn -> US3) = closure157(v4451, v4683, v4714)
                                                                let v4721 : US3 = US3_1
                                                                let result = ref v4721
                                                                try
                                                                    result.Value <- v4719 () |> v4718 
                                                                with ex ->
                                                                    result.Value <- v4720 ex 
                                                                let v4722 : US3 = result.Value
                                                                let v4742 : string option =
                                                                    match v4722 with
                                                                    | US3_1 -> (* None *)
                                                                        let v4740 : string option = None
                                                                        v4740
                                                                    | US3_0(v4730) -> (* Some *)
                                                                        let v4733 : string option = Some v4730 
                                                                        v4733
                                                                let v4743 : string = "$0.unwrap()"
                                                                let v4744 : string = Fable.Core.RustInterop.emitRustExpr v4742 v4743 
                                                                let v4745 : US3 = US3_0(v4101)
                                                                let v4746 : US3 = US3_0(v4661)
                                                                let v4747 : US3 = US3_0(v4744)
                                                                struct (v4745, v4746, v4747)
                                                            else
                                                                let v4748 : US0 = US0_4
                                                                let v4749 : (unit -> string) = closure160()
                                                                let v4750 : (unit -> struct (int32 * string * string * string)) = closure161(v4451, v4683, v4682, v4714)
                                                                method125(v4748, v4749, v4750)
                                                                let v4751 : US3 = US3_0(v4101)
                                                                let v4752 : US3 = US3_1
                                                                let v4753 : US3 = US3_1
                                                                struct (v4751, v4752, v4753)
                                                        struct (v4754, v4755, v4756)
                                                struct (v4757, v4758, v4759)
                                            else
                                                let v4760 : US0 = US0_1
                                                let v4761 : (unit -> string) = closure162()
                                                let v4762 : (unit -> struct (std_string_String * clap_ArgMatches)) = closure163(v46, v45)
                                                method209(v4760, v4761, v4762)
                                                let v4763 : US3 = US3_1
                                                let v4764 : US3 = US3_1
                                                let v4765 : US3 = US3_1
                                                struct (v4763, v4764, v4765)
                                        struct (v4766, v4767, v4768)
                                struct (v4769, v4770, v4771)
                        let v4778 : string =
                            match v4772 with
                            | US3_1 -> (* None *)
                                let v4776 : string = ""
                                v4776
                            | US3_0(v4775) -> (* Some *)
                                v4775
                        let v4779 : string = "extension"
                        let v4783 : string =
                            match v4773 with
                            | US3_1 -> (* None *)
                                let v4781 : string = ""
                                v4781
                            | US3_0(v4780) -> (* Some *)
                                v4780
                        let v4784 : string = "code"
                        let v4788 : string =
                            match v4774 with
                            | US3_1 -> (* None *)
                                let v4786 : string = ""
                                v4786
                            | US3_0(v4785) -> (* Some *)
                                v4785
                        let v4789 : string = "output"
                        [|struct (v4779, v4778); struct (v4784, v4783); struct (v4789, v4788)|]
        | _ ->
            let v4794 : string = "extension"
            let v4795 : string = ""
            let v4796 : string = "code"
            let v4797 : string = "output"
            [|struct (v4794, v4795); struct (v4796, v4795); struct (v4797, v4795)|]
    let v4800 : string = "$0.to_vec()"
    let v4801 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v4799 v4800 
    let v4802 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v4803 : (struct (string * string) -> (std_string_String * std_string_String)) = closure165()
    let v4804 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v4801, v4803) v4802 
    let v4805 : string = "std::collections::BTreeMap::from_iter(v4804.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
    let v4806 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v4805 
    let v4807 : string = "serde_json::to_string(&v4806)"
    let v4808 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v4807 
    let v4809 : (serde_json_Error -> string) = method212()
    let v4810 : string = "$0.map_err(|x| $1(x))"
    let v4811 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v4808, v4809) v4810 
    let v4812 : string = "true; let _result = $0.map(|x| { //"
    let v4813 : bool = Fable.Core.RustInterop.emitRustExpr v4811 v4812 
    let v4814 : string = "x"
    let v4815 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v4814 
    let v4816 : string = "fable_library_rust::String_::fromString($0)"
    let v4817 : string = Fable.Core.RustInterop.emitRustExpr v4815 v4816 
    let v4818 : string = "true; $0 })"
    let v4819 : bool = Fable.Core.RustInterop.emitRustExpr v4817 v4818 
    let v4820 : string = "_result"
    let v4821 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr () v4820 
    let v4822 : Result<string, string> = method213(v4821)
    let v4823 : string = ""
    let v4824 : string = "}"
    let v4825 : string = v4823 + v4824 
    let v4826 : string = v4825 + v4824 
    let v4827 : string = v4826 + v4824 
    let v4828 : string = "{"
    let v4829 : string = v4823 + v4828 
    let v4830 : string = v4829 + v4828 
    let v4831 : string = "v4822 " + v4827 + "); " + v4830 + " // rust.fix_closure'"
    Fable.Core.RustInterop.emitRustExpr () v4831 
    let v4832 : string = "__result"
    let v4833 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = Fable.Core.RustInterop.emitRustExpr () v4832 
    v4833
and closure1 () (v0 : (string [])) : int32 =
    let v3 : (US0 -> struct (Mut0 * Mut1 * Mut2 * Mut3 * int64 option)) = closure2()
    let v4 : US0 = US0_0
    if State.trace_state.IsNone then State.trace_state <- v3 v4 |> Some
    let struct (v12 : Mut0, v13 : Mut1, v14 : Mut2, v15 : Mut3, v16 : int64 option) = State.trace_state.Value
    let v31 : US0 = US0_1
    let v32 : (unit -> string) = closure4()
    let v33 : (unit -> (string [])) = closure5(v0)
    method5(v31, v32, v33)
    let v34 : clap_Command = method0()
    let v35 : string = "clap::Command::get_matches($0)"
    let v36 : clap_ArgMatches = Fable.Core.RustInterop.emitRustExpr v34 v35 
    let v37 : US0 = v15.l0
    let v38 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = method14(v37, v36)
    let v39 : string = $"tokio::runtime::Builder::new_multi_thread().enable_all().build().unwrap()"
    let v40 : _ = Fable.Core.RustInterop.emitRustExpr () v39 
    let v41 : string = "v40.handle().block_on($0)"
    let v42 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr v38 v41 
    let v43 : string = "$0.unwrap()"
    let v44 : string = Fable.Core.RustInterop.emitRustExpr v42 v43 
    let v45 : US0 = v15.l0
    let v47 : bool =
        match v45 with
        | US0_2 -> (* Info *)
            true
        | _ ->
            false
    if v47 then
        v44 |> System.Console.WriteLine
        ()
    0
let v0 : (unit -> unit) = closure0()
let tests () = v0 ()
let v1 : ((string []) -> int32) = closure1()
let main args = v1 args
()
